{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/facebook","result":{"pageContext":{"posts":[{"excerpt":"\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\t\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"","html":"<blockquote>\n<p>\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"</p>\n</blockquote>\n<!-- more -->\n<p>最近Bot好像很夯，FB也在幾天前的F8大會上推出Messenger API，讓擁有粉絲頁的店家、企業、或是個人，能夠製作出Chat Bot來與使用者互動。事實上像是Slack、HipChat、telegram等通訊軟體都早已有類似的Bot api可以提供使用，並且在設計上跟Facebook現階段推出的 API 其實大同小異，甚至也已經有人將它整進Hubot framework中 <a href=\"https://github.com/chen-ye/hubot-fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hubot-fb</a>，連所謂的 <a href=\"https://medium.com/@tomazstolfa/the-future-of-conversational-ui-belongs-to-hybrid-interfaces-8a228de0bdb5#.b0tcmb607\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CUI - Conversational User Interface</a> 都出現了。</p>\n<p>對我來說，Chat Bot也只是另一種方式來解決使用者的問題，另一種相對新穎的媒介，找到痛點，並對症下藥這件事情是不會改變的！</p>\n<p>好，扯遠了。Facebook Messenger最大的優勢除了FB本身龐大的使用者外，還有粉絲專頁的功能可以操作，如同 Mark Zuckerberg 在F8 Keynote中提到的例子一樣，背後隱藏的商機與可能性非常大，因此還是有必要來玩一下Messenger API。這邊希望簡單記錄與並以中文說明如何產生你的第一個Messenger Bot，讓你夜深寂寞時能有人陪你聊天...</p>\n<p>值得一提的是，Facebook developer doc上面的說明算是非常清楚，需要完整文件支援的話可以移駕至此 <a href=\"https://developers.facebook.com/docs/messenger-platform/quickstart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FB messenger-platform doc</a></p>\n<h2 id=\"step-1---創建facebook-應用程式與facebook粉絲專頁\" style=\"position:relative;\"><a href=\"#step-1---%E5%89%B5%E5%BB%BAfacebook-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%88%87facebook%E7%B2%89%E7%B5%B2%E5%B0%88%E9%A0%81\" aria-label=\"step 1   創建facebook 應用程式與facebook粉絲專頁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1 - 創建Facebook 應用程式與Facebook粉絲專頁</h2>\n<p>還沒有在Facebook上面創建過應用程式的讀者，可以先連結到 <a href=\"https://developers.facebook.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.facebook.com/</a>\n進去後會看到右上角會有<strong>我的應用程式</strong>可以選擇</p>\n<p><img src=\"/image/fbdeveloper.png\" alt=\"FB developer\" title=\"FB developer\"></p>\n<p>選擇<strong>新增應用程式</strong>後，理論上會需要填寫一些基本資訊，必要填寫的有<strong>顯示名稱</strong>, <strong>聯絡電子郵件</strong> 與 <strong>網站網址</strong>\n這邊要注意一下，基本上你如果想要用Messenger API，你勢必會需要有一個server來養你的bot，若不想污染你自己目前的server環境，就創建一個新的吧！FB上的範例多數是以JS為主，當然你可以自行選用慣用的環境。</p>\n<p><img src=\"/image/fbapp-apply.png\" alt=\"FB App 申請\" title=\"FB App 申請\"></p>\n<p>接著看向左邊的Menu，在最下方地方有個Messenger，點選後會進入以下頁面</p>\n<p><img src=\"/image/messenger.png\" alt=\"Messenger 申請\" title=\"Messenger 申請\"></p>\n<p>重點有兩個地方，第一個是你必須要選擇一個粉絲專頁，在這邊選定好粉絲專頁後，後面產生的Token（權杖）會用來將你的app與粉絲專頁綁定，之後的messenger要透過此Token才能順利執行。第二個Webhooks的步驟下面會談到。</p>\n<p>創建粉絲專頁非常簡單，簡單到多放一張圖都是多餘，因此我們直接跳往下個步驟。\n<img src=\"/image/token.png\" alt=\"粉絲專頁選好後會出現Token\" title=\"Token\"></p>\n<h2 id=\"step-2---set-up-webhook\" style=\"position:relative;\"><a href=\"#step-2---set-up-webhook\" aria-label=\"step 2   set up webhook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 - Set up Webhook</h2>\n<p>當你選定好粉絲專頁後就要設定你的webhook，這邊就需要開始寫點code了！\n但先別急著動手！當你點選set up webhook後，會彈出一個視窗：</p>\n<p><img src=\"/image/webhook.png\" alt=\"Webhook setup\" title=\"Webhook setup\"></p>\n<p>這邊的url就要填寫你的server，記得要填寫適當的route，以FB的範例程式為例，如果你希望之後的bot api都走/webhook這個route當作進入點，那這邊的url可能就要填寫 <code class=\"language-text\">https://www.mybot.com/webhook/</code>\n這邊另外要注意一點，你的server必須要提供https，如果你跟筆者一樣先前沒有設定過ssl的話，推薦<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cloudflare</a>的free plan或是前陣子很紅的<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Let's encrypt</a></p>\n<p>當一切準備就緒後，把你server的route添加以下的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes.js\"><pre class=\"language-javascriptroutes.js\"><code class=\"language-javascriptroutes.js\">\t\tapp.get(&#39;/webhook/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>若你跟我一樣習慣把route分開，當然就會變成以下這樣，而webhook url 就是 <code class=\"language-text\">https://www.mybot.com/fbbot/</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">\t\troute.get(&#39;/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>這邊的<code class=\"language-text\">validation_token</code>就是上圖中的<strong>驗證權杖</strong>，基本上隨便你填寫什麼都可以。</p>\n<p>當你在server端加上route，並且把他填寫到上面的url欄位後，記得將下方的<strong>訂閱欄位</strong>的選項都打勾，不然你就沒辦法傳送訊息。接著就可以按下save，FB會emit一個get request去驗證你的webhook，成功後該區塊就會變成：</p>\n<p><img src=\"/image/webhooksuccess.png\" alt=\"Webhook successful\" title=\"Webhook successful\"></p>\n<h2 id=\"step-3---subscribe-the-app-to-the-page\" style=\"position:relative;\"><a href=\"#step-3---subscribe-the-app-to-the-page\" aria-label=\"step 3   subscribe the app to the page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3 - Subscribe the App to the Page</h2>\n<p>記得步驟一中我們有設定好粉絲專頁，並取得Token嗎？現在就需要利用該Token來讓我們的App與粉絲專頁進行綁定，只需要一行指令：\n<code class=\"language-text\">curl -ik -X POST \"https://graph.facebook.com/v2.6/me/subscribed_apps?access_token=&lt;token>\"</code></p>\n<p>如果進行到這邊都沒問題的話，就可以進入重頭戲了。</p>\n<h2 id=\"step-4---send-a-text--receive-message\" style=\"position:relative;\"><a href=\"#step-4---send-a-text--receive-message\" aria-label=\"step 4   send a text  receive message permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 - Send a text &#x26; Receive Message</h2>\n<p>Message的傳送是透過<code class=\"language-text\">POST</code>，我們再度新增一個route在你的webhook底下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>這樣你就能在server上接收到別人傳送給你的粉絲專頁的訊息。</p>\n<p>接著我們撰寫個簡單的<code class=\"language-text\">sendTextMessage Method</code>：\n(FB的範例是include request這個http client module，你可以用你自己習慣的方式)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsendtextmessage.js\"><pre class=\"language-javascriptsendtextmessage.js\"><code class=\"language-javascriptsendtextmessage.js\">var token = &quot;&lt;page_access_token&gt;&quot;;\nvar request = require(&#39;request&#39;);\n\nfunction sendTextMessage(sender, text) {\n  messageData = {\n    text:text\n  }\n  request({\n    url: &#39;https://graph.facebook.com/v2.6/me/messages&#39;,\n    qs: {access_token:token},\n    method: &#39;POST&#39;,\n    json: {\n      recipient: {id:sender},\n      message: messageData,\n    }\n  }, function(error, response, body) {\n    if (error) {\n      console.log(&#39;Error sending message: &#39;, error);\n    } else if (response.body.error) {\n      console.log(&#39;Error: &#39;, response.body.error);\n    }\n  });\n}</code></pre></div>\n<p>接著我們把這個Method放到前面的<code class=\"language-text\">POST</code>處理中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n      sendTextMessage(sender, &quot;Text received, echo: &quot;+ text.substring(0, 200));\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>接著去到粉絲專頁傳訊息看看吧！</p>\n<p><img src=\"/image/echo-robot.png\" alt=\"Echo Robot\" title=\"Echo Robot\"></p>\n<p>Yeah! you just build your first own echo robot!</p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>目前Messenger API的功能還很少，且需要許多認證才能讓你的bot正式使用，但我想之後一定會出現更簡易的設定方式，讓一般粉絲頁不用撰寫程式碼即可擁有自己的bot，否則也會有 Bot版本的 Wix 出現吧！</p>\n<p>其實Bot說穿了就是低成本、自動化去解決問題，背後的AI、NLP、ML等等才是重點！不過接下來我應該會先繼續研究Messnger API，並用Hubot adapter開發幾個slack與telegram bot玩玩！或許加上一些NLP處理～</p>","id":"35e9daa0-d17c-57af-9006-19f3f458c0a1","fields":{"slug":"super-easy-messenger-api"},"frontmatter":{"date":"2016-04-17T12:54:13.000Z","title":"超簡易 Messenger API 初探","tags":["messenger","api","facebook"],"type":"tech","slug":"super-easy-messenger-api"},"timeToRead":5}],"tagName":"facebook","type":"tech"}},"staticQueryHashes":["2123680655"]}