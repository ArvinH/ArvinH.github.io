{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/virtual-dom","result":{"pageContext":{"posts":[{"excerpt":"『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』","html":"<blockquote>\n<p>『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>過年除舊佈新，剛好趁這個機會來複習一下已經是老觀念的 Virtual DOM。很多人在講到 React 的時候都一定會提到 Virtual DOM，而問到 Virtual DOM 的好處時，就會說到實際 DOM 的操作成本很貴，所以透過 Virtual DOM 可以降低成本。</p>\n<p>你在除夕餐桌上這樣講可能沒問題，面試只講這樣應該不太好。</p>\n<p>畢竟你最後還是會操作實體 DOM 啊，這樣說明太簡化了。</p>\n<p>Virtual DOM 的由來可以從 MVC 和 MVVM 的架構追溯起，主要都是為了解決前端頁面呈現、資料更動、使用者操作這三種狀態交互作用產生的複雜性，MVC 提供了一個解法，MVVM 提出的 View Model 有了優化的方案，還有 data 與 view 雙向綁定的方式等等，而 React 提出了另一種思路，但那不是我今天的重點，有興趣且還不知道這些名詞是什麼的讀者可以去搜尋看看，有很多文章在說明這些資訊與歷史。</p>\n<p>React 的 Virtual DOM 是因應其數據與 UI 更新繪製的特殊思路而提出的效能解決方案。</p>\n<p>React 希望在資料更新時，能夠直接重新渲染頁面，不用主動去探究是數據的哪部份發生變化，要對應去更新頁面哪一部分的 DOM。但頁面重新渲染的成本可是更高，所以才需要 Virtual DOM 作為緩衝，透過資料更新後，重新繪製 Virtual DOM，與實體 DOM 進行 Diff，最後再把差異部分 Patch 上去，這不僅修正了重新渲染的成本問題，也降低了 data 與 view 交互更新的複雜度，提高了 developer 的開發體驗。</p>\n<p>說了這麼多，其實今天就只是單純想自己手刻一個 Virtual DOM 來理解一下該怎麼實現這樣的功能，畢竟知道了概念，總覺得手刻應該不難。\n手刻 Virtual DOM 其實也沒什麼太大意義，但很多時候就是 for fun，然後做個記錄。</p>\n<p>主要參考至 <a href=\"https://twitter.com/ycmjason\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ycmjason</a> 的 <a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">talk</a> 與 <a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a>，非常推薦欣賞，講者的熱情完全掩蓋掉音訊不佳的缺點，又很清楚地介紹了 VDOM 實作。</p>\n<h2 id=\"所以virtual-dom-到底長什麼樣子\" style=\"position:relative;\"><a href=\"#%E6%89%80%E4%BB%A5virtual-dom-%E5%88%B0%E5%BA%95%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"所以virtual dom 到底長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以，Virtual DOM 到底長什麼樣子？</h2>\n<p>Virtual DOM 就只是個 javascript plain object，並且模仿 Actual DOM 的結構（但當然簡化很多）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'v-element'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>一個基本的 VDOM，我們只需要元素名稱（tagName）、元素屬性（attrs）與其 Children list（既然是虛擬 DOM，這個 plain object 裡面的屬性其實隨便你取名，只要對應得到實際 DOM 即可）。</p>\n<p>根據這個想法，我們可以模仿現存的 VDOM lib，提供一個 <code class=\"language-text\">createElement</code> 的 function：</p>\n<div class=\"gatsby-highlight\" data-language=\"jscreateelement.js\"><pre class=\"language-jscreateelement.js\"><code class=\"language-jscreateelement.js\">export default (tagName, { attrs = {}, children = [] }) =&gt; {\n  const vElement = Object.create(null);\n\n  Object.assign(vElement, {\n    tagName,\n    attrs,\n    children,\n  });\n\n  return vElement;\n};</code></pre></div>\n<blockquote>\n<p>Note: 利用 <code class=\"language-text\">Object.create(null)</code> 與 <code class=\"language-text\">Object.assign</code> 的方式產生物件，可以避免直接採用 Object literals 的方式會繼承到 object prototype 的屬性。</p>\n</blockquote>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\nconsole.log(vRootApp);</code></pre></div>\n<p>結果：</p>\n<p><img src=\"/image/vdom-createElement.png\" alt=\"vdom-createElement\"></p>\n<h2 id=\"從-virtual-dom-到-real-dom\" style=\"position:relative;\"><a href=\"#%E5%BE%9E-virtual-dom-%E5%88%B0-real-dom\" aria-label=\"從 virtual dom 到 real dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>從 Virtual DOM 到 Real DOM</h2>\n<p>有了 Virtual DOM，我們還需要一個 <code class=\"language-text\">render</code> 函數來將其繪製到頁面上。方法很簡單，我們只需要 <code class=\"language-text\">document.createElement</code>、<code class=\"language-text\">setAttribute</code> 與 <code class=\"language-text\">appendChild</code> 三個 web api 即可完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(renderElem(child));\n  }\n  return elem;\n};\nexport default renderElem;</code></pre></div>\n<p>根據 <code class=\"language-text\">tagName</code> 使用 <code class=\"language-text\">document.createElement</code> 來建立實際的 DOM 物件，並且將 <code class=\"language-text\">attrs</code> 一個一個 <code class=\"language-text\">setAttribute</code> 到實際的 DOM 元素上；最後再將 <code class=\"language-text\">children</code> 遞迴丟入 <code class=\"language-text\">renderElem</code> 函數中，將所有小孩的實際 DOM object 都建立好並 <code class=\"language-text\">appendChild</code> 到上層的實際 DOM 物件上，最後將完整的 real DOM object 回傳出去。</p>\n<p>以概念來說基本上這樣就完成了，但可以讓他在完整一點，提供 <code class=\"language-text\">textNode</code> 的支援，利用 <code class=\"language-text\">document.createTextNode</code> 來產生純 string 的元素，稍微修改 <code class=\"language-text\">render.js</code> 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(render(child));\n  }\n  return elem;\n};\nconst render = (vNode) =&gt; {\n  if (typeof vNode === &#39;string&#39;) {\n    return document.createTextNode(vNode);\n  }\n  return renderElem(vNode);\n};\nexport default render;</code></pre></div>\n<p>從 <code class=\"language-text\">render</code> 函數回傳的基本上就會是一顆完整的 Virtual DOM Tree 了，舉個例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vRootApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello VDOM'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'http://placekitten.com/200/300'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootApp <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vRootApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>結果如下，Virtual DOM 就是個 Javascript plain object，而經由 <code class=\"language-text\">render</code> 函數回傳的即是包含實際 DOM 屬性的 Real DOM：</p>\n<p><img src=\"/image/vDom-render-actualDOM.png\" alt=\"Render to real dom\"></p>\n<h3 id=\"掛到頁面上吧\" style=\"position:relative;\"><a href=\"#%E6%8E%9B%E5%88%B0%E9%A0%81%E9%9D%A2%E4%B8%8A%E5%90%A7\" aria-label=\"掛到頁面上吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>掛到頁面上吧！</h3>\n<p>透過 <code class=\"language-text\">render</code> 我們有了實體 DOM，但這樣還沒辦法在頁面上顯示，需要有個類似 <code class=\"language-text\">ReactDOM.render</code> 的方法來幫助我們實現：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmount.js\"><pre class=\"language-jsmount.js\"><code class=\"language-jsmount.js\">export default (element, targetNode) =&gt; {\n  targetNode.appendChild(element);\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\nimport render from &#39;./render&#39;;\nimport mount from &#39;./mount&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    &#39;Hello VDOM&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\n\nconst rootApp = render(vRootApp);\nmount(rootApp, document.getElementById(&#39;rootApp&#39;));</code></pre></div>\n<p>很簡單，就把我們產生的 Real DOM <code class=\"language-text\">appendChild</code> 到 targetNode 下就好。</p>\n<p>或是也能用 <code class=\"language-text\">targetNode.replaceWith(element);</code> 的方式直接取代掉 targetNode。（不過要注意一下 IE 是無法使用的喔！）</p>\n<p><img src=\"/image/mount-to-html.png\" alt=\"Mounted DOM\"></p>\n<h1 id=\"diff-virtual-dom---reconciliation\" style=\"position:relative;\"><a href=\"#diff-virtual-dom---reconciliation\" aria-label=\"diff virtual dom   reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diff Virtual DOM - Reconciliation</h1>\n<p>知道怎麼產生 Virtual DOM 並繪製到頁面上後，也是時候進入重頭戲了！</p>\n<p>如前言所說，Virtual DOM 作為我們操作 Real DOM 的一層緩衝，我們比較經過狀態變化後產生的新舊 Virtual DOM 來找出實際需要更新的 Real DOM 位置，如此一來，儘管每次都重新 Render，實際更新的 DOM 也不會是全部，可以大幅改善直接重新渲染的效能問題。</p>\n<p>而 tree diff 的演算法其實很複雜，如果用 <a href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tree Edit Distance</a> 的方式遞迴檢查每個節點，複雜度將可達到 O(n^3)，是非常驚人的數字，幾乎無法在短時間處理完，因此 React 所提出的 reconciliation 制定了一些策略，來將複雜度從 O(n^3) 降至 O(n)。<a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官方文檔其實說明得很清楚</a>。</p>\n<p>主要有兩個假設：</p>\n<ol>\n<li>只需要比較同一層的節點，同一層內的元素若擁有不同的 type，往下長出的樹就會不同。</li>\n<li>同樣 type 的元件，開發者可以使用 <code class=\"language-text\">key</code> 這個 props 來決定其子樹是否需要重新 render。</li>\n</ol>\n<p>如假設一提及，我們只比較新舊兩棵 Virtual DOM Tree 中，同個父節點下的所有子節點，若發現某個節點不存在了，那就整個子樹都會刪除不去進一步比較。</p>\n<p><img src=\"/image/vdom-level-comparison.png\" alt=\"只比同 level 的 node\"></p>\n<p>這樣做的意思就是說，如果今天發生了一些跨層級的操作，像是整顆子樹被搬移到另一個節點上，對 React 來說，會是刪掉原有的子樹，然後重新在新的位置建立一模一樣的子樹出來：</p>\n<p><img src=\"/image/vdom-cross-level-modify.png\" alt=\"刪掉原子樹，在新位置重建\"></p>\n<blockquote>\n<p>Note: 實際上 React 在這兩個假設下，還做了許多更細節的事情（component diff、element diff），可以先去參考這篇很久之前的<a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，再去閱讀 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React fiber 的介紹</a>。</p>\n</blockquote>\n<p>基於這兩個假設我們可以開始實作簡單版的 Virtual DOM Diffing 演算法，基本上有四個 cases 處理：</p>\n<ol>\n<li>newTreeRoot 為 undefined，也就是某個節點被刪除了。</li>\n<li>兩個 Node 都是純字串。</li>\n<li>一個 Node 為純字串，一個 Node 為 Virtual Element。</li>\n<li>新舊 TreeRoot 的 TagName 不同。</li>\n</ol>\n<p>根據這四種 cases 我們個別處理，並且回傳一個 <code class=\"language-text\">patch</code> 函數，供之後來將 diff 完的結果 attach 到 Real DOM 上 （Note: r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  // 假設 oldVTreeRoot 一定都存在，只有 newVTreeRoot 有機會被刪除，也就是 undefined\n  if (newVTreeRoot === undefined) {\n    // 回傳 patch 函數，會接收 Real DOM，這邊 r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM\n    return rNode =&gt; {\n      // 因為新的 Virtual DOM Tree 是空的，所以回傳的 Patch 函式就是直接把 Real DOM 刪除。\n      rNode.remove();\n      return undefined;\n    }\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // 這邊包含兩種 cases：\n      // Case 1：新舊 Virtual DOM Tree 其中一個為 string，一個為 Virtual Node，所以當然會 !==\n      // Case 2：是兩者都為 string，但 !==\n      // 我們直接根據新的 Virtual Tree render 新的 Real Tree，並 replace 掉原本的 Real Tree\n      return rNode =&gt; {\n          // 回傳 patch 函數\n          const rNewNode = render(newVTreeRoot);\n          rNode.replaceWith(rNewNode);\n          return rNewNode;\n       };\n    } else {\n      // 若都為 string 且值相同，那就不用改。\n      return rNode =&gt; rNode; // 回傳 patch 函數\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n    // 根據優化 Tree diffing 演算法的假設一，只要 tagName 不同，我們就直接重新 render。\n    return rNode =&gt; {\n      // 回傳 patch 函數\n      const rNewNode = render(newVTreeRoot);\n      rNode.replaceWith(rNewNode);\n      return rNewNode;\n    };\n  }\n  // ...\n};\nexport default diff;</code></pre></div>\n<p>聰明的你看到這邊就會發問了：tag name 相同的 case 沒有處理到啊？</p>\n<p>沒錯，如果新舊兩棵 Virtual Tree 的 tag name 都一樣，那我們還得比 attributes，而要比較兩個節點的所有 attributes，不如直接 replace 上新的就好。但要注意，因為 attributes 很多，所以會產生多個 patch 函數需要被 apply 到 Real DOM 上，我們額外用一個陣列暫存，最後回傳一個 wrapper patch 函數，把所有暫存的 patch 函數都 apply 到傳進來的 Real DOM ：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffattrs.js\"><pre class=\"language-jsdiffattrs.js\"><code class=\"language-jsdiffattrs.js\">const diffAttrs = (oldAttrs, newAttrs) =&gt; {\n  // 因為 attributes 很多，需要一個 array 來存所有需要的 patch 函數\n  const patches = [];\n  // 放上新的 attributes\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push(rNode =&gt; {\n      // 暫存 patch 函數\n      rNode.setAttribute(k, v);\n      return rNode;\n    });\n  }\n  // 移除舊的 attributes\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push(rNode =&gt; {\n        // 暫存 patch 函數\n        rNode.removeAttribute(k);\n        return rNode;\n      });\n    }\n  }\n  // 最後傳出去的外層 patch 函數\n  return rNode =&gt; {\n    for (const patch of patches) {\n      // 把每個暫存的 patch 函數都 apply 到 Real DOM 上\n      patch(rNode);\n    }\n    return rNode;\n  };\n};\nexport default diffAttrs;</code></pre></div>\n<p>處理完 attributes 後，我們還得考慮 children，diff children 的方式其實跟 diff 整棵樹一樣，但我們要考慮到子樹的長度：</p>\n<ol>\n<li><code class=\"language-text\">oldVChildren.length === newVChildren.length</code>，那就直接 <code class=\"language-text\">diff(oldVChildren[i], newVchildren[i])</code>，i 從 0 到 <code class=\"language-text\">oldVChildren.length</code>。</li>\n<li><code class=\"language-text\">oldVChildren.length > newVChildren.length</code>，跟 case 1 其實一樣，因為新子樹比較少，就代表有 Node 被刪除，在我們原本的 diff 函式中有處理了。</li>\n<li><code class=\"language-text\">oldVChildren.length &lt; newVChildren.length</code>，新子樹比較長，那就先把舊子樹的所有點先 update 好，再把剩餘的新子樹 patch 上去。</li>\n</ol>\n<p>從上述三個 cases 來看，我們橫豎都需要 loop oldVChildren 一次，最後若有多餘的 newVChildren 再想辦法 update 上去。另外，這邊一樣需要暫存多個 patch 函數，實作細節我註解在 code 裡比較清楚，最後回傳的 patch 函數比較特別：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffchildren.js\"><pre class=\"language-jsdiffchildren.js\"><code class=\"language-jsdiffchildren.js\">const diffChildren = (oldVChildren, newVChildren) =&gt; {\n  // 無論如何都 loop 過 oldVChildren 一次，把所有 diff 回傳的 patch 函數暫存在 childrenPatches 內\n  // 這是一定會 apply 到 old tree 的部分。\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) =&gt; {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n  // 接著我們看看 `newVChildren` 是否有多餘的子樹需要處理\n  // 若有，我們產生的 patch 函數就是單純 `render` 出 Real Node 並且\n  // appendChild 到 patch 傳進的 Real Node 上（實際要被 patch 的 parent 節點）\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push(rNode =&gt; {\n      rNode.appendChild(render(additionalVChild));\n      return rNode;\n    });\n  }\n  return rParent =&gt; {\n    // 由於這是 children 的 patch，吃進來的會是 parent 的 Real DOM\n    // 我們要抓出 `rParent.childNodes` 來針對 old tree 做 patch\n    // zip 函數其實就是 lodash 的 zip，成對將 childPatches, rParent.childNodes 的元素並排傳出，這樣比較簡潔\n    for (const [patch, rChild] of zip(childPatches, rParent.childNodes)) {\n      patch(rChild);\n    }\n    // 最後把 new tree 多餘的 patches 直接 patch 到 parent 的 Real DOM 下即可（因為我們是 appendChild）\n    for (const patch of additionalPatches) {\n      patch(rParent);\n    }\n    return rParent;\n  };\n};</code></pre></div>\n<p>最後在我們原本的 <code class=\"language-text\">diff.js</code> 中的最後面加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  if (newVTreeRoot === undefined) {\n    // ....\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // ....\n    } else {\n      // ....\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n      // ....\n  }\n  const patchAttrs = diffAttrs(oldVTreeRoot.attrs, newVTreeRoot.attrs);\n  const patchChildren = diffChildren(oldVTreeRoot.children, newVTreeRoot.children);\n\n  return rNode =&gt; {\n    patchAttrs(rNode);\n    patchChildren(rNode);\n    return rNode;\n  };\n};\nexport default diff;</code></pre></div>\n<p>完整的 diff code 可以看這邊 <a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<p>到這邊為止，Virtual DOM 算是告一段落了！</p>\n<h2 id=\"最後修改下-mainjs做點變化讓大家看製作出的-vdom-效果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BF%AE%E6%94%B9%E4%B8%8B-mainjs%E5%81%9A%E9%BB%9E%E8%AE%8A%E5%8C%96%E8%AE%93%E5%A4%A7%E5%AE%B6%E7%9C%8B%E8%A3%BD%E4%BD%9C%E5%87%BA%E7%9A%84-vdom-%E6%95%88%E6%9E%9C\" aria-label=\"最後修改下 mainjs做點變化讓大家看製作出的 vdom 效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後修改下 main.js，做點變化讓大家看製作出的 VDOM 效果</h2>\n<p>我們讓 <code class=\"language-text\">createVApp</code> 柯里化，多傳一個參數 <code class=\"language-text\">count</code> 進去改變 attributes 跟圖片尺寸，接著 <code class=\"language-text\">setInterval</code> 讓每兩秒產生一個隨機數字當作 <code class=\"language-text\">count</code> 值，用來 update 我們的節點：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">const createVApp = count =&gt; createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n    dataCount: count, // we use the count here\n  },\n  children: [\n    &#39;Hello Kitty&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: `http://placekitten.com/${count}00/${count}00`,\n      },\n    }),\n  ],\n});\n\nlet vApp = createVApp(0);\nconst rApp = render(vApp);\nlet rRootEl = mount(rApp, document.getElementById(&#39;rootApp&#39;));\nsetInterval(() =&gt; {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n  // 每次 patch 完就 assgin 回原有變數，這樣下個 interval 才會抓到更新的樹\n  rRootEl = patch(rRootEl);\n  vApp = vNewApp;\n}, 2000);</code></pre></div>\n<p>效果如下，可以看到圖片一直變動，但是我們真的只改到了需要改的節點與 attributes，並不會整個頁面重新刷新：</p>\n<p><img src=\"/image/vdom-demo.gif\" alt=\"demo\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然沒辦法跟市面上實際的 VDOM 相提並論，但是從這簡單的實作可以很清楚的知道整個概念與要解決的問題，我覺得是蠻不錯的小練習，接下來再去看 React 或是 Vue 在這方面的實作應該會比較有頭緒一些！\n最後再附上一次 codesandbox 連結讓想玩的人直接試試：<a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 源碼剖析系列 － 不可思議的 react diff</a></li>\n<li><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深度剖析：如何实现一个 Virtual DOM 算法</a></li>\n</ol>","id":"17b2e615-d357-52dc-8e0a-2cd83e9dfcbb","fields":{"slug":"vdom-from-scratch"},"frontmatter":{"date":"2019-02-04T11:19:30.000Z","title":"從頭打造一個簡單的 Virtual DOM","tags":["virtual dom","react","javascript","web"],"type":"tech","slug":"vdom-from-scratch"},"timeToRead":13}],"tagName":"virtual dom","type":"tech"}},"staticQueryHashes":["2123680655"]}