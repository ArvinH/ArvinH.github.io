{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/chrome-dev-summit","result":{"pageContext":{"posts":[{"excerpt":"Interviewer: Explain deadlock to me and you're hired. Developer: Hire me and I'll explain deadlock to you.","html":"<blockquote>\n<p>Interviewer: Explain deadlock to me and you're hired.</p>\n</blockquote>\n<blockquote>\n<p>Developer: Hire me and I'll explain deadlock to you.</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>一陣子沒有關注 CSS 的最新發展，最近趁著年假補帶 2019 Google Chrome Summit 時，看到這場 talk - <a href=\"https://youtu.be/-oyeaIirVC0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next-generation web styling</a>，裡面提到不少有趣的新屬性，透過這篇文章整理一下內容，分享給各位與未來的我。\n註：官方在 12 月初也發佈了<a href=\"https://web.dev/next-gen-css-2019/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文字版本</a>，習慣閱讀原文的讀者可以參考看看。</p>\n<h1 id=\"新世代的css\" style=\"position:relative;\"><a href=\"#%E6%96%B0%E4%B8%96%E4%BB%A3%E7%9A%84css\" aria-label=\"新世代的css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>新世代的...CSS</h1>\n<ol>\n<li>scroll-snap - native scroll inertia and decelerations</li>\n<li>focus-within - solving focus accessibility within elements</li>\n<li>@media (prefers-*) - considerately adjust your UI/UX to a user's device preferences via Media Query hooks provided by browser</li>\n<li>logical properties - dynamic directionality</li>\n<li>sticky situations - keeping UI within the viewport</li>\n<li>backdrop-filter - style adjustments behind an element</li>\n<li>:is() - formerly :any() &#x26;&#x26; :matches()</li>\n<li>Grid-gap</li>\n<li>CSS Houdini - a low-level API for CSS</li>\n<li>typed OM - CSS values as JavaScript objects rather than strings</li>\n<li>Paint API - create your own paint functions using a canvas-like syntax</li>\n<li>animation worklet - off the main thread animation</li>\n<li>Others - size, aspect-ratio, min(), max(), clamp(), list style type, display: outer inner</li>\n</ol>\n<p>演講中洋洋灑灑介紹了 12 種以上的 CSS 新屬性與新功能，雖然其中有幾位老朋友在我之前的文章 - <a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 魔術師 Houdini API 介紹</a> 有說明過，但大部分的新屬性還是令人感到振奮！</p>\n<h2 id=\"scroll-snap\" style=\"position:relative;\"><a href=\"#scroll-snap\" aria-label=\"scroll snap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scroll-snap</h2>\n<p>看到 snap 自然反應先想到薩諾斯彈指消滅一半人口，但其實字面上還有迅速回復的意思，而 scroll-snap，顧名思義就是要讓你在 scroll 時，能夠迅速回到設定的 snap point。這麼說有點抽象，回想一下你使用過的 Carousel 套件，大多數當你滑動圖片超過一半距離時，套件會自動幫你將下一張圖片拉到正中間，若是滑動小於一半距離，則會彈回至原本的圖片，就像這樣：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/f271a7cbda1641efa2ecc6dda50d27cf.gif\" alt=\"Demo\"></p>\n<p>scroll-snap 主要提供的兩個屬性：<code class=\"language-text\">scroll-snap-type</code> 與 <code class=\"language-text\">scroll-snap-align</code> 就可以讓你直接透過 CSS 達到一樣效果，而且擁有足夠的調整彈性。</p>\n<p>Demo：</p>\n<p class=\"codepen\" data-height=\"430\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"Exawayy\" style=\"height: 430px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/Exawayy\">\n  scroll-snap example</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><code class=\"language-text\">scroll-snap-type</code> 作用在 scroll container 上頭，用來表明要用哪種 type 的 scroll 與 scroll 的方向。（註：scroll container　指的是擁有 <code class=\"language-text\">overflow: scroll|auto</code> 屬性，且其內元素足以造成 overflow 的 container。）</p>\n<p>而比起上述一般 carousel 套件預設的行為（移動小於一半距離拉回前一張圖），透過給予 <code class=\"language-text\">scroll-snap-align</code> 不同的屬性：<code class=\"language-text\">start</code>、<code class=\"language-text\">end</code> 和 <code class=\"language-text\">center</code>，可以自行決定 snap point，告知內容應該要對齊到 scroll container 中的哪個點。</p>\n<p>你可以從上面的 Codepen demo link 去修改 <code class=\"language-text\">scroll-snap-align</code> 看看，有什麼不同結果。</p>\n<p>另外，如果你不想讓每次 snap 都對齊邊緣，能稍微露出前一張圖的內容，可以透過 <code class=\"language-text\">scroll-padding</code> 與 <code class=\"language-text\">scroll-margin</code> 的調整來達成。不過注意，兩者的應用對象有所不同。</p>\n<p><code class=\"language-text\">scroll-padding</code> 需要應用在 scroll container 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.scroller section</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 <code class=\"language-text\">scroll-margin</code> 則是運用在 container 內的 children 上頭：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.scroller section</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-margin</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>兩者效果相同：</p>\n<p class=\"codepen\" data-height=\"428\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"jOEGbdQ\" style=\"height: 428px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example-2\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/jOEGbdQ\">\n  scroll-snap example-2</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>這對於你的 scroll container 中有 fixed 的元素時很有幫助：</p>\n<p class=\"codepen\" data-height=\"420\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"NWPaGmL\" style=\"height: 420px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example-fixedHeader\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/NWPaGmL\">\n  scroll-snap example-fixedHeader</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>更多細節，<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap/Basic_concepts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 上有蠻完整的說明</a>。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/10d10829177d46adab0c0ee8d582b217.png\" alt=\"scroll-snap-caniuse\"></p>\n<h2 id=\"focus-within\" style=\"position:relative;\"><a href=\"#focus-within\" aria-label=\"focus within permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>focus-within</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2019/10/13/web-accessibility-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Accessibility 的重要性</a>這篇文章中，有提到過元素可聚焦性的重要，讓使用者能用 tab 在網頁各元素間切換。但實作上常常遇到一個問題，就是當我們利用 <code class=\"language-text\">:focus</code> 僞類別製作 Menu 的下拉選單，讓子元素在父元素被 focus 後顯示出來時，tab 切換會失敗，因為當你 tab focus 到子元素時，父元素就失去 focus 狀態，子元素也因應消失：</p>\n<p><a href=\"https://web.dev/next-gen-css-2019/#:focus-within\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google 的圖畫</a>說明很清楚：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/3f70bc94fb30417c8a5a2b5bd83b6b5e.png\" style=\"max-width: 700px\">\n<p>但若是換成 <code class=\"language-text\">focus-within</code>，就不再有這問題了，他會在父元素被 focus 時觸發：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.menu:focus-within</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> visible<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"abzLBrP\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"focus-within-example\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/abzLBrP\">\n  focus-within-example</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/9af24cbb0e80433b8d43b184c76822d6.png\" alt=\"caniuse-focuswithin\"></p>\n<h2 id=\"media-prefers-\" style=\"position:relative;\"><a href=\"#media-prefers-\" aria-label=\"media prefers  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@media (prefers-*)</h2>\n<p>Media Queries 讓我們容易實作 RWD 設計，而現在最新的 Media Queries 可以讓我們偵測到使用者 OS-level 的系統偏好設定，例如 dark-mode，或是低階設備可以開啟 <code class=\"language-text\">prefers-reduced-motion</code> 來降低動畫節省資源。</p>\n<p>這些能夠自動偵測系統偏好，並給予回應的 Media Queries 有：</p>\n<p><a href=\"https://developers.google.com/web/updates/2019/03/prefers-reduced-motion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-reduced-motion</a>\n<a href=\"https://web.dev/prefers-color-scheme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-color-scheme</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-contrast</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-transparency\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-reduced-transparency</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">forced-colors</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">inverted-colors</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/light-level\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">light-level</a></p>\n<p>目前最新版的 Chrome (ver. 79) 已經有提供 <code class=\"language-text\">prefers-reduced-motion</code> 與 <code class=\"language-text\">prefers-color-scheme</code> 的 emulation，只要打開 Devtool，到 <code class=\"language-text\">Rendering</code> tab 下就能看到：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/ec593dddc40d4030bbdb5a7f2bf99d14.png\" alt=\"devtool @media emulation\"></p>\n<p>在演講中，講者 Adam 特別強調，<code class=\"language-text\">reduced-motion</code> 不是 <code class=\"language-text\">no-motion</code>，使用者想要少一點動畫，而非完全沒有動畫，可以從 演講中的範例感受一下（<a href=\"https://web.dev/next-gen-css-2019/#media-queries-level-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>、<a href=\"https://codepen.io/argyleink/pen/RwwZMKm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen demo</a>）：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/6ca565ec03eb439a9b66f5de287d062e.gif\" alt=\"reduced-motion\"></p>\n<h2 id=\"logical-properties\" style=\"position:relative;\"><a href=\"#logical-properties\" aria-label=\"logical properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logical properties</h2>\n<p>身為前端工程師，或多或少都會處理 i18n 的問題，在網頁排版上，不同語言間的 writing system 可能會造成我們需要個別為不同的語言客製化設定 css style，來調整 margin、padding 等等，而 Logical properties 就是希望能用更有效率、更好維護的方式來解決這問題。 <a href=\"https://web.dev/next-gen-css-2019/#logical-properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">image ref</a></p>\n<p>這是我們熟知的 box model：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/9d89a63601464607836370802e092ef5.png\" style=\"max-width: 700px\">\n<p>Logical properties 將其改為：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/78a8cb5f4113482a8f009f2400743435.png\" style=\"max-width: 700px\">\n<p>差別在於從原本單純 <code class=\"language-text\">top</code>、<code class=\"language-text\">down</code>、<code class=\"language-text\">left</code>、<code class=\"language-text\">right</code> 外，多了 <code class=\"language-text\">block-*</code> 與 <code class=\"language-text\">inline-*</code> 兩個維度，根據使用語言的不同，瀏覽器會自動調整 <code class=\"language-text\">block-*</code> 與 <code class=\"language-text\">inline-*</code> 代表的屬性，例如在英文的寫作系統上，<code class=\"language-text\">block-start</code> 就代表 <code class=\"language-text\">top</code>，<code class=\"language-text\">inline-end</code> 代表 <code class=\"language-text\">right</code>。</p>\n<p>有了 logical properties 的幫助，就能簡單的依據語言系統變更 <code class=\"language-text\">writing-mode</code> 與 <code class=\"language-text\">direction</code> 來調整 layout <a href=\"https://codepen.io/una/pen/mddxpaY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/47f5d3eaf6ba4545af05999e654f4700.gif\" alt=\"logical layout example\"></p>\n<h2 id=\"sticky-situations\" style=\"position:relative;\"><a href=\"#sticky-situations\" aria-label=\"sticky situations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sticky situations</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#Sticky_positioning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Position: sticky</code></a> 應該已經很多人用在產品當中了吧，但這次 Google 還是把它拿出來特別再介紹一番，提供了三種應用 sticky 的方式，蠻值得參考的：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/1c9bfc06cbbc423eac2d68da391a3af3.gif\" alt=\"sticky-demo\"></p>\n<p>仔細看每種應用的差別，基本上在於 sticky 的元素如何被”解除“ sticky，比較有趣的是 Sticky Desperado，利用 grid-system 達到 two column 的變化，可以到 codepen 上觀看實際程式碼：<a href=\"https://codepen.io/argyleink/pen/YzzZyMx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Slide</a>、<a href=\"https://codepen.io/argyleink/pen/abbJOjP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Stack</a>、<a href=\"https://codepen.io/argyleink/pen/qBBrbyx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Desperado</a></p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/23c0b7fc70b540fc8632163d24e1c2c2.png\" alt=\"caniuse-sticky\"></p>\n<h2 id=\"backdrop-filter\" style=\"position:relative;\"><a href=\"#backdrop-filter\" aria-label=\"backdrop filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>backdrop-filter</h2>\n<p>再來是我最喜歡的一個新屬性。以往我們要達到模糊圖片背景，並在上面加上文字的效果，可能需要這樣做：</p>\n<p class=\"codepen\" data-height=\"382\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"JjorEqG\" style=\"height: 382px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"blur image with text\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/JjorEqG\">\n  blur image with text</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>需要把圖片設定成 <code class=\"language-text\">background-image</code>，設定 <code class=\"language-text\">filter: blur</code>，再透過 <code class=\"language-text\">position:fixed</code> 把文字釘上去。但有了 <code class=\"language-text\">backdrop-filter</code>，我們簡單將這個屬性套用在想要疊加的文字上，並直接放置於 <code class=\"language-text\">img</code> 元素：</p>\n<p class=\"codepen\" data-height=\"362\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"ExawZqj\" style=\"height: 362px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"blur image with text-backdrop-filter\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/ExawZqj\">\n  blur image with text-backdrop-filter</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"is\" style=\"position:relative;\"><a href=\"#is\" aria-label=\"is permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:is()</h2>\n<p><code class=\"language-text\">:is()</code> 這個僞類別已經存在很久了，但他們覺得很少人真正使用它，因此特別提出來介紹。\n基本上 <code class=\"language-text\">:is()</code> 的功用就是能讓你將用逗號分隔的 selector，以參數形式放入其中，來達成同樣效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span>focus<span class=\"token punctuation\">,</span>\nbutton<span class=\"token operator\">:</span>focus <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\narticle <span class=\"token operator\">></span> h1<span class=\"token punctuation\">,</span>\narticle <span class=\"token operator\">></span> h2<span class=\"token punctuation\">,</span>\narticle <span class=\"token operator\">></span> h3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 與上面同樣效果 */</span>\nbutton<span class=\"token operator\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">.</span>focus<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>focus</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\narticle <span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h1<span class=\"token punctuation\">,</span>h2<span class=\"token punctuation\">,</span>h3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"gap\" style=\"position:relative;\"><a href=\"#gap\" aria-label=\"gap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gap</h2>\n<p>這邊指的 gap，就是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Grid Layout</a> 中的 gap，讓你不用為了製造出元素間的隔間，使用 margin，卻多出不必要的空隙 <a href=\"https://web.dev/next-gen-css-2019/#gap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">img ref</a>：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/95dbce89c5b54d8db7b6497a7fbcec76.png\" style=\"max-width: 700px\">\n<p>在演講中他們也有提到，<code class=\"language-text\">gap</code> 除了能用在 Grid layout 外，FireFox 也支援將其應用在 <code class=\"language-text\">flex</code> display 上頭，慣用 FireFox 瀏覽器的讀者可以嘗試看看。</p>\n<h2 id=\"css-houdinityped-ompaint-apiworklet\" style=\"position:relative;\"><a href=\"#css-houdinityped-ompaint-apiworklet\" aria-label=\"css houdinityped ompaint apiworklet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Houdini、typed OM、Paint API、Worklet</h2>\n<p>CSS Houdini 是由一群來自 Mozilla, Apple, Opera, Microsoft, HP, Intel, IBM, Adobe 與 Google 的工程師所組成的工作小組，志在建立一系列的 API，讓開發者能夠介入瀏覽器的 CSS engine 運作，帶給開發者更多的解決方案，用來解決 CSS 長久以來的問題：</p>\n<ul>\n<li>Cross-Browser isse</li>\n<li>CSS Polyfill 的製作困難</li>\n</ul>\n<p>CSS Houdini 提供的 API 讓你能存取 CSS Object Model，讓你透過 Javascript 延展 CSS 的功能，比起 CSS polyfill 能有更好的效能。</p>\n<p>而 Worklet、Typed OM、Paint API 也都包含在 CSS Houdini 的規範中，在我之前的文章 <a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 魔術師 Houdini API 介紹</a> 都有詳細介紹過，有興趣可以前往細讀。</p>\n<p>這邊我簡單說明 typed OM 與 Paint API 這兩個目前實作度較高的新功能，其中 Paint API 需要 Worklet 的輔助。</p>\n<p><em>typed OM</em> 簡單來說就是就是 CSSOM 的強化版，最主要的功能在於將 CSSOM 所使用的字串值轉換成具有型別意義的 JavaScript 表示形態，例如你可以這樣操作 CSS style: (source from <a href=\"http://slides.com/malyw/houdini-codemotion#/27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CSS -> JS</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>styleMap<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSSimpleLength {value: 12, type: \"px\", cssText: \"12px\"}</span>\n\n<span class=\"token comment\">// JS -> JS</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSUnitValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSUnitValue{value:5,unit:\"px\",type:\"length\",cssText:\"5px\"}</span>\n\n<span class=\"token comment\">// JS -> CSS</span>\n<span class=\"token comment\">// set style \"transform: translate3d(0px, -72.0588%, 0px);\"</span>\nelem<span class=\"token punctuation\">.</span>outputStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTransformValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTranslation</span><span class=\"token punctuation\">(</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSSimpleLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> currentPercent<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用 <code class=\"language-text\">styleMap</code> 取得元素上以物件型態表示的 style 屬性，並能透過 <code class=\"language-text\">outputStyleMap</code> 來設定 style，其中還可看出多了 <code class=\"language-text\">CSSTransformValue</code> 與 <code class=\"language-text\">CSSTranslation</code> 這種 Class Interface。</p>\n<p>而 <em>Paint API</em> 則提供一個叫做 registerPaint 的方法：：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>宣告使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.div-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.div-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 50% 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>.div-1 與 .div-2 就可以擁有各自定義寬高顏色的方形 background-image。</p>\n<p>不過這邊要注意一下，上面撰寫的 js 檔案，你可能會覺得就直接像一般 web 嵌入 js 的方式一樣即可，\n但實際上並非如此，我們需要透過 <em>Worklets</em> 來幫我們載入。以上面的 Paint API 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add a Worklet</span>\npaintWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// WORKLET \"simpleRect.js\"</span>\n<span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Worklets</em> 可以算是給 CSS Engines 使用的 worker，相對於 web worker 來說較為輕量、生命週期較短，適合用來處理 CSS engine 這種可能會牽扯到數百萬畫素圖片的工作。</p>\n<p>實際範例可以參考 Google 提供的 <a href=\"https://codepen.io/una/pen/VXzRxp?editors=1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Codepen 範例</a></p>\n<h2 id=\"others\" style=\"position:relative;\"><a href=\"#others\" aria-label=\"others permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Others</h2>\n<p>還有許多新屬性在演講中沒有時間細講，就將其主要功能列在這邊，有興趣的人可以到 MDN 或 W3C 上搜尋。</p>\n<ul>\n<li><code class=\"language-text\">size</code>: 可以讓你同時設定元素的寬、高屬性。</li>\n<li><code class=\"language-text\">aspect-ratio</code>: 透過此屬性，再也不用利用 padding 等方式來製造等比例縮放效果了！</li>\n<li><code class=\"language-text\">min()</code>, <code class=\"language-text\">max()</code>, <code class=\"language-text\">clamp()</code>: 這幾個函式提供你在各種 CSS 屬性加上數值的限制。</li>\n<li><code class=\"language-text\">list-style-type</code>: 有新的 value 可以設置，像是 emoji 與 SVGs。</li>\n<li><code class=\"language-text\">display: outer inner</code>: display 屬性之後能夠接受兩個參數，讓你明確的個別設置 outer 與 inner layout，而非使用 <code class=\"language-text\">inline-flex</code> 這種結合在一起的 keywords。</li>\n</ul>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>CSS 的發展總是比較緩慢，畢竟需要各個瀏覽器實作配合，背後的因素可能不單單是純技術這麼簡單，但慢歸慢，還是能看得到前進的步伐，在新屬性普及前，就到 codepen 上弄個 side project 玩玩吧！\n所有演講中提到的功能，只要是目前瀏覽器已經支援的，都有範例公布在他們的<a href=\"https://css-at-cds.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例網站</a>上，推薦前往試試！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ul>\n<li><a href=\"https://youtu.be/-oyeaIirVC0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vidoe - Next-generation web styling</a></li>\n<li><a href=\"https://web.dev/next-gen-css-2019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Article - Next-generation web styling</a></li>\n<li><a href=\"https://css-at-cds.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Examples - Next-generation web styling</a></li>\n<li><a href=\"https://juejin.im/post/5dd68a9be51d451e6d48c4b8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你不知道的 CSS ： Next-generation web styling</a></li>\n</ul>","id":"ace042c3-d8b4-5a8f-bf46-72bb8396db5f","fields":{"slug":"cds-2019-next-generation-web-styling"},"frontmatter":{"date":"2019-12-31T20:22:02.000Z","title":"CDS2019 Next-generation web styling 整理介紹","tags":["css","chrome dev summit","Web"],"type":"tech","slug":"cds2019-next-generation-web-styling"},"timeToRead":12}],"tagName":"chrome dev summit","type":"tech"}},"staticQueryHashes":["2123680655"]}