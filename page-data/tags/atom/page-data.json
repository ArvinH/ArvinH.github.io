{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/atom","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：YOASOBI - 向夜晚奔去 / THE HOME TAKE","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/j1hft9Wjq9U\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YOASOBI - 向夜晚奔去 / THE HOME TAKE</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/j1hft9Wjq9U\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前端狀態管理方式百百種，但大致上可以分為兩類：</p>\n<p>一種是與 UI view library 綁在一起的，以 React 為例，React state、Context API 與去年剛推出的實驗性套件 Recoil 就屬於這種，主要將狀態資料存在 React tree 中。</p>\n<p>另一種則是 view-layer agnostic library，資料存在外部 store，讓你可以套用在任何 UI framework 或 view library，如最常見的 Redux、Mobx 等。</p>\n<p>再往下細分可以用 Mental modal 分為：Flux、Proxy 與 Atomic 等三種狀態管理邏輯，其中 Flux（Redux）與 Proxy（Mobx）算是出來比較久的，而 Atomic 則是隨著 Recoil 的推出而興起，今天就是想來了解一下 Atomic 的概念是什麼，建構在其上的套件用起來是如何。</p>\n<p>但是，今天我想介紹的不是 Recoil，而是一個與 Recoil 採用同樣概念，但 API 與整體 bundle size 小非常多的 Jōtai。</p>\n<blockquote>\n<p>minified + gzipped 後的大小，Jōtai: 3.3kb vs Recoil: 14kb</p>\n</blockquote>\n<p>這也是我想從 jotai 切入的原因，因為簡單的 API 與輕量的 bundle size 通常也代表他的原始碼會比較簡短好 trace（但不代表實作上比較簡單），用起來負擔也很輕。</p>\n<p>Jōtai 是日文的 “狀態” 的意思，最開始是由一個產量極高的日本工程師 - <a href=\"https://github.com/dai-shi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Daishi Kato</a> 所開發，在其<a href=\"https://blog.axlight.com/posts/developing-react-global-state-library-with-atom-abstraction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">部落格</a>上有介紹初始動機與一開始的 prototype - <a href=\"https://github.com/dai-shi/use-atom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-atom</a>。</p>\n<p>現在 <a href=\"https://github.com/pmndrs/jotai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jotai</a> 則是移至 <a href=\"https://pmnd.rs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@pmndrs</a> 去維護，其底下還有像是 <a href=\"https://github.com/pmndrs/zustand\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zustand</a>、<a href=\"https://github.com/pmndrs/valtio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">valtio</a> 這類簡化 Redux 與 Mobx 的 state management tool，以及更廣為人知的 <a href=\"https://github.com/pmndrs/react-spring\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a> 和 <a href=\"https://github.com/pmndrs/react-three-fiber\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-three-fiber</a>。</p>\n<h2 id=\"atomic\" style=\"position:relative;\"><a href=\"#atomic\" aria-label=\"atomic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atomic</h2>\n<p>進入 Jotai 的介紹前，先簡介一下 Atomic 是什麼。</p>\n<p>Recoil 中定義 atom 是你 application 中的一小塊狀態，感覺像是把原本 redux state tree 中的狀態都切割成可以獨立創建（可以 on-demand create，不一定要在何時創建）、更新、讀取的個別 state，有助於 code splitting。</p>\n<p>每一個 atom 除了 primitive state 外，也能非同步處理 derived state（根據別的 state 進行運算、呼叫 API 等 side effect），加上 atom 是存在 React tree 中，能很簡單得搭配 <code class=\"language-text\">&lt;Suspense></code> 與 <code class=\"language-text\">&lt;ErrorBoundary></code> 來處理 side effect 狀態。</p>\n<p>這些個別的 atom 可以隨時被不同 component 給取用與更新，只有與該 atom 有關聯的 component 會在 atom 更新時觸發 re-render，因此相比單純使用 React Context 來說，用在頻繁更新的 application 上也沒問題。</p>\n<p>但值得一提的是，Recoil 與 Jotai 底層都還是用了 React Context，只是都用了<code class=\"language-text\">useMutableSource</code> 與 <code class=\"language-text\">useRef</code> 來 bail out rerendering。</p>\n<p>P.S. jotai 原本使用同為 dai-shi 開發的 <code class=\"language-text\">use-context-selector</code>，但就在一週前左右，改為使用與 Recoil 相同的 <code class=\"language-text\">useMutableSource</code> solution，猜測是為了能更好的 support concurrent mode 底下的各種使用情境。細節可參考<a href=\"https://github.com/pmndrs/jotai/pull/308\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這隻 PR</a>。</p>\n<p>P.S.S 針對 <code class=\"language-text\">use-context-selector</code>，可以參考先前文章 - <a href=\"https://blog.techbridge.cc/2020/09/13/use-context-selector-src-analysis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Context API 效能問題 - use-context-selector 解析</a> 了解其實作（文章內容是 v1 的實作，目前已經有 v2 版本）</p>\n<h2 id=\"recoil-vs-jōtai\" style=\"position:relative;\"><a href=\"#recoil-vs-j%C5%8Dtai\" aria-label=\"recoil vs jōtai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recoil vs Jōtai</h2>\n<p>Jotai 的<a href=\"https://github.com/pmndrs/jotai/blob/master/docs/introduction/comparison.md#how-is-jotai-different-from-recoil\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方說明</a>與<a href=\"https://blog.logrocket.com/jotai-vs-recoil-what-are-the-differences/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>詳細比較了 Recoil 與 Jotai 的差異，推薦有興趣的讀者去閱讀。</p>\n<p>官網從幾個面向來分析差異，並說明了兩者的使用時機，我這邊翻譯總結一下：</p>\n<ul>\n<li>\n<p>開發資源</p>\n<p>Jotai 是由 Poimandres 的幾位開發者共同維護，而 Recoil 除了社群外還有 Facebook 的支援。</p>\n</li>\n<li>\n<p>功能差異</p>\n<p>Jotai 著重在易學且簡潔的 primitive API，目標是 unopinionated 的 library，功能上不比 Recoil 能支援得多；Recoil 應該是希望能支援多種需求，並應用在大型且有複雜交互作用的應用程式上。</p>\n</li>\n<li>\n<p>使用技術上的主要差異</p>\n<p>Jotai 的 atom object 沒有 key，用的是 object referential identities，而 Recoil 的 atom 則有 string keys，除了在判斷 atom 更新上會有所不同外，debug 時，Jotai 也需要額外設置 debugLabel，Recoil 則可以直接利用 atom key 來輔助。</p>\n<p>依靠 object referential identities 的另一個<strong>潛在問題</strong>是，當你用 React Fast Refresh 時，頁面上舊的狀態不能被保留住，<strong>因為 refresh 後的 atoms 都會是新的 object</strong>。這點在 Recoil 就沒問題，因為他們可以用 string key 來辨別。</p>\n</li>\n<li>\n<p>使用時機</p>\n<ol>\n<li>如果你只是想替換掉 React Context，避免因頻繁更新造成的效能問題，Jotai 可能是個好選擇，能提供足夠的功能與輕量的 bundle size 和 API。</li>\n<li>如果你的應用程式需要 serialize state，例如從 localStorage 或 server，Recoil 可能有比較多的 utils 可用。</li>\n<li>如果你想在 Jotai 或 Recoil 的基礎上再去開發新的 library，Jotai 的 primitive API 可能比較適合你使用。</li>\n</ol>\n<p>如果上述三點都不是你的 deal-breaker，那選哪個都可以，Jotai 跟 Recoil 在概念與目的上基本是一樣的。</p>\n</li>\n</ul>\n<p>接下來會主要介紹 Jotai 的核心用法。</p>\n<h2 id=\"jōtai\" style=\"position:relative;\"><a href=\"#j%C5%8Dtai\" aria-label=\"jōtai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jōtai</h2>\n<p>不過還是先看個最簡單的例子比較有感覺：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useAtom<span class=\"token punctuation\">,</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jotai'</span>\n\n<span class=\"token keyword\">const</span> countAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>countAtom<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>one up<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Root</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>最簡單的用法就跟 <code class=\"language-text\">React.useState</code> 一樣，差別只在於我們需要先用 <code class=\"language-text\">atom()</code> 來創建一個 atom 傳入 <code class=\"language-text\">useAtom</code> 使用，接下來 <code class=\"language-text\">useAtom</code> 一樣會回傳一個 tuple，包含目前的值與一個 updating function。</p>\n<p>這個例子就展示完了 Jotai 的三個核心函式（<code class=\"language-text\">jotai/core</code>）：</p>\n<h3 id=\"atom\" style=\"position:relative;\"><a href=\"#atom\" aria-label=\"atom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>atom</h3>\n<p>atom 函數用來創建 atom，接受至多兩個參數，當只有第一個參數，且該參數為非函數時，atom() 回傳的是 primitive atom；若是傳入 function，則回傳 derived atom。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> primitiveAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> derivedAtomWithRead <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>readFunction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> derivedAtomWithReadWrite <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>readFunction<span class=\"token punctuation\">,</span> writeFunction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> derivedAtomWithWriteOnly <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> writeFunction<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上面範例所示，derived atom 根據傳入的函數分為 writable atom 或 read-only atom：</p>\n<ul>\n<li>\n<p>若只傳入 readFunction：<code class=\"language-text\">(get) => value | Promise&lt;value></code>，則代表為 read-only atom，其中傳入 readFunction 的 <code class=\"language-text\">get</code> 函數可以用來讀取目前存在 application 中的 atom 的值，此外 <code class=\"language-text\">get</code> 會追蹤 dependency，意思是，當讀取的 atom 的值變動時，會觸發這個 <code class=\"language-text\">get</code> 函式，重新計算這個 derived atom 的值。</p>\n<p>舉個例子來說：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uppercaseAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>textAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在這段程式中，uppercaseAtom 是由傳入一個 readFunction 的 atom 函式所創建的 derived atom。該 readFunction 會讀取 textAtom 的值來做運算並回傳，所以 textAtom 是 uppercaseAtom 的 dependency，當 textAtom 變動時，這個 readFunction 會重跑一遍，讓 uppercaseAtom 也連帶更新。</p>\n</li>\n<li>\n<p>若有傳入 writeFunction：<code class=\"language-text\">(get, set, update) => void | Promise&lt;void></code>，就會回傳 writable atom。其中 <code class=\"language-text\">get</code> 與 readFunction 的 <code class=\"language-text\">get</code> 類似，但這個 get 函數不會因為 dependcy 變動而被觸發，比較像是讓你在 update atom 值時，可以拿別的 atom 來操作；<code class=\"language-text\">set</code> 就是用來更新 application 中的 atom 值；<code class=\"language-text\">update</code> 則是當外部透過類似 <code class=\"language-text\">setState</code> 的函式（實際上會是 <code class=\"language-text\">useAtom</code> 回傳的 updating function）試圖更改這個 derived atom 時會傳入的值，例如：<code class=\"language-text\">setState(newValue)</code>，<code class=\"language-text\">update</code> 就會是 newValue。</p>\n<p>P.S. primitive atom 是 writable atom，其 writeFunction 就等同於 <code class=\"language-text\">useState</code> 回傳的 <code class=\"language-text\">setState()</code>。</p>\n</li>\n</ul>\n<h3 id=\"provider\" style=\"position:relative;\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>provider</h3>\n<p>Provider 就是儲存 atom value 的地方，用法跟 React context provider 一樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Root</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>你可以用一個 provider 放在你的 Root component，也可以創好幾個 provider 個別放在不同的 component tree 中，這樣 atom 就會存在各自的 component tree 裡。</p>\n<h3 id=\"useatom\" style=\"position:relative;\"><a href=\"#useatom\" aria-label=\"useatom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useAtom</h3>\n<p>useAtom 就像是 useState 一樣的 hook，用來讀取 Provider 內的 atom 值，並且會回傳 updating function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> updateValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>anAtom<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如同最前面範例說的，需要傳入一個 atom，可以是 primitive atom 也可以是 derived atom，如果是 derived atom，他會先執行 readFunction，計算完值以後再回傳。\n若是第一次使用該 atom，也就是代表 Provider 內還沒有存任何 value 時，這邊傳入的 atom 就會被作為 initial value，存到 Provider 中。</p>\n<p>此外，如同<a href=\"#atom\">前面 atom 的介紹</a>，當傳入的 atom 變更時，無論是 primitive atom 或是 derived atom，這邊也都會連帶更新。</p>\n<p>Jotai 就是透過這種方式在不同的 component 之間共享 state。</p>\n<p>至於 useAtom 回傳的 tuple 中的第二個值，也就是 updating function，會依照傳入 atom 的不同有不同的行為，若是 primitive atom，會使用內建的 updating function，模擬 <code class=\"language-text\">React.setState</code>；若是有傳入自訂 writeFunction 的 writable atom，則會將傳入 updating function 的值傳給 writeFunction 執行。</p>\n<h2 id=\"async-的使用\" style=\"position:relative;\"><a href=\"#async-%E7%9A%84%E4%BD%BF%E7%94%A8\" aria-label=\"async 的使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async 的使用</h2>\n<p>接著我們可以來看看怎麼在 Jotai 中使用 async function，像是拿 API 資料或是觸發 action 等等。</p>\n<p><strong>derived async read-only atom</strong></p>\n<p>在 atom 的 readFunction 中讀取 API 資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://json.host.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fetchUrlAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>urlAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>json<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>fetchUrlAtom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假如 urlAtom 被更改，readFunction 會重新執行，然後 Status component 的 re-render 會等到 readFunction 執行完，useAtom 取得新值後才進行。</p>\n<p><strong>derived async writable atom</strong></p>\n<p>除了 readFunction，我們也能在 writeFunction 中放入 async function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fetchCountAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>countAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_get<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>countAtom<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Controls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> compute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>fetchCountAtom<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://count.host.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>compute<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一個實際一點的範例：</p>\n<p><a href=\"https://codesandbox.io/s/github/pmndrs/jotai/tree/master/examples/hacker_news?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit hacker_news\"></a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> postId <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token number\">9001</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://hacker-news.firebaseio.com/v0/item/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> from<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> reset<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>round<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>→<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">PostTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> by<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> time <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>by<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h6<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleDateString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h6<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>title <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>text <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token function\">Parser</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Id <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>PostTitle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Next <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這個範例中可以看到要如何在不同的 component 間使用定義在 Global 的 atoms，當 <code class=\"language-text\">&lt;Next /></code> 元件的 button 被點選時，觸發了 updating function 來更改 <code class=\"language-text\">postId</code> atom，同時 <code class=\"language-text\">postData</code> 這個 derived atom 因為其 readFunction 中有 get <code class=\"language-text\">postId</code> atom，所以也會被觸發，導致 <code class=\"language-text\">PostTitle</code> 能夠取得新值，並 re-render component。</p>\n<h4 id=\"caveat\" style=\"position:relative;\"><a href=\"#caveat\" aria-label=\"caveat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>caveat</h4>\n<p>在 Jotai 上使用 async function 時要注意一點，就是必須搭配 <code class=\"language-text\">React.Suspense</code>，因為當 async function 還沒回傳值時，React tree 會被 suspense 住。</p>\n<h2 id=\"utils\" style=\"position:relative;\"><a href=\"#utils\" aria-label=\"utils permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utils</h2>\n<p>在上面的範例中，我們的 <code class=\"language-text\">&lt;Next /></code> component 只有用到 useAtom 回傳的 updating function，但是每當 postId 更新時，他也會被觸發 re-render。</p>\n<p>你可以在原本的 code 中加入 <code class=\"language-text\">(rendered: {++useRef(0).current})</code> 來驗證看看</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>→<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">(</span>rendered<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">++</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你會發現每點一次，Next 元件都會被觸發 render，但其實 Next 元件沒有讀取 postId atom 的值，不需要觸發 re-render的。</p>\n<p>這問題可以運用 <code class=\"language-text\">useMemo</code> 把 useAtom 多包一層來解決，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useSetAtom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">anAtom</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> writeOnlyAtom <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">get<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>anAtom<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>anAtom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>writeOnlyAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這種感覺就很常需要用到的 hooks，Jotai 有另外寫了一系列的 utils function 供大家使用，放在 <code class=\"language-text\">jotai/utils</code> 底下。</p>\n<p>在官方 <a href=\"https://github.com/pmndrs/jotai/blob/master/docs/api/utils.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 中，可以找到有哪些 utils，包含使用方法、範例，甚至連促使該 util 產生的 issue，有需要的時候可以去查詢。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>到這邊就差不多把基本的用法與概念都介紹完了，以 Atomic 為概念的 state management 在使用上相對簡單，jotai 的精簡 API 也讓入門非常容易，雖然維護人員不多，但主要貢獻者的生產力很強大，也很厲害，我認為在小專案上還是非常適合拿來使用！接下來有機會的話，想從 jotai 的原始碼來了解是如何實作 atomic 概念的 state management library！感謝大家收看！</p>","id":"8f497dc0-fe52-5477-a053-bc0994fa4ba8","fields":{"slug":"jotai-intro"},"frontmatter":{"date":"2021-02-27T13:37:30.000Z","title":"Jōtai 介紹","tags":["react","state management","atom"],"type":"tech","slug":"jotai-intro"},"timeToRead":11}],"tagName":"atom","type":"tech"}},"staticQueryHashes":["2123680655"]}