{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/web","result":{"pageContext":{"posts":[{"excerpt":"chromium 手下留情，別廢掉 SVG SMIL 呀！","html":"<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-additive.svg\" alt=\"animate values attribute demo\">\n</p>\n<p>chromium 手下留情，別廢掉 SVG SMIL 呀！</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前幾個禮拜看到 jotai 的作者推文提到 jotai 的 logo 用了 <code class=\"language-text\">animateTransform</code> 來製作動畫（不知道 jotai 的可以看這篇 - <a href=\"https://blog.techbridge.cc/2021/03/01/jotai-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jōtai 介紹</a>）：</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">If you are not familiar with SVG animation, check this out. jotai <a href=\"https://t.co/Zadia8oug7\">https://t.co/Zadia8oug7</a> 👻 logo is using &lt;animateTransform&gt;. <a href=\"https://t.co/vll2SU5f16\">pic.twitter.com/vll2SU5f16</a></p>&mdash; Daishi Kato (@dai_shi) <a href=\"https://twitter.com/dai_shi/status/1401516470882893827?ref_src=twsrc%5Etfw\">June 6, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<img src=\"https://raw.githubusercontent.com/pmndrs/jotai/master/img/title.svg\" alt=\"jotai logo\">\n<p>(要等一會兒才會出現...如果沒有，可能是 cache 問題，可以點<a href=\"https://raw.githubusercontent.com/pmndrs/jotai/master/img/title.svg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">此</a>開新頁查看。)</p>\n<p>svg 檔案會動不稀奇，像是<a href=\"https://blog.techbridge.cc/2019/11/06/svg-animation-in-10mins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">十分鐘、五步驟，SVG 動起來！</a>中介紹的，透過第三方套件可以很容易達成，或是用一些繪圖、動畫工具也行，例如：<a href=\"https://app.svgator.com/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SVGator</a>，不過這些都得搭配 JavaScript，然而簡單的動畫只要利用 SVG 支援的語法即可達成！</p>\n<p>今天就一起來了解一下，怎麼在不靠其它套件的狀況下，單純的製作 SVG 動畫。</p>\n<h2 id=\"svg-animation-with-smil\" style=\"position:relative;\"><a href=\"#svg-animation-with-smil\" aria-label=\"svg animation with smil permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SVG animation with SMIL</h2>\n<p>能讓 SVG 不靠 JavaScript 與 CSS 就能動起來是因為使用了 <a href=\"https://www.w3.org/TR/REC-smil\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SMIL（Synchronized Multimedia Integration Language）</a>，音同 smile，是 W3C 的標準之一，旨在以 XML 格式提供多媒體的交互表現（白話點其實就是動畫），是 Web 上動畫的開路先鋒，啟發了 Web animation 與 CSS animation。SVG 與 SMIL 的開發團隊合作，讓 SVG 能利用 SMIL 達到如下效果：</p>\n<ul>\n<li>動畫化元素的數值屬性（x, y 值等等)</li>\n<li>動畫化元素的 transform 屬性（平移、旋轉）</li>\n<li>動畫化元素顏色</li>\n<li>軌跡路線移動動畫，類似於 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/offset-path\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 中的 <code class=\"language-text\">offset-path</code></a></li>\n</ul>\n<p>光是這些特性就夠我們組合出很多種的動畫了，還不需要 JavaScript 與 CSS 的輔助。</p>\n<p>使用方法也不難，只要在 SVG 元素內置入以下四種元素即可操作動畫：</p>\n<ol>\n<li><code class=\"language-text\">&lt;set></code></li>\n<li><code class=\"language-text\">&lt;animate></code></li>\n<li><code class=\"language-text\">&lt;animateTransform></code></li>\n<li><code class=\"language-text\">&lt;animateMotion></code></li>\n</ol>\n<p>接著我們針對這四種元素一一介紹。</p>\n<p>不過在開始前，有個小插曲值得一提。</p>\n<p>SMIL 這個標準其實在 2015 年的時候差點被廢除，因為使用人數少，支援的主流瀏覽器也不多，所以 chromium 工程師本來想要 deprecate 它，順勢推廣 Web animation 與 CSS animation，但在消息公布後，收到了社群很多人的回饋，最終決定暫停廢除計劃，也因此我們到現在都還能使用 SVG SMIL animation，<a href=\"https://caniuse.com/svg-smil\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">主流瀏覽器也都支援</a>了，使用者也從 0.04% 上升到 <a href=\"https://www.chromestatus.com/metrics/feature/timeline/popularity/501\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1% 以上</a>。</p>\n<p>有興趣的讀者可以回追一下<a href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/5o0yiO440LM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這串討論</a>。</p>\n<h2 id=\"svg-animation-element-介紹與示範\" style=\"position:relative;\"><a href=\"#svg-animation-element-%E4%BB%8B%E7%B4%B9%E8%88%87%E7%A4%BA%E7%AF%84\" aria-label=\"svg animation element 介紹與示範 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SVG animation element 介紹與示範</h2>\n<h3 id=\"set\" style=\"position:relative;\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;set></h3>\n<p>利用 <code class=\"language-text\">&lt;set></code> 元素你能夠指定在一段時間後，改變 svg 的一個屬性，例如 2 秒後將 Rick 的眼睛變成往下看：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-set.svg\" alt=\"set element demo\">\n</p>\n<p>疑？你說他本來就是往下看的？</p>\n<p>那是因為 <code class=\"language-text\">set</code> 不會重複執行，從你載入這篇文章到看到這個位置為止，相信已經超過 2 秒，所以已經是執行後的結果，建議你按右鍵 -> \"在新分頁中開啟圖片\"，實際體驗一下，再不然看看下面的 gif 也行：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-svg-animation-set.gif\" alt=\"set element demo\">\n</p>\n<p>相關程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>56.7573<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>92.8179<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>105.7318<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>circle</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>將 <code class=\"language-text\">&lt;set></code> 元素放在你想要套用效果的 svg shape 內即可。</p>\n<p><code class=\"language-text\">attributeName</code> 指定你要更動的屬性；<code class=\"language-text\">to</code> 代表變化值；<code class=\"language-text\">begin</code> 代表從載入後的什麼時候開始執行。</p>\n<p>除了 <code class=\"language-text\">attributeName</code> 外，有另一個參數叫 <code class=\"language-text\">attributeType</code>，用來告訴瀏覽器你要動畫化的屬性值是屬於 <code class=\"language-text\">XML</code>（e.g. <code class=\"language-text\">cy</code>），還是 <code class=\"language-text\">CSS</code>（e.g. <code class=\"language-text\">opacity</code>），不指定的話，瀏覽器會自己猜。不過呢，這個參數也已經 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/attributeType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deprecated</a> 了，所以實際上我們不再需要它。</p>\n<h3 id=\"animate\" style=\"position:relative;\"><a href=\"#animate\" aria-label=\"animate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;animate></h3>\n<p><code class=\"language-text\">&lt;animate></code> 元素讓你能針對單一屬性變化套用動畫補間效果。用法一樣是放在你想要套用效果的 svg shape 內：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>56.7573<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>92.8179<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animate</span>\n      <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cx<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>56.7573<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>64.7573<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>circle</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>與 <code class=\"language-text\">&lt;set></code> 相比，多了 <code class=\"language-text\">from</code> 屬性來指定要從哪個值開始做變化，<code class=\"language-text\">dur</code> 指定動畫的執行時間，<code class=\"language-text\">repeatCount</code> 指定要重複幾次，這邊我們設定 <code class=\"language-text\">indefinite</code> 讓他無限重播（若看不到效果請以分頁開新圖片）：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate.svg\" alt=\"animate element demo\">\n</p>\n<p>利用 <code class=\"language-text\">animate</code>，讓 Rick 的眼睛向右看。</p>\n<p>也可以用來改變顏色：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-color.svg\" alt=\"animate element color demo\">\n</p>\n<p>也因為可以用來改變顏色，所以本來有個 <code class=\"language-text\">&lt;animateColor></code> 元素就被取代掉了，現在<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animatecolor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">已經 deprecated 了</a>。</p>\n<h3 id=\"animatetransform\" style=\"position:relative;\"><a href=\"#animatetransform\" aria-label=\"animatetransform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;animateTransform></h3>\n<p><code class=\"language-text\">&lt;animateTransform></code> 可以用來控制 <code class=\"language-text\">transform</code> 屬性，用 <code class=\"language-text\">animate</code> 無法做到。跟 CSS 中的 transform 一樣，可以控制 <strong>translation</strong>、<strong>scaling</strong>、<strong>rotation</strong> 跟 <strong>skewing</strong>。</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-transform.svg\" alt=\"animateTransform element demo\">\n</p>\n<p>可以讓 Rick 頭轉起來，看起來頗ㄎㄧㄤ LOL\n（註：經實測，animateTransform 在手機上似乎不支援，請用桌面版瀏覽器查看此範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotate<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>360 0 0<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>如上面所述，要控制 <code class=\"language-text\">transform</code> 屬性，所以 <code class=\"language-text\">attributeName=\"transform\"</code>，接著 <code class=\"language-text\">type</code> 參數就看你想要 transform 的類型是什麼，<code class=\"language-text\">rotate</code>、<code class=\"language-text\">scale</code> 都可以。其餘 <code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>、<code class=\"language-text\">begin</code>、<code class=\"language-text\">dur</code>等參數都與之前的相同，用來指定動畫的起始終點值、時間長度與執行次數。</p>\n<h3 id=\"animatemotion\" style=\"position:relative;\"><a href=\"#animatemotion\" aria-label=\"animatemotion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;animateMotion></h3>\n<p>最後一個元素，<code class=\"language-text\">animateMotion</code>，讓 svg 沿著軌跡 <code class=\"language-text\">path</code> 移動（若看不到效果請以分頁開新圖片）：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-motion.svg\" alt=\"animateMotion element demo\">\n</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--軌跡--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M10,50 q60,50 100,0 q60,-50 100,0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Rick 飛船 svg--></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateMotion</span>\n    <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M10,50 q60,50 100,0 q60,-50 100,0<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>上述程式碼內的 <code class=\"language-text\">&lt;path></code> 只是為了讓大家看清楚路徑與實際動畫的軌跡無關，實際使用上只要給定 <code class=\"language-text\">animateMotion</code> 一條 <code class=\"language-text\">path</code> 屬性值，包含 <code class=\"language-text\">animateMotion</code> 元素的 svg 就會跟著該路徑移動。</p>\n<p>其他屬性值跟其他元素雷同，不過 <code class=\"language-text\">animateMotion</code> 還有個特別的屬性值 <code class=\"language-text\">rotate</code>，用來指定是否要隨著路徑移動的同時，選轉綁定的 svg 物件，可以設定為 <code class=\"language-text\">auto</code> 或 <code class=\"language-text\">auto-reverse</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateMotion</span>\n  <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M10,50 q60,50 100,0 q60,-50 100,0<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>auto<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-motion-rotate.svg\" alt=\"animateMotion element demo\">\n</p>\n<p>此外，除了給定 <code class=\"language-text\">path</code> 屬性值外，其實也能夠利用既有的 <code class=\"language-text\">&lt;path></code> 來當作 <code class=\"language-text\">animateMotion</code> 的路徑，但是得透過 <code class=\"language-text\">mpath</code> 這個 sub-element：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--軌跡--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M10,50 q60,50 100,0 q60,-50 100,0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Rick 飛船 svg--></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateMotion</span> <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mpath</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#path1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>animateMotion</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>要注意的是，若要使用 <code class=\"language-text\">xlink:href</code> 來指定連接的 svg 元素，在你的 <code class=\"language-text\">&lt;svg></code> tag 上得先記得宣告 <code class=\"language-text\">xmlns:xlink=\"http://www.w3.org/1999/xlink\"</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 500 300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xlink</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xlink<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>有了 <code class=\"language-text\">xlink:href</code>，我們也就不用像之前範例中所做的一樣，一定得把 <code class=\"language-text\">animate</code> 元素放在要綁定的 svg shape 內，可以透過 <code class=\"language-text\">id</code> 與 <code class=\"language-text\">xlink:href</code> 來連結，例如第一個 <code class=\"language-text\">&lt;set></code> 的範例可改為：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eyes<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>56.7573<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>92.8179<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>circle</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#eyes<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>105.7318<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>至此我們介紹完了四種 SVG animation element，除了個別拿來使用外，這些元素是能夠組合在一起使用的，就只要個別把對應的 animate element 套用在想要的 svg shape 上即可，舉例來說，可以讓 Rick 旋轉的同時，髮色改變、眼睛轉動（可右鍵看 svg 原始碼，在裡面可以找到多個 animate element）：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-combine.svg\" alt=\"combine animate elements demo\">\n</p>\n<p>（註：經實測，animateTransform 在手機上似乎不支援，請用桌面版瀏覽器查看此範例）</p>\n<h2 id=\"svg-smil-animation-重點參數介紹\" style=\"position:relative;\"><a href=\"#svg-smil-animation-%E9%87%8D%E9%BB%9E%E5%8F%83%E6%95%B8%E4%BB%8B%E7%B4%B9\" aria-label=\"svg smil animation 重點參數介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SVG SMIL animation 重點參數介紹</h2>\n<p>在上面的 Demo 裡面，我們可以發現 SVG animate element 有很多參數可以使用，範例中只用到了一部分，但其實這些參數能設定的值都有不少變化，想要清楚知道每一個參數的用途與範例，推薦參考這篇文章 - <a href=\"https://css-tricks.com/guide-svg-animations-smil/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Guide to SVG Animations (SMIL)</a>，不介意簡體中文的話，可以看<a href=\"https://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇</a>，都寫得非常好非常詳細。</p>\n<p>在這個章節我會重點介紹一些我覺得比較有趣及實用的參數。</p>\n<h3 id=\"from-to-by-values\" style=\"position:relative;\"><a href=\"#from-to-by-values\" aria-label=\"from to by values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>from, to, by, values</h3>\n<p><code class=\"language-text\">from</code> 跟 <code class=\"language-text\">to</code> 在前面的範例中都有看到，功能也如同字面般好懂，就是指定動畫變化的移動區間，從（<code class=\"language-text\">from</code>）某個值變化到（<code class=\"language-text\">to</code>）另個值；而 <code class=\"language-text\">by</code> 則是代表位移量，相對於明確告知要變動到哪個值，我們可以用 <code class=\"language-text\">by</code> 告訴 svg 要變動”多少的量“，例如前面 <code class=\"language-text\">animateTransform</code> 的例子，我們可以改為：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotate<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">by</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>360<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>看到這邊你應該會注意到，<code class=\"language-text\">by</code> 跟 <code class=\"language-text\">to</code> 功能上有點重複，所以彼此之間有優先權，如果同時有指定 <code class=\"language-text\">to</code> 與 <code class=\"language-text\">by</code>，則只會套用到 <code class=\"language-text\">to</code> 的值。</p>\n<p>再來看看 <code class=\"language-text\">values</code>，這個剛剛的範例都沒出現，它的功用是來補足 <code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>、<code class=\"language-text\">by</code> 的不足。不足的點在於， <code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>、<code class=\"language-text\">by</code> 只能指定兩個值之間的變化，從 a 變化到 b，而 <code class=\"language-text\">values</code> 可以給定多個值，用分號 <code class=\"language-text\">;</code> 隔開，就能有 a -> b -> c -> b -> a 這樣的變化，舉個例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">values</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20;120;20<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-values.svg\" alt=\"animate values attribute demo\">\n</p>\n<h3 id=\"begin-end\" style=\"position:relative;\"><a href=\"#begin-end\" aria-label=\"begin end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>begin, end</h3>\n<p><code class=\"language-text\">begin</code> 跟 <code class=\"language-text\">end</code> 分別用來控制何時開始執行動畫，何時停止動畫，在上面的例子中我們都只用到時間，像是 <code class=\"language-text\">begin=\"2s\"</code>，但其實這兩個參數能給的值有非常多的種類，而且能向 <code class=\"language-text\">values</code> 一樣賦予多個值，只要用 <code class=\"language-text\">;</code> 隔開即可：</p>\n<p><code class=\"language-text\">begin = &lt;offset-value> | &lt;syncbase-value> | &lt;event-value> | &lt;repeat-value> | &lt;accessKey-value> | &lt;wallclock-sync-value></code></p>\n<p>每種類型的詳細介紹，我推薦直接看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/begin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>，或是對岸網友的<a href=\"https://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">整理</a>，這邊我只說明幾個我覺得比較實用的。</p>\n<p>首先是 <code class=\"language-text\">&lt;syncbase-value></code>。</p>\n<p>從字面有點難懂，主要是用其他 animate 元素的 begin/end 值再做加減，舉個例子就比較好懂：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Rick head --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scale<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">values</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1;1.2;1<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ship.end<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3s<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- spaceship --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ship<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">values</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20;120;20<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>這次範例中的 svg 內有兩個 animate 元素，給定針對太空船做動畫的元素一個 id 值 <code class=\"language-text\">ship</code>，然後在 Rick 的動畫元素上利用 <code class=\"language-text\">begin=\"ship.end\"</code>，就可以讓 Rick 頭的動畫等到太空船的動畫做完後再啟動，效果如下（這需要麻煩讀者用新分頁開啟圖片來觀看）：</p>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-begin-syncbase.svg\" alt=\"animate begin syncbase demo\">\n</p>\n<p>另一個我覺得實用的值是 <code class=\"language-text\">event-value</code>，看名字就知道，是可以依照 <code class=\"language-text\">event</code> 來啟動或終結動畫，用法與 <code class=\"language-text\">syncbase-value</code> 雷同，給定元素 id，然後根據該元素觸發的事件讓動畫 <code class=\"language-text\">begin</code> 或是 <code class=\"language-text\">end</code>。幾乎所有 DOM element 支援的 event 都能使用，<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/begin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 有列出所有可用事件。</p>\n<p>一樣舉個例子，點擊 Rick 就能讓太空船移動（礙於 blog 格式，這範例得放在 codepen 上）：</p>\n<p class=\"codepen\" data-height=\"182\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"arvin0731\" data-slug-hash=\"BaWEJpm\" style=\"height: 182px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"SVG SMIL Demo - rick and spaceship\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/BaWEJpm\">\n  SVG SMIL Demo - rick and spaceship</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>程式碼如下，<code class=\"language-text\">rickhead.click</code>（[元素 id].[event]）：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rickhead<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!--// 略 --></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ship<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">values</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20;120;20<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rickhead.click<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>最後是 <code class=\"language-text\">indefinite</code>，如果你的 <code class=\"language-text\">begin</code> 值為 <code class=\"language-text\">indefinite</code>，代表無限等待，這時就需要透過 <code class=\"language-text\">[animate 元素].beginElement()</code> 來觸發，或是用 <code class=\"language-text\">&lt;a></code> tag 的 <code class=\"language-text\">xlink:href=\"#[animate 元素 id]\"</code> 來啟動。</p>\n<p class=\"codepen\" data-height=\"189\" data-theme-id=\"29194\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-slug-hash=\"PopgERE\" style=\"height: 189px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"SVG SMIL Demo - rick and spaceship - event trigger\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/PopgERE\">\n  SVG SMIL Demo - rick and spaceship - event trigger</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h3 id=\"calcmode-keytimes-keysplines\" style=\"position:relative;\"><a href=\"#calcmode-keytimes-keysplines\" aria-label=\"calcmode keytimes keysplines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>calcMode, keyTimes, keySplines</h3>\n<p>這三個參數主要讓你能夠更細微的調整動畫的速度變化。</p>\n<p><code class=\"language-text\">calcMode</code> 有四種模式：<code class=\"language-text\">discrete</code>、<code class=\"language-text\">linear</code>、<code class=\"language-text\">paced</code>、<code class=\"language-text\">spline</code>。</p>\n<p><strong>discrete</strong> 顧名思義就是離散的，<code class=\"language-text\">from</code> 值跳到 <code class=\"language-text\">to</code> 值不做補間; <strong>linear</strong> 跟 <strong>paced</strong> 我覺得效果雷同，都是讓讓補間動畫的速度維持一致（linear）與平均（paced）; <code class=\"language-text\">spline</code> 則是使用貝式曲線，需要搭配 <code class=\"language-text\">keyTimes</code> 與 <code class=\"language-text\">keySplines</code> 來使用。</p>\n<p><code class=\"language-text\">keyTimes</code> 就是關鍵影格，跟前面提過的 <code class=\"language-text\">values</code> 一樣，可以接受多個以分號區隔的值，定義動畫的關鍵時間點，搭配不同的 <code class=\"language-text\">calcMode</code> 就能在不同的時間點有不同的速度效果。</p>\n<p><code class=\"language-text\">keySpline</code> 是當你 <code class=\"language-text\">calcMode</code> 設定為 <code class=\"language-text\">spline</code> 時，用來定義貝式曲線的四個控制點的。</p>\n<p>這邊直接引用對岸網友精緻的 Demo 頁面給大家參考，用看的會比較清楚好理解：<a href=\"http://www.zhangxinxu.com/study/201408/svg-animation-calcmode.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">calcMode、keyTimes、keySplines 屬性 DEMO</a>。該作者對於 <code class=\"language-text\">keySpline</code> 的值也有<a href=\"https://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">畫圖說明</a>，很好懂，有興趣研究的話值得一看。</p>\n<h3 id=\"additive\" style=\"position:relative;\"><a href=\"#additive\" aria-label=\"additive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>additive</h3>\n<p>看到最後，不知道你會不會有個疑問：如果我想針對同的 SVG shape 的同個屬性做多個連續變化時該怎麼辦？</p>\n<p>例如：透過 <code class=\"language-text\">animateTransform</code> 先將圖案放大再位移。</p>\n<p>這時就要靠 <code class=\"language-text\">additive</code> 這個參數出馬了，<code class=\"language-text\">additive</code> 參數告知 SVG 是否要累加（<code class=\"language-text\">sum</code>）動畫效果，或是取代（<code class=\"language-text\">replace</code>），預設是 <code class=\"language-text\">replace</code>。</p>\n<p>例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scale<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">by</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.1<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">additive</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sum<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotate<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>360 0 0<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">begin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5s<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">additive</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sum<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p style=\"text-align:center;\">\n  <img src=\"/image/rick-animate-additive.svg\" alt=\"animate values attribute demo\">\n</p>\n<p>（註：經實測，animateTransform 在手機上似乎不支援，請用桌面版瀏覽器查看此範例）</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>今天花了不小的篇幅介紹了 SVG SMIL animation，感謝看到這邊的各位，製作 Demo 的過程對我來說很有趣，也學習了怎麼繪製 SVG，從網路上的其他資源也查到許多詳細的資料，收穫不少！希望對看到這篇文章的你們也能有所啟發，除了常用的 Web animation 與 CSS animation 外，有機會也試試用 SVG 直接作動畫吧！</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">超级强大的SVG SMIL animation动画详解</a></li>\n<li><a href=\"https://css-tricks.com/guide-svg-animations-smil/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Guide to SVG Animations (SMIL)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/SVG_animation_with_SMIL\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SVG animation with SMIL</a></li>\n<li><a href=\"http://tutorials.jenkov.com/svg/svg-animation.html#set\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SVG Animation</a></li>\n</ol>","id":"d92d1023-e99a-574a-8942-b9f6a51ceb0d","fields":{"slug":"svg-smil-animation-intro"},"frontmatter":{"date":"2021-06-18T08:56:40.000Z","title":"讓 SVG 自己動起來！ SVG SMIL Animation 介紹","tags":["web","svg","animation","smil"],"type":"tech","slug":"svg-smil-animation-intro"},"timeToRead":14},{"excerpt":"製作動畫，人人有責。","html":"<p>製作動畫，人人有責。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>疫情升溫，待在家裡救人救己，除了打電動玩健身環外，也是個好機會來培養培養自己的美術能力，然而平常工作沒什麼機會製作動畫的我，即便有了時間，也不知道要從何下手，上了 Dribbble、CodePen 找靈感，的確看到很多有趣的作品，但是大多都很複雜，不像是一個週末午後的休閒良品，例如，<a href=\"https://www.tinydesign.co.uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ben Evans</a> 的這個作品：</p>\n<p class=\"codepen\" data-height=\"379\" data-theme-id=\"dark\" data-default-tab=\"result\" data-user=\"ivorjetski\" data-slug-hash=\"xxGYWQG\" data-preview=\"true\" style=\"height: 379px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Pure CSS Landscape - An Evening in Southwold\">\n  <span>See the Pen <a href=\"https://codepen.io/ivorjetski/pen/xxGYWQG\">\n  Pure CSS Landscape - An Evening in Southwold</a> by Ben Evans (<a href=\"https://codepen.io/ivorjetski\">@ivorjetski</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>這張像是照片一樣的圖片，你能想像是單純用 CSS 製作的嗎？作者有放上他製作這作品的<a href=\"https://youtu.be/rUCVBNNyjC4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">縮時影片</a>（影片的音樂還是他自己做的，真有才華），雖然不知道總共花了多少時間，但以他的另一個同樣驚人且至少花費一百小時的<a href=\"https://codepen.io/ivorjetski/pen/dBYWWZ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a>推斷，時數少不到哪去的。</p>\n<p>我知道很多人會覺得，『對呀很酷，但為什麼？』。</p>\n<p>我也不懂為什麼，但知道能利用 CSS 做出這種極限真的很令人感到興奮。光是觀察他的程式碼就可以學到不少技巧，像是：</p>\n<ol>\n<li>Custom HTML tag</li>\n</ol>\n<p>即便是用 CSS 繪圖，相信大部分的人也都是用普通的 <code class=\"language-text\">div</code>、<code class=\"language-text\">span</code> 來組裝圖案，但如果你打開剛剛那範例的 HTML，會看到這樣的結構：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>landscape</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sky</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n      ...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span>\n    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sky</span>\n  <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>landscape</span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<p>全都是 custom element，以為是他自製的 web component 但他又沒有對應的 Javascript？🤔</p>\n<p>其實現今瀏覽器對這種 invalid 的 HTML tag 容忍度很高，只要有給定 CSS，瀏覽器還是能正常渲染出來。實際專案上當然不建議這樣做，但在製作 CSS 繪圖或藝術動畫這類通常擁有複雜 HTML 結構的作品上時，就能讓程式碼看起來簡潔許多，等同於讓 tag name 取代 class name。</p>\n<ol start=\"2\">\n<li>Responsive rem</li>\n</ol>\n<p>我們都知道 <code class=\"language-text\">rem</code> 會隨著 root element 的 font-size 自動調整大小，所以若是我們也能動態調整 root element 的大小，並用 <code class=\"language-text\">rem</code> 來設定所有元素的 size，那就能讓頁面輕鬆 responsive。要做到這點可以利用 <code class=\"language-text\">vmin</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1vmin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">vmin</code> 對應 viewport 的短邊，意即螢幕縮小時，該值也會隨之變小，這樣就能達到我們要的效果。</p>\n<p>其實還有其他技巧，但已經扯夠遠了😅。</p>\n<p>雖然試著理解高手如何做到是能吸收不少經驗，但還是會想要自己動手做點什麼，好在我又發現了另一個稍微平易近人的高手 - <a href=\"https://dribbble.com/ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aaron Iker</a>，他大多的作品都圍繞在一個網頁上不可缺乏，但鮮少被人拿來做文章的元件 - <strong>\"按鈕\"</strong>上。</p>\n<p>按鈕，幾乎所有網頁都會用到它，但就是拿來觸發一些動作，被觸發的動作才是我們在意的，很少會在上頭多作著墨，頂多加個 Hover 變色或位移就很差不多了。</p>\n<p>但看看下面這個<a href=\"https://dribbble.com/shots/14524315-Download-Button\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實例</a>：</p>\n<p><video width=\"100%\" height=\"315\" controls src=\"https://cdn.dribbble.com/users/414694/screenshots/14524315/media/d4970a372ae0c6b9a4bf8d60c4d5d82f.mp4\"></video></p>\n<p>一點小巧思，瞬間就讓按鈕活了起來。</p>\n<p>而且因為範圍限縮在了按鈕的大小，就算動畫稍微華麗一些也不會對整體頁面造成太多干擾。</p>\n<p>受到 Aaron 啟發，趁著空閒時間我也試著做了一個<a href=\"https://codepen.io/arvin0731/full/dyvvrBb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">按鈕動畫</a>，今天這篇文章就分享一下過程中使用到的工具與眉角！</p>\n<p><video width=\"100%\" height=\"315\" controls src=\"https://i.imgur.com/I27O5GT.mp4\"></video></p>\n<h2 id=\"靈感來源\" style=\"position:relative;\"><a href=\"#%E9%9D%88%E6%84%9F%E4%BE%86%E6%BA%90\" aria-label=\"靈感來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>靈感來源</h2>\n<p>這次的按鈕動畫主要修改自 Dribbble 上 <a href=\"https://dribbble.com/yorkun\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YorKun</a> 的作品 - <a href=\"https://dribbble.com/shots/15522609-Button-Lock-Animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Button Lock Animation</a>，感謝作者還有附上 Figma 檔案，讓我能更輕鬆的參照 Style。</p>\n<p>不過我並沒有完全照著原作的動畫製作，主要是想多試試一些不同的動畫組合，接下來我會一一介紹。</p>\n<h2 id=\"動畫實作\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E7%95%AB%E5%AF%A6%E4%BD%9C\" aria-label=\"動畫實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動畫實作</h2>\n<p>我一開始想達到的動畫有四項：</p>\n<ol>\n<li>滑動解鎖</li>\n<li>鎖頭開啟與掉落</li>\n<li>對應開鎖狀態的動畫</li>\n<li>鎖頭拖拉時的 2D 物理效果</li>\n</ol>\n<p>理論上應該是很快就能完成，但因為對 GSAP 不熟，花了些冤枉路，導致最後只完成了前三項的效果，算是差強人意。</p>\n<p>用到的工具主要是 <a href=\"https://greensock.com/docs/v3/GSAP/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GSAP</a> 與 GSAP 的 <a href=\"https://greensock.com/draggable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draggable plugin</a></p>\n<h3 id=\"滑動解鎖\" style=\"position:relative;\"><a href=\"#%E6%BB%91%E5%8B%95%E8%A7%A3%E9%8E%96\" aria-label=\"滑動解鎖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>滑動解鎖</h3>\n<p>GSAP 的 <a href=\"https://greensock.com/draggable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draggable plugin</a> 真的有夠簡單好用，只要給定想要啟動 Draggable 的 DOM 物件，並指定要拖拉的方向（type）與範圍（bounds），就能瞬間完成這樣的效果（<a href=\"https://codepen.io/arvin0731/pen/JjWWyZG?editors=1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo 由此去</a>）：</p>\n<p><video width=\"100%\" height=\"315\" controls src=\"https://i.imgur.com/1aL8FNc.mp4\"></video></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 註冊 gsap 的 draggable plugin</span>\ngsap<span class=\"token punctuation\">.</span><span class=\"token function\">registerPlugin</span><span class=\"token punctuation\">(</span>Draggable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 把需要互動的 DOM 用 querySelector 選出來</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".unlock-btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lockerArea <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".locker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dropArea <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".drop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 主要的 Draggable instance</span>\nDraggable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span>\n  bounds<span class=\"token operator\">:</span> button<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onRelease</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hitTest</span><span class=\"token punctuation\">(</span>dropArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      gsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n        ease<span class=\"token operator\">:</span> <span class=\"token string\">\"elastic.out(1, .75)\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this.disable();</span>\n      gsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> dropArea<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">-</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n        ease<span class=\"token operator\">:</span> <span class=\"token string\">\"elastic.out(1, .8)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          tl<span class=\"token punctuation\">.</span><span class=\"token function\">restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>中間可以看到，我們指定 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">x</code>，表示移動方向為 x 軸，而 <code class=\"language-text\">bounds</code> 為 <code class=\"language-text\">button</code> DOM 物件，所以最多不會拖移超過 butotn 的範圍。</p>\n<p>另外，影片中有一個效果是當你拖拉到前後兩端點的時候，會有一個吸力把拖移中的物件吸過去，這段其實是需要靠額外的兩個動畫效果來達成。</p>\n<p><code class=\"language-text\">Draggable.create()</code> 可以傳入的 Option 中，能指定 <code class=\"language-text\">onDrag</code> 與 <code class=\"language-text\">onRelease</code> handler，在 <code class=\"language-text\">onRelease</code> 的時候我們可以透過 <code class=\"language-text\">this.hitTest(dropArea)</code> 這個 Draggable 內建的函式判斷拖拉中的物件是否觸碰到另一個指定的 DOM 物件，若還沒碰到，我們就拉回到起點，也就是這段所做的事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">gsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  duration<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n  ease<span class=\"token operator\">:</span> <span class=\"token string\">\"elastic.out(1, .75)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">gsap.to</code> 可以讓指定的 DOM 物件變換到我們傳入的 property 狀態，以此例子來說就是位移到原點，等同於 apply  <code class=\"language-text\">transform:translateX(0)</code>。</p>\n<p>而若觸碰到指定物件，則可以調整 <code class=\"language-text\">x</code> 來將拖移物件直接拉到指定物件，這樣就能製造出<em>吸力</em>的效果。</p>\n<p>此外，在觸碰到物件後的 <code class=\"language-text\">gsap.to</code> 函式中，我們也傳入了 <code class=\"language-text\">onUpdate</code> handler，該 handler 會在動畫完成後被觸發，剛好讓我們能接著下一階段的動畫 - <strong>鎖頭開啟與掉落</strong>。</p>\n<h3 id=\"鎖頭開啟與掉落\" style=\"position:relative;\"><a href=\"#%E9%8E%96%E9%A0%AD%E9%96%8B%E5%95%9F%E8%88%87%E6%8E%89%E8%90%BD\" aria-label=\"鎖頭開啟與掉落 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>鎖頭開啟與掉落</h3>\n<p>當拖移物件觸碰到指定物件時，<code class=\"language-text\">onUpdate</code> 會被觸發：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  tl<span class=\"token punctuation\">.</span><span class=\"token function\">restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">onUpdate</code> 中我們放的是一個 <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Timeline</code> 物件</a>，它能讓我們進行序列動畫，一步步指定各個物件該如何依序執行動畫。</p>\n<p>由於我是將整個 timeline 動畫定義在別處，所以當 <code class=\"language-text\">onUpdate</code> 被觸發時是呼叫 <code class=\"language-text\">tl.restart()</code>，你也可以直接定義在 handler 裡面。</p>\n<p>Timeline 使用方法一樣簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> tl <span class=\"token operator\">=</span> gsap<span class=\"token punctuation\">.</span><span class=\"token function\">timeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> paused<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//create the timeline</span></code></pre></div>\n<p>先創建一個 timeline 物件，這邊傳入 <code class=\"language-text\">{ paused: true }</code> 是因為我希望在之後才觸發他（上述所說，在拖移物件移動到指定區域後才觸發)，所以先預設讓他暫停，這樣我們在 <code class=\"language-text\">onUpdate</code> 時再呼叫 <code class=\"language-text\">restart()</code> 即可。</p>\n<p>題外話，一開始我並不是用 <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timeline</a> 而是在每個 <code class=\"language-text\">gsap.to</code> 的 <code class=\"language-text\">onUpdate</code> 中去呼叫另一個 <code class=\"language-text\">gsap.to</code>，這樣雖然也是可行，但讓程式碼可讀性降低很多，最終我才改成用 <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timeline</a> 來串接序列動畫。</p>\n<p>接著就是針對每個我們想要觸發動畫的 DOM 物件設定欲變化的值：</p>\n<p>先讓整個鎖頭的身體部分往下位移，讓上面鐵環部分保持原地，造出開鎖的效果。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token string\">\"120%\"</span><span class=\"token punctuation\">,</span>\n  duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/image/button-animation-open-lock.gif\" alt=\"demo\"></p>\n<p>接著利用 <code class=\"language-text\">keyframes</code> 針對單一物件進行一連串較為細緻的動畫，這邊主要是要將整個鎖頭（包含身體與鐵環部分）進行位移與旋轉，營造出鎖頭打開並從鎖上拿掉的動畫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...略*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    keyframes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        rotation<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>\n        x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        transformOrigin<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        y<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/image/button-animation-drop-locker.gif\" alt=\"demo\"></p>\n<p>接著也是差不多的步驟，一步步對其他的 DOM 物件加上最後的 - <strong>對應開鎖狀態的動畫</strong>，替換掉 <em>UNLOCK</em> 字樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...略*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...略*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    rotation<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token number\">0.3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".message,.drop,.locker-area\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    y<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fromTo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\".read-ok, .unlock-msg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      opacity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意到的是我們除了傳入 DOM object 給 <code class=\"language-text\">gsap.to</code> 與 <code class=\"language-text\">gsap.fromTo</code> 外，也能直接指定 class name，非常方便。</p>\n<p>就這樣簡單幾行程式碼，就做好了一個套用在按鈕上的動畫，應該還算是不錯吧！</p>\n<p class=\"codepen\" data-height=\"369\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"arvin0731\" data-slug-hash=\"dyvvrBb\" style=\"height: 369px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Drag to unlock button with locker (final ver.)\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/dyvvrBb\">\n  Drag to unlock button with locker (final ver.)</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>今天簡單練習了一下從 Dribbble 上找靈感然後用前端技術將動畫實作出來的過程，或許沒有什麼新的東西，但希望能給大家帶來點啟發，防疫期間不妨在家做點有趣的動畫或 CSS art，自娛娛人一下！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.tinydesign.co.uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ben Evans</a> </li>\n<li><a href=\"https://dribbble.com/ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aaron Iker</a></li>\n<li><a href=\"https://greensock.com/docs/v3/GSAP/gsap.to()\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GSAP</a></li>\n<li><a href=\"https://frontend.horse/articles/realistic-art-with-css/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">frontend.horse</a></li>\n</ol>","id":"e7b1f0f4-81d4-5ddc-9c87-245af6ede978","fields":{"slug":"practice-animation-on-button"},"frontmatter":{"date":"2021-05-22T13:37:30.000Z","title":"練習動畫的好選擇 - 按鈕","tags":["css","gsap","web"],"type":"tech","slug":"practice-animation-on-button"},"timeToRead":9},{"excerpt":"最近很迷 Netflix 上的 Formula 1: Drive to Survive，看各家車廠與車手為了爭奪那幾秒的速度而拼盡全力，非常熱血勵志，把這精神延伸到網頁製作上，大概就是要將網頁效能調整到極致，各種能減少 Loading 時間的技巧都得用上。","html":"<p>最近很迷 Netflix 上的 Formula 1: Drive to Survive，看各家車廠與車手為了爭奪那幾秒的速度而拼盡全力，非常熱血勵志，把這精神延伸到網頁製作上，大概就是要將網頁效能調整到極致，各種能減少 Loading 時間的技巧都得用上。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近公司有個行銷活動需要做一個簡單的 SPA，基本上只有簡單的三個頁面，完全可以利用 Gatsby 或 Nextjs 來製作靜態頁面，然後部署到 CDN 上頭，效能上來說理應足夠好了，但是我們的設計師在頁面上混用了多種的字體，尤其是日文部分，除了一般瀏覽器內建的字體外，某些元件採用額外的免費字體，例如 <a href=\"https://www.freejapanesefont.com/corporate-logo-font-download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Corporate Logo Font</a>，這代表我們需要額外去下載這些字型，但為了頁面上的幾個字，去下載一整個字型檔案（ttf, 2.6MB）實在很浪費，因此只好來研究一下如何客製化字型檔案，只載入我們需要的字。</p>\n<p>雖然這感覺是個很容易遇到的需求，但我還真的是第一次實際需要處理，感謝同事 Carlos 提供解法，透過這篇文章筆記一下，希望對他人也有點幫助。</p>\n<h3 id=\"開始前先稍稍複習一下什麼是-ttf還有什麼其他字型格式呢\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%89%8D%E5%85%88%E7%A8%8D%E7%A8%8D%E8%A4%87%E7%BF%92%E4%B8%80%E4%B8%8B%E4%BB%80%E9%BA%BC%E6%98%AF-ttf%E9%82%84%E6%9C%89%E4%BB%80%E9%BA%BC%E5%85%B6%E4%BB%96%E5%AD%97%E5%9E%8B%E6%A0%BC%E5%BC%8F%E5%91%A2\" aria-label=\"開始前先稍稍複習一下什麼是 ttf還有什麼其他字型格式呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始前先稍稍複習一下，什麼是 ttf？還有什麼其他字型格式呢？</h3>\n<p><a href=\"https://zh.wikipedia.org/zh-tw/TrueType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TTF（TrueType Font）</a>是由蘋果和微軟共同開發的一種電腦輪廓字型類型標準，是 Mac 與 Windows 上最常見的格式，基本上所有主流瀏覽器都支援，也是免費或便宜的第三方字體最常提供的格式。缺點是檔案未經過壓縮，文件大小較大。</p>\n<p>另一個主流格式為 <a href=\"https://zh.wikipedia.org/zh-hant/OpenType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OTF（OpenType Font）</a>，是一種可縮放字型（scalable font）電腦字型類型，由 TrueType 延伸而來，採用 PostScript 格式，是微軟與 Adobe 聯合開發，用來替代 TrueType 字型的新字型。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/Web%E9%96%8B%E6%94%BE%E5%AD%97%E5%9E%8B%E6%A0%BC%E5%BC%8F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WOFF（Web Open Font Format）</a> 則是完全為了 Web 而設計的格式，由 Mozilla、Microsoft 與 Opera 合作推出。WOFF 的字型都經由 WOFF 的編碼工具壓縮，體積能比 tff 小 40%，現在已經是網頁字體的推薦標準。WOFF2 則是 WOFF 的升級版，體積可以壓得更小。</p>\n<p>最後，當然大家熟悉的 SVG 也可以算是一種。</p>\n<p>在主流的作業系統與瀏覽器上，這幾種格式的支援度都很高，而其主要的細節差異，因為非本篇重點，就不多著墨，有興趣的讀者可以到 wiki 上查看。</p>\n<p>今天要減少的字型檔案為最常見的 tff 格式。</p>\n<p>順帶一提，當我在撰寫文章的時候，對於字型、字體等名詞的差異很模糊，好在 JustFont 在<a href=\"https://blog.justfont.com/2013/02/some_nouns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">多年前的一篇文章</a>解釋得蠻清楚的，推薦大家理解一下！</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>要針對字型進行處理的話，首先我們需要下載 FontForge，FontForge 是一個很有名的軟體，可以用來設計、創建字體，或是進行各種字型相關的操作，可以從 <a href=\"https://fontforge.org/en-US/downloads/mac-dl/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fontforge.org/en-US/downloads/mac-dl/</a> 下載 Mac 版本（也有 Linux 與 Windows 的版本）。</p>\n<p>在官網上你可以找到許多文件，甚至是一整個 <a href=\"http://designwithfontforge.com/en-US/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ebook</a> 來教你如何用 FontForge 來設計字體。</p>\n<h3 id=\"用-fontforge-開啟原始字型檔\" style=\"position:relative;\"><a href=\"#%E7%94%A8-fontforge-%E9%96%8B%E5%95%9F%E5%8E%9F%E5%A7%8B%E5%AD%97%E5%9E%8B%E6%AA%94\" aria-label=\"用 fontforge 開啟原始字型檔 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用 FontForge 開啟原始字型檔</h3>\n<p>載好 FontForge 後，我們先打開原始的字型檔，這邊以前面提到的 Corporate Logo Font 為例（註： 在 MacOS Catalina 或 Big Sur，直接點選載好在 Apps 內的 FontForge app 可能會被 OS 擋下來，快一點的方式是<code class=\"language-text\">按右鍵 -> \"Show Package Contents\" -> \"Contents\" -> \"MacOS\"</code>，然後點選 FontForg.app，接者就會打開 terminal 並執行 FontForge。）：</p>\n<p><img src=\"/image/fontforge-corporatelogo-original.png\" alt=\"original-font-file-in-fontforge\"></p>\n<p>開啟後可以看到所有的字圖，接著其實你就可以選取你不要的字圖，然後 <code class=\"language-text\">clear</code> 掉它們：</p>\n<p><img src=\"/image/clear-font.png\" alt=\"clear-font\"></p>\n<p>但照這樣處理，弄到天荒地老六親不認都弄不完。工程師要用更聰明的解法。</p>\n<h2 id=\"正確的姿勢\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E7%A2%BA%E7%9A%84%E5%A7%BF%E5%8B%A2\" aria-label=\"正確的姿勢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正確的姿勢</h2>\n<p>打從一開始，我們就是因為原始字檔裡面太多我們不要的東西，我們需要的很少，才想要從原始檔案中擷取需要的部分，既然如此，就應該從我們<strong>想要的字圖</strong>下手，而不是慢慢刪掉我們不要的字圖。</p>\n<p>FontForge 其實有提供一個很方便的功能，叫做 <code class=\"language-text\">Invert Selection</code>，能夠選取所有<em>你沒有選取到的東西</em>，直接看個動圖範例：</p>\n<p><img src=\"/image/fontforge-invert-select.gif\" alt=\"fontforge-invert-select\"></p>\n<p>這樣一來，就很簡單了，只要選取住你想要的字圖，然後點選 <code class=\"language-text\">Edit -> Select -> Invert Selection</code>，就完成了，接著就把 Fontforge 自動幫你選取的字圖 <code class=\"language-text\">clear</code> 掉即可。</p>\n<p>但這樣還是有個問題。</p>\n<p>字型檔內容這麼多，我要手動在 FontForge 中找到自己想要的字圖不也是找到山窮水盡嗎？</p>\n<h3 id=\"正確姿勢二\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2%E4%BA%8C\" aria-label=\"正確姿勢二 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正確姿勢二</h3>\n<p>FontForge 是個蠻強大的工具，除了 GUI 以外，也提供 interpreters，讓你能撰寫 scripts 來修改字型檔。</p>\n<p>一個 interpreter 是 Python，另一個則是其內建的 scripting language。<a href=\"https://fontforge.org/docs/scripting/scripting.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細的範例、語法等可以從官網查看，文件很完整</a>。</p>\n<p>有了 scripting 的功能，我們就不用自己手動選取字圖啦。</p>\n<p>在 FontForge UI 上，你可以點選 <code class=\"language-text\">File -> Execute Script</code> 叫出 Dialog，可以選擇直接貼上 Python 程式碼，也可以選擇 <code class=\"language-text\">FF -> Call</code>，來載入使用另一個內建 interpreter 的 script file。</p>\n<p><img src=\"/image/fontforge-exec-scripts.gif\" alt=\"fontforge-exec-scripts\"></p>\n<p>因為我們要處理的動作很簡單，只有三個動作（選取字型、反轉選取、刪除），所以直接用內建的 script language 其實比較簡單，可以利用 NodeJS 來產生執行檔。</p>\n<h3 id=\"需要的-api\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E8%A6%81%E7%9A%84-api\" aria-label=\"需要的 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需要的 API</h3>\n<p>三個動作，選取字圖、反轉選取、刪除，分別對應的 API 為 <code class=\"language-text\">SelectMore()</code>、<code class=\"language-text\">SelectInvert()</code>、<code class=\"language-text\">DetachAndRemoveGlyphs()</code>。</p>\n<p>我們要匯入進 FontForge 的執行檔，就只需要這三個 API 即可。</p>\n<p><code class=\"language-text\">SelectMore()</code> 用法是傳入字型的 unicode 作為參數，即可選取該字圖，不過執行一次只能選取一個字圖。<code class=\"language-text\">SelectInvert()</code> 與 <code class=\"language-text\">DetachAndRemoveGlyphs()</code> 則不需要參數。</p>\n<h3 id=\"範例程式\" style=\"position:relative;\"><a href=\"#%E7%AF%84%E4%BE%8B%E7%A8%8B%E5%BC%8F\" aria-label=\"範例程式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>範例程式</h3>\n<p>知道了需要的 API，我們就可以來寫程式產生執行檔 <code class=\"language-text\">subset-font.pe</code>，<code class=\"language-text\">.pe</code> 是 FontForge 可以接受的格式，<code class=\"language-text\">.ff</code> 也行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 挑選出你頁面上需要用到的字</span>\n<span class=\"token keyword\">const</span> characters <span class=\"token operator\">=</span> <span class=\"token string\">'123招待コード'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./subset-font.pe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  characters<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 轉換成 16 進位</span>\n    <span class=\"token keyword\">let</span> hex <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 補零，以符合 \\u 格式</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      hex <span class=\"token operator\">=</span> hex<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 然後執行檔內寫入 SelectMore</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SelectMore(\"u</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\")\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 反轉選擇，選取所有其他不要的字</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SelectInvert()\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 最後移除字型</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DetachAndRemoveGlyphs()\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用 FontForge API 搭配上面程式後，會產生以下內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"shsubset-font.pe\"><pre class=\"language-shsubset-font.pe\"><code class=\"language-shsubset-font.pe\">SelectMore(&quot;u0031&quot;)\nSelectMore(&quot;u0032&quot;)\nSelectMore(&quot;u0033&quot;)\nSelectMore(&quot;u62db&quot;)\nSelectMore(&quot;u5f85&quot;)\nSelectMore(&quot;u30b3&quot;)\nSelectMore(&quot;u30fc&quot;)\nSelectMore(&quot;u30c9&quot;)\nSelectInvert()\nDetachAndRemoveGlyphs()</code></pre></div>\n<p>接著依照<a href=\"#%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2%E4%BA%8C\">正確姿勢二</a>的方式，匯入此執行檔，FontForge 就會產生只包含我們想要的字圖的字型檔了！：</p>\n<p><img src=\"/image/fontforge-script-subset-font.gif\" alt=\"fontforge-script-subset-font.gif\"></p>\n<p>不過因為刪掉的字圖很多，我們可以進一步透過 FontForge 的壓縮功能來輔助我們檢視成品：</p>\n<p>剛執行完 script 後，畫面會停留在 select 所有其他你不要的字圖的狀態，你可以先隨便點選空白處 deselect 所有字圖，然後選擇 <code class=\"language-text\">Encoding -> Compact</code>：</p>\n<p><img src=\"/image/fontforge-compact.gif\" alt=\"fontforge-compact\"></p>\n<p>就能清楚看到整個檔案的確只剩下我們所選的字圖（以上面範例 script 來說就是 <code class=\"language-text\">123招待コード</code>）。</p>\n<p>最後步驟就是產生字型檔案，點選 <code class=\"language-text\">File -> Generate Fonts...</code>，然後看你要 export 成什麼格式，如果是網頁上要用，當然就推薦使用 <code class=\"language-text\">woff</code>：</p>\n<p><img src=\"/image/fontforge-subset-font-generate-file.png\" alt=\"fontforge-subset-font-generate-file\"></p>\n<p>按下 <code class=\"language-text\">Generate</code> 後可能會出現 Error，可以不用理他，繼續 generate：</p>\n<p><img src=\"/image/fontforge-generate-error.png\" alt=\"fontforge-generate-error\"></p>\n<p>這樣就大功告成了！</p>\n<p>（註：關掉 FontForge 時，記得選 <code class=\"language-text\">Don't Save</code>，不然會蓋掉原始的檔案喔！）</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>這個方式可以用在各種字體檔案，非常方便，對於靜態頁面上內容文字不太會變動的狀況下，利用這個技巧可以大幅降低需要載入的檔案大小，以我公司專案的例子來說，從原本 2.6MB 的 tff 檔案，最後可以變成 8KB 的 woff 檔案，省下的大小很可觀的。</p>\n<p>簡單的筆記，希望對大家有幫助！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28179203\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web 字體簡介: TTF, OTF, WOFF, EOT &#x26; SVG</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35555816/delete-all-unused-characters-from-a-ttf-font-with-fontforge/35754448#35754448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Delete all unused characters from a TTF-font with Fontforge</a></li>\n<li><a href=\"https://fontforge.org/docs/scripting/scripting.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fontforge docs</a></li>\n<li><a href=\"https://blog.justfont.com/2013/02/some_nouns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[but] 雜談 ─ 常常搞混的一些詞</a></li>\n</ol>","id":"50a95194-1c2f-534b-9d86-281727779fe5","fields":{"slug":"make-smaller-ttf-font-files-for-web"},"frontmatter":{"date":"2021-04-23T23:20:17.000Z","title":"透過減少 ttf 字體檔案大小來增進網頁效能","tags":["web","font","performance"],"type":"tech","slug":"make-smaller-ttf-font-files-for-web"},"timeToRead":8},{"excerpt":"今年 地味ハロウィン 的第一名我給這位 LOL - パンダが足にまとわりついてしまう飼育員","html":"<blockquote>\n<p>今年 地味ハロウィン 的第一名我給這位 LOL - パンダが足にまとわりついてしまう飼育員</p>\n</blockquote>\n<!-- more -->\n<blockquote class=\"twitter-tweet\" data-dnt=\"true\" data-theme=\"light\"><p lang=\"ja\" dir=\"ltr\">パンダが足にまとわりついてしまう飼育員<a href=\"https://twitter.com/hashtag/%E5%9C%B0%E5%91%B3%E3%83%8F%E3%83%AD%E3%82%A6%E3%82%A3%E3%83%B3?src=hash&amp;ref_src=twsrc%5Etfw\">#地味ハロウィン</a> <a href=\"https://twitter.com/hashtag/DPZ?src=hash&amp;ref_src=twsrc%5Etfw\">#DPZ</a> <a href=\"https://t.co/GlHyjuZJ5R\">pic.twitter.com/GlHyjuZJ5R</a></p>&mdash; チカ (@chica_1107) <a href=\"https://twitter.com/chica_1107/status/1322368574380335104?ref_src=twsrc%5Etfw\">October 31, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>大約是在前陣子 GitHub 的 profile readme 很夯的時候，我在網路上看到了 matter.js 這個套件的作品，腦袋中就萌生一個點子想試試看，但因為真的沒有實際用處，也不確定效果好不好，就被我一直擱置，直到這個週末的空閒時間才決定要來實現它。</p>\n<p>整體想法是這樣的，我想從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</p>\n<p>這邊用我老婆☺️ 的名字作為範例先給大家看看成果：</p>\n<p><img src=\"/image/HSI-HOver-DropName-loop.gif\" alt=\"wife\"></p>\n<p>而放到 GitHub 頁面的效果如下：</p>\n<p><img src=\"/image/github-demo.gif\" alt=\"github\"></p>\n<p>效果跟我想像的還是有點差異，不過也有八成像了，今天就利用我製作的小玩具來介紹一下 matter.js 的基本使用方式。</p>\n<h2 id=\"基本介紹\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9\" aria-label=\"基本介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本介紹</h2>\n<p><img src=\"/image/matterjs-website.png\" alt=\"matterjs-website\"></p>\n<p>matter.js 是一套由 JavaScript 撰寫的物理引擎，讓你能透過 JS 在瀏覽器上模擬物理反應，可以輕易調整物體重量、質量、速度，甚至是密度、摩擦力等等變量，非常適合用在需要呈現物理效果的 2D 遊戲中。</p>\n<p>其提供的 API 也設計得簡單好用，只是雖然每個 API 都有文件，但內容都不太實用，如果你需要調整細節的話，要馬就自己慢慢更動嘗試，不然就得查看其原始碼會比較清楚。</p>\n<p>而至於支援度部分也無須擔心，瀏覽器支援 IE8+，手機的觸控 Event 也不成問題。我覺得是另一個如同 GSAP 一樣值得花點時間學習把玩的前端工具。</p>\n<p>在進入我們的範例製作解析前，我想先條列介紹 matter.js 中的常用套件，除了先了解整體的 Context 外，也能當作之後說明實作內容時的 reference。</p>\n<h3 id=\"matterjs-的通用模組\" style=\"position:relative;\"><a href=\"#matterjs-%E7%9A%84%E9%80%9A%E7%94%A8%E6%A8%A1%E7%B5%84\" aria-label=\"matterjs 的通用模組 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Matter.js 的通用模組</h3>\n<p>matter.js 的 API 定義的很易懂，既然是做物理模擬，當然就要有 <code class=\"language-text\">World</code>、<code class=\"language-text\">Body</code> 與 <code class=\"language-text\">Constraint</code>，而這些也是你使用 matter.js 所需要的基礎元件。</p>\n<p><strong>World</strong>: matter.js 透過此模組來創建一個模擬世界，可以微調世界中的一些屬性，像是重力、邊界等等，而一個世界當然是由多個 Bodies 所組成。</p>\n<p><strong>Bodies</strong>: Bodies 模組提供你方法去生成一些物體，像是圓形物體、方形物體等等，你也可以傳入 svg、img 去客製化物體形狀與樣式。產生的物體放入 World 中後就可以被 render 在畫面上。</p>\n<p><strong>Body</strong>: 利用 Bodies 產生的物件可以利用 Body 模組來進行進一步的操控。透過 Body，你可以旋轉、縮放、位移你的物體，也可以更改物體本身的密度、速度等等。換句話說，Body 讓你調整物體的物理特性。</p>\n<p><strong>Engine</strong>: 引擎，顧名思義就是驅動整個模擬物理世界的動力，根據 Body 的物理性質來精準掌控 <code class=\"language-text\">World</code> 內 <code class=\"language-text\">Body</code> 彼此間的物理現象，確保能模擬出符合設定的反應。是 matter.js 的核心。主要的<a href=\"https://github.com/liabru/matter-js/blob/master/src/core/Engine.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">程式碼</a>意外的沒有很長，可以大略看出 Engine 會負責控制 Bodies 之間的狀態更新。</p>\n<p><strong>Render</strong>: matter.js 有提供一個 Canvas based 的 Renderer，讓你能將 Engine 所催動的結果繪製出來，這個內建的 Render 模組主要是讓你用在開發與除錯上的，但對於簡單的動畫或遊戲，還是可以使用。另外要注意的是，該模組預設只會繪製出 wirefram 與向量，你要主動將 <code class=\"language-text\">render.options.wireframes</code> 設為 false，否則，以今天的模組為例（我們今天的範例也是用此模組開發。），他會變成這樣：</p>\n<p><img src=\"/image/matterjs-wireframe.png\" alt=\"matterjs-wireframe\"></p>\n<p>不過照這樣看來，依照官方的意思，如果你要使用 matter.js 來製作遊戲等等，基本上應該要自己實作 Render，你才能更好的控制畫面的變化。官方有提供一些 Renderer 的<a href=\"https://github.com/liabru/matter-js/wiki/Rendering#renderer-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>，也可以從其<a href=\"https://github.com/liabru/matter-js/blob/master/src/render/Render.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>參考。</p>\n<p><strong>Composites</strong>: 這個模組有點像是 Bodies 模組，差別在於 Bodies 模組讓你創建出 ”一個“ 物體，而 Composites 提供方法讓你創建出多個物體所組合而成的物體，像是 Stack、Pyramid 或甚至是 Car, Chain 等等常用的內建組合。</p>\n<p><strong>Composite</strong>: 如同 Body 對應於 Bodies，Composite 就是對應於 Composites 的模組，讓你控制由 Composites 創建出的組合物體的物理特性。</p>\n<p><strong>Constraint</strong>: Constraint 模組讓你能為兩個物體之間增加物理限制，像是兩物體一定要間隔一定距離等等。這個模組在我們這次的範例中我沒有用到，不過官網有不少範例都有使用，像是 <a href=\"https://brm.io/matter-js/demo/#newtonsCradle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Newton's Cradle</a>。</p>\n<p><strong>MouseConstraint</strong>: 如同 Constraint，這個模組讓你增加滑鼠與物體之間的”約束”，透過建立物體與滑鼠的限制，就可以讓使用者透過滑鼠與你創建的物體互動。前面的範例中沒用到，但後面我會稍微帶到如何使用。</p>\n<h2 id=\"知道了基本模組就從做中學吧\" style=\"position:relative;\"><a href=\"#%E7%9F%A5%E9%81%93%E4%BA%86%E5%9F%BA%E6%9C%AC%E6%A8%A1%E7%B5%84%E5%B0%B1%E5%BE%9E%E5%81%9A%E4%B8%AD%E5%AD%B8%E5%90%A7\" aria-label=\"知道了基本模組就從做中學吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知道了基本模組，就從做中學吧</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Engine <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Engine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Render <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Render<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Composites <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Composites<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> World <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bodies <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Bodies<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Body <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">;</span></code></pre></div>\n<p>起手式就是先將先前介紹過的模組都宣告出來。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// create engine</span>\n<span class=\"token keyword\">const</span> engine <span class=\"token operator\">=</span> Engine<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> world <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>world<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// create renderer</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> Render<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  element<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  engine<span class=\"token operator\">:</span> engine<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">920</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著創建 instance，利用 <code class=\"language-text\">Engine.create()</code> 創造 Engine 實例，而 <code class=\"language-text\">engine.world</code> 最後會需要傳給 <code class=\"language-text\">World</code> 模組，可以想像成是此引擎（Engine） 所驅動的世界（world）。</p>\n<p><code class=\"language-text\">Render</code> 的部分我們要指定使用的 engine、要渲染的 root element，以及寬高等基本選項。更細部的 properties 可以參考<a href=\"https://brm.io/matter-js/docs/classes/Render.html#properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網文件</a>，以我們的範例來說，只需要這樣就夠了。</p>\n<p>到目前為止，我們設定好了 <code class=\"language-text\">Engine</code> 與 <code class=\"language-text\">Render</code> 的實例，代表我們已經準備好了一個虛擬的世界，然而光是準備好還不夠，我們需要“啟動”它。</p>\n<p>所謂的啟動，其實就是要不斷地去呼叫 <code class=\"language-text\">Engine.update()\b</code> 來觸發引擎計算，或是讓 Renderer 更新畫面，執行類似下面的動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Engine<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而實際上 matter.js 內有另一個模組 <code class=\"language-text\">Matter.Runner</code>，可以來幫忙運行引擎與觸發 Render，在 <code class=\"language-text\">Engine</code> 與 <code class=\"language-text\">Render</code> 物件內都有個叫 <code class=\"language-text\">run</code> 的 helper 函式，就是用到此內建 Runner 模組，只要將實例放入，matter.js 的 <code class=\"language-text\">Runner</code> 就會幫忙執行 Runner 該做的事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Engine<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRender<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不過，與前面提到的 <code class=\"language-text\">Matter.Render</code> 類似，依照官網說法，內建的 <code class=\"language-text\">Matter.Runner</code> 主要也是開發與除錯用途，只適合用在簡單的小應用上。</p>\n<h3 id=\"萬事俱備只欠東風\" style=\"position:relative;\"><a href=\"#%E8%90%AC%E4%BA%8B%E4%BF%B1%E5%82%99%E5%8F%AA%E6%AC%A0%E6%9D%B1%E9%A2%A8\" aria-label=\"萬事俱備只欠東風 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>萬事俱備，只欠東風</h3>\n<p>Engine 與 Render 都啟動了，虛擬世界已上線，再來就只要往裡面丟入物體就好了。</p>\n<p>分析一下我的點子：<em>從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</em></p>\n<p>大致需要幾個條件：</p>\n<ul>\n<li>一堆小方塊來堆疊出 contribution graph。</li>\n<li>小方塊要能自由墜落，而代表名字部分的小方塊到某個點時需要停住。</li>\n<li>小方塊要能有噴散的效果。</li>\n</ul>\n<p>從 matter.js 的官網中可以找到許多範例，從那些範例內，可以大致摸索出自己需要哪些模組才能拼湊出這樣的效果。</p>\n<p>首先，可以利用 <code class=\"language-text\">Composites.stack</code> <a href=\"https://brm.io/matter-js/docs/classes/Composites.html#method_stack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a> 來製造出堆疊好的 contribution graph：</p>\n<blockquote>\n<p>API: Matter.Composites.stack(xx, yy, columns, rows, columnGap, rowGap, callback)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...略</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      fillStyle<span class=\"token operator\">:</span> color<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 隨機給定格子顏色</span>\n      strokeStyle<span class=\"token operator\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...略</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Composites.stack</code> 前面六個參數可以定義一個 grid 空間，範例中我們在相對於 <code class=\"language-text\">Render</code> 設定範圍的 x 軸 125px 與 y 軸 15px 的位置開始放置 stack，並定義該 grid 是 45 x 7 的格子（GitHub 上每行七天，大約 45 週），每個方塊大小 15px x 15px，格子與格子之間我們不需要空格，因此 columnGap 與 rowGap 都填 0。</p>\n<p>而最後的 callback 函數中，可以組合多個 body 來擺放在其 grid 空間中。舉例來說，我們想要繪製出 contribution graph 的話，就是在 callback 函式中，利用 <code class=\"language-text\">Bodies.rectangle</code> 來產生一個個的小方塊，在這個 callback 中可以做很多事情，包含定義方塊的顏色、狀態等等。 </p>\n<p>到這邊可以繪製出一個還不錯的 contribution graph：</p>\n<p><img src=\"/image/github-graph.png\" alt=\"github-graph\"></p>\n<h3 id=\"那名字呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%90%8D%E5%AD%97%E5%91%A2\" aria-label=\"那名字呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那名字呢？</h3>\n<p>要客製化 contribution graph 好像很不少方式，像是<a href=\"https://hackernoon.com/hack-your-github-contribution-graph-d88bdb417351\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>，但我沒想那麼多 LOL 畢竟一開始只是想實驗看看，所以就用最土炮的方式，用 <a href=\"https://www.pixilart.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pixilart</a> 手動在 45x7 的格子上用 pixel art 的方式寫出名字，然後再慢慢把格子數出來，建立一個雙層陣列來存：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nameBlock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然後在剛剛的 <code class=\"language-text\">Composites.stack</code> 的 callback 函數中，我就能判斷當下繪製的 body（rectangle）是不是屬於名字的一部分，進一步做處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 根據當下的 rectangle 位置 (x, y) 與 nameBlock 做比對</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">static</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> indexX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> indexY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> nameBlock<span class=\"token punctuation\">[</span>indexY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 若是屬於名字的一部分，設定為 static，然後給予不同的顏色設定</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block <span class=\"token operator\">&amp;&amp;</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#229A3B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#196126'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#EBEDEF'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#C5E48B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isStatic<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>繪製成果：</p>\n<p><img src=\"/image/matterjs-githubgraph-withname.png\" alt=\"withName\"></p>\n<p>另外，在上面我自製的 <code class=\"language-text\">static</code> 函式中，會根據 rectangle 是否屬於名字的一部分，回傳 <code class=\"language-text\">isStatic</code> 布林值，這個值其實是屬於 <code class=\"language-text\">Body</code> 的一個 property，若 <code class=\"language-text\">isStatic</code> 設為 true，則該物體就不會受到其他物體的物理影響，很適合用在製作牆壁之類的物體，也恰好可以用來滿足我希望名字能被定住的需求。</p>\n<p>而由於我希望方塊們是在掉落到一半的時候，名字才卡住，而其餘的方塊得隨著地心引力繼續下落，所以我必須要延緩設定 <code class=\"language-text\">isStatic</code> 的時間點，不能在我使用 <code class=\"language-text\">Bodies</code> 創建 rectangle 時就設定，需要來個 setTimeout 才行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Body<span class=\"token punctuation\">.</span><span class=\"token function\">setStatic</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> isStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>由於因為“物理界”的正常現象，方塊會從我們設定的 y 軸 15px 的地方掉落，而在下落的 800ms 時，我們透過 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setStatic\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Body.setStatic()</code></a> 這個 method 讓屬於名字部分的方塊變為 static，這樣就能達到名字掉落一半時定住，其餘方塊繼續掉落的效果：</p>\n<p><img src=\"/image/name-fix-block-drop.gif\" alt=\"name-fix-block-drop\"></p>\n<h3 id=\"增加阻礙摩擦力與速度\" style=\"position:relative;\"><a href=\"#%E5%A2%9E%E5%8A%A0%E9%98%BB%E7%A4%99%E6%91%A9%E6%93%A6%E5%8A%9B%E8%88%87%E9%80%9F%E5%BA%A6\" aria-label=\"增加阻礙摩擦力與速度 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>增加阻礙、摩擦力與速度</h3>\n<p>想要的效果達成一半了，就是方塊掉落速度太線性了，而且直直落到畫面外也有點好笑，我們需要製造一點障礙物以及改變物體的速度，產生撞擊的效果。</p>\n<p>首先，增加障礙物。</p>\n<p>要增加障礙物很簡單，matter.js 的範例裡面很多都有利用 <a href=\"https://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Bodies.rectangle</code></a> 去創建牆壁，控制物體的活動範圍，這在製作遊戲時也是很重要的一部分。我們也可以如法泡製，增加四面八方的牆壁：</p>\n<blockquote>\n<p>API: Matter.Bodies.rectangle(x, y, width, height, [options])</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wallOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    fillStyle<span class=\"token operator\">:</span> <span class=\"token string\">'transparernt'</span><span class=\"token punctuation\">,</span>\n    strokeStyle<span class=\"token operator\">:</span> <span class=\"token string\">'#FBFBFB'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> topWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bottomWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rightWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">880</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> leftWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>牆壁的製作就是利用前面提到的 <code class=\"language-text\">isStatic</code> 屬性，讓他固定住，然後設定好擺放位置與長寬即可。唯一要注意的是，牆壁的長度要調整，不能四面都ㄧ樣長，這樣小方塊撞擊到牆壁後，還能從邊緣掉落或向外噴散，效果會好一點。</p>\n<p>加了牆壁後，讓小方塊不會直直掉落，有了一些回饋感：</p>\n<p><img src=\"/image/matterjs-wall.gif\" alt=\"matter-js-wall\"></p>\n<p>接著是物體的速度。</p>\n<p><code class=\"language-text\">Matter.Body</code> 有提供 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setVertices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">setVelocity</code></a> 這個屬性可以立即增加物體本身的線性速度，調整的方式為給予一個向量，因此可以調整施予速度的方向性：</p>\n<blockquote>\n<p>API: Matter.Body.setVertices(body, vertices), Vertor: { x: 0, y: 0 }</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocity</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這樣就會讓一個小方塊往 x 軸 3，y 軸 -10 的方向增加速度，再加上先前加入的牆壁與固定住的名字方塊，產生的撞擊反彈就能達成這樣的效果：</p>\n<p><img src=\"/image/matter-js-velocity.gif\" alt=\"velocity\"></p>\n<p>除此之外，<code class=\"language-text\">Bodies.rectangle</code> 在宣告時能夠傳入調整物理特性的 properties，像是 <code class=\"language-text\">frictionAir</code> 可以改變物體的空氣摩擦力，數值越高，物體掉落越慢，並且都能透過 <code class=\"language-text\">Matter.Body</code> 去操控，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Body<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>相關 <a href=\"https://brm.io/matter-js/docs/classes/Body.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API</a> 官網都有條列出來。</p>\n<p>將上述調整物體物理特性的函式呼叫搭配適當的 setTimeout，就能夠完成我們今天的範例效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isStatic<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">.</span><span class=\"token function\">setStatic</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> isStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isStatic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocity</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>喔對了，最後當然要記得把我們產生的 Stack composites 與牆壁放入模擬的世界中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// const world = engine.world;</span>\nWorld<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  stack<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// walls</span>\n  topWall<span class=\"token punctuation\">,</span>\n  bottomWall<span class=\"token punctuation\">,</span>\n  rightWall<span class=\"token punctuation\">,</span>\n  leftWall\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing...</h3>\n<p>matter.js 主打物理引擎，當然不是單純用來製造動畫，而是用來製作遊戲等等，也就是說要能與使用者互動，而方法就是一開始提到過的 <code class=\"language-text\">MouseConstraint</code>，雖然這次範例用不著這個東西，但還是放個使用方法在這邊供參考：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Mouse <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MouseConstraint <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>MouseConstraint<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> Mouse<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouseConstraint <span class=\"token operator\">=</span> MouseConstraint<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mouse<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">,</span>\n  constraint<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    stiffness<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      visible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nWorld<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">,</span> mouseConstraint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用法其實很簡單，其中 constraint 參數 <code class=\"language-text\">visible</code> 代表著滑鼠的拖拉軌跡會不會呈現出來，而 stiffness 可以算是調整所設定的 constraint 的韌度，調整該值可以影響物體受牽制（與滑鼠互動）後產生的彈性。文字可能有點難以描述，有需要使用的時候可以從官網文件查看可調整的參數值，試試看效果再決定要如何設置。</p>\n<p>上述設定的效果如下：</p>\n<p><img src=\"/image/matter-js-mouse.gif\" alt=\"matter-js-mouse\"></p>\n<p>最後放上程式碼連結供各位參考：<a href=\"https://codepen.io/arvin0731/pen/qBNoLQv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/arvin0731/pen/qBNoLQv</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Matter.js 應該算是蠻久的一個工具了，以使用上來說非常容易上手，做些小動畫小遊戲蠻適合的，至於要真的用來製作複雜的遊戲的話，可能還是要再多研究他的效能如何，畢竟我這次並沒有觸碰到那塊，就歡迎有接觸過的讀者分享了！</p>\n<p>畢竟這個範例也是拼拼湊湊而來的，週末小玩具就是這樣，的確沒辦法理解到他底層是如何實作，但是至少完成了想要的效果，然後也知道了這個工具的一些基本用法，之後有需要時可以快速拿來使用。</p>\n<p>不過，提醒自己也提醒大家，要記得撥出時間去理解底層原理，因為這才是能讓你成長的要素，共勉之啦！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://brm.io/matter-js/docs/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">matter-js website</a></li>\n<li><a href=\"https://code.tutsplus.com/series/getting-started-with-matterjs--cms-1186\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started with Matter.js</a></li>\n<li><a href=\"https://www.pixilart.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pixilart</a></li>\n</ol>","id":"8449f260-f743-5214-ab33-8d991fd3b091","fields":{"slug":"matterjs-intro"},"frontmatter":{"date":"2020-11-01T13:37:30.000Z","title":"使用 Matter.js 2D 物理引擎製作動畫","tags":["web","matterjs","2d physics","for fun"],"type":"tech","slug":"matterjs-intro"},"timeToRead":15},{"excerpt":"『Gotta remember we live what we choose; It's not what you say, it's what you do; And the life you want is the life you have to make.』- Life is so cool (一首我心愛的人推薦的歌 :) )","html":"<blockquote>\n<p>『Gotta remember we live what we choose; It's not what you say, it's what you do; And the life you want is the life you have to make.』- Life is so cool (一首我心愛的人推薦的歌 :) )</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>稍微取樣了胡立先前<a href=\"https://blog.techbridge.cc/2020/07/11/an-interesting-styled-component-bug/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>的標題，但實際上這篇文章想分享的面向不太ㄧ樣，並不是 styled-components 本身的 issue 或是其所引用的底層套件的 bug，比較像是特定的使用情境，以及對 styled-components 實際運作原理不熟悉等因素，所導致的 bug。這個 bug 不是很容易被發現，解決的方法也算是有點 hack（運用到與官方文檔描述不符合的 API），我覺得蠻有趣的，加上主要的解法實作是由我<a href=\"https://github.com/whatasod\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同事</a>處理，所以想寫下來給自己做一個紀錄，給自己留點印象，對大家可能沒有直接幫助，可以當故事看看做個參考。</p>\n<p>TL;DR</p>\n<p>下面的篇幅大部分在講解發現問題的流程，也可以直接跳到<a href=\"#%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E5%95%8F%E9%A1%8C%E8%88%87%E8%A7%A3%E6%B3%95\">最後</a>看重點。</p>\n<h2 id=\"一切的開端\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E5%88%87%E7%9A%84%E9%96%8B%E7%AB%AF\" aria-label=\"一切的開端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一切的開端</h2>\n<p>團隊內有個專案是專門提供給行銷人員製作行銷頁面的內部工具，tech stack 中有使用 React 與 styled-components。原本最早的實作方式是簡單的 Single Page Application，透過 API 拉取內容進行 render，而由於頁面大多是在 App 內的 WebView 開啟，為了提高使用者經驗，我們決定將頁面先行在 server 端進行 prerender，將 HTML 放置 CDN，client 端載入所需資源後，JS 再透過 <code class=\"language-text\">ReactDOM.hydrate</code> 進行 hydration，讓有互動功能的 react component 可以運作。</p>\n<p>prerender 的做法，非常直接，我們使用 puppeteer 開啟 Headless server 直接 render 原本的 SPA 頁面，把 <code class=\"language-text\">page.content()</code> 給存起來。</p>\n<p>會採用這種做法的一個原因是因為原本用在 SPA 上的 component 其實也同時共用在內部工具中，而整個 SPA 頁面也還保留著作為預覽，讓使用者在編輯製作行銷頁面的時候能夠即時看到頁面外觀，因此與其修改成 <code class=\"language-text\">ReactDOM.renderToString()</code>，直接將 SPA 渲染完的結果存下來，直覺上簡單很多，程式碼的更動也少。</p>\n<p>prerender 完後，接著會把不需要在前端 rehydrate 的 component 從 JS bundle 中移除，inject 需要的 style tag，最後連同 HTML 一起放到 CDN 上。</p>\n<p>要 inject style tag 的原因是因為 styled-components 如同多數 CSS-in-JS 解決方案，是使用 CSSOM 去 insertRule，而這樣的做法在 Chrome 85 以前是無法透過 devtool 來調整 style，在開發階段除錯上稍嫌麻煩，所以我們利用 prerender 完的優化階段來把 styled-components 放在 CSSOM 中的 sheet 抓出來塞到 style tag 中（註：當時使用的還不是 styled-components v5+ 因此沒有 <code class=\"language-text\">disableCSSOMInjection</code> option 可用。）</p>\n<p>簡單的架構圖：</p>\n<p><img src=\"/image/mock-structure.png\" alt=\"simple structure\"></p>\n<p>基本上這樣一切都很順利，實際測試上線也都沒什麼太大問題。</p>\n<p>但是有個隱藏的 bug 我們一直都沒有發現，就是 <strong>prerender 完的頁面存有樣式跑版的機會。</strong></p>\n<p>而且這個情況並不是很容易發生，實際上在我們意識到之前，PM 早已回報過一兩次，但基於慣性，發現頁面有點奇怪時，自然反應是重新整理、重新執行，看看能否重現 issue，而這個 bug 在重新 prerender 後有蠻大的機率會再次隱藏起來，也因此沒有獲得足夠的注意力讓我們持續專研下去。</p>\n<p>直到某個同事在實作一個頁面載入後會有較多狀態變化的 component 時，他發現到，在沒有更動程式碼的情況下，在 client 端才動態出現的 component 樣式卻跑掉了，但瀏覽器 first load HTML 時卻是正常的。</p>\n<h2 id=\"到底是什麼問題\" style=\"position:relative;\"><a href=\"#%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C\" aria-label=\"到底是什麼問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>到底是什麼問題</h2>\n<p>為了除錯，我利用 Devtool 插入中斷點，發現到第一次 HTML 載入時，一切的 Style 都是正常的，包含 styled-components 所產生的 class name 以及我們 inject 到 html 內的 style tag；然而當 JS bundle 載入，前端 react component 重新 render 後，HTML DOM 上的 styled-components class name 與原先的不同，class name 所對應的 css style rule 也不一樣。</p>\n<p>接著再細看最終瀏覽器渲染的 HTML，發現到 <code class=\"language-text\">&lt;head></code> 內有兩個屬於 styled-components 的 style tag。</p>\n<p><img src=\"/image/two-style-tag.png\" alt=\"two style tag\"></p>\n<p>到這邊問題就比較清楚了。</p>\n<p><strong>我們塞了兩次 styled-components 產生的 style tag，所以導致 class name 的 style 有衝突。</strong></p>\n<p>上面紅線括弧的部分是我們在 server-side inject 進去，含有 css text 的 style tag；下方黃線標記的則是 client 端 hydrate 後，所產生的新的 style tag。</p>\n<p>造成的後果就是兩個毫無相干的 component 有機會共享了同樣的 class name，其中一個 component 的 style 就跑掉了：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--Call to action component--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-AxiKw iOTgPf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--FQA component--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-AxhUy iOTgPf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>另外值得一提的是，在我們的 case 中，由於我們還會把不需要在前端 rehydrate 的 react component code 從 JS bundle 裡拿掉，所以那些我們所謂 <em>靜態的 component</em> 樣式基本上不太會受影響，才讓這個 bug 比較難發現。</p>\n<h2 id=\"解決方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\" aria-label=\"解決方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方案</h2>\n<p>既然發現多了一個 style tag，那我們把後來蓋上去的那個 tag 拿掉不就得了嗎？</p>\n<p>但事情果然不是憨人想得這麼簡單。</p>\n<p>拿掉在 client-side 重新產生的 style tag 是可以確保整個 application 只吃到我們原先在 server 端 inject 的 CSS 樣式，但在 rehydrate 的過程中，component 的 class name 也變了，所以單純拿掉 client side style tag 反而讓整個頁面的樣式更加慘烈。</p>\n<p>還是得從根本解決問題。</p>\n<p>之所以會產生兩個 style tag，原因在於我們在 client 端進行 hydration 時，並<strong>沒有正確處理 styled-components 的 hydration</strong>，只顧慮到了 react component 本身的 hydration，對於 styled-compponent 來說，我們在 server-side inject 的 style tag <strong>不足以讓他進行 rehydrate（原因後面會說明）</strong>，所以他實際上只能重新 render 所有 component 的 style，重新產生 class name 與 style tag。</p>\n<p>而在了解到我們自己 inject 的 style tag 無法讓 styled-components 進行 rehydrate 後，我試著用前面提到過的 <code class=\"language-text\">disableCSSOMInjection</code>，根據<a href=\"https://styled-components.com/docs/api#stylesheetmanager\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a>，可以搭配 <code class=\"language-text\">StyleSheetManager</code>，讓 styled-components 自己 export 出含有 css text 的 style tag，但結果還是一樣有問題（後面會解釋原因）。</p>\n<p>因此，還是得仔細了解該如何讓 styled component 能正確 rehydrate，讀取我們在 prerender 時就已經處理過的 style，才不會造成 class name 衝突，以及有多餘的 style tag 產生。</p>\n<h3 id=\"styled-components-的-hydration\" style=\"position:relative;\"><a href=\"#styled-components-%E7%9A%84-hydration\" aria-label=\"styled components 的 hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-components 的 hydration</h3>\n<p>知道 solution 的方向後，開始到官網查閱關於 server side hydration 的資料，發現有針對 server-side rendering 所提出的<a href=\"https://styled-components.com/docs/advanced#server-side-rendering\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解決方案</a>：利用 <code class=\"language-text\">ServerStyleSheet</code> 可以搭配 <code class=\"language-text\">StyleSheetManager</code> provider，讓 styled-components 在 server-side 能夠產生 css style，並且提供機制讓該 style 能在 client-side 被 rehydrate：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyleSheetManager</span></span> <span class=\"token attr-name\">sheet</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">YourApp</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyleSheetManager</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> styleTags <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// or sheet.getStyleElement();</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handle error</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看起來就是該這樣做，不過呢，光從名字就跟你說了他是給你在 Server 用的，甚至還在文檔中寫上：<em>Just make sure not to use it on the client-side.</em></p>\n<p>但我們的 prerender 實際上是跑在 client 端，這樣肯定不行吧？</p>\n<p>我原本也是這樣想，打算放棄的時候，我優秀的<a href=\"https://github.com/whatasoda\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同事</a>跑去讀了讀 styled-components 的原始碼，發現 <code class=\"language-text\">ServerStyleSheet</code> 內其實沒有用到任何 NodeJS 獨有的 API，也就是說實際上 <code class=\"language-text\">ServerStyleSheet</code> 跑在 client 端也是沒問題的！</p>\n<p><code class=\"language-text\">ServerStyleSheet</code> 跟一般 styled-components 在 client 端使用的 <code class=\"language-text\">StyleSheet</code>（styled-components 自己<a href=\"https://github.com/styled-components/styled-components/blob/b19d17f1d6739d0cc6da826cf701a9ee3c075525/packages/styled-components/src/sheet/Sheet.js#L26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實作的版本</a>，並非 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Browser 內建的 StyleSheet</a>）差別在於，<code class=\"language-text\">ServerStyleSheet</code> 多傳了一個 <a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/models/ServerStyleSheet.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">isServer = true</code> 的 option</a> 給 <code class=\"language-text\">StyleSheet</code>，而這會使得 styled-components 的 <code class=\"language-text\">StyleSheet</code> 在 <code class=\"language-text\">makeTag</code> 的時候，不是去生成一個實際的 style tag，而是產生一個 <code class=\"language-text\">VirtualTag</code>：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Tag.js#L7-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/** Create a CSSStyleSheet-like tag depending on the environment */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> makeTag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isServer<span class=\"token punctuation\">,</span> useCSSOMInjection<span class=\"token punctuation\">,</span> target <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SheetOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tag <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isServer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VirtualTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useCSSOMInjection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSOMTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這個 <code class=\"language-text\">VirtualTag</code> 包含所有 style 的資訊，但不需要操作到實際的 DOM，這就是讓 styled-components 能支援 SSR 的原因。</p>\n<p>而 <code class=\"language-text\">StyleSheet</code> 的 <code class=\"language-text\">toString</code> <a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Sheet.js#L122\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">函式</a>，能夠 serialize <code class=\"language-text\">makeTag</code> 產生的 tag 的內容：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L10-L39\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">outputSheet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> css <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> group <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> group <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> group<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getIdForGroup</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rules <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> rules<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> selector <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SC_ATTR</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.g</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      names<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          content <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// NOTE: It's easier to collect rules and have the marker</span>\n    <span class=\"token comment\">// after the actual rules to simplify the rehydration</span>\n    css <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>selector<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{content:\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLITTER</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> css<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再搭配 <code class=\"language-text\">ServerStyleSheet</code> 提供的 <code class=\"language-text\">getStyleTags</code> 方法，能夠 output 出正確的 style tag 來 inject 到你 SSR 產生的 HTML 內，讓 styled-components 可以順利 Rehydrate。</p>\n<p>而何謂 “正確” 的 style tag 呢？</p>\n<p>在我們最一開始的實作中，我們自己是透過下面這般方式產生出要 inject 到 HTML 中的 style tag：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// styled-components 預設產生的 tag 會是空的，因為採用 CSSOM API insertRule</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>sheet <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CSSStyleSheet</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\t\n  elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>sheet<span class=\"token punctuation\">.</span>cssRules <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rule</span> <span class=\"token operator\">=></span> rule<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">)</span>\t\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也就是說我們是取出 styled-components 預設產出的 style tag，把其中的 cssRules 讀出來後塞回去。</p>\n<p>這樣的做法錯在會保留 style tag 上的其他屬性，像是 <code class=\"language-text\">data-styled=active</code>。</p>\n<p>當 styled-components 在進行 Rehydrate 時，他會去抓取 <code class=\"language-text\">data-styled</code> 不為 <code class=\"language-text\">active</code> 的 style tag 來 parse，並進行 rehydrate：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rehydrateSheet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SELECTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SC_ATTR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant\">SC_ATTR_ACTIVE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">rehydrateSheetFromTag</span><span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這也說明了為什麼一開始我使用 <code class=\"language-text\">disableCSSOMInjection</code> 讓 styled-components 幫我產生 text node-based 的 css style tag 也沒有用，因為那樣產生的 style tag ㄧ樣會是帶有 <code class=\"language-text\">data-style=active</code> 的屬性，並不會被 styled-components 拿去 rehydrate。</p>\n<p>這時我們更加釐清了問題。</p>\n<p>首先，有兩個 styled-components 的 style tag 的確不對，但<strong>重點是這兩個 style tag 同時都擁有 <code class=\"language-text\">data-styled</code> 為 <code class=\"language-text\">true</code> 的屬性，以致於 styled-components 在 rehydrate 的時候抓不到可用的 style tag。</strong></p>\n<p>另外，也不是單純 <code class=\"language-text\">data-styled</code> 不為 <code class=\"language-text\">true</code> 的 style tag 就可以被 rehydrate，前面提到 <code class=\"language-text\">StyleSheet</code> 的 <code class=\"language-text\">toString</code> 能夠 serialize <code class=\"language-text\">VirtualTag</code> 的內容，其中有一段程式碼與註解：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// NOTE: It's easier to collect rules and have the marker</span>\n<span class=\"token comment\">// after the actual rules to simplify the rehydration</span>\ncss <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>selector<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{content:\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLITTER</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊指示出，要能夠被 rehydrate 的 text node-based 的 css style tag，需要有特定的 <code class=\"language-text\">SPLITTER</code>：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SPLITTER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/*!sc*/\\n'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L55\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rehydrateSheetFromTag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLITTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rules<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h2 id=\"重新梳理一下問題與解法\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E5%95%8F%E9%A1%8C%E8%88%87%E8%A7%A3%E6%B3%95\" aria-label=\"重新梳理一下問題與解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重新梳理一下問題與解法</h2>\n<h3 id=\"問題\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C\" aria-label=\"問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題</h3>\n<p>我們頁面 prerender 完的結果，在 client 端 first load 與 JS bundle rehydrate 後的樣式不同，原因是利用 client side render 製作 prerender 時，產生兩個同樣擁有 <code class=\"language-text\">data-styled=true</code> 屬性的 styled-components style tag，造成 styled-components 無法 rehydrate，只好重新產生新的 style tag，因而破壞了頁面樣式。</p>\n<h3 id=\"解法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95\" aria-label=\"解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法</h3>\n<p>使用 <code class=\"language-text\">ServerStyleSheet</code> 搭配 <code class=\"language-text\">StyleSheetManager</code> 在 prerender 階段生成 <code class=\"language-text\">VirtualTag</code>（這邊的使用方法稍微 hack 了一點，因為我們的 prerender 是 client-side render，而官方不建議將 <code class=\"language-text\">ServerStyleSheet</code> 使用在 client side），接著再透過 <code class=\"language-text\">ServerStyleSheet</code> 的 <code class=\"language-text\">getStyleTags</code> 取得可被 styled-components 存取進行 rehydration 的 style tag，並 inject 到 prerendered HTML 中。</p>\n<p>主要的程式碼片段如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 放在整個 Application 的最上層</span>\n<span class=\"token keyword\">const</span> StyleSheetProvider<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StyleSheetManager sheet<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 prerender 結束，產生 HTML 後執行</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">injectStyleElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  style<span class=\"token punctuation\">.</span>outerHTML <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到這邊為止就算是將問題解決了，但會發現還是有問題，雖然 style tag 成功只剩下一個，看起來 rehydrate 也有成功，但樣式還是跑掉了。</p>\n<p>還好這個原因很好找，官網就有<a href=\"https://styled-components.com/docs/advanced#tooling-setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解答</a> ：</p>\n<blockquote>\n<p>In order to reliably perform server side rendering and have the client side bundle pick up without issues, you'll need to use our babel plugin. It prevents checksum mismatches by adding a deterministic ID to each styled component.</p>\n</blockquote>\n<p>就是 SSR 最常見的 checksum issue，我們需要給每一個 styled-component 一個在前後端一致的 ID，這樣才可以確保 rehydrate 後能夠擁有相同的 class。</p>\n<p>加上 <a href=\"https://styled-components.com/docs/tooling#babel-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin</a> 後問題就成功解決了！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>經過這次的除錯過程，我才發現自己對於 styled-component 這類 React 生態系的套件了解度不夠深，才導致在一開始設計實作 prerender 時沒有注意到這件事情，另外也透過這次的紀錄發現要將一個 bug 的原因與解法從頭到尾書寫出來有多困難，畢竟整個除錯過程你可能是跳耀性的在思考各種可能，文章中的每個步驟其實也絕對不是這樣一步步找出解法的，要有條理的將其梳理出一個流暢的 flow 真的需要一點功力，看來我還有很大的進步空間！</p>\n<p>雖然這次的問題實際上的解法不需要更動多少程式碼，原理也很簡單，但若是沒有像我同事那樣鑽入程式碼去查看，光是憑靠自己的邏輯是很難思考出來的。整個過程學習到很多，遇到這個 bug 真是太好了！（好像怪怪的...）</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://styled-components.com/docs/advanced\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-component website</a></li>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-component source code</a></li>\n</ol>","id":"342141e0-0a2e-53ff-8ba8-a915956520a3","fields":{"slug":"styld-component-prerendering-issue"},"frontmatter":{"date":"2020-08-15T13:37:30.000Z","title":"另一個與 styled-components 相關的 debug 紀錄","tags":["web","styled-components","server-side generated page","react"],"type":"tech","slug":"styld-component-prerendering-issue"},"timeToRead":13},{"excerpt":"好歌分享：海豚刑警『安平之光』","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/ZrpZB8-VBD0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">海豚刑警『安平之光』</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ZrpZB8-VBD0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>上個月在 <a href=\"https://dev.to/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dev.to</a> 上看到 <a href=\"https://dev.to/devteam/announcing-the-grant-for-the-web-hackathon-on-dev-3kd1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Announcing the Grant For The Web Hackathon on DEV</a> 這個 Hackathon 比賽，雖然看到的時候比賽已經結束了，但還是仔細看了他的內容，發現提到了一個我沒聽過的名詞 - Web Monetization，看到 monetization💰 就勾起我的興趣了...所以稍微查詢了些資料，做點筆記順便分享給大家。</p>\n<h2 id=\"什麼是-web-monetization又為什麼需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-web-monetization%E5%8F%88%E7%82%BA%E4%BB%80%E9%BA%BC%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 web monetization又為什麼需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Web Monetization，又為什麼需要它</h2>\n<p><a href=\"https://webmonetization.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Monetization（WM）</a> 是目前正在討論希望能列為 W3C 標準的一個 Web API，旨在透過標準且開放的 API 與 protocol (<a href=\"https://interledger.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interledger</a>) 來進行內容創作者與使用者間的小額付費。</p>\n<p>透過這新的 Web API ，提供網路用戶一個除了訂閱、廣告等以外的獲利方式，並同時兼顧資料隱私與使用者體驗。在後面的章節會再詳細點介紹其架構與 API 格式。</p>\n<p>會看到這篇文章的讀者，想必也常常在 Medium 等內容平台閱讀資訊，對於目前市面上文字內容創作者所能營利的管道不會太陌生，像是 Pay wall、訂閱、廣告置入、贊助、LikeCoin 等等。</p>\n<p>這些機制都提供了創作者一個取得回報的來源，但同時也帶來相對應的問題。</p>\n<p>首先是閱讀體驗，Pay wall 與廣告置入，都是保障創作者基本回報的機制，但每當點進一篇文章卻發現自己被擋在牆外，或是被迫將注意力分散到鋪天蓋地的廣告，都讓使用者的體驗大幅下降，更別提廣告背後隱含的隱私安全疑慮。</p>\n<p>再者，無論是付費加入 pay wall、訂閱、直接 Patreon、buymeacoffee 贊助或是 LikeCoin，都是需要使用者與創作者雙方在不同的平台上註冊帳號，重複帳號設定的流程一方面浪費金錢時間（加上學習服務操作的時間成本），另一方面也是在出賣你自身的資料，將其散播到各個平台上方。更別提最常發生的狀況應該是，使用者一看到需要另外註冊新帳號且付費，乾脆放棄閱讀該篇文章，畢竟很少會有人想只為了閱讀某篇文章就付出這些代價。</p>\n<p>透過 Web Monetization API 的標準化，理論上來說，創作者與使用者可以各自選擇喜歡的服務平台，而服務間透過統一的 protocol 溝通，雙方都不再需要到處創建帳號。</p>\n<p>而且有了標準的 JavaScript API，創作者可以自行掌控希望的 monetization 模式，像是常見的 Exlusive content、廣告移除等等，更進一步的話甚至能做到<a href=\"https://webmonetization.org/docs/probabilistic-rev-sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章分潤</a> 或是依照閱讀時間長短來決定費用多寡等功能。官網有一些挺酷的<a href=\"https://webmonetization.org/docs/exclusive-content\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">應用範例</a>。</p>\n<h2 id=\"web-monetization-的架構\" style=\"position:relative;\"><a href=\"#web-monetization-%E7%9A%84%E6%9E%B6%E6%A7%8B\" aria-label=\"web monetization 的架構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Monetization 的架構</h2>\n<p>Web Monetization 的架構與運作流程，可以從其官網的 <a href=\"https://webmonetization.org/docs/explainer#sequence-diagram\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequence diagram</a> 來理解，但可以先看我畫的簡化版流程來初略了解一下：</p>\n<p><img src=\"/image/wm-simple-flow.png\" alt=\"wm-simple-flow\"></p>\n<p>簡單三個步驟：1. 使用者加入 <code class=\"language-text\">WM Sender</code> 的會員並儲值；2. 內容創造者設定他的數位錢包到 <code class=\"language-text\">WM Receiver</code> 上，並在網站上啟用 Web Monetization；3. 當使用者到了創作者的網站時，sender 就會將錢傳送給 receiver，創作者就能獲得金錢。</p>\n<p>再來回到官網的 <a href=\"https://webmonetization.org/docs/explainer#sequence-diagram\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequence diagram</a> ：</p>\n<p><img src=\"/image/webmonetization-flow.svg\" alt=\"webmonetization-flow\"></p>\n<p>Web Monetization 的完整流程如下（號碼對應圖中的序列號碼）：</p>\n<ol>\n<li>要啟動整個 Web Monetization 流程的第一步是你的網站需要先有設定一個特殊的 <code class=\"language-text\">meta</code> tag，該 tag 包含了一個叫做 <a href=\"https://webmonetization.org/docs/explainer#payment-pointers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">payment pointer</a> 資訊，會指向網站設定的 Wallet。瀏覽器在解析 HTML tag 時發現這資訊時，就可以知道接下來要往哪裡送出 payment。</li>\n<li>\n<p>瀏覽器會用內部實作的 Web Monetization agent 來計算要付給網站多少費用。</p>\n<ul>\n<li>之所以要計算，是因為 Web Monetization 提供 Micropayment，能夠付非常小量的金額，不必總是整數，所以即便使用者的錢包內沒有足夠金額，網站也能夠調整提供對應的內容，比如說發現使用者只剩十塊，但看一篇文章要五十塊，那網站方可以選擇收取十塊費用讓使用者看一半的內容等等。</li>\n</ul>\n</li>\n<li>接著瀏覽器會產生一組唯一的 session ID 作為此次 payment 的 session 紀錄。</li>\n<li>從第一步得到的 payment pointer url 可以用來取得實際的付款位址與 secret。</li>\n<li>[Optional] 可以另外設置一個 receipt verifier service 在網站與 WM Receiver 中間，用來產生收據等資訊。</li>\n<li>\n<p>當上述過程完成後，只要使用者還 focus 在同個網站上，瀏覽器就可以開始將計算好的付款金額從使用者的 WM Sender 送給 WM Receiver。</p>\n<ul>\n<li>這邊特別強調 focus 在網站上，是因為根據目前的 Spec，還沒有規範到要如何針對在 Background tabs 的網站進行付費，例如在背景播放的音樂服務等等，但在 <a href=\"https://github.com/WICG/webmonetization/issues/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Incubator CG (WICG)</a> 中是有開個 Issue 在討論的。</li>\n</ul>\n</li>\n<li>WM Sender 收到瀏覽器的付款需求後，開始向 WM Receiver streaming payment。</li>\n<li>[Optional] 若是有使用 receipt verifier service，WM Receiver 可以在這步產生收據並傳回給 WM Sender。</li>\n<li>WM Sender 通知瀏覽器付款成功。</li>\n<li>收到通知後，瀏覽器可以透過 API dispatch event 告知網站付款成功</li>\n<li>接著網站就能根據付款狀態提供不同的內容或服務給使用者，需要的話，也能透過 receipt verifier service 來驗證該筆交易[Optional]。</li>\n</ol>\n<p>無論是我的簡化流程，或是官網上的完整流程，重點都在兩個主要角色上：<code class=\"language-text\">WM Receiver</code> 與 <code class=\"language-text\">WM Sender</code>。</p>\n<p>內容創作者需要設定 <code class=\"language-text\">WM Receiver</code>，而使用者則需要有 <code class=\"language-text\">WM Sender</code>。</p>\n<h3 id=\"web-monetization-sender\" style=\"position:relative;\"><a href=\"#web-monetization-sender\" aria-label=\"web monetization sender permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Monetization Sender</h3>\n<p>當你是 Web Monetization 的使用者方時，需要有 WM Sender，你需要註冊 WM Sender 的會員，並繳交費用，作為你付款給內容創作者的資金。</p>\n<p>而目前唯一的 WM sender 是一間叫 <a href=\"https://coil.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coil</a> 的公司，同時也是提出整個 Web Monetizaiton 標準化的人。</p>\n<p>加入並成為 Web Monetization 的使用者就幾個步驟：</p>\n<ol>\n<li>註冊一個 coil 帳號 - <a href=\"https://coil.com/signup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://coil.com/signup</a></li>\n<li>設定你的信用卡資訊以每月最低五美元的金額訂閱 Coil 服務（WM Sender）</li>\n<li>最後你需要下載一個瀏覽器 Extension，以啟用 Web Monetization，因為目前此 API 還在 W3C 標準的討論階段，需要透過 Extension 才能在目前主流瀏覽器上使用。<a href=\"https://chrome.google.com/webstore/detail/coil/locbifcbeldmnphbgkdigjmkbfkhbnca?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chrome</a>, <a href=\"https://addons.mozilla.org/en-US/firefox/addon/coil/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox</a>, <a href=\"https://microsoftedge.microsoft.com/addons/detail/ljionajlbinlfkdnpkloejeoogfgkojm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Edge</a></li>\n</ol>\n<p>當你裝好 Extension 後，到任一網站，該 Extension 可以讓你知道該網站是否支援 Web Monetization：</p>\n<p><img src=\"/image/wm-extension-example.png\" alt=\"extension-example\"></p>\n<h3 id=\"web-monetization-receiver\" style=\"position:relative;\"><a href=\"#web-monetization-receiver\" aria-label=\"web monetization receiver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Monetization Receiver</h3>\n<p>Coil 身為此標準的提案人兼唯一一個實作 Web Monetization Sender 的公司，作為 Web Monetization Receiver 的提供商也是合情合理。</p>\n<p>但至少你的 Payment pointer，也就是你的錢包可以有不同選擇，你可以選擇任何有支援 <a href=\"https://interledger.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interledger</a> protocol 的數位錢包，目前有：</p>\n<ol>\n<li>GateHub XRP - Defaults to XRP but can be exchanged for any currency supported by GateHub</li>\n<li>Stronghold - USD (Local regulations prevent Stronghold from supporting certain countries and regions.</li>\n<li>Uphold - USD, EUR, GBP, CAD, PLN, XRP, BTC, ETH, +59 more</li>\n</ol>\n<p>在 Coil 的網站上可以找到<a href=\"https://help.coil.com/accounts/digital-wallets-payment-pointers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">各家平台的設定方式</a>。</p>\n<p>取得的 Payment pointer 其實就是一個類似 url 格式的網址：</p>\n<ul>\n<li>GateHub - <code class=\"language-text\">$ilp.gatehub.net/123456789</code></li>\n<li>Stronghold - <code class=\"language-text\">$pay.stronghold.co/1b567ec83c151f44fb693fabc3d02ac09bb</code></li>\n<li>Uphold - <code class=\"language-text\">$ilp.uphold.com/ABC3DefGHi67jk</code></li>\n</ul>\n<p>有了 Payment pointer，也設定到 Coil 讓它知道要把會員的錢轉到你的哪個錢包後，就只需要將下面這個 <code class=\"language-text\">meta</code> tag 設定到你的網站內即可開始啟動整個流程：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 當然 content 要換成你自己的 payment pointer --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>monetization<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$ilp.uphold.com/ABC3DefGHi67jk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"稍微來看個程式碼\" style=\"position:relative;\"><a href=\"#%E7%A8%8D%E5%BE%AE%E4%BE%86%E7%9C%8B%E5%80%8B%E7%A8%8B%E5%BC%8F%E7%A2%BC\" aria-label=\"稍微來看個程式碼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>稍微來看個程式碼</h2>\n<p>畢竟這是一個還未成為標準的 API，相信到通過提案並正式實作在瀏覽器上時，API 或多或少會有所改變，因此就不探究太多 API 細節，附上一個簡單的範例讓大家有點感覺就好：</p>\n<p>在你的網站中可以放入以下的程式片段：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- content 要換成你自己的 payment pointer --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>monetization<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$ilp.uphold.com/ABC3DefGHi67jk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">.hidden</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>monetization<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span>monetization<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'monetizationstart'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusive'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n    Show me the money!\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exclusive<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Here's some exclusive content for people who pay me!\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>當瀏覽器偵測到你的頁面含有 <code class=\"language-text\">&lt;meta name=\"monetization\" content=\"...\"></code> 時，<code class=\"language-text\">WM Sender</code> 可以啟動 Web monetization 進行付款，付款成功後 <code class=\"language-text\">WM Receiver</code> 可以 dispatch 一個 <code class=\"language-text\">monetizationstart</code> event，你的網站監聽到後，就可以把獨家內容顯示給使用者：</p>\n<p><img src=\"/image/wm-sample-demo.gif\" alt=\"wm-sample-demo\"></p>\n<p>想看完整一點的範例可以到這個網站玩玩，<a href=\"https://testwebmonetization.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://testwebmonetization.com/</a>，裡面附有程式碼，包含了另一個 event <code class=\"language-text\">monetizationprogress</code>（用來記錄付款進度）的用法：</p>\n<p><img src=\"/image/wm-sample-demo2.gif\" alt=\"wm-sample-demo2\"></p>\n<p>Wait...</p>\n<p>從這兩個範例來看，我發個 Event 你就可以當作我付款了，根本是漏洞吧？</p>\n<p>單從範例來看的確是這樣，但別忘了在<a href=\"Web%20Monetization%20%E7%9A%84%E6%9E%B6%E6%A7%8B\">完整的 Web monetization 流程</a> 中有提到，接收到 event 的網站可以再去向 <code class=\"language-text\">WM Receiver</code> 確認收據與付款狀況，做進一步的驗證，這個 <a href=\"https://github.com/sharafian/web-monetization-access#asking-for-proof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> 提供了範例告訴你可以利用 JWT 與 Interledger protocol 來處理。</p>\n<h2 id=\"背後成員\" style=\"position:relative;\"><a href=\"#%E8%83%8C%E5%BE%8C%E6%88%90%E5%93%A1\" aria-label=\"背後成員 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背後成員</h2>\n<p>雖然整個 Web monetization 的流程中都沒有提到區塊鏈的技術，但你還是得申請一個數位錢包，收取包含虛擬貨幣在內的金錢。對於區塊鏈不太熟悉的我對於這件事有點好奇，稍微查了一下後才發現，Coil 的創始成員幾乎都是前幾年聲名遠播的瑞波幣（Ripple）的成員，像是 Coil 的 Founder 和現任 CEO 即是曾任 Ripple CTO 的 <a href=\"https://www.linkedin.com/in/justmoon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stefan Thomas</a>，也難怪目前支援的 <code class=\"language-text\">WM Receiver</code> 中有 <code class=\"language-text\">GateHub</code>。這邊有場他與 W3C 成員的<a href=\"https://www.w3.org/blog/2019/09/w3c-interview-coil-on-interledger-protocol-and-web-monetization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">訪談紀錄</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然目前乍看之下，Web Monetization 從提案到相關 ecosystem 的發展，都是由 Coil 一間公司所負責與掌控，但其他基金會如 Mozilla 與 Creative commons 都有參與，他們甚至一起合作開設了一個 <a href=\"https://www.grantfortheweb.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GRANT FOR\nTHE WEB</a> 的百萬計畫，目的就在推廣更健康的網路，用公開的標準規格，讓人們拿回對於自己內容營利的掌控權，不用再依賴於各種惱人廣告、付費牆與個人隱私資料的侵犯。</p>\n<p>相信這個計畫慢慢推進下去的話，會有更多服務出現作為 <code class=\"language-text\">WM Sender</code>，就不會有 Coil 壟斷的疑慮了。</p>\n<p>希望透過這篇文章的介紹能稍微引起大家的興趣，關注這個個人覺得蠻有發展淺力的計畫！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://webmonetization.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webmonetization.org</a></li>\n<li><a href=\"https://dev.to/hacksultan/web-monetization-like-i-m-5-1418\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Monetization like I'm 5</a></li>\n<li><a href=\"https://testwebmonetization.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">testwebmonetization</a></li>\n<li><a href=\"https://github.com/sharafian/web-monetization-access#asking-for-proof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web-monetization-access</a></li>\n<li><a href=\"https://forum.grantfortheweb.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grant for the Web</a></li>\n<li><a href=\"https://coil.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coil</a></li>\n</ol>","id":"0d410155-3ec5-5718-bed4-a1c9a5e132f3","fields":{"slug":"wtf-is-web-monetization"},"frontmatter":{"date":"2020-07-18T13:50:00.000Z","title":"Web Monetization 簡介","tags":["web","monetization","standard"],"type":"tech","slug":"wtf-is-web-monetization"},"timeToRead":10},{"excerpt":"好歌分享：San Cisco - 'On The Line'","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/jlubk5RYCAc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - 'On The Line'</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/jlubk5RYCAc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>生成藝術一直是我很想學習的主題，雖然知道大部分的人會使用 <a href=\"https://processing.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">processing</a>, <a href=\"http://paperjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper.js</a>, 或是 <a href=\"https://zimjs.com/art.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zimjs</a> 來製作 Generative art, 但在對於自己的藝術天份很有自知之明的情況下，一直都沒有去嘗試製作，再加上這些工具的學習也是有ㄧ定門檻。</p>\n<p>然而，最近在 Youtube 上看到 <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 的<a href=\"https://codepen.io/yuanchuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作者 - 袁川</a>於 <a href=\"https://www.youtube.com/watch?v=mEpocRIc3q8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSSConf CN 2019 的演講</a>，才了解到要\"開始\"似乎沒有這麼難，只要掌握一些基本觀念與技巧即可，而且他開發的 web component <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 無論是語法或是使用都算易懂好上手。</p>\n<p>今天藉由這篇文章分享該演講中我很喜歡的一些重點，並試著介紹與運用 CSS/JS 和 css-doodle 製作一些簡單的生成藝術作品。</p>\n<p>先給大家看第一個小 demo，這是參照袁川在演講中提及的一個範例實作，利用純 CSS 與 JS 所製作的簡單生成藝術:</p>\n<iframe height=\"423\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample I\" src=\"https://codepen.io/arvin0731/embed/zYvbKQJ?height=423&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/zYvbKQJ'>CSS  Generative Art - sample I</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2 id=\"簡單的事重複做就不簡單\" style=\"position:relative;\"><a href=\"#%E7%B0%A1%E5%96%AE%E7%9A%84%E4%BA%8B%E9%87%8D%E8%A4%87%E5%81%9A%E5%B0%B1%E4%B8%8D%E7%B0%A1%E5%96%AE\" aria-label=\"簡單的事重複做就不簡單 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>簡單的事重複做就不簡單</h2>\n<p>在生成藝術中，<code class=\"language-text\">Loop</code> 佔了很主要的角色，需要透過迴圈的方式去自動產生圖案。而圖案其實不需要複雜，在第一個範例中的元素就只有<strong>直線</strong>。</p>\n<p>簡單的直線，透過 <code class=\"language-text\">transform: rotate()</code>，就能夠有不一樣的變化，而透過組合，將多個擁有不同狀態的直線串接在一起，再加上時間因子作為變數去改變狀態，就可以是一個簡單的生成藝術。</p>\n<p>程式碼也很簡短：</p>\n<p>先設定一個 5x5 的表格：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">div.grid\n  div\n  div\n  // 略 ... 共 25 個 div</code></pre></div>\n<p>現在利用 CSS grid 可以很輕易控制表格的呈現，接著我們可以將之後預期要來拿隨機變化的屬性以 css variable 的方式設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--theme</span><span class=\"token punctuation\">:</span> #FF9800<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--deg</span><span class=\"token punctuation\">:</span> 45deg<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--gride-size</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grid</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--gride-size<span class=\"token punctuation\">)</span> * 5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 18px 1px <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span> inset<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--gride-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grid div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s ease-in<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JS 的部分就只需要在固定的 time interval 中間賦以隨機產生的數值到 CSS variable 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRandomBoolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">16777215</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">6</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">f</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> sign <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">randomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.grid > div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  theme <span class=\"token operator\">=</span> <span class=\"token function\">randomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  divs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getRandomBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skew(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sign<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">45deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--theme'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>theme<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以這樣的基本想法出發，就可以修改成不同的變化，像是加入 <code class=\"language-text\">clip-path</code> 來進一步操作畫面中的圖案元素：</p>\n<iframe height=\"362\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample II\" src=\"https://codepen.io/arvin0731/embed/OJyqOXZ?height=362&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/OJyqOXZ'>CSS  Generative Art - sample II</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>帶入一點數學，可以產生更多不同的 polygon：</p>\n<iframe height=\"476\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample III\" src=\"https://codepen.io/arvin0731/embed/VwvRdXe?height=476&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/VwvRdXe'>CSS  Generative Art - sample III</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>上面這範例中我是隨便用三角函數設定一個公式來跑，但在演講中，袁川有提及 <strong>lissajous curves</strong> 這個古老的數學公式，他發現非常適合用在 <code class=\"language-text\">clip-path</code> 上頭，搭配 <code class=\"language-text\">poylgon</code> 的 <code class=\"language-text\">fill-rule</code> 屬性，可以做出以下的效果，像是許多特殊的海洋生物一般：</p>\n<p><img src=\"/image/lissajous-curve-clip-path.png\" alt=\"lissajous-curve-clip-path\">\n(出處：<a href=\"https://youtu.be/mEpocRIc3q8?t=737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://youtu.be/mEpocRIc3q8?t=737</a>)</p>\n<h2 id=\"發揮更多想像力\" style=\"position:relative;\"><a href=\"#%E7%99%BC%E6%8F%AE%E6%9B%B4%E5%A4%9A%E6%83%B3%E5%83%8F%E5%8A%9B\" aria-label=\"發揮更多想像力 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>發揮更多想像力</h2>\n<p>妥善使用 <strong>迴圈</strong>、<strong>pattern</strong>、<strong>隨機性</strong>這三個要素，就可以有許多的創意組合，除了上面的線條和 <code class=\"language-text\">clip-path</code> 外，CSS 繪圖常用到的 <code class=\"language-text\">border-style</code>, <code class=\"language-text\">border-image</code>, <code class=\"language-text\">gradient</code>, <code class=\"language-text\">box-shadow</code> 等等都能拿來嘗試。</p>\n<p>附上幾個袁川在 codepen 上的作品：</p>\n<ul>\n<li>border-image: <a href=\"https://codepen.io/yuanchuan/pen/aQjKwO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/aQjKwO</a></li>\n<li>background-image + linear-gradient: <a href=\"https://codepen.io/yuanchuan/pen/NLXZLm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/NLXZLm</a></li>\n<li>radial-gradient: <a href=\"https://codepen.io/yuanchuan/pen/LXPJOW\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/LXPJOW</a></li>\n</ul>\n<p><img src=\"/image/yuanchuan-works.png\" alt=\"yuanchuan-works\"></p>\n<p>這只是其作品的冰山一角，有興趣的讀者可以到他的 <a href=\"https://codepen.io/yuanchuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen</a> 上欣賞各種絢麗的畫作。</p>\n<p>像是這個用 z-index 堆疊出的城市天際線圖，不得不佩服他的創造力：</p>\n<iframe height=\"306\" style=\"width: 100%;\" scrolling=\"no\" title=\"z-index -- City \" src=\"https://codepen.io/yuanchuan/embed/MMYmqv?height=306&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/yuanchuan/pen/MMYmqv'>z-index -- City </a> by yuanchuan\n  (<a href='https://codepen.io/yuanchuan'>@yuanchuan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>另外，在袁川的演講中，讓我特別印象深刻的是他利用 <code class=\"language-text\">text-shadow</code> 的效果，將一個括號，運用在生成藝術中，你沒看錯，就是 <code class=\"language-text\">(</code> 這個括號。</p>\n<p>我找不到袁川<a href=\"https://youtu.be/mEpocRIc3q8?t=1751\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">影片</a>中的範例，但自己依照他的介紹用純 css/js 實作了一個版本：</p>\n<iframe height=\"389\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Generative Art - sample IV\" src=\"https://codepen.io/arvin0731/embed/abvMXmX?height=389&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/abvMXmX'>CSS Generative Art - sample IV</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>除了 <code class=\"language-text\">text-shadow</code>，上面範例中也用上了 <code class=\"language-text\">filter</code>, <code class=\"language-text\">rotation</code>, <code class=\"language-text\">font-size</code> 等等的隨機屬性變化，來生成這幅圖案。</p>\n<h2 id=\"css-doodle\" style=\"position:relative;\"><a href=\"#css-doodle\" aria-label=\"css doodle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-Doodle</h2>\n<p>上面的範例都是用 pure css/js 完成的，但袁川其實製作了一個 web component，把許多製作 generative art 需要的一些功能幫你包好成多個函式，像是想要產生 grid，不用再到 html 內複製一大堆 div，也不用自己用 JS createElement，只要透過 css-doodle，一句話就能做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:doodle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@grid</span><span class=\"token punctuation\">:</span> 1x10 / 85%<span class=\"token punctuation\">;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>css-doodle 是基於 Shadow DOM v1 和 Custom Elements v1 實作的 web component，基本上目前主流瀏覽器都能支援。</p>\n<p>像上面的例子，透過設定 css-doodle web component 的 shadow-dom 屬性，可以讓他幫你產生 grid layout 的 divs。而在 component 內除了能撰寫一般的 CSS 外，也能利用他提供的 utility function 快速達到一些 random、pick one 等等的效果。</p>\n<p>我很喜歡作者在官網上很霸氣地一句話：The limit is the limit of CSS itself.</p>\n<p>從他的作品集來看，所言不假。</p>\n<p>\bcss-doodle 的官網就是一個詳細的<a href=\"https://css-doodle.com/#usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用手冊</a>，每個 function 與屬性的旁邊都有對應的實際範例幫助你理解。提供的函式說多不多，說少也不少，一個一個看完也不一定能馬上記住，還是得要在實作時邊對照查詢。</p>\n<p>所以說做中學還是最快的，今天文章最後就來解析一個袁川利用 css-doodle 製作的作品，一方面能臨摹大神的創意，另一方面也能比較深刻的了解這些函式的用法。</p>\n<h2 id=\"css-doodle-作品解析\" style=\"position:relative;\"><a href=\"#css-doodle-%E4%BD%9C%E5%93%81%E8%A7%A3%E6%9E%90\" aria-label=\"css doodle 作品解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css-doodle 作品解析</h2>\n<p>挑一個我很喜歡的作品，非常的漂亮！</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Chasing\" src=\"https://codepen.io/yuanchuan/embed/pBrMNQ?height=265&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/yuanchuan/pen/pBrMNQ'>Chasing</a> by yuanchuan\n  (<a href='https://codepen.io/yuanchuan'>@yuanchuan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>這個作品分成兩個 component，一個是背後不斷滑落的線條，另一個是類似不斷旋轉的 DNA 螺旋。</p>\n<p>我們單就 DNA 螺旋來看，程式碼非常簡短：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:doodle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@grid</span><span class=\"token punctuation\">:</span> 45x1 / 40vmin<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50%<span class=\"token punctuation\">,</span> 33vmin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:after, :before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span>\n  <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token atrule\"><span class=\"token rule\">@p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transparent 0\n  <span class=\"token punctuation\">)</span> \n  <span class=\"token atrule\"><span class=\"token rule\">@pn</span><span class=\"token punctuation\">(</span>30% 50%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 50% 60%<span class=\"token punctuation\">)</span> / \n  <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>.1vmin<span class=\"token punctuation\">,</span> 5vmin<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@lr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  no-repeat<span class=\"token punctuation\">;</span></span></span></span></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> centerr<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> r 4s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-4s / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token property\">--translate</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-66vmin / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> r</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>-1turn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>要使用 css-doodle 的話，上面這段 css 是要放在 <code class=\"language-text\">&lt;css-doodle></code> component 內的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>css-doodle</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Your css --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>css-doodle</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"doodle\" style=\"position:relative;\"><a href=\"#doodle\" aria-label=\"doodle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:doodle</h4>\n<p><code class=\"language-text\">:doodle</code> 是針對 <code class=\"language-text\">&lt;css-doodle></code> 這個元素本身的 selector，範例中設定了 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">z-index</code>，比較特別的是 <code class=\"language-text\">@grid</code> 的使用。</p>\n<h4 id=\"grid\" style=\"position:relative;\"><a href=\"#grid\" aria-label=\"grid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@grid</h4>\n<p><code class=\"language-text\">@grid</code> 是用來定義 css-doodle 的 grid layout，你也可以直接設定在 <code class=\"language-text\">&lt;css-doodle grid=\"5\"></code> 上，但是 <code class=\"language-text\">@grid</code> 的屬性設定會有比較高的優先權。</p>\n<p><code class=\"language-text\">@grid: 45x1 / 40vmin;</code> 代表的是 doodle size 為 <strong>41vmin</strong>，且其中有 <strong>45 x 1</strong> 的 grid。(<code class=\"language-text\">vmin</code> 代表的是當前 <code class=\"language-text\">vh</code> 與 <code class=\"language-text\">vw</code> 中最小的值)</p>\n<p>當你設定了 <code class=\"language-text\">grid</code> 後，<code class=\"language-text\">css-doodle</code> 的 <code class=\"language-text\">shadow-dom</code> 會長出類似如下的結構：</p>\n<p><img src=\"/image/css-doodle-shadowdom.png\" alt=\"css-doodle-shadowdom\"></p>\n<p>會產生一個 <code class=\"language-text\">&lt;div class=\"container\"></code>，並且在裡面產生對應你所設定的 <code class=\"language-text\">grid</code> 數量的 <code class=\"language-text\">&lt;div cell></code>。</p>\n<p>其中有個重點是，在 <code class=\"language-text\">&lt;css-doodle></code> 元件內設定的 CSS 會套用到每一個 <code class=\"language-text\">&lt;div cell></code>，以 <code class=\"language-text\">[cell]:nth-of-type(1)</code> 這樣的 css selector 把生成的 css style 個別應用到 DOM 上。</p>\n<h4 id=\"container\" style=\"position:relative;\"><a href=\"#container\" aria-label=\"container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:container</h4>\n<p><code class=\"language-text\">:container</code> 代表的是 <code class=\"language-text\">:doodle</code> 內 grid layout 的 container，也就是上面說到的 <code class=\"language-text\">&lt;div class=\"container\"></code>。範例中設置 <code class=\"language-text\">transform: translate(50%, 33vmin)</code> 也就只是把其偏移到畫面中間的位置。</p>\n<hr>\n<p>接下來的 <code class=\"language-text\">:after, :before</code> 是整個圖形的重點：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:after, :before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span>\n  <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token atrule\"><span class=\"token rule\">@p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transparent 0\n  <span class=\"token punctuation\">)</span> \n  <span class=\"token atrule\"><span class=\"token rule\">@pn</span><span class=\"token punctuation\">(</span>30% 50%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 50% 60%<span class=\"token punctuation\">)</span> / \n  <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>.1vmin<span class=\"token punctuation\">,</span> 5vmin<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@lr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  no-repeat<span class=\"token punctuation\">;</span></span></span></span></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"place-cell\" style=\"position:relative;\"><a href=\"#place-cell\" aria-label=\"place cell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@place-cell</h4>\n<p><code class=\"language-text\">@place-cell</code> 是用來指定 cell 相對於整個 grid layout 中的位置，在此 component 的 <code class=\"language-text\">:after, :before</code> 都設定 <code class=\"language-text\">@place-cell: center</code>，就代表 grid 中 cell 的 <code class=\"language-text\">:after</code> 與 <code class=\"language-text\">:before</code> 都置於相對於整個 grid 的中心位置。</p>\n<h4 id=\"size\" style=\"position:relative;\"><a href=\"#size\" aria-label=\"size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@size</h4>\n<p>很單純就是同時設定 <code class=\"language-text\">wdith</code> 與 <code class=\"language-text\">height</code> 的值。</p>\n<h4 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h4>\n<p>作者利用 grid 內每個 <code class=\"language-text\">&lt;div cell></code> 的 <code class=\"language-text\">:after</code> 與 <code class=\"language-text\">:before</code>，使用 <code class=\"language-text\">background</code> 與 <code class=\"language-text\">radial-gradient</code> 屬性來製造我們看到的圓點。</p>\n<p>主要使用到 <code class=\"language-text\">background-image</code>、<code class=\"language-text\">background-position-x|y</code>、<code class=\"language-text\">background-size</code>、<code class=\"language-text\">background-repeat</code> 四個屬性。</p>\n<p>如果單純取其中一個 cell 來觀察的話，會長這樣：</p>\n<p><img src=\"/image/css-doodle-cell-div-single-dot.gif\" alt=\"css-doodle-cell-div-single-dot\"></p>\n<p>若再加上 <code class=\"language-text\">css-doodle</code> 提供的一些 random (@r), pick(@p) 等 utility function，就可以造成每一個 cell div 都各自擁有兩個不同顏色、大小、位置的圓點。</p>\n<p>接下來針對 <code class=\"language-text\">background</code> 屬性所使用到的 utility function 作介紹。</p>\n<h4 id=\"p-pickv1-v2\" style=\"position:relative;\"><a href=\"#p-pickv1-v2\" aria-label=\"p pickv1 v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@p, @pick(v1, v2,...)</h4>\n<p><code class=\"language-text\">@p</code> 為 <code class=\"language-text\">@pick</code> 的 alias。它會從給定的 list 中隨機挑選數值出來：</p>\n<p><code class=\"language-text\">@p(#FFFDE1, #FB3569)</code> 就會從這兩個顏色中隨機挑選一個。</p>\n<h4 id=\"r-randstart-end\" style=\"position:relative;\"><a href=\"#r-randstart-end\" aria-label=\"r randstart end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@r, @rand(start [,end])</h4>\n<p><code class=\"language-text\">@r</code> 為 <code class=\"language-text\">@rand</code> 的 alias。接受至少一個參數，作為區間的頭與尾，它會從給定的區間中隨機挑選兩個數值。</p>\n<p>因此範例中，<code class=\"language-text\">background-image</code> 的 <code class=\"language-text\">radial-gradient</code> 屬性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span> @<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> @<span class=\"token function\">r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transparent 0 <span class=\"token punctuation\">)</span> </code></pre></div>\n<p>第一層的設定等同於隨機選取兩個顏色（紅、白），並從 0 ~ 70% 之間選取一個百分比數值作為大小。</p>\n<h4 id=\"pn-pick-nv1-v2\" style=\"position:relative;\"><a href=\"#pn-pick-nv1-v2\" aria-label=\"pn pick nv1 v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@pn, @pick-n(v1, v2,...)</h4>\n<p><code class=\"language-text\">@pn</code> 為 <code class=\"language-text\">@pick-n</code> 的 alias。會從給定的 list 中，一個一個取出，對應到 <code class=\"language-text\">grid</code> 中的 <code class=\"language-text\">cell</code>。</p>\n<p>以範例來說，就會依序設置 <code class=\"language-text\">cell</code> 的 <code class=\"language-text\">background-position</code> 值為 30% 50%，70% 50% 和 50% 60%。（依照我觀察，似乎不會保證依照列表的順序，但還是會一個一個對應設置到 <code class=\"language-text\">cell</code> 上）</p>\n<h4 id=\"lr-last-rand\" style=\"position:relative;\"><a href=\"#lr-last-rand\" aria-label=\"lr last rand permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@lr, @last-rand</h4>\n<p>至於 <code class=\"language-text\">background-size</code>，範例使用 <code class=\"language-text\">@r(.1vmin, 5vmin) @lr()</code>，其中 <code class=\"language-text\">@r(.1vmin, 5vmin)</code> 就是從 .1vim 到 5vmin 中取一個值，而 <code class=\"language-text\">@lr</code> 則代表取得最後一個 random 函式所取得的數值，也就是 <code class=\"language-text\">@r(.1vmin, 5vmin)</code> 的結果。最終的 <code class=\"language-text\">background-size</code> 就會是兩個相同的隨機值。</p>\n<p>到目前為止，設定出來的圖形會長這樣：</p>\n<p><img src=\"/image/css-doodle-no-animation.png\" alt=\"css-doodle-no-animation\"></p>\n<p>所有的點會集中在一起，因為我們的 grid 是 <code class=\"language-text\">45x1</code>，也就是只有一個 column。</p>\n<p>範例中，作者用 <code class=\"language-text\">translateY</code> 的方式來將每個點隨機向 Y 軸移動，並加上 <code class=\"language-text\">@keyframe</code> 與 <code class=\"language-text\">rotate</code> 的效果，就完成了螺旋的生成圖案：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> r 4s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-4s / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token property\">--translate</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-66vmin / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> r</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>-1turn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"i-index\" style=\"position:relative;\"><a href=\"#i-index\" aria-label=\"i index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@i, @index</h4>\n<p>唯一用到的 utility function 是 <code class=\"language-text\">@i</code>，代表當前套用到該 css 的 <code class=\"language-text\">cell</code> 的 index。</p>\n<p>螺旋的部分到此為止，而另一個滑落效果的 doodle 運用的技巧也差不多，但是效果卻完全不同，有興趣的讀者可以研究 codepen 上的原始碼。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>生成藝術除了要有創意外，擁有好的實作工具也很重要，\b<code class=\"language-text\">css-doodle</code> 算是給了想嘗試生成藝術的人一個好的開頭，像是文章一開始所製作的簡單生成藝術，也都能夠透過 <code class=\"language-text\">css-doodle</code> 來實作，程式碼會簡短很多。</p>\n<p>而透過 processing 等工具能做出更多效果，甚至能搭配音樂來做出不同變化，今天只是透過 <code class=\"language-text\">css-doodle</code> 的啟發，練習了一些簡單的生成藝術，體驗了一下，非常有趣，推薦大家一起來試試！</p>\n<p>袁川的影片後半段還有很多使用絢麗技巧的生成藝術，非常推薦大家花個四十分鐘把影片看完，相信會有不少收穫，就算不想自己嘗試，欣賞他所創作的作品也是一種享受。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=mEpocRIc3q8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS生成藝術@袁川_CSSConf CN 2019</a></li>\n<li><a href=\"https://css-doodle.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a></li>\n<li><a href=\"https://processing.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">processing</a></li>\n<li><a href=\"http://paperjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper.js</a></li>\n<li><a href=\"https://zimjs.com/art.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zimjs</a></li>\n</ol>","id":"18096a95-291e-51a8-ab74-8bb45209d2c1","fields":{"slug":"css-generative-art-css-doodle"},"frontmatter":{"date":"2020-05-23T13:37:30.000Z","title":"CSS 生成藝術初探與 css-doodle 簡介","tags":["web","css","css-doodle","generative art"],"type":"tech","slug":"css-generative-art-css-doodle"},"timeToRead":13},{"excerpt":"好歌分享：Rescue","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/0WtcPL8Zac4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rescue</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/0WtcPL8Zac4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>出社會後，平常一天 24 小時，可能有 14 小時都會待在電腦前的我，對於手機功能的需求真的不多，也就不像學生時代會很關注 iOS 上有什麼新的功能。而就在上個月的某天，我ㄧ如往常地在 GitHub 上閒晃時，發現一款叫做 <a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shortcuts-js</code></a> 的套件，原以為是另一套處理網頁快捷鍵的框架，但看了其敘述寫的是『A JavaScript iOS 12 Shortcuts creator』，我才去查了一下 shortcuts 是什麼...</p>\n<p>原來 iOS 12 推出了一個叫 shortcuts 的功能，能讓你透過一連串 <strong>Action</strong> 的組合，自動化你的 workflow。而該套件的作者很 hardcode 的<a href=\"https://medium.com/shortcutsjs/creating-ios-12-shortcuts-with-javascript-and-shortcuts-js-942420ca9904\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">逆向工程解析</a> shortcuts 上的程式，撰寫出一套 JavaScript 的工具，讓你能用熟悉的 JavaScript 來撰寫 iOS shortcuts。</p>\n<p>覺得蠻有意思的，所以也花了幾個小時的時間玩了一下，透過這篇文章記錄一下過程與心得。</p>\n<p>照慣例先給大家看個簡單的成品，我其實做了兩個 shortcuts，一個是利用 Google 的 <a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a> 製作的事實查核捷徑，讓你在網頁上快速查驗資訊，但 API 回傳的資料效果不是很好，所以做了另一個 <code class=\"language-text\">vConsole shortcuts</code>，讓你能夠在一般網頁（沒有特別在 header 的 CSP 設定 <code class=\"language-text\">script-src</code> 的網頁）內插入 <code class=\"language-text\">vConsole</code> 套件的 shortcuts，讓你能在手機上直接打開 console！</p>\n<p>想實際玩玩的可以從 iphone 上下載此 <a href=\"https://www.icloud.com/shortcuts/efffb762336744a5857d5defe6ff0ba7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iCloud link</a></p>\n<p>下載前記得要到 \"設定\" -> \"捷徑\" -> \"允許不受信任的捷徑\" 將該選項開啟。</p>\n<p>下載完後到該 shortcut 的詳細資訊頁內將 <strong>在共享工作表中顯示</strong> 選項打開，這樣才能在 safari 的網頁分享 panel 找到 shortcut 來執行。</p>\n<p><img src=\"/image/ios-shortcuts-js-demo.gif\" alt=\"project-demo\" title=\"project-demo\"></p>\n<h2 id=\"ios-shortcuts\" style=\"position:relative;\"><a href=\"#ios-shortcuts\" aria-label=\"ios shortcuts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iOS Shortcuts</h2>\n<p>在 Shortcuts 出現之前，有個叫做 Workflow 的應用程式可以讓你透過客製化的腳本，自訂自動化流程，而在 Apple 將其買下後，隨著 iOS 12 一起推出，並且開放免費下載。</p>\n<p>Shortcuts 的操作有點像是 Scratch，可以將一個一個的 action block 任意組合，也能夠串接別人做好的 shortcuts，對於不會撰寫程式的人來說，操作上算親民，應該也會覺得蠻有趣的，給大家看一下操作過程（gif 可能有點大）：</p>\n<p><img src=\"/image/shortcuts-ops-demo.gif\" alt=\"shortcuts-ops-demo\" title=\"shortcuts-ops-demo\"></p>\n<p>可以加入各種內建指令，拖拉組合你想要的順序。</p>\n<p>action 的 output 可以當作下一個 action 的 input，也可以與 App 互動，例如可以串接 Evernote：</p>\n<p><img src=\"/image/interaact-with-app.jpeg\" alt=\"interact-with-app\" title=\"interact-with-app\"></p>\n<p>除了上面範例這種簡單的指令堆疊，也支援 <code class=\"language-text\">if-else</code> 結構：</p>\n<p><img src=\"/image/if-else.jpeg\" alt=\"if-else\" title=\"if-else\"></p>\n<p>但是呢，我很難相信會有工程師忍受得了在手機上面一個一個 action 拖拉組合，然後輸入內容，實在太麻煩啦。</p>\n<p>還是直接寫程式比較舒服，而對於習慣 JavaScript 的我來說，<a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shortcuts-js</code></a> 就是一個很棒的選擇！</p>\n<h2 id=\"shortcuts-js\" style=\"position:relative;\"><a href=\"#shortcuts-js\" aria-label=\"shortcuts js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shortcuts JS</h2>\n<p><img src=\"/image/shortcuts-js-official.png\" alt=\"shortcuts-js-official\"></p>\n<p>Shortcuts JS 基本上就是將 Apple 內建的 Action 都製作出對應的 JS 版本，你可以編排與呼叫那些 JS function，shortcuts-js 會幫你轉譯成 iOS 能運行的 <code class=\"language-text\">shortcut</code> 檔案。</p>\n<p>在 Shortcuts JS 的網站上就有一個 playground 讓你實際玩玩看，並且能馬上下載成 <code class=\"language-text\">shortcut</code> 檔，只是從 iOS 13 開始，不能夠直接將 <code class=\"language-text\">.shortcut</code> 檔案 AirDrop 到手機內，需要透過 icloud link 才行。</p>\n<p>另外，從他們網站上與 github issue 上也能知道目前並不是所有 Apple 內建的 actions 都支援，所以實際上許多 idea 要實作還是不容易。</p>\n<h3 id=\"官方上簡單的範例\" style=\"position:relative;\"><a href=\"#%E5%AE%98%E6%96%B9%E4%B8%8A%E7%B0%A1%E5%96%AE%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"官方上簡單的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>官方上簡單的範例</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//////// Import necessary actions and function ////////</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actionOutput<span class=\"token punctuation\">,</span> buildShortcut <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@joshfarrant/shortcuts-js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  comment<span class=\"token punctuation\">,</span>\n  wait<span class=\"token punctuation\">,</span>\n  runJavaScriptOnWebPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@joshfarrant/shortcuts-js/actions\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////</span>\n\n<span class=\"token comment\">//////// Create and arrange actions ////////</span>\n<span class=\"token comment\">// We'll use this later to reference the output of a calculation</span>\n<span class=\"token keyword\">let</span> calcVar <span class=\"token operator\">=</span> <span class=\"token function\">actionOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Define a list of actions</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    operand<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> calcVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">showResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the Magic Variable</span>\n    text<span class=\"token operator\">:</span> withVariables<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>calcVar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/////////////////////////////////////////////</span>\n\n<span class=\"token comment\">//////// Generate the Shortcut data ////////</span>\n<span class=\"token keyword\">const</span> shortcut <span class=\"token operator\">=</span> <span class=\"token function\">buildShortcut</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write the Shortcut to a file in the current directory</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example.shortcut'</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something went wrong :('</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shortcut created!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//////////////////////////////////////////////</span></code></pre></div>\n<p>用 shortcuts js 製作一個基本的 shortcuts 非常簡單，只需要三個步驟：</p>\n<ol>\n<li>載入你想要使用的 actions。</li>\n<li>創建一個 <code class=\"language-text\">actions</code> 陣列，將你想要執行的 actions 照順序放進去，基本上每個 action 都會有 output，而每一個 output 都會自動傳給陣列中的下一個 action。可以從<a href=\"https://docs.shortcuts.fun/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>查閱目前 support 的 actions 其輸入輸出為何。不過他們文件沒有很齊全就是了...</li>\n</ol>\n<p><img src=\"/image/shortcut-js-docs.png\" alt=\"shortcut-js-docs\" title=\"shortcut-js-docs\"></p>\n<ol start=\"3\">\n<li>最後一個步驟就是透過 shortcuts js 的 <code class=\"language-text\">buildShortcut()</code> 函式來將你編排的 actions 轉化成合法的 iOS shortcuts format，並寫入檔案。</li>\n</ol>\n<p>接著你就能將這個檔案放入 icloud 上，並產生 icloud shortcuts link 來載入到你的手機裡使用了。</p>\n<p>產生 icloud shortcuts link 的方式其實我不是很確定有沒有什麼正確的方式，但我在最後會分享我所使用的方法。</p>\n<p>這邊我們先來解釋一下官方範例的 actions 做了什麼事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    operand<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> calcVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">showResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the Magic Variable</span>\n    text<span class=\"token operator\">:</span> withVariables<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>calcVar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>shortcuts js 是用 TypeScript 撰寫的，所以你載入的每個 action 你都能清楚地看到其所需要的參數與類型。</p>\n<p><code class=\"language-text\">comment</code> action 如其名，就是在 shortcuts 中下個註解，實際上沒有作用，你也只能在 shortcuts 的 action flow 中看得到它：</p>\n<p><img src=\"/image/comment-sample.png\" alt=\"comment-sample\" title=\"comment-sample\"></p>\n<p><code class=\"language-text\">number</code> 則是讓你能設定一個數字，他會將你設定的數字當作 output 傳給下一個 action，在範例中即是 <code class=\"language-text\">calculate</code> action。</p>\n<p><code class=\"language-text\">calculate</code> 除了接收上一個 action 傳入的 input 外，你需要指定與 input 操作的 <code class=\"language-text\">operand</code> 與 <code class=\"language-text\">operation</code>；最後的一個參數是一個叫做 Magic Variable 的變數，他可以用來儲存 action 所產生的結果，並在其他 action 中 reference 使用，例如範例中的 <code class=\"language-text\">showResult</code>。</p>\n<p><code class=\"language-text\">showResult</code> 就是將你傳入的 <code class=\"language-text\">text</code> 參數值輸出到手機畫面中。在這邊我們想要取得 <code class=\"language-text\">caculate</code> 所 output 的變數值，然而 <code class=\"language-text\">showResult</code> 需要的是字串，我們不能單純的傳入變數，必須要使用一個特殊的函數 <code class=\"language-text\">withVariables</code>，將變數值讀出並轉成 string 格式。</p>\n<p>這個 shortcuts 執行後就是會在你的手機上跳出一個 dialog 並顯示 14 這個數字。</p>\n<h3 id=\"了解官方範例後自己來動手做看看\" style=\"position:relative;\"><a href=\"#%E4%BA%86%E8%A7%A3%E5%AE%98%E6%96%B9%E7%AF%84%E4%BE%8B%E5%BE%8C%E8%87%AA%E5%B7%B1%E4%BE%86%E5%8B%95%E6%89%8B%E5%81%9A%E7%9C%8B%E7%9C%8B\" aria-label=\"了解官方範例後自己來動手做看看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>了解官方範例後，自己來動手做看看</h3>\n<p>如同前言提到的，我一開始想做的是事實查核的 shortcuts，也就是說讓使用者點選 shortcuts 後，可以輸入想查詢的事情，背後呼叫 Google 的 <a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a>，但是 shortcuts 雖然有提供 <code class=\"language-text\">Get URL content</code> 的 aciton，卻沒有方便的資料處理 action，必須使用 <code class=\"language-text\">dictionary</code> 之類的 action 來將回傳的 JSON format 資料轉存成辭典格式，操作上很繁瑣，可以參考 reddit 上高手的說明：<a href=\"https://www.reddit.com/r/shortcuts/comments/afbrlh/using_apis_part1_retrieving_data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">retrieving data</a>、<a href=\"https://www.reddit.com/r/shortcuts/comments/afpwo2/using_apis_part_2_parsing_complex_api_responses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parsing complex api responses</a>、<a href=\"https://www.reddit.com/r/shortcuts/comments/ae80co/quick_and_dirty_guide_to_scraping_data_from/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapign web data</a>。</p>\n<p>在花了不少時間嘗試用 shortcuts js 按照 reddits 上的做法實作後，還是不成功，正當想放棄時，我看到了一個 action 叫做 <code class=\"language-text\">runJavaScriptOnWebPage()</code>，可以讓你在網頁上插入 JavaScript 運行。</p>\n<p>看到這個心花怒放一下，覺得撿到寶，可以在網頁上運行的話更好，在想進行事實查核的網頁上啟用這個 shortcuts，然後一切流程都直接用 JavaScript 在 web page 上執行就好，就不需要透過 shortcuts action 來處理資料了！</p>\n<p>利用 <code class=\"language-text\">runJavaScriptOnWebPage()</code> 所兜出來的 shortcuts 主要程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">runJavaScriptOnWebPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      const element = document.querySelector('title');\n      const title = element.textContent;\n      const url = 'https://content-factchecktools.googleapis.com/v1alpha1/claims:search?key=GoogleAPIKey&amp;query=' + title;\n      const result;\n      fetch(url)\n        .then(function(result) {\n          return result.json();\n        })\n        .then(function(data) {\n          result = data;\n          completion(result);\n        });\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">quickLook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不是很確定其 JavaScript 執行的環境為何，我並沒有去研究，但測試後是無法使用 await 的，使用單純的 promise 則可以。</p>\n<p>運行結果如下：</p>\n<p><img src=\"/image/fact-check-demo.gif\" alt=\"fact-check-demo\" title=\"fact-check-demo\"></p>\n<p>看起來只要把 response 在美化一下就好，但是我發現 Google API 回傳的結果沒有很好，會回傳很多不相干的，就也不想繼續優化了。</p>\n<p>不過既然知道可以在網頁上運行 JavaScript，那就可以做更多事情了！</p>\n<p>像是我後來找到的這位<a href=\"https://github.com/realdennis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">高手</a>，就利用這樣的方式來 <a href=\"https://github.com/realdennis/shortcuts-mono/tree/master/packages/shortcuts/sc-background-player\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bypass Youtube video 在手機網頁上無法背景播放的問題</a>，是我目前覺得最實用的 shortcuts XD</p>\n<p>而前言中的範例，我也是利用相同方式，將 <code class=\"language-text\">vConsole</code> inject 到頁面中，程式碼非常簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// injectScript.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'head'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// hacky way to wait for script load</span>\n    <span class=\"token keyword\">const</span> script2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script2<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">'window.vConsole = new VConsole();'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>本來是想直接利用 <code class=\"language-text\">script.onload</code> 在 <code class=\"language-text\">vConsole</code> 的 script 載入後進行 initial，但是不知道為何無法順利觸發，因此只好用 setTimeot 的方式快速 hack 一下。（這種實作會造成有時得啟用兩次 shortcut 才能成功載入 vConsole ...）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> injectScript <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./injectScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token function\">runJavaScriptOnWebPage</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        const injectScript = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>injectScript<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n        const result = injectScript();\n        completion(result);</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...略</span></code></pre></div>\n<p>完整程式碼我放在 <a href=\"https://github.com/ArvinH/shortcuts-vconsole\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>。</p>\n<h3 id=\"產生-icloud-link\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F-icloud-link\" aria-label=\"產生 icloud link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生 iCloud link</h3>\n<p>前面說過從 iOS 13 開始，不能夠再隨意用 AirDrop 丟入 <code class=\"language-text\">.shortcut</code> 的檔案，必須要透過 iCloud link。</p>\n<p>但我其實找不太到該如何將我產生的 <code class=\"language-text\">.shortcut</code> 檔案轉成 iCloud link，後來在 <a href=\"https://github.com/joshfarrant/shortcuts-js/issues/217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub issue</a> 上找到有人分享他從 <a href=\"https://www.reddit.com/r/shortcuts/comments/d738kr/ios13_importing_shortcuts_as_files_is_not/f2ngi2e/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reddit</a> 找到的 shortcuts - <a href=\"https://www.icloud.com/shortcuts/f9acfff2a5e94138a6574498d22c2813\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Import Shortcut</a>。</p>\n<p>只要將你做好的 <code class=\"language-text\">.shortcut</code> 檔案放入 iCloud Drive，透過這個 <strong>Import Shortcut</strong> 就能從你的 iCloud Drive 中將檔案抓下來並產生一個 iCloud link，接著理論上 iPhone 就會自動 detect 到，你也就能直接安裝。</p>\n<p>P.S. 再提醒一下，記得要到 \"設定\" -> \"捷徑\" -> \"允許不受信任的捷徑\" 將該選項開啟，才能 import 你自己製作的 shortcuts。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>shortcuts 這個概念蠻有意思的，一些小動作其實自己一步一步做也是可以，但透過 shortcuts 將常用的動作組織起來，一鍵就能完成，每個步驟省個三、四秒，整體可能就能省掉你十秒，如果這 shortcuts 很常用的話，勢必能增加效率，至少心理層面的感覺有 XD</p>\n<p>整體來說，shortcuts js 還有很多地方可以改進，目前我覺得還缺少一些蠻重要的 Action，一些輸入的參數目前也不是太好用，debug 也不方便（必須要裝載上去才能測試），希望透過這次介紹能引起多點人的興趣，或許能更加推進這個專案。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shortcuts-js website</a></li>\n<li><a href=\"https://github.com/joshfarrant/shortcuts-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shortcuts-js github</a> </li>\n<li><a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/afbrlh/using_apis_part1_retrieving_data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">retrieving data</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/afpwo2/using_apis_part_2_parsing_complex_api_responses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parsing complex api responses</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/ae80co/quick_and_dirty_guide_to_scraping_data_from/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapign web data</a>。</li>\n</ol>","id":"62b18c68-0164-51a0-99a7-ebd11ef41684","fields":{"slug":"ios-shortcuts-js"},"frontmatter":{"date":"2020-04-25T13:37:30.000Z","title":"用 JS 玩轉 iOS shortcuts","tags":["web","iOS","JavaScript","experiment"],"type":"tech","slug":"ios-shortcuts-js"},"timeToRead":11},{"excerpt":"好歌分享：Monkey Majik + 吉田兄弟 - Change","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/WK1wwgMpFDg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Monkey Majik + 吉田兄弟 - Change</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/WK1wwgMpFDg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>好一陣子之前在網路上看到 <a href=\"https://stenciljs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stencil JS</a>，原以為是跟 CSS 相關的框架，沒想到是 <a href=\"https://ionicframework.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ionic 團隊</a> 製作的 Web Component 工具，在 GitHub 上有七千多顆星星，看來是深受喜愛，但當時我對於 Web Component 存有一些疑慮，所以沒有多加研究，例如，雖然主打用 Browser 原生支援的 Custom Elements 來渲染共用元件，能共用在任何前端框架上，但其實也意味著，使用這共用元件的團隊，對於這個元件的掌控力也降低了，若是想要修改元件的行為，不可避免的也得去學習如何修改 Web Component，反而徒增成本。\n不過從另一個角度想，今天若有專門的團隊利用 Web Component 來建構與維護一整套 Design System 的話，可能就會是不錯的選擇。</p>\n<p>總之，最近偶然間聽到高手學弟再度提及 Stencil 的名字，加上我在修改個人網站的時候，正好想在文章頁加入類似 Medium 的拍手元件，覺得可以利用這機會來試試看，用 Stencil 來製作一個能在 React 或其他前端框架上能運行的 Web Component，用這篇文章記錄下過程。</p>\n<p>先看看成品：</p>\n<iframe height=\"410\" style=\"width: 100%;\" scrolling=\"no\" title=\"claps-button web component\" src=\"https://codepen.io/arvin0731/embed/preview/ExjGBNq?height=410&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/ExjGBNq'>claps-button web component</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>點擊拍手 emoji 時，除了記錄點擊次數外，還會有光點由外至內被吸引到手上，最後讓拍手 emoji 的顏色由灰階轉黃再發紅光，營造出一種元氣彈吸收能量的感覺。</p>\n<p>懶得看文章的可以到 GitHub 上看原始碼：<a href=\"https://github.com/ArvinH/claps-button\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/claps-button</a></p>\n<h2 id=\"stencil-簡介\" style=\"position:relative;\"><a href=\"#stencil-%E7%B0%A1%E4%BB%8B\" aria-label=\"stencil 簡介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stencil 簡介</h2>\n<blockquote>\n<p>Stencil is a compiler that generates Web Components (more specifically, Custom Elements). Stencil combines the best concepts of the most popular frameworks into a simple build-time tool.</p>\n</blockquote>\n<p>在官網上清楚的寫到 Stencil 的定位是一個 Compiler，用了目前流行的 tech stack 來製作出完全符合標準的 Web Components。</p>\n<p>參考了 React 的 Virtual DOM、Fiber 的 Async rendering、reactive data-binding，並支援 TypeScript 和 JSX 語法。對於習慣用 React 開發的人來說，算是非常好上手的一套工具。</p>\n<p>官網上的文檔清晰明瞭，而且很好閱讀，一路從 Introduction 順著讀下去，就會默默把各種功能與 API 也都看過一遍，包含如何整合在不同的前端框架中的資訊。</p>\n<p>其中也花了一些篇幅在介紹為什麼他們要製作這套工具，以及他們的目的是什麼。對於他們的出發點與目標，我覺得蠻有意思的：</p>\n<blockquote>\n<p>Stencil aims to combine the best concepts of the most popular frontend frameworks into a compile-time tool rather than run-time tool.</p>\n</blockquote>\n<p>他們對於 Stencil 的定位是屬於 <code class=\"language-text\">compile-time tool</code>，應用各種工具最佳化開發體驗，最終編譯出符合 Web Standards 且能運行在多數瀏覽器的元件。</p>\n<p>為此，他們提供了 out-of-the-box 的按需加載，這點對於 Web Component 來說非常重要，也大大提高我的使用意願；API 部分他們是從 Web Component 標準的 lifecycle 上再做延伸，並沒有太多他們自己的客製化 API，學習曲線相對低，但還是能保有良好的開發體驗，像是在使用 Framework 開發一般。</p>\n<p>有興趣的讀者可以前往<a href=\"https://stenciljs.com/docs/goals-and-objectives\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a>閱讀，內容不算太多，很快能掃過一遍。</p>\n<h2 id=\"如何製作\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C\" aria-label=\"如何製作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何製作</h2>\n<h3 id=\"專案設定\" style=\"position:relative;\"><a href=\"#%E5%B0%88%E6%A1%88%E8%A8%AD%E5%AE%9A\" aria-label=\"專案設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>專案設定</h3>\n<p>接下來就說明如何使用 Stencil 來製作 Web Component。</p>\n<p>首先我們利用 Stencil 的 cli 開啟一個專案：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init stencil</code></pre></div>\n<p>你可以看到我們其實有三種選擇：<code class=\"language-text\">ionic-pwa</code>、<code class=\"language-text\">app</code>、<code class=\"language-text\">component</code></p>\n<p><img src=\"/image/stencil-cli.png\" alt=\"stencil-cli\" title=\"stencil-cli\"></p>\n<p>ionic-pwa 與 app 都是用來建構一個完整 Web application 的 starter kit，單純建構 Component 的話只需要選擇 component 這個 starter kit 即可。有興趣的讀者也可以裝 ionic-pwa 與 app 試試看，Stencil 提供了自己的 router \b與 redux lib，讓你能有與開發目前一般前端應用程式相似的體驗。</p>\n<p>選擇安裝好 <code class=\"language-text\">component starter kit</code> 後，可以看到下面的專案結構：</p>\n<p><img src=\"/image/stencil-starter-kit-structure.png\" alt=\"stencil-starter-kit-structure\" title=\"stencil starter kit structure\"></p>\n<p>重點只有一個，就是 <code class=\"language-text\">components</code> 資料夾，底下包含了 e2e 測試的檔案、css 檔與 component 主程式所在的 <code class=\"language-text\">my-component.tsx</code>。可以看到都是由 Typescript 為主要 stack，其中的 type file <code class=\"language-text\">components.d.ts</code> 在你 <code class=\"language-text\">build</code> 與 <code class=\"language-text\">run dev</code> 的過程中會自動幫你 codegen 出來。</p>\n<p>其中的 <code class=\"language-text\">index.html</code> 是 <code class=\"language-text\">run dev</code> 時的主要 html template，你可以在這邊測試你設計的 component 使用情境。</p>\n<p>接著來看一下 package.json 的內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-first-component\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stencil Component Starter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/index.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"es2015\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/esm/index.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"es2017\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/esm/index.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/types/index.d.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"collection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/collection/collection-manifest.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"collection:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/collection/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"unpkg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/my-first-component/my-first-component.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"dist/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"loader/\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil build --docs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil build --dev --watch --serve\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil test --spec --e2e\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test.watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil test --spec --e2e --watchAll\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"generate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil generate\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@stencil/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.8.8\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本的 npm script 都幫你準備好了，當你 <code class=\"language-text\">npm run build</code> 的時候，除了基本的 main - <code class=\"language-text\">dist/index.js</code> 外，module 模式的 <code class=\"language-text\">dist/index.mjs</code> 與 <code class=\"language-text\">es2015</code>、<code class=\"language-text\">es2017</code> 的編譯版本都有，甚至準備了給 <code class=\"language-text\">unpkg</code> 使用的 destination。</p>\n<p>唯一一點要注意的是，當你準備要 publish 你的 component 到 npm 上，讓人透過 <a href=\"https://unpkg.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unpkg</a> 使用時，記得一定要先 <code class=\"language-text\">npm run build</code>，產生 production build 才會有的編譯檔案，這樣才能夠正確地被人引入使用。</p>\n<p>另外，裡面唯一比較特殊的 config 檔案 - <code class=\"language-text\">stencil.config.ts</code> 則是用來設定各種 stencil plugin 的，例如在我的範例中，我使用了 SCSS，這時就可以在此 config 檔中設定 scss plugin：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Config <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// sass plugin</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/sass'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  namespace<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button'</span><span class=\"token punctuation\">,</span>\n  outputTargets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span>\n      esmLoaderPath<span class=\"token operator\">:</span> <span class=\"token string\">'../loader'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'docs-readme'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'www'</span><span class=\"token punctuation\">,</span>\n      serviceWorker<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// disable service workers</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// can setup plugins here</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"程式開發\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC\" aria-label=\"程式開發 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程式開發</h3>\n<p>利用 starter kit 把專案建立好，接著把名稱改成自己的 component 後，就能開始正式撰寫程式碼。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Prop<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Listen<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> Host <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button'</span><span class=\"token punctuation\">,</span>\n  styleUrl<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button.scss'</span><span class=\"token punctuation\">,</span>\n  shadow<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">State</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Listen</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> capture<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Host<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          color<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"claps-btn-container\"</span>\n          data<span class=\"token operator\">-</span>count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          👏\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Host<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"一步步解析\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E6%9E%90\" aria-label=\"一步步解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一步步解析</h3>\n<p><strong>@Component</strong> decorator 提供 Stencil compiler 關於你的元件的 Metadata。其中，<code class=\"language-text\">tag</code> 顧名思義就是你元件的 tag 名稱要叫做什麼；<code class=\"language-text\">styleUrl</code> 標示出你要引入的 css 檔案；<code class=\"language-text\">shadow</code> 代表你的元件是否要使用 shadow dom。</p>\n<p>使用 shadow dom 的差別在於你想不想要元件內的所有元素被封裝起來。不清楚何謂 shadow dom 的可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 的說明</a>。若是你有開啟 shadow dom，你的元件在 HTML Tree 中會長得像這樣：</p>\n<p><img src=\"/image/stencil-shadowdom.png\" alt=\"shadow-dom\" title=\"shadow dom\"></p>\n<p>下面實際 Component 實作的部分，則跟 React Component 類似，一樣有 <code class=\"language-text\">render</code> 函式回傳 <code class=\"language-text\">JSX</code>；ㄧ樣有 private/public method 可以宣告使用。</p>\n<p>你可以利用 <code class=\"language-text\">@State()</code> 與 <code class=\"language-text\">@Prop()</code> 兩個 decorator 來宣告元件的狀態(state) 與可接受的 Props。</p>\n<p><code class=\"language-text\">@Listen()</code> decorator 則是 Stencil 用來監聽外部 DOM Event 的，可以傳入不同的 option，像是上面範例中的 <code class=\"language-text\">{ capture: true }</code> 就是告知我們要在 Capture 階段 fire listener；也可以指定 <code class=\"language-text\">target</code>，告訴 Stencil 你要把這個 listener 綁定在誰身上，像是 scroll event，可以 target 在 window 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token string\">'window'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">handleScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the body was scrolled'</span><span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，還有個 <code class=\"language-text\">@Event()</code> decorator 可以用來 emit data 跟 event，並用 <code class=\"language-text\">@Listen()</code> decorator 捕獲。詳情可以<a href=\"https://stenciljs.com/docs/events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">參閱官網</a>。</p>\n<p>最後在 render 函式中有個特別的 Element 叫做 <code class=\"language-text\">Host</code>，在 Web component 的世界中，host environment 代表的是 <em>host</em> 你的 custom web component 的環境，通常就是一般的 DOM Tree，而這邊的 <code class=\"language-text\">Host</code> component 也雷同，代表的就是你的 Web component 本身，你傳入給 Host element 的屬性都會反映在 web component 的 tag 身上。從官網給的範例來看可能會更清楚：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tag<span class=\"token operator\">:</span> <span class=\"token string\">'todo-list'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> open <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Host\n        aria<span class=\"token operator\">-</span>hidden<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>open <span class=\"token operator\">?</span> <span class=\"token string\">'false'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          <span class=\"token string\">'todo-list'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'is-open'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>open\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根據傳入你的 custom tag 的屬性 <code class=\"language-text\">open</code> 的狀態，會改變其 <code class=\"language-text\">aria-hidden</code> 屬性的內容。</p>\n<p>如果 <code class=\"language-text\">this.open === true</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>todo<span class=\"token operator\">-</span>list <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"todo-list open\"</span> aria<span class=\"token operator\">-</span>hidden<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>todo<span class=\"token operator\">-</span>list<span class=\"token operator\">></span></code></pre></div>\n<p>此外，<code class=\"language-text\">Host</code> element 也可以單純用來取代 React 中的 <code class=\"language-text\">Fragement</code>。</p>\n<h3 id=\"其他細節與注意事項\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E7%B4%B0%E7%AF%80%E8%88%87%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"其他細節與注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他細節與注意事項</h3>\n<p>至此為止其實就已經可以產出一個 Web Component 了，接下來要做的就都只是加入元件所需的實作細節，下面程式碼我省略了一些產生動畫的細節，有興趣的可以<a href=\"https://github.com/ArvinH/claps-button\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">從 GitHub 上參考原始碼</a>，實作方式其實很簡單暴力，就是固定產生許多小光點，然後算好圓形座標的位置與位移，並利用 <code class=\"language-text\">animate API</code> 來加上 <code class=\"language-text\">keyframe</code>，在點擊拍手 emoji 的時候觸發動畫，並加上 <code class=\"language-text\">text-shadow</code> 與 <code class=\"language-text\">filter: grayscale</code> 的屬性來增加效果。</p>\n<p>這邊我著重說明一些關於 Stencil 實作 web component 上的一些細節：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button'</span><span class=\"token punctuation\">,</span>\n  styleUrl<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button.scss'</span><span class=\"token punctuation\">,</span>\n  shadow<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Element</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">State</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> size<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> preserve<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Listen</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> capture<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preserve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">claps-wc-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAnimation</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preserve<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">claps-wc-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">runAnimation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rootElm  <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.claps-btn-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ...略</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateChi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...略</span>\n      <span class=\"token comment\">// 產生圓形氣體顆粒效果</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> chiArray <span class=\"token operator\">=</span> <span class=\"token function\">generateChi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    chiArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>chi <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>chi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    rootElm<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Host<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          color<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n          borderColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n          width<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n          height<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"claps-btn-container\"</span>\n          data<span class=\"token operator\">-</span>count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span>\n          style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            width<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n            height<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n            fontSize<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n            textShadow<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1px 0px </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px red</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            filter<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">grayscale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>\n              <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">/</span> <span class=\"token number\">20</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          👏\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Host<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先是 <strong>lifecycle</strong>，Stencil 除了提供 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Component 標準的 lifecycle</a> - <code class=\"language-text\">connectedCallback()</code> 與 <code class=\"language-text\">disconnectedCallback()</code> 外，還提供了許多類似當初 React 的 component lifecycle，可以從官方的圖檔中一目瞭然：</p>\n<p><img src=\"/image/stencil-component-lifecycle.png\" alt=\"stencil-component-lifecycle\" title=\"stencil component lifecycle\"></p>\n<p>我們範例中用到的 <code class=\"language-text\">componentWillLoad</code> 會在 Component 進行第一次 render 前被呼叫，所以適合用來 initialized data，這邊的例子是從 localStorage 中取出資料。</p>\n<p>另一個執得注意的地方是取得 shadow dom 元素的方法。</p>\n<p>在 <code class=\"language-text\">runAnimation()</code> 函數中，我需要將動態產生的光點掛載到 web component 的 shadow dom 上，而要能存取 shadow dom，需要先利用 <code class=\"language-text\">@Element()</code> decorator 來宣告一個 Host element 的 reference，該 decorator 會回傳一個 <code class=\"language-text\">HTMLElement</code> 的 instance，你就能以此來存取 shadow dom：</p>\n<p><code class=\"language-text\">const rootElm  = this.el.shadowRoot.querySelector('.claps-btn-container');</code></p>\n<p>最後，還有一些這次範例中未用到的 API，像是 public method 的使用與類似 Observable 的 Watch decorator 等等，有興趣的讀者在前往官網查看即可，都寫得蠻清楚的。</p>\n<p><a href=\"https://stenciljs.com/docs/decorators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stencil API Docs</a></p>\n<h2 id=\"如何運用在不同-framework-上\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%81%8B%E7%94%A8%E5%9C%A8%E4%B8%8D%E5%90%8C-framework-%E4%B8%8A\" aria-label=\"如何運用在不同 framework 上 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何運用在不同 framework 上</h2>\n<p>使用在不同框架的方法，我試了兩種，首先是 React；</p>\n<iframe\n  src=\"https://codesandbox.io/embed/webcomponent-test-react-w7lyv?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"webcomponent-test-react\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n<p>最簡單的方式就是在 template index.html 中放入：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://unpkg.com/claps-button@1.0.7/dist/claps-button.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>然後就能在任意 component 中加入：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>claps-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3rem<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">preserve</span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>claps-button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>然而像 Vue 的話，就沒辦法直接這樣做，必須要以 <code class=\"language-text\">npm install ${your web component}</code> 的方式載入到你的 App 中，並在 <code class=\"language-text\">main.js</code> 中，從 stencil 提供的 loader 中去 <code class=\"language-text\">defineCustomElements</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  applyPolyfills<span class=\"token punctuation\">,</span>\n  defineCustomElements\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"claps-button/loader/index.cjs.js\"</span><span class=\"token punctuation\">;</span>\nVue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>productionTip <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Tell Vue to ignore all components defined in the claps-button</span>\n<span class=\"token comment\">// package. The regex assumes all components names are prefixed</span>\n<span class=\"token comment\">// 'claps'</span>\nVue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ignoredElements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">claps-\\w*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Bind the custom elements to the window object</span>\n<span class=\"token function\">applyPolyfills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">defineCustomElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"but\" style=\"position:relative;\"><a href=\"#but\" aria-label=\"but permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>But！</strong></h3>\n<p>這樣的做法目前似乎有許多問題，會一直出現 <code class=\"language-text\">TypeError: Cannot read property 'isProxied' of undefined</code> 的 Error，在網路上有許多討論，截至我完成這篇文章為止，尚未有結論。例如：<a href=\"https://github.com/ionic-team/stencil/issues/1661\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 上的 issue</a> 和 <a href=\"https://en.programqa.com/question/59887533/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Svelte 的例子</a></p>\n<p>所以我想目前可能還是以 script tag 的方式引入最為保險。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Web Component 的存在必要還是有很多爭議，我個人偏好將其運用在 Design System 中，由一個固定的 Team 去維護，如此以來才能發揮他目前的最大功用。</p>\n<p>用 Stencil 開發 Web Component 的體驗挺不錯的，如果你有手刻過 custom elements，你應該也會驚艷於他們將整個開發體驗包裹得很好，有時間的話值得玩玩！</p>\n<p>這次我在開發的拍手元件的同時，除了學習到 Stencil 的開發方式外，也意外練習到動畫製作的經驗，挺有趣的，大家也拿個自己想做的小 component 來試試看吧！也歡迎跟我分享心得互相指教！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://stenciljs.com/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StencilJS official site</a></li>\n<li><a href=\"https://codepen.io/realdennis/pen/RwNNqbj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">emoji claps inspired by this codepen</a></li>\n</ol>","id":"0d43301a-6acf-560a-a1b6-8a606988fb21","fields":{"slug":"stenciljs-webcomponent"},"frontmatter":{"date":"2020-03-28T13:37:30.000Z","title":"利用 Stencil 建構 Web Component","tags":["web","stencil","JavaScript","Web Component"],"type":"tech","slug":"stenciljs-webcomponent"},"timeToRead":12},{"excerpt":"『願你餘生所有的珍惜都不用靠失去來懂得。』","html":"<blockquote>\n<p>『願你餘生所有的珍惜都不用靠失去來懂得。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近因為武漢肺炎的關係，公司展開了不知得持續多久的 Work From Home 政策，雖然團隊裡有些人不太喜歡，覺得這樣溝通與開會效率比不上在辦公室面對面，但我個人是還蠻習慣的，並且，這節省下來的通勤時間，剛好讓我可以多看一些影片跟玩玩 side project。這次在補帶 React Conf 2019 的影片時，看到前 React team 的 EM, Sophie Alpert 介紹 <a href=\"https://www.youtube.com/watch?v=CGpMlWVcHok\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a Custom React Renderer</a>，加上 side project 用上了 <a href=\"https://github.com/vadimdemedes/ink\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ink</a> 這個能用 React 撰寫 command line 工具的套件，讓我決定透過實際操作來了解何謂 Custom React Renderer，以及該如何打造。除了 Sophie Alpert 的影片外，基本上是參考 <a href=\"https://github.com/nitin42/Making-a-custom-React-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nitin42 的這份教學</a>，以 <a href=\"https://github.com/Ziv-Barber/officegen\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">officegen</a> 作為 React Component 的 host environment，讓我們能用撰寫 React 的方式來製作 pptx 投影片！</p>\n<h1 id=\"react-reconciliation-與-renderer\" style=\"position:relative;\"><a href=\"#react-reconciliation-%E8%88%87-renderer\" aria-label=\"react reconciliation 與 renderer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Reconciliation 與 Renderer</h1>\n<p>React 的架構中有兩個主要的重心，<strong>reconciliation</strong> 與 <strong>rendering</strong>。<strong>reconciliation</strong> 是 React 用來找出狀態改變前後，其 UI 樹狀結構差異的演算法，並決定哪一部分的節點是需要被更動的，也就是市面上流傳所謂 <code class=\"language-text\">Virtual DOM</code> 的核心概念。但實際上所謂 <code class=\"language-text\">Virtual DOM</code> 這個名詞有點誤用，因為在 <strong>reconciliation</strong> 的演算法與定義中，完全不涉及 <strong>DOM</strong>，<strong>DOM</strong> 只是 React reconciliation 可以套用的其中一個 <strong>Host Environment</strong>，<strong>rendering</strong> 的過程會依據 <strong>reconiliation</strong> 的結果，搭配所在的 <strong>Host Environment</strong> 來渲染出相對應的畫面，這就是 <strong>Renderer</strong> 所負責的。例如 <code class=\"language-text\">React-Native</code> 就是 <strong>Host Environment</strong> 為 iOS、Android 平台的一種 Renderer，當然 <code class=\"language-text\">react-dom</code> 也是。</p>\n<p>這個架構老早就存在於 React 的核心中，當初 Fiber 架構就是在改善 <strong>reconciliation</strong> 的實作方式（當然也有影響 renderer 的實作），也有許多文章在探討與說明。</p>\n<p>只是較少為人知的是，Rect 其實有一個 <code class=\"language-text\">react-reconciler</code> 的套件可以使用，幫你處理好 reconciliation 的部分，提供一些介面讓你根據想要的 host environment 實作 rendering，而這就是為什麼有人能客製化各種 renderer，讓大家能用 React 撰寫 VR、Command Line 或是 等等（可參考此 <a href=\"https://github.com/chentsulin/awesome-react-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome list</a>）。</p>\n<p>關於 Fiber 架構的觀念介紹，推薦大家去看 <a href=\"https://twitter.com/acdlite?lang=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Clark</a> 的<a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，雖然是很久之前寫的，但我覺得觀念闡述的很清晰易懂。</p>\n<p>簡單來說，所謂的 fiber 是在 reconciliation 中的一個工作單位，一個 fiber 是一個 JavaScript object，包含著一個 Component 的資訊，其輸入與輸出，在接下來的實作中，我們會利用 <code class=\"language-text\">react-reconciler</code> 與 fiber 所提供的 Component 資訊來實作一個客製化 PPTXRenderer。</p>\n<h2 id=\"最終的結果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%9A%84%E7%B5%90%E6%9E%9C\" aria-label=\"最終的結果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終的結果</h2>\n<p>先看一下最終的成品功能，這樣在說明後面的實作時，應該會比較有感受。</p>\n<p>這次範例中所客製化的 PPTXRenderer 可以讓我們使用兩個 Component：<code class=\"language-text\">&lt;Slide></code> 與 <code class=\"language-text\">&lt;Text></code> 來產生投影片。</p>\n<p>例如在 <code class=\"language-text\">App.js</code> 中這樣寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text<span class=\"token punctuation\">,</span> Slide<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../src'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">2</span> 😍 😍<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/text.pptx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>會產生這樣的投影片：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/29dd4226b9c0462bb75ef278795ee337.gif\" alt=\"demo\"></p>\n<blockquote>\n<p>TL;DR\n篇幅有點長，很多程式碼，若不想看文章，可以直接參考程式碼 <a href=\"https://github.com/ArvinH/reapptx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reapptx</a></p>\n</blockquote>\n<h1 id=\"custom-renderer-基本結構\" style=\"position:relative;\"><a href=\"#custom-renderer-%E5%9F%BA%E6%9C%AC%E7%B5%90%E6%A7%8B\" aria-label=\"custom renderer 基本結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Renderer 基本結構</h1>\n<p><code class=\"language-text\">react-reconciler</code> 提供的函式可以接受一個 <strong>host config object</strong>，並回傳 renderer instance。其中 <strong>host config object</strong> 是我們用來定義與實作在 renderer 的 lifecycle 中所需要的 method，包含 <code class=\"language-text\">update</code>、<code class=\"language-text\">append children</code>、<code class=\"language-text\">remove children</code> 等等，這邊所處理的通通都是 <strong>host environment</strong> 底下的 components，其餘 non-host 的 components 都會由 React 負責管理。</p>\n<p>先看看 <code class=\"language-text\">react-reconciler</code> Readme 內提供的範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-reconciler\"</span>\n\n<span class=\"token keyword\">const</span> HostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You'll need to implement some methods here.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>HostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RendererPublicAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> MyRendererContainer <span class=\"token operator\">=</span> MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call MyRenderer.updateContainer() to schedule changes on the roots.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> RendererPublicAPI<span class=\"token punctuation\">;</span></code></pre></div>\n<p>還記得你一般開發 react app 時，都會呼叫 <code class=\"language-text\">ReactDOM.render</code> 來將你的 root component 掛載到一個 <code class=\"language-text\">div</code> 上頭嗎？上述程式碼中所 export 的 <code class=\"language-text\">RenderPublicAPI.render</code> 就等同於 <code class=\"language-text\">ReactDOM.render</code>。</p>\n<p>而在 <code class=\"language-text\">render</code> 函式中，由 <code class=\"language-text\">HostConfig</code> 與 <code class=\"language-text\">react-conciler</code> 所建構的 custom renderer 就可以將 React component 應用在不同的 host environment 中。</p>\n<p>至於如何實作 <code class=\"language-text\">HostConfig</code>，這邊有<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整的 method 列表</a>，你也可以參考 <a href=\"https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-dom</code></a> 或 <a href=\"https://github.com/facebook/react/blob/master/packages/react-native-renderer/src/ReactNativeHostConfig.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-native</code> 的 HostConfig</a>。</p>\n<p>不過從列表中洋洋灑灑一堆 interface，到底哪些是重要的呢？</p>\n<p>我們可以利用一個方式來測試，先把原本使用 <code class=\"language-text\">react-dom</code> 的 renderer 換成你自己的：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">import React from \"react\";\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>// import ReactDOM from \"react-dom\";\n<span class=\"token prefix inserted\">+</span>import MyRenderer from \"./MyRenderer\";\n</span>\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>ReactDOM.render(\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>MyRenderer.render(\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> &lt;React.StrictMode>\n<span class=\"token prefix unchanged\"> </span>   &lt;App />\n<span class=\"token prefix unchanged\"> </span> &lt;/React.StrictMode>,\n<span class=\"token prefix unchanged\"> </span> rootElement\n</span>);</code></pre></div>\n<p>而在 <code class=\"language-text\">MyRenderer.js</code> 中，將各個函式一個一個放上去，並加上 log，直到你的頁面沒有出現 error：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-reconciler\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> HostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appendInitialChild\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createTextInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ... 依此類推將各種 method 都放上去，並加上 log</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>HostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RendererPublicAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render function 中的內容則參考 react-conciler 的 readme</span>\n    <span class=\"token comment\">// 將 renderer 的 container 創建出來，並將傳入的 element update 上去。</span>\n    <span class=\"token keyword\">const</span> MyRendererContainer <span class=\"token operator\">=</span> MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> MyRendererContainer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RendererPublicAPI<span class=\"token punctuation\">;</span></code></pre></div>\n<p>這時你的頁面應該會是空白的，因為你所有 renderer 的 method 都尚未實作。但如此一來就能觀察出在你的 <code class=\"language-text\">&lt;App /></code> component 中，renderer 會調用哪些函數、執行順序為何、個別的參數是什麼。</p>\n<p>這邊給大家一個 codesandbox 的例子把玩：</p>\n<iframe\n  src=\"https://codesandbox.io/embed/youthful-shaw-cinj5?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"custom-react-renderer-check-func-order\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"實際的-host-config\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E7%9A%84-host-config\" aria-label=\"實際的 host config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際的 Host Config</h2>\n<p>初步了解 Renderer 的結構與需要填入的 Host Config 後，我們可以來實作需要的 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">'react-reconciler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentInstance<span class=\"token punctuation\">.</span>appendChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parentInstance<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext<span class=\"token punctuation\">,</span>\n    internalInstanceHandle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getRootHostContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getChildHostContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentHostContext<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> rootContainerInstance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">shouldSetTextContent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">text<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext<span class=\"token punctuation\">,</span>\n    internalInstanceHandle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">finalizeInitialChildren</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inst</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> inst<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">prepareForCommit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootcontainerInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">resetAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootcontainerInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">appendChildToContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">removeChildFromContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">now</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  supportsMutation<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> PPTXRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>hostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有許多 function 是必要但我們的範例中用不著的，所以留空，不過我還是一個一個說明他們各自的功能為何。</p>\n<ul>\n<li><code class=\"language-text\">appendInitialChild(parentInstance, child)</code></li>\n</ul>\n<p>當 renderer 在繪製 component 的時候，會透過此函式將該 component 的 child component append 上去，所以在這個函式中，你必須實作如何將你想要 render 的 component child 加到其 parent component 上頭。以我們的範例為例，是會在每個 component 都實作一個 <code class=\"language-text\">appendChild</code> 函式，在這邊我們就只需要執行 <code class=\"language-text\">parentInstance.appendChild(child);</code> 即可。</p>\n<ul>\n<li><code class=\"language-text\">createInstance(\ntype,\nprops,\nrootContainerInstance,\nhostContext,\ninternalInstanceHandle\n)</code></li>\n</ul>\n<p>看名字就知道是在創建 Component instance 的函式，會傳入當前節點的 type、該節點的 props、根節點的實例、host 環境的 context，以及一個叫做 internalInstanceHandle 的物件。</p>\n<p>其他參數都很好懂，這個 internalInstanceHandle 其實就是對應此節點的 fiber。我們前面有說過，fiber 代表的是整個 reconciler 過程中的一個工作單位，而每個 component 都有對應的兩種 fiber，分別是已經完成工作，可以render 的 flushed fiber 跟尚未處理完的 work in progress fiber，fiber 中包含許多 component 的資訊。基本上這個範例中，前面兩個參數就足夠了。想了解更多 fiber 的內容請參考 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-fiber-architecture</a>。</p>\n<p>在這個範例中，我們只需要透過傳入的 type 來決定我們要對應產生哪個 component 的實例，後面會在說明每個 component 的實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">getRootHostContext(instance)</code></li>\n</ul>\n<p>這個函式讓你能夠與 Host Config 中的其他 method 共享 context。基本上會傳入 root component instance 當參數。\n在這範例中，並沒有需要 share 任何 context，所以回傳個空物件即可。</p>\n<ul>\n<li><code class=\"language-text\">getChildHostContext(parentHostContext, type, rootContainerInstance)</code></li>\n</ul>\n<p>與上一個函式雷同，讓你能夠分享 context 給當下節點的 children，也能取得 parent 的 context。我們一樣不需要用到，所以回傳空物件。</p>\n<ul>\n<li><code class=\"language-text\">shouldSetTextContent(type, props)</code></li>\n</ul>\n<p>就我的理解，這個函數的目的可以簡單說是讓你有機會判斷是否要將 traversal 停止在當前節點。通常我們的 leaf node 都會是 text node，若在此函式內你回傳 true，則 reconciler 會停止繼續往下 traverse，他會停止在這層，然後接著呼叫 <code class=\"language-text\">createInstance</code> 去創建實例。</p>\n<p>若是設為 false，reconciler 澤會繼續遞迴下去，直到此函式回傳 true，或是真的達到了 leaf text node。若是達到 leaf text node，就會呼叫另個函式 - <code class=\"language-text\">createTextInstance</code>。</p>\n<p>以我們的範例來說，我們不像 <code class=\"language-text\">react-dom</code> 需要考慮 <code class=\"language-text\">textarea</code> 或是 <code class=\"language-text\">dangerouslySetInnerHTML</code> 等情況，都直接回傳 false 即可。</p>\n<ul>\n<li><code class=\"language-text\">createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle)</code></li>\n</ul>\n<p>顧名思義就是創建 Text instance，這個 Text 指的是你在 component 中直接撰寫的 string 部分，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span> Taiwan No<span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">Taiwan No.1</code> 就是這邊要處理的 Text instance。在 <code class=\"language-text\">react-dom</code> 中就是要創建一個 <code class=\"language-text\">textNode</code>，而在這邊我們直接回傳 Text 本身，讓他的父節點 <code class=\"language-text\">&lt;Text></code> 來處理。\n除了第一個參數 text 外，ㄧ樣會有 root component instance、host context 跟 internalInstanceHandle(fiber)，ㄧ樣我們只會用到第一個參數 text。</p>\n<ul>\n<li><code class=\"language-text\">finalizeInitialChildren(\nparentInstance,\ntype,\nprops,\nrootContainerInstance,\nhostContext\n)</code></li>\n</ul>\n<p>這個函式主要目的在於告訴 reconciler 需不需要在當前的 component 上呼叫 <code class=\"language-text\">commitMount()</code>，也就是需不需要等到所有 element 都被 rendered 以後才執行某些事情。例如 input elements 的 autofocus，就需要等 component mount 以後才能被呼叫。\n在我們的範例中，不需要做這些事，所以就回傳 false 即可。若是你回傳 true，那就必須也實作 <code class=\"language-text\">commitMount</code>。</p>\n<ul>\n<li><code class=\"language-text\">getPublicInstance(ins)</code></li>\n</ul>\n<p>只是個公開介面讓你能取得 instance。</p>\n<ul>\n<li><code class=\"language-text\">prepareForCommit(rootcontainerInfo)</code></li>\n</ul>\n<p>當你的節點實例都生成後，即將掛載到根節點時，可以在這個函式內進行一些準備工作，例如統計需要 autofucs 的節點等等，以我們的範例來說不需要做任何事，留空。</p>\n<ul>\n<li><code class=\"language-text\">resetAfterCommit(rootcontainerInfo)</code></li>\n</ul>\n<p>當 reconciliation 結束，inmemory tree 都掛載到 host root element 時，我們可以利用這個函式執行任何後續動作，像是回覆一些 event 狀態等等。</p>\n<ul>\n<li><code class=\"language-text\">appendChildToContainer(container, child)</code></li>\n<li><code class=\"language-text\">removeChildFromContainer(container, child)</code></li>\n<li><code class=\"language-text\">supportsMutation</code></li>\n</ul>\n<p>這幾個可以一起看，<code class=\"language-text\">supportsMutation</code> 代表的是你的 host environment 支不支援一些可以更改結構的 API，像是 DOM 內的 <code class=\"language-text\">appendChild</code>，若有則回傳 true，並實作 <code class=\"language-text\">appendChildToContainer</code> 與 <code class=\"language-text\">removeChildFromContainer</code>，讓 renderer 知道當 host element 執行 mutative api 時該如何處理。\n在我們的範例中我們不需要用到這些，但因為這應該是蠻容易用到的，所以我設為 true 並在這邊說明一下。</p>\n<ul>\n<li><code class=\"language-text\">now()</code></li>\n</ul>\n<p>host config 內最後一個函式 <code class=\"language-text\">now()</code>，是 reconciler 用來計算當前時間的，我們可以留空，或是提供 <code class=\"language-text\">Date.now</code>。</p>\n<h2 id=\"對應-custom-renderer-的-component\" style=\"position:relative;\"><a href=\"#%E5%B0%8D%E6%87%89-custom-renderer-%E7%9A%84-component\" aria-label=\"對應 custom renderer 的 component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>對應 Custom Renderer 的 component</h2>\n<p>終於走完一遍 host config，接下來可以看看我們的 component 該怎麼實作。</p>\n<p>在我們的 <code class=\"language-text\">createInstance()</code> 中，我們根據傳入的 fiber type 來決定要實例化哪個 component：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4 id=\"root-component---pptxdocument\" style=\"position:relative;\"><a href=\"#root-component---pptxdocument\" aria-label=\"root component   pptxdocument permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Component - PPTXDocument</h4>\n<p>Root component 在 <code class=\"language-text\">react-dom</code> 內可以說是 <code class=\"language-text\">document</code> 物件，而在我們的 PPTXRenderer 中，該角色就是 <code class=\"language-text\">new officegen('pptx')</code> 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PPTXDocument</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pptx <span class=\"token operator\">=</span> <span class=\"token function\">officegen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pptx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而此物件會被當成 <code class=\"language-text\">rootContainerInstance</code> 被傳到其他 host config 的函式中。</p>\n<h4 id=\"slide-component\" style=\"position:relative;\"><a href=\"#slide-component\" aria-label=\"slide component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slide Component</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Slide</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>pptx<span class=\"token punctuation\">.</span><span class=\"token function\">makeNewSlide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 依據不同 Host environment 來決定要如何實作</span>\n    <span class=\"token comment\">// 在 react-dom 中，可能就是 document.appendChild(child)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// render the text node</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideInstance<span class=\"token punctuation\">.</span><span class=\"token function\">addText</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Slide component 會取得 root instance，並呼叫 <code class=\"language-text\">makeNewSlide()</code> 來創建 slide（這是屬於 <code class=\"language-text\">officegen</code> 的 API）。</p>\n<p>然後我們需要實作 <code class=\"language-text\">appendChild(child)</code>，因為我們希望能透過以下的方式來創建 slides：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span></code></pre></div>\n<p>能接收一個 <code class=\"language-text\">&lt;Text></code> component 當子節點來 render Text 到 slide 上，我們用 <code class=\"language-text\">officegen</code> 提供的 <code class=\"language-text\">addText</code> 來將 <code class=\"language-text\">child.content</code> 繪製上去。此函式會被 <code class=\"language-text\">appendInitialChild</code> 呼叫。</p>\n<h4 id=\"text-component\" style=\"position:relative;\"><a href=\"#text-component\" aria-label=\"text component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text Component</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本結構一樣，只是在 <code class=\"language-text\">appendChild</code> 中，我們不用 append 任何 child，反之，我們需要將 text component 收到的 text child 存入一個 content 變數，讓其 parent(slide component) 可以接收到。</p>\n<h4 id=\"注意事項\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事項</h4>\n<p>雖然我們在這邊都創建了 <code class=\"language-text\">Slide</code> 與 <code class=\"language-text\">Text</code> component，但是在真正使用在 jsx 裡面時（也就是 <code class=\"language-text\">App.js</code>）是不能直接 import 這邊的 component 來使用的，我們可以另外創建一個 string alias 給 <code class=\"language-text\">App.js</code> 使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Aliases for createInstance</span>\n<span class=\"token keyword\">const</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Slide <span class=\"token operator\">=</span> <span class=\"token string\">'SLIDE'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們上述所撰寫的 Component 會在 reconciler 的 <code class=\"language-text\">createInstance</code> 中依據這邊的 alias 來創建實例。</p>\n<h4 id=\"render-function\" style=\"position:relative;\"><a href=\"#render-function\" aria-label=\"render function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render function</h4>\n<p>最後我們要實作 render function 來真正取代一般的 <code class=\"language-text\">ReactDOM.render</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render component</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component<span class=\"token punctuation\">,</span> filePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 創建 Root component instance 當整個 react tree 的 root。 </span>\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 呼叫 create container，該函式會回傳一個 flushed fiber（完成工作的 fiber，代表可以 render）</span>\n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> PPTXRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 接著透過呼叫 updateContainer 來設定一個從根節點開始的 update，更新整個樹。</span>\n  PPTXRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Officegen generates a output stream and not a file</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Generate a pptx document</span>\n    container<span class=\"token punctuation\">.</span>pptx<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token function\">Events</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得我們一般在呼叫 <code class=\"language-text\">ReactDOM.render</code> 時，都會傳入兩個參數嗎？一個是我們的 root component，一個就是要掛載的 dom element，而在我們的範例中，我們一樣傳入 root component，但第二參數給予的是要產生的 ppt 的路徑，而非要掛載的 element，因為我們是要將 react component 寫入 pptx 檔案。</p>\n<p>最後在回傳的 Promise function 中，我們呼叫 <code class=\"language-text\">officegen</code> 的 <code class=\"language-text\">generate</code> 函式來將我們在前面 host config 的 lifecycle method 中所附加到根節點的內容（appendChild 的部分）寫入檔案。</p>\n<p>這樣就完成了我們的 Custom Renderer！</p>\n<p>完整程式碼在此 -> <a href=\"https://github.com/ArvinH/reapptx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reapptx</a></p>\n<h2 id=\"補充說明---update\" style=\"position:relative;\"><a href=\"#%E8%A3%9C%E5%85%85%E8%AA%AA%E6%98%8E---update\" aria-label=\"補充說明   update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>補充說明 - update</h2>\n<p>這次的範例裡面並沒有需要更新 Component 狀態，如果你需要實作一個能處理 state update 的 custom renderer，在你的 host config 中，除了 <code class=\"language-text\">appendChildToContainer()</code> 和 <code class=\"language-text\">removeChildFromContainer()</code> 外，還需要實作 <code class=\"language-text\">prepareUpdate()</code> 與 <code class=\"language-text\">commitUpdate()</code>。</p>\n<ul>\n<li><code class=\"language-text\">prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext)</code></li>\n</ul>\n<p>從他傳入的參數就可以看出，你可以藉由 <code class=\"language-text\">oldProps</code> 與 <code class=\"language-text\">newProps</code> 的比較來決定是否要進行更新，若不需要就回傳 null，要的話就回傳要更新的 payload。</p>\n<ul>\n<li><code class=\"language-text\">commitUpdate(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle)</code></li>\n</ul>\n<p>這個函式就是負責最後將要 <code class=\"language-text\">prepareUpdate</code> 回傳的 update payload 套用到實際 instance 上。</p>\n<p>關於<strong>更新</strong>的實際例子，可以參考 <a href=\"https://juejin.im/post/5c31b814f265da612b13bf23#heading-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 渲染器了解一下</a> 這篇文章，有實際的例子與詳細程式碼講解。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一不小心洋洋灑灑紀錄了一堆，但透過製作 custom react renderer，一步步把整個流程與其中用到的函式都釐清用途後，對於 react 在進行 reconciliation 與 rendering 的流程多了不少了解，也不再對 React 為什麼能套用在這麼多不同的環境中感到神秘了，算是很不錯的收穫！有耐心看完的讀者若發現錯誤或是不清楚的地方，歡迎留言告知指教。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=CGpMlWVcHok\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a Custom React Renderer</a></li>\n<li><a href=\"https://github.com/nitin42/Making-a-custom-React-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Making-a-custom-React-renderer</a></li>\n<li><a href=\"https://blog.atulr.com/react-custom-renderer-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">⚛️👆Beginners guide to React Renderers. How to build your own renderer from scratch?</a></li>\n<li><a href=\"https://juejin.im/post/5c31b814f265da612b13bf23#heading-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 渲染器了解一下?</a></li>\n<li><a href=\"https://github.com/facebook/react/tree/60016c448bb7d19fc989acd05dda5aca2e124381/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">facebook/react-reconciler</a></li>\n<li><a href=\"https://github.com/chentsulin/awesome-react-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome-react-renderer</a></li>\n</ol>","id":"3000840e-b58a-5470-a668-03d2f4d15680","fields":{"slug":"custom-react-renderer-pttx"},"frontmatter":{"date":"2020-02-26T19:38:40.000Z","title":"製作 Custom React renderer - 用 React 寫 ppt","tags":["web","react","renderer"],"type":"tech","slug":"custom-react-renderer-pttx"},"timeToRead":16},{"excerpt":"\"When you look at someone through rose-colored glasses, all the red flags just look like flags.\"","html":"<blockquote>\n<p>\"When you look at someone through rose-colored glasses, all the red flags just look like flags.\"</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在 Codepen 上常常看到很多會設計又懂寫前端的高手，用 SVG 畫出很漂亮的圖案後，還能讓他們產生可愛的動畫，我一直很好奇他們是怎麼實作的，總覺得很困難，好像得對 SVG 透徹了解，並且自己畫出那些 SVG 圖案，才有辦法實作動畫。\n但其實不然，今天就來分享一個簡單的小技巧，讓你在短短十分鐘內就能讓一個靜態的 SVG 圖案活躍起來！</p>\n<p>簡單看個成品，你可以點選下面範例中的 <code class=\"language-text\">build</code> 按鈕，可以看到原本靜止的 SVG 房子動了起來！</p>\n<p class=\"codepen\" data-height=\"639\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"arvin0731\" data-slug-hash=\"qBBRYjp\" style=\"height: 639px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"SVG Animation House\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/qBBRYjp\">\n  SVG Animation House</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"第一步先找到你喜歡的-svg-圖案\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%85%88%E6%89%BE%E5%88%B0%E4%BD%A0%E5%96%9C%E6%AD%A1%E7%9A%84-svg-%E5%9C%96%E6%A1%88\" aria-label=\"第一步先找到你喜歡的 svg 圖案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一步，先找到你喜歡的 SVG 圖案</h2>\n<p>如果你跟我一樣，畫不出漂亮的圖案或 Icon，可以到 <a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flaticon</a>、<a href=\"https://www.iconfinder.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Iconfinder</a> 或 <a href=\"https://icons8.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">icons8</a> 等網站找些免費的 svg icon 下載使用（注意授權即可）。</p>\n<p><img src=\"/image/flaticon-desktop.png\" alt=\"Find a good icon\"></p>\n<p>前陣子到美國出差發現他們好像很流行滑板車（scooter），那就到 <a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flaticon</a> 上找個類似的圖案來玩玩！（一開始的房屋範例也是從 <a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flaticon</a> 取得的）：</p>\n<div style=\"margin: 0 auto; display: block; width: 256px;\">\n<svg id=\"Capa_1\" enable-background=\"new 0 0 512.004 512.004\" height=\"256\" viewBox=\"0 0 512.004 512.004\" width=\"256\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m175.669 463.803c-8.283 0-15-6.716-15-15 0-53.743-43.723-97.467-97.467-97.467-14.622 0-28.673 3.153-41.762 9.371-7.483 3.555-16.432.371-19.986-7.112-3.555-7.482-.37-16.431 7.113-19.985 17.143-8.143 35.525-12.273 54.635-12.273 70.286 0 127.467 57.182 127.467 127.467 0 8.283-6.714 14.999-15 14.999z\" fill=\"#c5e1e6\"/><path d=\"m442.768 321.476c-63.027 2.945-113.414 51.086-120.563 112.327h-210.801c-8.285 0-15 6.716-15 15s6.715 15 15 15h224.932c8.285 0 15-6.716 15-15 0-52.162 40.777-94.928 92.832-97.36 8.275-.387 14.67-7.408 14.283-15.684-.387-8.275-7.402-14.684-15.683-14.283z\" fill=\"#008adf\"/><path d=\"m442.768 321.476c-63.027 2.945-113.414 51.086-120.563 112.327h-66.204v30h80.335c8.285 0 15-6.716 15-15 0-52.162 40.777-94.928 92.832-97.36 8.275-.387 14.67-7.408 14.283-15.684-.387-8.275-7.402-14.684-15.683-14.283z\" fill=\"#0065a3\"/><path d=\"m448.787 415.604c-7.721 0-14.279-5.923-14.932-13.755l-28.796-345.572c-1.291-15.484-11.852-26.275-20.521-26.275-8.283 0-15-6.716-15-15s6.717-15 15-15c12.9 0 25.295 5.971 34.9 16.811 8.852 9.99 14.361 23.12 15.518 36.972l28.797 345.573c.688 8.256-5.447 15.506-13.703 16.194-.425.035-.847.052-1.263.052z\" fill=\"#8db9c4\"/><circle cx=\"63.203\" cy=\"448.803\" fill=\"#c5e1e6\" r=\"48.2\"/><path d=\"m63.203 512.002c-34.848 0-63.199-28.351-63.199-63.199 0-34.849 28.352-63.199 63.199-63.199 34.85 0 63.201 28.35 63.201 63.199 0 34.848-28.352 63.199-63.201 63.199zm0-96.398c-18.306 0-33.199 14.893-33.199 33.199 0 18.307 14.894 33.199 33.199 33.199 18.307 0 33.201-14.893 33.201-33.199s-14.895-33.199-33.201-33.199z\" fill=\"#1d4659\"/><circle cx=\"448.803\" cy=\"448.803\" fill=\"#8db9c4\" r=\"48.2\"/><g fill=\"#0e232c\"><path d=\"m448.803 512.002c-34.848 0-63.199-28.351-63.199-63.199 0-34.849 28.352-63.199 63.199-63.199 34.85 0 63.201 28.35 63.201 63.199 0 34.848-28.352 63.199-63.201 63.199zm0-96.398c-18.307 0-33.199 14.893-33.199 33.199 0 18.307 14.893 33.199 33.199 33.199 18.307 0 33.201-14.893 33.201-33.199s-14.895-33.199-33.201-33.199z\"/><path d=\"m352.402.002c-8.283 0-15 6.716-15 15s6.717 15 15 15h32.135v-30h-32.135z\"/></g></svg>\nIcons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n<h2 id=\"第二步分析一下你的-svg-長什麼樣子\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%8B%E4%BD%A0%E7%9A%84-svg-%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"第二步分析一下你的 svg 長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第二步，分析一下你的 SVG 長什麼樣子</h2>\n<p>找到喜歡的 svg icon 後，用瀏覽器打開，接著開啟 devtool，你會看到下面的結果：</p>\n<p><img src=\"/image/svg-in-browser.png\" alt=\"open svg from browser\"></p>\n<p>裡面的 <code class=\"language-text\">path</code> 跟 <code class=\"language-text\">circle</code> 都是 svg 的 DOM 元件，跟字面上意思一樣，就是 svg 圖案內的線條與圓形。</p>\n<p>svg 的 <code class=\"language-text\">path</code>，基本上就是一連串的 svg mini language：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M 10 25\n         L 10 75\n         L 60 75\n         L 10 25<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>上面程式碼中的 d 的內容：M 代表將 筆 移動到 (10, 25)，接著 L 畫一條線到 (10, 75)，以此類推。詳細介紹可看<a href=\"https://www.dashingd3js.com/svg-paths-and-d3js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡 - SVG Paths and D3.js</a>。</p>\n<p>透過 devtool，我們可以知道每個 <code class=\"language-text\">path</code> 是對應到畫面上的哪個部分：</p>\n<p><img src=\"/image/animate-svg-devtool.gif\" alt=\"devtool-find-parts\"></p>\n<p>到這邊大概就會有個方向了，既然我們可以知道每個元件對應到圖案上的哪個部分，我們就能夠針對想要套上動畫的 DOM 元件來操作！</p>\n<h2 id=\"第三步好用的動畫工具---timelinelite--tweenmax\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%A5%BD%E7%94%A8%E7%9A%84%E5%8B%95%E7%95%AB%E5%B7%A5%E5%85%B7---timelinelite--tweenmax\" aria-label=\"第三步好用的動畫工具   timelinelite  tweenmax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第三步，好用的動畫工具 - TimelineLite &#x26; TweenMax</h2>\n<p>當然你可以給予每個 svg 內的 DOM 元件一個獨特的 id，或是 class name，然後用 CSS 或 JavaScript 來自行處理動畫，但這樣難度還是頗高，更重要的是，就沒辦法在十分鐘內做完 XD</p>\n<p>所以我們得借用工具，Timeline(Lite|Max) 跟 TweenMax 是知名的 <a href=\"https://greensock.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GreenSock Animation Platform（簡稱 GSAP）</a>推出的套件，從名稱就可以猜出，主要是提供 <strong>時間軸</strong> 與 <strong>補間</strong> 動畫的 API：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example__ball<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example__title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Taiwan No.1!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">animateCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span> Build! <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- JavaScript --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token comment\">// 使用 TimelineMax 物件</span>\n<span class=\"token keyword\">const</span> tl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimelineMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 利用 .set 設定擁有 class name .example__title 的元素</span>\n<span class=\"token comment\">// 將其 scale 縮小成 0.2，透明度設為 0</span>\ntl\n  <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".example__title\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    scale<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span>\n    autoAlpha<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 將擁有 class name .example__ball 的元素</span>\n  <span class=\"token comment\">// scale 縮小成 0.2</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".example__ball\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    scale<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// tween 1: 在 1 秒內旋轉 360 度，並翻轉 180 度</span>\n  <span class=\"token comment\">// 接著回復 scale 成原始大小，中間以 Elastic.easeIn 這個 ease function 來控制動畫速度</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".example__ball\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    rotationX<span class=\"token operator\">:</span> <span class=\"token number\">360</span><span class=\"token punctuation\">,</span>\n    rotationY<span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n    scale<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    ease<span class=\"token operator\">:</span> Elastic<span class=\"token punctuation\">.</span>easeIn<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// tween 2: 跟第一個補間動畫雷同，只是這次是控制文字，並在 0.5 內完成</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".example__title\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    autoAlpha<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    scale<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    ease<span class=\"token operator\">:</span> Back<span class=\"token punctuation\">.</span>easeOut<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>GSAP 甚至提供一個 <a href=\"https://greensock.com/ease-visualizer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ease Visualizer</a> 讓你可以看看每種 Ease function 的效果，更順帶附上程式碼：</p>\n<p><img src=\"/image/GSAP-ease-visualizer.png\" alt=\"gsap ease visualizer\"></p>\n<p>上述短短的程式碼就能達到如下效果：</p>\n<p class=\"codepen\" data-height=\"447\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"arvin0731\" data-slug-hash=\"pooKOxo\" style=\"height: 447px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"GSAP Tutorial: Simple Timeline\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/pooKOxo\">\n  GSAP Tutorial: Simple Timeline</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"第四步結合-gsap-工具與你喜愛的-svg\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E7%B5%90%E5%90%88-gsap-%E5%B7%A5%E5%85%B7%E8%88%87%E4%BD%A0%E5%96%9C%E6%84%9B%E7%9A%84-svg\" aria-label=\"第四步結合 gsap 工具與你喜愛的 svg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第四步，結合 GSAP 工具與你喜愛的 SVG</h2>\n<p>GSAP 的 API 文件蠻齊全的，還有論壇可以搜尋相關問題，使用上有任何問題幾乎都能在上面找到答案：<a href=\"https://greensock.com/docs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網文件</a>、<a href=\"https://greensock.com/forums/forum/11-gsap/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">論壇</a></p>\n<p>在一開始的房屋範例中，我主要使用的是 TimelineMax 的 <code class=\"language-text\">from</code> 與 <code class=\"language-text\">staggerFrom</code>，跟前步驟內的範例不同，這兩個 API 只需要設定初始值，他會在指定時間內將補間動畫完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#House > rect:nth-child(24)'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>scaleX<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transformOrigin<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span> ease<span class=\"token operator\">:</span> Power2<span class=\"token punctuation\">.</span>easeOut<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>將 CSS Selector <code class=\"language-text\">#House > rect:nth-child(24)</code> 這個元素，從 scaleX 為 0 開始，以 center(中心) 為變形起點，利用 Power2.easeOut 的 ease function，在一秒內回復到原始狀態，並執行補間動畫。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">staggerFrom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'#House > path:nth-child(34)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#House > path:nth-child(32)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>scaleY<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transformOrigin<span class=\"token operator\">:</span> <span class=\"token string\">\"bottom\"</span><span class=\"token punctuation\">,</span> ease<span class=\"token operator\">:</span> Bounce<span class=\"token punctuation\">.</span>easeOut<span class=\"token punctuation\">,</span> stagger<span class=\"token operator\">:</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"scene1+=0.5\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>與 <code class=\"language-text\">from</code> 雷同，只是 <code class=\"language-text\">staggerFrom</code> 可以一次放入多個 CSS Selector，用 <code class=\"language-text\">stagger</code> 這個屬性來設定陣列中的 Selector 要以怎樣的時間差出現。</p>\n<p>詳細 API 參數可以參考<a href=\"https://greensock.com/docs/v2/TimelineMax\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a></p>\n<p>接著回到我們的 SVG，在 devtool 的幫助下，要取出 svg 內部元素的 CSS Selector 非常容易，在 DOM 元件上按右鍵，選擇 <code class=\"language-text\">Copy -> Copy selector</code>，就能直接複製到該元件的 CSS Selector：</p>\n<p><img src=\"/image/svg-animation-copy-selector.png\" alt=\"copy selector directly\"></p>\n<p>現在我們能取得 svg 中任何部分的 CSS Selector，也知道我們能用 GSAP API 來進行補間動畫，現在是時候將其結合起來！</p>\n<p>第一步先調整一下基本 Layout，一般在空白 Html 內直接放入 svg 時，圖案大多會緊靠頁面左上角，因為 svg 本身通常不會有任何關於 layout 的 CSS，所以可以套用個 <code class=\"language-text\">margin: 0 auto</code> 將其置中，看起來會順眼一些，你也能額外加些 padding。此外，為了方便測試動畫效果，也可以放個 button 在頁面上，用來呼叫你的動畫函式：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--html part--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">animateBike</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span> Build! <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--css part--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">#Capa_1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 256px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接著我們使用 <code class=\"language-text\">TimelineMax</code> 提供的 <code class=\"language-text\">staggerFrom</code> 函式，利用 devtool 將滑板車的輪子部分找出來，複製它們的 CSS Selector，放入 <code class=\"language-text\">staggerFrom</code> 函式參數中，設定 x 與 y 軸的 <code class=\"language-text\">scale</code> 都從 0 開始，由 <code class=\"language-text\">center</code> 增長，採用 <code class=\"language-text\">Bounce.easeOut</code> 的 ease function，而四個 Selector 間以 <code class=\"language-text\">stagger: 0.2</code> 的屬性值作為補間動畫出現的時間差：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimelineMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  tl\n    <span class=\"token punctuation\">.</span><span class=\"token function\">staggerFrom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'#Capa_1 > g > path:nth-child(1)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#Capa_1 > circle:nth-child(7)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#Capa_1 > path:nth-child(6)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#Capa_1 > circle:nth-child(5)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>scaleY<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> scaleX<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transformOrigin<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span> ease<span class=\"token operator\">:</span> Bounce<span class=\"token punctuation\">.</span>easeOut<span class=\"token punctuation\">,</span> stagger<span class=\"token operator\">:</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>簡單幾行程式碼，就能讓我們的滑板車有了動畫！</p>\n<p class=\"codepen\" data-height=\"417\" data-theme-id=\"29194\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-slug-hash=\"MWWXPVm\" style=\"height: 417px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Scooter - demo1\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/MWWXPVm\">\n  Scooter - demo1</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"第五步發揮創意將整體動畫完成\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%BA%94%E6%AD%A5%E7%99%BC%E6%8F%AE%E5%89%B5%E6%84%8F%E5%B0%87%E6%95%B4%E9%AB%94%E5%8B%95%E7%95%AB%E5%AE%8C%E6%88%90\" aria-label=\"第五步發揮創意將整體動畫完成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第五步，發揮創意，將整體動畫完成</h2>\n<p>TimelineMax 所提供的 API 都是 chainable 的，你可以想像成是時間軸一般，動畫跟著 chain 一步一步照順序執行，而 <code class=\"language-text\">staggerFrom</code> 則可以同時讓多個 DOM 元件以些微時間差的順序啟動，另外也能設置一些 Flag 來指定要等到哪幾個動畫完成後，才接續其他動畫，這些細節當你在思考要如何“動畫”你的 SVG 時，再去 GSAP 的文件與論壇查詢，相信都能找到解答。</p>\n<p>最後，發揮自己的創意，把 svg 的各個部分都補上動畫，搭配 GSAP 提供的文件，組合各種 API，一個簡單的作品就完成了：</p>\n<p class=\"codepen\" data-height=\"403\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"arvin0731\" data-slug-hash=\"XWWYYWM\" style=\"height: 403px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Scooter - final-steps\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/XWWYYWM\">\n  Scooter - final-steps</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然這個小技巧說破真的不值錢，最困難的技術都交給了 GSAP 處理，SVG 還不用是自己畫的，但加在自己的部落格或是放在投影片中，可以瞬間讓畫面更加豐富，無聊沒事拿來娛樂自己也是很不錯的選擇，像是出國旅行回來有時差睡不著，不如就來畫個動畫調養身心 XD\n總之，我自己覺得蠻有趣的，希望或多或少對讀到這篇文章的人有點幫助。</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://greensock.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GreenSock Animation Platform</a></li>\n<li><a href=\"https://medium.com/@LewisMenelaws/how-to-create-beautiful-svg-animations-easily-610eb2690ac3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Create Beautiful SVG Animations Easily</a></li>\n</ol>","id":"6f9a0e19-cbd4-5930-8fc8-f30f2d7618ad","fields":{"slug":"svg-animation-in-10-mins"},"frontmatter":{"date":"2019-11-06T08:56:40.000Z","title":"十分鐘、五步驟，SVG 動起來！","tags":["web","svg","animation","TimelineMax","GSAP"],"type":"tech","slug":"svg-animation-in-10mins"},"timeToRead":9},{"excerpt":"『You're really lucky you know. You didn't have to wait your whole life to do something special』","html":"<blockquote>\n<p>『You're really lucky you know. You didn't have to wait your whole life to do something special』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>你是否曾因為網路上被歧視、被霸凌的新聞或影片而憤憤不平？你是否曾因為各種身殘心不殘的勵志故事而感到激勵？\n如果你有過上述經驗，那當你在製作網站時，是否曾經考量過 Web Accessibility（a11y） 呢？</p>\n<p>老實說，我真的很少在實作時認真的驗證自己的網站的可訪性，花在考量是否能支援 IE 9 的時間還比較多一些。（想當年在政府機關服務時，看到局處長很自豪官網拿到無障礙網站評等第一時，還覺得莫名其妙，想說網站這麼醜，到底哪裡無障礙 XD）</p>\n<p>在實作的時候，PM 會拿數據告訴你，有多少用戶是使用舊版的瀏覽器，所以我們需要支援到何種程度，但應該很少 PM 會拿出數據告訴你，有多少 screen reader 來存取我們的網站·。</p>\n<p>然而，光台灣，2018 年的身心障礙人口有一百多萬人，其中視覺障礙的有將近六萬（<a href=\"https://dep.mohw.gov.tw/DOS/lp-2976-113.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛生福利處的資料</a>），美國比例更高，有將近 25% 的身心障礙人口（<a href=\"https://youtu.be/dvtfNpt75aA?t=26101\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">資料來源</a>）。</p>\n<p>依照你產品的用戶比例，這些數據大概無法說服你的 PM，讓他們給你更多時間思考如何增強網站的可訪性，但仔細想想，如果你在乎那些身心健全卻不願意升級自己瀏覽器的人，而不在乎這些走出障礙，連接到網路吸取知識的殘障人士，你是不是無意中在他們的人生道路中增加了更多阻礙，不自覺地成為歧視他人的一方呢。</p>\n<p>今天想透過這篇文章，整理一些資源與簡短的實作要點，喚醒大家對 Web Accessibility 重要性的認知，也是提醒自己在未來實作上必定要多加注意。</p>\n<h1 id=\"使用-screen-reader-的感覺是什麼\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-screen-reader-%E7%9A%84%E6%84%9F%E8%A6%BA%E6%98%AF%E4%BB%80%E9%BA%BC\" aria-label=\"使用 screen reader 的感覺是什麼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 screen reader 的感覺是什麼</h1>\n<p>相信會看到這篇文章的人，多少對於 Web Accessiblity 都有了解，知道是為了輔助障礙人士閱讀網頁內容，平常實作時至少在 <code class=\"language-text\">&lt;img></code> 元素上會加上 <code class=\"language-text\">alt</code> 等文字來描述圖片。但你有真的使用過 screen reader 嗎？你知道使用這些輔助工具上網的人，看到的世界跟你有多大的不同嗎？</p>\n<p>我原本也不知道，直到我試用了 Mac 內建的 VoiceOver，用它來閱讀平常看的網站，像是 wikipedia：</p>\n<iframe style=\"max-width: 560px\" width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/IHm6me_VfyM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>體驗實在很糟，除了機器人的聲調外，外加極快的語速，在你從瀏覽器的分頁標籤移動到真正的網頁內容前，還需經過許多瀏覽器本身按鈕選項的介紹，接著到了網頁內容，文章因為連結的關係，變得破碎（為了讓你知道是連結或是按鈕，在文字內容前都會先朗讀出該段內容的功能性，像是：<em>連結</em>、<em>按鈕</em>），閱讀順序也與我們憑眼睛觀看時的不同。</p>\n<p>然而 Wikipedia 已經算是 a11y 處理得不錯的了，畢竟內容大多也只有文字與圖片。想想看現在這麼多炫麗介面的網站，各種需要使用者與之互動的功能，光用想像的就是悲劇，看一下 Google 大肆宣傳的 AMP Story：</p>\n<iframe style=\"max-width: 560px\" width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/cdPVMDJB37k\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>在強調 Web performance 的同時，web accessibility 也該考量進去。這邊就有<a href=\"https://ethanmarcotte.com/wrote/amphora/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>在討論關於 amp-story 在 a11y 的 <a href=\"https://github.com/ampproject/meta-ac/blob/master/meetings/2019-03-f2f.md#accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a>，不過 ampproject 內是有 accessibility working group 在想辦法解局的。</p>\n<p>上面的 Screen reader 範例比較是針對視障朋友的使用為主，現實中能造成生活不便的可不只有視覺上的困難，還有聽覺、肢體等等，像是滑鼠這類需要高度手眼協調能力的操作，就不是那麼有親和力，因此光是透過鍵盤操作網站的順暢度，就必須好好思考，也是實作 Web Accessibility 時的一大重點。</p>\n<p>如果想快速體驗一下使用 screen reader 的效果，又不想學習 Voiceover 等系統內建 reader 的，可以到 udacity 提供的<a href=\"http://udacity.github.io/ud891/lesson3-semantics-built-in/02-chromevox-lite/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">網站</a> 試試，使用的是 Chrome 的 chromevox-lite 閱讀器，且有刻意將內容模糊化，感受會更真實點。</p>\n<h1 id=\"web-accessibility-的資源與實作要點\" style=\"position:relative;\"><a href=\"#web-accessibility-%E7%9A%84%E8%B3%87%E6%BA%90%E8%88%87%E5%AF%A6%E4%BD%9C%E8%A6%81%E9%BB%9E\" aria-label=\"web accessibility 的資源與實作要點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Accessibility 的資源與實作要點</h1>\n<p>說了許多緣由以及範例，現在來談談該如何學習 Web Accessibility，並實作在我們的網站中。</p>\n<h2 id=\"網絡內容無障礙功能指南---web-content-accessibility-guidelines\" style=\"position:relative;\"><a href=\"#%E7%B6%B2%E7%B5%A1%E5%85%A7%E5%AE%B9%E7%84%A1%E9%9A%9C%E7%A4%99%E5%8A%9F%E8%83%BD%E6%8C%87%E5%8D%97---web-content-accessibility-guidelines\" aria-label=\"網絡內容無障礙功能指南   web content accessibility guidelines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>網絡內容無障礙功能指南 - Web Content Accessibility Guidelines</h2>\n<p>先從 W3C 指南了解 \"無障礙\" 的定義。<a href=\"https://www.w3.org/TR/WCAG21/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">網絡內容無障礙功能指南 (WCAG) 2.1</a>，是 W3C 擬定的無障礙功能指南和最佳做法，旨在有系統地闡述“無障礙功能”的含義。很多國家政府機關都會要求根據此指南來實作網站。</p>\n<p>WCAG 有四大原則：</p>\n<ul>\n<li>可感知（Perceivable）：所有資訊與使用者介面元件都必須要能以各種使用者能感知的方式，呈現給使用者。像是能讓 Screen Reader 閱讀出內容。不能讓使用者透過各種感官都無法感知到內容。</li>\n<li>可操作（Operable）：使用者元件與網頁內容間的導覽都要可操作，不能出現使用者無法操作的介面。</li>\n<li>可理解（Understandable）：呈現給使用者的資訊與操作方式都要能被使用者理解。</li>\n<li>強健（Robust）：不論是被哪種輔助科技工具或是各種 user agents 所存取，網站內容都要能不受影響，呈現給使用者完整的內容，若使用者使用的工具變得更加進步，網站也得跟上腳步，維持內容的存取、閱讀性。</li>\n</ul>\n<p>這是無障礙內容的一個概覽，還可以透過 <a href=\"https://webaim.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAIM</a> 檢查清單，來檢視我們該如何依照 WCAG 的指南實作。</p>\n<h2 id=\"其他資源\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E8%B3%87%E6%BA%90\" aria-label=\"其他資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他資源</h2>\n<p>除了 W3C 的定義指南外，還有許多更親和的資源可以參考，畢竟 Web accessibility 不是很新的議題了，像是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 或是 <a href=\"https://developers.google.com/web/fundamentals/accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> 都有非常詳細的資料與教學，Udacity 上也有相關<a href=\"https://www.udacity.com/course/web-accessibility--ud891\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">課程</a>。</p>\n<p>看完大概都需要花上幾個小時的時間，如果想快速了解的話，其實也已經有不少關於 a11y 的繁中文章，像這篇 - <a href=\"https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">回歸初心，一探 Web Accessibility</a>，簡短精要，整理了上面 Google 與 Udacity 課程的內容，適合快速了解何謂 a11y，而最近<a href=\"https://ithelp.ithome.com.tw/users/20108045/ironman/2454\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">鐵人賽的這系列文</a>也很不錯，蒐集整理非常多資訊，細節很多，可以當作參考工具，在實作時隨時翻閱，推推。</p>\n<p>此外，上面的資源著重在一般的網站上，而身為資料視覺化的愛好者，我很好奇該如何處理 Data visualization 上的 Web Accessibility 問題。</p>\n<p>從 <a href=\"https://www.a11ywithlindsey.com/about\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lindsey</a> 的這篇文章 - <a href=\"https://www.a11ywithlindsey.com/blog/accessibility-d3-bar-charts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Accessibility in d3 Bar Charts</a> 中可以窺知一二。</p>\n<p>主要是要在圖表中加入足夠的描述文字，然後在設計顏色時，使用一些輔助工具如 <a href=\"http://www.color-blindness.com/coblis-color-blindness-simulator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coblis</a> 來建立 color blind friendly 的圖表。</p>\n<p>若是較常使用 SVG 來製作動態圖表的人，推薦研讀一下這篇專門介紹如何為你的 SVG 增強 accessibility 的文章 -  <a href=\"https://css-tricks.com/accessible-svgs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">accessible-svgs</a>，可以為你的資訊圖表在 Web Accessibility 上帶來非常大的改善。</p>\n<h2 id=\"實作要點\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E8%A6%81%E9%BB%9E\" aria-label=\"實作要點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作要點</h2>\n<p>知道了為何需要了解 Web Accessibility，也知道了有哪些資源可以閱讀，接下來根據上面閱讀的資料，簡單總結幾個實作上要關注的重點：</p>\n<h3 id=\"思考網站能以什麼方式瀏覽\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E8%80%83%E7%B6%B2%E7%AB%99%E8%83%BD%E4%BB%A5%E4%BB%80%E9%BA%BC%E6%96%B9%E5%BC%8F%E7%80%8F%E8%A6%BD\" aria-label=\"思考網站能以什麼方式瀏覽 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思考網站能以什麼方式瀏覽</h3>\n<p>這其實是 <a href=\"https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">回歸初心，一探 Web Accessibility</a> 這篇文章中所提到的結論，我覺得蠻有道理的。</p>\n<p>與其思考使用者失去什麼感官能力，不如專注在你的網站能提供哪些方式瀏覽。可能是 screen reader、鍵盤（keyboard）、聲控或眼動儀等其他人機介面。從這些操作介面去思考該怎麼加強自己網站的可訪性。</p>\n<h3 id=\"網頁元件的可聚焦性\" style=\"position:relative;\"><a href=\"#%E7%B6%B2%E9%A0%81%E5%85%83%E4%BB%B6%E7%9A%84%E5%8F%AF%E8%81%9A%E7%84%A6%E6%80%A7\" aria-label=\"網頁元件的可聚焦性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>網頁元件的可聚焦性</h3>\n<p>所謂的可聚焦，指的就是元件能夠成為焦點，而所謂焦點，是指當前螢幕上瀏覽器當下能接收來自鍵盤輸入、剪貼板輸出的元件（字段、複選框、按鈕或連結等輸入項目），更簡單來說，就是使用者此刻正在操作的元件。</p>\n<p>為什麼可聚焦性很重要呢？除了讓使用者知道自己目前所使用的元件外，就是讓 screen reader 知道目前該 read 哪個元件。而瀏覽器一次只能聚焦在一個元件上，這個特性讓 screen reader 不會同時讀到兩個不同元件的描述。</p>\n<p>在一般瀏覽器上頭，被聚焦的元件通常預設會以一個藍色外框包裹住：</p>\n<p><img src=\"/image/outline-blue.png\" alt=\"defaul outline\"></p>\n<p>實務上很多人都會用 <code class=\"language-text\">outline: none</code> 把這個外框拿掉，但實際上是非常不友善的行為，若是不喜歡瀏覽器預設的樣式，可以跟設計師溝通，看要如何修改被聚焦的元件樣式，但記得要能讓使用者注意到樣式的變化，才能幫助他們判斷元件的聚焦與否。如 Youtube 上的回復查看按鈕：</p>\n<p><img src=\"/image/outline-custom.png\" alt=\"custom outline\"></p>\n<p>另外要注意的是，並非所有元件都要設成可聚焦，像是文章內文本身，或是其他即便讓 screen reader 朗讀出來也無法很好傳達意思的元件，其實跳過反而比較不會造成混淆與困擾。</p>\n<h3 id=\"dom-的順序\" style=\"position:relative;\"><a href=\"#dom-%E7%9A%84%E9%A0%86%E5%BA%8F\" aria-label=\"dom 的順序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 的順序</h3>\n<p>Screen reader 在移動時，會依照 DOM 的順序進行，所以應當盡量將你想要呈現給使用者的內容順序，完整的對應到 DOM 的順序上頭。除此之外，還得注意 CSS 的影響，例如 <code class=\"language-text\">float</code>，就可能會造成視覺上的順序與 DOM 順序有所差異，導致 screen reader 朗讀的次序受到影響與畫面不符：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><button style=\"width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;float: right\">1</button><button style=\"width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;\">2</button><button style=\"width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;\">2</button>\n<br/></p>\n<p>另外，善用 <code class=\"language-text\">tabindex</code>，能夠更好的幫助使用者操作鍵盤（tab）瀏覽網站時的移動順序，無論是跳過隱藏在 Responsive 表單選項中的元件，或是在開啟的 Modal 中製造出 Key trap，讓使用者不會移動到 Modal 覆蓋下的元件上。</p>\n<h3 id=\"語義化標籤\" style=\"position:relative;\"><a href=\"#%E8%AA%9E%E7%BE%A9%E5%8C%96%E6%A8%99%E7%B1%A4\" aria-label=\"語義化標籤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>語義化標籤</h3>\n<p>眾所皆知，Semantic HTML 對於提高 SEO 很有幫助，然而，它也能大大增加網站的可訪性（大概也是因此才會讓 SEO 效果提升），一個好的 Semantic HTML Element 應該包含：</p>\n<ol>\n<li>Role： 元件的類型（按鈕、input 元件、超連結等等）</li>\n<li>Name(Label)：通常與 input 元件並用，像是 radio input、dropdown list 等等</li>\n<li>State：元件當下的狀態（點擊、展開、收合）</li>\n<li>Value：元件內的值（Input 元件內的值、Button 上的文字等等）</li>\n</ol>\n<p>瀏覽器會根據你的 HTML 建造出 DOM Tree，同時也會依照你在 DOM 元件上的資訊建造出 Accessibility Tree（<a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>）：</p>\n<p><img src=\"/image/treestructure.jpg\" alt=\"accessibility-tree\"></p>\n<p>而 Screen reader 就會根據這棵 Accessibility Tree 進行朗讀，因此你提供的 Semantic HTML 越清楚，資訊越詳細，就能夠建構出越強健的 Accessibility Tree 供輔助工具參考。</p>\n<p>再者，如同文章前頭提到的，網頁上的媒體元件，像是 <code class=\"language-text\">img</code>、<code class=\"language-text\">video</code> 或是視覺圖表，都應該提供對應的 <code class=\"language-text\">alt</code> 描述，讓 Screen reader 至少能根據 <code class=\"language-text\">alt</code> 來說明該媒體元件的內容。不過，若是單純拿來裝飾用的 <code class=\"language-text\">img</code>，可以給予 <code class=\"language-text\">alt</code> 空值，代表其裝飾性。</p>\n<p>想檢測網站是否有足夠完整的 Accessibility Tree 的話，可以用 Chrome 打開你想看的網站，並且開啟開發者工具，在 Element 標籤內，右側可以找到 Accessibility 的 tab，在那邊就能看到當前頁面元件的 Accessibility Tree：</p>\n<p><img src=\"/image/chrome-dev-AT.png\" alt=\"Chrome DevTool Accessibility Tree\"></p>\n<h3 id=\"wai-aria\" style=\"position:relative;\"><a href=\"#wai-aria\" aria-label=\"wai aria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WAI-ARIA</h3>\n<p>WAI-ARIA，代表 Web Accessibility Initiative — Accessibility Rich Internet Applications （網頁可訪性倡議 — 無障礙網頁應用）。</p>\n<p>上面章節我們提到瀏覽器會依照 Semantic HTML Element 來建構 Accessibility Tree，然而有時你需要使用像是 <code class=\"language-text\">div</code>、<code class=\"language-text\">span</code> 等元素來做一些客製化的元件時，該怎麼辦呢？不就無法保持語義了嗎？</p>\n<p>這時 WAI-ARIA 就派得上用場了。使用 ARIA 屬性，我們就可以補足元件缺少的訊息，讓它進入 Accessibility Tree 當中。（<a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>）</p>\n<p><img src=\"/image/dom-aria-tree.png\" alt=\"DOM+ARIA\"></p>\n<p>舉個例子：</p>\n<p>一個用 <code class=\"language-text\">&lt;li></code> 元件所客製化的 checkbox，我們可以依靠 CSS 讓他 \"表現\" 得像 checkbox，對於視力正常的人來說是沒問題的，但 screen reader 可不認得他，因此我們至少必須加上 ARIA 屬性中的：<code class=\"language-text\">role</code> 與 <code class=\"language-text\">aria-*</code>，讓其加入到 Accessibility Tree 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> &lt;li tabindex=\"0\" class=\"checkbox\" checked>\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> &lt;li tabindex=\"0\" class=\"checkbox\" role=\"checkbox\" checked aria-checked=\"true\">\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> Receive promotional offers\n</span><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>/li></span></code></pre></div>\n<p><code class=\"language-text\">role</code> ，等於宣告該 DOM 元件該扮演什麼角色，像是 <code class=\"language-text\">checkbox</code>、<code class=\"language-text\">button</code> 或 <code class=\"language-text\">dialog</code> 等，還可再分類出 <code class=\"language-text\">Widget roles</code>、<code class=\"language-text\">Composite roles</code> 和 <code class=\"language-text\">Landmark roles</code> 等等。詳細 spec 可以看 <a href=\"https://www.w3.org/TR/wai-aria-1.1/#role_definitions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 的定義</a></p>\n<p>而搭配 <code class=\"language-text\">role</code> 使用的 <code class=\"language-text\">aria-*</code> 則為元件定義了<em>屬性</em>與<em>狀態</em>，像是上面例子中的 <code class=\"language-text\">aria-checked=\"true\"</code> 即為元素狀態的一種，告知 Accessibility Tree 這元件目前屬於 <code class=\"language-text\">checked</code> 狀態。</p>\n<p>也能透過 <code class=\"language-text\">aria-lable</code> 設定專門給輔助工具使用的 API：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"screen reader only label\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>或是設定父項/子項聯繫，例如控制特定區域的客製化捲軸：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div role<span class=\"token operator\">=</span><span class=\"token string\">\"scrollbar\"</span> aria<span class=\"token operator\">-</span>controls<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// . . .</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>關於 <code class=\"language-text\">role</code> 與 <code class=\"language-text\">aria-*</code> 狀態和屬性，可以先從 MDN 的<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這份文件</a>概觀所有列表，然後從 <a href=\"https://www.w3.org/WAI/PF/aria-1.1/states_and_properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 的定義</a>中去翻找詳細資訊。</p>\n<h3 id=\"色彩樣式\" style=\"position:relative;\"><a href=\"#%E8%89%B2%E5%BD%A9%E6%A8%A3%E5%BC%8F\" aria-label=\"色彩樣式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>色彩、樣式</h3>\n<p>文章前面有提到，設計顏色時，應當使用一些輔助工具如 <a href=\"http://www.color-blindness.com/coblis-color-blindness-simulator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coblis</a> 來模擬色盲的使用者是如何 \"看\" 你的網站，可以根據這些測試與資訊，與設計師討論，製作出 color blind friendly 的介面。</p>\n<p>除了顏色之外，從文字的大小、表格的間隙，到長條圖中每條 Bar 的距離，都可能影響到視覺障礙的使用者，也都可以在設計無障礙網站時考慮進去。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>不知道大家投身 Web 領域的動機是什麼，我想一定有部分人的理由與我相同，相信 Web 是最平易近人的媒介，能輕易把任何資訊帶給全世界，你不用存錢半天才能買到一台 iPhone 進入 App Store 下載應用程式，只需要到圖書館把電腦打開，透過瀏覽器即可連接世界。如果你也有同樣信念，除了加強 Web performance，讓存取網站的門檻降低外，提升 Web Accessibility 讓網站能真正服務到 \"所有人\"，絕對也是必修的課題之一，弭平資訊落差，落實公平正義，從你我做起！</p>\n<p>P.S. Web Accessibility 的內容很多，這篇文章旨在引起大家對其的重視，詳細的規格與實作細節可以從底下的參考資料中去閱讀。</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://youtu.be/dvtfNpt75aA?t=26101\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React rally 2019</a></li>\n<li><a href=\"https://ethanmarcotte.com/wrote/amphora/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amphora</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN - 可訪問性</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google - 無障礙功能</a></li>\n<li><a href=\"https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">回歸初心，一探 Web Accessibility</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/users/20108045/ironman/2454\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實踐無障礙網頁設計（Web Accessibility）系列</a></li>\n<li><a href=\"https://www.a11ywithlindsey.com/blog/accessibility-d3-bar-charts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Accessibility in d3 Bar Charts</a></li>\n</ol>","id":"98824468-2f67-5ad2-b305-72e3f8289a36","fields":{"slug":"web-accessibility-intro"},"frontmatter":{"date":"2019-10-13T17:07:29.000Z","title":"Web Accessibility 的重要性","tags":["web","web accessibility","a11y","javascript"],"type":"tech","slug":"web-accessibility-intro"},"timeToRead":14},{"excerpt":"『既然很幸運不需要為生存掙扎, 那就該盡量過多種的生活比較不枉費自己掌握的資源。』","html":"<blockquote>\n<p>『既然很幸運不需要為生存掙扎, 那就該盡量過多種的生活比較不枉費自己掌握的資源。』</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年年初的時候，W3C 正式將 Web Authentication (WebAuthn) 列入<a href=\"https://www.w3.org/TR/webauthn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">正式標準</a>，開發者可以透過 API 啟動 <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO 2 驗證</a>，讓使用者透過行動裝置、指紋辨識或硬體安全金鑰來登入帳號，不需輸入密碼！</p>\n<p>雖然目前<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">支援度還不高</a>，但既然已成為標準，沒理由不來認識一下何謂 Web Authentication，以及我們可以如何使用。今天就一起來了解我們能如何使用 Web Authentication，增加網站安全性，並免除密碼帶給我們的諸多麻煩。</p>\n<h2 id=\"先回憶一下我們平常的註冊登入方式\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%9B%9E%E6%86%B6%E4%B8%80%E4%B8%8B%E6%88%91%E5%80%91%E5%B9%B3%E5%B8%B8%E7%9A%84%E8%A8%BB%E5%86%8A%E7%99%BB%E5%85%A5%E6%96%B9%E5%BC%8F\" aria-label=\"先回憶一下我們平常的註冊登入方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先回憶一下我們平常的註冊登入方式</h2>\n<p>不管是手機 application 或是網站，只要是需要登入操作的，勢必都會提供一個頁面讓你註冊帳號與密碼，接著你才能拿著這組帳密登入進行使用。這是我們習以為常的使用方式，但隨之而來的問題大家也是見怪不怪：</p>\n<ul>\n<li>每個網站都要想一組新密碼，若用太固定的 pattern 又容易被猜到。</li>\n<li>太複雜的密碼容易忘記。</li>\n<li>自己要防範釣魚網站。</li>\n<li>需要擔心該網站被入侵，密碼遭偷竊。</li>\n</ul>\n<p>而大約有<a href=\"https://duo.com/blog/state-of-the-auth-experiences-and-perceptions-of-multi-factor-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三成左右</a>危機意識較高的使用者會啟用 2FA (2 factor authentication)，但這何嘗不是為使用上帶來更多不便？</p>\n<p>因此 WebAuthn 就是希望來解決這些問題，為我們使用者提供一個除了密碼登入以外的選項。</p>\n<h2 id=\"再來說明一下基本觀念\" style=\"position:relative;\"><a href=\"#%E5%86%8D%E4%BE%86%E8%AA%AA%E6%98%8E%E4%B8%80%E4%B8%8B%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5\" aria-label=\"再來說明一下基本觀念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再來說明一下基本觀念</h2>\n<p>聽到所謂<strong>免密碼登入</strong>，應該很容易聯想到我們透過 SSH 連進遠端 Server 時，大多也會設定免密碼登入，透過的是 <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Public-key cryptography</a> 或又稱 <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asymmetric cryptography</a>，也就是利用產生一組非對稱的加密金鑰：<code class=\"language-text\">private key</code> 與 <code class=\"language-text\">public key</code>，又可稱作 <code class=\"language-text\">credential</code>，讓使用者自己保管 private key，而服務端利用 public key 來驗證使用者的身份。</p>\n<p>WebAuthn 也是利用相同的加密原理來達成免密碼的 Authentication。</p>\n<p><img src=\"/image/oldway-vs-webauthn.png\" alt=\"How we create account\"></p>\n<h2 id=\"進入-api-細節前我們科普一下web-authentication-與-fido\" style=\"position:relative;\"><a href=\"#%E9%80%B2%E5%85%A5-api-%E7%B4%B0%E7%AF%80%E5%89%8D%E6%88%91%E5%80%91%E7%A7%91%E6%99%AE%E4%B8%80%E4%B8%8Bweb-authentication-%E8%88%87-fido\" aria-label=\"進入 api 細節前我們科普一下web authentication 與 fido permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>進入 API 細節前，我們科普一下，Web Authentication 與 FIDO</h2>\n<p>其實很多人會誤解，以為 WebAuthn 指的就是上述利用非對稱加密來達到 authentication 的技術，但實際上，真正規範這項技術的是 <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2</a>，FIDO2 是 FIDO Alliance 的最新規範，裡面包含了一系列技術，讓使用者能透過一些普通的設備，輕易的與線上服務進行 authentication，無論是 Mobile 或是 Desktop。</p>\n<p>FIDO2 規範包含了 WebAuthn 與 Client-to-Authenticator Protocol (CTAP)</p>\n<p><img src=\"/image/FIDO2-Graphic-v3.png\" alt=\"FIDO2\">\nref: <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fidoalliance.org</a></p>\n<p>也就是說，WebAuthn 其實是 FIDO2 的一部分，用來規範標準的 Web API 讓瀏覽器實作。</p>\n<p>目前支援的瀏覽器有 Chrome, Firefox, Edge 與 Safari preview 版。另外也可以再多參考 <a href=\"https://duo.com/blog/developments-to-webauthn-and-the-fido2-framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duo 的文章</a>。</p>\n<p>我們稍微解釋一下上圖：</p>\n<p>當使用者像應用程序要求註冊或登入時，使用 FIDO2 的服務端 (RP App Server) 會告知瀏覽器說，我們現在要用 FIDO Authentication，而瀏覽器則會使用 WebAuthn API，透過 CTAP protocol 來與 Authenticator 溝通，存取到需要的資訊並產生 public key 傳回給服務端。</p>\n<p>這邊出現兩個新名詞：RP app server 與 Authenticator。</p>\n<p>所謂的 RP (Relying Party)，描寫的就是負責註冊與認證使用者的組織或是服務，基本上我覺得就是你的伺服器。</p>\n<p>而 Authenticator 就是負責產生 credential 的軟硬體，例如：TouchID, YubiKey 等等。TouchID 這種存在於設備內部的，屬於 \"platform\" type，而 Yubikey 這類外部硬體設施則屬於 \"cross-platform\" type。</p>\n<h2 id=\"web-authentication-的主要特性\" style=\"position:relative;\"><a href=\"#web-authentication-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\" aria-label=\"web authentication 的主要特性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication 的主要特性：</h2>\n<ul>\n<li>強健的安全體系：Authentication 有安全性硬體作為支援，來儲存私鑰與進行 Web Authentication 需要的加密運算。</li>\n<li>效用受到作用域規範：產生的 Credential keypair 是綁定在 origin 上的，意思是說，註冊在 \"techbridge.com\" 的 keypair 是不能用在 \"bad-techbridge.com\" 的網域上頭，消除了釣魚攻擊的危險。</li>\n<li>受認證的（Attested）：上面提到負責產生 credential 的 Authenticators 可以提供 certificate 來幫助服務端驗證拿到的 public key 是由可信任的 authenticators 發出，而非有害的來源。</li>\n</ul>\n<h2 id=\"web-authentication-api---registering\" style=\"position:relative;\"><a href=\"#web-authentication-api---registering\" aria-label=\"web authentication api   registering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication API - Registering</h2>\n<p>接著我們可以開始來看看如何使用 Web Authentication API 來註冊使用者 （參考至 Duo 的 <a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.guide</a>：</p>\n<p><code class=\"language-text\">navigator.credentials.create()</code></p>\n<p>首先，Server 利用 <code class=\"language-text\">navigator.credentials.create()</code> 來產生 client 的 credential</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> credential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialCreationOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">publicKeyCredentialCreationOptions</code> 中有一堆 required 與 optional 的欄位需要填寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// should generate from server</span>\n<span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userID <span class=\"token operator\">=</span> <span class=\"token string\">'Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> Uint8Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">c</span><span class=\"token operator\">=></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> publicKeyCredentialCreationOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    challenge<span class=\"token punctuation\">,</span>\n    rp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tech Bridge\"</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">\"techbridge.inc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"arvin@techbridge.cc\"</span><span class=\"token punctuation\">,</span>\n        displayName<span class=\"token operator\">:</span> <span class=\"token string\">\"Arvin\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pubKeyCredParams<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>alg<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"public-key\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    authenticatorSelection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        authenticatorAttachment<span class=\"token operator\">:</span> <span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n    attestation<span class=\"token operator\">:</span> <span class=\"token string\">\"direct\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">challenge</code>：challenge 是由 server 產生的一個 buffer，裡面含有一串隨機加密過的 bytes，用來防止 <a href=\"https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"replay attacks\"</a>。這邊單純 demo，用 <code class=\"language-text\">Unit8Array</code> 與 <code class=\"language-text\">window.crypto.getRandomValues</code> 做個示範。</p>\n<p><code class=\"language-text\">rp</code>：先前解釋過，代表 \"relying party\"，指的就是註冊與認證使用者的網站。其中，<code class=\"language-text\">id</code> 一定要是目前網站的 domain 的 subset，像是如果是從 <code class=\"language-text\">techbridge.cc</code> 觸發 WebAuthn 認證，那這邊的 id 就得填寫 <code class=\"language-text\">techbridge.cc</code>。</p>\n<p><code class=\"language-text\">user</code>：就是目前想要註冊的使用者的資訊，這邊的 <code class=\"language-text\">id</code> 很重要，authenticator 會用這個 id 來與 credential 做連結，這樣之後才能透過一樣的 <code class=\"language-text\">id</code> 與一樣的 autenticator 去認證你是同個 user。而這資訊可能會被存在 authenticator 中，依據不同載具與實作會有不同，但是因為有這可能性存在，所以一般不建議 id 內藏有可以認出你本身的相關個人資訊，像是生日等等的。</p>\n<p><code class=\"language-text\">pubKeyCredParams</code>：這個 array 用來描述 Server 支援哪些 types 的 public key (signing algorithms) 。目前 FIDO2 servers 授權支援 RS1、RS256 與 ES256。 <code class=\"language-text\">alg</code> 的數字對應可以從 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">COSE</a> 去找。</p>\n<p><code class=\"language-text\">authenticatorSelection (optional)</code>：可以用來限制 Relying parties 支援的 authenticators 種類，像這邊我指定 platform，就是 Touch ID 之類內建的 authenticators。</p>\n<p><code class=\"language-text\">timeout (optional)</code>：以 milliseconds 為單位，表示說如果使用者在這段 timeout 時間內沒有回應 prompt 的話，就會回傳認證失敗。</p>\n<p><code class=\"language-text\">attestation (optional)</code>：attestation data 是從 authenticator 回傳的內容，server 可以用這個選項來決定要跟 authenticators 拿多少資訊，有三種選項：<em>none</em>、<em>indirect</em> 與 <em>direct</em>。<em>none</em> 指的是 server 不在意 attestation 資料；indirect 表示願意只拿匿名的 attestation 資料；而 direct 代表要求 authenticator 回傳所有 attestation data。</p>\n<h2 id=\"看了一些程式碼來嘗試一下吧\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E4%BA%86%E4%B8%80%E4%BA%9B%E7%A8%8B%E5%BC%8F%E7%A2%BC%E4%BE%86%E5%98%97%E8%A9%A6%E4%B8%80%E4%B8%8B%E5%90%A7\" aria-label=\"看了一些程式碼來嘗試一下吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看了一些程式碼，來嘗試一下吧</h2>\n<p>現在打開瀏覽器的 console，把上面那段 code 複製上去，然後你會發現什麼事都沒發生？！</p>\n<p>因為上面那段 code 當中，我們在 <code class=\"language-text\">rp</code> 中的 id 有指定 <code class=\"language-text\">techbridge.inc</code>，而這並非你目前所在的 domain，因此無法啟用 WebAuthn。</p>\n<p>修改一下，將 <code class=\"language-text\">rp</code> 中的 <code class=\"language-text\">id</code> 移除，再試一次：</p>\n<p><img src=\"/image/webauthn-makecredential.gif\" alt=\"demo - make credentail\"></p>\n<p>就可以 credentials 了！</p>\n<p>另外，因為我們在 <code class=\"language-text\">authenticatorSelection.authenticatorAttachment</code> 中有指定 <code class=\"language-text\">platform</code>，所以當我們一請求 credential 後，Chrome 會直接跳出 prompt 要求使用 TouchID（上面出現 codepen.io 是因為我在 codepen.io 的頁面 console 測試：</p>\n<p><img src=\"/image/touchid-authenticator.png\" alt=\"TouchID authenticator\"></p>\n<p>但如果今天你沒有指定，或是指定為 <code class=\"language-text\">cross-platform</code>，則會顯示如下兩種 prompt：</p>\n<p><strong>cross-platform</strong>：</p>\n<p>會要求你插入實體 usb key。</p>\n<p><img src=\"/image/webauthn-cross-platform.png\" alt=\"cross platform\"></p>\n<p>不指定：</p>\n<p>你有兩種選項可以選擇，使用 TouchID 或是實體 usb key。</p>\n<p><img src=\"/image/webauthn-both.png\" alt=\"two options\"></p>\n<h2 id=\"parsing-與-validating-註冊資料\" style=\"position:relative;\"><a href=\"#parsing-%E8%88%87-validating-%E8%A8%BB%E5%86%8A%E8%B3%87%E6%96%99\" aria-label=\"parsing 與 validating 註冊資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing 與 Validating 註冊資料</h2>\n<p>從剛剛的範例可以看到，呼叫 <code class=\"language-text\">navigator.credentials.create</code> 後會回傳一個 credential 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPublicKeyCredential <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...'</span><span class=\"token punctuation\">,</span>\n    rawId<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> AuthenticatorAttestationResponse <span class=\"token punctuation\">{</span>\n        clientDataJSON<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        attestationObject<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">306</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中：</p>\n<p><code class=\"language-text\">id</code>：代表產生的 credential，在對 user 進行 authentication 時，用此 id 來 identify user credential，是 base64-encoded string。</p>\n<p><code class=\"language-text\">rawId</code>：同上，只是是 binary form。</p>\n<p><code class=\"language-text\">response.clientDataJSON</code>：是瀏覽器產生的一組資料，包含 origin、challenge 等等，這個資料重要在於可以用來防止 phishing attemp。此外，內容是由 authenticator 加密過的。</p>\n<p><code class=\"language-text\">response.attestationObject</code>：包含了 credential public key、optional attestation certificate 與其他 metadata，用 <a href=\"https://cbor.io/impls.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CBOR</a> encoded 過的 binary data。</p>\n<p>拿到 PublicKeyCredential 後，就可以送到 Server 端去進行驗證與後續動作。</p>\n<p>WebAuthn 規範中有描述了一系列<a href=\"https://w3c.github.io/webauthn/#registering-a-new-credential\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">驗證 registration data 的程序</a>，而實作部分則與你用什麼語言有所不同，可以參考 Duo Labs 的 <a href=\"https://github.com/duo-labs/webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go</a> 與 <a href=\"https://github.com/duo-labs/py_webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a> 版本。</p>\n<p>這邊以 JavaScript 為例說明：</p>\n<p>首先，Server 端需要先解析 clientDataJSON：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// decode the clientDataJSON into a utf-8 string</span>\n<span class=\"token keyword\">const</span> utf8Decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decodedClientData <span class=\"token operator\">=</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>\n    credential<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>clientDataJSON<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// parse the string as an object</span>\n<span class=\"token keyword\">const</span> clientDataObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>decodedClientData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clientDataObj</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    challenge<span class=\"token operator\">:</span> <span class=\"token string\">\"ZVTQWf9y7JkEjKFH-iWiKL4FTtTrQJwhYt2kiJQlcM8\"</span>\n    origin<span class=\"token operator\">:</span> <span class=\"token string\">\"https://codepen.io\"</span> <span class=\"token comment\">// again, 因為我在 codepen.io 的頁面 console 測試，所以 origin 才會是這個</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"webauthn.create\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊我們拿出 challenge、origin 與 type 來驗證，challenge 應該要與當初 Server 產生的一致、origin 要正確，且 type 要確定為 create，才能代表是在註冊使用者。如此來避免釣魚與 replay attacks。</p>\n<p>接著，處理 attestationObject，由於是由 CBOR encode，所以需要額外找 lib 來 decode：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 需要找個 CBOR lib 來 decode</span>\n<span class=\"token keyword\">const</span> decodedAttestationObj <span class=\"token operator\">=</span> <span class=\"token constant\">CBOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>attestationObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decodedAttestationObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n    authData<span class=\"token operator\">:</span> <span class=\"token function\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fmt<span class=\"token operator\">:</span> <span class=\"token string\">\"fido-u2f\"</span><span class=\"token punctuation\">,</span>\n    attStmt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        sig<span class=\"token operator\">:</span> <span class=\"token function\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        x5c<span class=\"token operator\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解碼出來後的 <code class=\"language-text\">attestationObject</code> 含有幾項資訊：</p>\n<ul>\n<li>authData：authData 這個 byte array 包含著所有 registration event 的 metadata，以及 public key。</li>\n<li>fmt：這個是包含著 attestation 的 format，如果你在 create credentials 時有要求 Authenticators 提供 attestation data，那 server 可以從這個欄位知道該如何 parse 與 validate attestation data。</li>\n<li>attStmt：這就是要求來的 attestation data，根據 fmt 的不同會有不同的結構，以這邊範例為例，我們拿到的是一個 signature 與 x5c certificate，servers 可以用這資料來驗證 publickey 是不是來自預期的 authenticator，或是根據 authenticator 的資訊而 reject authenticate (像是覺得不能信任該 certifacate，等等)</li>\n</ul>\n<p>最後可以從 authData 中取得更多資料：credentialId、publicKeyBytes、publicKeyObject 等等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>authData<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> decodedAttestationObject<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// get the credential ID</span>\n<span class=\"token keyword\">const</span> credentialId <span class=\"token operator\">=</span> authData<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span> credentialIdLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// get the public key object</span>\n<span class=\"token keyword\">const</span> publicKeyBytes <span class=\"token operator\">=</span> authData<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span> <span class=\"token operator\">+</span> credentialIdLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the publicKeyBytes are encoded again as CBOR</span>\n<span class=\"token keyword\">const</span> publicKeyObject <span class=\"token operator\">=</span> <span class=\"token constant\">CBOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>publicKeyBytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>整個 Validation process 完成後，Server 就能將 publicKeyBytes 與 credentialId 存進資料庫，與使用者關聯起來。</p>\n<p>到這邊為止，我們走完了 <code class=\"language-text\">Registering</code> 的流程。而剛剛都是直接在 console 貼入程式碼，如果想看稍微”真實“一點的範例，可以到 <a href=\"https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html</a> 這個網址玩玩看，點選 button 註冊的流程。</p>\n<p><img src=\"/image/more-real-demo-1.png\" alt=\"more real demo\"></p>\n<p>接著，再努力一下，看看 <code class=\"language-text\">Authenticating</code>，也就是登入時要走的步驟吧！</p>\n<h2 id=\"web-authentication-api---authenticating\" style=\"position:relative;\"><a href=\"#web-authentication-api---authenticating\" aria-label=\"web authentication api   authenticating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication API - Authenticating</h2>\n<p>Authenticated 的過程中，使用者會用其持有的 private key 簽上一個 signature 到 assertion 上頭，並傳給 server，server 則利用 public key 來驗證該 signature。</p>\n<p><code class=\"language-text\">navigator.credentials.get()</code></p>\n<p>Authentication 的過程在於使用者要證明他們擁有註冊時所提交的 key pair 中的 private key。證明方法為利用 <code class=\"language-text\">navigator.credentials.get()</code> 取得註冊時的 credential，並附上 signature。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> credential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialRequestOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> publicKeyCredentialRequestOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    challenge<span class=\"token punctuation\">,</span>\n    allowCredentials<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> credentialId<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from registration</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span><span class=\"token punctuation\">,</span>\n        transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'usb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ble'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nfc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> assertion <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialRequestOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>跟註冊時比較不同的是 <code class=\"language-text\">allowCredentials</code>，這欄位是 Servers 端想要瀏覽器提供的 credentials 資訊，用來認證使用者，其中 id 為註冊時獲取的 credentialId。此外也能指定要用哪種方式傳輸 credentials (usb、bluetooth 或 NFC)。你可以填入多個 credentialId，authenticator 會找出他認識的來使用。</p>\n<p><code class=\"language-text\">navigator.credentials.get</code> 取得的 <code class=\"language-text\">assertion</code> 也是一個 <code class=\"language-text\">PublicKeyCredential</code> object，跟註冊時的差別在於，這次我們拿到的多了 signature，少了 public key。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPublicKeyCredential <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...'</span><span class=\"token punctuation\">,</span>\n    rawId<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> AuthenticatorAssertionResponse <span class=\"token punctuation\">{</span>\n        authenticatorData<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        clientDataJSON<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        userHandle<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本結構都差不多，多出來的 <code class=\"language-text\">signature</code> 是由 private key 與此 credential 所產生，在 server 端可以用 public key 來驗證此 signature。</p>\n<p><code class=\"language-text\">userHandle</code> 則是 authenticator 提供的使用者 id，也是註冊時使用的那組。在 Server 端可以用來關聯使用者。</p>\n<h2 id=\"parsing-與-validating-登入資料\" style=\"position:relative;\"><a href=\"#parsing-%E8%88%87-validating-%E7%99%BB%E5%85%A5%E8%B3%87%E6%96%99\" aria-label=\"parsing 與 validating 登入資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing 與 Validating 登入資料</h2>\n<p>拿到 assertion 後，可以送往 server 進行驗證，server 會用註冊時的 public key 來驗證 signature。</p>\n<p>一樣，Server 端實作有各種語言版本：<a href=\"https://github.com/duo-labs/webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go</a> 與 <a href=\"https://github.com/duo-labs/py_webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a>，等等。</p>\n<p>這邊簡單舉例：</p>\n<p>首先，從資料庫中取得 credential。接著利用 public key 和 client 傳來的 signature 與 authenticator data 和 SHA-256 hash 過的 cliendDataJSON 做驗證。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> storedCredential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCredentialFromDatabase</span><span class=\"token punctuation\">(</span>userHandle<span class=\"token punctuation\">,</span> credentialId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> signedData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>authenticatorDataBytes <span class=\"token operator\">+</span> hashedClientDataJSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> signatureIsValid <span class=\"token operator\">=</span> storedCredential<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> signedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signatureIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Nice! User is authenticated!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oops, verification failed.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就把一段無密碼登入的註冊與登入流程都走完了！一樣，可以到 <a href=\"https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html</a> 來玩玩看實際一點的範例。</p>\n<p><img src=\"/image/more-real-demo-2.gif\" alt=\"more real demo\"></p>\n<h2 id=\"結論與更多資源\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96%E8%88%87%E6%9B%B4%E5%A4%9A%E8%B3%87%E6%BA%90\" aria-label=\"結論與更多資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論與更多資源</h2>\n<p>今天花了點時間把 Web Authentication 的概念與大致的實作方式瞭解了一番，雖然才剛成為標準，離全部瀏覽器都支援還需要一點時間，但最新版的瀏覽器幾乎都已支援（至少桌機版），想必不久的未來，passwordless 的登入會是一種趨勢。</p>\n<p>這邊再多提供幾個網站資源供大家參考，裡面有更為豐富的範例程式，以及詳細的 API 與情境解說：</p>\n<ol>\n<li><a href=\"https://duo.com/blog/tags/web-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duo blog</a> - Duo 是 Cisco 旗下的公司，主要發展與 Authentication 與 security 相關的產品，也因此針對 web authentication 有不少的文章教學與介紹。</li>\n<li><a href=\"https://github.com/herrjemand/FIDO2WebAuthnSeries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2WebAuthnSeries</a> - 這是我在找資料過程中發現的範例 github，裡面有多種情境的 source code 與 demo，推薦大家去玩玩看，看看程式碼，想必會更加了解。作者也有在 Medium 上寫了一篇<a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長文</a>介紹，更詳細的說明各種情境的 Web authentication 應用會是如何的流程，而我們的程式碼又該如何修改。如果覺得這篇文章內的範例與說明不夠清楚，可以到他的 medium 看看。</li>\n</ol>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.guide</a></li>\n<li><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to WebAuthn API</a></li>\n<li><a href=\"https://github.com/herrjemand/FIDO2WebAuthnSeries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2WebAuthnSeries</a></li>\n<li><a href=\"https://webauthn.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.io</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Authentication API - MDN</a></li>\n</ol>","id":"e8f002a3-30f5-5fda-ba02-bdcbc3fc734d","fields":{"slug":"webauthn-intro"},"frontmatter":{"date":"2019-08-17T10:29:18.000Z","title":"一起來了解 Web Authentication","tags":["web","authentication","security"],"type":"tech","slug":"webauthn-intro"},"timeToRead":15},{"excerpt":"好歌分享：Love is the answer","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Ugm_E7vERYs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Love is the answer</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Ugm_E7vERYs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>近年 VR/AR 一直不斷出現在大家的視線內，雖然一直沒有什麼殺手級的應用出現，但這阻止不了開發者們的雄心壯志，尤其是 JavaScript 社群，畢竟 Jeff Atwood 說過：</p>\n<blockquote>\n<p>\"Any application that can be written in JavaScript, will eventually be written in JavaScript.\" — Jeff Atwood, Author, Entrepreneur, Cofounder of StackOverflow</p>\n</blockquote>\n<p>隨著 a-frame 的出現，WebVR 成為現實，並且很容易開發；Web AR 部分進展則相對緩慢ㄧ些，瀏覽器原生支援的 API 還一直處於不穩定的開發階段，但即便如此，我們還是可以在特定版本的瀏覽器上使用，此外，也有像是 AR.js 這樣融合 artoolkit、three.js、ＷebGL 和 WebRTC 等技術的工具可以使用。</p>\n<p>今天就來稍稍研究一下，看看目前的技術能如何開發 Web AR！</p>\n<p>照慣例，開始前先看點 demo，把 Pokemon 帶到你家客應：</p>\n<p><img src=\"/image/arjs-demo.jpg\" alt=\"arjs demo\"></p>\n<!--\n1. 簡介\n2. 介紹目前有的 WebAR 實作 lib 或 api\n2-1. 說明 WebXR Viewer on iOS 與 Google chrome 可以跑的 api\n3. 分別以 AR.js 與 Web 純 API 介紹\n-->\n<h2 id=\"目前的工具有哪些\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B\" aria-label=\"目前的工具有哪些 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前的工具有哪些</h2>\n<p><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a> 這網站上列出了一些目前有的 library，以及目前支援 WebAR 的瀏覽器：</p>\n<p><img src=\"/image/webar-libs.png\" alt=\"常見 lib\"></p>\n<p>其中 <a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a> 使用了 A-Frame (基於 Three.js) 以及 JSARTookit5（JavaScript 移植版的 <a href=\"https://github.com/artoolkit/artoolkit5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ARToolKit</a>），而這兩個技術主要皆是利用 WebGL 為主，因此大多現行的瀏覽器都能直接支援，不需要特殊的 API。</p>\n<p>這大概也是為何 AR.js 能在 GitHub 上擁有一萬多顆星星，遠勝過上列其他套件的原因。再加上作者的實驗證明 AR.js 即便在<a href=\"https://github.com/jeromeetienne/AR.js#performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">兩年的老舊手機上也能運行順暢，擁有良好的 Performance</a>。</p>\n<p>但 AR.js 也並非沒有缺點，由於是基於 ARToolKit，因此只能夠支援 Marker-based 的 AR 效果，也就是像最前面的 Demo 圖片一樣，是需要在鏡頭內放置一個設定好的 Marker，讓其辨識，取得環境的一些 Sensor 資訊，包含鏡頭的深淺遠近等等，才能讓 AR 物件渲染在視窗中。</p>\n<p>即便如此，AR.js 其簡潔、便利的使用方式（<a href=\"https://github.com/jeromeetienne/AR.js#folders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有 a-frame 與 threejs 的 extension</a>），能讓你用<a href=\"https://medium.com/arjs/augmented-reality-in-10-lines-of-html-4e193ea9fdbf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">短短 10 行程式碼就產生出一個 WebAR 效果的網頁</a>，還是非常好用的。</p>\n<p><img src=\"/image/webar-browsers.png\" alt=\"支援的 browsers\"></p>\n<p>如果你是使用 AR.js 的話，基本上現行有支援 WebGL 的手機瀏覽器就都能夠運行，不需要額外的 Polyfill 等等。</p>\n<p>但如果你想要使用非 Marker-based 效果的 AR 應用，你就得研究 <a href=\"https://immersive-web.github.io/webxr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">WebXR Device API</code></a>，其前身為 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAR API</a>。</p>\n<h2 id=\"webxr-device-api\" style=\"position:relative;\"><a href=\"#webxr-device-api\" aria-label=\"webxr device api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebXR Device API</h2>\n<p>WebXR Device API 現在還在不斷更新中，不是個穩定的 API。</p>\n<p>運用到 WebXR Device API 的有 Google 使用的 <a href=\"https://github.com/google-ar/three.ar.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.ar.js</a> 與整合 A-Frame 的 <a href=\"https://github.com/chenzlabs/aframe-ar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-ar.js</a>，以及 Mozilla 主導的 <a href=\"https://github.com/mozilla/aframe-xr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.xr.js</a> 和 <a href=\"https://github.com/mozilla/three.xr.js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-xr.js</a>。</p>\n<p>Google 提供了 <a href=\"https://github.com/google-ar/WebARonARCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARCore</a> 和 <a href=\"https://github.com/google-ar/WebARonARKit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARKit</a> 兩種分別在 Android 與 iOS 平台上運行的特殊 browsers，讓你能在上面跑 WebXR Device 相關的 API：而 Mozilla 在 iOS 上也推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 來對應，三者皆是用到手機平台原生的 ARKit。</p>\n<p>如同剛剛所說，WebXR Device API 還很不穩定，而且 Google 與 Mozilla 各自在 Android 與 iOS 上有不同的實作，<a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例</a>只能運行在 version 為 70 - 72 的 Chrome canary 上，而 Mozilla 雖然有推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a>，但上面的<a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例實作</a>也<strong>只能</strong>運行在 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 上頭...</p>\n<p>不過去看一下雙方的範例程式碼後，會發現其實用法蠻雷同的，大多都有下面這些流程（以 Google 的程式碼來當範例）：</p>\n<p>判斷是否支援 WebXR Device API，並初始設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n   * Fetches the XRDevice, if available.\n   */</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `navigator.xr` 是 WebXR Device API 的入口，有必要確認其存在</span>\n    <span class=\"token comment\">// 而 `XRSession` 中的 `requestHitTest` 則是要 enable #webxr-hit-test flag</span>\n    <span class=\"token comment\">// 確認這兩個 API 存在，確保能夠製造出點擊畫面</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>xr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">XRSession</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>requestHitTest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">requestDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 成功取得 XRDevice 物件後，需要 bind 一個 user gesture 的 event，然後呼叫</span>\n    <span class=\"token comment\">// `device.requestSession()`，這是規範在 spec  中的</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#enter-ar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEnterAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>取得 <code class=\"language-text\">XRDevice</code> 後，利用 <code class=\"language-text\">device.requestSession()</code> 製造出運行 XR 的環境：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">async</span> <span class=\"token function\">onEnterAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> outputCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> outputCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xrpresent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// `device.requestSession()` 一定要是由 user 觸發，像是 click handler 內</span>\n      <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">requestSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        outputContext<span class=\"token operator\">:</span> ctx<span class=\"token punctuation\">,</span>\n        environmentIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>outputCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 成功創建 Session 後就能開始運算 AR 了</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>當 XRSession 成功創建後，接著就是 set up three.js，撰寫 renderer，設定 scene、camera，並 attach 上 XRWebGLLayer，然後啟動 render loop：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">session</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">// 利用 Three.js 繪製 3D 物件，因此要借用 THREE.WebGLRenderer 來當作 XRSession 的 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    alpha<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    preserveDrawingBuffer<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">//  設定 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRWebGLLayer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> framebuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setFramebuffer</span><span class=\"token punctuation\">(</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 scene</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> DemoUtils<span class=\"token punctuation\">.</span><span class=\"token function\">createLitScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 camera</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 更多的設定</span>\n  <span class=\"token comment\">// 在 `requestAnimationFrame` 中啟動 render loop</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onXRFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>省略了很多細節，但大致的步驟就是這樣，<a href=\"https://github.com/googlecodelabs/ar-with-webxr/archive/master.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細程式碼在此下載</a></p>\n<p>對 WebXR Device API 比較有興趣的讀者除了 <a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例程式</a>與 Mozilla 的 <a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webxr-ios-js 範例</a> 外，也可以到 <a href=\"https://github.com/immersive-web/webxr/blob/master/explainer.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immersive-web/webxr</a> 看看該 WebXR Device API 的 Specs detail 與解釋，他們也有提供 <a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sample Page</a> 可作參考。</p>\n<h2 id=\"arjs\" style=\"position:relative;\"><a href=\"#arjs\" aria-label=\"arjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AR.js</h2>\n<p>由於手邊沒有適合的 Android 手機，不能嘗試利用 WebXR Device API，所以今天就先來看看 AR.js 有多簡單。</p>\n<p>你需要的就只有：</p>\n<ol>\n<li>準備好 Marker</li>\n<li>準備好 3D models</li>\n<li>撰寫十行簡單的程式碼</li>\n<li>host 你的 WebAR webapp</li>\n</ol>\n<p>AR.js 有提供一個 Marker generator - <a href=\"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js Marker Training</a></p>\n<p><img src=\"/image/arjs-maker-traning.png\" alt=\"ARjs marker training\"></p>\n<p>你可以上傳想要的圖片放到 Marker 中，例如一個記載你的 WebVR webapp 網址的 QR code 就很適合。像<a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>作者利用 AR.js 結合實體卡片送給他女友一個小驚喜。</p>\n<p>我建議把你做好的 Marker 下載下來，否則當你手機對著電腦中的 marker 時，3D Model 方位視角會跟你是垂直的，不是很好看。</p>\n<p>接著可以到 <a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a> 或是 <a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a> 下載 <code class=\"language-text\">gltf</code> 的 3D 模型。(搜尋想要的 Model 時記得勾選 <code class=\"language-text\">downloadable</code>，比較不會選到需要付費才能下載的，當然你要付費也很棒！)</p>\n<p>以我最前面的例子來說，我在 <a href=\"https://sketchfab.com/3d-models/squirtle-18caed58804943d7a839dcbd44d21b80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab 中載了一個傑尼龜的模型</a></p>\n<p><img src=\"/image/sketchfb-usage.png\" alt=\"sketchfab\"></p>\n<p>接著用 AR.js 對應 AFrame 的 extension 撰寫簡單的 WebVR app:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.9.2/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.rawgit.com/jeromeetienne/AR.js/1.7.5/aframe/build/aframe-ar.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token value css language-css\"><span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">'</span></span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">embedded</span> <span class=\"token attr-name\">arjs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>sourceType: webcam; debugUIEnabled: false;<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-marker</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>pattern<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>assets/pattern-marker.patt<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-entity</span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0 -6 -12<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-20 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">gltf-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url(assets/scene.gltf)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-entity</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-marker</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 <code class=\"language-text\">&lt;a-scene /></code> 中，我們指定一個 attribute <code class=\"language-text\">arjs</code>，並且設定 <code class=\"language-text\">sourceType</code> 為 <code class=\"language-text\">webcam</code>，相關 attribute 設定其實來自 <code class=\"language-text\">artoolkit system</code>，有需要可以到 <a href=\"https://github.com/jeromeetienne/AR.js/tree/master/aframe#artoolkit-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 的列表</a>查看。</p>\n<p>接著我們透過 <code class=\"language-text\">&lt;a-marker /></code> 放入我們製作的 marker，副檔名為 <code class=\"language-text\">.patt</code>，這邊的 type attribute，如果你是單純用 barcode 的話，可以設為 <code class=\"language-text\">type=barcode</code>，但若是客製化的 marker，就要設為 <code class=\"language-text\">type=pattern</code>。</p>\n<p>最後在 <code class=\"language-text\">&lt;a-entity /></code> 上頭設定我們想要呈現的 AR 3D Model，<code class=\"language-text\">gltf-model</code> attribute 設定模型的路徑，再透過 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 來調整你的模型出現在鏡頭的位置。</p>\n<p>這邊特別要注意一下，因為你載下來的 3D Model，都有自己的位置屬性，所以你可能會需要自己多加調整出適合的 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 值，否則你的 3D Model 很可能一直成像在你手機的鏡頭外而看不到，然後你還以為是程式出問題...</p>\n<p>當手機鏡頭偵測到 <code class=\"language-text\">&lt;a-marker /></code> 內對應的 marker 時，就會在鏡頭內渲染出 <code class=\"language-text\">&lt;a-entiy /></code>。</p>\n<p>如果只是像我一樣想要嘗試一下的話，可以簡單利用 Chrome 的 webapp - <a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Server for Chrome</a> 來 host 你的 htlm file，然後利用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngork</a> 或是 <a href=\"https://serveo.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serveo</a> 來當作你 localhost 的 proxy，讓你的手機可以方便相連。</p>\n<p>一切順利的話，你就會看到一隻傑尼龜出現在你家裡啦～</p>\n<p><img src=\"/image/another-arjs-demo.jpg\" alt=\"another arjs demo\"></p>\n<p>如果你沒有手機可以玩，想用電腦 Browser 跑的話，會需要到 <code class=\"language-text\">chrome://flags</code> 中把 <code class=\"language-text\">WebVR</code> 的選項開啟，然後用 inpsecter 將 Browser 調整成手機模式。</p>\n<p><img src=\"/image/chrome-flags.png\" alt=\"chrome flags\"></p>\n<p>並且需要加上 polyfill，因為普通的 chrome 是沒有支援 <code class=\"language-text\">navigator.xr</code> api 的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> polyfill <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebXRPolyfill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/arjs-run-mac.png\" alt=\"run on chrome\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然 WebXR Device API 還不穩定，但就是在這時候開始試用才更能給出回饋，高手們來試試吧！決定下次拿公司測試機來跟著 Code lab 上的範例改改看！\n另外，AR.js 雖然目前是 Marker-based，但從 <a href=\"https://github.com/jeromeetienne/AR.js/issues/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 上的一些討論</a> 來看，之後應該是有機會支援 Markerless 的。</p>\n<p>AR 這樣牽扯到電腦視覺、硬體、演算法、Sensor 等複雜運算的技術，要實作到 Web 上更是困難，進度慢是可以理解的，但還是衷心期盼著那一天，能夠開啟網頁就能丈量傢俱尺寸或是試穿衣物！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/immersive-web/webxr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Repository for the WebXR Device API Specification.</a></li>\n<li><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a></li>\n<li><a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a></li>\n<li><a href=\"https://medium.com/chialab-open-source/ar-js-the-simpliest-way-to-get-cross-browser-ar-on-the-web-8f670dd45462\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js — The Simplest Way to get Cross-Browser Augmented Reality on the Web</a></li>\n<li><a href=\"https://blog.halolabs.io/building-ar-vr-with-javascript-and-html-97af4434bcf6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building AR/VR with Javascript and HTML</a></li>\n<li><a href=\"https://medium.com/agora-io/web-vs-app-ar-edition-d9aafe988ba2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web vs App (AR edition)</a></li>\n<li><a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a></li>\n<li><a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a></li>\n<li><a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用ar-js做一個讓另對方-喔喔喔喔-的小卡片吧</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google code lab - WebXR</a></li>\n<li><a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebXR Sample page</a></li>\n</ol>\n<p>關於作者：\n<a href=\"http://blog.arvinh.info/about/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>","id":"a776efbf-720d-5861-94eb-4b4becb96984","fields":{"slug":"web-ar"},"frontmatter":{"date":"2019-07-16T17:40:44.000Z","title":"淺嚐 Web AR","tags":["web","ar","javascript"],"type":"tech","slug":"web-ar"},"timeToRead":12},{"excerpt":"If you don't want to start over, don't give up","html":"<blockquote>\n<p>If you don't want to start over, don't give up</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年的 Google I/O 2019 中，<a href=\"https://twitter.com/dassurma\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Surma</a>, <a href=\"https://twitter.com/jaffathecake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Jake</a> 與 <a href=\"https://twitter.com/kosamari\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mariko</a> 推出了一款能在低階的 feature phone 上運作順暢的 <a href=\"https://github.com/GoogleChromeLabs/proxx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web app - PROXX</a>，其中利用到了 Web worker 來分擔許多 Browser main thread 中的工作，讓畫面渲染可以更順暢，也因此讓我注意到去年在 Chrome dev summit 2018 中的一支影片 - <a href=\"https://www.youtube.com/watch?v=Vg60lf92EkM&#x26;list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&#x26;index=17&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Architecting Web Apps - Lights, Camera, Action!</a>，讓我眼睛為之一亮，裡面講到他們利用 Actor Model 來將關注點分離，不同的 Actors 各自負責不同的工作，彼此之間用共通的介面溝通，如此一來，除了將複雜的運算邏輯放入 Web worker 外，由於架構上的特性，理論上也能很方便的抽換 View 的實作方式，像是一套 web app，可以在不重寫所有邏輯的情況下，從 Vue 實作 view，轉換到以 React 實作。</p>\n<p>聽起來非常合理，而有趣的是，這個 Actor Model 其實早在 46 年前就被提出，也有應用在 Web 領域上過，像是用 Scala 撰寫 的 Akka，或是在電信通訊上有名的 Erlang，但是在前端上似乎是第一次被提出來。</p>\n<p>今天透過這篇文章來了解一下這個 46 年前就存在的觀念是什麼，而又能如何與 Web 前端整合呢！</p>\n<h2 id=\"actor-model-介紹\" style=\"position:relative;\"><a href=\"#actor-model-%E4%BB%8B%E7%B4%B9\" aria-label=\"actor model 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actor Model 介紹</h2>\n<p>Actor Model 是一個關於 concurrent computation 的 conceptual model，在 1973 年最早被提出時，只是一個概念模型，用來抽象化並行處理程序的複雜程式，直到 1985 才被延伸出一個完整的 Actor model theory，有興趣可以到 <a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a> 查看。</p>\n<p>而為什麼會需要提出 Actor Model 來處理 concurrent issue 呢？</p>\n<p>歷史上的前因後果在這個影片中的前半段解釋得蠻清楚的 <a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></p>\n<p>大體上是說，由於 CPU 的製程是有其極限存在，已經無法保證 Moore's Law 會持續下去，取而代之的是用多核心來提高處理器內的電晶體數量，透過多核心的並行處理來提高運算速度，而平行處理對於撰寫程式的我們來說，就是很複雜的一個存在，因為我們有 Shared mutable state，造成 race condition、dead lock 等等的 issue 需要避免，而 Actor Model 就是因應而生的解決方案之一。</p>\n<p>Actor Model 主要有幾個特點：</p>\n<ul>\n<li>輕量物件: Actor 是系統內的一個基礎單位，每個 Actor 只負責自己的工作，所以可以很輕量。</li>\n<li>沒有 shared state：每個 Actor 各自管理自己的 state，跑在各自的 thread 上，不共享 memory 與 state。</li>\n<li>透過 message 溝通：每個 Actor 會有一個 message queue，或稱作 mailbox，接收到的訊息會在此排隊等著依序執行。</li>\n</ul>\n<p>一個 Actor 的架構略如下圖：</p>\n<p><img src=\"/image/actor-model.png\" alt=\"Actor Model\"></p>\n<p>每個 Actor 都有自己的 private state，別的 Actor 沒辦法直接更動你的 state，降低了因為 shared state 產生的問題。</p>\n<p>我們拉遠一點來看，Actor 運行在不同的 Thread 中，彼此之間透過 Message 來溝通，收到訊息後各自決定要採取什麼樣的對應動作，而更改的都只會是自己的 private state，沒有 share memory，彼此之間是互相獨立的。</p>\n<p><img src=\"/image/actor-model-system.png\" alt=\"Actor Model system\"></p>\n<p>而在操作上，每個 Actor 只被允許做下面三種 operation：</p>\n<ol>\n<li>創建另一個 Actor</li>\n<li>傳送 Message</li>\n<li>指示該如何處理下一個 Message</li>\n</ol>\n<p>前面兩種很好理解，但第三個就蠻有趣的了，舉例來說，假設有個 Counter Actor A，一直以來都是會把接受到的 Message 數字累加到自己的 counter state 中，但今天可以有另一個 Actor B 傳遞訊息跟 Actor A 說：『hey, 你這次先不用累加數字了，但是下一個傳進來的訊息，你要乘以 2 以後再放到計數器內喔』。</p>\n<p><img src=\"/image/actor-model-counter.png\" alt=\"Counter example\"></p>\n<p>這個三個特性合再一起時，有個很大的好處：容錯系統。</p>\n<p>一個 Actor 對於他創建的 Actor 可以擁有 supervisor 的權限，可以告訴其管控的 Actor 說：『如果你 crash 了，至少死前丟給我個訊息跟我說』，然後當 Supervisor Actor 收到 Actor 死亡訊息時，可以再傳送 \"restart\" Message 去重啟 Actor，這樣的能力造就了一個 Self-healing systems：</p>\n<p><img src=\"/image/actor-model-fault-tolerance.png\" alt=\"Fault Tolerance System\"></p>\n<p>看到這邊會發現，雖然 Actor model 是因為 concurrent computation 而提出的，但其特性用在<strong>分散式系統</strong>上也是非常合適的，每個 Actor 跑在不同的 thread 上，當然也可以是不同的遠端環境上，並透過統一個 Message 介面溝通。</p>\n<h2 id=\"運用到-web-前端上\" style=\"position:relative;\"><a href=\"#%E9%81%8B%E7%94%A8%E5%88%B0-web-%E5%89%8D%E7%AB%AF%E4%B8%8A\" aria-label=\"運用到 web 前端上 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>運用到 Web 前端上</h2>\n<p>在瀏覽器的世界中，也是存在有多種 Process 與 Context（推薦閱讀 @Mariko 的這篇<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">瀏覽器深入淺出介紹</a>)，像是負責渲染的 UI Process，而在 DOM 外的 web worker 則是另一個獨立的 Worker Process，就想是一個縮小版的分散式系統，Worker Process 沒辦法直接存取 UI Process 所控制的 DOM 元件，相對的 UI Process 也無法直接呼叫 Worker Process 中所存在的函式。</p>\n<p>照著這樣的邏輯梳理下來，Web 前端真的是蠻適合套用 Actor Model 的，就像我們有個 UI Actor 運行在 UI Process，同時負責控制狀態的 State Actor 運行在 Worker Process，彼此之間透過 Message 來溝通。</p>\n<p>透過 Actor Model 來切割 UI 與 State 的關係，只要處理得當，理論上我們能夠讓一套相同商業邏輯的 Web app，輕易地從普通的 Web 轉換成 3D 版本，或是 Web VR 版本。</p>\n<p>更棒的是，將關注點分離成各種 Actor 後，code splitting 變得更自然更容易了，每個 Actor 都能夠在需要的時候再載入即可。</p>\n<h2 id=\"web-應用的範例\" style=\"position:relative;\"><a href=\"#web-%E6%87%89%E7%94%A8%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"web 應用的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web 應用的範例</h2>\n<p>說了這麼多，來看點實際的例子！</p>\n<p>既然這個概念是 Google engineer 在他們的開發大會展示的，勢必有 Demo code 可以看，這套叫做 <a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a> 的 repository 包含了 <a href=\"https://github.com/PolymerLabs/actor-helpers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-helper</a> 來幫忙 cover 了 Actor Model 與 Messaging system 的實作細節，讓我們能輕易的體驗 Actor Model 運用在 Web Frontend 的感覺。</p>\n<p>我們做個簡單的基礎代謝率(BMR)計算器來感受一下。</p>\n<p>先看一下成果：</p>\n<p><img src=\"/image/actor-bmr-demo.gif\" alt=\"bmr calculator - actor model\"></p>\n<p>UI 上就是簡單幾個 input 欄位而已，按下按鈕後，取出使用者輸入的值進行計算，最後顯示結果。這段流程我們可以拆分成兩個 Actor 來完成，分別是控制 UI 的 <strong>UI Actor</strong> 與更動 State 的 <strong>State Actor</strong>。（仔細看上方的 gif 的話，可以看到 State Actor 其實是運行在 Worker process 上的。</p>\n<p>接著我們先來看看 UI Actor 長什麼樣子，關鍵的程式碼在下面這幾行（順帶一提，因為 action-boilerplate 本身就是以 TypeScript 實作，因此接下來範例也是 TypeScript）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UiActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> state <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> resultEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSpanElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">getInputVal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// gender</span>\n    <span class=\"token keyword\">const</span> genderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSelectElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> genderVal <span class=\"token operator\">=</span> genderEl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// height, weight, age 依此類推...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      gender<span class=\"token operator\">:</span> genderVal<span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> heightVal<span class=\"token punctuation\">,</span>\n      weight<span class=\"token operator\">:</span> weightVal<span class=\"token punctuation\">,</span>\n      age<span class=\"token operator\">:</span> ageVal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> calculateButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Calculate\"</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n    calculateButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> StateMessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultEl<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先從 <code class=\"language-text\">actor-helpers</code> 中取出 Actor 物件來繼承，實作兩個主要函式：<code class=\"language-text\">init()</code> 與 <code class=\"language-text\">onMessage()</code>：</p>\n<ul>\n<li>init()：\n負責在初始時與 DOM 元件建立關係，綁定 event handler，當事件觸發時傳遞訊息給 State Actor。</li>\n<li>onMessage():\n就像是接收 <code class=\"language-text\">postMessage</code> 傳送的訊息一般，<code class=\"language-text\">actor-helpers</code> 幫我們串接好訊息溝通這段，在這 <code class=\"language-text\">onMessage()</code> 中，可以接收到其他 Actor 傳送過來的訊息。</li>\n</ul>\n<p>在 <code class=\"language-text\">init()</code> 中的 <code class=\"language-text\">this.state</code> 是什麼呢？為什麼他可以 send message？</p>\n<p>那是我們利用 <code class=\"language-text\">actor-helpers</code> 提供的 <code class=\"language-text\">lookup</code> 函式，將 State Actor 綁定到創建的私有變數上，這樣就能使用 <code class=\"language-text\">send</code> 來傳送訊息。</p>\n<p>接著我們來看看 State Actor：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lots of Type definitions...</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StateActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> ui <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          weight<span class=\"token punctuation\">,</span>\n          height<span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">,</span>\n          gender\n        <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> BMRParams <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Do the math</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> bmr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">RESET</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      state<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跟 UI Actor 大同小異，繼承 <code class=\"language-text\">Actor</code> 並利用 <code class=\"language-text\">lookup</code> 綁定 UI Actor 到私有變數上，在 <code class=\"language-text\">onMessage()</code> 中，根據接收到的 Message Type 來執行對應動作，並更改自身的 state，再將 Result Message 傳回給 UI Actor。</p>\n<p>透過 <code class=\"language-text\">action-helps</code>，實作 Actor 變得方便許多（當然也是因為這是很簡單的例子...）。</p>\n<p>不過還沒結束，Actor 都有了以後，我們要怎麼使用呢？</p>\n<p>我們要準備兩個特殊的檔案，<code class=\"language-text\">bootstrap.ts</code> 與 <code class=\"language-text\">worker.ts</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup<span class=\"token punctuation\">,</span> initializeQueues <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> UiActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/ui.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">initializeQueues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UiActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// This is necessary in Safari to keep the worker alive.</span>\n  <span class=\"token comment\">// 相關討論可以看 repo 內的 issue https://github.com/PolymerLabs/actor-boilerplate/issues/13</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>顧名思義，<code class=\"language-text\">bootstrap.ts</code> 負責啟動整個專案，透過 <code class=\"language-text\">hookup</code> 載入 UI Actor，並且 new 出一個 worker 來運行我們的 State Actor。</p>\n<p><code class=\"language-text\">initializeQueues</code> 主要是在程式執行前，清空目前瀏覽器的 Message queue，該函式的程式碼也就一行 <code class=\"language-text\">await messageStore.popMessages(\"*\");</code>。</p>\n<p>而 <code class=\"language-text\">worker.ts</code> 的內容更簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> StateActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/state.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StateActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就是 <code class=\"language-text\">hookup</code> State Actor！</p>\n<p>最後在你的 html 上加入 <code class=\"language-text\">bootstrap.ts</code> 即可，這樣我們就完成了一個以 Actor Model 為基礎架構的 Web app！</p>\n<p><a href=\"https://github.com/ArvinH/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整程式瑪可從此參考</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Actor Model 雖然有了 <code class=\"language-text\">actor-helps</code> 的幫忙，實作上來說已經簡易很多，但任何操作都要透過 Message 的實作方式在前端應用上恐怕還是不好被接受，可能也因為如此，<code class=\"language-text\">actor-boilerplate</code> 其實在去年 Chrome dev summit 結束後似乎就沒再更新了 XD</p>\n<p>不過我個人是蠻喜歡這個想法的，之後有機會再來真的實作一個不同 View 但使用同樣 State 的 Web app 看看！</p>\n<p>另外，我也發現到，Web worker 雖存在已久，但是使用上的限制，讓一般我們在開發上很少會去考慮他，但這幾年看來，像是 AMP 等等的出現，發現 Google 似乎在推廣一個概念，就是 User experience first，Developer experience second，Developer 擅長處理複雜的事情，既然如此，我們應該專注在提供使用者最佳使用體驗上，而犧牲一點開發體驗。</p>\n<p>如果你的 Web app 有複雜運算的需求，就試試看用 Actor Model 來將複雜的邏輯丟給在 Worker process 的 Actor 處理吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://dassur.ma/things/lights-camera-action/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lights, Camera, Action!</a></li>\n<li><a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki - Actor Model</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside Browser</a></li>\n</ol>","id":"f58e6401-0c27-5e8f-a15e-5d313b471e6a","fields":{"slug":"actor-model-in-web"},"frontmatter":{"date":"2019-06-21T13:37:30.000Z","title":"46 年老技術與 Web 的新火花 - Actor Model in Web","tags":["web","web worker","google chrome","architecture"],"type":"tech","slug":"actor-model-in-web"},"timeToRead":10},{"excerpt":"『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』","html":"<blockquote>\n<p>『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>過年除舊佈新，剛好趁這個機會來複習一下已經是老觀念的 Virtual DOM。很多人在講到 React 的時候都一定會提到 Virtual DOM，而問到 Virtual DOM 的好處時，就會說到實際 DOM 的操作成本很貴，所以透過 Virtual DOM 可以降低成本。</p>\n<p>你在除夕餐桌上這樣講可能沒問題，面試只講這樣應該不太好。</p>\n<p>畢竟你最後還是會操作實體 DOM 啊，這樣說明太簡化了。</p>\n<p>Virtual DOM 的由來可以從 MVC 和 MVVM 的架構追溯起，主要都是為了解決前端頁面呈現、資料更動、使用者操作這三種狀態交互作用產生的複雜性，MVC 提供了一個解法，MVVM 提出的 View Model 有了優化的方案，還有 data 與 view 雙向綁定的方式等等，而 React 提出了另一種思路，但那不是我今天的重點，有興趣且還不知道這些名詞是什麼的讀者可以去搜尋看看，有很多文章在說明這些資訊與歷史。</p>\n<p>React 的 Virtual DOM 是因應其數據與 UI 更新繪製的特殊思路而提出的效能解決方案。</p>\n<p>React 希望在資料更新時，能夠直接重新渲染頁面，不用主動去探究是數據的哪部份發生變化，要對應去更新頁面哪一部分的 DOM。但頁面重新渲染的成本可是更高，所以才需要 Virtual DOM 作為緩衝，透過資料更新後，重新繪製 Virtual DOM，與實體 DOM 進行 Diff，最後再把差異部分 Patch 上去，這不僅修正了重新渲染的成本問題，也降低了 data 與 view 交互更新的複雜度，提高了 developer 的開發體驗。</p>\n<p>說了這麼多，其實今天就只是單純想自己手刻一個 Virtual DOM 來理解一下該怎麼實現這樣的功能，畢竟知道了概念，總覺得手刻應該不難。\n手刻 Virtual DOM 其實也沒什麼太大意義，但很多時候就是 for fun，然後做個記錄。</p>\n<p>主要參考至 <a href=\"https://twitter.com/ycmjason\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ycmjason</a> 的 <a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">talk</a> 與 <a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a>，非常推薦欣賞，講者的熱情完全掩蓋掉音訊不佳的缺點，又很清楚地介紹了 VDOM 實作。</p>\n<h2 id=\"所以virtual-dom-到底長什麼樣子\" style=\"position:relative;\"><a href=\"#%E6%89%80%E4%BB%A5virtual-dom-%E5%88%B0%E5%BA%95%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"所以virtual dom 到底長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以，Virtual DOM 到底長什麼樣子？</h2>\n<p>Virtual DOM 就只是個 javascript plain object，並且模仿 Actual DOM 的結構（但當然簡化很多）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'v-element'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>一個基本的 VDOM，我們只需要元素名稱（tagName）、元素屬性（attrs）與其 Children list（既然是虛擬 DOM，這個 plain object 裡面的屬性其實隨便你取名，只要對應得到實際 DOM 即可）。</p>\n<p>根據這個想法，我們可以模仿現存的 VDOM lib，提供一個 <code class=\"language-text\">createElement</code> 的 function：</p>\n<div class=\"gatsby-highlight\" data-language=\"jscreateelement.js\"><pre class=\"language-jscreateelement.js\"><code class=\"language-jscreateelement.js\">export default (tagName, { attrs = {}, children = [] }) =&gt; {\n  const vElement = Object.create(null);\n\n  Object.assign(vElement, {\n    tagName,\n    attrs,\n    children,\n  });\n\n  return vElement;\n};</code></pre></div>\n<blockquote>\n<p>Note: 利用 <code class=\"language-text\">Object.create(null)</code> 與 <code class=\"language-text\">Object.assign</code> 的方式產生物件，可以避免直接採用 Object literals 的方式會繼承到 object prototype 的屬性。</p>\n</blockquote>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\nconsole.log(vRootApp);</code></pre></div>\n<p>結果：</p>\n<p><img src=\"/image/vdom-createElement.png\" alt=\"vdom-createElement\"></p>\n<h2 id=\"從-virtual-dom-到-real-dom\" style=\"position:relative;\"><a href=\"#%E5%BE%9E-virtual-dom-%E5%88%B0-real-dom\" aria-label=\"從 virtual dom 到 real dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>從 Virtual DOM 到 Real DOM</h2>\n<p>有了 Virtual DOM，我們還需要一個 <code class=\"language-text\">render</code> 函數來將其繪製到頁面上。方法很簡單，我們只需要 <code class=\"language-text\">document.createElement</code>、<code class=\"language-text\">setAttribute</code> 與 <code class=\"language-text\">appendChild</code> 三個 web api 即可完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(renderElem(child));\n  }\n  return elem;\n};\nexport default renderElem;</code></pre></div>\n<p>根據 <code class=\"language-text\">tagName</code> 使用 <code class=\"language-text\">document.createElement</code> 來建立實際的 DOM 物件，並且將 <code class=\"language-text\">attrs</code> 一個一個 <code class=\"language-text\">setAttribute</code> 到實際的 DOM 元素上；最後再將 <code class=\"language-text\">children</code> 遞迴丟入 <code class=\"language-text\">renderElem</code> 函數中，將所有小孩的實際 DOM object 都建立好並 <code class=\"language-text\">appendChild</code> 到上層的實際 DOM 物件上，最後將完整的 real DOM object 回傳出去。</p>\n<p>以概念來說基本上這樣就完成了，但可以讓他在完整一點，提供 <code class=\"language-text\">textNode</code> 的支援，利用 <code class=\"language-text\">document.createTextNode</code> 來產生純 string 的元素，稍微修改 <code class=\"language-text\">render.js</code> 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(render(child));\n  }\n  return elem;\n};\nconst render = (vNode) =&gt; {\n  if (typeof vNode === &#39;string&#39;) {\n    return document.createTextNode(vNode);\n  }\n  return renderElem(vNode);\n};\nexport default render;</code></pre></div>\n<p>從 <code class=\"language-text\">render</code> 函數回傳的基本上就會是一顆完整的 Virtual DOM Tree 了，舉個例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vRootApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello VDOM'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'http://placekitten.com/200/300'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootApp <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vRootApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>結果如下，Virtual DOM 就是個 Javascript plain object，而經由 <code class=\"language-text\">render</code> 函數回傳的即是包含實際 DOM 屬性的 Real DOM：</p>\n<p><img src=\"/image/vDom-render-actualDOM.png\" alt=\"Render to real dom\"></p>\n<h3 id=\"掛到頁面上吧\" style=\"position:relative;\"><a href=\"#%E6%8E%9B%E5%88%B0%E9%A0%81%E9%9D%A2%E4%B8%8A%E5%90%A7\" aria-label=\"掛到頁面上吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>掛到頁面上吧！</h3>\n<p>透過 <code class=\"language-text\">render</code> 我們有了實體 DOM，但這樣還沒辦法在頁面上顯示，需要有個類似 <code class=\"language-text\">ReactDOM.render</code> 的方法來幫助我們實現：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmount.js\"><pre class=\"language-jsmount.js\"><code class=\"language-jsmount.js\">export default (element, targetNode) =&gt; {\n  targetNode.appendChild(element);\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\nimport render from &#39;./render&#39;;\nimport mount from &#39;./mount&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    &#39;Hello VDOM&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\n\nconst rootApp = render(vRootApp);\nmount(rootApp, document.getElementById(&#39;rootApp&#39;));</code></pre></div>\n<p>很簡單，就把我們產生的 Real DOM <code class=\"language-text\">appendChild</code> 到 targetNode 下就好。</p>\n<p>或是也能用 <code class=\"language-text\">targetNode.replaceWith(element);</code> 的方式直接取代掉 targetNode。（不過要注意一下 IE 是無法使用的喔！）</p>\n<p><img src=\"/image/mount-to-html.png\" alt=\"Mounted DOM\"></p>\n<h1 id=\"diff-virtual-dom---reconciliation\" style=\"position:relative;\"><a href=\"#diff-virtual-dom---reconciliation\" aria-label=\"diff virtual dom   reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diff Virtual DOM - Reconciliation</h1>\n<p>知道怎麼產生 Virtual DOM 並繪製到頁面上後，也是時候進入重頭戲了！</p>\n<p>如前言所說，Virtual DOM 作為我們操作 Real DOM 的一層緩衝，我們比較經過狀態變化後產生的新舊 Virtual DOM 來找出實際需要更新的 Real DOM 位置，如此一來，儘管每次都重新 Render，實際更新的 DOM 也不會是全部，可以大幅改善直接重新渲染的效能問題。</p>\n<p>而 tree diff 的演算法其實很複雜，如果用 <a href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tree Edit Distance</a> 的方式遞迴檢查每個節點，複雜度將可達到 O(n^3)，是非常驚人的數字，幾乎無法在短時間處理完，因此 React 所提出的 reconciliation 制定了一些策略，來將複雜度從 O(n^3) 降至 O(n)。<a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官方文檔其實說明得很清楚</a>。</p>\n<p>主要有兩個假設：</p>\n<ol>\n<li>只需要比較同一層的節點，同一層內的元素若擁有不同的 type，往下長出的樹就會不同。</li>\n<li>同樣 type 的元件，開發者可以使用 <code class=\"language-text\">key</code> 這個 props 來決定其子樹是否需要重新 render。</li>\n</ol>\n<p>如假設一提及，我們只比較新舊兩棵 Virtual DOM Tree 中，同個父節點下的所有子節點，若發現某個節點不存在了，那就整個子樹都會刪除不去進一步比較。</p>\n<p><img src=\"/image/vdom-level-comparison.png\" alt=\"只比同 level 的 node\"></p>\n<p>這樣做的意思就是說，如果今天發生了一些跨層級的操作，像是整顆子樹被搬移到另一個節點上，對 React 來說，會是刪掉原有的子樹，然後重新在新的位置建立一模一樣的子樹出來：</p>\n<p><img src=\"/image/vdom-cross-level-modify.png\" alt=\"刪掉原子樹，在新位置重建\"></p>\n<blockquote>\n<p>Note: 實際上 React 在這兩個假設下，還做了許多更細節的事情（component diff、element diff），可以先去參考這篇很久之前的<a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，再去閱讀 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React fiber 的介紹</a>。</p>\n</blockquote>\n<p>基於這兩個假設我們可以開始實作簡單版的 Virtual DOM Diffing 演算法，基本上有四個 cases 處理：</p>\n<ol>\n<li>newTreeRoot 為 undefined，也就是某個節點被刪除了。</li>\n<li>兩個 Node 都是純字串。</li>\n<li>一個 Node 為純字串，一個 Node 為 Virtual Element。</li>\n<li>新舊 TreeRoot 的 TagName 不同。</li>\n</ol>\n<p>根據這四種 cases 我們個別處理，並且回傳一個 <code class=\"language-text\">patch</code> 函數，供之後來將 diff 完的結果 attach 到 Real DOM 上 （Note: r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  // 假設 oldVTreeRoot 一定都存在，只有 newVTreeRoot 有機會被刪除，也就是 undefined\n  if (newVTreeRoot === undefined) {\n    // 回傳 patch 函數，會接收 Real DOM，這邊 r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM\n    return rNode =&gt; {\n      // 因為新的 Virtual DOM Tree 是空的，所以回傳的 Patch 函式就是直接把 Real DOM 刪除。\n      rNode.remove();\n      return undefined;\n    }\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // 這邊包含兩種 cases：\n      // Case 1：新舊 Virtual DOM Tree 其中一個為 string，一個為 Virtual Node，所以當然會 !==\n      // Case 2：是兩者都為 string，但 !==\n      // 我們直接根據新的 Virtual Tree render 新的 Real Tree，並 replace 掉原本的 Real Tree\n      return rNode =&gt; {\n          // 回傳 patch 函數\n          const rNewNode = render(newVTreeRoot);\n          rNode.replaceWith(rNewNode);\n          return rNewNode;\n       };\n    } else {\n      // 若都為 string 且值相同，那就不用改。\n      return rNode =&gt; rNode; // 回傳 patch 函數\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n    // 根據優化 Tree diffing 演算法的假設一，只要 tagName 不同，我們就直接重新 render。\n    return rNode =&gt; {\n      // 回傳 patch 函數\n      const rNewNode = render(newVTreeRoot);\n      rNode.replaceWith(rNewNode);\n      return rNewNode;\n    };\n  }\n  // ...\n};\nexport default diff;</code></pre></div>\n<p>聰明的你看到這邊就會發問了：tag name 相同的 case 沒有處理到啊？</p>\n<p>沒錯，如果新舊兩棵 Virtual Tree 的 tag name 都一樣，那我們還得比 attributes，而要比較兩個節點的所有 attributes，不如直接 replace 上新的就好。但要注意，因為 attributes 很多，所以會產生多個 patch 函數需要被 apply 到 Real DOM 上，我們額外用一個陣列暫存，最後回傳一個 wrapper patch 函數，把所有暫存的 patch 函數都 apply 到傳進來的 Real DOM ：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffattrs.js\"><pre class=\"language-jsdiffattrs.js\"><code class=\"language-jsdiffattrs.js\">const diffAttrs = (oldAttrs, newAttrs) =&gt; {\n  // 因為 attributes 很多，需要一個 array 來存所有需要的 patch 函數\n  const patches = [];\n  // 放上新的 attributes\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push(rNode =&gt; {\n      // 暫存 patch 函數\n      rNode.setAttribute(k, v);\n      return rNode;\n    });\n  }\n  // 移除舊的 attributes\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push(rNode =&gt; {\n        // 暫存 patch 函數\n        rNode.removeAttribute(k);\n        return rNode;\n      });\n    }\n  }\n  // 最後傳出去的外層 patch 函數\n  return rNode =&gt; {\n    for (const patch of patches) {\n      // 把每個暫存的 patch 函數都 apply 到 Real DOM 上\n      patch(rNode);\n    }\n    return rNode;\n  };\n};\nexport default diffAttrs;</code></pre></div>\n<p>處理完 attributes 後，我們還得考慮 children，diff children 的方式其實跟 diff 整棵樹一樣，但我們要考慮到子樹的長度：</p>\n<ol>\n<li><code class=\"language-text\">oldVChildren.length === newVChildren.length</code>，那就直接 <code class=\"language-text\">diff(oldVChildren[i], newVchildren[i])</code>，i 從 0 到 <code class=\"language-text\">oldVChildren.length</code>。</li>\n<li><code class=\"language-text\">oldVChildren.length > newVChildren.length</code>，跟 case 1 其實一樣，因為新子樹比較少，就代表有 Node 被刪除，在我們原本的 diff 函式中有處理了。</li>\n<li><code class=\"language-text\">oldVChildren.length &lt; newVChildren.length</code>，新子樹比較長，那就先把舊子樹的所有點先 update 好，再把剩餘的新子樹 patch 上去。</li>\n</ol>\n<p>從上述三個 cases 來看，我們橫豎都需要 loop oldVChildren 一次，最後若有多餘的 newVChildren 再想辦法 update 上去。另外，這邊一樣需要暫存多個 patch 函數，實作細節我註解在 code 裡比較清楚，最後回傳的 patch 函數比較特別：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffchildren.js\"><pre class=\"language-jsdiffchildren.js\"><code class=\"language-jsdiffchildren.js\">const diffChildren = (oldVChildren, newVChildren) =&gt; {\n  // 無論如何都 loop 過 oldVChildren 一次，把所有 diff 回傳的 patch 函數暫存在 childrenPatches 內\n  // 這是一定會 apply 到 old tree 的部分。\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) =&gt; {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n  // 接著我們看看 `newVChildren` 是否有多餘的子樹需要處理\n  // 若有，我們產生的 patch 函數就是單純 `render` 出 Real Node 並且\n  // appendChild 到 patch 傳進的 Real Node 上（實際要被 patch 的 parent 節點）\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push(rNode =&gt; {\n      rNode.appendChild(render(additionalVChild));\n      return rNode;\n    });\n  }\n  return rParent =&gt; {\n    // 由於這是 children 的 patch，吃進來的會是 parent 的 Real DOM\n    // 我們要抓出 `rParent.childNodes` 來針對 old tree 做 patch\n    // zip 函數其實就是 lodash 的 zip，成對將 childPatches, rParent.childNodes 的元素並排傳出，這樣比較簡潔\n    for (const [patch, rChild] of zip(childPatches, rParent.childNodes)) {\n      patch(rChild);\n    }\n    // 最後把 new tree 多餘的 patches 直接 patch 到 parent 的 Real DOM 下即可（因為我們是 appendChild）\n    for (const patch of additionalPatches) {\n      patch(rParent);\n    }\n    return rParent;\n  };\n};</code></pre></div>\n<p>最後在我們原本的 <code class=\"language-text\">diff.js</code> 中的最後面加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  if (newVTreeRoot === undefined) {\n    // ....\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // ....\n    } else {\n      // ....\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n      // ....\n  }\n  const patchAttrs = diffAttrs(oldVTreeRoot.attrs, newVTreeRoot.attrs);\n  const patchChildren = diffChildren(oldVTreeRoot.children, newVTreeRoot.children);\n\n  return rNode =&gt; {\n    patchAttrs(rNode);\n    patchChildren(rNode);\n    return rNode;\n  };\n};\nexport default diff;</code></pre></div>\n<p>完整的 diff code 可以看這邊 <a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<p>到這邊為止，Virtual DOM 算是告一段落了！</p>\n<h2 id=\"最後修改下-mainjs做點變化讓大家看製作出的-vdom-效果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BF%AE%E6%94%B9%E4%B8%8B-mainjs%E5%81%9A%E9%BB%9E%E8%AE%8A%E5%8C%96%E8%AE%93%E5%A4%A7%E5%AE%B6%E7%9C%8B%E8%A3%BD%E4%BD%9C%E5%87%BA%E7%9A%84-vdom-%E6%95%88%E6%9E%9C\" aria-label=\"最後修改下 mainjs做點變化讓大家看製作出的 vdom 效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後修改下 main.js，做點變化讓大家看製作出的 VDOM 效果</h2>\n<p>我們讓 <code class=\"language-text\">createVApp</code> 柯里化，多傳一個參數 <code class=\"language-text\">count</code> 進去改變 attributes 跟圖片尺寸，接著 <code class=\"language-text\">setInterval</code> 讓每兩秒產生一個隨機數字當作 <code class=\"language-text\">count</code> 值，用來 update 我們的節點：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">const createVApp = count =&gt; createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n    dataCount: count, // we use the count here\n  },\n  children: [\n    &#39;Hello Kitty&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: `http://placekitten.com/${count}00/${count}00`,\n      },\n    }),\n  ],\n});\n\nlet vApp = createVApp(0);\nconst rApp = render(vApp);\nlet rRootEl = mount(rApp, document.getElementById(&#39;rootApp&#39;));\nsetInterval(() =&gt; {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n  // 每次 patch 完就 assgin 回原有變數，這樣下個 interval 才會抓到更新的樹\n  rRootEl = patch(rRootEl);\n  vApp = vNewApp;\n}, 2000);</code></pre></div>\n<p>效果如下，可以看到圖片一直變動，但是我們真的只改到了需要改的節點與 attributes，並不會整個頁面重新刷新：</p>\n<p><img src=\"/image/vdom-demo.gif\" alt=\"demo\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然沒辦法跟市面上實際的 VDOM 相提並論，但是從這簡單的實作可以很清楚的知道整個概念與要解決的問題，我覺得是蠻不錯的小練習，接下來再去看 React 或是 Vue 在這方面的實作應該會比較有頭緒一些！\n最後再附上一次 codesandbox 連結讓想玩的人直接試試：<a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 源碼剖析系列 － 不可思議的 react diff</a></li>\n<li><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深度剖析：如何实现一个 Virtual DOM 算法</a></li>\n</ol>","id":"17b2e615-d357-52dc-8e0a-2cd83e9dfcbb","fields":{"slug":"vdom-from-scratch"},"frontmatter":{"date":"2019-02-04T11:19:30.000Z","title":"從頭打造一個簡單的 Virtual DOM","tags":["virtual dom","react","javascript","web"],"type":"tech","slug":"vdom-from-scratch"},"timeToRead":13}],"tagName":"web","type":"tech"}},"staticQueryHashes":["2123680655"]}