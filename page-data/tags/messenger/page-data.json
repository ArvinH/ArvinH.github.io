{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/messenger","result":{"pageContext":{"posts":[{"excerpt":"\"以為長大會有哆拉a夢，結果只有 Chat Bot ...\"","html":"<blockquote>\n<p>\"以為長大會有哆拉a夢，結果只有 Chat Bot ...\"</p>\n</blockquote>\n<!-- more -->\n<p>雖然現在還是沒有哆拉a夢，但是有進步就有機會，上回我們利用 Facebook Messenger API 製作了一個粉絲專頁的 Chat Bot，今天我們要讓他更加聰明，利用被 Facebook 收購的 Wit.ai 所提供之 API，可以很方便的讓 Chat Bot 有了 NLP 的支援，讓他/她更加聰明！</p>\n<p>實際上 Wit.ai 的介面並沒有我想像中的好用，需要很有耐心地把官網上的教學一步步做完，並且了解他所定義的名詞代表之含義，雖然寫得很詳細，但畢竟是英文，因此就記錄一下整個過程，並跟大家分享。</p>\n<!-- \n  Wit.ai 操作步驟\n-->\n<h2 id=\"step-1-註冊-witai-帳號\" style=\"position:relative;\"><a href=\"#step-1-%E8%A8%BB%E5%86%8A-witai-%E5%B8%B3%E8%99%9F\" aria-label=\"step 1 註冊 witai 帳號 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1 註冊 Wit.ai 帳號</h2>\n<p>先到 <a href=\"https://wit.ai/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wit.ai</a> 的官方網站註冊一個帳號，有 GitHub 與 Facebook 可以選擇。</p>\n<p><img src=\"/image/wit.aifp.png\" alt=\"Wit.ai\" title=\"Wit.ai\"></p>\n<h2 id=\"step-2-dashboard-設定\" style=\"position:relative;\"><a href=\"#step-2-dashboard-%E8%A8%AD%E5%AE%9A\" aria-label=\"step 2 dashboard 設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 Dashboard 設定</h2>\n<p>接著你會進到你的 Dashboard</p>\n<p><img src=\"/image/witDashboard.png\" alt=\"Dashboard\" title=\"Dashboard\"></p>\n<p>點選右上角的 + 號，進入 App 設定頁面，進行簡單的設定，基本上只要設定 名字 與 描述，語言等等之後還能修改。\n這邊要提一下，我本來想設定成 Chinese，但後來在建立機器人對話故事時，發現他的中文支援好像還不是很完善，常常判斷不出 Entity，因此這邊還是先以英文為例子，如果有高手知道怎麼解的話也歡迎告訴我！</p>\n<p><img src=\"/image/setting.png\" alt=\"Setting\" title=\"Setting\"></p>\n<h2 id=\"step-3-創建對話情境-story\" style=\"position:relative;\"><a href=\"#step-3-%E5%89%B5%E5%BB%BA%E5%B0%8D%E8%A9%B1%E6%83%85%E5%A2%83-story\" aria-label=\"step 3 創建對話情境 story permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3 創建對話情境 (Story)</h2>\n<p>繼續，設定完後就進入到編輯界面，在 Wit.ai 裡面，你的機器人與一般使用者的對話情境，都叫做 <code class=\"language-text\">Story</code>，你可以透過創建 Story 來定義出在這個情境下，你的機器人要怎麼跟使用者對話。</p>\n<p><img src=\"/image/createStory.png\" alt=\"Create Story\" title=\"Create Story\"></p>\n<p><img src=\"/image/story-1.png\" alt=\"Story\" title=\"Story\">\n整個介面就像是一個對話視窗，看起來頗親切，左邊是 User says，右邊是 Bot sends, Box executes 與 Jump。\n先簡單介紹，看完後面的例子會更清楚。</p>\n<ul>\n<li><strong>User says</strong>： 顧名思義就是定義 User 會說的話，並且你可以設定 User 的句子中，有哪些關鍵字是你需要的、哪些文字是代表什麼含意，在 Wit.ai 的世界中，這樣的東西叫做 <code class=\"language-text\">Entity</code>，後面會再度說明。</li>\n<li><strong>Bot sends</strong>： 就是機器人要回覆的句子，這邊可以帶入一些參數，像是 user 所提及的一些關鍵字，或是機器人向外呼叫 API 所得到的結果。</li>\n<li><strong>Box executes</strong>： 就是讓你定義機器人要執行的 function，真正的實作不會在這邊，這邊只是定義名稱，以及要接收的 context 與 吐回的變數名稱。</li>\n<li><strong>Jump</strong>： 則是讓你能夠在滿足設定的一些條件之下，跳回到某個 Box executes 或是 Box sends 的步驟去執行。</li>\n</ul>\n<h2 id=\"step-4-定義使用者語句\" style=\"position:relative;\"><a href=\"#step-4-%E5%AE%9A%E7%BE%A9%E4%BD%BF%E7%94%A8%E8%80%85%E8%AA%9E%E5%8F%A5\" aria-label=\"step 4 定義使用者語句 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 定義使用者語句</h2>\n<p>接下來我們先定義 User 可能會對我們的機器人說的話，像是使用者可能會跟機器人打招呼，我們就可以在對話框的 User says 輸入 Hello，並且 highlight 起來以後設定 Entity，Enity 在 Wit.ai 裡面，就是用來讓系統判斷使用者輸入句子時，哪些關鍵字是要抽取出來做處理的，你可以依照該關鍵字的特型來設定相對應的 Entity 類別。\n這邊我們就自定義一個 Entity 名稱叫做 greeting，當然 Wit.ai 也有許多內建好的 Entity，當你點選 <code class=\"language-text\">Add a new entity</code> 時，他會有提示。</p>\n<p><img src=\"/image/greeting-story.gif\" alt=\"Greeting Story\" title=\"Greeting Story\"></p>\n<p>你可能會想說，打招呼又不會只說 Hello，你這樣設定的話，我照之前方法 hardcode 寫在 server side 就好了呀，要 Wit.ai 幹麻。</p>\n<p>Wit.ai 當然沒有這麼簡單，介面上方的 Tab 是不是有個<strong>學士帽</strong>寫著 <code class=\"language-text\">Understanding</code>？ 在這個地方你有三種方式可以用來訓練你的機器人：</p>\n<ul>\n<li><strong>增加例句</strong>：</li>\n</ul>\n<p>在上方寫著 <code class=\"language-text\">Test how your bot understands a sentence</code> 的地方輸入更多的例句，並且如同前面步驟般去定義 Entity，這邊要注意的是，當你輸入完例句後，記得點選下方綠色的 Validate，讓 Wit.ai 去記住你的例句。成功的話就會看到下方 Entity 的 Values 欄位會多出你剛剛例句中所抓取到的關鍵字（以下圖例子來說就是 Hi 也被我們納進 greeting 這個 entity內了，只要之後 user 輸入 Hello 或是 Hi，都是屬於 greeting）</p>\n<p><img src=\"/image/understand-ex.gif\" alt=\"understands example\" title=\"understands example\"></p>\n<ul>\n<li><strong>增加 Entity 的 Keyword 與 Synonyms</strong>：</li>\n</ul>\n<p>你也可以點選下方的 Entity 名稱，進去手動增加關鍵字或是同義詞。\n<strong>關鍵字</strong>與<strong>同義詞</strong>的關係有點像是父子類別，這邊舉個比較易懂的例子，如下圖，我們有個 Entity 叫做 Beer，底下的 關鍵字是 啤酒 與 紅酒，當使用者喊出啤酒的時候，機器人就會知道是屬於 Beer 這個 Entity。</p>\n<p>但啤酒有很多種種類，我們可以在同義詞這邊增加：蜂蜜啤酒，這樣當使用者輸入 蜂蜜啤酒 時，機器人就會判斷目前的 Beer Entity 的 Value 為 啤酒，而非紅酒。\n相同的，我們也可以設定 葡萄酒 為 紅酒 的同義詞，讓使用者喊出 葡萄酒 時，機器人會判斷為 紅酒。</p>\n<p><strong>要注意的是，機器人記住的 Entity Value 會是以 Keyword 為主，也就是你輸入蜂蜜啤酒，但對機器人來說，偵測到的 Beer Entity，其值為 啤酒，而非蜂蜜啤酒。</strong></p>\n<p><img src=\"/image/beerexp.gif\" alt=\"understands keyword setting\" title=\"understands keyword setting\"></p>\n<ul>\n<li><strong>設定 Entity 的 Search strategy</strong>：</li>\n</ul>\n<p>最後在設定 Entity 的地方還有 Search strategy 可以選擇，意思是你希望 Wit.ai 要怎麼樣從句子中找出這個 Entity 。</p>\n<ol>\n<li>trait: 如果你想設定的 Entity 並不是由單一一個關鍵字就可以判斷，也不是靠句子中幾個關鍵字或是子句能夠辨別，而是需要整個句子來判定的話，就要設定成 trait，像是今天的例子裡面，想要問新聞，這種使用者的 <strong>意圖</strong> 就很適合設定成 trait。</li>\n</ol>\n<p>官網範例：<a href=\"https://wit.ai/docs/recipes#categorize-the-user-intent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出處</a>\n<img src=\"/image/trait.gif\" alt=\"example: trait\" title=\"example: trait\"></p>\n<ol start=\"2\">\n<li>free-text: 如果你想要擷取使用者句子中的某段文字，而該段文字並不是特定的關鍵字時，就要設定 free-text，像是 User 說：“Tell Jordan that I will be home in ten minutes”，而你想要擷取 ”I will be home in ten miutes\"，這時就可以把想要擷取的句子選取起來，設定為 free-text，要注意的是，free-text 一定要搭配 keywords 一起使用，有點像是告訴 Wit.ai 說這段話都算是 keywords，但不一定要 exactly match 才能觸發。</li>\n</ol>\n<p>官網範例：<a href=\"https://wit.ai/docs/recipes#extract-an-entity-that-is-a-substring-of-the-message\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出處</a>\n<img src=\"/image/freetext.gif\" alt=\"example: free-text\" title=\"example: free-text\"></p>\n<ol start=\"3\">\n<li>keywords: 要完全符合你預先設定的關鍵字才會觸發。</li>\n</ol>\n<p>官網範例：<a href=\"https://wit.ai/docs/recipes#categorize-the-user-intent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出處</a>\n<img src=\"/image/keyword.gif\" alt=\"example: keywords\" title=\"example: keywords\"></p>\n<!-- \n  問新聞story -> bot回應 -> branch介紹\n-->\n<h2 id=\"step-5-定義機器人回覆語句\" style=\"position:relative;\"><a href=\"#step-5-%E5%AE%9A%E7%BE%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%9B%9E%E8%A6%86%E8%AA%9E%E5%8F%A5\" aria-label=\"step 5 定義機器人回覆語句 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5 定義機器人回覆語句</h2>\n<p>介紹了這麼多瑣碎的東西後，回過頭來看看我們要怎麼設定機器人的回覆。以最前面的例子來說，當機器人收到 greeting 的 Entity 後，可以讓用相同的 entity value 回覆，並加上簡單的介紹。\n點選下方的 Bot sends，對話框就會出現機器人的部分，你可以在裡面輸入機器人的回覆語句，想要的變數可以用<code class=\"language-text\">{ }</code>包起來，這邊我們直接使用 greeting 這個 entity，這樣就能用同樣的 Entity 去回覆。</p>\n<p><img src=\"/image/botsends.gif\" alt=\"機器人回覆\" title=\"機器人回覆\"></p>\n<p>畫面右下方有個浮動的按鈕 “Press <code class=\"language-text\">~</code> to chat with your bot”，可以讓你即時測試一下。</p>\n<p><img src=\"/image/botsentResult.gif\" alt=\"機器人回覆測試\" title=\"機器人回覆測試\"></p>\n<h2 id=\"step-6-設定機器人執行動作\" style=\"position:relative;\"><a href=\"#step-6-%E8%A8%AD%E5%AE%9A%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%9F%B7%E8%A1%8C%E5%8B%95%E4%BD%9C\" aria-label=\"step 6 設定機器人執行動作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6 設定機器人執行動作</h2>\n<p>當然機器人不能只單純回話，要能夠執行動作，這邊我們創建另一個對話情境，設定讓我們的機器人幫忙找新聞！\n這邊我先設定好一個使用者語句與相關 Entity，接著先讓 Bot executes 動作，也就是讓他執行一個 Funtion，這邊只是定義 Function 名稱以及 輸出 的參數，實際的實作要等到後面撰寫程式時才需要。</p>\n<p><img src=\"/image/botexec.gif\" alt=\"機器人執行函數\" title=\"機器人執行函數\"></p>\n<p>從上圖來看，我設定了一個 <code class=\"language-text\">getNews</code> 的函式，並且設定一個<code class=\"language-text\">context</code>為 newsResult，代表這個 function 會有一個變數 <code class=\"language-text\">newsResult</code> 可以供外部與自己使用。此外，機器人會先回覆一個訊息，其中包含你的 <code class=\"language-text\">search_query</code> entity 之 value </p>\n<p>設定完一樣要進行一下測試，當你輸入使用者語句後，機器人會執行函式，並問你要執行哪個 Context，這時你就點選剛剛設定的 <code class=\"language-text\">newsResult</code> 當作回覆，教導機器人記住這個 <code class=\"language-text\">context</code></p>\n<p><img src=\"/image/botexectest.gif\" alt=\"機器人執行測試\" title=\"機器人執行測試\"></p>\n<p>若使用者沒有說他想找什麼新聞怎麼辦呢？這時候就是另用另一個 Context 來判斷了！你可以設定一些 <code class=\"language-text\">context branch</code>，透過 先前提到的 <strong>Jump</strong> ，讓機器人根據 <code class=\"language-text\">Context</code> 的不同來執行不同回覆。\n透過定義一個 <code class=\"language-text\">missNews</code> 的 Context，告訴機器人，當沒有 <code class=\"language-text\">search_query</code> 時，可以怎麼做。</p>\n<p>如下圖，你需要設定一個 <code class=\"language-text\">BookMark</code> 讓你的機器人可以 <code class=\"language-text\">Jump</code> 到那個 Context下。</p>\n<p><img src=\"/image/botJump.gif\" alt=\"Branch Context\" title=\"Branch Context\"></p>\n<p>設定完後依然需要先測試一下，訓練一下你的 Bot。在這邊你要告訴機器人目前是哪個 Context 。要注意的是，你必須要把非當下必要的 Context 移除，像是下圖中，在 User 回答 Brexits後，需要把 missNews 這個 context 點選掉，這樣 Bot 才會正常的跳回 <code class=\"language-text\">getNews</code>。</p>\n<p><img src=\"/image/botJumpTest.gif\" alt=\"Branch Context Test\" title=\"Branch Context Test\"></p>\n<h2 id=\"step-7-套用-api-與實作-function\" style=\"position:relative;\"><a href=\"#step-7-%E5%A5%97%E7%94%A8-api-%E8%88%87%E5%AF%A6%E4%BD%9C-function\" aria-label=\"step 7 套用 api 與實作 function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7 套用 API 與實作 Function</h2>\n<p>前面幾個步驟做完後，就有個基本的使用者與機器人互動情境，接下來就可以開始實作函式，並套用 API 了。\n這邊以 Node.js 為例子，你需要先到你的專案底下加入 <code class=\"language-text\">node-wit</code> 這個 package。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">\t\tnpm install --save node-wit</code></pre></div>\n<p>之後可以先測試一下，修改官方的 <code class=\"language-text\">example/quickstart.js</code>，實作出 <code class=\"language-text\">getNews</code> 函式，這邊先簡單 echo 一下就好。程式碼短短的，你需要注意的是 <code class=\"language-text\">actions</code> 這個 object，裡面定義了 Bot 要執行的動作函式，<code class=\"language-text\">send</code> 是用來讓 Bot 回話的，這一定要有，而我們自己定義的 <code class=\"language-text\">getNews</code> 就定義在下方。</p>\n<p><code class=\"language-text\">getNews</code> 裡面利用 <code class=\"language-text\">firstEntityValue</code> 從接收到的 entities 中找出你要的，這邊我們要的當然是 <code class=\"language-text\">search_query</code> 的值。接著就可以去進行需要的處理，呼叫 API 等等。</p>\n<p><strong>唯一要注意的就是這邊需要使用 Promise 回傳喔！</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>sessionId<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> quickreplies<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sending...'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getNews</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> search_query <span class=\"token operator\">=</span> <span class=\"token function\">firstEntityValue</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token string\">'search_query'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search_query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>newsResult <span class=\"token operator\">=</span> search_query <span class=\"token operator\">+</span> <span class=\"token string\">'最近很多人討論...'</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// we should call a real API here</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// To-do</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>執行 <code class=\"language-text\">node example/quickstart.js &lt;Wit.ai server-side Token></code>\n就會得到以下結果。</p>\n<p><img src=\"/image/cli.png\" alt=\"example/quickstart.js Test\" title=\"example/quickstart.js Test\"></p>\n<p>在這邊先打岔一下，我們回到 Wit.ai 的 Dashboard 看一下，會發現 Inbox 上面有個小紅點？\nWit.ai 會在這個地方紀錄 User 傳送進來的句子，並且讓你在這邊操作它，也就是說，你可以在這邊利用 User 傳入的句子來 training 你的機器人！讓他直接從使用者身上學習！我覺得很棒的一個功能！</p>\n<p><img src=\"/image/inbox.png\" alt=\"Inbox\" title=\"Inbox\"></p>\n<p>ok，鏡頭再轉回到程式碼。</p>\n<p>已經知道怎麼實作函式了，那就接著把他跟 Messenger api 結合吧！</p>\n<p>其實跟剛剛的 quickstart.js 比較不一樣的的地方在於，你必須記錄起來每一個 fb user 的 session，這樣 Wit.ai Bot 才會知道要回傳給哪個 FB user。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This will contain all user sessions.</span>\n<span class=\"token comment\">// Each session has an entry:</span>\n<span class=\"token comment\">// sessionId -> {fbid: facebookUserId, context: sessionState}</span>\n<span class=\"token keyword\">const</span> sessions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findOrCreateSession</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fbid</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sessionId<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Let's see if we already have a session for the user fbid</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>sessions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessions<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fbid <span class=\"token operator\">===</span> fbid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Yep, got it!</span>\n      sessionId <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sessionId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No session found for user fbid, let's create a new one</span>\n    sessionId <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>fbid<span class=\"token operator\">:</span> fbid<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sessionId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著我們其實就只要修改先前的 <code class=\"language-text\">quickstart.js</code> 以及 先前實作過的 messenger API 的部分code即可。\n因為我們的使用情境會讓 Bot 在接收訊息時，立刻先回傳文字，接著才會回傳查詢結果，而查詢結果則需要利用 Messenger API 傳送 <strong>GenericMessage</strong> 的結果，因此會需要兩種 return Method。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstEntityValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">entities<span class=\"token punctuation\">,</span> entity</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> entities <span class=\"token operator\">&amp;&amp;</span> entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n              Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n              entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n              entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Our bot actions</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Wit.ai 的 action 中，一定要實作的 send method，用來讓機器人說話</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  \t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>sessionId<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> quickreplies<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// find out user id</span>\n    <span class=\"token keyword\">const</span> recipientId <span class=\"token operator\">=</span> sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fbid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recipientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// 這邊需要判斷要回傳的訊息是否為查詢結果</span>\n      <span class=\"token comment\">// 若 context 中帶有 newsResult 那就是要回傳查詢結果</span>\n      <span class=\"token comment\">// 因此就要呼叫 sendNewsMessagePromise() 來回傳 GenericMessage</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// fbBotUtil.sendNewsMessagePromise 這邊是 Messenger API 的相關實作</span>\n        <span class=\"token keyword\">return</span> fbBotUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendNewsMessagePromise</span><span class=\"token punctuation\">(</span>recipientId<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n              <span class=\"token string\">'Oops! An error occurred while forwarding the response to'</span><span class=\"token punctuation\">,</span>\n              recipientId<span class=\"token punctuation\">,</span>\n              <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>\n              err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">||</span> err\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 直接回傳普通文字</span>\n          <span class=\"token keyword\">return</span> fbBotUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendTextMessagePromise</span><span class=\"token punctuation\">(</span>recipientId<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'Oops! An error occurred while forwarding the response to'</span><span class=\"token punctuation\">,</span>\n                recipientId<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>\n                err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">||</span> err\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oops! Couldn\\'t find user for session:'</span><span class=\"token punctuation\">,</span> sessionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Giving the wheel back to our bot</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 我們自定義的 getNews action</span>\n  <span class=\"token function\">getNews</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> search_query <span class=\"token operator\">=</span> <span class=\"token function\">firstEntityValue</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token string\">'search_query'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search_query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      \t<span class=\"token comment\">// 這邊是去呼叫api</span>\n      \t<span class=\"token comment\">// fetchr 是我實作的一個小函式，利用 import.io 去抓 Yahoo news 的搜尋結果。</span>\n      \t<span class=\"token comment\">// 不是這篇重點我就先略過啦~</span>\n        <span class=\"token function\">fetchr</span><span class=\"token punctuation\">(</span>search_query<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          context<span class=\"token punctuation\">.</span>newsResult <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'context newsResult'</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>missNews<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>missNews <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>實作完 Actions 的部分，記得到 router 裡面去增加 Wit.ai 的相關 Setting</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> wit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  accessToken<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Wit<span class=\"token punctuation\">.</span>ai <span class=\"token constant\">TOKEN</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  messaging_events <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> messaging_events<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      sender <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> sessionId <span class=\"token operator\">=</span> <span class=\"token function\">findOrCreateSession</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>message <span class=\"token operator\">&amp;&amp;</span> event<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        text <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Handle a text message from this sender</span>\n        wit<span class=\"token punctuation\">.</span><span class=\"token function\">runActions</span><span class=\"token punctuation\">(</span>\n          sessionId<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the user's current session</span>\n          text<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the user's message</span>\n          sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>context <span class=\"token comment\">// the user's current session state</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Our bot did everything it has to do.</span>\n          <span class=\"token comment\">// Now it's waiting for further messages to proceed.</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Waiting for next user messages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// Updating the user's current session state</span>\n          sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oops! Got an error from Wit: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">||</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面這大串 code 其實就是接收到你在 Messenger POST 出去的訊息後，呼叫定義好的 <code class=\"language-text\">wit.runActions</code>，然後就可以讓 Wit.ai 幫你分析 User 的語句，並且回覆出去。</p>\n<p>最後這邊放一下送出 我這邊用到的 fbBotUtil.sendNewsMessagePromise，也就是送出 messenger GenericMessage 的程式碼</p>\n<p><a href=\"https://gist.github.com/ArvinH/77e12ff1c4f8b0d77c2d15de36224ff5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Messenger GenericMessage API Usage</a></p>\n<h2 id=\"final-result\" style=\"position:relative;\"><a href=\"#final-result\" aria-label=\"final result permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final Result</h2>\n<p>剛剛我們設定的語句，是不是就透過 Messenger 送出來了呢～</p>\n<p><img src=\"/image/fbmessenger.gif\" alt=\"messenger with Wit.ai\" title=\"messenger with Wit.ai\"></p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>最後介紹一個方便的工具，ngrok。</p>\n<p>ngrok 可以讓你把 localhost 轉成外網可以存取的網址，也支援 https，因此我們 Debug 就方便多了，不需要每次都把程式 Deploy 到遠端機器以後才能測試，log 也能直接在本機端終端機看到！</p>\n<p>他的設定超簡單，到 <a href=\"https://ngrok.com/download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ngrok.com/download</a> 把程式下載回來，並且執行 <code class=\"language-text\">./ngrok http PORT</code></p>\n<p>會出現如下畫面，連 https 的網址都有！這樣一來，facebook要求的 https webhook 就不成問題了，當然實際上運行還是要去用 SSL 憑證啦...</p>\n<p><img src=\"/image/ngrok.png\" alt=\"ngrok\" title=\"ngrok\"></p>\n<!-- \n  介紹ngrok, 讓debug更方便\n-->","id":"4b0c261b-6605-5d20-a87c-441b4f26eaf0","fields":{"slug":"chat-bot-wit-ai"},"frontmatter":{"date":"2016-07-01T10:05:58.000Z","title":"利用 Wit.ai 讓你的 Messenger Bot 更聰明！","tags":["wit.ai","messenger","bot"],"type":"tech","slug":"chat-bot-wit-ai"},"timeToRead":13},{"excerpt":"\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\t\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"","html":"<blockquote>\n<p>\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"</p>\n</blockquote>\n<!-- more -->\n<p>最近Bot好像很夯，FB也在幾天前的F8大會上推出Messenger API，讓擁有粉絲頁的店家、企業、或是個人，能夠製作出Chat Bot來與使用者互動。事實上像是Slack、HipChat、telegram等通訊軟體都早已有類似的Bot api可以提供使用，並且在設計上跟Facebook現階段推出的 API 其實大同小異，甚至也已經有人將它整進Hubot framework中 <a href=\"https://github.com/chen-ye/hubot-fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hubot-fb</a>，連所謂的 <a href=\"https://medium.com/@tomazstolfa/the-future-of-conversational-ui-belongs-to-hybrid-interfaces-8a228de0bdb5#.b0tcmb607\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CUI - Conversational User Interface</a> 都出現了。</p>\n<p>對我來說，Chat Bot也只是另一種方式來解決使用者的問題，另一種相對新穎的媒介，找到痛點，並對症下藥這件事情是不會改變的！</p>\n<p>好，扯遠了。Facebook Messenger最大的優勢除了FB本身龐大的使用者外，還有粉絲專頁的功能可以操作，如同 Mark Zuckerberg 在F8 Keynote中提到的例子一樣，背後隱藏的商機與可能性非常大，因此還是有必要來玩一下Messenger API。這邊希望簡單記錄與並以中文說明如何產生你的第一個Messenger Bot，讓你夜深寂寞時能有人陪你聊天...</p>\n<p>值得一提的是，Facebook developer doc上面的說明算是非常清楚，需要完整文件支援的話可以移駕至此 <a href=\"https://developers.facebook.com/docs/messenger-platform/quickstart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FB messenger-platform doc</a></p>\n<h2 id=\"step-1---創建facebook-應用程式與facebook粉絲專頁\" style=\"position:relative;\"><a href=\"#step-1---%E5%89%B5%E5%BB%BAfacebook-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%88%87facebook%E7%B2%89%E7%B5%B2%E5%B0%88%E9%A0%81\" aria-label=\"step 1   創建facebook 應用程式與facebook粉絲專頁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1 - 創建Facebook 應用程式與Facebook粉絲專頁</h2>\n<p>還沒有在Facebook上面創建過應用程式的讀者，可以先連結到 <a href=\"https://developers.facebook.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.facebook.com/</a>\n進去後會看到右上角會有<strong>我的應用程式</strong>可以選擇</p>\n<p><img src=\"/image/fbdeveloper.png\" alt=\"FB developer\" title=\"FB developer\"></p>\n<p>選擇<strong>新增應用程式</strong>後，理論上會需要填寫一些基本資訊，必要填寫的有<strong>顯示名稱</strong>, <strong>聯絡電子郵件</strong> 與 <strong>網站網址</strong>\n這邊要注意一下，基本上你如果想要用Messenger API，你勢必會需要有一個server來養你的bot，若不想污染你自己目前的server環境，就創建一個新的吧！FB上的範例多數是以JS為主，當然你可以自行選用慣用的環境。</p>\n<p><img src=\"/image/fbapp-apply.png\" alt=\"FB App 申請\" title=\"FB App 申請\"></p>\n<p>接著看向左邊的Menu，在最下方地方有個Messenger，點選後會進入以下頁面</p>\n<p><img src=\"/image/messenger.png\" alt=\"Messenger 申請\" title=\"Messenger 申請\"></p>\n<p>重點有兩個地方，第一個是你必須要選擇一個粉絲專頁，在這邊選定好粉絲專頁後，後面產生的Token（權杖）會用來將你的app與粉絲專頁綁定，之後的messenger要透過此Token才能順利執行。第二個Webhooks的步驟下面會談到。</p>\n<p>創建粉絲專頁非常簡單，簡單到多放一張圖都是多餘，因此我們直接跳往下個步驟。\n<img src=\"/image/token.png\" alt=\"粉絲專頁選好後會出現Token\" title=\"Token\"></p>\n<h2 id=\"step-2---set-up-webhook\" style=\"position:relative;\"><a href=\"#step-2---set-up-webhook\" aria-label=\"step 2   set up webhook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 - Set up Webhook</h2>\n<p>當你選定好粉絲專頁後就要設定你的webhook，這邊就需要開始寫點code了！\n但先別急著動手！當你點選set up webhook後，會彈出一個視窗：</p>\n<p><img src=\"/image/webhook.png\" alt=\"Webhook setup\" title=\"Webhook setup\"></p>\n<p>這邊的url就要填寫你的server，記得要填寫適當的route，以FB的範例程式為例，如果你希望之後的bot api都走/webhook這個route當作進入點，那這邊的url可能就要填寫 <code class=\"language-text\">https://www.mybot.com/webhook/</code>\n這邊另外要注意一點，你的server必須要提供https，如果你跟筆者一樣先前沒有設定過ssl的話，推薦<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cloudflare</a>的free plan或是前陣子很紅的<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Let's encrypt</a></p>\n<p>當一切準備就緒後，把你server的route添加以下的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes.js\"><pre class=\"language-javascriptroutes.js\"><code class=\"language-javascriptroutes.js\">\t\tapp.get(&#39;/webhook/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>若你跟我一樣習慣把route分開，當然就會變成以下這樣，而webhook url 就是 <code class=\"language-text\">https://www.mybot.com/fbbot/</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">\t\troute.get(&#39;/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>這邊的<code class=\"language-text\">validation_token</code>就是上圖中的<strong>驗證權杖</strong>，基本上隨便你填寫什麼都可以。</p>\n<p>當你在server端加上route，並且把他填寫到上面的url欄位後，記得將下方的<strong>訂閱欄位</strong>的選項都打勾，不然你就沒辦法傳送訊息。接著就可以按下save，FB會emit一個get request去驗證你的webhook，成功後該區塊就會變成：</p>\n<p><img src=\"/image/webhooksuccess.png\" alt=\"Webhook successful\" title=\"Webhook successful\"></p>\n<h2 id=\"step-3---subscribe-the-app-to-the-page\" style=\"position:relative;\"><a href=\"#step-3---subscribe-the-app-to-the-page\" aria-label=\"step 3   subscribe the app to the page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3 - Subscribe the App to the Page</h2>\n<p>記得步驟一中我們有設定好粉絲專頁，並取得Token嗎？現在就需要利用該Token來讓我們的App與粉絲專頁進行綁定，只需要一行指令：\n<code class=\"language-text\">curl -ik -X POST \"https://graph.facebook.com/v2.6/me/subscribed_apps?access_token=&lt;token>\"</code></p>\n<p>如果進行到這邊都沒問題的話，就可以進入重頭戲了。</p>\n<h2 id=\"step-4---send-a-text--receive-message\" style=\"position:relative;\"><a href=\"#step-4---send-a-text--receive-message\" aria-label=\"step 4   send a text  receive message permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 - Send a text &#x26; Receive Message</h2>\n<p>Message的傳送是透過<code class=\"language-text\">POST</code>，我們再度新增一個route在你的webhook底下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>這樣你就能在server上接收到別人傳送給你的粉絲專頁的訊息。</p>\n<p>接著我們撰寫個簡單的<code class=\"language-text\">sendTextMessage Method</code>：\n(FB的範例是include request這個http client module，你可以用你自己習慣的方式)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsendtextmessage.js\"><pre class=\"language-javascriptsendtextmessage.js\"><code class=\"language-javascriptsendtextmessage.js\">var token = &quot;&lt;page_access_token&gt;&quot;;\nvar request = require(&#39;request&#39;);\n\nfunction sendTextMessage(sender, text) {\n  messageData = {\n    text:text\n  }\n  request({\n    url: &#39;https://graph.facebook.com/v2.6/me/messages&#39;,\n    qs: {access_token:token},\n    method: &#39;POST&#39;,\n    json: {\n      recipient: {id:sender},\n      message: messageData,\n    }\n  }, function(error, response, body) {\n    if (error) {\n      console.log(&#39;Error sending message: &#39;, error);\n    } else if (response.body.error) {\n      console.log(&#39;Error: &#39;, response.body.error);\n    }\n  });\n}</code></pre></div>\n<p>接著我們把這個Method放到前面的<code class=\"language-text\">POST</code>處理中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n      sendTextMessage(sender, &quot;Text received, echo: &quot;+ text.substring(0, 200));\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>接著去到粉絲專頁傳訊息看看吧！</p>\n<p><img src=\"/image/echo-robot.png\" alt=\"Echo Robot\" title=\"Echo Robot\"></p>\n<p>Yeah! you just build your first own echo robot!</p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>目前Messenger API的功能還很少，且需要許多認證才能讓你的bot正式使用，但我想之後一定會出現更簡易的設定方式，讓一般粉絲頁不用撰寫程式碼即可擁有自己的bot，否則也會有 Bot版本的 Wix 出現吧！</p>\n<p>其實Bot說穿了就是低成本、自動化去解決問題，背後的AI、NLP、ML等等才是重點！不過接下來我應該會先繼續研究Messnger API，並用Hubot adapter開發幾個slack與telegram bot玩玩！或許加上一些NLP處理～</p>","id":"35e9daa0-d17c-57af-9006-19f3f458c0a1","fields":{"slug":"super-easy-messenger-api"},"frontmatter":{"date":"2016-04-17T12:54:13.000Z","title":"超簡易 Messenger API 初探","tags":["messenger","api","facebook"],"type":"tech","slug":"super-easy-messenger-api"},"timeToRead":5}],"tagName":"messenger","type":"tech"}},"staticQueryHashes":["2123680655"]}