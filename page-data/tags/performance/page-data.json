{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/performance","result":{"pageContext":{"posts":[{"excerpt":"最近很迷 Netflix 上的 Formula 1: Drive to Survive，看各家車廠與車手為了爭奪那幾秒的速度而拼盡全力，非常熱血勵志，把這精神延伸到網頁製作上，大概就是要將網頁效能調整到極致，各種能減少 Loading 時間的技巧都得用上。","html":"<p>最近很迷 Netflix 上的 Formula 1: Drive to Survive，看各家車廠與車手為了爭奪那幾秒的速度而拼盡全力，非常熱血勵志，把這精神延伸到網頁製作上，大概就是要將網頁效能調整到極致，各種能減少 Loading 時間的技巧都得用上。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近公司有個行銷活動需要做一個簡單的 SPA，基本上只有簡單的三個頁面，完全可以利用 Gatsby 或 Nextjs 來製作靜態頁面，然後部署到 CDN 上頭，效能上來說理應足夠好了，但是我們的設計師在頁面上混用了多種的字體，尤其是日文部分，除了一般瀏覽器內建的字體外，某些元件採用額外的免費字體，例如 <a href=\"https://www.freejapanesefont.com/corporate-logo-font-download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Corporate Logo Font</a>，這代表我們需要額外去下載這些字型，但為了頁面上的幾個字，去下載一整個字型檔案（ttf, 2.6MB）實在很浪費，因此只好來研究一下如何客製化字型檔案，只載入我們需要的字。</p>\n<p>雖然這感覺是個很容易遇到的需求，但我還真的是第一次實際需要處理，感謝同事 Carlos 提供解法，透過這篇文章筆記一下，希望對他人也有點幫助。</p>\n<h3 id=\"開始前先稍稍複習一下什麼是-ttf還有什麼其他字型格式呢\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%89%8D%E5%85%88%E7%A8%8D%E7%A8%8D%E8%A4%87%E7%BF%92%E4%B8%80%E4%B8%8B%E4%BB%80%E9%BA%BC%E6%98%AF-ttf%E9%82%84%E6%9C%89%E4%BB%80%E9%BA%BC%E5%85%B6%E4%BB%96%E5%AD%97%E5%9E%8B%E6%A0%BC%E5%BC%8F%E5%91%A2\" aria-label=\"開始前先稍稍複習一下什麼是 ttf還有什麼其他字型格式呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始前先稍稍複習一下，什麼是 ttf？還有什麼其他字型格式呢？</h3>\n<p><a href=\"https://zh.wikipedia.org/zh-tw/TrueType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TTF（TrueType Font）</a>是由蘋果和微軟共同開發的一種電腦輪廓字型類型標準，是 Mac 與 Windows 上最常見的格式，基本上所有主流瀏覽器都支援，也是免費或便宜的第三方字體最常提供的格式。缺點是檔案未經過壓縮，文件大小較大。</p>\n<p>另一個主流格式為 <a href=\"https://zh.wikipedia.org/zh-hant/OpenType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OTF（OpenType Font）</a>，是一種可縮放字型（scalable font）電腦字型類型，由 TrueType 延伸而來，採用 PostScript 格式，是微軟與 Adobe 聯合開發，用來替代 TrueType 字型的新字型。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/Web%E9%96%8B%E6%94%BE%E5%AD%97%E5%9E%8B%E6%A0%BC%E5%BC%8F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WOFF（Web Open Font Format）</a> 則是完全為了 Web 而設計的格式，由 Mozilla、Microsoft 與 Opera 合作推出。WOFF 的字型都經由 WOFF 的編碼工具壓縮，體積能比 tff 小 40%，現在已經是網頁字體的推薦標準。WOFF2 則是 WOFF 的升級版，體積可以壓得更小。</p>\n<p>最後，當然大家熟悉的 SVG 也可以算是一種。</p>\n<p>在主流的作業系統與瀏覽器上，這幾種格式的支援度都很高，而其主要的細節差異，因為非本篇重點，就不多著墨，有興趣的讀者可以到 wiki 上查看。</p>\n<p>今天要減少的字型檔案為最常見的 tff 格式。</p>\n<p>順帶一提，當我在撰寫文章的時候，對於字型、字體等名詞的差異很模糊，好在 JustFont 在<a href=\"https://blog.justfont.com/2013/02/some_nouns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">多年前的一篇文章</a>解釋得蠻清楚的，推薦大家理解一下！</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>要針對字型進行處理的話，首先我們需要下載 FontForge，FontForge 是一個很有名的軟體，可以用來設計、創建字體，或是進行各種字型相關的操作，可以從 <a href=\"https://fontforge.org/en-US/downloads/mac-dl/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fontforge.org/en-US/downloads/mac-dl/</a> 下載 Mac 版本（也有 Linux 與 Windows 的版本）。</p>\n<p>在官網上你可以找到許多文件，甚至是一整個 <a href=\"http://designwithfontforge.com/en-US/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ebook</a> 來教你如何用 FontForge 來設計字體。</p>\n<h3 id=\"用-fontforge-開啟原始字型檔\" style=\"position:relative;\"><a href=\"#%E7%94%A8-fontforge-%E9%96%8B%E5%95%9F%E5%8E%9F%E5%A7%8B%E5%AD%97%E5%9E%8B%E6%AA%94\" aria-label=\"用 fontforge 開啟原始字型檔 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用 FontForge 開啟原始字型檔</h3>\n<p>載好 FontForge 後，我們先打開原始的字型檔，這邊以前面提到的 Corporate Logo Font 為例（註： 在 MacOS Catalina 或 Big Sur，直接點選載好在 Apps 內的 FontForge app 可能會被 OS 擋下來，快一點的方式是<code class=\"language-text\">按右鍵 -> \"Show Package Contents\" -> \"Contents\" -> \"MacOS\"</code>，然後點選 FontForg.app，接者就會打開 terminal 並執行 FontForge。）：</p>\n<p><img src=\"/image/fontforge-corporatelogo-original.png\" alt=\"original-font-file-in-fontforge\"></p>\n<p>開啟後可以看到所有的字圖，接著其實你就可以選取你不要的字圖，然後 <code class=\"language-text\">clear</code> 掉它們：</p>\n<p><img src=\"/image/clear-font.png\" alt=\"clear-font\"></p>\n<p>但照這樣處理，弄到天荒地老六親不認都弄不完。工程師要用更聰明的解法。</p>\n<h2 id=\"正確的姿勢\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E7%A2%BA%E7%9A%84%E5%A7%BF%E5%8B%A2\" aria-label=\"正確的姿勢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正確的姿勢</h2>\n<p>打從一開始，我們就是因為原始字檔裡面太多我們不要的東西，我們需要的很少，才想要從原始檔案中擷取需要的部分，既然如此，就應該從我們<strong>想要的字圖</strong>下手，而不是慢慢刪掉我們不要的字圖。</p>\n<p>FontForge 其實有提供一個很方便的功能，叫做 <code class=\"language-text\">Invert Selection</code>，能夠選取所有<em>你沒有選取到的東西</em>，直接看個動圖範例：</p>\n<p><img src=\"/image/fontforge-invert-select.gif\" alt=\"fontforge-invert-select\"></p>\n<p>這樣一來，就很簡單了，只要選取住你想要的字圖，然後點選 <code class=\"language-text\">Edit -> Select -> Invert Selection</code>，就完成了，接著就把 Fontforge 自動幫你選取的字圖 <code class=\"language-text\">clear</code> 掉即可。</p>\n<p>但這樣還是有個問題。</p>\n<p>字型檔內容這麼多，我要手動在 FontForge 中找到自己想要的字圖不也是找到山窮水盡嗎？</p>\n<h3 id=\"正確姿勢二\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2%E4%BA%8C\" aria-label=\"正確姿勢二 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正確姿勢二</h3>\n<p>FontForge 是個蠻強大的工具，除了 GUI 以外，也提供 interpreters，讓你能撰寫 scripts 來修改字型檔。</p>\n<p>一個 interpreter 是 Python，另一個則是其內建的 scripting language。<a href=\"https://fontforge.org/docs/scripting/scripting.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細的範例、語法等可以從官網查看，文件很完整</a>。</p>\n<p>有了 scripting 的功能，我們就不用自己手動選取字圖啦。</p>\n<p>在 FontForge UI 上，你可以點選 <code class=\"language-text\">File -> Execute Script</code> 叫出 Dialog，可以選擇直接貼上 Python 程式碼，也可以選擇 <code class=\"language-text\">FF -> Call</code>，來載入使用另一個內建 interpreter 的 script file。</p>\n<p><img src=\"/image/fontforge-exec-scripts.gif\" alt=\"fontforge-exec-scripts\"></p>\n<p>因為我們要處理的動作很簡單，只有三個動作（選取字型、反轉選取、刪除），所以直接用內建的 script language 其實比較簡單，可以利用 NodeJS 來產生執行檔。</p>\n<h3 id=\"需要的-api\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E8%A6%81%E7%9A%84-api\" aria-label=\"需要的 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需要的 API</h3>\n<p>三個動作，選取字圖、反轉選取、刪除，分別對應的 API 為 <code class=\"language-text\">SelectMore()</code>、<code class=\"language-text\">SelectInvert()</code>、<code class=\"language-text\">DetachAndRemoveGlyphs()</code>。</p>\n<p>我們要匯入進 FontForge 的執行檔，就只需要這三個 API 即可。</p>\n<p><code class=\"language-text\">SelectMore()</code> 用法是傳入字型的 unicode 作為參數，即可選取該字圖，不過執行一次只能選取一個字圖。<code class=\"language-text\">SelectInvert()</code> 與 <code class=\"language-text\">DetachAndRemoveGlyphs()</code> 則不需要參數。</p>\n<h3 id=\"範例程式\" style=\"position:relative;\"><a href=\"#%E7%AF%84%E4%BE%8B%E7%A8%8B%E5%BC%8F\" aria-label=\"範例程式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>範例程式</h3>\n<p>知道了需要的 API，我們就可以來寫程式產生執行檔 <code class=\"language-text\">subset-font.pe</code>，<code class=\"language-text\">.pe</code> 是 FontForge 可以接受的格式，<code class=\"language-text\">.ff</code> 也行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 挑選出你頁面上需要用到的字</span>\n<span class=\"token keyword\">const</span> characters <span class=\"token operator\">=</span> <span class=\"token string\">'123招待コード'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./subset-font.pe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  characters<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 轉換成 16 進位</span>\n    <span class=\"token keyword\">let</span> hex <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 補零，以符合 \\u 格式</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      hex <span class=\"token operator\">=</span> hex<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 然後執行檔內寫入 SelectMore</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SelectMore(\"u</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\")\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 反轉選擇，選取所有其他不要的字</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SelectInvert()\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 最後移除字型</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DetachAndRemoveGlyphs()\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用 FontForge API 搭配上面程式後，會產生以下內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"shsubset-font.pe\"><pre class=\"language-shsubset-font.pe\"><code class=\"language-shsubset-font.pe\">SelectMore(&quot;u0031&quot;)\nSelectMore(&quot;u0032&quot;)\nSelectMore(&quot;u0033&quot;)\nSelectMore(&quot;u62db&quot;)\nSelectMore(&quot;u5f85&quot;)\nSelectMore(&quot;u30b3&quot;)\nSelectMore(&quot;u30fc&quot;)\nSelectMore(&quot;u30c9&quot;)\nSelectInvert()\nDetachAndRemoveGlyphs()</code></pre></div>\n<p>接著依照<a href=\"#%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2%E4%BA%8C\">正確姿勢二</a>的方式，匯入此執行檔，FontForge 就會產生只包含我們想要的字圖的字型檔了！：</p>\n<p><img src=\"/image/fontforge-script-subset-font.gif\" alt=\"fontforge-script-subset-font.gif\"></p>\n<p>不過因為刪掉的字圖很多，我們可以進一步透過 FontForge 的壓縮功能來輔助我們檢視成品：</p>\n<p>剛執行完 script 後，畫面會停留在 select 所有其他你不要的字圖的狀態，你可以先隨便點選空白處 deselect 所有字圖，然後選擇 <code class=\"language-text\">Encoding -> Compact</code>：</p>\n<p><img src=\"/image/fontforge-compact.gif\" alt=\"fontforge-compact\"></p>\n<p>就能清楚看到整個檔案的確只剩下我們所選的字圖（以上面範例 script 來說就是 <code class=\"language-text\">123招待コード</code>）。</p>\n<p>最後步驟就是產生字型檔案，點選 <code class=\"language-text\">File -> Generate Fonts...</code>，然後看你要 export 成什麼格式，如果是網頁上要用，當然就推薦使用 <code class=\"language-text\">woff</code>：</p>\n<p><img src=\"/image/fontforge-subset-font-generate-file.png\" alt=\"fontforge-subset-font-generate-file\"></p>\n<p>按下 <code class=\"language-text\">Generate</code> 後可能會出現 Error，可以不用理他，繼續 generate：</p>\n<p><img src=\"/image/fontforge-generate-error.png\" alt=\"fontforge-generate-error\"></p>\n<p>這樣就大功告成了！</p>\n<p>（註：關掉 FontForge 時，記得選 <code class=\"language-text\">Don't Save</code>，不然會蓋掉原始的檔案喔！）</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>這個方式可以用在各種字體檔案，非常方便，對於靜態頁面上內容文字不太會變動的狀況下，利用這個技巧可以大幅降低需要載入的檔案大小，以我公司專案的例子來說，從原本 2.6MB 的 tff 檔案，最後可以變成 8KB 的 woff 檔案，省下的大小很可觀的。</p>\n<p>簡單的筆記，希望對大家有幫助！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28179203\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web 字體簡介: TTF, OTF, WOFF, EOT &#x26; SVG</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35555816/delete-all-unused-characters-from-a-ttf-font-with-fontforge/35754448#35754448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Delete all unused characters from a TTF-font with Fontforge</a></li>\n<li><a href=\"https://fontforge.org/docs/scripting/scripting.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fontforge docs</a></li>\n<li><a href=\"https://blog.justfont.com/2013/02/some_nouns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[but] 雜談 ─ 常常搞混的一些詞</a></li>\n</ol>","id":"50a95194-1c2f-534b-9d86-281727779fe5","fields":{"slug":"make-smaller-ttf-font-files-for-web"},"frontmatter":{"date":"2021-04-23T23:20:17.000Z","title":"透過減少 ttf 字體檔案大小來增進網頁效能","tags":["web","font","performance"],"type":"tech","slug":"make-smaller-ttf-font-files-for-web"},"timeToRead":8},{"excerpt":"\"My name is Barry Allen, and I'm the fastest man alive ...\"\n\"Wait..reverse flash is faster then you, zoom is faster than you..\"","html":"<blockquote>\n<p>\"My name is Barry Allen, and I'm the fastest man alive ...\"\n\"Wait..reverse flash is faster then you, zoom is faster than you..\"</p>\n</blockquote>\n<!-- more -->\n<p>今天來談談Browser Rendering Optimisation。順便也是為在公司上的課做個心得記錄。</p>\n<p>相信大家小時候都好奇過早期的電影、卡通或動畫，是怎麼樣製作出來的，而我們也都知道基本上就是一連串的<code class=\"language-text\">畫面</code>以非常快速的方式做切換，矇騙你的視覺讓你感受到是連續的<code class=\"language-text\">影片</code>，而Browser其實也是類似的做法，當取得Server的回應後，瀏覽器便把接收到的HTML畫出來，而每當你的網頁有所變化時，Browser就會再依據其邏輯將網頁重新渲染一遍，也因此才能看到這麼多漂亮的效果。</p>\n<p>而所謂browser rendering optimization就是要讓渲染的過程能夠更快速、更順暢，讓你的網頁畫面如夢似幻、細緻耀眼。</p>\n<p>要做到這件事情，就必須提及FPS(Frames per Second)，顧名思義就是每秒畫幾個Frames，一般影片大概是<a href=\"https://en.wikipedia.org/wiki/Frame_rate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">30fps</a>，而多數螢幕畫面的更新頻率是60Hz，因此若我們能將fps極致提升到60fps，理當能有非常棒的畫面呈現！</p>\n<p>知道目標後，let's do some math...\n<code class=\"language-text\">60fps = 60 frames per second = 60 frames every 1000ms</code>\n好的從我們優異的數學能力下得知，要達到60fps，我們繪製一個frames的時間必須在16.6666...ms左右(1000/60)</p>\n<p>ok，那要怎麼知道自己的網頁每個frames花了多少時間繪製？拜Google大神所賜，只要打開Chrome的devTool，切換到Timeline的tab，就可以很容易的知道網頁在browser上的render時間。讓我們用畫面超級old school的pchome拍賣來Demo一下：</p>\n<p><img src=\"/image/googleDevTool-pchome.png\" alt=\"Devtool-timeline(點圖放大)\" title=\"DevTool-timeline\"></p>\n<p>先別被圖中五顏六色的區塊嚇到，在我們說明這Tool該如何使用之前，必須先瞭解Browser的Render過程，以及這圖片中每個顏色所代表的意義。</p>\n<p>接觸過HTML的人一定都知道所謂的DOM Tree，Browser會解析HTML並轉換成DOM Tree做操作，但知道<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Render Tree</a>的人可能就不多了，Render tree由DOM tree與CSS結合產生，Browser就是依照Render Tree來決定該在畫面上呈現什麼東西。若你今天在某個div的css上加上<code class=\"language-text\">display: none</code>，那這個div就不會再Render tree上呈現。</p>\n<p><img src=\"/image/RenderTree.png\" alt=\"Render Tree (source from google)\"></p>\n<p>既然Render的過程也是一棵Tree，有點概念的人可能會想：每次style改變或是我更動DOM的位置時，這棵Tree也就會變動了吧？\n沒錯！在整個Browser的Render過程中，就是會不斷去recalculating style、layout的關係，來建構這棵樹。</p>\n<p>當然Browser的渲染過程不止這些，還必須載入js, css, web api等等的資源，因此有所謂的Rendering Pipeline</p>\n<p><img src=\"/image/render_pipeline.png\" alt=\"Render Pipeline (source from google)\">\n從圖上可以發現其順序為：</p>\n<ol>\n<li>Javascript: 載入與執行JS/CSS</li>\n<li>Style: 根據js與css計算style</li>\n<li>Layout: 當style套入元素時，瀏覽器要檢查是否會影響到整個畫面的排列，並進行排列</li>\n<li>Paint: 排列後有更動到的元素需要重新繪製（第一次載入的話當然是全部繪製）</li>\n<li>Composite: 最後就是將所有元素重新合成回來（重新繪製的元素與原本的元素）</li>\n</ol>\n<p>實際上並非每次的前端更動都會執行這五個步驟，若你只有切換顏色、圖片等不影響版面配置的動作，browser會跳過Layout，直接進行Paint；或著你捲動網頁、css的動畫效果，這類操作則會跳過style與layout，直接進行Composite。</p>\n<p>接下來我們回到Timeline這個tool。</p>\n<p><img src=\"/image/Timeline2.png\" alt=\"Timeline record\">\n你可以直接在你想觀察的網頁打開Timeline，並重新整理，他就會自行錄製；或是你可以在你想觀察的操作步驟進行前（ex. 滑動頁面、打開menu bar等等）按下錄製。</p>\n<p><img src=\"/image/Timeline3.png\" alt=\"Timeline finish\"></p>\n<p>接著在你覺得適合的地方（通常就是步驟執行完後）按下Finish。</p>\n<p><img src=\"/image/Timeline1.png\" alt=\"Timeline result\"></p>\n<p>基本上就能得到下列的Timeline結果。\n從這張圖片可以清楚看到每個frame花了多少時間，在Render pipeline中發生了哪些事情，值得注意的是，圖片右上角有個紅色小三角形，若你的frame中有這個標記，就代表Chrome認為這段frame有可以改善的部分。大家不妨到自己的網頁打開Timeline，看看有多少東西需要改進XD</p>\n<p>在認識了工具後，總是要實際操作一遍才會有感受，這邊以三種角度來進行Optimization。</p>\n<h2 id=\"javascript\" style=\"position:relative;\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript</h2>\n<p>一般來說，前端工程師常常會利用<code class=\"language-text\">setTimeout</code>或是<code class=\"language-text\">setInterval</code>來製作一些動畫效果，你可能會寫下面這樣的code:</p>\n<p><a href=\"https://jsbin.com/xuconawipi/5/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example setInterval</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsetinterval.js\"><pre class=\"language-javascriptsetinterval.js\"><code class=\"language-javascriptsetinterval.js\">var timer = {time: 0};\nfunction counter(timer) { \n  timer.time = timer.time+1;\n  document.querySelector(&quot;#counter&quot;).innerHTML = timer.time;\n}\nsetInterval(counter.bind(null,timer), 1000); </code></pre></div>\n<p>或著是</p>\n<p><a href=\"https://jsbin.com/yocokorelu/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example setTimeout</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsettimeout.js\"><pre class=\"language-javascriptsettimeout.js\"><code class=\"language-javascriptsettimeout.js\">\t\tvar timer = {time: 0};\n\t\tfunction counter(timer) { \n\t\t\tsetTimeout(counter.bind(null,timer), 1000);\n\t\t\ttimer.time = timer.time+1;\n\t\t\tdocument.querySelector(&quot;#counter&quot;).innerHTML = timer.time;\n\t\t}\n\t\tcounter(timer);</code></pre></div>\n<p>兩者都可以讓你達到同樣的效果，但是setTimeout跟setInterval對Browser來說都有個主要缺點，就是他<strong><span style=\"color:red; font-style: italic;\">想執行時就會執行，而不會依據你的Browser狀況<span></strong>；另外當你切換到別的Tab時，setTimeout還會繼續Render。（理論上user看不到畫面，Browser就可以不用執行，以節省效能）\n<em><span style=\"color:rgba(228, 85, 85, 0.81); font-style: italic;\">不過現在許多瀏覽器都已經利用某些方式讓setTimeout在不需要Render時暫停工作。</span></em></p>\n<p>除了setTimeout與setInterval外，我們其實還有另一個選擇 <span style=\"color:red;\"><code class=\"language-text\">requestAnimationFrame</code></span></p>\n<p>假設我們有個Draw的動畫function，用setTimeout是這樣實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptdraw.js\"><pre class=\"language-javascriptdraw.js\"><code class=\"language-javascriptdraw.js\">\t\tfunction draw() {\n\t\t    setTimeout(draw, 16); // 16ms per frame!\n\t\t    // Drawing\n\t\t}\n\t\tdraw();</code></pre></div>\n<p>若是用requestAnimationFrame：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptdraw-raf.js\"><pre class=\"language-javascriptdraw-raf.js\"><code class=\"language-javascriptdraw-raf.js\">\t\tfunction draw() {\n\t\t\t// Drawing\n\t\t\trequestAnimationFrame(draw);\n\t\t}\n\t\trequestAnimationFrame(draw);</code></pre></div>\n<p>就這麼簡單，用了<span style=\"color:red;\"><code class=\"language-text\">requestAnimationFrame</code></span>之後，Browser就會綜合考量javascript所產生的動畫，一起刷新螢幕，並在動畫不在viewport時，暫停工作，以節省資源。</p>\n<p>當然你會想說，那如果我想控制animation的timing怎麼辦？以前面的counter例子來看，你可以這樣做：</p>\n<p><a href=\"https://jsbin.com/qerude/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example reqeustAnimationFrame</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptraf_timeer\"><pre class=\"language-javascriptraf_timeer\"><code class=\"language-javascriptraf_timeer\">\t\tvar timer = {time: 0};\n\t\tfunction counter(timer) { \n\t\t  setTimeout(function(){\n\t\t    requestAnimationFrame(counter.bind(null, timer));\n\t\t    timer.time = timer.time+1;\n\t\t    document.querySelector(&quot;#counter&quot;).innerHTML = timer.time;\n\t\t  }, 1000);\n\t\t}\n\t\tcounter(timer);</code></pre></div>\n<h2 id=\"style--layout\" style=\"position:relative;\"><a href=\"#style--layout\" aria-label=\"style  layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Style &#x26; Layout</h2>\n<p>除了JS外，在頁面上操作畫面大多免不了觸發<code class=\"language-text\">Style</code> &#x26; <code class=\"language-text\">Layout</code>這兩個Render Pipeline的步驟。既然免不了這些步驟，我們能做的就是盡量<strong>減少</strong>這些步驟的產生，大家可以到這裡（<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How (not) to trigger a layout in WebKit</a>）看看在有哪些操作我們要盡量減少。</p>\n<p>當然，光說不練感受不到差別，讓我們來練習一個例子：</p>\n<p><a href=\"https://jsbin.com/yesika/edit?html,css,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example Layout trigger</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptbefor-optimization.js\"><pre class=\"language-javascriptbefor-optimization.js\"><code class=\"language-javascriptbefor-optimization.js\">\t\t(function() {\n\t\t  // noprotect\n\t\t  var sizer = document.querySelector(&#39;.sizer&#39;);\n\n\t\t  document.querySelector(&#39;.set-size&#39;).addEventListener(&#39;click&#39;, function(event) {\n\t\t    var ps = document.querySelectorAll(&#39;.article .article-block&#39;);\n\t\t    var i = ps.length;\n\t\t    var size;\n\t\t    while (i--) {\n\t\t      finalHeight = sizer.offsetHeight;\n\t\t      ps[i].style.height = finalHeight + &#39;px&#39;;\n\t\t    }\n\t\t    event.preventDefault();\n\t\t  });\n\t\t}());</code></pre></div>\n<p><a href=\"https://jsbin.com/wukuzi/2/edit?html,css,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example Less Layout trigger</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptafter-optimization\"><pre class=\"language-javascriptafter-optimization\"><code class=\"language-javascriptafter-optimization\">\t\t(function() {\n\t\t  // noprotect\n\t\t  var sizer = document.querySelector(&#39;.sizer&#39;);\n\n\t\t  document.querySelector(&#39;.set-size&#39;).addEventListener(&#39;click&#39;, function(event) {\n\t\t    var ps = document.querySelectorAll(&#39;.article .article-block&#39;);\n\t\t    var i = ps.length;\n\t\t    var size;\n\t\t    var finalHeight = sizer.offsetHeight;\n\t\t    while (i--) {\n\t\t      ps[i].style.height = finalHeight + &#39;px&#39;;\n\t\t    }\n\t\t    event.preventDefault();\n\t\t  });\n\t\t}());</code></pre></div>\n<p>仔細看就會發現其實只有一行code有變動，效果卻差很多！當你在操作類似DOM物件的時候可以參考上述的網站，避免不必要的re-layout動作。</p>\n<h2 id=\"composite\" style=\"position:relative;\"><a href=\"#composite\" aria-label=\"composite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composite</h2>\n<p>在一個網頁的頁面當中，實際上並非是平面的，通常會由許多<code class=\"language-text\">Layer</code>所組成，而在Browser rendering pipeline的最後一個步驟<code class=\"language-text\">Composite</code>中，就是負責將這些Layer組合成完整的頁面。</p>\n<p>我們這次以最近Live直播統一獅頗為熱門的Yahoo首頁為例子，依照先前的方式打開Dev tool中的Timeline，選取其中一段frame後，點選下方的<code class=\"language-text\">Layers</code>標籤，應該就可以看到類似下面的圖：\n<img src=\"/image/layer.png\" alt=\"Composite Layers\">\n<img src=\"/image/compositeLayers.png\" alt=\"Composite Layers (而在Timeline的工具中，旁邊還能讓你拖拉旋轉，方便查看各個Layer的狀況。)\"></p>\n<p>可以發現yahoo首頁也是由許多層Layer所組成。</p>\n<p>眼尖的讀者可能會發現為什麼頁面中只有一個區塊是綠色的？這就是這小節的重點了，在Composite的過程中，只有需要重新Style與Layout的Layer才需要重繪，而這些需要重繪的Layer就會被標註成綠色；以yahoo首頁為例，綠色的那條是影音列表，理當會不斷變動，因此會被Highlight為綠色。</p>\n<p>那為什麼我們需要針對這個步驟做Optimize呢？因為假如在同一層layer中，你其實只有某一個div需要re-layout，但由於是在同一個Layer，會變成整個Layer都需要重新繪製，如此一來就會增加不必要的負擔。</p>\n<p>因此我們可以在你確定會需要重繪制的div中，加入<code class=\"language-text\">will-change: transform;</code>這個屬性，告訴browser說，“欸~我知道我可能會變動喔，請不要把大家跟我視為一樣的”，這樣就能解決上述的問題。</p>\n<p>大家不妨打開自己的網站，利用Chrome的Timeline玩看看，提升頁面的渲染效率，讓我們一起追求60ps的極致快感吧！</p>\n<h2 id=\"延伸閱讀\" style=\"position:relative;\"><a href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\" aria-label=\"延伸閱讀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>延伸閱讀</h2>\n<ol>\n<li><a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How not to trigger layout in webkit</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Web Fundamentals</a></li>\n<li><a href=\"http://www.html5rocks.com/zh/tutorials/speed/layers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Accelerated Rendering in Chrome</a></li>\n</ol>","id":"c7046447-102b-5060-9ea8-3434320d299e","fields":{"slug":"front-end-kata-60-fps的快感"},"frontmatter":{"date":"2016-03-26T16:45:55.000Z","title":"Front-end kata 60fps的快感 - Browser Rendering Optimisation","tags":["Browser Rendering Optimisation","kata","performance"],"type":"tech","slug":"Front-end kata 60fps的快感"},"timeToRead":7}],"tagName":"performance","type":"tech"}},"staticQueryHashes":["2123680655"]}