{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/bundler","result":{"pageContext":{"posts":[{"excerpt":"source map 就是那種你每天都會看到、用到，但可能從來不曉得他怎麼運作的東西，這篇文章帶你一探究竟。","html":"<p>source map 就是那種你每天都會看到、用到，但可能從來不曉得他怎麼運作的東西，這篇文章帶你一探究竟。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>只要你是個前端工程師，或是曾經開發過前端專案，相信對 source map 都不陌生，不管你常用的 bundler/generator 工具是什麼，幾乎都有完整的 source map 支援，甚至有各種選項可以配置，但是你知道 source map 的原理嗎？它是怎麼產生的？它又是怎麼幫助我們從 bundler/generator 產生的程式碼中找出對應的原始碼，讓我們方便除錯呢？</p>\n<p>這些問題我也不太清楚，雖然大致上的原理稍微思考一下都能夠猜個八九不離十，但對於實際運作細節從來沒有探討過，因此這週末利用了點時間稍微研究一下，記錄在這篇文章跟大家分享。</p>\n<h2 id=\"source-map-是什麼\" style=\"position:relative;\"><a href=\"#source-map-%E6%98%AF%E4%BB%80%E9%BA%BC\" aria-label=\"source map 是什麼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Map 是什麼</h2>\n<p>簡單來說，source map 就是儲存了原始碼與編譯後程式碼的對應關係之檔案，讓你在開啟 Devtool 時，能讓瀏覽器透過載入 source map 的方式幫助你定位原始碼位置，方便下中斷點除錯。</p>\n<p>以目前的瀏覽器實作來看，都是只有在打開 Devtool 的時候，才會根據它獲取的 source map url 資訊來載入 source map，不會影響網站載入速度與一般使用者的體驗。</p>\n<p>提供瀏覽器 source map url 的方式有兩種，一個是將其寫在編譯後程式碼檔案中，也是大多數現在 bundler/generator 的做法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">parcelRequire</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>o<span class=\"token operator\">=</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeof</span> parcelRequire<span class=\"token operator\">&amp;&amp;</span>parcelRequire<span class=\"token punctuation\">,</span>u<span class=\"token operator\">=</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeof</span> require<span class=\"token operator\">&amp;&amp;</span>require<span class=\"token punctuation\">;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">//# sourceMappingURL=file.map.js</span></code></pre></div>\n<p>另一種則是透過特殊的 http header，讓瀏覽器在 request 你的 javascript 檔案時，能夠從 header 欄位中找到 source map url 資訊：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">X-SourceMap: /path/to/file.js.map</code></pre></div>\n<p>順帶一提，Devtool 載入 source map 的 request 並不會出現在 Network panel，所以基本上是看不到的。</p>\n<p>這在一般使用情境上是沒什麼影響，但我前陣子有個專案部署到測試環境後，卻發現 source map 載入失敗，這時想要確認原因就麻煩了，翻了翻 chrome devtool 的<a href=\"https://github.com/ChromeDevTools/devtools-frontend/blob/ce4865088d055b3997b62f397d220babc5c294d0/front_end/sdk/PageResourceLoader.js#L286\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>，才勉勉強強猜測出是因為 devtool 載入 source map 時，不會因為你在瀏覽器中 simulate mobile mode，而跟著送出 mobile 的 user agent，而該專案的 CDN 有設定會將來自 desktop 的 request 轉到特殊的頁面，因此才導致 dev tool 的 source map 載入失敗。如果能看到載入 source map 的 request，這個問題就能更好的確認與解決了。</p>\n<h2 id=\"souce-map-的內容\" style=\"position:relative;\"><a href=\"#souce-map-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"souce map 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Souce Map 的內容</h2>\n<p>Source Map 是有規格的，主要由 Mozilla 與 Google 工程師撰寫，目前最新版本是 version 3，可以在<a href=\"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a>找到。</p>\n<p>一個 source map 檔案大概長這樣（這是經過 beatify 後的樣子，通常會是壓縮成一行而已）：</p>\n<div class=\"gatsby-highlight\" data-language=\".js\"><pre class=\"language-.js\"><code class=\"language-.js\">{\n    &quot;version&quot;: 3,\n    &quot;sources&quot;: [&quot;logger.ts&quot;],\n    &quot;names&quot;: [],\n    &quot;mappings&quot;: &quot;gBAAgB,EAAE;AA0BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvBA,MAAM,...&quot;,\n    &quot;file&quot;: &quot;logger.js&quot;,\n    &quot;sourceRoot&quot;: &quot;../src&quot;,\n    &quot;sourcesContent&quot;: [&quot;/* eslint-disable no-console */\\nimport { test } from &#39;...&#39;&quot;]\n}</code></pre></div>\n<p>大多數的 bundler/generator 都是使用 Mozilla 的 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件，或是利用該套件的 API 自己去做一些客製化，像是 <a href=\"https://github.com/webpack/webpack-sources/blob/master/lib/SourceMapSource.js#L8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack 就是如此</a>。但也有像是 <a href=\"https://v2.parceljs.org/plugin-system/source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v2 版本的 Parcel，就使用了 C++ 從頭撰寫</a>，號稱效率更高。</p>\n<p>實際檔案內容可能根據你所使用的 bundler/generator 會有些許不同，但都會遵照這個規格。</p>\n<ul>\n<li>version：source map 的版本，目前為 3。</li>\n<li>source：編譯前的文件名稱，是一個 array，因為很多時候你會將多個檔案編譯到一個。</li>\n<li>names：編譯前的變數。可能不是必要欄位，所以大多都是空的。</li>\n<li>mappings：source map 的主要資訊，是一連串編碼，用來表示原始碼與編譯後程式碼的對應訊息。</li>\n<li>file：編譯後的文件名稱。</li>\n<li>sourceRoot：編譯前的檔案之所在位置。</li>\n<li>sourcesContent: 原始碼內容，也是個 array，對應每個檔案的原始碼。</li>\n</ul>\n<p>其中最重要的就是 <code class=\"language-text\">mappings</code> 這個欄位，記錄了編譯前後兩個文件怎麼做對應的資訊。以上面的例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gBAAgB,EAAE;AA0BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvBA,MAAM,...\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>mappings 這個字串裡面有三層資訊：</p>\n<ol>\n<li>用分號 <code class=\"language-text\">;</code> 區隔<strong>編譯後程式碼</strong>的<strong>行</strong>，所以第一個分號前的編碼，對應<strong>編譯後程式碼</strong>的第一行。以上面例子來看，<code class=\"language-text\">gBAAgB,EAAE</code> 就是對應<strong>編譯後程式碼</strong>第一行的編碼。</li>\n<li>用逗號 <code class=\"language-text\">,</code> 隔開的是<strong>編譯後程式碼</strong>某一行內的某個<strong>位置</strong>。以上面例子來看，第一行紀錄了兩個位置的對應編碼，<code class=\"language-text\">gBAAgB</code> 與 <code class=\"language-text\">EAAE</code>。 ---（感謝網友 <a href=\"https://www.coderbridge.com/@davidhcefx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">davidhcefx</a> 指正！）</li>\n<li>最後是一個 Base64 <a href=\"https://en.wikipedia.org/wiki/Variable-length_quantity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VLQ</a> 的編碼，解碼後可以得到<strong>編譯前原始碼</strong>的位置。</li>\n</ol>\n<h3 id=\"何謂-base64-vlq\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-base64-vlq\" aria-label=\"何謂 base64 vlq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 Base64 VLQ</h3>\n<p><strong>VLQ (variable-length quantity)</strong></p>\n<p>VLQ 是一種壓縮 large integers 的編碼方式，同樣一個整數，用數字表示一定會消耗比 VLQ 更多的空間。用 Base64 來表達則可以將 VLQ 表示限縮在 ASCII 的子集中，解決一些語言問題。</p>\n<p>有興趣深入了解的人可以看看 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">svelte</a> 的作者 <a href=\"https://github.com/Rich-Harris\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rich-Harris</a> 的<a href=\"https://github.com/Rich-Harris/vlq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實作</a>，下表範例也是取自其 Readme：</p>\n<table>\n<thead>\n<tr>\n<th>Integer</th>\n<th>Base64 VLQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>C</td>\n</tr>\n<tr>\n<td>123</td>\n<td>2H</td>\n</tr>\n<tr>\n<td>123456789</td>\n<td>qxmvrH</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到以 Base64 VLQ 來表示數字能夠縮減需要的儲存空間。</p>\n<h2 id=\"source-map-如何用-base64-vlq-記錄位置資訊\" style=\"position:relative;\"><a href=\"#source-map-%E5%A6%82%E4%BD%95%E7%94%A8-base64-vlq-%E8%A8%98%E9%8C%84%E4%BD%8D%E7%BD%AE%E8%B3%87%E8%A8%8A\" aria-label=\"source map 如何用 base64 vlq 記錄位置資訊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Map 如何用 Base64 VLQ 記錄位置資訊</h2>\n<p>知道了 source map 是利用 mappings 裡面的 Base64 VLQ 編碼來記錄兩邊程式碼的對應位置關係，我們可以來仔細解析一下 VLQ 的內容，以上面範例中的編碼 <code class=\"language-text\">EAAE</code> 來看，共有四位數，每一個位數都是一個 Base64 VLQ 編碼，各自代表一個資訊：</p>\n<p><img src=\"/image/source-map-base64vlq.svg\" alt=\"source-map-base64vlq\"></p>\n<p>四個欄位裡面：</p>\n<ul>\n<li>第一個欄位：標記在編譯後程式碼的第幾列（column）</li>\n<li>第二個欄位：標記屬於 source 欄位中的哪個檔案</li>\n<li>第三個欄位：標記在編譯前程式碼的第幾行（line number）</li>\n<li>第四個欄位：標記在編譯前程式碼的第幾列（column）</li>\n</ul>\n<p>其實還有第五個欄位，代表屬於 source map 檔案中 <code class=\"language-text\">names</code> 屬性所列的變數中的哪一個，如果 <code class=\"language-text\">names</code> 為空，這邊就不會產生第五個欄位。</p>\n<p>瀏覽器就是透過這些資訊來定位編譯前後程式碼的位置，讓你能輕鬆的除錯。至於瀏覽器怎麼解析跟實際顯示在 devtool 中，就不在今天討論範圍，還得去爬他們的程式碼才行，但我估計也是用到 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件。</p>\n<h2 id=\"原始碼的編譯過程中如何產生-source-map\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%A7%8B%E7%A2%BC%E7%9A%84%E7%B7%A8%E8%AD%AF%E9%81%8E%E7%A8%8B%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%A2%E7%94%9F-source-map\" aria-label=\"原始碼的編譯過程中如何產生 source map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原始碼的編譯過程中如何產生 Source Map</h2>\n<p>知道了 source map 的內容後，下個問題來了，編譯過程中，是怎麼產生這些資訊，並儲存在 source map file 中的呢？</p>\n<p>如果有寫過 babel/eslint plugin 或是讀過 <a href=\"https://blog.techbridge.cc/2018/09/22/visit-ast-with-babel-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">透過製作 Babel-plugin 初訪 AST</a> 與 <a href=\"https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">寫一個簡單堪用的 ESLint plugin</a>的讀者應該對於 AST 有些了解，知道程式碼在轉換的過程中，都會經歷如下的歷程：</p>\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"what-ast-play-in-babel\"></p>\n<p>AST（Abstract Syntax Tree）中每個 Node 其實都會記載其位置（<em>start</em> 與 <em>end</em>）：</p>\n<p><img src=\"/image/ast-location-sample.png\" alt=\"ast-location-sample\"></p>\n<p>基本上就提供了我們 source map 所需的資訊，因此 generate 步驟後，除了產生編譯後的程式碼外，也能順帶產生 source map：</p>\n<p><img src=\"/image/source-map-ast-process.png\" alt=\"source-map-ast-process\"></p>\n<p>而如同文章前半段所提，大多數 bundler/generator 會用到 mozilla 的 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件來幫忙在 generate 階段產生 source map，使用方法在其官方 readme 中可以找到，大致上分為兩種：</p>\n<p>第一種是 low level API（官方範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceMapGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  file<span class=\"token operator\">:</span> <span class=\"token string\">\"source-mapped.js\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  generated<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">35</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  source<span class=\"token operator\">:</span> <span class=\"token string\">\"foo.js\"</span><span class=\"token punctuation\">,</span>\n  original<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"christopher\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}'</span></code></pre></div>\n<p>透過 <code class=\"language-text\">SourceMapGenerator</code> 告知其編譯後檔案位置，然後手動加入對照的程式碼行與列資訊，<a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 就能幫忙算出 Based64 VLQ 並產生 source map 檔案。這種作法就是要自己額外維護 AST node 中提供的行列資訊，以及原始碼的行列資訊。</p>\n<p>第二種是 high level API（官方範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"BinaryExpression\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\" + \"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Literal\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad AST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"40 + 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringWithSourceMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    file<span class=\"token operator\">:</span> <span class=\"token string\">\"add.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { code: '40 + 2',</span>\n<span class=\"token comment\">//   map: [object SourceMapGenerator] }</span></code></pre></div>\n<p>high level API 則是直接應用在 AST 中，透過 <code class=\"language-text\">SourceNode</code> 來包裹原有的 AST node，將對應編譯前原始碼的資訊附加上去，最後使用 source-map 提供的 <code class=\"language-text\">toStringWithSourceMap</code> 來輸出原始碼與 source map 檔。</p>\n<p>如果你去看 <code class=\"language-text\">SourceNode</code> 的<a href=\"https://github.com/mozilla/source-map/blob/master/lib/source-node.js#L367-L378\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>，你會發現 <code class=\"language-text\">toStringWithSourceMap</code> 底層也是呼叫了 low levle API，將整個樹的資訊 concat 起來:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  generated<span class=\"token punctuation\">.</span>code <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    original<span class=\"token punctuation\">.</span>source <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    original<span class=\"token punctuation\">.</span>line <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    original<span class=\"token punctuation\">.</span>column <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      lastOriginalSource <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>source <span class=\"token operator\">||</span>\n      lastOriginalLine <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>line <span class=\"token operator\">||</span>\n      lastOriginalColumn <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>column <span class=\"token operator\">||</span>\n      lastOriginalName <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        source<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\n        original<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          line<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span>\n          column<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>column\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        generated<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          line<span class=\"token operator\">:</span> generated<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span>\n          column<span class=\"token operator\">:</span> generated<span class=\"token punctuation\">.</span>column\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 略...</span></code></pre></div>\n<p>兩種 API 都有人使用，<a href=\"https://github.com/babel/babel/blob/main/packages/babel-generator/src/source-map.ts#L28\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 是使用 low level API</a>，而 <a href=\"https://github.com/webpack/webpack-sources/blob/master/lib/SourceMapSource.js#L8-L9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpack 則用到了 high level API</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>至此我們大致上解析了 source map 的內容，並初步了解他是怎麼生成的，如果想要再繼續研究的話，可以往 source-map 的<a href=\"https://github.com/mozilla/source-map/tree/master/lib\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>鑽研，包含 VLQ 的實作也有，或是 webpack、bable 或 parcel 的原始碼也值得一看。</p>\n<p>雖然理解這些原理與否並不影響你開發網站與產品，也不一定能增加你的效率或薪水，但是純粹的學習知識其實也是很快樂的，希望大家看到這邊都能有所收穫！有任何問題歡迎留言指教。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://indepth.dev/posts/1230/source-maps-from-top-to-bottom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source Maps from top to bottom</a></li>\n<li><a href=\"https://kknews.cc/code/3qyaz5g.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解前端代碼的sourceMap原理——讓你不再為調試代碼發愁</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Source Map 詳解</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020808317\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">探究 source map 在編譯過程中的生成原理</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1598223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端面试官: 你知道source-map的原理是什么吗？</a></li>\n<li><a href=\"https://hacks.mozilla.org/2013/05/compiling-to-javascript-and-debugging-with-source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compiling to JavaScript, and Debugging with Source Maps</a></li>\n</ol>","id":"f4ec7f68-940c-50f4-b29d-38db4b01a4bb","fields":{"slug":"how-source-map-works"},"frontmatter":{"date":"2021-03-27T13:41:40.000Z","title":"Source map 運作原理","tags":["source map","javascript","bundler"],"type":"tech","slug":"how-source-map-works"},"timeToRead":10}],"tagName":"bundler","type":"tech"}},"staticQueryHashes":["2123680655"]}