{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/mvc","result":{"pageContext":{"posts":[{"excerpt":"\"要學Flux還是直接學Redux好呢？\"\n\t\"Flux我知道, 3D printer麻！\"","html":"<blockquote>\n<p>\"要學Flux還是直接學Redux好呢？\"\n\"Flux我知道, 3D printer麻！\"</p>\n</blockquote>\n<!-- more -->\n<p>今天這篇主要是想藉由 <code class=\"language-text\">Flux</code> 的介紹，進而探討 <code class=\"language-text\">Flux</code> 與 <code class=\"language-text\">MVC</code> 的差異。會想記錄這篇的原因是前幾天跟我的師父（以前實習公司的 CTO）詢問我類似的問題，我才發現自己還沒有真正全盤瞭解過，只是很直接的去了解 Flux，並且使用，但是到底 <code class=\"language-text\">Flux</code> 做對了什麼，而 <code class=\"language-text\">MVC</code> 又犯了什麼錯呢？</p>\n<p>首先我們回顧一下<a href=\"https://www.youtube.com/watch?v=nYkdrAPrdcw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2014 F8大會 - Hacker Way</a>的影片\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=nYkdrAPrdcw\" target=\"_blank\">\n<img src=\"http://img.youtube.com/vi/nYkdrAPrdcw/0.jpg\" alt=\"2014 F8大會 - Hacker Way\" width=\"240\" height=\"180\" border=\"10\">\n</a>\n其中 Jing Chen 用了兩張圖來做對比，說明 MVC 的觀念在複雜的 Application 下難以維護。</p>\n<p><img src=\"/image/flux-react-mvc.png\" alt=\"facebook MVC\" title=\"facebook MVC\"></p>\n<p>經驗豐富一點的 Developer 看到這張圖的第一個念頭應該會是：\"What the fxxx... 誰家的 MVC長這樣啊？\" 沒錯！Jing Chen 事後在 Reddit 上也有回覆，主要是想利用這張圖把 MVC 在大型架構下，資料 與 視圖 之間的 <code class=\"language-text\">bi-directional data flow</code>，容易造成 <code class=\"language-text\">cascading effects</code> 的問題凸顯出來。</p>\n<p>為了解決她說的這個問題，Facebook 提出了 <code class=\"language-text\">Flux</code></p>\n<h2 id=\"flux\" style=\"position:relative;\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h2>\n<p>Flux是一種讓你很容易做到 one-way data flow 的<span style=\"color:red\">概念</span>，讓你View中的每個 component 的 state 都能夠 <code class=\"language-text\">predictable</code>。</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<h3 id=\"views-dispatch-actions\" style=\"position:relative;\"><a href=\"#views-dispatch-actions\" aria-label=\"views dispatch actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Views Dispatch Actions</h3>\n<p><code class=\"language-text\">Dispatcher</code> 是一個重要的 event system，用來 broadcast events 以及 registers callbacks，一般來說 Dispatcher 是唯一且 global 的，可以參考 Facebook 的<a href=\"https://github.com/facebook/flux/blob/master/src/Dispatcher.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dispatcher Library</a>（題外話，有許多一些 Flux 的 framework 並非這樣使用）</p>\n<p>簡單來看個 Dispatcher 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 假設你initiate一個dispatcher</span>\n<span class=\"token keyword\">var</span> AppDispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//.</span>\n<span class=\"token comment\">//..</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token comment\">//在你的 component.jsx 中，可能會有這樣的程式</span>\n<span class=\"token function-variable function\">createNewItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">evt</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    actionName<span class=\"token operator\">:</span> <span class=\"token string\">'newPhoto'</span><span class=\"token punctuation\">,</span>\n    newItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Happy Holiday'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// example data</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createNewPhoto <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>New Photo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當每次的 <code class=\"language-text\">onClick</code> 發生後，<code class=\"language-text\">View</code> 就會透過 <code class=\"language-text\">Dispatcher</code> dispatch 出一個 <code class=\"language-text\">Action</code>，該 Action 可以包含一個 <code class=\"language-text\">payload</code>，說明<code class=\"language-text\">你想做什麼事情</code>以及<code class=\"language-text\">你需要操作什麼資料</code>。</p>\n<h3 id=\"store-responds-to-dispatched-actions\" style=\"position:relative;\"><a href=\"#store-responds-to-dispatched-actions\" aria-label=\"store responds to dispatched actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Responds to Dispatched Actions</h3>\n<p>Store 在 Flux的架構內，通常是 Singleton (一樣，有些 framework 並非這樣做，尤其是想達成 isomorphic 時，可以參考<a href=\"http://fluxible.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yahoo Fluxible</a>)</p>\n<p>在 Flux 的概念中，Store 基本上是你唯一可以<strong>操作資料</strong>與<strong>儲存資料</strong>的地方。去除操作資料的部分，聽起來有點像 MVC 中的 Model ? 更明確一點來說，<strong>Store contains Models</strong></p>\n<p>舉例來說，當你需要存放一些照片以及其 Meta data 時，你會 Create 一個 PhotoStore 來存放 Photo model 與 Meta model。你會依照資料的<code class=\"language-text\">Domain</code> 來切割你的 Store。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> PhotoStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// collection of model data</span>\n  photos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nAppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Store</code> 會向 <code class=\"language-text\">Dispatcher</code> 註冊 <code class=\"language-text\">Callback</code>，依照各種 action 的類別執行相對應的資料操作。</p>\n<h3 id=\"store-emits-change-event-to-view\" style=\"position:relative;\"><a href=\"#store-emits-change-event-to-view\" aria-label=\"store emits change event to view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Emits \"Change\" Event to View</h3>\n<p>當你的 Store 資料做完更新後，要告訴前端頁面去刷新視圖，通常可以在 Store 註冊的 Callback 中執行以下動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// trigger \"Change\" event 通知View去做更新</span>\n      PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接著，如果你是搭配 React 當作你的 View 的話，可能會在 <code class=\"language-text\">componentDidMount</code> 時，binding 一個 Store listener</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">PhotoStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>photoChange <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>在 listener 中重新 fetch store 資料，並且 setState 來 re-render Component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">photoChange</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> newPhotoData <span class=\"token operator\">=</span> PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      photos<span class=\"token operator\">:</span> newPhotoData\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你的 Component 的 render function 大概會像這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> photosComponet <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">photo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'photo'</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photo<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photosComponet<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看完簡單的 Flux 介紹後，讓我們再複習一次 Flux 的流程圖</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<p>相信在業界打滾多年的 Developer 們應該早有疑惑了，Flux 的那張圖，跟最原始的 MVC 圖不是很像嗎？！</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png\" alt=\"MVC definition in wikipedia\" title=\"MVC definition in wikipedia\"></p>\n<p>User 操作 View 所產生的任何 event，都會經由 Controller 來修改與更動相關的 Model，而 Model 再告知 View 是否需要做更動，聽起來也是蠻 <code class=\"language-text\">one-way direction</code> 的呀。</p>\n<p>事實上，MVC 跟 Flux 都只是一個概念，因此有各種不同的實作，加上 MVC 在<code class=\"language-text\">資料流</code>的處理上，並不像 Flux 一般有較為明確的定義，多數時候 Model 的更動與 View 的刷新可能會透過 Controller 來管理，讓 Model 單純存放 data。</p>\n<p>如此一來，假若今天 View 的操作更動了 Model，而 Model 的變化又刷新了 View，在系統龐大的時候，一來一往，就會讓你的資料與頁面狀態變得非常複雜，要追蹤某個頁面的變動到底是誰觸發的，或是哪個資料改變了，你必須從 Controller 去慢慢 trace。而若是遵照 Flux 的流程，任何 View 的 update 都只要去追蹤其 State 的來源 Store 即可，有一個明確的 flow 可以遵循，並且每個 View 所需要監聽的資料來源，可以依照 Store 來區分，這之間的資料流不會互相干擾。\n另外一個 Flux 的好處是，能夠更輕鬆的做出更 Unit 的 Unit test。這是你在複雜的 Controller 中難以達成的。</p>\n<p>當然，你可能會想：“這是你 MVC 用得不好“。 </p>\n<p>我覺得這樣講也沒什麼不對，如果你 MVC 用得很熟很順手，的確單單是 Flux 這個東西對你的誘因可能不高，但當一間明星公司大力 Promote，對於基本概念的定義又夠清楚單純時，還是值得你試試。更別說 Flux 搭配上 React 的宣告式寫法，用起來更是如魚得水。</p>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<p>Flux 做的是：</p>\n<ol>\n<li>改善<code class=\"language-text\">資料狀態</code>與<code class=\"language-text\">視圖狀態</code>的 Data Flow</li>\n<li>讓頁面的狀態 <code class=\"language-text\">Predictable</code></li>\n<li>資料流不會互相污染</li>\n<li>讓你的測試更加容易</li>\n</ol>\n<p>而 MVC 在關注點分離上的貢獻不可小覷，重視在將資料(Model)、視圖(View)、邏輯(Controller)拆開，各自負責各自的工作。</p>\n<p>因此並非是 MVC 不好、不對，所以我們應該採用 Flux；Flux 是在 MVC 建立的基礎下，定義出一個清楚的 <code class=\"language-text\">one-way direction</code> 資料流，並且透過 <code class=\"language-text\">Action</code>、<code class=\"language-text\">Dispatcher</code>與 <code class=\"language-text\">Store</code> 來幫助整個概念的實現。</p>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h3>\n<p>如同前面所提，Flux 的實作有很多種，這邊介紹的只是最基本的流程，很多 Framework 在設計自己的 Dispatcher, Action 與 Store 時，會有不同的方式，或許可以從這邊的比較下去看看</p>\n<ul>\n<li><a href=\"https://github.com/voronianski/flux-comparison\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Comparison</a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Awesome React</a></li>\n</ul>\n<p>參考資料</p>\n<ul>\n<li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux for stupid people</a></li>\n<li><a href=\"http://www.infoq.com/news/2014/05/facebook-mvc-flux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook: MVC Does Not Scale, Use Flux Instead</a></li>\n</ul>","id":"80f48bd4-139f-5ec5-bdbf-8c2000d8c7c8","fields":{"slug":"flux-vs-mvc"},"frontmatter":{"date":"2016-04-27T22:25:24.000Z","title":"從 Flux 與 MVC 的曖昧關係來介紹 Flux","tags":["flux","mvc","javascript"],"type":"tech","slug":"flux-vs-mvc"},"timeToRead":6}],"tagName":"mvc","type":"tech"}},"staticQueryHashes":["2123680655"]}