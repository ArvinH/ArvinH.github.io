{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/flip","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：Massive fusion","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/hB_QW-wDR1k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Massive fusion</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/hB_QW-wDR1k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在前端的世界中，如何優化 performance 一直都是很重要的議題，也常常被拿來當作評斷前端工程師能力的一個依據。效能調教有許多方面可以探討，但最主要的重點就是希望使用者在操作網站時，不會感受到頁面跳動，尤其是當網站有動畫效果時，些微的跳動就會引起使用者注意。</p>\n<p>大概在去年的時候，同事為了解決 CSS Animation 在頁面上的不順暢，研究了不少 hack 技巧，其中一個讓我覺得很特別的就是今天的主角：FLIP。</p>\n<p>FLIP 技巧已經出來好幾年了，但我也是去年才知道，今天這篇算是個複習與回顧，順便分享給還不知道此技巧的讀者。</p>\n<h2 id=\"什麼是-flip為什麼我們需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-flip%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 flip為什麼我們需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 FLIP？為什麼我們需要它？</h2>\n<p>在開始介紹 FLIP 之前，必須先說明一下我們在製作 CSS 動畫時，可能會遭遇的效能問題。</p>\n<p>舉例來說，今天我們想要製造一個如下效果的動畫：</p>\n<p><img src=\"/image/flip-bad-sample.gif\" alt=\"Bad animation\">\n<a href=\"https://codepen.io/arvin0731/pen/wYXJdv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code link</a></p>\n<p>我們通常會需要調整 DOM 元素的位置與大小，而這類的操作會造成瀏覽器偵測到潛在的 Layout 改變，而重新從 pixel pipeline 的 Layout 階段開始 reflow 與 repaint，若同時在這階段進行其他 js 操作或是頁面互動，就會降低 fps，也就代表著頁面可能會掉幀，造成視覺上的跳動。</p>\n<p>當然在目前硬體設備越來越強大的狀態下，其實像上圖中的動畫很難會有問題，但若是背後有其他繁重的 js 在運作，還是有可能出現下面這樣的 fps 狀態：</p>\n<p><img src=\"/image/flip-bad-jank.png\" alt=\"Jank FPS\"></p>\n<p>解決方法通常就是要想辦法將這類花費昂貴的動畫改用 <code class=\"language-text\">transform</code>、<code class=\"language-text\">opacity</code> 來製作，讓動畫的進行能在 Composite 階段進行即可，不須動到 Layout。</p>\n<p>這時候就可以引入 FLIP 技巧來幫忙了！透過 FLIP 可以將那些會導致 Layout 更動的動畫，轉成以 <code class=\"language-text\">transform</code> 這樣的屬性來達成。</p>\n<h2 id=\"flip\" style=\"position:relative;\"><a href=\"#flip\" aria-label=\"flip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h2>\n<p>如果你直接 google 搜尋 FLIP，可能會查到滑板教學；搜尋 FLIP CSS，應該會出現卡片翻轉的動畫教學。</p>\n<p>那到底 FLIP 跟網頁動畫的優化有什麼關係呢？</p>\n<p>FLIP 其實是四個字的組合：<strong>F</strong>irst, <strong>L</strong>ast, <strong>I</strong>nvert, <strong>P</strong>lay：</p>\n<ul>\n<li><strong>F</strong>irst：在 FLIP 技巧中，我們需要先記錄下動畫元件的初始狀態。</li>\n<li><strong>L</strong>ast：接著進行一些運算後，套用動畫的最終狀態在動畫元件上，並且將完成動畫後的狀態記錄下來。</li>\n<li><strong>I</strong>nvert：FLIP 最主要的 hack 就是發生在這個階段。根據前兩個步驟，我們可以知道該動畫物件在動畫期間的位置變化，接著利用 <code class=\"language-text\">transform</code> 與 <code class=\"language-text\">scale</code>，將物件從動畫結尾位置移動回初始狀態的地點。</li>\n<li><strong>P</strong>lay：在最後的步驟時，元件已經被我們 <code class=\"language-text\">transform</code> 回起始點了，這時只要將 <code class=\"language-text\">transform</code> 屬性移除，並加上 <code class=\"language-text\">transition</code> 的效果，我們就能完美的消除原先昂貴的 Layout change，改以能擁有獨自 Layer 的 <code class=\"language-text\">transform</code> 來處理動畫效果。</li>\n</ul>\n<p>文字敘述可能不夠好懂，<a href=\"https://twitter.com/davidkpiano\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid</a> 做的這個範例應該就能非常清楚的說明 FLIP 原理：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"EbwrQQ\" data-default-tab=\"result\" data-user=\"davidkpiano\" data-pen-title=\"How the FLIP technique works\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/davidkpiano/pen/EbwrQQ/\">How the FLIP technique works</a> by David Khourshid (<a href=\"https://codepen.io/davidkpiano\">@davidkpiano</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>解釋起來其實會發現跟 FLIP 這個字其實也是很吻合的，把元件從結束狀態 ”翻“ 回初始狀態。</p>\n<p>看到這邊可能會有些人覺得困惑，為什麼要這麼麻煩，不能直接用 <code class=\"language-text\">transform</code> 搭配 <code class=\"language-text\">transition</code> 將元件移動至結束位置嗎？</p>\n<p>的確是可以，但如果你今天是要優化原先寫好的動畫，變成要重新手動計算 <code class=\"language-text\">transform</code> 的位置與 <code class=\"language-text\">scale</code> 的比例，是件麻煩的事，倒不如讓瀏覽器幫你處理這部分的計算，只要算出起點與終點位置的差異即可。</p>\n<p>此外，將元件先移至結束位置，再 <code class=\"language-text\">transform</code> 回去起點的方式，可以讓瀏覽器先知道這個動畫會走的過程，據說有助於更快的處理動畫。（但我沒有實際測試過，並非百分百確定有這種效果，也歡迎大家幫忙補充！）</p>\n<h2 id=\"接著我們實際做做看\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E5%AF%A6%E9%9A%9B%E5%81%9A%E5%81%9A%E7%9C%8B\" aria-label=\"接著我們實際做做看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們實際做做看</h2>\n<p>依照 FLIP 原則，我們將一開始的動畫做點調整：</p>\n<ul>\n<li><strong>F</strong>irst：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Fisrt: 記錄初始狀態</span>\n<span class=\"token keyword\">const</span> collapsed <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>L</strong>ast：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 進行運算, 套用動畫結尾的 css style</span>\nelem<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Last: 紀錄結束狀態</span>\n<span class=\"token keyword\">const</span> expanded <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>I</strong>nvert：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// INVERT</span>\n<span class=\"token comment\">// 根據在 F 與 L 紀錄的位置，我們算出其位置差距 (top 與 left)</span>\n<span class=\"token keyword\">const</span> invertedTop <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedLeft <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 大小的部分則是用寬高差去計算 scale 的比例</span>\n<span class=\"token keyword\">const</span> invertedWidth <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedHeight <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 設定 transform origin，代表動畫要從哪裡開始</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transformOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'top left'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 將算好的差距 apply 到 transform 屬性上</span>\n<span class=\"token comment\">// 這樣就能將元件 ”翻“ 回初始位置</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'translate('</span> <span class=\"token operator\">+</span> invertedLeft <span class=\"token operator\">+</span> <span class=\"token string\">'px, '</span> <span class=\"token operator\">+</span> invertedTop <span class=\"token operator\">+</span> <span class=\"token string\">'px) scale('</span> <span class=\"token operator\">+</span> invertedWidth <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> invertedHeight <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>P</strong>lay：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// PLAY</span>\n<span class=\"token comment\">// 利用 Raf，在下個 frame 開始時再做動畫</span>\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 設定 transition，並移除 transform，讓他再 \"翻\" 到結尾位置</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">'550ms ease-out'</span><span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>經由 FLIP 技巧調整過後的動畫：</p>\n<p data-height=\"713\" data-theme-id=\"dark\" data-slug-hash=\"EdRwmr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-pen-title=\"FLIP - good\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/EdRwmr/\">FLIP - good</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>我一開始看到這個實作時，稍微有點困惑，覺得為什麼可以直接先加上結尾狀態的 css，而不會讓元件真正更動？</p>\n<p>原因很簡單，就在於這些動作是在瀏覽器繪製下一個 frame 之前就做完的，在瀏覽器真正過了 16ms，要開始繪圖時，我們已經 apply 了另一個繪圖需求，也就是 <code class=\"language-text\">transform</code>。所以並不會看到元間跑到結束位置的狀況。</p>\n<p>從下面這張圖應該會更好理解：</p>\n<p><img src=\"/image/flip-web-fps.png\" alt=\"FPS\">\n<a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>上排黑色箭頭代表每一次的 frame render，下排則是繪圖需求，而紅色可以想做是我們計算結尾位置的動作。可以明顯看到，在每次紅色箭頭的後面，真正開始繪圖前，都有新的繪圖需求會蓋過去，因此瀏覽器並不會渲染紅色箭頭的部分。</p>\n<p>另外這邊要注意兩件事，第一個是 F、L、I 的時間需要掌控在 <strong>100ms</strong> 之內，根據 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Paul Lewis 的 FLIP 介紹文章</a>，使用者在做了互動後，到感知動畫的發生，這中間可以有 <code class=\"language-text\">100ms</code> 的空隙，我們只要能在這 100ms 中將初始與結尾位置計算完，並翻回初始點，使用者就不會感受到任何差異。</p>\n<p><img src=\"/image/flip-user-perception.jpg\" alt=\"user perception\">\n<a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>最後，在這個例子中，我需要利用 <code class=\"language-text\">transitionend</code> 這個事件，在動畫的最後把 <code class=\"language-text\">transition</code> 拿掉，否則下一次要計算動畫終點位置時 <code class=\"language-text\">elem.classList.add('expanded');</code>，就會產生 <code class=\"language-text\">transition</code> 效果，那不是我們要的。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>FLIP 技巧的概念很簡單，但實作起來的確會增加不少程式碼，但好在有不少套件可以使用，也能搭配 Web Animations API (<a href=\"https://github.com/web-animations/web-animations-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">polyfill</a>) 來開發。比較推薦的是 <a href=\"https://github.com/davidkpiano/flipping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid 的 flipping.js</a>，他在去年也有寫了一篇文章來介紹 <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a>，其中還有講到如何將 FLIP 應用在兩個獨立的元件上，寫得很棒很清楚，推薦大家直接去閱讀！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a></li>\n<li><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></li>\n<li><a href=\"https://medium.com/outsystems-experts/flip-your-60-fps-animations-flip-em-good-372281598865\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your 60 FPS Animations, FLIP ’Em Good</a></li>\n<li><a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your Animations</a></li>\n</ol>","id":"fad35fd6-9d68-5f2f-894c-29dac6638623","fields":{"slug":"flip-your-animation"},"frontmatter":{"date":"2018-10-20T17:46:57.000Z","title":"FLIP 技巧總複習","tags":["css","javascript","flip","animation"],"type":"tech","slug":"flip-your-animation"},"timeToRead":7}],"tagName":"flip","type":"tech"}},"staticQueryHashes":["2123680655"]}