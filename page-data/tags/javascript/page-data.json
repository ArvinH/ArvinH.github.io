{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/javascript","result":{"pageContext":{"posts":[{"excerpt":"source map 就是那種你每天都會看到、用到，但可能從來不曉得他怎麼運作的東西，這篇文章帶你一探究竟。","html":"<p>source map 就是那種你每天都會看到、用到，但可能從來不曉得他怎麼運作的東西，這篇文章帶你一探究竟。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>只要你是個前端工程師，或是曾經開發過前端專案，相信對 source map 都不陌生，不管你常用的 bundler/generator 工具是什麼，幾乎都有完整的 source map 支援，甚至有各種選項可以配置，但是你知道 source map 的原理嗎？它是怎麼產生的？它又是怎麼幫助我們從 bundler/generator 產生的程式碼中找出對應的原始碼，讓我們方便除錯呢？</p>\n<p>這些問題我也不太清楚，雖然大致上的原理稍微思考一下都能夠猜個八九不離十，但對於實際運作細節從來沒有探討過，因此這週末利用了點時間稍微研究一下，記錄在這篇文章跟大家分享。</p>\n<h2 id=\"source-map-是什麼\" style=\"position:relative;\"><a href=\"#source-map-%E6%98%AF%E4%BB%80%E9%BA%BC\" aria-label=\"source map 是什麼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Map 是什麼</h2>\n<p>簡單來說，source map 就是儲存了原始碼與編譯後程式碼的對應關係之檔案，讓你在開啟 Devtool 時，能讓瀏覽器透過載入 source map 的方式幫助你定位原始碼位置，方便下中斷點除錯。</p>\n<p>以目前的瀏覽器實作來看，都是只有在打開 Devtool 的時候，才會根據它獲取的 source map url 資訊來載入 source map，不會影響網站載入速度與一般使用者的體驗。</p>\n<p>提供瀏覽器 source map url 的方式有兩種，一個是將其寫在編譯後程式碼檔案中，也是大多數現在 bundler/generator 的做法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">parcelRequire</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>o<span class=\"token operator\">=</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeof</span> parcelRequire<span class=\"token operator\">&amp;&amp;</span>parcelRequire<span class=\"token punctuation\">,</span>u<span class=\"token operator\">=</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeof</span> require<span class=\"token operator\">&amp;&amp;</span>require<span class=\"token punctuation\">;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">//# sourceMappingURL=file.map.js</span></code></pre></div>\n<p>另一種則是透過特殊的 http header，讓瀏覽器在 request 你的 javascript 檔案時，能夠從 header 欄位中找到 source map url 資訊：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">X-SourceMap: /path/to/file.js.map</code></pre></div>\n<p>順帶一提，Devtool 載入 source map 的 request 並不會出現在 Network panel，所以基本上是看不到的。</p>\n<p>這在一般使用情境上是沒什麼影響，但我前陣子有個專案部署到測試環境後，卻發現 source map 載入失敗，這時想要確認原因就麻煩了，翻了翻 chrome devtool 的<a href=\"https://github.com/ChromeDevTools/devtools-frontend/blob/ce4865088d055b3997b62f397d220babc5c294d0/front_end/sdk/PageResourceLoader.js#L286\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>，才勉勉強強猜測出是因為 devtool 載入 source map 時，不會因為你在瀏覽器中 simulate mobile mode，而跟著送出 mobile 的 user agent，而該專案的 CDN 有設定會將來自 desktop 的 request 轉到特殊的頁面，因此才導致 dev tool 的 source map 載入失敗。如果能看到載入 source map 的 request，這個問題就能更好的確認與解決了。</p>\n<h2 id=\"souce-map-的內容\" style=\"position:relative;\"><a href=\"#souce-map-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"souce map 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Souce Map 的內容</h2>\n<p>Source Map 是有規格的，主要由 Mozilla 與 Google 工程師撰寫，目前最新版本是 version 3，可以在<a href=\"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a>找到。</p>\n<p>一個 source map 檔案大概長這樣（這是經過 beatify 後的樣子，通常會是壓縮成一行而已）：</p>\n<div class=\"gatsby-highlight\" data-language=\".js\"><pre class=\"language-.js\"><code class=\"language-.js\">{\n    &quot;version&quot;: 3,\n    &quot;sources&quot;: [&quot;logger.ts&quot;],\n    &quot;names&quot;: [],\n    &quot;mappings&quot;: &quot;gBAAgB,EAAE;AA0BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvBA,MAAM,...&quot;,\n    &quot;file&quot;: &quot;logger.js&quot;,\n    &quot;sourceRoot&quot;: &quot;../src&quot;,\n    &quot;sourcesContent&quot;: [&quot;/* eslint-disable no-console */\\nimport { test } from &#39;...&#39;&quot;]\n}</code></pre></div>\n<p>大多數的 bundler/generator 都是使用 Mozilla 的 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件，或是利用該套件的 API 自己去做一些客製化，像是 <a href=\"https://github.com/webpack/webpack-sources/blob/master/lib/SourceMapSource.js#L8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack 就是如此</a>。但也有像是 <a href=\"https://v2.parceljs.org/plugin-system/source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v2 版本的 Parcel，就使用了 C++ 從頭撰寫</a>，號稱效率更高。</p>\n<p>實際檔案內容可能根據你所使用的 bundler/generator 會有些許不同，但都會遵照這個規格。</p>\n<ul>\n<li>version：source map 的版本，目前為 3。</li>\n<li>source：編譯前的文件名稱，是一個 array，因為很多時候你會將多個檔案編譯到一個。</li>\n<li>names：編譯前的變數。可能不是必要欄位，所以大多都是空的。</li>\n<li>mappings：source map 的主要資訊，是一連串編碼，用來表示原始碼與編譯後程式碼的對應訊息。</li>\n<li>file：編譯後的文件名稱。</li>\n<li>sourceRoot：編譯前的檔案之所在位置。</li>\n<li>sourcesContent: 原始碼內容，也是個 array，對應每個檔案的原始碼。</li>\n</ul>\n<p>其中最重要的就是 <code class=\"language-text\">mappings</code> 這個欄位，記錄了編譯前後兩個文件怎麼做對應的資訊。以上面的例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gBAAgB,EAAE;AA0BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvBA,MAAM,...\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>mappings 這個字串裡面有三層資訊：</p>\n<ol>\n<li>用分號 <code class=\"language-text\">;</code> 區隔<strong>編譯後程式碼</strong>的<strong>行</strong>，所以第一個分號前的編碼，對應<strong>編譯後程式碼</strong>的第一行。以上面例子來看，<code class=\"language-text\">gBAAgB,EAAE</code> 就是對應<strong>編譯後程式碼</strong>第一行的編碼。</li>\n<li>用逗號 <code class=\"language-text\">,</code> 隔開的是<strong>編譯後程式碼</strong>某一行內的某個<strong>位置</strong>。以上面例子來看，第一行紀錄了兩個位置的對應編碼，<code class=\"language-text\">gBAAgB</code> 與 <code class=\"language-text\">EAAE</code>。 ---（感謝網友 <a href=\"https://www.coderbridge.com/@davidhcefx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">davidhcefx</a> 指正！）</li>\n<li>最後是一個 Base64 <a href=\"https://en.wikipedia.org/wiki/Variable-length_quantity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VLQ</a> 的編碼，解碼後可以得到<strong>編譯前原始碼</strong>的位置。</li>\n</ol>\n<h3 id=\"何謂-base64-vlq\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-base64-vlq\" aria-label=\"何謂 base64 vlq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 Base64 VLQ</h3>\n<p><strong>VLQ (variable-length quantity)</strong></p>\n<p>VLQ 是一種壓縮 large integers 的編碼方式，同樣一個整數，用數字表示一定會消耗比 VLQ 更多的空間。用 Base64 來表達則可以將 VLQ 表示限縮在 ASCII 的子集中，解決一些語言問題。</p>\n<p>有興趣深入了解的人可以看看 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">svelte</a> 的作者 <a href=\"https://github.com/Rich-Harris\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rich-Harris</a> 的<a href=\"https://github.com/Rich-Harris/vlq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實作</a>，下表範例也是取自其 Readme：</p>\n<table>\n<thead>\n<tr>\n<th>Integer</th>\n<th>Base64 VLQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>C</td>\n</tr>\n<tr>\n<td>123</td>\n<td>2H</td>\n</tr>\n<tr>\n<td>123456789</td>\n<td>qxmvrH</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到以 Base64 VLQ 來表示數字能夠縮減需要的儲存空間。</p>\n<h2 id=\"source-map-如何用-base64-vlq-記錄位置資訊\" style=\"position:relative;\"><a href=\"#source-map-%E5%A6%82%E4%BD%95%E7%94%A8-base64-vlq-%E8%A8%98%E9%8C%84%E4%BD%8D%E7%BD%AE%E8%B3%87%E8%A8%8A\" aria-label=\"source map 如何用 base64 vlq 記錄位置資訊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Map 如何用 Base64 VLQ 記錄位置資訊</h2>\n<p>知道了 source map 是利用 mappings 裡面的 Base64 VLQ 編碼來記錄兩邊程式碼的對應位置關係，我們可以來仔細解析一下 VLQ 的內容，以上面範例中的編碼 <code class=\"language-text\">EAAE</code> 來看，共有四位數，每一個位數都是一個 Base64 VLQ 編碼，各自代表一個資訊：</p>\n<p><img src=\"/image/source-map-base64vlq.svg\" alt=\"source-map-base64vlq\"></p>\n<p>四個欄位裡面：</p>\n<ul>\n<li>第一個欄位：標記在編譯後程式碼的第幾列（column）</li>\n<li>第二個欄位：標記屬於 source 欄位中的哪個檔案</li>\n<li>第三個欄位：標記在編譯前程式碼的第幾行（line number）</li>\n<li>第四個欄位：標記在編譯前程式碼的第幾列（column）</li>\n</ul>\n<p>其實還有第五個欄位，代表屬於 source map 檔案中 <code class=\"language-text\">names</code> 屬性所列的變數中的哪一個，如果 <code class=\"language-text\">names</code> 為空，這邊就不會產生第五個欄位。</p>\n<p>瀏覽器就是透過這些資訊來定位編譯前後程式碼的位置，讓你能輕鬆的除錯。至於瀏覽器怎麼解析跟實際顯示在 devtool 中，就不在今天討論範圍，還得去爬他們的程式碼才行，但我估計也是用到 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件。</p>\n<h2 id=\"原始碼的編譯過程中如何產生-source-map\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%A7%8B%E7%A2%BC%E7%9A%84%E7%B7%A8%E8%AD%AF%E9%81%8E%E7%A8%8B%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%A2%E7%94%9F-source-map\" aria-label=\"原始碼的編譯過程中如何產生 source map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原始碼的編譯過程中如何產生 Source Map</h2>\n<p>知道了 source map 的內容後，下個問題來了，編譯過程中，是怎麼產生這些資訊，並儲存在 source map file 中的呢？</p>\n<p>如果有寫過 babel/eslint plugin 或是讀過 <a href=\"https://blog.techbridge.cc/2018/09/22/visit-ast-with-babel-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">透過製作 Babel-plugin 初訪 AST</a> 與 <a href=\"https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">寫一個簡單堪用的 ESLint plugin</a>的讀者應該對於 AST 有些了解，知道程式碼在轉換的過程中，都會經歷如下的歷程：</p>\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"what-ast-play-in-babel\"></p>\n<p>AST（Abstract Syntax Tree）中每個 Node 其實都會記載其位置（<em>start</em> 與 <em>end</em>）：</p>\n<p><img src=\"/image/ast-location-sample.png\" alt=\"ast-location-sample\"></p>\n<p>基本上就提供了我們 source map 所需的資訊，因此 generate 步驟後，除了產生編譯後的程式碼外，也能順帶產生 source map：</p>\n<p><img src=\"/image/source-map-ast-process.png\" alt=\"source-map-ast-process\"></p>\n<p>而如同文章前半段所提，大多數 bundler/generator 會用到 mozilla 的 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件來幫忙在 generate 階段產生 source map，使用方法在其官方 readme 中可以找到，大致上分為兩種：</p>\n<p>第一種是 low level API（官方範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceMapGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  file<span class=\"token operator\">:</span> <span class=\"token string\">\"source-mapped.js\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  generated<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">35</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  source<span class=\"token operator\">:</span> <span class=\"token string\">\"foo.js\"</span><span class=\"token punctuation\">,</span>\n  original<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"christopher\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}'</span></code></pre></div>\n<p>透過 <code class=\"language-text\">SourceMapGenerator</code> 告知其編譯後檔案位置，然後手動加入對照的程式碼行與列資訊，<a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 就能幫忙算出 Based64 VLQ 並產生 source map 檔案。這種作法就是要自己額外維護 AST node 中提供的行列資訊，以及原始碼的行列資訊。</p>\n<p>第二種是 high level API（官方範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"BinaryExpression\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\" + \"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Literal\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad AST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"40 + 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringWithSourceMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    file<span class=\"token operator\">:</span> <span class=\"token string\">\"add.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { code: '40 + 2',</span>\n<span class=\"token comment\">//   map: [object SourceMapGenerator] }</span></code></pre></div>\n<p>high level API 則是直接應用在 AST 中，透過 <code class=\"language-text\">SourceNode</code> 來包裹原有的 AST node，將對應編譯前原始碼的資訊附加上去，最後使用 source-map 提供的 <code class=\"language-text\">toStringWithSourceMap</code> 來輸出原始碼與 source map 檔。</p>\n<p>如果你去看 <code class=\"language-text\">SourceNode</code> 的<a href=\"https://github.com/mozilla/source-map/blob/master/lib/source-node.js#L367-L378\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>，你會發現 <code class=\"language-text\">toStringWithSourceMap</code> 底層也是呼叫了 low levle API，將整個樹的資訊 concat 起來:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  generated<span class=\"token punctuation\">.</span>code <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    original<span class=\"token punctuation\">.</span>source <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    original<span class=\"token punctuation\">.</span>line <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    original<span class=\"token punctuation\">.</span>column <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      lastOriginalSource <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>source <span class=\"token operator\">||</span>\n      lastOriginalLine <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>line <span class=\"token operator\">||</span>\n      lastOriginalColumn <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>column <span class=\"token operator\">||</span>\n      lastOriginalName <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        source<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\n        original<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          line<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span>\n          column<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>column\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        generated<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          line<span class=\"token operator\">:</span> generated<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span>\n          column<span class=\"token operator\">:</span> generated<span class=\"token punctuation\">.</span>column\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 略...</span></code></pre></div>\n<p>兩種 API 都有人使用，<a href=\"https://github.com/babel/babel/blob/main/packages/babel-generator/src/source-map.ts#L28\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 是使用 low level API</a>，而 <a href=\"https://github.com/webpack/webpack-sources/blob/master/lib/SourceMapSource.js#L8-L9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpack 則用到了 high level API</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>至此我們大致上解析了 source map 的內容，並初步了解他是怎麼生成的，如果想要再繼續研究的話，可以往 source-map 的<a href=\"https://github.com/mozilla/source-map/tree/master/lib\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>鑽研，包含 VLQ 的實作也有，或是 webpack、bable 或 parcel 的原始碼也值得一看。</p>\n<p>雖然理解這些原理與否並不影響你開發網站與產品，也不一定能增加你的效率或薪水，但是純粹的學習知識其實也是很快樂的，希望大家看到這邊都能有所收穫！有任何問題歡迎留言指教。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://indepth.dev/posts/1230/source-maps-from-top-to-bottom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source Maps from top to bottom</a></li>\n<li><a href=\"https://kknews.cc/code/3qyaz5g.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解前端代碼的sourceMap原理——讓你不再為調試代碼發愁</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Source Map 詳解</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020808317\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">探究 source map 在編譯過程中的生成原理</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1598223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端面试官: 你知道source-map的原理是什么吗？</a></li>\n<li><a href=\"https://hacks.mozilla.org/2013/05/compiling-to-javascript-and-debugging-with-source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compiling to JavaScript, and Debugging with Source Maps</a></li>\n</ol>","id":"f4ec7f68-940c-50f4-b29d-38db4b01a4bb","fields":{"slug":"how-source-map-works"},"frontmatter":{"date":"2021-03-27T13:41:40.000Z","title":"Source map 運作原理","tags":["source map","javascript","bundler"],"type":"tech","slug":"how-source-map-works"},"timeToRead":10},{"excerpt":"好歌分享：Sunset Rollercoaster - Candlelight feat. OHHYUK","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/kb0whVogBkI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sunset Rollercoaster - Candlelight feat. OHHYUK</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/kb0whVogBkI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Airbnb 一向在前端與設計上有深刻著墨，總能推出質感很好的工具給相關人員使用，而在上個月他們釋出了 v1.0 版本的資料視覺化套件 - <a href=\"https://github.com/airbnb/visx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visx</a>，強調特色是架構在 React 上，提供與類似 D3 的底層 API 來製作圖表。然而結合 React 與 D3 的套件何其多，Airbnb 出品的 visx 與其它產品的差異是什麼，使用起來的感覺又是如何，今天趁著雙十連假，嘗試實際寫寫看，並跟大家分享。</p>\n<p>照例先展示個最終範例：</p>\n<p><img src=\"/image/visx-final-demo.gif\" alt=\"final demo\"></p>\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview\">\n  <img alt=\"Edit SimpleRadar-AQI (with Tooltip + select data)  (react-spring)\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>\n<h2 id=\"visx-簡介\" style=\"position:relative;\"><a href=\"#visx-%E7%B0%A1%E4%BB%8B\" aria-label=\"visx 簡介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>visx 簡介</h2>\n<p>visx 在三年前就已經開源了，當時叫做 vx，一直處於 beta 的狀態，而實際上在 Airbnb 內部已經應用在各種正式環境的專案上兩年多，中間經過許多更新並以 TypeScript 重寫過，才在上個月以 1.0 的版本再次問世。</p>\n<p>如同前言提到的，市面上不乏整合 React 與 D3 的套件可以使用，而且大多數都盡量設計得簡單易用，資料傳進去，一組 Bar Chart 就出來了，為什麼 Airbnb 要在自己打造一套工具呢？</p>\n<p>在官方的 <a href=\"https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> 中他們繪製了一張圖精簡的解釋了這個工具存在的意義：</p>\n<p><img src=\"https://miro.medium.com/max/700/1*K7IJg1Gd_grQEhnos0XiqQ.png\" alt=\"why visx\">\n（偷偷吐槽一下，他們的 logo 放在這圖裡感覺像是在那欄畫了一的大叉叉...)</p>\n<p>那些隨插即用的 Chart library 之所以無法撼動 D3 地位的原因在於缺乏足夠的 Expressive，也就是不夠底層，能夠操控的範圍受限，相對的，D3 則提供了非常多的底層介面讓你能細緻的操作資料與畫面的整合互動。</p>\n<p>然而 D3 對於前端工程師來說，最讓人畏懼的就是其陡峭的學習曲線，尤其當你嘗試將 D3 直接運用在你的 React 專案內時，兩種截然不同的 mental model 與操作 DOM 的方式，相信一定會在你心裡留有芥蒂，當然也容易產生 Bug。</p>\n<p>因此 visx 針對這幾個問題做了解決，提供以下主要特色：</p>\n<ol>\n<li>\n<p>以 Typescript 與 React 實作</p>\n<ul>\n<li>這個 tech stack 組合應該是目前前端主流之一，Airbnb 的官方前端語言就是 Typescript，網站也是以 React 為主，以此組合實作能降低前端工程師踏入資訊視覺化專案的門檻，熟悉的感覺最對味。</li>\n</ul>\n</li>\n<li>\n<p>以模組化的方式提供豐富的底層「畫面操作」元件和少許的 Layout, interaction, svg, data utilities</p>\n<ul>\n<li>前端在乎的不外乎美觀、效率與安全，在操作資訊視覺專案時，面對大量資料，降低 Bundle size 以增加效能就很重要了，比起其他 Chart library，visx 提供各種底層元件讓你自己選擇組裝，要使用的在載入即可，不需要整包裝進去你的 Bundle 內。e.g. <code class=\"language-text\">import { Bar } from '@vx/shape';</code></li>\n</ul>\n</li>\n<li>\n<p>Un-opinionated on purpose</p>\n<ul>\n<li>visx 很大的一個特點是，所提供的模組與元件都是以 React 為基礎實作的，因此無論是狀態管理、動畫操作、CSS solution 等等，你都不需要特別為了 visx 去做處理或是額外的整合，就當作一般寫 React project 即可，你原本如何做動畫、如何 theming, styling，都可以沿用。</li>\n</ul>\n</li>\n<li>\n<p>與 D3 能互相搭配使用</p>\n<ul>\n<li>visx 主要提供底層操作 DOM 的元件，讓前端工程師能用一套 mental modal 處理畫面，而關於 data operation 或 scale function 等運算，visx 設計上就是希望能繼續利用 D3 所提供的強大函式庫來處理。</li>\n</ul>\n</li>\n</ol>\n<p>綜合以上特色，使用 visx 與使用 D3 的最大差異在於，<strong>你不再需要了解 <code class=\"language-text\">d3.select</code>, data join, enter/exit status 等等屬於 D3 根據 data 更新 DOM 的邏輯思路，但又能保有相對 primitives 的元件可使用，而且在進行一些單純的資料運算、scale 函式上，你也還是能使用 D3 提供的 utils。</strong> 其餘的一切都是 React，包含 Layout responsive 等等都是由 React component 來負責。</p>\n<p><img src=\"/image/airbnb-visx-doc.png\" alt=\"visx doc\"></p>\n<h2 id=\"實際演練---台灣六都即時空氣品質指標\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E6%BC%94%E7%B7%B4---%E5%8F%B0%E7%81%A3%E5%85%AD%E9%83%BD%E5%8D%B3%E6%99%82%E7%A9%BA%E6%B0%A3%E5%93%81%E8%B3%AA%E6%8C%87%E6%A8%99\" aria-label=\"實際演練   台灣六都即時空氣品質指標 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際演練 - 台灣六都即時空氣品質指標</h2>\n<p>簡單介紹完 visx 的特色，接著就來實際把玩看看！官方 github 附有一個簡單的 bar chart 圖表，但每次都使用 bar chart 做範例太無趣，因此挑個稍微複雜一點的 Radar chart（雷達圖） 來做範例。</p>\n<p><a href=\"https://vis.baidu.com/chartusage/radar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">雷達圖</a>適合用來呈現多維度的資料，用來展示臺灣六都的幾個重要空氣品質指標項目感覺蠻適合的，加上其 API 在 政府 open data 中又算是比較方便取用的一個...</p>\n<p>API 取自 <a href=\"https://opendata.epa.gov.tw/Data/Details/AQI/?show=all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">行政院環境保護署。環境資源資料開放平臺</a>，每小時會更新一次。</p>\n<p>為了體驗 visx 的特色，這次範例的製作流程大致如下：</p>\n<ol>\n<li>根據 API 資料，利用 visx 元件製作出基本畫面（了解基本使用方法）</li>\n<li>增加資料切換與 tooltip 使用（加一點變化）</li>\n<li>採用 react-spring 增加切換資料時的動畫（確認是否 Un-opinionated on animation）</li>\n<li>採用 d3-scale 來處理顏色變換（了解如何一起運用 D3）</li>\n</ol>\n<p>完整程式碼可以從 <a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?file=/Radar.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeSandbox</a> 上取得，這邊只會擷取重要部分。</p>\n<p>那麼就開始吧！</p>\n<h3 id=\"第一步使用-visx-元件堆疊出基本畫面\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%BF%E7%94%A8-visx-%E5%85%83%E4%BB%B6%E5%A0%86%E7%96%8A%E5%87%BA%E5%9F%BA%E6%9C%AC%E7%95%AB%E9%9D%A2\" aria-label=\"第一步使用 visx 元件堆疊出基本畫面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一步，使用 visx 元件堆疊出基本畫面</h3>\n<p>老實說 visx 官網其實沒什麼文件，都是很基本的 props 類型與介紹，範例就直接丟程式碼給你，唯一一篇手把手教你建立出一個 bar chart 的教學也是<a href=\"https://medium.com/vx-code/getting-started-with-vx-1756bb661410\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三年前</a>寫的。</p>\n<p>在這條件下，最好的學習方式也只有從範例開始，剛好在 visx 官網的 Gallery 已經有個雷達圖的<a href=\"https://airbnb.io/visx/radar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>，可以根據範例進行修改。</p>\n<p>本步驟的結果可以從這個 CodeSandbox 取得：\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-t1qjl?fontsize=14&hidenavigation=1&theme=dark&view=preview\">\n<img alt=\"Edit SimpleRadar-AQI\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a></p>\n<p>首先，資料視覺化的第一步就是準備好資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">URI</span> <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&amp;%24top=1000&amp;%24format=json\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fallbackData<span class=\"token punctuation\">;</span> <span class=\"token comment\">// await (await fetch(URI)).json();</span>\n        <span class=\"token keyword\">const</span> fileterdData <span class=\"token operator\">=</span> data\n          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* data process */</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* data process */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>fileterdData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useDataFetch<span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用先前提到的保護署開放資料 API 來取得即時的六都空氣品質資訊。不過 API response time 很久，一次 request 可能要等個十幾二十秒...所以開發上我多放個 fallback data 擋著，才部會一直沒有畫面出現。</p>\n<p>題外話，visx 也提供一些 mockdata 供你使用，像是 apple stock <code class=\"language-text\">import { appleStock } from '@vx/mock-data';</code>。</p>\n<p>接著我們需要定義一下整個圖表的大小，也就是長寬，你可以定義固定大小的圖表，或是使用 visx 中一個叫做 <code class=\"language-text\">@visx/responsive</code> 的 package，裡面有三種控制元素大小的 HOC 可以使用：<code class=\"language-text\">ParentSize</code>, <code class=\"language-text\">ScaleSVG</code> 和 <code class=\"language-text\">withScreenSize</code>。從名稱很簡單可以看出功能，這邊我採用 <code class=\"language-text\">ParentSize</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParentSize</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Radar</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ParentSize</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">index.tsx</code> 中，直接用 <code class=\"language-text\">ParentSize</code> 包住我的 <code class=\"language-text\">Radar</code> component，將其長寬傳入，如此一來，只要 Parent container size 改變了，我的 Radar component 就會根據新傳入的長寬去進行調整。</p>\n<p>有了 Container 的大小後，接著定義雷達圖的半徑、大小：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> xMax <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> yMax <span class=\"token operator\">=</span> height <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>xMax<span class=\"token punctuation\">,</span> yMax<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> radialScale <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">scaleLinear</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  range<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>degrees<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> yScale <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">scaleLinear</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  range<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webs <span class=\"token operator\">=</span> <span class=\"token function\">genAngles</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token function\">genPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonPoints <span class=\"token operator\">=</span> <span class=\"token function\">genPolygonPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">yScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊基本上只要用過 D3 的人都會覺得熟悉，在真正渲染圖表前，會需要依照資料內容、長度等等製作適當的 scale 函式，來映射適當的元素大小到圖表上。</p>\n<p>雷達圖需要知道的不外乎是資料所在的角度（radialScale）與半徑位置（yScale），visx 的 <code class=\"language-text\">@visx/scale</code> 提供幾種 scale 函式供你使用，基本上他就是在 <a href=\"https://github.com/d3/d3-scale\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-scale</a> 上外加一層 wrapper。</p>\n<p>而雷達本身的點與線段（<code class=\"language-text\">genAngles</code>, <code class=\"language-text\">genPoints</code>, <code class=\"language-text\">genPolygonPoints</code>），基本上都是基本的數學運算，跟 visx 本身關係不大，這邊不詳述細節，可以到<a href=\"https://codesandbox.io/s/simpleradar-aqi-t1qjl?fontsize=14&hidenavigation=1&theme=dark&view=preview\">\n<img alt=\"Edit SimpleRadar-AQI\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>查看實際程式碼。</p>\n<p>scale 函式也準備就緒後，就可以來創建雷達圖表本身了：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Radar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>visx 的元件基本上都預期你將其 render 在 <code class=\"language-text\">svg</code> 元素內。</p>\n<p>接著載入幾個建立雷達圖需要的 packages：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Group <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/group\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Line<span class=\"token punctuation\">,</span> LineRadial <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/shape\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/text\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Group</code>, <code class=\"language-text\">Line</code> 與 <code class=\"language-text\">Text</code> 基本對應 svg 內的 <code class=\"language-text\">g</code>, <code class=\"language-text\">line</code> 和 <code class=\"language-text\">text</code>；<code class=\"language-text\">LineRadial</code> 則是 visx 提供的 <a href=\"https://airbnb.io/visx/docs/shape\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shape</code> 元件</a>。</p>\n<p>組合起來的 render function：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">rx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">14</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Group</span></span> <span class=\"token attr-name\">top</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>levels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LineRadial</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">web-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>webs<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">angle</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">radialScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">radius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> levels<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>silver<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeLinecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Line</span></span>\n          <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">radar-line-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">from</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>zeroPoint<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>silver<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span>\n          <span class=\"token attr-name\">textAnchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">verticalAnchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">dx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">dy</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polygon</span>\n      <span class=\"token attr-name\">points</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonPoints<span class=\"token punctuation\">.</span>pointString<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>orange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fillOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>orange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>polygonPoints<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">radar-point-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">cx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">cy</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">r</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pumpkin<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Group</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>到這邊可以發現，你就是在寫 React 而已，把 visx 提供的 component 堆疊到 <code class=\"language-text\">svg</code> 元素中，然後把 data 當作 props 傳入即可，不用再去思考什麼 <code class=\"language-text\">d3.select</code>，更不用理解 D3 中 <code class=\"language-text\">enter/exit</code> 等資料更新狀態。</p>\n<p>到這邊為止就能繪製出這樣的圖表：</p>\n<p><img src=\"/image/simple-AQI.png\" alt=\"simple-AQI\"></p>\n<h3 id=\"增加資料切換與-tooltip-使用\" style=\"position:relative;\"><a href=\"#%E5%A2%9E%E5%8A%A0%E8%B3%87%E6%96%99%E5%88%87%E6%8F%9B%E8%88%87-tooltip-%E4%BD%BF%E7%94%A8\" aria-label=\"增加資料切換與 tooltip 使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>增加資料切換與 tooltip 使用</h3>\n<p>在上一步中，只有繪製一份資料的圖表，現在是時候把六個直轄市的資料都放進來，並且加上 tooltip 來呈現詳細資訊，這樣才是一個合格的資訊圖表。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDataFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">,</span> setSelectedIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>info <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更新資料的部分，直接用 <code class=\"language-text\">useState</code> 去更改要傳入給 component 的 props 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Selector</span></span> <span class=\"token attr-name\">setSelectedIdx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setSelectedIdx<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">apiData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>apiData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>可以與其他 react component 結合，這邊我額外實作一個 selector component 來切換六都資料。</p>\n<p>當資料切換，<code class=\"language-text\">setSelectedIdx</code> 被呼叫，component 重新 render，所有 <code class=\"language-text\">svg</code> 內我們堆疊的 component 也都會進行更新，就是 React 的邏輯。</p>\n<p>而 tooltip 的部分，可以利用 <a href=\"https://airbnb.io/visx/docs/tooltip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">@visx/tooltip</code></a> 來完成，<code class=\"language-text\">@visx/tooltip</code> 跟目前主流的 react 套件一樣，提供 hook 與 HOC 兩種方法可供使用：</p>\n<p>Hooks: <code class=\"language-text\">useTooltip()</code>, HOC: <code class=\"language-text\">withTooltip()</code></p>\n<p>這次的範例我採用 Hooks：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    tooltipData<span class=\"token punctuation\">,</span>\n    tooltipLeft<span class=\"token punctuation\">,</span>\n    tooltipTop<span class=\"token punctuation\">,</span>\n    tooltipOpen<span class=\"token punctuation\">,</span>\n    showTooltip<span class=\"token punctuation\">,</span>\n    hideTooltip\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleMouseOver <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">coords<span class=\"token punctuation\">,</span> datum</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">showTooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        tooltipLeft<span class=\"token operator\">:</span> coords<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n        tooltipTop<span class=\"token operator\">:</span> coords<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n        tooltipData<span class=\"token operator\">:</span> datum\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>showTooltip<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useTooltip()</code> 回傳 tooltip 內的資料、位置、現在開啟與否，以及控制顯示與隱藏 tooltip 的函式。搭配一些 event handler 就能輕鬆達成 tooltip 功能。</p>\n<p>至於 tooltip 本身的元件，並不是由 Hooks 回傳，得從 <code class=\"language-text\">@visx/tooltip</code> 中載入 <code class=\"language-text\">Tooltip</code>。此外，這個 <code class=\"language-text\">Tooltip</code> 元件其實蠻雷的，他跟其他的 visx component 不同，不是讓你繪製在 <code class=\"language-text\">svg</code> 內，而是 render 出一個 <code class=\"language-text\">div</code>，要小心不要跟其他 component 一起放到 <code class=\"language-text\">svg</code> 內了。</p>\n<p>另外，<code class=\"language-text\">Tooltip</code> 使用 <code class=\"language-text\">position: absolute</code> 來控制位置，這代表著你必須需要提供他一個 Wrapper 是 <code class=\"language-text\">position: relatieve</code>，才能正確地顯示相對位置，這並不是這麼好調整，算是 visx 我使用起來覺得有待改善的部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token operator\">:</span> <span class=\"token string\">'relative'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* other components */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>tooltipOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">top</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipTop <span class=\"token operator\">+</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipLeft <span class=\"token operator\">+</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipStyles<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>tooltipData<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Tooltip</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>此步驟成果如下：</p>\n<p><img src=\"/image/select-tooltip.png\" alt=\"selector-tooltip\">\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-jjb8v?fontsize=14&hidenavigation=1&theme=dark\">\n<img alt=\"Edit SimpleRadar-AQI (with Tooltip + select data) \" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a></p>\n<h3 id=\"使用-react-spring-讓畫面動起來\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-react-spring-%E8%AE%93%E7%95%AB%E9%9D%A2%E5%8B%95%E8%B5%B7%E4%BE%86\" aria-label=\"使用 react spring 讓畫面動起來 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 react-spring 讓畫面動起來</h3>\n<p>基本功能都完成後，就得來加上點動畫，順便體驗看看 visx 所謂的 <strong>un-opinionated on purpose</strong> 是什麼感覺。</p>\n<p>如果是用 D3 繪製圖表，當你要製作動畫時，必須得注意資料的 join 狀態，在沒有了解 <code class=\"language-text\">enter/exit</code> 的概念前，要讓 d3 圖表動起來，會感覺是盲人摸象看不清。</p>\n<p>而使用 visx 的話，基本上你要操控的就是將資料當作 props 傳入的 component，要套上哪一套 react animation library 都可以，我採用 <a href=\"https://www.react-spring.io/docs/hooks/basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a> 來將 polygon 在資料切換時做位移的 transform：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSpring<span class=\"token punctuation\">,</span> animated <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-spring\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>react-spring 的用法也算簡單，提供一個 <code class=\"language-text\">useSpring</code> Hooks 來產生一個 spring（moves data from a -> b）：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> polygonPoints <span class=\"token operator\">=</span> <span class=\"token function\">genPolygonPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">yScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonProps <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> points<span class=\"token operator\">:</span> polygonPoints<span class=\"token punctuation\">.</span>pointString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們想要讓 polygon points 變動時有動畫效果，方法就是透過 <code class=\"language-text\">useSpring</code> 針對 polygon points 生成一個 spring，然後將該 spring 傳入以 <code class=\"language-text\">animated.polygon</code> 取代的 polygon 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>&lt;animated.polygon\n<span class=\"token prefix inserted\">+</span> points={polygonProps.points}\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>&lt;polygon\n<span class=\"token prefix deleted\">-</span> points={polygonPoints.pointString}\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> fill={polygonColor}\n<span class=\"token prefix unchanged\"> </span> fillOpacity={0.3}\n<span class=\"token prefix unchanged\"> </span> stroke={polygonColor}\n<span class=\"token prefix unchanged\"> </span> strokeWidth={1}\n</span>/></code></pre></div>\n<p>每當資料切換，component 重新 render 時，新產生的 spring 就會被傳給 <code class=\"language-text\">animated.polygon</code>，<code class=\"language-text\">react-spring</code> 就會幫我們進行其中的補間動畫。完全不需要思考什麼 data enter, data exit，就是單純的 react component animation：</p>\n<p><img src=\"/image/visx-final-demo.gif\" alt=\"final demo\"></p>\n<h3 id=\"搭配-d3-scale-進行資料與顏色運算\" style=\"position:relative;\"><a href=\"#%E6%90%AD%E9%85%8D-d3-scale-%E9%80%B2%E8%A1%8C%E8%B3%87%E6%96%99%E8%88%87%E9%A1%8F%E8%89%B2%E9%81%8B%E7%AE%97\" aria-label=\"搭配 d3 scale 進行資料與顏色運算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭配 d3-scale 進行資料與顏色運算</h3>\n<p>最後再加上一點顏色變化，也試試看 D3 與 visx 的搭配。</p>\n<p>以 d3-scale 來負責顏色的運算，讓 visx 負責圖表元件的渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> scaleSequential <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-scale\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> max <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-array\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> interpolateOrRd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-scale-chromatic\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 <code class=\"language-text\">scaleSequential</code> 搭配 <code class=\"language-text\">interpolateOrRd</code> 來對應不同 AQI 的數值顏色。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> AQIvalue <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> prev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorScale <span class=\"token operator\">=</span> <span class=\"token function\">scaleSequential</span><span class=\"token punctuation\">(</span>interpolateOrRd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>AQIvalue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonColor <span class=\"token operator\">=</span> <span class=\"token function\">colorScale</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的程式碼可以看出，這邊我們單純的運用資料與 d3 packages 進行運算，產出的顏色直接當作 props 傳入 visx 元件即可完成我們想要的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animated.polygon</span>\n  <span class=\"token attr-name\">points</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonProps<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonColor<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">fillOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonColor<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>如此一來就大功告成啦！完整版程式碼請參考：</p>\n<iframe src=\"https://codesandbox.io/embed/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"SimpleRadar-AQI (with Tooltip + select data)  (react-spring)\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>visx 的使用體驗蠻好的，提供底層的元件讓你自己組裝，搭配上 d3 方便的資料處理套件，基本上可以用來建造屬於你們自己 team 內的 chart library。</p>\n<p>雖然已經開發三年，但感覺得出來還是有不少功能需要加入或改善，他們的 maintainer 目前還算蠻積極在回應 issue，若是看到這邊的讀者有興趣，歡迎去玩玩看，翻翻他們的程式碼，說不定也有你能貢獻的地方！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/airbnb/visx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visx</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introducing visx from Airbnb</a></li>\n<li><a href=\"https://vis.baidu.com/chartusage/radar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECharts 數據可視化實驗室</a></li>\n</ol>","id":"c53702ba-6ae8-5070-be74-c3f9a8386736","fields":{"slug":"datavis-visx"},"frontmatter":{"date":"2020-10-10T13:41:40.000Z","title":"使用 visx 製作資料圖表-台灣六都即時空氣品質指標","tags":["data visualization","visx","Airbnb","javascript","AQI"],"type":"tech","slug":"datavis-visx"},"timeToRead":14},{"excerpt":"好歌分享：MONKEY MAJIK × 岡崎体育 / 留学生","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/lvEVP7NPklU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MONKEY MAJIK × 岡崎体育 / 留学生</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/lvEVP7NPklU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前陣子在公司的專案裡頭想引用 <a href=\"https://github.com/conventional-changelog/standard-version\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standard-version</a> 這套工具來優化 release changelog 的過程，但發現雖然可以用 <code class=\"language-text\">commitlint</code> 或是 <code class=\"language-text\">commitizen</code> 來輔助大家遵循 commit message 的 convention，卻沒辦法簡單的控制 Pull Request 的 title 格式，或是在 GitHub 上 squash merge 時的 commit format，雖然不是太大的問題，code review 的時候稍微注意一下即可，但還是很希望能有個工具來幫忙，心靈上會舒服些。</p>\n<p>GitHub 的 marketplace 上其實找得到可用的 GitHub Apps，可惜公司 policy 的緣故，無法直接使用，試想了ㄧ下原理與實作方法的選項，覺得足夠簡單，可以自己實作，順便學習如何製作 GitHub App，並以這篇文章與大家稍作分享。原始碼分享於此 - <a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<p>效果大致如下，依據你的 PR title 有無符合特定格式，改變 status check 的狀態：</p>\n<p><img src=\"/image/prlint-serverless-demo.gif\" alt=\"DEMO\"></p>\n<h2 id=\"需求分析\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\" aria-label=\"需求分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需求分析</h2>\n<p>想達成 Demo 的功能，我們需要監聽 Pull Request 被 Create、Update 的事件，並且透過 GitHub API 將 Pull Request 上的狀態做更改。</p>\n<p>而要能監聽 GitHub 上的事件，想必是需要設定 webhook endpoint 給 GitHub 呼叫。若是幾年前的我，大概直覺會想到去 Heroku 或是 Digital ocean 開一個最低規格的機器來架 server，但現在我們有了各種 serverless 服務可以使用，AWS Lamda、GCP Cloud Function、Azure Function 等等，基本上只要寫好一個 function 就能 deploy 上去當作 webhook 給其他服務呼叫了。用什麼都可以，但因為公司使用的是 GCP 平台，所以我也就順勢採用 Cloud Function 來作為我的 webhook endpoint。</p>\n<p>總結所需要的技術只有兩個：GitHub API 與 Cloud Function。</p>\n<h2 id=\"github-api\" style=\"position:relative;\"><a href=\"#github-api\" aria-label=\"github api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub API</h2>\n<p>GitHub 開放的 API 很多，每個 API 可以控制的權限分得很細，官方文件針對每個 API 的參數、用法都有提供範例與解釋，不過我覺得有些專屬於 GitHub API 的名詞還是需要花點時間去額外搜尋資料釐清。</p>\n<p><img src=\"/image/github-api-docs.png\" alt=\"github api doc\"></p>\n<p>目前 GitHub 上有使用 GraphQL 的 <a href=\"https://developer.github.com/v4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v4</a> 版本，以及 Rest API 的 <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v3</a>，兩種都能使用，端看你的需求，這次的實作是採用 Rest API。</p>\n<p>若要監聽 Pull Request 的 event，得用到 - <a href=\"https://developer.github.com/v3/activity/event_types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Event types and payloads API</a>，從中可以找到 <a href=\"https://developer.github.com/v3/activity/event_types/#pullrequestevent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PullRequestEvent</a>，</p>\n<p><img src=\"/image/github-api-pr-event.png\" alt=\"github-api-pr-event\"></p>\n<p>event 回傳的 payload 包藏不少資訊，從 <code class=\"language-text\">action</code> 中可以得知該 event 是被哪種操作所觸發，像是 <code class=\"language-text\">opened</code>, <code class=\"language-text\">closed</code> 或 <code class=\"language-text\">edited</code> 等等。而關於 Pull Request 的詳細內容，會放在 <code class=\"language-text\">pull_request</code> 這個物件裡，從 <a href=\"https://developer.github.com/v3/pulls/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pull Request API</a> 中 <a href=\"https://developer.github.com/v3/pulls/#get-a-pull-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get a pull request</a> 的 <code class=\"language-text\">Response</code> 中，我們可以找到 API 回傳的完整 payload 範例，資訊含量非常多，你在 GitHub UI 看得到的內容都找得到，甚至包含 Repo 的資訊。</p>\n<p>這些豐富的資訊中，有一個 <code class=\"language-text\">statuses_url</code>，這是我們創建 Pull request 狀態的端點，待會我們會再提到，可以從 <a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 了解。</p>\n<h2 id=\"cloud-function\" style=\"position:relative;\"><a href=\"#cloud-function\" aria-label=\"cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud Function</h2>\n<p>了解要使用的 GitHub API 後，接著就是要撰寫我們的 webhook endpoint，也就是 Cloud Function。要開始使用 Cloud Function 很簡單，到你的 GCP project 底下點選 Cloud Functions，按下 <strong>CREATE FUNCTION</strong> 即可。</p>\n<p><img src=\"/image/create-cloudfunction.png\" alt=\"create-cloudfunction\"></p>\n<p>創建 Cloud Function 的頁面上可以設定 function 名稱、要配置的記憶體大小、Trigger 的介面（除了能被 HTTP 的 request 觸發外，也能設定由 Cloud Storage、Firestore、Cloud pub/sub 等等服務來啟動函式執行）</p>\n<p><img src=\"/image/cloud-function-details.png\" alt=\"cloud-function-details\"></p>\n<p>URL 就是此 cloud function 的 endpoint，到時候就是要把這個 url 設定到 GitHub 的 webhook 上。此外，要記得把 <code class=\"language-text\">Allow unauthenticated invocations</code> 的選項打勾，此舉能將該 endpoint 公開給所有人存取，GitHub webhook 也才能打得到這隻 API。</p>\n<p>接著最後就是設定程式碼的部分，你可以直接把程式碼貼上（inline editor）、壓縮成 zip 檔上傳（ZIP upload, ZIP from cloud storage）和連接 repository（cloud source repository）。</p>\n<p>也有多種 runtime 可以選擇：</p>\n<p><img src=\"/image/cloud-function-runtimes.png\" alt=\"cloud-function-runtimes\"></p>\n<p>runtime 結構大同小異，都會有一個 entry file，與一個對應的套件管理檔案，以 NodeJS 為例就是一個 <code class=\"language-text\">index.js</code> 與 <code class=\"language-text\">package.json</code>。因此你要在你的 cloud function 中使用第三方套件是沒問題的。</p>\n<p>另外，也能夠有不同的資料夾結構，將一些邏輯拆分到別的檔案再 import 進來也可以（依照相對路徑存取），但當然就必須選擇 <code class=\"language-text\">ZIP upload</code> 等方式上傳你的專案。</p>\n<p>至於 Cloud Function 的基本結構，可以從 inline editor 提供的範例來觀察，以 NodeJS 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Responds to any HTTP request.\n *\n * @param {!express:Request} req HTTP request context.\n * @param {!express:Response} res HTTP response context.\n */</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">helloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其實就像是 Express 的一個 route 或 middleware 的結構，傳入 <code class=\"language-text\">req</code> 與 <code class=\"language-text\">res</code> 物件讓你操作。</p>\n<p>exports 的名稱則是用在設定中，讓 Cloud Function 知道要呼叫哪個函式：</p>\n<p><img src=\"/image/cloud-funciton-name.png\" alt=\"cloud-funciton-name\"></p>\n<h2 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作</h2>\n<p>你可能會有個疑惑，雖然我們已經知道 cloud function 的結構與設定方式，但難道我每寫完一段程式想要測試一下時，就得重新上傳到 cloud function 一次嗎？</p>\n<p>當然不用，Google Cloud team 有推出一個 <code class=\"language-text\">@google-cloud/functions-framework</code> 套件可以使用，透過 <code class=\"language-text\">functions-framework --target=${function name}</code> 的方式啟動你的 cloud function，會幫你起一個 express server，監聽在 port 8080：</p>\n<p><img src=\"/image/cloud-function-framework-cli.png\" alt=\"cloud-function-framework-cli\"></p>\n<p>接著你可以使用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngrok</a> 將其 expose 成 public access 的 url，就能用來設定在 webhook 上，同時又能一邊持續開發。</p>\n<h2 id=\"結合-github-api-與-cloud-function\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E5%90%88-github-api-%E8%88%87-cloud-function\" aria-label=\"結合 github api 與 cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結合 GitHub API 與 Cloud Function</h2>\n<p>當你有了 webhook url，就可以先到 GitHub repo 去設定看看，實際測試 webhook 與 GitHub API 的串連。方法也很簡單，到你想使用的 repository 中，選擇 <code class=\"language-text\">Settings</code> -> <code class=\"language-text\">Webhooks</code> -> <code class=\"language-text\">Add webhook</code>，就會看到下面的畫面：</p>\n<p><img src=\"/image/git-webhook.png\" alt=\"git-webhook\"></p>\n<p>Payload URL 填入你的 <code class=\"language-text\">ngrok</code> url，Content-type 可以選擇 json 格式。</p>\n<p>最後注意一下，你可以選擇哪些 events 會 trigger 你的這隻 webhook，選擇 <code class=\"language-text\">Let me select individual events.</code> 並勾選 <code class=\"language-text\">Pull Requests</code> 的選項，這樣才不會拿到其餘你不需要的事件資訊。</p>\n<p><img src=\"/image/select-individual-event.png\" alt=\"select-individual-event\"></p>\n<p><img src=\"/image/pull-request-event.png\" alt=\"pull-request-event\"></p>\n<p>設定完後回到我們的程式碼，最基礎的 webhook 架構如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prStatus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'opened'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'edited'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ready_for_review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prLint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pull_request<span class=\"token operator\">:</span> pullRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> statuses_url<span class=\"token operator\">:</span> statusesUrl<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pullRequest<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prStatus<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// check pr title</span>\n    <span class=\"token keyword\">const</span> isValid <span class=\"token operator\">=</span> <span class=\"token function\">validatePullReqeustTitle</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// create status</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>依照我們在 <a href=\"#github-api\">GitHub API</a> 所瞭解到的 Event API 與 Pull Request Object，我們知道可以從 <code class=\"language-text\">req.body</code> 中取出 <code class=\"language-text\">pull_request</code> 物件，而在該物件中能取得 <code class=\"language-text\">action</code>、<code class=\"language-text\">title</code> 與 <code class=\"language-text\">statuses_url</code> 兩個我們需要的資訊。</p>\n<p>接著就能實作我們 GitHub App 想要的功能邏輯，包含 filter 掉我們不想要的 action 操作、驗證 Title 是否有符合格式、創建 pull request status 等等。</p>\n<h2 id=\"創建-pull-request-status\" style=\"position:relative;\"><a href=\"#%E5%89%B5%E5%BB%BA-pull-request-status\" aria-label=\"創建 pull request status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>創建 pull request status</h2>\n<p>程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// call status api</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'pass pr lint'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'please check your pr title'</span><span class=\"token punctuation\">,</span>\n  context<span class=\"token operator\">:</span> <span class=\"token string\">'pr-lint'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Token </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessTokens<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>statusesUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'PR lint error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用上來說非常簡單，<a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 接收的 Post body 有四個 properties 可以設置：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"state\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// error, failure, pending, or success.</span>\n  <span class=\"token string\">\"target_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/build/status\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The build succeeded!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"continuous-integration/jenkins\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>state</strong> 就是你想設定的狀態，有四種可以選；<strong>target_url</strong> 則是使用者點選該狀態後要連結去的地方，可以忽略不設；<strong>description</strong> 就是顯示在狀態列的文字；而 <strong>context</strong> 則是讓系統知道這是由第三方 App 所創立的 status。</p>\n<p>要發送 Post API 到 GitHub 上需要有 accessToken，有使用過 webhook 的讀者應該知道，我們可以輕易從 <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 個人 profile settings 中的 Developer options</a> 產生 Personal Token：</p>\n<p><img src=\"/image/github-personal-token.png\" alt=\"github-personal-token\"></p>\n<p>取得 personal token 後填入上方範例程式碼的 <code class=\"language-text\">accessTokens</code>，就能夠發送 Post request 到我們從 pull request event 中取得的 <strong>statuses_url</strong>，在該 Pull Request 的頁面產生一個 Check status：</p>\n<p><img src=\"/image/github-check-status.png\" alt=\"github-check-status\"></p>\n<p>到這邊為止看起來就完成了，只要我們把程式碼部署到 Cloud Function 上，將 Webhook 的 URL 更改成實際的連結，一切就大功告成。</p>\n<p>對，也不對。</p>\n<p>如果你仔細看一下你創建的 Check Status，你會發現因為你用的是 Personal Token，他會顯示該狀態是由你本人產生的：</p>\n<p><img src=\"/image/github-check-status-issue.png\" alt=\"github-check-status-issue\"></p>\n<p>這當然不是太大的問題，但看起來不是很專業，而且當你用在多個公司專案時，總是出現你的大頭貼好像很討人厭啊。要解決這問題，就需要創建 GitHub App 了。</p>\n<h2 id=\"github-app\" style=\"position:relative;\"><a href=\"#github-app\" aria-label=\"github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub App</h2>\n<p>GitHub App 目前有分兩種類型：OAuth Apps 與普通的 GitHub Apps，官網有詳細的<a href=\"https://developer.github.com/apps/differences-between-apps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">差別說明</a>，我們的案例只需要用到一般的 GitHub Apps 即可，一樣在官網有手把手的<a href=\"https://developer.github.com/apps/quickstart-guides/using-the-github-api-in-your-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">創建教學範例</a>。</p>\n<p>我們之所以需要用到 GitHub App，是因為我們想要能夠以 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub App 的名義去取得 AccessToken</a>，利用該 AccessToken 去創建 pull request 的 check status。</p>\n<p>為此，有幾個步驟需要進行：</p>\n<h4 id=\"在-github-上新增一個-github-app\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-github-%E4%B8%8A%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8B-github-app\" aria-label=\"在 github 上新增一個 github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 GitHub 上新增一個 GitHub App</h4>\n<p>在你個人的 <a href=\"https://github.com/settings/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub developer settings 頁面</a> 中，有個 GitHub Apps 的選項，可以 <strong>New GitHub App</strong>：</p>\n<p><img src=\"/image/github-apps-index.png\" alt=\"github-apps\"></p>\n<p>創建的時候有很多欄位可以填選，像是 App 名稱、網站、Logo 等等，但基本上重要的只有 <strong>Webhook</strong> 與 <strong>Repository Permissions</strong>（其實 GitHub App 除了 repository permission 可以設定外，也能設定到 Organization 與 User 兩種不同層級的權限，不過目前我們只需要 repository 層級即可）：</p>\n<p>跟先前我們在 repo 的 webhook 是ㄧ樣的</p>\n<p><img src=\"/image/github-app-webhook.png\" alt=\"github-app-webhook\"></p>\n<p>為了讓我們的 GitHub App 能存取 Repo 的 Pull request 與 status，需要將這兩個的權限設定為 Read&#x26;Write。</p>\n<p><img src=\"/image/github-app-repo-permission.png\" alt=\"github-app-repo-permission\"></p>\n<p>當你設定完後，下方會出現你可以訂閱的 Event，而我們一樣選擇 <em>pull request</em>：</p>\n<p><img src=\"/image/github-app-subscribe-event.png\" alt=\"github-app-subscribe-event\"></p>\n<h4 id=\"產生該-app-的-private-keys\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F%E8%A9%B2-app-%E7%9A%84-private-keys\" aria-label=\"產生該 app 的 private keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生該 App 的 Private keys</h4>\n<p>當你都創建好 App 後，App settings 的頁面最下方會有一個 <strong>Private keys</strong> 的區塊，點選 <code class=\"language-text\">Generate a private key</code> 的按鈕，會自動下載一份 <code class=\"language-text\">.pem</code> 的檔案到你電腦裡，而這把 Key 就是我們用來產生 JWT 的關鍵：</p>\n<p><img src=\"/image/github-app-private-key.png\" alt=\"github-app-private-key\"></p>\n<h4 id=\"利用該-private-keys-去產生-jwtjson-web-token\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E8%A9%B2-private-keys-%E5%8E%BB%E7%94%A2%E7%94%9F-jwtjson-web-token\" aria-label=\"利用該 private keys 去產生 jwtjson web token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用該 Private keys 去產生 JWT（JSON Web Token）</h4>\n<p>產生 JWT 的方式有很多，在 NodeJS 上我是用 <a href=\"https://github.com/auth0/node-jsonwebtoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Auth0 的 jsonwebtoken</a> 這個套件。</p>\n<p>要產生 GitHub App 能使用來取得 AccessToken 的 JWT，需要將一些資訊利用剛剛下載的那把 key 簽署到 JWT 上 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#jwt-payload\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// issued at time</span>\n    iat<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// JWT expiration time (10 minute maximum)</span>\n    exp<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// GitHub App's identifier</span>\n    iss<span class=\"token operator\">:</span> <span class=\"token constant\">YOUR_APP_ID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// https://github.com/settings/apps/${your app}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> privateKey<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    privateKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/../key/your-app.private-key.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> jsonwebtoken<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'RS256'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最主要的資訊是 <code class=\"language-text\">iss</code>，可以從你的 GitHub App 設定頁面取得 App 的 ID，而其餘時間的資訊其實對我們來說不太重要，因為每次 Cloud Funciton 被呼叫的時候，我們都會重新去申請一次 AccessToken，所以 Expiration 的時間問題不大。</p>\n<p>透過 <code class=\"language-text\">jsonwebtoken.sign</code> 把剛剛下載的 Key 跟相關的 Payload 結合產生 JWT，接著就能拿這個 Token 去申請 AccessToken。</p>\n<h4 id=\"以該-jwt-與-github-app-的-installations-id-去取得屬於該-app-的-accesstoken\" style=\"position:relative;\"><a href=\"#%E4%BB%A5%E8%A9%B2-jwt-%E8%88%87-github-app-%E7%9A%84-installations-id-%E5%8E%BB%E5%8F%96%E5%BE%97%E5%B1%AC%E6%96%BC%E8%A9%B2-app-%E7%9A%84-accesstoken\" aria-label=\"以該 jwt 與 github app 的 installations id 去取得屬於該 app 的 accesstoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>以該 JWT 與 GitHub App 的 installations id 去取得屬於該 App 的 AccessToken</h4>\n<p>要以 GitHub App 的身份取得 AccessToken 需要呼叫的 endpoint 為：</p>\n<p><code class=\"language-text\">POST /app/installations/:installation_id/access_tokens</code> <a href=\"https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a></p>\n<p>其中需要用到 GitHub App 的 installation id，而這個資訊其實也包含在我們 subscribe 的 pull request event 回傳的物件中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>const { pull_request: pullRequest = {}, action } = req.body;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const { pull_request: pullRequest = {}, action, installation } = req.body;</span></code></pre></div>\n<p>在呼叫 access token API 時要注意一點，官方文件特別叮囑：</p>\n<blockquote>\n<p>Note: To access the API with your GitHub App, you must provide a custom media type in the Accept Header for your requests. </p>\n</blockquote>\n<p>所謂的 custom meida type 就是 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，因此在呼叫 API 時記得要將 Accept 改成該類型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAccessToken</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>installationId <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get a JWT every time</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">JWT</span> <span class=\"token operator\">=</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">GITHUB_API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/installations/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>installationId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/access_tokens</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/vnd.github.machine-man-preview+json'</span><span class=\"token punctuation\">,</span>\n        Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JWT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-console</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> exception <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"修改-api-request-header\" style=\"position:relative;\"><a href=\"#%E4%BF%AE%E6%94%B9-api-request-header\" aria-label=\"修改 api request header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改 API request Header</h4>\n<p>最後取得 AccessToken 後，回到我們最初發送 Status API 的 request，將原有的 personal access token 取代掉，並將 Accept header 也改為 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，就大功告成了！</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">const headers = {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Authorization: `Token ${personal accessToken}`,\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Authorization: `Token ${github app accessToken}`,\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Accept: 'application/json',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Accept: 'application/vnd.github.machine-man-preview+json',\n</span>};</code></pre></div>\n<p>透過 GitHub App 取得的 AccessToken 所創建的 Check status 運作起來就會有這樣的效果，就是個第三方 App 所產生的，而不是你個人的大頭照：</p>\n<p><img src=\"/image/github-app-final.png\" alt=\"github-app-final\"></p>\n<p>完整程式碼請參考：<a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一個不小心似乎又把篇幅拉得太長，使用 GitHub App 與 Cloud Function 其實真的很簡單，只是步驟稍微多了些，但每一個步驟都只需要做一點點事情，或是設定一些資訊，只要實作過一次後，要再次使用就會快很多了。</p>\n<p>花費些微的力氣，利用 Serverless 的解決方案搭配 GitHub App/API，能提昇不少生產力，是很值得的投資，希望大家都能試試看！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Developer Guide</a></li>\n<li><a href=\"https://cloud.google.com/functions/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloud Function Docs</a></li>\n<li><a href=\"https://github.com/ewolfe/prlint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prlint github app</a></li>\n</ol>","id":"82bcb2ef-a77c-5d3a-9b38-36499a601a55","fields":{"slug":"github-apps-cloudfunction"},"frontmatter":{"date":"2020-06-14T13:50:00.000Z","title":"利用 Cloud function 製作 GitHub Apps","tags":["GitHub API","javascript","Cloud Function"],"type":"tech","slug":"github-apps-cloudfunction"},"timeToRead":13},{"excerpt":"『You're really lucky you know. You didn't have to wait your whole life to do something special』","html":"<blockquote>\n<p>『You're really lucky you know. You didn't have to wait your whole life to do something special』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>你是否曾因為網路上被歧視、被霸凌的新聞或影片而憤憤不平？你是否曾因為各種身殘心不殘的勵志故事而感到激勵？\n如果你有過上述經驗，那當你在製作網站時，是否曾經考量過 Web Accessibility（a11y） 呢？</p>\n<p>老實說，我真的很少在實作時認真的驗證自己的網站的可訪性，花在考量是否能支援 IE 9 的時間還比較多一些。（想當年在政府機關服務時，看到局處長很自豪官網拿到無障礙網站評等第一時，還覺得莫名其妙，想說網站這麼醜，到底哪裡無障礙 XD）</p>\n<p>在實作的時候，PM 會拿數據告訴你，有多少用戶是使用舊版的瀏覽器，所以我們需要支援到何種程度，但應該很少 PM 會拿出數據告訴你，有多少 screen reader 來存取我們的網站·。</p>\n<p>然而，光台灣，2018 年的身心障礙人口有一百多萬人，其中視覺障礙的有將近六萬（<a href=\"https://dep.mohw.gov.tw/DOS/lp-2976-113.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛生福利處的資料</a>），美國比例更高，有將近 25% 的身心障礙人口（<a href=\"https://youtu.be/dvtfNpt75aA?t=26101\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">資料來源</a>）。</p>\n<p>依照你產品的用戶比例，這些數據大概無法說服你的 PM，讓他們給你更多時間思考如何增強網站的可訪性，但仔細想想，如果你在乎那些身心健全卻不願意升級自己瀏覽器的人，而不在乎這些走出障礙，連接到網路吸取知識的殘障人士，你是不是無意中在他們的人生道路中增加了更多阻礙，不自覺地成為歧視他人的一方呢。</p>\n<p>今天想透過這篇文章，整理一些資源與簡短的實作要點，喚醒大家對 Web Accessibility 重要性的認知，也是提醒自己在未來實作上必定要多加注意。</p>\n<h1 id=\"使用-screen-reader-的感覺是什麼\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-screen-reader-%E7%9A%84%E6%84%9F%E8%A6%BA%E6%98%AF%E4%BB%80%E9%BA%BC\" aria-label=\"使用 screen reader 的感覺是什麼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 screen reader 的感覺是什麼</h1>\n<p>相信會看到這篇文章的人，多少對於 Web Accessiblity 都有了解，知道是為了輔助障礙人士閱讀網頁內容，平常實作時至少在 <code class=\"language-text\">&lt;img></code> 元素上會加上 <code class=\"language-text\">alt</code> 等文字來描述圖片。但你有真的使用過 screen reader 嗎？你知道使用這些輔助工具上網的人，看到的世界跟你有多大的不同嗎？</p>\n<p>我原本也不知道，直到我試用了 Mac 內建的 VoiceOver，用它來閱讀平常看的網站，像是 wikipedia：</p>\n<iframe style=\"max-width: 560px\" width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/IHm6me_VfyM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>體驗實在很糟，除了機器人的聲調外，外加極快的語速，在你從瀏覽器的分頁標籤移動到真正的網頁內容前，還需經過許多瀏覽器本身按鈕選項的介紹，接著到了網頁內容，文章因為連結的關係，變得破碎（為了讓你知道是連結或是按鈕，在文字內容前都會先朗讀出該段內容的功能性，像是：<em>連結</em>、<em>按鈕</em>），閱讀順序也與我們憑眼睛觀看時的不同。</p>\n<p>然而 Wikipedia 已經算是 a11y 處理得不錯的了，畢竟內容大多也只有文字與圖片。想想看現在這麼多炫麗介面的網站，各種需要使用者與之互動的功能，光用想像的就是悲劇，看一下 Google 大肆宣傳的 AMP Story：</p>\n<iframe style=\"max-width: 560px\" width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/cdPVMDJB37k\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>在強調 Web performance 的同時，web accessibility 也該考量進去。這邊就有<a href=\"https://ethanmarcotte.com/wrote/amphora/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>在討論關於 amp-story 在 a11y 的 <a href=\"https://github.com/ampproject/meta-ac/blob/master/meetings/2019-03-f2f.md#accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a>，不過 ampproject 內是有 accessibility working group 在想辦法解局的。</p>\n<p>上面的 Screen reader 範例比較是針對視障朋友的使用為主，現實中能造成生活不便的可不只有視覺上的困難，還有聽覺、肢體等等，像是滑鼠這類需要高度手眼協調能力的操作，就不是那麼有親和力，因此光是透過鍵盤操作網站的順暢度，就必須好好思考，也是實作 Web Accessibility 時的一大重點。</p>\n<p>如果想快速體驗一下使用 screen reader 的效果，又不想學習 Voiceover 等系統內建 reader 的，可以到 udacity 提供的<a href=\"http://udacity.github.io/ud891/lesson3-semantics-built-in/02-chromevox-lite/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">網站</a> 試試，使用的是 Chrome 的 chromevox-lite 閱讀器，且有刻意將內容模糊化，感受會更真實點。</p>\n<h1 id=\"web-accessibility-的資源與實作要點\" style=\"position:relative;\"><a href=\"#web-accessibility-%E7%9A%84%E8%B3%87%E6%BA%90%E8%88%87%E5%AF%A6%E4%BD%9C%E8%A6%81%E9%BB%9E\" aria-label=\"web accessibility 的資源與實作要點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Accessibility 的資源與實作要點</h1>\n<p>說了許多緣由以及範例，現在來談談該如何學習 Web Accessibility，並實作在我們的網站中。</p>\n<h2 id=\"網絡內容無障礙功能指南---web-content-accessibility-guidelines\" style=\"position:relative;\"><a href=\"#%E7%B6%B2%E7%B5%A1%E5%85%A7%E5%AE%B9%E7%84%A1%E9%9A%9C%E7%A4%99%E5%8A%9F%E8%83%BD%E6%8C%87%E5%8D%97---web-content-accessibility-guidelines\" aria-label=\"網絡內容無障礙功能指南   web content accessibility guidelines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>網絡內容無障礙功能指南 - Web Content Accessibility Guidelines</h2>\n<p>先從 W3C 指南了解 \"無障礙\" 的定義。<a href=\"https://www.w3.org/TR/WCAG21/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">網絡內容無障礙功能指南 (WCAG) 2.1</a>，是 W3C 擬定的無障礙功能指南和最佳做法，旨在有系統地闡述“無障礙功能”的含義。很多國家政府機關都會要求根據此指南來實作網站。</p>\n<p>WCAG 有四大原則：</p>\n<ul>\n<li>可感知（Perceivable）：所有資訊與使用者介面元件都必須要能以各種使用者能感知的方式，呈現給使用者。像是能讓 Screen Reader 閱讀出內容。不能讓使用者透過各種感官都無法感知到內容。</li>\n<li>可操作（Operable）：使用者元件與網頁內容間的導覽都要可操作，不能出現使用者無法操作的介面。</li>\n<li>可理解（Understandable）：呈現給使用者的資訊與操作方式都要能被使用者理解。</li>\n<li>強健（Robust）：不論是被哪種輔助科技工具或是各種 user agents 所存取，網站內容都要能不受影響，呈現給使用者完整的內容，若使用者使用的工具變得更加進步，網站也得跟上腳步，維持內容的存取、閱讀性。</li>\n</ul>\n<p>這是無障礙內容的一個概覽，還可以透過 <a href=\"https://webaim.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAIM</a> 檢查清單，來檢視我們該如何依照 WCAG 的指南實作。</p>\n<h2 id=\"其他資源\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E8%B3%87%E6%BA%90\" aria-label=\"其他資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他資源</h2>\n<p>除了 W3C 的定義指南外，還有許多更親和的資源可以參考，畢竟 Web accessibility 不是很新的議題了，像是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 或是 <a href=\"https://developers.google.com/web/fundamentals/accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google</a> 都有非常詳細的資料與教學，Udacity 上也有相關<a href=\"https://www.udacity.com/course/web-accessibility--ud891\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">課程</a>。</p>\n<p>看完大概都需要花上幾個小時的時間，如果想快速了解的話，其實也已經有不少關於 a11y 的繁中文章，像這篇 - <a href=\"https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">回歸初心，一探 Web Accessibility</a>，簡短精要，整理了上面 Google 與 Udacity 課程的內容，適合快速了解何謂 a11y，而最近<a href=\"https://ithelp.ithome.com.tw/users/20108045/ironman/2454\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">鐵人賽的這系列文</a>也很不錯，蒐集整理非常多資訊，細節很多，可以當作參考工具，在實作時隨時翻閱，推推。</p>\n<p>此外，上面的資源著重在一般的網站上，而身為資料視覺化的愛好者，我很好奇該如何處理 Data visualization 上的 Web Accessibility 問題。</p>\n<p>從 <a href=\"https://www.a11ywithlindsey.com/about\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lindsey</a> 的這篇文章 - <a href=\"https://www.a11ywithlindsey.com/blog/accessibility-d3-bar-charts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Accessibility in d3 Bar Charts</a> 中可以窺知一二。</p>\n<p>主要是要在圖表中加入足夠的描述文字，然後在設計顏色時，使用一些輔助工具如 <a href=\"http://www.color-blindness.com/coblis-color-blindness-simulator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coblis</a> 來建立 color blind friendly 的圖表。</p>\n<p>若是較常使用 SVG 來製作動態圖表的人，推薦研讀一下這篇專門介紹如何為你的 SVG 增強 accessibility 的文章 -  <a href=\"https://css-tricks.com/accessible-svgs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">accessible-svgs</a>，可以為你的資訊圖表在 Web Accessibility 上帶來非常大的改善。</p>\n<h2 id=\"實作要點\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E8%A6%81%E9%BB%9E\" aria-label=\"實作要點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作要點</h2>\n<p>知道了為何需要了解 Web Accessibility，也知道了有哪些資源可以閱讀，接下來根據上面閱讀的資料，簡單總結幾個實作上要關注的重點：</p>\n<h3 id=\"思考網站能以什麼方式瀏覽\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E8%80%83%E7%B6%B2%E7%AB%99%E8%83%BD%E4%BB%A5%E4%BB%80%E9%BA%BC%E6%96%B9%E5%BC%8F%E7%80%8F%E8%A6%BD\" aria-label=\"思考網站能以什麼方式瀏覽 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思考網站能以什麼方式瀏覽</h3>\n<p>這其實是 <a href=\"https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">回歸初心，一探 Web Accessibility</a> 這篇文章中所提到的結論，我覺得蠻有道理的。</p>\n<p>與其思考使用者失去什麼感官能力，不如專注在你的網站能提供哪些方式瀏覽。可能是 screen reader、鍵盤（keyboard）、聲控或眼動儀等其他人機介面。從這些操作介面去思考該怎麼加強自己網站的可訪性。</p>\n<h3 id=\"網頁元件的可聚焦性\" style=\"position:relative;\"><a href=\"#%E7%B6%B2%E9%A0%81%E5%85%83%E4%BB%B6%E7%9A%84%E5%8F%AF%E8%81%9A%E7%84%A6%E6%80%A7\" aria-label=\"網頁元件的可聚焦性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>網頁元件的可聚焦性</h3>\n<p>所謂的可聚焦，指的就是元件能夠成為焦點，而所謂焦點，是指當前螢幕上瀏覽器當下能接收來自鍵盤輸入、剪貼板輸出的元件（字段、複選框、按鈕或連結等輸入項目），更簡單來說，就是使用者此刻正在操作的元件。</p>\n<p>為什麼可聚焦性很重要呢？除了讓使用者知道自己目前所使用的元件外，就是讓 screen reader 知道目前該 read 哪個元件。而瀏覽器一次只能聚焦在一個元件上，這個特性讓 screen reader 不會同時讀到兩個不同元件的描述。</p>\n<p>在一般瀏覽器上頭，被聚焦的元件通常預設會以一個藍色外框包裹住：</p>\n<p><img src=\"/image/outline-blue.png\" alt=\"defaul outline\"></p>\n<p>實務上很多人都會用 <code class=\"language-text\">outline: none</code> 把這個外框拿掉，但實際上是非常不友善的行為，若是不喜歡瀏覽器預設的樣式，可以跟設計師溝通，看要如何修改被聚焦的元件樣式，但記得要能讓使用者注意到樣式的變化，才能幫助他們判斷元件的聚焦與否。如 Youtube 上的回復查看按鈕：</p>\n<p><img src=\"/image/outline-custom.png\" alt=\"custom outline\"></p>\n<p>另外要注意的是，並非所有元件都要設成可聚焦，像是文章內文本身，或是其他即便讓 screen reader 朗讀出來也無法很好傳達意思的元件，其實跳過反而比較不會造成混淆與困擾。</p>\n<h3 id=\"dom-的順序\" style=\"position:relative;\"><a href=\"#dom-%E7%9A%84%E9%A0%86%E5%BA%8F\" aria-label=\"dom 的順序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM 的順序</h3>\n<p>Screen reader 在移動時，會依照 DOM 的順序進行，所以應當盡量將你想要呈現給使用者的內容順序，完整的對應到 DOM 的順序上頭。除此之外，還得注意 CSS 的影響，例如 <code class=\"language-text\">float</code>，就可能會造成視覺上的順序與 DOM 順序有所差異，導致 screen reader 朗讀的次序受到影響與畫面不符：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><button style=\"width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;float: right\">1</button><button style=\"width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;\">2</button><button style=\"width:100px;background:transparent;color:#5050c5;font-size: 1.5rem;\">2</button>\n<br/></p>\n<p>另外，善用 <code class=\"language-text\">tabindex</code>，能夠更好的幫助使用者操作鍵盤（tab）瀏覽網站時的移動順序，無論是跳過隱藏在 Responsive 表單選項中的元件，或是在開啟的 Modal 中製造出 Key trap，讓使用者不會移動到 Modal 覆蓋下的元件上。</p>\n<h3 id=\"語義化標籤\" style=\"position:relative;\"><a href=\"#%E8%AA%9E%E7%BE%A9%E5%8C%96%E6%A8%99%E7%B1%A4\" aria-label=\"語義化標籤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>語義化標籤</h3>\n<p>眾所皆知，Semantic HTML 對於提高 SEO 很有幫助，然而，它也能大大增加網站的可訪性（大概也是因此才會讓 SEO 效果提升），一個好的 Semantic HTML Element 應該包含：</p>\n<ol>\n<li>Role： 元件的類型（按鈕、input 元件、超連結等等）</li>\n<li>Name(Label)：通常與 input 元件並用，像是 radio input、dropdown list 等等</li>\n<li>State：元件當下的狀態（點擊、展開、收合）</li>\n<li>Value：元件內的值（Input 元件內的值、Button 上的文字等等）</li>\n</ol>\n<p>瀏覽器會根據你的 HTML 建造出 DOM Tree，同時也會依照你在 DOM 元件上的資訊建造出 Accessibility Tree（<a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>）：</p>\n<p><img src=\"/image/treestructure.jpg\" alt=\"accessibility-tree\"></p>\n<p>而 Screen reader 就會根據這棵 Accessibility Tree 進行朗讀，因此你提供的 Semantic HTML 越清楚，資訊越詳細，就能夠建構出越強健的 Accessibility Tree 供輔助工具參考。</p>\n<p>再者，如同文章前頭提到的，網頁上的媒體元件，像是 <code class=\"language-text\">img</code>、<code class=\"language-text\">video</code> 或是視覺圖表，都應該提供對應的 <code class=\"language-text\">alt</code> 描述，讓 Screen reader 至少能根據 <code class=\"language-text\">alt</code> 來說明該媒體元件的內容。不過，若是單純拿來裝飾用的 <code class=\"language-text\">img</code>，可以給予 <code class=\"language-text\">alt</code> 空值，代表其裝飾性。</p>\n<p>想檢測網站是否有足夠完整的 Accessibility Tree 的話，可以用 Chrome 打開你想看的網站，並且開啟開發者工具，在 Element 標籤內，右側可以找到 Accessibility 的 tab，在那邊就能看到當前頁面元件的 Accessibility Tree：</p>\n<p><img src=\"/image/chrome-dev-AT.png\" alt=\"Chrome DevTool Accessibility Tree\"></p>\n<h3 id=\"wai-aria\" style=\"position:relative;\"><a href=\"#wai-aria\" aria-label=\"wai aria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WAI-ARIA</h3>\n<p>WAI-ARIA，代表 Web Accessibility Initiative — Accessibility Rich Internet Applications （網頁可訪性倡議 — 無障礙網頁應用）。</p>\n<p>上面章節我們提到瀏覽器會依照 Semantic HTML Element 來建構 Accessibility Tree，然而有時你需要使用像是 <code class=\"language-text\">div</code>、<code class=\"language-text\">span</code> 等元素來做一些客製化的元件時，該怎麼辦呢？不就無法保持語義了嗎？</p>\n<p>這時 WAI-ARIA 就派得上用場了。使用 ARIA 屬性，我們就可以補足元件缺少的訊息，讓它進入 Accessibility Tree 當中。（<a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>）</p>\n<p><img src=\"/image/dom-aria-tree.png\" alt=\"DOM+ARIA\"></p>\n<p>舉個例子：</p>\n<p>一個用 <code class=\"language-text\">&lt;li></code> 元件所客製化的 checkbox，我們可以依靠 CSS 讓他 \"表現\" 得像 checkbox，對於視力正常的人來說是沒問題的，但 screen reader 可不認得他，因此我們至少必須加上 ARIA 屬性中的：<code class=\"language-text\">role</code> 與 <code class=\"language-text\">aria-*</code>，讓其加入到 Accessibility Tree 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> &lt;li tabindex=\"0\" class=\"checkbox\" checked>\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> &lt;li tabindex=\"0\" class=\"checkbox\" role=\"checkbox\" checked aria-checked=\"true\">\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> Receive promotional offers\n</span><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>/li></span></code></pre></div>\n<p><code class=\"language-text\">role</code> ，等於宣告該 DOM 元件該扮演什麼角色，像是 <code class=\"language-text\">checkbox</code>、<code class=\"language-text\">button</code> 或 <code class=\"language-text\">dialog</code> 等，還可再分類出 <code class=\"language-text\">Widget roles</code>、<code class=\"language-text\">Composite roles</code> 和 <code class=\"language-text\">Landmark roles</code> 等等。詳細 spec 可以看 <a href=\"https://www.w3.org/TR/wai-aria-1.1/#role_definitions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 的定義</a></p>\n<p>而搭配 <code class=\"language-text\">role</code> 使用的 <code class=\"language-text\">aria-*</code> 則為元件定義了<em>屬性</em>與<em>狀態</em>，像是上面例子中的 <code class=\"language-text\">aria-checked=\"true\"</code> 即為元素狀態的一種，告知 Accessibility Tree 這元件目前屬於 <code class=\"language-text\">checked</code> 狀態。</p>\n<p>也能透過 <code class=\"language-text\">aria-lable</code> 設定專門給輔助工具使用的 API：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"screen reader only label\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>或是設定父項/子項聯繫，例如控制特定區域的客製化捲軸：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div role<span class=\"token operator\">=</span><span class=\"token string\">\"scrollbar\"</span> aria<span class=\"token operator\">-</span>controls<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// . . .</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>關於 <code class=\"language-text\">role</code> 與 <code class=\"language-text\">aria-*</code> 狀態和屬性，可以先從 MDN 的<a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這份文件</a>概觀所有列表，然後從 <a href=\"https://www.w3.org/WAI/PF/aria-1.1/states_and_properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 的定義</a>中去翻找詳細資訊。</p>\n<h3 id=\"色彩樣式\" style=\"position:relative;\"><a href=\"#%E8%89%B2%E5%BD%A9%E6%A8%A3%E5%BC%8F\" aria-label=\"色彩樣式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>色彩、樣式</h3>\n<p>文章前面有提到，設計顏色時，應當使用一些輔助工具如 <a href=\"http://www.color-blindness.com/coblis-color-blindness-simulator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coblis</a> 來模擬色盲的使用者是如何 \"看\" 你的網站，可以根據這些測試與資訊，與設計師討論，製作出 color blind friendly 的介面。</p>\n<p>除了顏色之外，從文字的大小、表格的間隙，到長條圖中每條 Bar 的距離，都可能影響到視覺障礙的使用者，也都可以在設計無障礙網站時考慮進去。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>不知道大家投身 Web 領域的動機是什麼，我想一定有部分人的理由與我相同，相信 Web 是最平易近人的媒介，能輕易把任何資訊帶給全世界，你不用存錢半天才能買到一台 iPhone 進入 App Store 下載應用程式，只需要到圖書館把電腦打開，透過瀏覽器即可連接世界。如果你也有同樣信念，除了加強 Web performance，讓存取網站的門檻降低外，提升 Web Accessibility 讓網站能真正服務到 \"所有人\"，絕對也是必修的課題之一，弭平資訊落差，落實公平正義，從你我做起！</p>\n<p>P.S. Web Accessibility 的內容很多，這篇文章旨在引起大家對其的重視，詳細的規格與實作細節可以從底下的參考資料中去閱讀。</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://youtu.be/dvtfNpt75aA?t=26101\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React rally 2019</a></li>\n<li><a href=\"https://ethanmarcotte.com/wrote/amphora/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amphora</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN - 可訪問性</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/accessibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google - 無障礙功能</a></li>\n<li><a href=\"https://medium.com/frochu/%E5%9B%9E%E6%AD%B8%E5%88%9D%E5%BF%83-%E4%B8%80%E6%8E%A2web-accessibility-baaa4d22f4a7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">回歸初心，一探 Web Accessibility</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/users/20108045/ironman/2454\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實踐無障礙網頁設計（Web Accessibility）系列</a></li>\n<li><a href=\"https://www.a11ywithlindsey.com/blog/accessibility-d3-bar-charts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Accessibility in d3 Bar Charts</a></li>\n</ol>","id":"98824468-2f67-5ad2-b305-72e3f8289a36","fields":{"slug":"web-accessibility-intro"},"frontmatter":{"date":"2019-10-13T17:07:29.000Z","title":"Web Accessibility 的重要性","tags":["web","web accessibility","a11y","javascript"],"type":"tech","slug":"web-accessibility-intro"},"timeToRead":14},{"excerpt":"好歌分享：那天晚上 我夢見了你 feat.Vita 張芮菲","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/2MGUXtO7atA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">那天晚上 我夢見了你 feat.Vita 張芮菲</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/2MGUXtO7atA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>軟體工程師應該很少沒參加過 Conference 吧，不管是社群或是學術性的，只要是與會者都會拿到一面主辦方製作的名牌，上面除了印著你的大名外，大多就剩下 Conference 名稱與 Logo 了，然而，由灣區的資料視覺化社群所舉辦的年度聚會 - visfest unconf 很是特別，他們提供與會者一個製作自己 badge 的機會，讓大家自行發揮創意，特別之餘也很符合整個會議的調性。今年八月是他們舉辦的第五屆 visfest unconf，這次他們在 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a> 這個平台上釋出了一個 Template，讓大家更方便的製作名牌，效果如同下方（因為用到 ECMAScript modules，建議使用桌面版 Chrome），若無法觀看，可以前往此 <a href=\"https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>，或是拉到最下面看 gif：</p>\n<div id=\"animation\"></div>\n<script type=\"module\">\n  import notebook from \"https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js\";\n\n  const renders = {\n    \"result\": \"#animation\",\n  };\n\n  import {Inspector, Runtime} from \"https://unpkg.com/@observablehq/notebook-runtime@2?module\";\n  for (let i in renders)\n    renders[i] = document.querySelector(renders[i]);\n\n  Runtime.load(notebook, (variable) => {\n    console.log(variable)\n    if (renders[variable.name])\n      return new Inspector(renders[variable.name]);\n  });\n</script>\n<p>除了 Observable 與 visfest 的 Logo 外，你可以繪製任何你想呈現的東西，改變背景顏色等等，而主辦方會用 <a href=\"https://gifpop.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gitpop</a> 這項服務，將你的動畫製作成 10 frames 的 gif，因此在製作時，可以根據 template 提供的繪圖函式傳入的 <code class=\"language-text\">frameNumbers</code> 來控制動畫的呈現。</p>\n<p>我自己是覺得這樣的想法很酷，所以即便無緣參加 visfest unconf，也製作了一個自己的 Badge 玩玩，順便來試用已經想玩很久的平台 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>，這篇文章就記錄一下使用的過程，並說明其特性，希望能引起大家興趣！</p>\n<h2 id=\"observablehq-起源\" style=\"position:relative;\"><a href=\"#observablehq-%E8%B5%B7%E6%BA%90\" aria-label=\"observablehq 起源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 起源</h2>\n<p>D3.js 的作者 <a href=\"https://twitter.com/mbostock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mbostock</a>，在 2017 年的時候發了一篇名為 <a href=\"https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Better Way to Code</a> 的文章，介紹了他當時正在製作的專案 - <code class=\"language-text\">d3.express</code>，也就是現在的 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>。</p>\n<!-- 介紹目的 -->\n<p>Mike Bostock 在過去十年左右的時間都致力於資料視覺化，為了能夠更方便的將資料以各種方式呈現，D3.js 因應而生，然而，致力於一個工具太久，反而忘了當初為何要製作工具，目的變成了工具本身，而不是透過該工具所能傳達的價值。</p>\n<blockquote>\n<p>The purpose of visualization is insight, not pictures - Ben Shneiderman</p>\n</blockquote>\n<p>資料視覺化的重點應在於將資料的 insight 更加輕易的傳遞給世界，儘管現在已經有很多圖形化介面的拖拉工具輔助你將資料視覺化，但若是想要最大幅度的自由創作並表達 insight，撰寫程式碼是無可避免的。</p>\n<p>然而寫程式一直都不是一件簡單的事，為了降低寫程式的難度，他創造了另一個工具：<a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>。你可以把它想像成 JavaScript 版本的 jupyter notebook，但使用上某些語法跟純 JavaScript 有些差異，因此剛開始可能會有些不太習慣的地方，等到上手後，你就會發現它的好用之處，尤其適合應用在製作資料視覺化專案上。</p>\n<h2 id=\"observablehq-基礎操作\" style=\"position:relative;\"><a href=\"#observablehq-%E5%9F%BA%E7%A4%8E%E6%93%8D%E4%BD%9C\" aria-label=\"observablehq 基礎操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 基礎操作</h2>\n<p>ObservableHQ 其實不能算是 JavaScript，因為有許多操作行為與 vanilla JavaScript 不相同，作者也有寫了一篇<a href=\"https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>。</p>\n<p>基本上，你可以把 ObservableHQ 想像成一個試算表，由一格一格的 <code class=\"language-text\">cell</code> 所組成，而每一格 <code class=\"language-text\">cell</code> 都是一個 JavaScript snippet，可以是一則運算式、一段簡短的函式，當然也可以將值指定給一變數名稱。</p>\n<p><img src=\"/image/observablehq-statement.png\" alt=\"ObservableHQ statements\"></p>\n<p>在上面的圖片中，比較不同的地方在於運算函式的寫法，除了一般的 Function Declarations 與 Function Expressions 外，你也可以用一個大括號 <code class=\"language-text\">{}</code> 包裹著一段程式碼，最後 <code class=\"language-text\">return</code> 出去的值，就會被印出來。</p>\n<p>而就像試算表的公式一樣，表格內的值是互相 reference 的，只要你在某處修改了某個 <code class=\"language-text\">cell</code> 的值，所有引用到該 <code class=\"language-text\">cell</code> 的程式都會相應改變（re-run），跟一般 vanilla JavaScript 從上到下執行程式碼的邏輯有所不同：</p>\n<p><img src=\"/image/observablehq-var-reference.gif\" alt=\"demo\"></p>\n<p>從這點來看，你也可以把所有在 ObservableHQ 上的變數 assignments 都想成是 hoisted declarations，因為宣告順序不影響 reference。</p>\n<p>此外，支援使用 <code class=\"language-text\">html</code> 與 <code class=\"language-text\">markdown</code> 的語法，利用 <code class=\"language-text\">Template literals</code> 來完成：</p>\n<p><img src=\"/image/observablehq-html-md.png\" alt=\"demo-html-md\"></p>\n<p>還有一個特別的 built-in 運算子 - <code class=\"language-text\">viewof</code>：</p>\n<p><img src=\"/image/observablehq-viewof.gif\" alt=\"demo-viewof\"></p>\n<p>如上面的 gif 所示，viewof 可以將使用者針對一個 html input element 操作所產生的值，exposes 出來，或是 assign 給一個變數。可以想見，這用在互動式視覺化專案中會是很棒的功能。</p>\n<p>這幾個大概是最基本的操作，還有其他諸如：如何匯入第三方套件、使用非同步 API 呼叫等等，我們就直接透過實際演練來學習吧！</p>\n<h2 id=\"observablehq-實際操作\" style=\"position:relative;\"><a href=\"#observablehq-%E5%AF%A6%E9%9A%9B%E6%93%8D%E4%BD%9C\" aria-label=\"observablehq 實際操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 實際操作</h2>\n<p>接下來用我這次製作的 visfest badge 來做範例，進一步帶大家認識這個工具！</p>\n<p>這次的 badge，主要概念是在 2D 地球圖上，顯示各城市的人口數量級別，用地球的轉動與 marker 的 radius 大小變化來呈現動畫。</p>\n<p>要完成這個目標，起手第一步就是得先把 2D 地球畫出來。而 Mike Bostock 有提供一份 <code class=\"language-text\">topojson</code> 格式的世界地圖資料：<code class=\"language-text\">https://unpkg.com/world-atlas@1/world/110m.json</code>。</p>\n<p>因此，我們需要載入 <code class=\"language-text\">topojson</code> 套件，並 <code class=\"language-text\">fetch</code> 世界圖資，而在 ObservableHQ 上我們可以這樣做：</p>\n<p><img src=\"/image/observablehq-import-lib.png\" alt=\"Import libs\"></p>\n<p>這邊我們用 <code class=\"language-text\">require</code> 來載入 <code class=\"language-text\">topojson</code> 套件，但其實它背後並非 CommonJS，而是用 <a href=\"https://requirejs.org/docs/whyamd.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Asynchronous Module Definition (AMD)</a> 實作。另外它也支援 ES modules 與 imports，所以可以依照你所使用的套件支援度來選擇要用哪種方式載入模組。</p>\n<p>至於取得世界圖資，我們需要兩個步驟：</p>\n<ol>\n<li>取得圖資 JSON 檔案：<code class=\"language-text\">let world = await (await fetch(\"https://unpkg.com/world-atlas@1/world/110m.json\")).json();</code></li>\n<li>取得拓樸後的資料：<code class=\"language-text\">topojson.feature(world, world.objects.countries);</code></li>\n</ol>\n<p>在 ObservableHQ 上，我們可以利用先前說到的大括號 <code class=\"language-text\">{}</code> 來執行多行程式碼，並把最後 return 的值賦予給某個變數：</p>\n<p><img src=\"/image/observablehq-get-worldmap.png\" alt=\"Get world map data\"></p>\n<p>接著還需要有各城市的人口資料，取得方式與上面相同：</p>\n<p><img src=\"/image/observablehq-get-cities-pop.png\" alt=\"Get cities population\"></p>\n<p>資料到手後，剩下的就就跟一般撰寫 D3.js 的專案ㄧ樣。</p>\n<p>在 visfest 提供的模板中，提供了許多以定義好的變數宣告，像是姓名、字體亮度、大小等等，而我們只需要在 <code class=\"language-text\">badgeCode</code> 這個函數中實作我們的視覺化作品即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Your D3 code goes here.</span>\n<span class=\"token comment\">// The function badgeCode gets called below to generate the previews.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">badgeCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> frameNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// g: a &lt;g>, i.e. d3.select(... the node)</span>\n  <span class=\"token comment\">// context: a canvas context, useful for doing canvas drawing</span>\n  <span class=\"token comment\">// frameNumber: a number that represents the frame (1, 2, … 10) for psuedo-animation.</span>\n  <span class=\"token comment\">// width &amp; height are available via the environment, as is d3</span>\n  <span class=\"token comment\">// Note: the &lt;g> is drawn on top of the &lt;canvas></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">badgeCode</code> 接收三個參數，一個是在 badge 上留給你繪圖的空間 <code class=\"language-text\">&lt;g></code> 元素，以及 <code class=\"language-text\">canvas context</code> 和 <code class=\"language-text\">frameNumber</code>，該模板會呼叫此函式十次，依序傳入遞增的 <code class=\"language-text\">frameNumber</code>，讓你來掌控動畫過程。</p>\n<p>到這邊可能你會好奇，在 ObservableHQ 中的 <strong>模板</strong> 到底是怎麼運作的？為什麼能定義出一個函式，讓我去填寫內容，又幫我執行呢？</p>\n<p>答案要追究到 ObservableHQ 的一個特殊 <code class=\"language-text\">import-with</code> 方法：</p>\n<p><img src=\"/image/observablehq-import-with.png\" alt=\"import-with\"></p>\n<p><code class=\"language-text\">b93171820ba3f268</code> 是 ObservableHQ 上的另一個 notebook，也就是實際的 template 程式碼所在位置，我們可以從該 notebook 中 import 進 <code class=\"language-text\">{preview, animation, download, width, height, d3}</code> 這幾個函式來呼叫使用，而這幾個函式中所用到的變數，我們能使用 <code class=\"language-text\">with</code> 來取出，並且賦予其新的值！</p>\n<p>這就是為什麼我們可以修改 <code class=\"language-text\">firstName</code>、<code class=\"language-text\">lastName</code> 以及自行填入 <code class=\"language-text\">badgeCode</code> 函數的原因了。</p>\n<p><code class=\"language-text\">badgeCode</code> 內的程式碼基本上就是普通的 D3.js 程式，這邊就不再附上程式碼，有興趣想知道怎麼實作在地球呈現人口分布的，可以到我的 <a href=\"https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">notebook</a> 去看，其中我也有用到前面提及的 <code class=\"language-text\">viewof</code> 運算子，讓我能手動調整地球的 scale 大小。</p>\n<p>都完成後就會看到由模板提供的 <code class=\"language-text\">preview</code> 函式所繪製出的十張圖：</p>\n<p><img src=\"/image/observablehq-preview-ten-pics.png\" alt=\"Preview ten pics\"></p>\n<p>以及用 <code class=\"language-text\">animation</code> 函式（一樣模板提供）繪製的動畫：</p>\n<p><img src=\"/image/observablehq-animation.gif\" alt=\"Animation gif\"></p>\n<h2 id=\"分享你的-observablehq-作品\" style=\"position:relative;\"><a href=\"#%E5%88%86%E4%BA%AB%E4%BD%A0%E7%9A%84-observablehq-%E4%BD%9C%E5%93%81\" aria-label=\"分享你的 observablehq 作品 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分享你的 ObservableHQ 作品</h2>\n<p>完成作品後，最重要的就是分享。</p>\n<p>這篇文章的最上方，我放入的成品並不是 gif，而是貨真價實從 ObservableHQ 所匯入的，利用 <code class=\"language-text\">ECMAScript modules</code>，載入想要嵌入的 notebook，接著再載入 ObservableHQ 提供的 <code class=\"language-text\">{Inspector, Runtime}</code>，當 notebook 載入後，取得其中 export 的變數，透過 <code class=\"language-text\">Inspector</code> 將其繪製到指定的 DOM id 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> notebook <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> renders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"result\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#animation\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Inspector<span class=\"token punctuation\">,</span> Runtime<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://unpkg.com/@observablehq/notebook-runtime@2?module\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> renders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    renders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>notebook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variable</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inspector</span><span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>透過這種方式，除了能夠在 ObservableHQ 上載入引用他人的 notebook 外，也能在一般網站上嵌入任何作品，非常方便！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>這篇文章只是非常簡略的說明了 ObservableHQ 的起源、用途與使用方式，希望能引起大家的興趣，如果有想要使用這套工具玩玩，或是製作視覺化專案的話，官方網站其實有出了一系列的<a href=\"https://observablehq.com/collection/@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">教學與說明文件</a>，直接就是用 ObservableHQ 的 notebook 撰寫的，互動式的閱讀體驗非常好，可以非常清楚的知道各個環節該怎麼使用，以及其背後的設計原理。</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://observablehq.com/@observablehq/five-minute-introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observablehq five minute intro</a></li>\n<li><a href=\"https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observable’s not JavaScript</a></li>\n<li><a href=\"https://observablehq.com/collection/@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observablehq introduction</a></li>\n</ol>","id":"1628307b-7c51-5350-8588-44aba765b8f3","fields":{"slug":"observablehq-intro"},"frontmatter":{"date":"2019-09-09T02:01:00.000Z","title":"從製作 visfest 2019 badge 認識 ObservableHQ","tags":["d3.js","javascript","visualization"],"type":"tech","slug":"observablehq-intro"},"timeToRead":8},{"excerpt":"好歌分享：Love is the answer","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Ugm_E7vERYs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Love is the answer</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Ugm_E7vERYs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>近年 VR/AR 一直不斷出現在大家的視線內，雖然一直沒有什麼殺手級的應用出現，但這阻止不了開發者們的雄心壯志，尤其是 JavaScript 社群，畢竟 Jeff Atwood 說過：</p>\n<blockquote>\n<p>\"Any application that can be written in JavaScript, will eventually be written in JavaScript.\" — Jeff Atwood, Author, Entrepreneur, Cofounder of StackOverflow</p>\n</blockquote>\n<p>隨著 a-frame 的出現，WebVR 成為現實，並且很容易開發；Web AR 部分進展則相對緩慢ㄧ些，瀏覽器原生支援的 API 還一直處於不穩定的開發階段，但即便如此，我們還是可以在特定版本的瀏覽器上使用，此外，也有像是 AR.js 這樣融合 artoolkit、three.js、ＷebGL 和 WebRTC 等技術的工具可以使用。</p>\n<p>今天就來稍稍研究一下，看看目前的技術能如何開發 Web AR！</p>\n<p>照慣例，開始前先看點 demo，把 Pokemon 帶到你家客應：</p>\n<p><img src=\"/image/arjs-demo.jpg\" alt=\"arjs demo\"></p>\n<!--\n1. 簡介\n2. 介紹目前有的 WebAR 實作 lib 或 api\n2-1. 說明 WebXR Viewer on iOS 與 Google chrome 可以跑的 api\n3. 分別以 AR.js 與 Web 純 API 介紹\n-->\n<h2 id=\"目前的工具有哪些\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B\" aria-label=\"目前的工具有哪些 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前的工具有哪些</h2>\n<p><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a> 這網站上列出了一些目前有的 library，以及目前支援 WebAR 的瀏覽器：</p>\n<p><img src=\"/image/webar-libs.png\" alt=\"常見 lib\"></p>\n<p>其中 <a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a> 使用了 A-Frame (基於 Three.js) 以及 JSARTookit5（JavaScript 移植版的 <a href=\"https://github.com/artoolkit/artoolkit5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ARToolKit</a>），而這兩個技術主要皆是利用 WebGL 為主，因此大多現行的瀏覽器都能直接支援，不需要特殊的 API。</p>\n<p>這大概也是為何 AR.js 能在 GitHub 上擁有一萬多顆星星，遠勝過上列其他套件的原因。再加上作者的實驗證明 AR.js 即便在<a href=\"https://github.com/jeromeetienne/AR.js#performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">兩年的老舊手機上也能運行順暢，擁有良好的 Performance</a>。</p>\n<p>但 AR.js 也並非沒有缺點，由於是基於 ARToolKit，因此只能夠支援 Marker-based 的 AR 效果，也就是像最前面的 Demo 圖片一樣，是需要在鏡頭內放置一個設定好的 Marker，讓其辨識，取得環境的一些 Sensor 資訊，包含鏡頭的深淺遠近等等，才能讓 AR 物件渲染在視窗中。</p>\n<p>即便如此，AR.js 其簡潔、便利的使用方式（<a href=\"https://github.com/jeromeetienne/AR.js#folders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有 a-frame 與 threejs 的 extension</a>），能讓你用<a href=\"https://medium.com/arjs/augmented-reality-in-10-lines-of-html-4e193ea9fdbf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">短短 10 行程式碼就產生出一個 WebAR 效果的網頁</a>，還是非常好用的。</p>\n<p><img src=\"/image/webar-browsers.png\" alt=\"支援的 browsers\"></p>\n<p>如果你是使用 AR.js 的話，基本上現行有支援 WebGL 的手機瀏覽器就都能夠運行，不需要額外的 Polyfill 等等。</p>\n<p>但如果你想要使用非 Marker-based 效果的 AR 應用，你就得研究 <a href=\"https://immersive-web.github.io/webxr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">WebXR Device API</code></a>，其前身為 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAR API</a>。</p>\n<h2 id=\"webxr-device-api\" style=\"position:relative;\"><a href=\"#webxr-device-api\" aria-label=\"webxr device api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebXR Device API</h2>\n<p>WebXR Device API 現在還在不斷更新中，不是個穩定的 API。</p>\n<p>運用到 WebXR Device API 的有 Google 使用的 <a href=\"https://github.com/google-ar/three.ar.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.ar.js</a> 與整合 A-Frame 的 <a href=\"https://github.com/chenzlabs/aframe-ar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-ar.js</a>，以及 Mozilla 主導的 <a href=\"https://github.com/mozilla/aframe-xr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.xr.js</a> 和 <a href=\"https://github.com/mozilla/three.xr.js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-xr.js</a>。</p>\n<p>Google 提供了 <a href=\"https://github.com/google-ar/WebARonARCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARCore</a> 和 <a href=\"https://github.com/google-ar/WebARonARKit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARKit</a> 兩種分別在 Android 與 iOS 平台上運行的特殊 browsers，讓你能在上面跑 WebXR Device 相關的 API：而 Mozilla 在 iOS 上也推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 來對應，三者皆是用到手機平台原生的 ARKit。</p>\n<p>如同剛剛所說，WebXR Device API 還很不穩定，而且 Google 與 Mozilla 各自在 Android 與 iOS 上有不同的實作，<a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例</a>只能運行在 version 為 70 - 72 的 Chrome canary 上，而 Mozilla 雖然有推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a>，但上面的<a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例實作</a>也<strong>只能</strong>運行在 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 上頭...</p>\n<p>不過去看一下雙方的範例程式碼後，會發現其實用法蠻雷同的，大多都有下面這些流程（以 Google 的程式碼來當範例）：</p>\n<p>判斷是否支援 WebXR Device API，並初始設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n   * Fetches the XRDevice, if available.\n   */</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `navigator.xr` 是 WebXR Device API 的入口，有必要確認其存在</span>\n    <span class=\"token comment\">// 而 `XRSession` 中的 `requestHitTest` 則是要 enable #webxr-hit-test flag</span>\n    <span class=\"token comment\">// 確認這兩個 API 存在，確保能夠製造出點擊畫面</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>xr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">XRSession</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>requestHitTest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">requestDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 成功取得 XRDevice 物件後，需要 bind 一個 user gesture 的 event，然後呼叫</span>\n    <span class=\"token comment\">// `device.requestSession()`，這是規範在 spec  中的</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#enter-ar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEnterAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>取得 <code class=\"language-text\">XRDevice</code> 後，利用 <code class=\"language-text\">device.requestSession()</code> 製造出運行 XR 的環境：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">async</span> <span class=\"token function\">onEnterAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> outputCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> outputCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xrpresent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// `device.requestSession()` 一定要是由 user 觸發，像是 click handler 內</span>\n      <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">requestSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        outputContext<span class=\"token operator\">:</span> ctx<span class=\"token punctuation\">,</span>\n        environmentIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>outputCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 成功創建 Session 後就能開始運算 AR 了</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>當 XRSession 成功創建後，接著就是 set up three.js，撰寫 renderer，設定 scene、camera，並 attach 上 XRWebGLLayer，然後啟動 render loop：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">session</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">// 利用 Three.js 繪製 3D 物件，因此要借用 THREE.WebGLRenderer 來當作 XRSession 的 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    alpha<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    preserveDrawingBuffer<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">//  設定 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRWebGLLayer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> framebuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setFramebuffer</span><span class=\"token punctuation\">(</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 scene</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> DemoUtils<span class=\"token punctuation\">.</span><span class=\"token function\">createLitScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 camera</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 更多的設定</span>\n  <span class=\"token comment\">// 在 `requestAnimationFrame` 中啟動 render loop</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onXRFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>省略了很多細節，但大致的步驟就是這樣，<a href=\"https://github.com/googlecodelabs/ar-with-webxr/archive/master.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細程式碼在此下載</a></p>\n<p>對 WebXR Device API 比較有興趣的讀者除了 <a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例程式</a>與 Mozilla 的 <a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webxr-ios-js 範例</a> 外，也可以到 <a href=\"https://github.com/immersive-web/webxr/blob/master/explainer.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immersive-web/webxr</a> 看看該 WebXR Device API 的 Specs detail 與解釋，他們也有提供 <a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sample Page</a> 可作參考。</p>\n<h2 id=\"arjs\" style=\"position:relative;\"><a href=\"#arjs\" aria-label=\"arjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AR.js</h2>\n<p>由於手邊沒有適合的 Android 手機，不能嘗試利用 WebXR Device API，所以今天就先來看看 AR.js 有多簡單。</p>\n<p>你需要的就只有：</p>\n<ol>\n<li>準備好 Marker</li>\n<li>準備好 3D models</li>\n<li>撰寫十行簡單的程式碼</li>\n<li>host 你的 WebAR webapp</li>\n</ol>\n<p>AR.js 有提供一個 Marker generator - <a href=\"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js Marker Training</a></p>\n<p><img src=\"/image/arjs-maker-traning.png\" alt=\"ARjs marker training\"></p>\n<p>你可以上傳想要的圖片放到 Marker 中，例如一個記載你的 WebVR webapp 網址的 QR code 就很適合。像<a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>作者利用 AR.js 結合實體卡片送給他女友一個小驚喜。</p>\n<p>我建議把你做好的 Marker 下載下來，否則當你手機對著電腦中的 marker 時，3D Model 方位視角會跟你是垂直的，不是很好看。</p>\n<p>接著可以到 <a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a> 或是 <a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a> 下載 <code class=\"language-text\">gltf</code> 的 3D 模型。(搜尋想要的 Model 時記得勾選 <code class=\"language-text\">downloadable</code>，比較不會選到需要付費才能下載的，當然你要付費也很棒！)</p>\n<p>以我最前面的例子來說，我在 <a href=\"https://sketchfab.com/3d-models/squirtle-18caed58804943d7a839dcbd44d21b80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab 中載了一個傑尼龜的模型</a></p>\n<p><img src=\"/image/sketchfb-usage.png\" alt=\"sketchfab\"></p>\n<p>接著用 AR.js 對應 AFrame 的 extension 撰寫簡單的 WebVR app:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.9.2/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.rawgit.com/jeromeetienne/AR.js/1.7.5/aframe/build/aframe-ar.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token value css language-css\"><span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">'</span></span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">embedded</span> <span class=\"token attr-name\">arjs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>sourceType: webcam; debugUIEnabled: false;<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-marker</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>pattern<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>assets/pattern-marker.patt<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-entity</span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0 -6 -12<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-20 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">gltf-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url(assets/scene.gltf)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-entity</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-marker</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 <code class=\"language-text\">&lt;a-scene /></code> 中，我們指定一個 attribute <code class=\"language-text\">arjs</code>，並且設定 <code class=\"language-text\">sourceType</code> 為 <code class=\"language-text\">webcam</code>，相關 attribute 設定其實來自 <code class=\"language-text\">artoolkit system</code>，有需要可以到 <a href=\"https://github.com/jeromeetienne/AR.js/tree/master/aframe#artoolkit-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 的列表</a>查看。</p>\n<p>接著我們透過 <code class=\"language-text\">&lt;a-marker /></code> 放入我們製作的 marker，副檔名為 <code class=\"language-text\">.patt</code>，這邊的 type attribute，如果你是單純用 barcode 的話，可以設為 <code class=\"language-text\">type=barcode</code>，但若是客製化的 marker，就要設為 <code class=\"language-text\">type=pattern</code>。</p>\n<p>最後在 <code class=\"language-text\">&lt;a-entity /></code> 上頭設定我們想要呈現的 AR 3D Model，<code class=\"language-text\">gltf-model</code> attribute 設定模型的路徑，再透過 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 來調整你的模型出現在鏡頭的位置。</p>\n<p>這邊特別要注意一下，因為你載下來的 3D Model，都有自己的位置屬性，所以你可能會需要自己多加調整出適合的 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 值，否則你的 3D Model 很可能一直成像在你手機的鏡頭外而看不到，然後你還以為是程式出問題...</p>\n<p>當手機鏡頭偵測到 <code class=\"language-text\">&lt;a-marker /></code> 內對應的 marker 時，就會在鏡頭內渲染出 <code class=\"language-text\">&lt;a-entiy /></code>。</p>\n<p>如果只是像我一樣想要嘗試一下的話，可以簡單利用 Chrome 的 webapp - <a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Server for Chrome</a> 來 host 你的 htlm file，然後利用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngork</a> 或是 <a href=\"https://serveo.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serveo</a> 來當作你 localhost 的 proxy，讓你的手機可以方便相連。</p>\n<p>一切順利的話，你就會看到一隻傑尼龜出現在你家裡啦～</p>\n<p><img src=\"/image/another-arjs-demo.jpg\" alt=\"another arjs demo\"></p>\n<p>如果你沒有手機可以玩，想用電腦 Browser 跑的話，會需要到 <code class=\"language-text\">chrome://flags</code> 中把 <code class=\"language-text\">WebVR</code> 的選項開啟，然後用 inpsecter 將 Browser 調整成手機模式。</p>\n<p><img src=\"/image/chrome-flags.png\" alt=\"chrome flags\"></p>\n<p>並且需要加上 polyfill，因為普通的 chrome 是沒有支援 <code class=\"language-text\">navigator.xr</code> api 的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> polyfill <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebXRPolyfill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/arjs-run-mac.png\" alt=\"run on chrome\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然 WebXR Device API 還不穩定，但就是在這時候開始試用才更能給出回饋，高手們來試試吧！決定下次拿公司測試機來跟著 Code lab 上的範例改改看！\n另外，AR.js 雖然目前是 Marker-based，但從 <a href=\"https://github.com/jeromeetienne/AR.js/issues/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 上的一些討論</a> 來看，之後應該是有機會支援 Markerless 的。</p>\n<p>AR 這樣牽扯到電腦視覺、硬體、演算法、Sensor 等複雜運算的技術，要實作到 Web 上更是困難，進度慢是可以理解的，但還是衷心期盼著那一天，能夠開啟網頁就能丈量傢俱尺寸或是試穿衣物！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/immersive-web/webxr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Repository for the WebXR Device API Specification.</a></li>\n<li><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a></li>\n<li><a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a></li>\n<li><a href=\"https://medium.com/chialab-open-source/ar-js-the-simpliest-way-to-get-cross-browser-ar-on-the-web-8f670dd45462\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js — The Simplest Way to get Cross-Browser Augmented Reality on the Web</a></li>\n<li><a href=\"https://blog.halolabs.io/building-ar-vr-with-javascript-and-html-97af4434bcf6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building AR/VR with Javascript and HTML</a></li>\n<li><a href=\"https://medium.com/agora-io/web-vs-app-ar-edition-d9aafe988ba2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web vs App (AR edition)</a></li>\n<li><a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a></li>\n<li><a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a></li>\n<li><a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用ar-js做一個讓另對方-喔喔喔喔-的小卡片吧</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google code lab - WebXR</a></li>\n<li><a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebXR Sample page</a></li>\n</ol>\n<p>關於作者：\n<a href=\"http://blog.arvinh.info/about/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>","id":"a776efbf-720d-5861-94eb-4b4becb96984","fields":{"slug":"web-ar"},"frontmatter":{"date":"2019-07-16T17:40:44.000Z","title":"淺嚐 Web AR","tags":["web","ar","javascript"],"type":"tech","slug":"web-ar"},"timeToRead":12},{"excerpt":"『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』","html":"<blockquote>\n<p>『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>過年除舊佈新，剛好趁這個機會來複習一下已經是老觀念的 Virtual DOM。很多人在講到 React 的時候都一定會提到 Virtual DOM，而問到 Virtual DOM 的好處時，就會說到實際 DOM 的操作成本很貴，所以透過 Virtual DOM 可以降低成本。</p>\n<p>你在除夕餐桌上這樣講可能沒問題，面試只講這樣應該不太好。</p>\n<p>畢竟你最後還是會操作實體 DOM 啊，這樣說明太簡化了。</p>\n<p>Virtual DOM 的由來可以從 MVC 和 MVVM 的架構追溯起，主要都是為了解決前端頁面呈現、資料更動、使用者操作這三種狀態交互作用產生的複雜性，MVC 提供了一個解法，MVVM 提出的 View Model 有了優化的方案，還有 data 與 view 雙向綁定的方式等等，而 React 提出了另一種思路，但那不是我今天的重點，有興趣且還不知道這些名詞是什麼的讀者可以去搜尋看看，有很多文章在說明這些資訊與歷史。</p>\n<p>React 的 Virtual DOM 是因應其數據與 UI 更新繪製的特殊思路而提出的效能解決方案。</p>\n<p>React 希望在資料更新時，能夠直接重新渲染頁面，不用主動去探究是數據的哪部份發生變化，要對應去更新頁面哪一部分的 DOM。但頁面重新渲染的成本可是更高，所以才需要 Virtual DOM 作為緩衝，透過資料更新後，重新繪製 Virtual DOM，與實體 DOM 進行 Diff，最後再把差異部分 Patch 上去，這不僅修正了重新渲染的成本問題，也降低了 data 與 view 交互更新的複雜度，提高了 developer 的開發體驗。</p>\n<p>說了這麼多，其實今天就只是單純想自己手刻一個 Virtual DOM 來理解一下該怎麼實現這樣的功能，畢竟知道了概念，總覺得手刻應該不難。\n手刻 Virtual DOM 其實也沒什麼太大意義，但很多時候就是 for fun，然後做個記錄。</p>\n<p>主要參考至 <a href=\"https://twitter.com/ycmjason\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ycmjason</a> 的 <a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">talk</a> 與 <a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a>，非常推薦欣賞，講者的熱情完全掩蓋掉音訊不佳的缺點，又很清楚地介紹了 VDOM 實作。</p>\n<h2 id=\"所以virtual-dom-到底長什麼樣子\" style=\"position:relative;\"><a href=\"#%E6%89%80%E4%BB%A5virtual-dom-%E5%88%B0%E5%BA%95%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"所以virtual dom 到底長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以，Virtual DOM 到底長什麼樣子？</h2>\n<p>Virtual DOM 就只是個 javascript plain object，並且模仿 Actual DOM 的結構（但當然簡化很多）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'v-element'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>一個基本的 VDOM，我們只需要元素名稱（tagName）、元素屬性（attrs）與其 Children list（既然是虛擬 DOM，這個 plain object 裡面的屬性其實隨便你取名，只要對應得到實際 DOM 即可）。</p>\n<p>根據這個想法，我們可以模仿現存的 VDOM lib，提供一個 <code class=\"language-text\">createElement</code> 的 function：</p>\n<div class=\"gatsby-highlight\" data-language=\"jscreateelement.js\"><pre class=\"language-jscreateelement.js\"><code class=\"language-jscreateelement.js\">export default (tagName, { attrs = {}, children = [] }) =&gt; {\n  const vElement = Object.create(null);\n\n  Object.assign(vElement, {\n    tagName,\n    attrs,\n    children,\n  });\n\n  return vElement;\n};</code></pre></div>\n<blockquote>\n<p>Note: 利用 <code class=\"language-text\">Object.create(null)</code> 與 <code class=\"language-text\">Object.assign</code> 的方式產生物件，可以避免直接採用 Object literals 的方式會繼承到 object prototype 的屬性。</p>\n</blockquote>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\nconsole.log(vRootApp);</code></pre></div>\n<p>結果：</p>\n<p><img src=\"/image/vdom-createElement.png\" alt=\"vdom-createElement\"></p>\n<h2 id=\"從-virtual-dom-到-real-dom\" style=\"position:relative;\"><a href=\"#%E5%BE%9E-virtual-dom-%E5%88%B0-real-dom\" aria-label=\"從 virtual dom 到 real dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>從 Virtual DOM 到 Real DOM</h2>\n<p>有了 Virtual DOM，我們還需要一個 <code class=\"language-text\">render</code> 函數來將其繪製到頁面上。方法很簡單，我們只需要 <code class=\"language-text\">document.createElement</code>、<code class=\"language-text\">setAttribute</code> 與 <code class=\"language-text\">appendChild</code> 三個 web api 即可完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(renderElem(child));\n  }\n  return elem;\n};\nexport default renderElem;</code></pre></div>\n<p>根據 <code class=\"language-text\">tagName</code> 使用 <code class=\"language-text\">document.createElement</code> 來建立實際的 DOM 物件，並且將 <code class=\"language-text\">attrs</code> 一個一個 <code class=\"language-text\">setAttribute</code> 到實際的 DOM 元素上；最後再將 <code class=\"language-text\">children</code> 遞迴丟入 <code class=\"language-text\">renderElem</code> 函數中，將所有小孩的實際 DOM object 都建立好並 <code class=\"language-text\">appendChild</code> 到上層的實際 DOM 物件上，最後將完整的 real DOM object 回傳出去。</p>\n<p>以概念來說基本上這樣就完成了，但可以讓他在完整一點，提供 <code class=\"language-text\">textNode</code> 的支援，利用 <code class=\"language-text\">document.createTextNode</code> 來產生純 string 的元素，稍微修改 <code class=\"language-text\">render.js</code> 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(render(child));\n  }\n  return elem;\n};\nconst render = (vNode) =&gt; {\n  if (typeof vNode === &#39;string&#39;) {\n    return document.createTextNode(vNode);\n  }\n  return renderElem(vNode);\n};\nexport default render;</code></pre></div>\n<p>從 <code class=\"language-text\">render</code> 函數回傳的基本上就會是一顆完整的 Virtual DOM Tree 了，舉個例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vRootApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello VDOM'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'http://placekitten.com/200/300'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootApp <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vRootApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>結果如下，Virtual DOM 就是個 Javascript plain object，而經由 <code class=\"language-text\">render</code> 函數回傳的即是包含實際 DOM 屬性的 Real DOM：</p>\n<p><img src=\"/image/vDom-render-actualDOM.png\" alt=\"Render to real dom\"></p>\n<h3 id=\"掛到頁面上吧\" style=\"position:relative;\"><a href=\"#%E6%8E%9B%E5%88%B0%E9%A0%81%E9%9D%A2%E4%B8%8A%E5%90%A7\" aria-label=\"掛到頁面上吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>掛到頁面上吧！</h3>\n<p>透過 <code class=\"language-text\">render</code> 我們有了實體 DOM，但這樣還沒辦法在頁面上顯示，需要有個類似 <code class=\"language-text\">ReactDOM.render</code> 的方法來幫助我們實現：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmount.js\"><pre class=\"language-jsmount.js\"><code class=\"language-jsmount.js\">export default (element, targetNode) =&gt; {\n  targetNode.appendChild(element);\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\nimport render from &#39;./render&#39;;\nimport mount from &#39;./mount&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    &#39;Hello VDOM&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\n\nconst rootApp = render(vRootApp);\nmount(rootApp, document.getElementById(&#39;rootApp&#39;));</code></pre></div>\n<p>很簡單，就把我們產生的 Real DOM <code class=\"language-text\">appendChild</code> 到 targetNode 下就好。</p>\n<p>或是也能用 <code class=\"language-text\">targetNode.replaceWith(element);</code> 的方式直接取代掉 targetNode。（不過要注意一下 IE 是無法使用的喔！）</p>\n<p><img src=\"/image/mount-to-html.png\" alt=\"Mounted DOM\"></p>\n<h1 id=\"diff-virtual-dom---reconciliation\" style=\"position:relative;\"><a href=\"#diff-virtual-dom---reconciliation\" aria-label=\"diff virtual dom   reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diff Virtual DOM - Reconciliation</h1>\n<p>知道怎麼產生 Virtual DOM 並繪製到頁面上後，也是時候進入重頭戲了！</p>\n<p>如前言所說，Virtual DOM 作為我們操作 Real DOM 的一層緩衝，我們比較經過狀態變化後產生的新舊 Virtual DOM 來找出實際需要更新的 Real DOM 位置，如此一來，儘管每次都重新 Render，實際更新的 DOM 也不會是全部，可以大幅改善直接重新渲染的效能問題。</p>\n<p>而 tree diff 的演算法其實很複雜，如果用 <a href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tree Edit Distance</a> 的方式遞迴檢查每個節點，複雜度將可達到 O(n^3)，是非常驚人的數字，幾乎無法在短時間處理完，因此 React 所提出的 reconciliation 制定了一些策略，來將複雜度從 O(n^3) 降至 O(n)。<a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官方文檔其實說明得很清楚</a>。</p>\n<p>主要有兩個假設：</p>\n<ol>\n<li>只需要比較同一層的節點，同一層內的元素若擁有不同的 type，往下長出的樹就會不同。</li>\n<li>同樣 type 的元件，開發者可以使用 <code class=\"language-text\">key</code> 這個 props 來決定其子樹是否需要重新 render。</li>\n</ol>\n<p>如假設一提及，我們只比較新舊兩棵 Virtual DOM Tree 中，同個父節點下的所有子節點，若發現某個節點不存在了，那就整個子樹都會刪除不去進一步比較。</p>\n<p><img src=\"/image/vdom-level-comparison.png\" alt=\"只比同 level 的 node\"></p>\n<p>這樣做的意思就是說，如果今天發生了一些跨層級的操作，像是整顆子樹被搬移到另一個節點上，對 React 來說，會是刪掉原有的子樹，然後重新在新的位置建立一模一樣的子樹出來：</p>\n<p><img src=\"/image/vdom-cross-level-modify.png\" alt=\"刪掉原子樹，在新位置重建\"></p>\n<blockquote>\n<p>Note: 實際上 React 在這兩個假設下，還做了許多更細節的事情（component diff、element diff），可以先去參考這篇很久之前的<a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，再去閱讀 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React fiber 的介紹</a>。</p>\n</blockquote>\n<p>基於這兩個假設我們可以開始實作簡單版的 Virtual DOM Diffing 演算法，基本上有四個 cases 處理：</p>\n<ol>\n<li>newTreeRoot 為 undefined，也就是某個節點被刪除了。</li>\n<li>兩個 Node 都是純字串。</li>\n<li>一個 Node 為純字串，一個 Node 為 Virtual Element。</li>\n<li>新舊 TreeRoot 的 TagName 不同。</li>\n</ol>\n<p>根據這四種 cases 我們個別處理，並且回傳一個 <code class=\"language-text\">patch</code> 函數，供之後來將 diff 完的結果 attach 到 Real DOM 上 （Note: r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  // 假設 oldVTreeRoot 一定都存在，只有 newVTreeRoot 有機會被刪除，也就是 undefined\n  if (newVTreeRoot === undefined) {\n    // 回傳 patch 函數，會接收 Real DOM，這邊 r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM\n    return rNode =&gt; {\n      // 因為新的 Virtual DOM Tree 是空的，所以回傳的 Patch 函式就是直接把 Real DOM 刪除。\n      rNode.remove();\n      return undefined;\n    }\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // 這邊包含兩種 cases：\n      // Case 1：新舊 Virtual DOM Tree 其中一個為 string，一個為 Virtual Node，所以當然會 !==\n      // Case 2：是兩者都為 string，但 !==\n      // 我們直接根據新的 Virtual Tree render 新的 Real Tree，並 replace 掉原本的 Real Tree\n      return rNode =&gt; {\n          // 回傳 patch 函數\n          const rNewNode = render(newVTreeRoot);\n          rNode.replaceWith(rNewNode);\n          return rNewNode;\n       };\n    } else {\n      // 若都為 string 且值相同，那就不用改。\n      return rNode =&gt; rNode; // 回傳 patch 函數\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n    // 根據優化 Tree diffing 演算法的假設一，只要 tagName 不同，我們就直接重新 render。\n    return rNode =&gt; {\n      // 回傳 patch 函數\n      const rNewNode = render(newVTreeRoot);\n      rNode.replaceWith(rNewNode);\n      return rNewNode;\n    };\n  }\n  // ...\n};\nexport default diff;</code></pre></div>\n<p>聰明的你看到這邊就會發問了：tag name 相同的 case 沒有處理到啊？</p>\n<p>沒錯，如果新舊兩棵 Virtual Tree 的 tag name 都一樣，那我們還得比 attributes，而要比較兩個節點的所有 attributes，不如直接 replace 上新的就好。但要注意，因為 attributes 很多，所以會產生多個 patch 函數需要被 apply 到 Real DOM 上，我們額外用一個陣列暫存，最後回傳一個 wrapper patch 函數，把所有暫存的 patch 函數都 apply 到傳進來的 Real DOM ：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffattrs.js\"><pre class=\"language-jsdiffattrs.js\"><code class=\"language-jsdiffattrs.js\">const diffAttrs = (oldAttrs, newAttrs) =&gt; {\n  // 因為 attributes 很多，需要一個 array 來存所有需要的 patch 函數\n  const patches = [];\n  // 放上新的 attributes\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push(rNode =&gt; {\n      // 暫存 patch 函數\n      rNode.setAttribute(k, v);\n      return rNode;\n    });\n  }\n  // 移除舊的 attributes\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push(rNode =&gt; {\n        // 暫存 patch 函數\n        rNode.removeAttribute(k);\n        return rNode;\n      });\n    }\n  }\n  // 最後傳出去的外層 patch 函數\n  return rNode =&gt; {\n    for (const patch of patches) {\n      // 把每個暫存的 patch 函數都 apply 到 Real DOM 上\n      patch(rNode);\n    }\n    return rNode;\n  };\n};\nexport default diffAttrs;</code></pre></div>\n<p>處理完 attributes 後，我們還得考慮 children，diff children 的方式其實跟 diff 整棵樹一樣，但我們要考慮到子樹的長度：</p>\n<ol>\n<li><code class=\"language-text\">oldVChildren.length === newVChildren.length</code>，那就直接 <code class=\"language-text\">diff(oldVChildren[i], newVchildren[i])</code>，i 從 0 到 <code class=\"language-text\">oldVChildren.length</code>。</li>\n<li><code class=\"language-text\">oldVChildren.length > newVChildren.length</code>，跟 case 1 其實一樣，因為新子樹比較少，就代表有 Node 被刪除，在我們原本的 diff 函式中有處理了。</li>\n<li><code class=\"language-text\">oldVChildren.length &lt; newVChildren.length</code>，新子樹比較長，那就先把舊子樹的所有點先 update 好，再把剩餘的新子樹 patch 上去。</li>\n</ol>\n<p>從上述三個 cases 來看，我們橫豎都需要 loop oldVChildren 一次，最後若有多餘的 newVChildren 再想辦法 update 上去。另外，這邊一樣需要暫存多個 patch 函數，實作細節我註解在 code 裡比較清楚，最後回傳的 patch 函數比較特別：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffchildren.js\"><pre class=\"language-jsdiffchildren.js\"><code class=\"language-jsdiffchildren.js\">const diffChildren = (oldVChildren, newVChildren) =&gt; {\n  // 無論如何都 loop 過 oldVChildren 一次，把所有 diff 回傳的 patch 函數暫存在 childrenPatches 內\n  // 這是一定會 apply 到 old tree 的部分。\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) =&gt; {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n  // 接著我們看看 `newVChildren` 是否有多餘的子樹需要處理\n  // 若有，我們產生的 patch 函數就是單純 `render` 出 Real Node 並且\n  // appendChild 到 patch 傳進的 Real Node 上（實際要被 patch 的 parent 節點）\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push(rNode =&gt; {\n      rNode.appendChild(render(additionalVChild));\n      return rNode;\n    });\n  }\n  return rParent =&gt; {\n    // 由於這是 children 的 patch，吃進來的會是 parent 的 Real DOM\n    // 我們要抓出 `rParent.childNodes` 來針對 old tree 做 patch\n    // zip 函數其實就是 lodash 的 zip，成對將 childPatches, rParent.childNodes 的元素並排傳出，這樣比較簡潔\n    for (const [patch, rChild] of zip(childPatches, rParent.childNodes)) {\n      patch(rChild);\n    }\n    // 最後把 new tree 多餘的 patches 直接 patch 到 parent 的 Real DOM 下即可（因為我們是 appendChild）\n    for (const patch of additionalPatches) {\n      patch(rParent);\n    }\n    return rParent;\n  };\n};</code></pre></div>\n<p>最後在我們原本的 <code class=\"language-text\">diff.js</code> 中的最後面加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  if (newVTreeRoot === undefined) {\n    // ....\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // ....\n    } else {\n      // ....\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n      // ....\n  }\n  const patchAttrs = diffAttrs(oldVTreeRoot.attrs, newVTreeRoot.attrs);\n  const patchChildren = diffChildren(oldVTreeRoot.children, newVTreeRoot.children);\n\n  return rNode =&gt; {\n    patchAttrs(rNode);\n    patchChildren(rNode);\n    return rNode;\n  };\n};\nexport default diff;</code></pre></div>\n<p>完整的 diff code 可以看這邊 <a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<p>到這邊為止，Virtual DOM 算是告一段落了！</p>\n<h2 id=\"最後修改下-mainjs做點變化讓大家看製作出的-vdom-效果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BF%AE%E6%94%B9%E4%B8%8B-mainjs%E5%81%9A%E9%BB%9E%E8%AE%8A%E5%8C%96%E8%AE%93%E5%A4%A7%E5%AE%B6%E7%9C%8B%E8%A3%BD%E4%BD%9C%E5%87%BA%E7%9A%84-vdom-%E6%95%88%E6%9E%9C\" aria-label=\"最後修改下 mainjs做點變化讓大家看製作出的 vdom 效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後修改下 main.js，做點變化讓大家看製作出的 VDOM 效果</h2>\n<p>我們讓 <code class=\"language-text\">createVApp</code> 柯里化，多傳一個參數 <code class=\"language-text\">count</code> 進去改變 attributes 跟圖片尺寸，接著 <code class=\"language-text\">setInterval</code> 讓每兩秒產生一個隨機數字當作 <code class=\"language-text\">count</code> 值，用來 update 我們的節點：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">const createVApp = count =&gt; createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n    dataCount: count, // we use the count here\n  },\n  children: [\n    &#39;Hello Kitty&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: `http://placekitten.com/${count}00/${count}00`,\n      },\n    }),\n  ],\n});\n\nlet vApp = createVApp(0);\nconst rApp = render(vApp);\nlet rRootEl = mount(rApp, document.getElementById(&#39;rootApp&#39;));\nsetInterval(() =&gt; {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n  // 每次 patch 完就 assgin 回原有變數，這樣下個 interval 才會抓到更新的樹\n  rRootEl = patch(rRootEl);\n  vApp = vNewApp;\n}, 2000);</code></pre></div>\n<p>效果如下，可以看到圖片一直變動，但是我們真的只改到了需要改的節點與 attributes，並不會整個頁面重新刷新：</p>\n<p><img src=\"/image/vdom-demo.gif\" alt=\"demo\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然沒辦法跟市面上實際的 VDOM 相提並論，但是從這簡單的實作可以很清楚的知道整個概念與要解決的問題，我覺得是蠻不錯的小練習，接下來再去看 React 或是 Vue 在這方面的實作應該會比較有頭緒一些！\n最後再附上一次 codesandbox 連結讓想玩的人直接試試：<a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 源碼剖析系列 － 不可思議的 react diff</a></li>\n<li><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深度剖析：如何实现一个 Virtual DOM 算法</a></li>\n</ol>","id":"17b2e615-d357-52dc-8e0a-2cd83e9dfcbb","fields":{"slug":"vdom-from-scratch"},"frontmatter":{"date":"2019-02-04T11:19:30.000Z","title":"從頭打造一個簡單的 Virtual DOM","tags":["virtual dom","react","javascript","web"],"type":"tech","slug":"vdom-from-scratch"},"timeToRead":13},{"excerpt":"好歌分享：Massive fusion","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/hB_QW-wDR1k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Massive fusion</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/hB_QW-wDR1k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在前端的世界中，如何優化 performance 一直都是很重要的議題，也常常被拿來當作評斷前端工程師能力的一個依據。效能調教有許多方面可以探討，但最主要的重點就是希望使用者在操作網站時，不會感受到頁面跳動，尤其是當網站有動畫效果時，些微的跳動就會引起使用者注意。</p>\n<p>大概在去年的時候，同事為了解決 CSS Animation 在頁面上的不順暢，研究了不少 hack 技巧，其中一個讓我覺得很特別的就是今天的主角：FLIP。</p>\n<p>FLIP 技巧已經出來好幾年了，但我也是去年才知道，今天這篇算是個複習與回顧，順便分享給還不知道此技巧的讀者。</p>\n<h2 id=\"什麼是-flip為什麼我們需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-flip%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 flip為什麼我們需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 FLIP？為什麼我們需要它？</h2>\n<p>在開始介紹 FLIP 之前，必須先說明一下我們在製作 CSS 動畫時，可能會遭遇的效能問題。</p>\n<p>舉例來說，今天我們想要製造一個如下效果的動畫：</p>\n<p><img src=\"/image/flip-bad-sample.gif\" alt=\"Bad animation\">\n<a href=\"https://codepen.io/arvin0731/pen/wYXJdv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code link</a></p>\n<p>我們通常會需要調整 DOM 元素的位置與大小，而這類的操作會造成瀏覽器偵測到潛在的 Layout 改變，而重新從 pixel pipeline 的 Layout 階段開始 reflow 與 repaint，若同時在這階段進行其他 js 操作或是頁面互動，就會降低 fps，也就代表著頁面可能會掉幀，造成視覺上的跳動。</p>\n<p>當然在目前硬體設備越來越強大的狀態下，其實像上圖中的動畫很難會有問題，但若是背後有其他繁重的 js 在運作，還是有可能出現下面這樣的 fps 狀態：</p>\n<p><img src=\"/image/flip-bad-jank.png\" alt=\"Jank FPS\"></p>\n<p>解決方法通常就是要想辦法將這類花費昂貴的動畫改用 <code class=\"language-text\">transform</code>、<code class=\"language-text\">opacity</code> 來製作，讓動畫的進行能在 Composite 階段進行即可，不須動到 Layout。</p>\n<p>這時候就可以引入 FLIP 技巧來幫忙了！透過 FLIP 可以將那些會導致 Layout 更動的動畫，轉成以 <code class=\"language-text\">transform</code> 這樣的屬性來達成。</p>\n<h2 id=\"flip\" style=\"position:relative;\"><a href=\"#flip\" aria-label=\"flip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h2>\n<p>如果你直接 google 搜尋 FLIP，可能會查到滑板教學；搜尋 FLIP CSS，應該會出現卡片翻轉的動畫教學。</p>\n<p>那到底 FLIP 跟網頁動畫的優化有什麼關係呢？</p>\n<p>FLIP 其實是四個字的組合：<strong>F</strong>irst, <strong>L</strong>ast, <strong>I</strong>nvert, <strong>P</strong>lay：</p>\n<ul>\n<li><strong>F</strong>irst：在 FLIP 技巧中，我們需要先記錄下動畫元件的初始狀態。</li>\n<li><strong>L</strong>ast：接著進行一些運算後，套用動畫的最終狀態在動畫元件上，並且將完成動畫後的狀態記錄下來。</li>\n<li><strong>I</strong>nvert：FLIP 最主要的 hack 就是發生在這個階段。根據前兩個步驟，我們可以知道該動畫物件在動畫期間的位置變化，接著利用 <code class=\"language-text\">transform</code> 與 <code class=\"language-text\">scale</code>，將物件從動畫結尾位置移動回初始狀態的地點。</li>\n<li><strong>P</strong>lay：在最後的步驟時，元件已經被我們 <code class=\"language-text\">transform</code> 回起始點了，這時只要將 <code class=\"language-text\">transform</code> 屬性移除，並加上 <code class=\"language-text\">transition</code> 的效果，我們就能完美的消除原先昂貴的 Layout change，改以能擁有獨自 Layer 的 <code class=\"language-text\">transform</code> 來處理動畫效果。</li>\n</ul>\n<p>文字敘述可能不夠好懂，<a href=\"https://twitter.com/davidkpiano\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid</a> 做的這個範例應該就能非常清楚的說明 FLIP 原理：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"EbwrQQ\" data-default-tab=\"result\" data-user=\"davidkpiano\" data-pen-title=\"How the FLIP technique works\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/davidkpiano/pen/EbwrQQ/\">How the FLIP technique works</a> by David Khourshid (<a href=\"https://codepen.io/davidkpiano\">@davidkpiano</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>解釋起來其實會發現跟 FLIP 這個字其實也是很吻合的，把元件從結束狀態 ”翻“ 回初始狀態。</p>\n<p>看到這邊可能會有些人覺得困惑，為什麼要這麼麻煩，不能直接用 <code class=\"language-text\">transform</code> 搭配 <code class=\"language-text\">transition</code> 將元件移動至結束位置嗎？</p>\n<p>的確是可以，但如果你今天是要優化原先寫好的動畫，變成要重新手動計算 <code class=\"language-text\">transform</code> 的位置與 <code class=\"language-text\">scale</code> 的比例，是件麻煩的事，倒不如讓瀏覽器幫你處理這部分的計算，只要算出起點與終點位置的差異即可。</p>\n<p>此外，將元件先移至結束位置，再 <code class=\"language-text\">transform</code> 回去起點的方式，可以讓瀏覽器先知道這個動畫會走的過程，據說有助於更快的處理動畫。（但我沒有實際測試過，並非百分百確定有這種效果，也歡迎大家幫忙補充！）</p>\n<h2 id=\"接著我們實際做做看\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E5%AF%A6%E9%9A%9B%E5%81%9A%E5%81%9A%E7%9C%8B\" aria-label=\"接著我們實際做做看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們實際做做看</h2>\n<p>依照 FLIP 原則，我們將一開始的動畫做點調整：</p>\n<ul>\n<li><strong>F</strong>irst：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Fisrt: 記錄初始狀態</span>\n<span class=\"token keyword\">const</span> collapsed <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>L</strong>ast：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 進行運算, 套用動畫結尾的 css style</span>\nelem<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Last: 紀錄結束狀態</span>\n<span class=\"token keyword\">const</span> expanded <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>I</strong>nvert：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// INVERT</span>\n<span class=\"token comment\">// 根據在 F 與 L 紀錄的位置，我們算出其位置差距 (top 與 left)</span>\n<span class=\"token keyword\">const</span> invertedTop <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedLeft <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 大小的部分則是用寬高差去計算 scale 的比例</span>\n<span class=\"token keyword\">const</span> invertedWidth <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedHeight <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 設定 transform origin，代表動畫要從哪裡開始</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transformOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'top left'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 將算好的差距 apply 到 transform 屬性上</span>\n<span class=\"token comment\">// 這樣就能將元件 ”翻“ 回初始位置</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'translate('</span> <span class=\"token operator\">+</span> invertedLeft <span class=\"token operator\">+</span> <span class=\"token string\">'px, '</span> <span class=\"token operator\">+</span> invertedTop <span class=\"token operator\">+</span> <span class=\"token string\">'px) scale('</span> <span class=\"token operator\">+</span> invertedWidth <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> invertedHeight <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>P</strong>lay：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// PLAY</span>\n<span class=\"token comment\">// 利用 Raf，在下個 frame 開始時再做動畫</span>\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 設定 transition，並移除 transform，讓他再 \"翻\" 到結尾位置</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">'550ms ease-out'</span><span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>經由 FLIP 技巧調整過後的動畫：</p>\n<p data-height=\"713\" data-theme-id=\"dark\" data-slug-hash=\"EdRwmr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-pen-title=\"FLIP - good\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/EdRwmr/\">FLIP - good</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>我一開始看到這個實作時，稍微有點困惑，覺得為什麼可以直接先加上結尾狀態的 css，而不會讓元件真正更動？</p>\n<p>原因很簡單，就在於這些動作是在瀏覽器繪製下一個 frame 之前就做完的，在瀏覽器真正過了 16ms，要開始繪圖時，我們已經 apply 了另一個繪圖需求，也就是 <code class=\"language-text\">transform</code>。所以並不會看到元間跑到結束位置的狀況。</p>\n<p>從下面這張圖應該會更好理解：</p>\n<p><img src=\"/image/flip-web-fps.png\" alt=\"FPS\">\n<a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>上排黑色箭頭代表每一次的 frame render，下排則是繪圖需求，而紅色可以想做是我們計算結尾位置的動作。可以明顯看到，在每次紅色箭頭的後面，真正開始繪圖前，都有新的繪圖需求會蓋過去，因此瀏覽器並不會渲染紅色箭頭的部分。</p>\n<p>另外這邊要注意兩件事，第一個是 F、L、I 的時間需要掌控在 <strong>100ms</strong> 之內，根據 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Paul Lewis 的 FLIP 介紹文章</a>，使用者在做了互動後，到感知動畫的發生，這中間可以有 <code class=\"language-text\">100ms</code> 的空隙，我們只要能在這 100ms 中將初始與結尾位置計算完，並翻回初始點，使用者就不會感受到任何差異。</p>\n<p><img src=\"/image/flip-user-perception.jpg\" alt=\"user perception\">\n<a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>最後，在這個例子中，我需要利用 <code class=\"language-text\">transitionend</code> 這個事件，在動畫的最後把 <code class=\"language-text\">transition</code> 拿掉，否則下一次要計算動畫終點位置時 <code class=\"language-text\">elem.classList.add('expanded');</code>，就會產生 <code class=\"language-text\">transition</code> 效果，那不是我們要的。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>FLIP 技巧的概念很簡單，但實作起來的確會增加不少程式碼，但好在有不少套件可以使用，也能搭配 Web Animations API (<a href=\"https://github.com/web-animations/web-animations-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">polyfill</a>) 來開發。比較推薦的是 <a href=\"https://github.com/davidkpiano/flipping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid 的 flipping.js</a>，他在去年也有寫了一篇文章來介紹 <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a>，其中還有講到如何將 FLIP 應用在兩個獨立的元件上，寫得很棒很清楚，推薦大家直接去閱讀！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a></li>\n<li><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></li>\n<li><a href=\"https://medium.com/outsystems-experts/flip-your-60-fps-animations-flip-em-good-372281598865\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your 60 FPS Animations, FLIP ’Em Good</a></li>\n<li><a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your Animations</a></li>\n</ol>","id":"fad35fd6-9d68-5f2f-894c-29dac6638623","fields":{"slug":"flip-your-animation"},"frontmatter":{"date":"2018-10-20T17:46:57.000Z","title":"FLIP 技巧總複習","tags":["css","javascript","flip","animation"],"type":"tech","slug":"flip-your-animation"},"timeToRead":7},{"excerpt":"『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』","html":"<blockquote>\n<p>『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近公司同事組了 Design pattern 的讀書會，剛好這週研讀到 <code class=\"language-text\">Visitor Pattern</code> 時，同事介紹說我們每天在用的工具 Babel 就是採用 <code class=\"language-text\">Vistor Pattern</code>，透過 <code class=\"language-text\">visitor</code> 拜訪 <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">AST (Abstract Syntax Tree)</code></a>，進而將程式碼進行對應轉換。</p>\n<p>這除了勾起我前陣子想要了解 <code class=\"language-text\">AST</code> 的想法外，也再度提醒我對於 Babel Plugin 背後的實作方式不太了解，只知道像是 ESLint, UglifyJS 或是 Webpack，他們的核心都是用到了 <code class=\"language-text\">AST</code> 來實現程式碼的檢查、分析與操作，但並不曉得實際上要如何使用。</p>\n<p>此外，我先前其實都沒有想過要自己寫 Babel Plugin，總覺得 Babel 的 Plugin 就是要很一般化，大家都能使用的，但其實不然啊，自己的專案或甚至是公司團隊內的專案，只要能有助於大家的工作效率，就算只給內部使用又何妨？明確定義好使用的情境跟 Style 即可。</p>\n<p>因此這次就決定花點時間來學習如何實作 Babel Plugin，並透過實作 Babel Plugin 的過程，一同了解 AST 的概念。</p>\n<h2 id=\"一直提到-ast到底什麼是-ast\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E7%9B%B4%E6%8F%90%E5%88%B0-ast%E5%88%B0%E5%BA%95%E4%BB%80%E9%BA%BC%E6%98%AF-ast\" aria-label=\"一直提到 ast到底什麼是 ast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一直提到 AST，到底什麼是 AST？</h2>\n<p>AST 的全文是 Abstract Syntax Tree，中文大多翻作抽象語法樹，主要是將我們 <strong>人類</strong> 所寫的程式語法，轉換成 <strong>程式</strong> 比較容易閱讀的語法結構，並以樹的資料結構來儲存。</p>\n<p>直接來個例子，先讓大家看看 <strong>給人類看的 code</strong> 與 <strong>給程式讀的 code</strong> 之間的差異：</p>\n<p><img src=\"/image/humancode-programcode.png\" alt=\"Human code vs Program code(AST)\"></p>\n<p>左邊的程式經過 Parser 的轉換後，就會產出右圖中的 AST。</p>\n<p>在遠古的 Nestcape 時代，對於 Javascript 的 AST 有許多種實作，而後來為了解決一致性的問題，<a href=\"https://github.com/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESTree</a> 這個組織定義了現今通用的 <a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a>。</p>\n<p>像是我們現在常用的 Babel 所使用的 AST 就是基於 ESTree 的規範延伸修改的。</p>\n<h3 id=\"那-babel-這些工具到底拿-ast-來做什麼呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3-babel-%E9%80%99%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%88%B0%E5%BA%95%E6%8B%BF-ast-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2\" aria-label=\"那 babel 這些工具到底拿 ast 來做什麼呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那 Babel 這些工具到底拿 AST 來做什麼呢？</h3>\n<p>稍稍回想一下，Babel 或是 ESLint 在我們平日的開發中扮演了什麼角色？</p>\n<p>情境大概是：</p>\n<blockquote>\n<p>你用 ES6 寫了一段 arrow function，而 Babel 會幫忙轉換成 ES5 的匿名函數，同時 ESLint 可能會顯示 Warning 告知你的括號前面必須要留有空格。</p>\n</blockquote>\n<p>這段描述當中，Babel 其實將你的 code 透過三個 stage 來處理：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#stages-of-babel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>parse</strong>, <strong>transform</strong>, <strong>generate</strong>.</a></p>\n<p>而其中，AST 其實就出現了兩次：</p>\n<!-- 放置圖片 code to AST and Modefied AST to code -->\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"The role AST plays in babel\"></p>\n<ul>\n<li>\n<p><strong>Parse stage</strong></p>\n<p>你寫的 js code 會經由 js parser 轉換為 AST，當然其中會透過 <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lexical Analysis</a> 與 <a href=\"https://en.wikipedia.org/wiki/Parsing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Syntactic Analysis</a>。</p>\n</li>\n<li>\n<p><strong>Transform stage</strong></p>\n<p>而這時 Babel plugin 與 ESLint plugin 就可以介入你的程式進行改造，<strong>幫忙轉換成 ES5 的匿名函數</strong>以及<strong>審視你的程式，決定是否要提示 Warning</strong> 的這兩個動作就是在這個階段發生的，我們將 Parser 解析後的 AST 改造成我們想要的樣子。</p>\n</li>\n<li>\n<p><strong>Generate stage</strong></p>\n<p>最後，改造完成的 AST 會再被 generator 轉換為一般的 code 輸出。</p>\n</li>\n</ul>\n<p>常用的 js parser 有很多種，像是 babylon, acorn, esprima 等等，而所謂的 Babel plugin 或是 ESLint plugin，則可以看作是一種 Transformer。</p>\n<h3 id=\"窺探一下-ast-的內容\" style=\"position:relative;\"><a href=\"#%E7%AA%BA%E6%8E%A2%E4%B8%80%E4%B8%8B-ast-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"窺探一下 ast 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>窺探一下 AST 的內容</h3>\n<p>在實作 Plugin 前，先了解一下 AST 的長相對之後會比較有幫助。</p>\n<p>開始之前先介紹兩個常用網站：</p>\n<ul>\n<li>\n<p><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></p>\n<p>超棒的網站，在上面可以邊看原始程式碼根據不同 Parser 所建構出來的 AST，也能切換不同 Transformer 來實作 Plugin 內容。</p>\n</li>\n<li>\n<p><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></p>\n<p>主要是將 AST 視覺化，對於理解整個程式碼的 AST 結構能有比較清楚 Overview。</p>\n</li>\n</ul>\n<p>不過我個人是覺得 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 就足夠了， <a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VISUALIZER</a> 雖然能看到圖像化的樹狀結構，但操作起來不是很順暢，也無法直接在上面撰寫 Transformer。所以下面都會以 <code class=\"language-text\">AST Exporler</code> 為使用工具來介紹。</p>\n<p>現在我們以一個比最開始稍稍複雜一點的簡單範例來解析，在這邊我們採用與 Babel 相同的 Parser - <a href=\"https://github.com/babel/babel/tree/master/packages/babel-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babylon7</a>：</p>\n<p>我們的原始程式碼如下，定義 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 兩個變數，以及一個 <code class=\"language-text\">add</code> function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一步一步來看，<code class=\"language-text\">const a = 2</code> 的 AST 會長這樣：</p>\n<p><img src=\"/image/ast-explorer-sample-1.png\" alt=\"AST Explorer example 1\"></p>\n<p>你的程式碼在 AST 當中，會被拆解成各種 node 來存放表示，而每一個 node 都有自己的 type，各種 type 有其特定的屬性參數，以上圖為例：</p>\n<p><code class=\"language-text\">const</code> 在 AST 中就是ㄧ個 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">VariableDeclaration</code> 的 node，這個 node 必須包含兩種屬性， <code class=\"language-text\">declarations</code> 與 <code class=\"language-text\">kind</code>：</p>\n<p><code class=\"language-text\">kind</code> 很好理解，意指我們的 <code class=\"language-text\">VariableDeclaration</code> 可以有三種類型（<code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>）， 而 <code class=\"language-text\">declarations</code> 看起來就是存放你所宣告的變數，像 <code class=\"language-text\">a = 2</code>，但他是 <code class=\"language-text\">Array of VariableDeclarator</code>，我們不是只有宣告一個變數嗎？</p>\n<p>其實是要應付這種寫法：<code class=\"language-text\">const a = 2, b = 3</code>，需要能接收多個 <code class=\"language-text\">VariableDeclarator</code>。</p>\n<p>而 <code class=\"language-text\">VariableDeclarator</code> 這種 type 的 node 代表的就是 <code class=\"language-text\">a=2</code> 這種宣告式，其中包含兩個屬性 <code class=\"language-text\">id</code> 與 <code class=\"language-text\">init</code>，我們將其展開看看：</p>\n<p><img src=\"/image/ast-explorer-sample-2.png\" alt=\"AST Explorer example 2\"></p>\n<p><code class=\"language-text\">id</code> 屬性所接受的是 <code class=\"language-text\">identifier</code> 這個 type 的 node，代表該 <code class=\"language-text\">VariableDeclarator</code> 的 identity。該 node 只需要一個 <code class=\"language-text\">name</code> 屬性，也就是他的名稱，在這邊的例子中當然就是 <code class=\"language-text\">a</code> 囉。而 <code class=\"language-text\">init</code> 則是這個 <code class=\"language-text\">VariableDeclarator</code> 的初始值，因為我們程式中是初始 <code class=\"language-text\">a</code> 為 <code class=\"language-text\">2</code>，所以這個 <code class=\"language-text\">init</code> 屬性就會連到一個 <code class=\"language-text\">NumericLiteral</code> type 的 node，擁有 <code class=\"language-text\">value</code> 為 <code class=\"language-text\">2</code> 的屬性。</p>\n<p>此外，眼尖的讀者想必都有發現到，每個 node 都有 <code class=\"language-text\">start</code>, <code class=\"language-text\">end</code> 與 <code class=\"language-text\">loc</code> 這三個屬性，這是用來代表該 node 在程式的第幾行第幾列。</p>\n<p>看到這邊應該對於 AST 的結構會有點感覺了，基本上就是 Parser 會先將你的程式切成多種 tokens，接著依照類別來區分是哪種 node，最後從程式結構上一一把 node 串接，形成一顆完整的 Abstract Syntax Tree。如果覺得剛剛用 AST Explorer 轉化的格式不夠清楚，這邊補充一下同樣程式用 VISUALIZER 出來的 AST 長相，應該會對 AST 的結構更有感受：</p>\n<p><img src=\"/image/ast-visualizer.png\" alt=\"ast visualizer\"></p>\n<p>範例程式中我們還有使用到 <code class=\"language-text\">function</code>，他長出的 AST 與宣告變數在 node type 上有不少差異，但大體結構就如同上面介紹的一般，這邊就不再贅述，相信看到這邊的讀者也有能力自己去 AST Explorer 玩玩看了！寫些簡單的程式，看看他們經由 Parser 轉換後，會產生怎樣的 AST，每種語法所對應的 node type 又是什麼。</p>\n<h2 id=\"懂了-ast來實際應用一下開始製作-babel-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%87%82%E4%BA%86-ast%E4%BE%86%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8%E4%B8%80%E4%B8%8B%E9%96%8B%E5%A7%8B%E8%A3%BD%E4%BD%9C-babel-plugin-%E5%90%A7\" aria-label=\"懂了 ast來實際應用一下開始製作 babel plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>懂了 AST，來實際應用一下，開始製作 Babel Plugin 吧！</h2>\n<p>出發，總要有個方向。</p>\n<p>要做 Plugin 也得要先決定要做什麼。</p>\n<p>剛好在工作上常常會用到 <code class=\"language-text\">React-intl</code> 這個套件來幫忙處理 i18n，他的使用方法還算簡單，當一些基本設定做好以後，你只要用其提供的一個特殊元件 <code class=\"language-text\">&lt;FormattedMessage /></code>，放入對應文字的 id 即可，像是： <code class=\"language-text\">&lt;FormattedMessage id=\"#words-need-i18n\" /></code> 。</p>\n<p>雖然實際上已經非常簡單了，但我還想更懶一點，能不能直接輸入 <code class=\"language-text\">{'#words-need-i18n'}</code> 就好呢？</p>\n<p>像是能把：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>轉換成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedMessage</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>words-need-i18n<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以！自己寫 Plugin 就可以！</p>\n<h3 id=\"撰寫-babel-plugin-的起手式\" style=\"position:relative;\"><a href=\"#%E6%92%B0%E5%AF%AB-babel-plugin-%E7%9A%84%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-label=\"撰寫 babel plugin 的起手式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>撰寫 Babel Plugin 的起手式</h3>\n<p>先到 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 開啟一個新的頁面，接著在上方列表選取好 Parser (Babylon7) 與 Transformer (Babel7)，並在旁邊的程式區塊內寫上一點範例程式，就是你預期能被 Babel 認得並轉換的\"新\"程式碼，以我的例子就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/step-1-babel-plugin.gif\" alt=\"Babel plugin step 1\"></p>\n<p>接著看看你的 AST 長什麼樣子，想想你該怎麼修改他：</p>\n<p><img src=\"/image/step-2-babel-plugin.png\" alt=\"Babel plugin step 2\"></p>\n<p>出現沒看過的 type 了！沒關係，在剛開始撰寫 Plugin 的過程中一定會遇到許多沒看過的 type 或是不清楚他的屬性型別，好在 babel 有一份非常詳細的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook</a> 與 <a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 可以查閱，只要到上面 <code class=\"language-text\">ctrl + f</code> 一下，應該都能在上頭找到你所需要的知識。</p>\n<p>準備好測試程式碼、了解測試程式碼的 AST、也有了工具書可以查，就能毫無懸念的開始撰寫 Babel plugin 了。</p>\n<h3 id=\"babel-plugin-之-transformvisitorstraversal\" style=\"position:relative;\"><a href=\"#babel-plugin-%E4%B9%8B-transformvisitorstraversal\" aria-label=\"babel plugin 之 transformvisitorstraversal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 之 Transform、Visitors、Traversal</h3>\n<p>還記得我在最一開始說過，Babel 大量使用到了 Visitor pattern 嗎？就是用在這邊！</p>\n<p>之所以 Babel 能夠輕易解析你的程式碼，並且進行各種修改操作，依賴的就是各種 visitors 在 AST 上進行 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">traverse</a>，當遇到對應的 node 時，visitor 就會做出相對的操作，進而將輸入的程式碼 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-generator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transform</a> 成預期的結果，這就是整個 Babel plugin 的實作核心。</p>\n<h3 id=\"babel-plugin-的基礎結構\" style=\"position:relative;\"><a href=\"#babel-plugin-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%B5%90%E6%A7%8B\" aria-label=\"babel plugin 的基礎結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 的基礎結構</h3>\n<p>若你剛剛有照著我的說明，在 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上方列表選取好 Parser 與 Transformer，那左下角應該會出現類似下方的程式區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"ast-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上的預設 template，基本的 Babel plugin 也就是長這樣。</p>\n<p>你會接受一個 <code class=\"language-text\">babel</code> 物件，其中我們會需要的是 <code class=\"language-text\">babel.types</code>，在之後新增修改 node 時會不斷地用到，因此最好存成一個變數，省去 chain lookup。</p>\n<p>而基本上你要做的就是回傳一個 <code class=\"language-text\">visitor object</code>，其中定義以 node type 為名的 funciton，接收兩種參數：<code class=\"language-text\">path</code> 與 <code class=\"language-text\">state</code>：</p>\n<ul>\n<li>path\npath 代表的是在 traverse AST 過程中，連接 node 之間的邊。所以你可以用 <code class=\"language-text\">path.node</code> 取得目前的節點，也可以用 <code class=\"language-text\">path.parent</code> 取得父節點。\n此外，path 還能透過 <code class=\"language-text\">path.traverse</code> 來在原有的 visitor 內進行 nested visiting，這對於想要<strong>讓 visitor 在某個特定 visitor 執行後再執行</strong>時很有幫助，可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 範例</a>。</li>\n<li>state\nstate 的用法在 handbook 上也沒有說得很明確，我的理解是一個貫串整個 traverse 過程的 global state，你可以在任意階段修改 state。其中也包含你想讓使用 plugin 的使用者傳入的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#plugin-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">options 設定</a>。</li>\n</ul>\n<p>以上述 template 為例，你的 visitor 在遇到 type 為 <code class=\"language-text\">Identifier</code> 的節點時，就會執行 <code class=\"language-text\">path.node.name = path.node.name.split('').reverse().join('');</code>，也就是將該 <code class=\"language-text\">Identifier</code> node 的名稱給顛倒過來。</p>\n<p>此外，Visitor 在 traverse AST 的過程中，會在節點上進進出出，所以其實我們是可以定義 <code class=\"language-text\">enter</code> 與 <code class=\"language-text\">exit</code> 的函式來進行操作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Identifier<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entered!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exited!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#visitors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 中有更多詳細介紹</a></p>\n<h3 id=\"動手撰寫自己的-visitor\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E6%89%8B%E6%92%B0%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84-visitor\" aria-label=\"動手撰寫自己的 visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動手撰寫自己的 Visitor</h3>\n<p>知道基礎架構後，就可以開始撰寫 Visitor 了！</p>\n<p>但你可能會有點沒頭緒該怎麼開始，因為你不知道要從哪個 node type 的 visitor function 開始寫。這就是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 的好處了，你只要將游標停放在編譯前的程式碼的任意位置上，右邊的 AST 樹就會自動 Focus 到對應的節點上頭（前提是要記得選取上方的 <code class=\"language-text\">AutoFocus</code>，預設會是啟用的）：</p>\n<p><img src=\"/image/ast-explorer-find-node.gif\" alt=\"Find the node we need\"></p>\n<p>以範例來說，我們要轉換的是 <code class=\"language-text\">{'#words-need-i18n'}</code>，將游標指上去後發現他是一個 type 為 <code class=\"language-text\">StringLiteral</code> 的 node，這就是我們要撰寫的 visitor function！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"i18n-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// some logic in here</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下來把需要的邏輯填寫上去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'JSXExpressionContainer'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>\n          t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXElement</span><span class=\"token punctuation\">(</span>\n              t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXOpeningElement</span><span class=\"token punctuation\">(</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FormattedMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span>\n                      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- 解釋前四行  然後畫個 path 的圖 -->\n<p>在前面有介紹到，<code class=\"language-text\">path</code> 代表連接著目前被拜訪到的節點，所以我們能用 <code class=\"language-text\">path.node.value.startsWith('#')</code> 來檢查目前節點的值是否為我們想要的（開頭為 hashtag）。但由於 <code class=\"language-text\">StringLiteral</code> 感覺得出來是到處都會出現的 node type，所以我們需要設立一些條件：當 <code class=\"language-text\">path.parent.type !== 'JSXExpressionContainer'</code> 時，我們就 bypass 這次的 visit 操作。所謂的 <code class=\"language-text\">JSXExpressionContainer</code> 就是在 jsx 中的 <code class=\"language-text\">{ }</code>。</p>\n<p>當條件都成立時，也就代表我們的 visitor 成功找到我們想轉換的程式碼 <code class=\"language-text\">{'#words-need-i18n'}</code>。這時聰明如你，一定會想說那就把 <code class=\"language-text\">path.node</code> 替換掉就好了吧！</p>\n<p>但是，<code class=\"language-text\">path.node</code> 目前指到的是 <code class=\"language-text\">StringLiteral</code>，也就是 <code class=\"language-text\">#words-need-i18n</code>，外面還有一層 <code class=\"language-text\">JSXExpressionContainer</code>，我們不能直接使用 <code class=\"language-text\">path.node.replaceWith</code> 來替換程式碼，我們要連同上一層都一起換掉，因此這邊需要使用 <code class=\"language-text\">path.parentPath.replaceWith</code>。以圖像表示的話大概像這樣：</p>\n<p><img src=\"/image/ast-explorer-path-replace.png\" alt=\"需要找到 parent path 來直接從上層替換程式碼節點\"></p>\n<!-- 放個 gif 說明如何找出要 create 什麼 node, 以及去哪裡找合法參數 （提及 log 訊息不一定看得出來）-->\n<p>接著，<code class=\"language-text\">replaceWith</code> 接收你要替換的節點當作參數，而這時我們最一開始宣告的 <code class=\"language-text\">const { types: t } = babel;</code> 就派上用場啦！</p>\n<p><code class=\"language-text\">babel.types</code> 可以幫我們創建出各種 type 的 node，也提供許多 type checking 的 function，像是剛剛我們檢查 <code class=\"language-text\">path.parent.type</code> 的地方其實應該更改為 <code class=\"language-text\">!t.isJSXExpressionContainer(path.parent)</code>。更多關於 <code class=\"language-text\">babel.types</code> 的操作可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-transformation-operations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 上的說明</a></p>\n<p>但到這邊問題又來了，我們怎麼知道要創建什麼 node 呢？</p>\n<p>我一開始也不知道，但抬頭想一想，AST Explorer 不是就會幫我們轉換 AST 嗎？那就把我們預期的結果程式碼也貼上去，不就知道他的 AST 長相了嗎？</p>\n<p>大膽將 <code class=\"language-text\">&lt;FormattedMessage id={'#words-need-i18n'}></code> 貼上去後，就能得到其 AST 結構：</p>\n<p><img src=\"/image/ast-explorer-final-ast-format.png\" alt=\"預期結果的 AST 結構\"></p>\n<p>接著呢，就到 <strong><a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 官網的 docs</a>  裡面去查詢每一種需要創建的 type，各自要填入哪些參數</strong>，舉例來說，<code class=\"language-text\">&lt;FormattedMessage></code> 會是一個被 <code class=\"language-text\">JSXOpeningElement</code> 包起來，從 <a href=\"https://babeljs.io/docs/en/babel-types#jsxopeningelement\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 能看到非常詳細的說明：</p>\n<p><img src=\"/image/ast-explorer-docs.png\" alt=\"JSXOpeningElement\"></p>\n<p>我們要填入三個參數: <code class=\"language-text\">name</code>, <code class=\"language-text\">attributes</code> 與 <code class=\"language-text\">selfClosing</code>，第一與第三個很好理解，中間的 <code class=\"language-text\">attributes</code> 裡面包含了其他的 type，這時你就需要再繼續往下查，直到完成所有需求為止。</p>\n<p>照著這樣的思路，一一將 AST 內的結構轉換到你的 plugin 程式碼內，就大功告成啦！</p>\n<p><img src=\"/image/ast-explorer-final-result.png\" alt=\"最終結果\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>當然這只是個很簡陋的實作，不過也算是把 plugin 的製作概念呈現了一遍，並稍加了解了 AST 的重要性與實用性。</p>\n<p>在實作你所想要的 plugin 功能時，勢必會遇到複雜得多的狀況，建議大家還是直接在 handbook 上查看最直接，上面有更詳細的 API 介紹與教學，包含 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-template</a> 、 babel-types 的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#builders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">builder</a> 與 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#validators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Validators</a>，更有 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Best Practices</a> 可供參考。也可以看看高手們的<a href=\"https://github.com/kentcdodds/babel-plugin-preval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a></p>\n<p>最後，不知道有沒有讀者會覺得整個 Plugin 的邏輯操作與大家熟悉的 jQuery 有點類似？都是選取到某個元件後，就針對該元件進行更動：<code class=\"language-text\">$('StringLiteral').textContent = '&lt;FormattedMessage id={'xxx'}>'</code></p>\n<p>我在查資料的過程中發現一篇<a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常有趣又很清楚的介紹</a>，其中就是以 jQuery 來做類比（節錄其 slides 中的一段）：</p>\n<p><code class=\"language-text\">Babel:Javascript :: jQuery:DOM</code></p>\n<p><strong>jQuery 幫助你改變 DOM，而 Babel 幫助你轉化 Javascirpt</strong></p>\n<p>實在是很貼切的比喻不是嗎？</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/kentcdodds/a-beginners-guide-to-asts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Writing custom Babel and ESLint plugins</a></li>\n<li><a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How writing babel-plugin is like wrigint jQuery</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel Plugin Handbook</a></li>\n<li><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></li>\n<li><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></li>\n<li><a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a></li>\n</ol>","id":"89ec09ae-24c7-5115-8444-f16260372725","fields":{"slug":"visit-ast-with-babel-plugin"},"frontmatter":{"date":"2018-08-25T18:32:14.000Z","title":"透過製作 Babel-plugin 初訪 AST","tags":["es6","javascript","babel","ast","pattern"],"type":"tech","slug":"visit-ast-with-babel-plugin"},"timeToRead":16},{"excerpt":"『你能相信聖誕老人是真實存在的有十年之久，那你也能相信你自己，哪怕只有十秒鐘』","html":"<blockquote>\n<p>『你能相信聖誕老人是真實存在的有十年之久，那你也能相信你自己，哪怕只有十秒鐘』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>上次我們介紹了三種 Rect Component Patterns，包含 <code class=\"language-text\">Compound component</code>、<code class=\"language-text\">Render props component</code> 與 <code class=\"language-text\">Prop collections &amp; getters</code>，而今天要繼續往下介紹剩下的五個 Patterns:</p>\n<ul>\n<li>State Initializers</li>\n<li>State Reducer</li>\n<li>Control Props</li>\n<li>Provider</li>\n<li>Higher-order component</li>\n</ul>\n<p>若對前三個 Pattern 不熟悉，或是沒看過上一篇文章的可以移駕至 <a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">進階 React Component Patterns 筆記（上）</a></p>\n<p>接下來的 Pattern 都會延續之前的 Demo 範例，所以建議先閱讀過上篇！</p>\n<p>此外，每個 Pattern 的最後都放有 codesandbox 的 demo link，覺得文字太多的可以直接去看完整的 code 喔！</p>\n<h1 id=\"state-initializers\" style=\"position:relative;\"><a href=\"#state-initializers\" aria-label=\"state initializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Initializers</h1>\n<p>有時候我們會希望能讓元件回復到初始狀態，或是能讓使用者自己定義初始狀態，這時就適合採用 State initializer 技巧。</p>\n<p>首先，我們利用自定義的 <code class=\"language-text\">inistialState</code> 來存放元件初始狀態，而在真正的 state 中去 reference 它：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...other function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣一來，要實作 <code class=\"language-text\">reset</code> 函式就相當簡單了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而要讓使用者能自定義元件初始狀態的方式，相信多數讀者都有用過，也就是讓使用者透過 props 來定義元件的 initial state：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialOn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...other function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由於並不是所有使用者都會自行定義初始狀態，所以別忘了在 <code class=\"language-text\">defaultProps</code> 中宣告我們自己希望的初始值喔！</p>\n<p><a href=\"https://codesandbox.io/embed/2wp3jr6o8j\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo link</a></p>\n<p>上面的 Demo 範例是延續<a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上篇</a>提到的 <code class=\"language-text\">Prop collections &amp; getters</code> 與 <code class=\"language-text\">Render props</code>，所以這邊加入的 <code class=\"language-text\">reset</code> 按鈕要記得加入 <code class=\"language-text\">getStateAndHelpers</code> 中傳遞給 <code class=\"language-text\">render props</code> 中的 children 使用。</p>\n<h1 id=\"state-reducer\" style=\"position:relative;\"><a href=\"#state-reducer\" aria-label=\"state reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Reducer</h1>\n<p>State Reducer 是一個蠻有趣的概念，主要目的是讓使用者能夠介入元件狀態改變的行為，讓元件在每次的 <code class=\"language-text\">setState</code> 時，都能夠被使用者影響。</p>\n<p>舉個簡單的範例，像是我們先前的 Toggle component，如果今天使用者提出個需求，想要讓這個元件只能被 toggle 三次，那我們該怎麼做呢？</p>\n<p>你當然可以讓使用者多傳一個 props 控制次數，然後在內部更動狀態時去檢查有沒有超過那個次數：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onReset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    initialOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 元件內部多一個 toggleTimes 來控制目前的 toggle 次數</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialOn<span class=\"token punctuation\">,</span> currentToggleTimes<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 每次 toggle 時判斷有沒有超過使用者定義的 toggle 次數上限</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentToggleTimes <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toggleTimes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle too much'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on<span class=\"token punctuation\">,</span>\n        currentToggleTimes<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentToggleTimes <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...other methods</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但你也知道使用者的需求總是會變動，假如他突然間也想控制 reset 的次數怎麼辦? 你的程式不就改不完？</p>\n<p>這時我們就能採用 <code class=\"language-text\">State Reducer</code>，先看一下使用者應該會怎麼使用 <code class=\"language-text\">State Reducer</code>：\n｀</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> timesClicked<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState\n  <span class=\"token function-variable function\">toggleStateReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> changes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// state 為 Toggle 的 current state</span>\n    <span class=\"token comment\">// changes 為該次 Toggle 動作所造成的改變</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>timesClicked <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>changes<span class=\"token punctuation\">,</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> changes\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle\n          initialOn<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n          onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> timesClicked <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n               timesClicked<span class=\"token operator\">:</span> timesClicked <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          onReset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">initialState</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          stateReducer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleStateReducer<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> getTogglerProps<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// render props</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們讓使用者傳入一個 <code class=\"language-text\">stateReducer</code>，其中接受兩個參數，一個是 Toggle component 的 current state，另一個是該次 Toggle component 執行 <code class=\"language-text\">setState</code> 時，所接受的變化 <code class=\"language-text\">changes</code>，而回傳值就是 Toggle component 實際 <code class=\"language-text\">setState</code> 時所接受的 change object。</p>\n<p>因此在這個函式中，使用者就擁有了一個機會能夠在元件真正觸發 <code class=\"language-text\">setState</code> 之前，進行一些操作，以剛剛例子來說，就能在這邊判斷使用者自己紀錄的 state(<code class=\"language-text\">timesClicked</code>) 有沒有超過某個值，如果超過了，那我們之後每次的回傳結果中，都會將 <code class=\"language-text\">on</code> 這個 state 設為 false。</p>\n<p>那元件本身該如何讓 <code class=\"language-text\">stateReducer</code> 介入 <code class=\"language-text\">setState</code> 中呢？重點就在這段：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">internalSetState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 確認傳入的 changes 是單純的物件，或是函式</span>\n      <span class=\"token keyword\">const</span> changesObject <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typeof</span> changes <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">changes</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> changes\n      <span class=\"token comment\">// 呼叫使用者傳入的 stateReducer 來取得最終的 state change object</span>\n      <span class=\"token keyword\">const</span> reducedChanges <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">stateReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> changesObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 最後只是檢查一下 changes 是否為空，避免重複 render</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducedChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n        <span class=\"token operator\">?</span> reducedChanges\n        <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們需要建立一個介面與原本 <code class=\"language-text\">setState</code> 相同的 <code class=\"language-text\">internalSetState</code> 的方法，取代原本的 <code class=\"language-text\">setState</code>。</p>\n<p>其中需要注意的有兩點，一個是原本的 <code class=\"language-text\">setState</code> 是能接受函式當第一個參數的，因此我們需要先判斷 <code class=\"language-text\">changes</code> 是否為 function，才能繼續進行其他動作。</p>\n<p>另一個則是並非所有的 <code class=\"language-text\">setState</code> 都一定要用 <code class=\"language-text\">internalSetState</code> 取代，像是 <code class=\"language-text\">reset</code> function 我們可能不太希望使用者能介入，應該要很明確的 reset 所有狀態，因此這邊可以用原本的 <code class=\"language-text\">setState</code>。</p>\n<p>看看 <a href=\"https://codesandbox.io/embed/wyl152o1jw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a> ，並實際玩玩看會更清楚！</p>\n<p>另外，在 Kent C. Dodds 的 workshop 中，他在 internalSetState 的實作上有提到一種他比較偏好的寫法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">internalSetState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>changes<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> c <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">changes</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">stateReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducedChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> c <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過硬轉成 array 後，再用 map 將每個步驟 chain 起來，的確比較乾淨跟簡單，但比起原本做法沒那麼直覺就是了，尤其是最後還要取 <code class=\"language-text\">[0]</code> 出來，但參考一下也不錯！</p>\n<p>透過 <code class=\"language-text\">State Reducer</code>，不僅使用者開心（能夠介入元件 state 的更動），開發者也不用疲於奔命一直改 code（讓使用者自己處理 reducer 實際內容），但壞處就是你需要呼叫一個 <code class=\"language-text\">internalSetState</code> 的函式，蠻可能造成 trace code 上的困擾，算是個 trade-off。</p>\n<h1 id=\"control-props\" style=\"position:relative;\"><a href=\"#control-props\" aria-label=\"control props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Props</h1>\n<p>除非你從來沒有用 React 開發與表單相關的 component，否則你一定用過 <code class=\"language-text\">Control Props</code>，因為所謂的 <code class=\"language-text\">Control Props</code> 其實就是 <code class=\"language-text\">Controlled component</code> 的一種實作。</p>\n<p>舉例來說，<code class=\"language-text\">Select</code>, <code class=\"language-text\">Input</code> 等 <code class=\"language-text\">Form</code> 的元件，當使用者輸入值時，其改變的是元件的內部狀態，該狀態通常綁定在 <code class=\"language-text\">value</code> 這個屬性上頭。</p>\n<p>若在 React 中想要取得使用者輸入進表單元件的值時，你就會想要將 state 綁定在元件的 <code class=\"language-text\">value</code> 上頭，然而，一但你傳值給 <code class=\"language-text\">value</code>（也就是 <code class=\"language-text\">value={this.state.value}</code>），你就必須要自己利用 handler 去控制它的狀態改變，否則使用者再怎麼輸入，都不會改變其狀態。因為在你傳值給 <code class=\"language-text\">value</code> 的時候，這個元件就已經歸你控制了，這樣的方式可以保證該元件內部狀態是 single source of truth，不會有使用者的輸入與你的 state 不一致的狀態發生。（關於 <code class=\"language-text\">Controlled component</code> 在 React 官方網站有詳細的<a href=\"https://reactjs.org/docs/forms.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">介紹</a>）</p>\n<p>所以說，<code class=\"language-text\">Control Props</code> 就是想利用這樣的技巧，讓你的元件在讓使用者自行操作 input 時，能確保元件內部狀態的 single source of truth。透過這種方式，也就能夠從使用者角度來同步多個元件的內部狀態。</p>\n<p>一樣已先前的 Toggle 元件來舉例，但這次我們用個簡化版：</p>\n<p>假設今天使用者想同步兩個元件的狀態，他們可以透過本身的 <code class=\"language-text\">State</code> 來控制，並在 <code class=\"language-text\">onToggle</code> 時來更動 <code class=\"language-text\">State</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bothOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">handleToggle</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bothOn<span class=\"token operator\">:</span> on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle on<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>bothOn<span class=\"token punctuation\">}</span> onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle on<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>bothOn<span class=\"token punctuation\">}</span> onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// same render props as above</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但要記得，<code class=\"language-text\">onToggle</code> 實際上是 <code class=\"language-text\">Toggle</code> 元件內部執行完 <code class=\"language-text\">toggle</code> 後才會執行的動作（告知使用者該元件\"被\" Toggle 了），這樣的話，元件要怎麼依照傳入的 Props 來處理內部狀態呢？</p>\n<p>來看一下我們 Toggle 的實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">combinedState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        combinedState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        combinedState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> combinedState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主要重點在於，每次 <code class=\"language-text\">toggle</code> 被 trigger 時，我們都會先去確認一下 <code class=\"language-text\">on</code> 這個 state 有沒有被使用者 <code class=\"language-text\">Controlled</code>（<code class=\"language-text\">isControlled()</code>），若是使用者有透過 <code class=\"language-text\">props</code>（使用者端）傳值給這個 <code class=\"language-text\">state</code>（元件內部），就代表我們得將該 <code class=\"language-text\">state</code> 的掌控交給使用者。</p>\n<p>什麼叫『交給使用者』呢？</p>\n<p>其實也就是要將使用者傳入的 props 與我們自己本身的 state 做 <strong>combination</strong>，並將結果當作元件實際的 state 來使用，如同上述程式碼中的 <code class=\"language-text\">getState()</code> 函數。之後元件所有需要操作 state 的地方都需要透過該函數來取得元件的 <strong>Current State</strong>。</p>\n<p>如此一來，只要使用者有傳入 <code class=\"language-text\">on</code> 這個 props，元件內部關於 <code class=\"language-text\">on</code> 這個 state 的變化，就會像是由使用者本身操控一般（因為我們在每次取得 current state 時都會 merge props 中對應的值），也就能讓使用者同步多個 <code class=\"language-text\">Toggle</code> component 了！</p>\n<p><code class=\"language-text\">Control Props</code> 用文字敘述比較繁瑣難懂，可以到下面的 demo link 玩玩，試著把 <code class=\"language-text\">Toggle</code> component 的 <code class=\"language-text\">on</code> props 拿掉看看差別，拿掉 props 後，兩個元件的狀態就無法同步，但元件本身的狀態還是正常的。\n<a href=\"https://codesandbox.io/embed/p94nmr2p2m\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a></p>\n<p>在 Kent C. Dodds 的 workshop 中，他其實還有介紹如何整合先前的 <code class=\"language-text\">State Reducer</code> 與 <code class=\"language-text\">Control Props</code>，不過我覺得過於複雜，除了很難光用文字敘述外，實際使用的機會感覺也不大，如果有興趣的讀者可以直接去 <a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a> 上看範例(file 10.js)</p>\n<h1 id=\"provider\" style=\"position:relative;\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider</h1>\n<p>Provider pattern 其實是為了解決 <code class=\"language-text\">Props drilling</code> 的問題，什麼是 <code class=\"language-text\">Props drilling</code> 呢？</p>\n<p>舉個簡單例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 toggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 toggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleToggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我知道這段 code 很奇怪，但這裡想呈現的重點是，有些時候我們可能真的想要把某個外層的 props 往下傳遞給底下的 component，這種情況下可能得一層一層將 props 往下帶，即便中間經過的 component 都不需要用到該 props。</p>\n<p>要解決這樣的問題，可以利用 React 的 <a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Context API</code></a>。</p>\n<p>雖然在 React 16 以前，<code class=\"language-text\">Context API</code> 在官方文件是一直處於一種不推薦使用的狀態，但大概因為太多人需要吧（像是 <code class=\"language-text\">redux</code> 等 state management 其實都有用到），現在有了新的實作，讓我們終於可以放心使用 <code class=\"language-text\">Context API</code> 了，因此這邊要介紹的 <code class=\"language-text\">Provider pattern</code>，其實就是利用 React 最新的 <code class=\"language-text\">Context API</code> 來解決 <code class=\"language-text\">Props drilling</code> 問題！</p>\n<p>早在<a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上篇</a>中介紹的 <code class=\"language-text\">Compound component</code> 我們就有用到 Provider pattern 了，而現在就讓我們用剛剛那個離奇的例子來做點修正吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> Consumer <span class=\"token operator\">=</span> ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ui <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> children <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>ui<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>利用 React 16 後出現的 <code class=\"language-text\">React.createContext()</code>，創造一個 <code class=\"language-text\">ToggleContext</code>，並將其提供的 <code class=\"language-text\">Consumer</code> 當作 static 變數放在 <code class=\"language-text\">Toggle</code> 中。</p>\n<p>接著在 render function 中我們使用 <code class=\"language-text\">Context API</code> 提供的另一個 component <code class=\"language-text\">Provider</code>，將傳入 <code class=\"language-text\">Toggle</code> 的 render props 包裹住，並且將 <code class=\"language-text\">Toggle</code> 本身的 <code class=\"language-text\">state</code> 或 <code class=\"language-text\">function</code> 傳到 <code class=\"language-text\">value</code> 這個 props 中。如此一來，<code class=\"language-text\">Toggle</code> 底下的所有 children 之後只要將自己用 <code class=\"language-text\">Toggle.Consumer</code> 包住就可以自由存取 <code class=\"language-text\">Toggle</code> 傳下來的 <code class=\"language-text\">value</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由上面的程式碼可以看到，<code class=\"language-text\">Toggle</code> component 的 <code class=\"language-text\">state</code> 與 <code class=\"language-text\">toggle</code> function 都會被當成 props 傳給被 <code class=\"language-text\">Toggle.Consumer</code> 包裹著的 children。</p>\n<p>包在第三層的 <code class=\"language-text\">&lt;Layer3 /></code> 就可以直接拿到想要的 <code class=\"language-text\">on</code> 與 <code class=\"language-text\">toggle</code>，再也不用從 <code class=\"language-text\">Layer1</code> 傳到 <code class=\"language-text\">Layer2</code> 再傳到 <code class=\"language-text\">Layer3</code> 了！</p>\n<p><a href=\"https://codesandbox.io/embed/m3p2p38z5j\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"higher-order-component\" style=\"position:relative;\"><a href=\"#higher-order-component\" aria-label=\"higher order component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher-order component</h1>\n<p>最後一個 Pattern 我想是大家最熟悉，也是我認為最需要懂得融會貫通的 <code class=\"language-text\">Higher-order component</code>，通常簡稱 <code class=\"language-text\">HOC</code>。旨在解決 <a href=\"https://en.wikipedia.org/wiki/Cross-cutting_concern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Cutting Concerns</a>，說白一點就是讓你將一些可共用的邏輯抽取出來，讓其他元件透過 <code class=\"language-text\">HOC</code> 的包裝後，能獲得該共用功能，之後修改新增時不會因為邏輯跟元件綁太緊而出現問題。</p>\n<p>雖然很重要，但這個 Pattern 相對簡單，React 官網其實就有<a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常詳細的介紹</a>。這邊就簡單介紹就好，先來個範例吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Layer3 <span class=\"token operator\">=</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>contextProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Layer4 <span class=\"token operator\">=</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>contextProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button2 is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button2 is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer4 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個範例延續前一個 <code class=\"language-text\">Provider pattern</code>，我們將 <code class=\"language-text\">Toggle.Consumer</code> 抽出來，包裝成一個 <code class=\"language-text\">HOC</code> <code class=\"language-text\">withToggle</code>，這樣一來，我們可以輕鬆製造出多個擁有 <code class=\"language-text\">Toggle</code> component 功能與狀態的元件，像是這邊的 <code class=\"language-text\">Layer3</code> 與 <code class=\"language-text\">Layer4</code>，他們只需要 care 自己的 UI 邏輯即可，剩下與 <code class=\"language-text\">Toggle</code> 相關的狀態操作都交由 <code class=\"language-text\">withToggle</code> 這個 HOC 幫忙處理。</p>\n<p>而 <code class=\"language-text\">withToggle</code> 長這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token parameter\">toggleContext</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>Component contextProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleContext<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Wrapper<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">withToggle(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span>\n    Component<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">hoistNonReactStatics</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>Wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不是很簡單呢！</p>\n<p><code class=\"language-text\">HOC</code> 負責主要的共用邏輯，在這邊就是 <code class=\"language-text\">Toggle.Consumer</code> 這段，然後將傳入的 <code class=\"language-text\">Component</code> 塞入，可能是放在 <code class=\"language-text\">render</code> 或是像這邊是傳入 <code class=\"language-text\">Consumer</code> 的 children。</p>\n<p>特別要注意的有三點，一個是 <code class=\"language-text\">displayName</code>，由於 <code class=\"language-text\">HOC</code> 會回傳一個新的 Component，這時如果你沒有明確定義一個 <code class=\"language-text\">displayName</code> 的話，在 Dev tool 裡你就只能看到一個 <code class=\"language-text\">Unknown</code> 的元件，會造成開發上的困擾，所以記得要指定一下 <code class=\"language-text\">displayName</code>，通常會用 <code class=\"language-text\">HOC</code> 自己的名稱加上原有 Component 的 <code class=\"language-text\">displayName</code>。</p>\n<p>另一個要注意的點是 <code class=\"language-text\">forwardRef</code>，在 React 中，<code class=\"language-text\">ref</code> 與 <code class=\"language-text\">props</code> 的處理方式不相同，<code class=\"language-text\">ref</code> 並不會如同 props 一般往下傳遞，若你想要取得被 <code class=\"language-text\">HOC</code> 包裹過的 component 的 <code class=\"language-text\">ref</code>，那在你的 <code class=\"language-text\">HOC</code> 中，必須使用 <code class=\"language-text\">React.forwardRef</code> 將其 forward 下去，詳細介紹可以看<a href=\"https://reactjs.org/docs/forwarding-refs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網說明</a>。</p>\n<p>最後，假如你原先的 component 有一些 <code class=\"language-text\">static method</code>，透過 <code class=\"language-text\">HOC</code> 包裝後，你可能會發現那些 <code class=\"language-text\">static method</code> 都取不到了！</p>\n<p>你必須要在 <code class=\"language-text\">HOC</code> 中自行複製一份到 <code class=\"language-text\">HOC</code> 上頭，像這樣（取自 <a href=\"https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官網</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Must know exactly which method(s) to copy :(</span>\n  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但這樣太麻煩了，我們可以直接利用 <code class=\"language-text\">hoistNonReactStatics</code> 這套 lib 來幫忙，這樣就萬無一失了！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/q3wmv6okqw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>介紹了這麼多種 Pattern，其實我覺得 HOC、Render Props 與 Compound Component 是最需要好好掌握並且多加運用的，其他如 State Reducer、Prop Collections and Getters 則是平常在進行 Code Review 時，可以好好拿出來思考一下是否能夠採用，為你的專案加分。\n無論如何，經過這樣的學習與紀錄，至少讓自己平日開發時，能主動多思考一些優化的方向與可能性，總體是蠻有收穫的！</p>\n<p>最後提供大家 Kent C. Dodds 在 workshop 後自己寫的一篇文章，<a href=\"https://blog.kentcdodds.com/mixing-component-patterns-4328f1e26bb5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixing Component Patterns</a>，裡頭他將這些 pattern 結合在一起使用，有興趣的讀者可以去看看到底這麼多 Pattern 要怎麼融合使用。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns workshop</a></li>\n<li><a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns V2 codesandbox</a></li>\n<li><a href=\"https://blog.kentcdodds.com/advanced-react-component-patterns-56af2b74bc5f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns Blog</a></li>\n<li><a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Answers to common questions about render props</a></li>\n<li><a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do more with less using render props</a></li>\n<li><a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React new context api</a></li>\n<li><a href=\"https://blog.kentcdodds.com/mixing-component-patterns-4328f1e26bb5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixing Component Patterns</a></li>\n</ol>","id":"58dec21e-0a3c-51c5-bef1-c4bdd9096457","fields":{"slug":"advanced-react-component-patterns-note-ii"},"frontmatter":{"date":"2018-07-21T23:33:27.000Z","title":"進階 React Component Patterns 筆記（下）","tags":["react","es6","javascript","pattern"],"type":"tech","slug":"advanced-react-component-patterns-note-II"},"timeToRead":16},{"excerpt":"『讓你焦慮的不是事情本身，而是你對事情的認知。』","html":"<blockquote>\n<p>『讓你焦慮的不是事情本身，而是你對事情的認知。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前不久在 Frontend masters 看到一部影片 <a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns</a>，是 Paypal 的工程師 Kent C. Dodds 在某場 workshop 介紹他實作 React component 時所使用的進階 React Patterns（目前似乎要付費觀看，而他在 <a href=\"https://egghead.io/courses/advanced-react-component-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">egghead.io</a> 上也有一系列教學，同樣要收費就是了...），內容非常豐富扎實，若是想提供一些可高度客製化的共用元件，使用這些 Pattern 絕對是有絕佳的幫助！如果可以，我強烈建議大家自己去聽聽，不用把時間花在閱讀我的文字上 :p</p>\n<p>自從看完那影片後，平常開發都會不自覺得去思考這些 pattern，看看如果應用到我目前的專案中，能否帶來益處。</p>\n<p>當然有些早已有在使用，而有些則苦無伸展之處，為了加深自己對這些 pattern 的印象與理解，今天就來筆記一下這系列影片的內容，也希望能對來到這邊的讀者有所幫助。</p>\n<h2 id=\"為何要有-pattern\" style=\"position:relative;\"><a href=\"#%E7%82%BA%E4%BD%95%E8%A6%81%E6%9C%89-pattern\" aria-label=\"為何要有 pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為何要有 Pattern</h2>\n<p>在開始介紹之前，我其實想討論一下為什麼需要有 Pattern，或是說，我們真的需要 Pattern 嗎？</p>\n<p>會有這樣的疑問其實是在過往經驗中，還蠻常發現採用 Design pattern 的程式碼如果需要修改時，對於不熟悉該 Pattern，或是原作者雖然採用某種 Pattern，但沒有堅持到底，在一些地方為了方便而改採取別種作法；更慘的情況是，在錯誤的情境下，採用了不適合的 pattern，這些情況都容易造成維護上的極大困擾。</p>\n<p>所謂的 Pattern，代表的應該是『被分門別類過，通過反覆使用與測試的考驗，且多數人知曉的程式設計經驗總結』，如果說，你今天採用的 Pattern 是團隊內的人都能接受並理解的，然後也都同意該情境下非常適合使用那種 Pattern，非他莫屬，直接打趴其他簡單做法的優缺點，那麼使用 Pattern 是絕對有好處的，除了測試的穩定性、程式碼的重用性外，在開發共用 component 或套件上，更有助於一般元件使用者，像是可以 export 出更加簡潔、方便的 API 等等。</p>\n<p>若不是上述情況，有道是『最好的 Pattern，就是沒有 Pattern』，讓邏輯單純簡單、不影響效能、方便接手的人進行維護，可能比起刻意套用 Pattern 來得有效益。所以在開發前，最好花點時間釐清自己的狀況。</p>\n<p>不過，你也得先了解有哪些 Patterns，才能在開發時有參考依據麻！所以不管你現在用不用得到，多學還是好的！</p>\n<h1 id=\"react-component-patterns\" style=\"position:relative;\"><a href=\"#react-component-patterns\" aria-label=\"react component patterns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component Patterns</h1>\n<p>主要想介紹的 React Component Pattern 有幾種：</p>\n<ul>\n<li>Compound comopnent</li>\n<li>Render props comopnent</li>\n<li>Prop Collections and Getters</li>\n<li>State Initializers</li>\n<li>State Reducer</li>\n<li>Control Props</li>\n<li>Provider</li>\n<li>Higher-order component</li>\n</ul>\n<p>但礙於篇幅關係，打算拆成幾篇文章來說明，今天是上篇，會介紹到 <code class=\"language-text\">Compound component</code>、<code class=\"language-text\">Render props component</code> 與 <code class=\"language-text\">Prop Collections and Getters</code>。</p>\n<h2 id=\"compound-component\" style=\"position:relative;\"><a href=\"#compound-component\" aria-label=\"compound component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compound component</h2>\n<p>假設今天你要撰寫一個 <code class=\"language-text\">Toggle</code> Component，並且分別在 state <code class=\"language-text\">On</code> 或 <code class=\"language-text\">Off</code> 時，能夠顯示不同的文字描述，你會怎麼做？</p>\n<p>一個很直覺的做法是，利用 props 來傳遞不同 state 時所需要顯示的文字（只是呈現 idea，並非有功能的 code）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> whenOn<span class=\"token punctuation\">,</span> whenOff <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on <span class=\"token operator\">?</span> whenOn <span class=\"token operator\">:</span> whenOff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle\n  whenOn<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is on\"</span>\n  whenOff<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is off\"</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>這樣做當然可行，但有幾個明顯的壞處：</p>\n<ul>\n<li>順序無法調動：沒辦法讓 <code class=\"language-text\">Toggle</code> component 的使用者自由得調整 <code class=\"language-text\">whenOn</code> 與 <code class=\"language-text\">whenOff</code> 的顯示順序，除非你另外加入其他 props 來控制。</li>\n<li>\n<p>利用 Props 來傳遞 UI 元件的話，容易造成使用者困擾，只能盡量透過 props 的命名來區別 UI 元件與其他狀態控制的 pros，舉例來說，如果今天 <code class=\"language-text\">Toggle</code> 還有一個 props 是來控制 toggle on 時的 callback：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">&lt;</span>Toggle\n    whenOn<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is on\"</span>\n    whenOff<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is off\"</span>｀\n    whenOnCallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yeee, I am on'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>看起來就不是一個非常好的 API 設計，對吧？</p>\n</li>\n</ul>\n<p>要解決這種情況，最適合的方式就是採用 <code class=\"language-text\">Compound component</code>！</p>\n<p>所謂的 <strong>Compound component</strong> 就是讓你的 UI 元件透過 <code class=\"language-text\">this.props.children</code> 的方式傳入給 <code class=\"language-text\">parent component</code>，利用 <code class=\"language-text\">React.Children.map()</code> 來 render 所有傳入的 <code class=\"language-text\">this.props.children</code>，並且透過 <code class=\"language-text\">React.cloneElement</code> 將 parent 的 <code class=\"language-text\">state</code> 傳入每個 children 的 <code class=\"language-text\">props</code>，讓 parent 與 children 之間會 <strong>隱含著狀態的共享</strong>，對於元件使用者來說，他只需要傳入想要的 <code class=\"language-text\">children component</code>，不用知道 parent 與 children 之間如何溝通，當然也能隨意調整順序，這樣的 API 設計，對於元件使用者就非常的友善。</p>\n<p>在這樣的原則下，不難發現，Compound component 必須要 <strong>同時結合使用 parent component 與 children component 才有意義</strong>。</p>\n<p>以剛剛的 <code class=\"language-text\">&lt;Toggle></code> 為例子，若改以 Compound component 的話：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">On</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Off</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">child</span> <span class=\"token operator\">=></span>\n        React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n          toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle\n  onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/6zz376vrzz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo link</a></p>\n<p>我們透過 <code class=\"language-text\">Toggle</code> Class 的 static properties 來定義 children component，這樣的好處是我們能夠從名稱上就保持 Parent 與 Children Component 之間的關聯性。</p>\n<p>透過 Compound Component，不僅能讓使用者自訂元件順序，又能將 UI component 與其他 callback props 做個清楚的切割。對於使用者來說，完全不需要管 <code class=\"language-text\">Toggle</code> 的 state 變化時，<code class=\"language-text\">Toggle.On</code> 要怎麼變動，他們之間的 state 與 props 都由 Parent component 處理。</p>\n<p>另外，在 Kent C. Dodds 的 workshop 中，有人提問為何不直接用 <code class=\"language-text\">this.props.children.map</code> 就好，而要用 <code class=\"language-text\">React.Children.map</code>？</p>\n<p>原因在於，在目前 React 的實作中，當你的 children 只有一個時，<code class=\"language-text\">this.props.children</code> 不會是一個 array，透過 <code class=\"language-text\">React.Children.map</code> 能寫得更簡潔，少些判斷。</p>\n<p>看到這邊，不知道有沒有想到，其實我們在撰寫表單時常用的 <code class=\"language-text\">&lt;select></code> 與 <code class=\"language-text\">&lt;option></code> 就是一個 Compound component 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>Opt 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>Opt 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"更有彈性的-compound-component\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%9C%89%E5%BD%88%E6%80%A7%E7%9A%84-compound-component\" aria-label=\"更有彈性的 compound component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更有彈性的 Compound Component</h2>\n<p>在上面的例子中，其實只要使用者更動其中一個 children，整個 Compound component 就會壞掉：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle\n  onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>因為 <code class=\"language-text\">React.Children.map</code> 只會 for-loop 到第一層的 children，也就是說，<code class=\"language-text\">React.cloneElement</code> 現在不會複製 <code class=\"language-text\">&lt;Toggle.Button></code> 而是複製 <code class=\"language-text\">&lt;div></code> 了。</p>\n<p>不過好在現在有了 React 16 的 Context API，要解決這個問題簡單了不少，主要就是將 <code class=\"language-text\">state</code> 的共享改由 <code class=\"language-text\">Context</code> 來完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">On</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> contextValue<span class=\"token punctuation\">.</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Off</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>contextValue<span class=\"token punctuation\">.</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contextValue<span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Toggle <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 由於不用傳遞 props 給 children，也就不用 React.Children.map 了，直接使用 this.props.children 即可</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n          toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/mzv766qqmx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<p>如此一來，使用者想要在我們的 Componet 裡面如何 wrap 各個 Child Component 都可以了！</p>\n<p><strong>Note:</strong> 在 workshop 中，Kent C. Dodds 有提到關於在 render 時， <code class=\"language-text\">Provider</code> 每次都會接收到新 object，造成多餘 re-render 的問題，因此可以做點小改良：\n將要傳給 <code class=\"language-text\">Provider</code> 的 value 改以 <code class=\"language-text\">this.state</code> 傳入，這樣每次在 render <code class=\"language-text\">Toggle</code> 時，才不會讓所有 <code class=\"language-text\">Toggle</code> 的 children component 也 re-render。\n只是要特別注意你原本要傳入 context 的 value 內，若有一些 function 如 <code class=\"language-text\">this.toggle</code>，記得確保你的 state 在宣告時能取得到。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstate <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 將 state 移至 toggle function 之下，以確保 refer 得到</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 由於不用傳遞 props 給 children，也就不用 React.Children.map 了，直接使用 this.props.children 即可</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider\n      value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>不過當你並不想把所有 <code class=\"language-text\">state</code> 都放入 <code class=\"language-text\">context</code> 時，可能就得想另一種方法了。</p>\n<h1 id=\"render-props-comopnent\" style=\"position:relative;\"><a href=\"#render-props-comopnent\" aria-label=\"render props comopnent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render props comopnent</h1>\n<p>Render props 相對於 Compound Component 來說應該是比較有名的 Pattern，而他的概念與實作方式也相對簡單，網路上也早有針對 Render props 的相關討論，像<a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>或<a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>。</p>\n<p>從名稱就可以猜出一二，所謂 Render props 就是將 render function 當作 props 傳入，讓原本的 render function 的控制權，從內部元件本身移轉至使用該元件的使用者身上，這種方式讓使用元件的使用者可以更方便的操作 <code class=\"language-text\">｀state</code>，而實作方式上比較常看到的有兩種：</p>\n<ul>\n<li>\n<p>將 render 當作 props 傳入：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>Toggle\n    onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    renderToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'The button is on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'The button is off'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>buttononClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'click on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'click off'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p>用 <code class=\"language-text\">this.props.children</code> 來呼叫 render props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n      state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>Toggle\n      onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'The button is on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'The button is off'</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'click on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'click off'</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n</li>\n</ul>\n<p><a href=\"https://codesandbox.io/embed/6zx6q92qw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<p>以這兩種方法來說，我的想法與 Kent C. Dodds 相同，以 <code class=\"language-text\">this.props.children</code> 來呼叫 render props 在使用上比較有優勢，除了可以明確知道 <code class=\"language-text\">Toggle</code> 元件的起始點外，還可以避免 當 renderProps 的內容很多時，容易 miss 掉一些 <code class=\"language-text\">Toggle</code> 的重要 props 的問題，例如下面的範例：</p>\n<iframe src=\"https://codesandbox.io/embed/jv9xjz5mr3?view=editor\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"prop-collections-and-getters\" style=\"position:relative;\"><a href=\"#prop-collections-and-getters\" aria-label=\"prop collections and getters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prop Collections and Getters</h1>\n<p>在 Kent C. Dodds 的 workshop 中所提到的 <code class=\"language-text\">Prop Collections</code> 與 <code class=\"language-text\">Prop Getters</code> 其實是要搭配運用的。</p>\n<p>我們將上面的例子稍微改變一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>pressed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>pressed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>現在我們有兩個 button 可以同時更改 Toggle 的狀態，而稍微注意一下可以發現兩個 button 其實接收的 props 有共通的部份，目前的寫法很多餘，也不好看。這時候我們就可以創造一個 <code class=\"language-text\">Prop collections</code> 來負責提供 Common 的 props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... Same as before</span>\n  <span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n      togglerProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// collection for common Props</span>\n        <span class=\"token string\">\"aria-pressed\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n        onClick<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而剛剛的範例就能修改為：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> togglerProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span>\n        aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>但這樣做你可能會發現一個缺點，就是當別人不小心 overwrite 你的 common props 時，你無能為力。這其實也是 <code class=\"language-text\">render props</code> 的一個小缺點，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button\n  <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span>\n  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'overwrite'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 蓋過我們原先在 onClick 的操作 (this.toggle)</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"這時候-code-classlanguage-textprop-getterscode-就可以出動了\" style=\"position:relative;\"><a href=\"#%E9%80%99%E6%99%82%E5%80%99-code-classlanguage-textprop-getterscode-%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%87%BA%E5%8B%95%E4%BA%86\" aria-label=\"這時候 code classlanguage textprop getterscode 就可以出動了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>這時候 <code class=\"language-text\">Prop Getters</code> 就可以出動了！</h2>\n<p>在原本的 Prop collections（<code class=\"language-text\">togglerProps</code>）中，我們改以呼叫一個 <code class=\"language-text\">Prop Getter</code> 的方式取得 common props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... Same as before</span>\n  <span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      onClick <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n      getTogglerProps<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getTogglerProps\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如此一來，使用者所提供的 <code class=\"language-text\">onClick</code> 就不會蓋過我們元件原始的 <code class=\"language-text\">onClick</code> 行為，也就是 <code class=\"language-text\">this.toggle</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button\n  <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">getTogglerProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'overwrite'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>如果想要 overwrite 更多的 method，在 <code class=\"language-text\">Prop Getter</code> 中也要做相對應的判斷與修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> otherMethod<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    onClick <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">otherMethod</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">originOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherMethod <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">otherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果嫌每次都要判斷傳入的 props 是否存在很麻煩，可以學 Kent C. Dodds 寫一個 handy funtion：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> fn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> otherMethod<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n  onClick<span class=\"token operator\">:</span> <span class=\"token function\">callAll</span><span class=\"token punctuation\">(</span>onClick<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/wywk4w1z6w\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>今天統整了三個 React component patterns: <code class=\"language-text\">Compound Component</code>、<code class=\"language-text\">Render Props</code> 與 <code class=\"language-text\">Prop Collections &amp; Getters</code>，讓我自己對這幾個 pattern 更熟悉了一些，不過還是要盡量運用在自己的專案當中，才能確切感受其好處，並更得心應手。也希望這些整理對來到這邊的讀者有所幫助，剩下的幾個 Pattern 會陸續補上，決不食言！</p>\n<p>最後，再次呼籲大家去看看 Kent C. Dodds 的影片 <a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns</a>，我比較推薦看 workshop 的版本，因為還可以聽到現場其他人對他的提問，以及他的回答，都很有幫助！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns workshop</a></li>\n<li><a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns V2 codesandbox</a></li>\n<li><a href=\"https://blog.kentcdodds.com/advanced-react-component-patterns-56af2b74bc5f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns Blog</a></li>\n<li><a href=\"https://juejin.im/post/59b78dfe5188257e7e115cae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">什麼是設計模式</a></li>\n<li><a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Answers to common questions about render props</a></li>\n<li><a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do more with less using render props</a></li>\n</ol>","id":"44db8e8e-c093-53e3-b722-992c39c2528d","fields":{"slug":"advanced-react-component-patterns-note"},"frontmatter":{"date":"2018-06-27T23:33:27.000Z","title":"進階 React Component Patterns 筆記（上）","tags":["react","es6","javascript","pattern"],"type":"tech","slug":"advanced-react-component-patterns-note"},"timeToRead":14},{"excerpt":"『強者是不會待在同一個地方太久的。』","html":"<blockquote>\n<p>『強者是不會待在同一個地方太久的。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在眾多 ES6 提供的新功能上，Proxy 與 Reflect 算是最少被提及的，主要原因我想還是因為瀏覽器的支援度較低，不過在我前陣子看到 <a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frameworkless JavaScript Part 3: One-Way Data Binding</a> 這篇文章時（好文推薦！很有趣），特意去查了一下才發現目前支援度已經越來越好：</p>\n<p><img src=\"/image/caniuseproxy.png\" alt=\"Can I Use Proxy\"></p>\n<p><img src=\"/image/caniusereflect.png\" alt=\"Can I Use Reflect\"></p>\n<p>常用的瀏覽器幾乎都支援，我想也是可以來好好了解一下這兩個神奇的物件了！</p>\n<p>最後有個參考該篇文章實作的 Todo app 範例，如果懶得看介紹的可以先 <a href=\"#todo-sample\">跳下去</a> 玩玩，但若是對 Proxy 與 Reflect 不了解的人還是建議先看一下。</p>\n<h1 id=\"proxy\" style=\"position:relative;\"><a href=\"#proxy\" aria-label=\"proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy</h1>\n<blockquote>\n<p>Proxy 物件被使用於定義基本操作的自定行為（例如：尋找屬性、賦值、列舉、函式調用等等）。 - <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></p>\n</blockquote>\n<p>不知道為什麼唸起來有點饒口，但基本上跟其字面意思相同，就是代理（代為管理）物件行為。</p>\n<p>Proxy 是一個函式物件（可被建構），他提供一個機會讓你能介入一般物件的基本操作行為，像是在你 assign 一個值給某個物件時，可以透過 Proxy 先進行一些 validation 等等，藉此讓使用被代理過後的物件之開發者可以專注在其他核心功能上。</p>\n<p>咦？聽起來很像許多 framework 或 helper library 會做的事情？有趣！讓我們繼續看下去。</p>\n<p>使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> proxyObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">target</code> 就是你想要代理的對象；而 <code class=\"language-text\">handler</code> 則是一個物件，其中定義了所有你想替 target 代為管理的操作定義，包含了：</p>\n<ul>\n<li>construct(target, args) - 代理 Object 的 <code class=\"language-text\">new</code> operator</li>\n<li>get(target, prop, receiver) - 代理 Object getting properties 時的行為</li>\n<li>set(target, prop, value, receiver) - 代理 Object setting properties 時的行為</li>\n<li>apply(target, object, args) - 代理 function call，像是 f.apply()</li>\n<li>has(target, prop) - 代理 <code class=\"language-text\">in</code> operator</li>\n<li>defineProperty(target, propKey, propDesc) - 代理 <code class=\"language-text\">Object.defineProperty</code>.</li>\n<li>deleteProperty(target, prop) - 代理 <code class=\"language-text\">delete</code> operator</li>\n<li>getOwnPropertyDescriptor(target, prop) - 代理 <code class=\"language-text\">Object.getOwnPropertyDescriptor</code>.</li>\n<li>getPrototypeOf(target) - 代理 <code class=\"language-text\">Object.getPrototypeOf</code>.</li>\n<li>setPrototypeOf(target, proto) - 代理 <code class=\"language-text\">Object.setPrototypeOf</code>.</li>\n<li>ownKeys(target) - 代理 <code class=\"language-text\">Object.getOwnPropertyNames</code> 與 <code class=\"language-text\">Object.getOwnPropertySymbols</code>.</li>\n<li>isExtensible(target) - 代理 <code class=\"language-text\">Object.isExtensible</code>.</li>\n<li>preventExtensions(target) - 代理 <code class=\"language-text\">Object.preventExtensions</code>.</li>\n</ul>\n<p><code class=\"language-text\">handler</code> object 所包含的 method 定義可以從 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 看到更多範例與描述。</p>\n<h2 id=\"說了這麼多我們到底能拿-proxy-來做什麼呢直接來點範例吧\" style=\"position:relative;\"><a href=\"#%E8%AA%AA%E4%BA%86%E9%80%99%E9%BA%BC%E5%A4%9A%E6%88%91%E5%80%91%E5%88%B0%E5%BA%95%E8%83%BD%E6%8B%BF-proxy-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2%E7%9B%B4%E6%8E%A5%E4%BE%86%E9%BB%9E%E7%AF%84%E4%BE%8B%E5%90%A7\" aria-label=\"說了這麼多我們到底能拿 proxy 來做什麼呢直接來點範例吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>說了這麼多，我們到底能拿 Proxy 來做什麼呢？直接來點範例吧！</h2>\n<h3 id=\"直觀的私有變數\" style=\"position:relative;\"><a href=\"#%E7%9B%B4%E8%A7%80%E7%9A%84%E7%A7%81%E6%9C%89%E8%AE%8A%E6%95%B8\" aria-label=\"直觀的私有變數 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>直觀的私有變數</h3>\n<p>以往在 Javascript 中，我們可能需要透過 <code class=\"language-text\">closure</code> 來實現物件的私有變數，像是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FooBar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeTime <span class=\"token operator\">=</span> <span class=\"token string\">'never'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setSecretDrink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">secret</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> secretDrink <span class=\"token operator\">=</span> secret<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getSecretDrink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> secretDrink<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FooBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfooBar<span class=\"token punctuation\">.</span><span class=\"token function\">setSecretDrink</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span><span class=\"token function\">getSecretDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Jäger Bom'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span>closeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span>secretDrink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>但透過 Proxy，我們可以很直觀地在一個 Object 內達成類似效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _secretDrink<span class=\"token operator\">:</span> <span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">,</span>\n  closeTime<span class=\"token operator\">:</span> <span class=\"token string\">'never'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBarProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 以底線開頭的作為私有變數</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能存取私有變數！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 非私有變數，那就回傳原物件的原屬性值</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能修改私有變數！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">has</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>prop <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFooBarProxy<span class=\"token punctuation\">.</span>_secretDrink<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能存取私有變數！</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBarProxy<span class=\"token punctuation\">.</span>closeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\nFooBarProxy<span class=\"token punctuation\">.</span>_secretDrink <span class=\"token operator\">=</span> <span class=\"token string\">'Cola'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能修改私有變數！</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_secretDrink'</span> <span class=\"token keyword\">in</span> FooBarProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'closeTime'</span> <span class=\"token keyword\">in</span> FooBarProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>眼尖一點的讀者可能會發現，這邊 handler 裡面的 <code class=\"language-text\">get</code>、<code class=\"language-text\">set</code> 好像跟上面定義中的參數不同，少了 <code class=\"language-text\">receiver</code> 這個參數？</p>\n<p>沒錯，這個神奇的第三個參數其實是指向你產生的 Proxy 實例，以上面例子來看就是 <code class=\"language-text\">FooBarProxy</code> 本身，由於範例中用不到，所以不宣告也沒關係，不過晚點在 <code class=\"language-text\">Reflect</code> 的介紹會再度提起。</p>\n<p>另外，若是沒有被你代理到的操作，則會直接 fallback 回原始 target 物件的操作上。</p>\n<h3 id=\"在設置物件屬性前進行-validation\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E8%A8%AD%E7%BD%AE%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%89%8D%E9%80%B2%E8%A1%8C-validation\" aria-label=\"在設置物件屬性前進行 validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在設置物件屬性前進行 Validation</h3>\n<p>延續剛剛的例子，我們的 FooBar 除了秘密飲料外，也需要紀錄一下基本資訊，像是電話、地址等等，這時候 Proxy 就能為我們帶來另一個好處：驗證屬性值：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _secretDrink<span class=\"token operator\">:</span> <span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">,</span>\n  closeTime<span class=\"token operator\">:</span> <span class=\"token string\">'never'</span><span class=\"token punctuation\">,</span>\n  phoneNumber<span class=\"token operator\">:</span> <span class=\"token string\">'02-2849-2839'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">===</span> <span class=\"token string\">'phoneNumber'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// phone number validation</span>\n      <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\(?\\d{2}\\)?[\\s\\-]?\\d{4}\\-?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot set </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Wrong format. Should be xx-xxxx-xxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"/image/proxy-validationexample.png\" alt=\"proxy example validation\"></p>\n<p>只要你設置的 <code class=\"language-text\">phoneNumber</code> 不符合 regex 的規則，就會拋出一個 Error 告訴開發者，此物件的 <code class=\"language-text\">phoneNumber</code> 屬性值是有固定 format 的。</p>\n<p>當然，javascript 充滿彈性，你也可以有彈性一點的寫法，把 validator 抽離出來：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> BarValidator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">_secretDrink</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'cola'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lame...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">phoneNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\(?\\d{2}\\)?[\\s\\-]?\\d{4}\\-?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot set phoneNumber to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Wrong format. Should be xx-xxxx-xxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    BarValidator<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"用來設定屬性預設值\" style=\"position:relative;\"><a href=\"#%E7%94%A8%E4%BE%86%E8%A8%AD%E5%AE%9A%E5%B1%AC%E6%80%A7%E9%A0%90%E8%A8%AD%E5%80%BC\" aria-label=\"用來設定屬性預設值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用來設定屬性預設值</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 實際上沒有這個屬性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 但經過 Proxy 後</span>\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop <span class=\"token operator\">===</span> <span class=\"token string\">'revenue'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'None of your business'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可以讀取到我們設定的預設值</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'None of your business'</span></code></pre></div>\n<h3 id=\"複寫原有物件讓測試更加順利mock-object\" style=\"position:relative;\"><a href=\"#%E8%A4%87%E5%AF%AB%E5%8E%9F%E6%9C%89%E7%89%A9%E4%BB%B6%E8%AE%93%E6%B8%AC%E8%A9%A6%E6%9B%B4%E5%8A%A0%E9%A0%86%E5%88%A9mock-object\" aria-label=\"複寫原有物件讓測試更加順利mock object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>複寫原有物件，讓測試更加順利（mock object）</h3>\n<p>寫測試的時候很常會需要 mock object，像是 function 中若有讀取 <code class=\"language-text\">document.location.href</code> 的部分，在你開發機上基本上都會是 <code class=\"language-text\">localhost</code>，這時候就會需要把這個值 mock 掉。</p>\n<p>這時我們就可以將 <code class=\"language-text\">document.location</code> 委託給 proxy 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mockDocument <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  location<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">==</span> <span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"your-website-com\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"location href: \"</span><span class=\"token punctuation\">,</span> mockLocation<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// https://blog.arvinh.info</span></code></pre></div>\n<h3 id=\"看到這邊想必很多人都會想到我們可以實作-observe-function\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E5%88%B0%E9%80%99%E9%82%8A%E6%83%B3%E5%BF%85%E5%BE%88%E5%A4%9A%E4%BA%BA%E9%83%BD%E6%9C%83%E6%83%B3%E5%88%B0%E6%88%91%E5%80%91%E5%8F%AF%E4%BB%A5%E5%AF%A6%E4%BD%9C-observe-function\" aria-label=\"看到這邊想必很多人都會想到我們可以實作 observe function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看到這邊想必很多人都會想到，我們可以實作 Observe function！</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> FooBarObserver <span class=\"token operator\">=</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  property <span class=\"token operator\">===</span> <span class=\"token string\">'open'</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">?</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBar is open!!!'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keep waiting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFooBarObserver<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"不是什麼都可以被代理的\" style=\"position:relative;\"><a href=\"#%E4%B8%8D%E6%98%AF%E4%BB%80%E9%BA%BC%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BB%A3%E7%90%86%E7%9A%84\" aria-label=\"不是什麼都可以被代理的 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不是什麼都可以被代理的</h3>\n<p>不知道大家會不會有個疑問，難道所有物件都能被 proxy 代理嗎？有沒有辦法限制我的某個物件就是不希望被他人代理？</p>\n<p>當然有！</p>\n<p>如果你的物件擁有 <code class=\"language-text\">configurable: false</code> 與 <code class=\"language-text\">writable: false</code> 的屬性，那該物件就無法被 proxy 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  FooBar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'???'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nproxy<span class=\"token punctuation\">.</span>FooBar\n<span class=\"token comment\">// Uncaught TypeError: 'get' on proxy: property 'FooBar' is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value (expected 'undefined' but got '???')</span></code></pre></div>\n<h3 id=\"小結論\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B5%90%E8%AB%96\" aria-label=\"小結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小結論</h3>\n<p>這邊我只列了幾個我覺得比較能凸顯 Proxy 用途的範例，而其他 handler 可以介入的操作如果大家也想了解並看看例子的話，阮一峰的 <a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入門</a> 中有針對每個操作給予例子做解析，可以參考。</p>\n<h1 id=\"reflect\" style=\"position:relative;\"><a href=\"#reflect\" aria-label=\"reflect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflect</h1>\n<p>接著我們來看看 Reflect。Reflect 不能建構實例，就像 Math 一樣，單純包含了一系列的靜態方法。</p>\n<h2 id=\"reflect-與-proxy-的完美搭配\" style=\"position:relative;\"><a href=\"#reflect-%E8%88%87-proxy-%E7%9A%84%E5%AE%8C%E7%BE%8E%E6%90%AD%E9%85%8D\" aria-label=\"reflect 與 proxy 的完美搭配 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflect 與 Proxy 的完美搭配</h2>\n<p>網路上許多文章都說 Reflect 是因應 Proxy 才增加的規範，最明確的連結是，Reflect 所定義的靜態方法包含了 Proxy Handler 能處理的所有代理操作，但他提供的是呼叫原始物件的操作，舉例來說：</p>\n<p><code class=\"language-text\">Reflect.get(target, name);</code> 效果等同於 <code class=\"language-text\">target[name];</code></p>\n<p>所以我們在 Proxy 中，如果需要 target 物件的預設操作，使用 Reflect 會更合理更清楚：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loggedObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"主要的理由在於reflect-讓我們對物件的操作可以用函數來處理\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E8%A6%81%E7%9A%84%E7%90%86%E7%94%B1%E5%9C%A8%E6%96%BCreflect-%E8%AE%93%E6%88%91%E5%80%91%E5%B0%8D%E7%89%A9%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C%E5%8F%AF%E4%BB%A5%E7%94%A8%E5%87%BD%E6%95%B8%E4%BE%86%E8%99%95%E7%90%86\" aria-label=\"主要的理由在於reflect 讓我們對物件的操作可以用函數來處理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主要的理由在於，Reflect 讓我們對物件的操作可以用函數來處理</h3>\n<p>例如在判斷物件有無特定屬性，或是刪除物件屬性時，以往我們會這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'_secretDrink'</span> <span class=\"token keyword\">in</span> FooBar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delete</span> Object<span class=\"token punctuation\">.</span>_secretDrink<span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了 Reflect 我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token string\">'_secretDrink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token string\">'_secretDrink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因此，在 Proxy 中，比起使用 <code class=\"language-text\">delete target[name]</code>, <code class=\"language-text\">Reflect.deleteProperty</code> 更能保持一制性：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loggedObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">deleteProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// instead of `delete target[name]...</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"控制被-proxy-代理的函數之-this-參考對象\" style=\"position:relative;\"><a href=\"#%E6%8E%A7%E5%88%B6%E8%A2%AB-proxy-%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%BD%E6%95%B8%E4%B9%8B-this-%E5%8F%83%E8%80%83%E5%B0%8D%E8%B1%A1\" aria-label=\"控制被 proxy 代理的函數之 this 參考對象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>控制被 Proxy 代理的函數之 this 參考對象</h3>\n<p>這個例子比較難懂，但這是說明為何 Reflect 是因應 Proxy 而生的好例子(<a href=\"https://stackoverflow.com/questions/35276559/benefits-of-es6-reflect-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyKey <span class=\"token operator\">===</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reflect.get '</span><span class=\"token punctuation\">,</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this in foo getter references Proxy instance; logs 2</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target[propertyKey] '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this in foo getter references \"target\" - logs 3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\nobj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Reflect.get  2</span>\n<span class=\"token comment\">// target[propertyKey]  3</span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/bimadip/2/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.1.4\"></script></p>\n<p>假設你的 object target 有一個 getter 函數 foo()，現在你透過 Proxy 代理 get 函數，當今天你呼叫 <code class=\"language-text\">obj.bar</code> 時，會印出 <code class=\"language-text\">2</code>，因為 Proxy handler 攔截並代理了原始 target 物件的 get 函數；接著，若你呼叫 <code class=\"language-text\">obj.foo</code>，會出現兩個結果: <code class=\"language-text\">Reflect.get  2</code> 與 <code class=\"language-text\">target[propertyKey]  3</code>。</p>\n<p>為什麼？</p>\n<p>這是因為只有透過 <code class=\"language-text\">Reflect.get()</code> 的第三個參數 <code class=\"language-text\">receiver</code>，將指向 Proxy 本身的實例傳進去原始物件的 get 呼叫，才能夠真的呼叫到 Proxy.get。</p>\n<p>若是直接透過 <code class=\"language-text\">target['foo']</code>，則原本在 <code class=\"language-text\">foo</code> 中的 this，就會指向原始的 target 本身，而不會觸發 Proxy 的 get。</p>\n<p>這邊概念真的比較難懂，若我有任何錯誤地方歡迎指正，我相信大家多看幾次範例後都能悟道的。</p>\n<p>除了與 Proxy 匹配的優勢外，Reflect 還帶來了一些好處（source: <a href=\"https://goo.gl/9v9STM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Benefits of ES6 Reflect API</a>, <a href=\"https://github.com/tvcutsem/harmony-reflect/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Harmony-reflect</a>)：</p>\n<h3 id=\"更優雅更好用的回傳值\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%84%AA%E9%9B%85%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9B%9E%E5%82%B3%E5%80%BC\" aria-label=\"更優雅更好用的回傳值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更優雅、更好用的回傳值</h3>\n<p>以往使用 <code class=\"language-text\">Object.defineProperty(obj, name, desc);</code> 時，若成功，會回傳 obj，失敗則有可能會拋出 Error。而使用 <code class=\"language-text\">Reflect.defineProperty(obj, name, desc)</code> 的話，則會回傳 boolean 值，讓失敗或成功的結果有統一的格式。</p>\n<!-- 介紹其他更多好處 https://github.com/tvcutsem/harmony-reflect/wiki-->\n<h3 id=\"更可靠的-code-classlanguage-textapplycode\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%8F%AF%E9%9D%A0%E7%9A%84-code-classlanguage-textapplycode\" aria-label=\"更可靠的 code classlanguage textapplycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更可靠的 <code class=\"language-text\">apply</code></h3>\n<p>在 es5 時，大家都很習慣透過 <code class=\"language-text\">f.apply(obj, args)</code> 的方式來 apply 函數到物件上頭，但很有可能在某些情況下，<code class=\"language-text\">f.apply</code> 被串改了，這時候就會有不預期的結果。</p>\n<p>Senior 一點的會知道可以利用 <code class=\"language-text\">Function.prototype.apply.call(f, obj, args)</code> 來呼叫，至少 prototype 不會騙你，但這種方式總是不夠優雅。</p>\n<p>現在有了 Reflect 後，就不需要擔心這種事情，透過 <code class=\"language-text\">Reflact.apply(obj, args)</code> 就能輕鬆達到一樣效果。</p>\n<h3 id=\"接受可變參數的-constructor\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E5%8F%97%E5%8F%AF%E8%AE%8A%E5%8F%83%E6%95%B8%E7%9A%84-constructor\" aria-label=\"接受可變參數的 constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接受可變參數的 Constructor</h3>\n<p>這個優點只有跟 ES5 比較時才有優勢。主要是讓你能透過：<code class=\"language-text\">const obj = Reflect.construct(FooBar, args)</code> 來在建構物件實例時，傳遞可變參數；若是在 ES5 的世界，只有 <code class=\"language-text\">FooBar.apply</code> 或 <code class=\"language-text\">FooBar.call</code> 能夠接受變動參數，但是在 <code class=\"language-text\">new</code> 物件實例時，並沒有 <code class=\"language-text\">apply</code> 或 <code class=\"language-text\">call</code> 可以使用。</p>\n<p>而現在透過 ES6 的 spread syntax，我們可以在建構物件實例時，直接傳遞可變參數：<code class=\"language-text\">const obj = new FooBar(...args)</code>。</p>\n<!-- 最後說明 https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/ 中 data binding 的實作-->\n<p><span id=\"todo-sample\"></span></p>\n<h2 id=\"最終範例利用-proxy-與-reflect-完成-one-way-data-binding\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%AF%84%E4%BE%8B%E5%88%A9%E7%94%A8-proxy-%E8%88%87-reflect-%E5%AE%8C%E6%88%90-one-way-data-binding\" aria-label=\"最終範例利用 proxy 與 reflect 完成 one way data binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終範例：利用 Proxy 與 Reflect 完成 one way data binding</h2>\n<p>在了解完 Proxy 與 Reflect 的基本使用方式後，想分享一個很有趣的應用，也就是我開頭提到，激發我研究 Proxy 的範例：frameworkless js one way data binding.</p>\n<p>結合先前提過的 Observe function，來實作一個簡單 Todo App：</p>\n<p data-height=\"339\" data-theme-id=\"dark\" data-slug-hash=\"LrpOEw\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"Oneway-data-binding-js-proxy-reflect\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/LrpOEw/\">Oneway-data-binding-js-proxy-reflect</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>基本上是結合了上述介紹的 Proxy 與 Reflect 特性，並融合[這篇文章]((<a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/</a>)的範例所製作的，如果大家有看完前面的介紹，對於這段 code 應該不難理解。</p>\n<p>主要是透過 Proxy 來代理 Object 的 <code class=\"language-text\">set</code> 與 <code class=\"language-text\">deleteProperty</code> 操作，讓 Todo list 的變動能夠被代理。</p>\n<p>此外，在先前的介紹中，都是以 Object 為主，但 todo app 範例中被 Proxy 代理的是 Array。</p>\n<p>最大的差別在於，當你 push 一個新 item 進入 Array 時，<code class=\"language-text\">set</code> 會被呼叫兩次，一次是新的 item 被塞入陣列時，一次是 Array 的 <code class=\"language-text\">length</code> property 加一時。所以要特別濾掉 <code class=\"language-text\">length</code> 更動的那次代理操作。</p>\n<p>最後，只要在代理的操作中，想辦法把 DOM 做對應的修改，如同上面程式中的 <code class=\"language-text\">line 22 ~ line 40</code>，定義一些 render template 的 function 來更新 DOM 即可。</p>\n<!-- 最終結論 -->\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>Javascript 的變動總是快於瀏覽器支援度，所以常常造成一些新的 Spec 我們不熟悉、不知如何運用，這次的研究學習了不少，而上面的 Todo App 是個簡陋不嚴謹的範例，不過也足以展現 Proxy 與 Reflect 在實際運用上的情境，並帶給我們另一種思考方向，很多時候不用一開始就套用 Framework，透過越來越進步的瀏覽器與 ES 版本，我們也能達到一樣目的。雖然比不上 framework 包山包海的優化，但或許能讓我們更了解實際要解決的問題是什麼，以及解決方法背後的概念。</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frameworkless JavaScript Part 3: One-Way Data Binding</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Proxy</a></li>\n<li><a href=\"https://www.jianshu.com/p/34f0e6abe312\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 之 Proxy 介绍</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入门</a></li>\n</ol>","id":"393df517-f9fc-527c-b09f-770cb56ee625","fields":{"slug":"js-proxy-reflect"},"frontmatter":{"date":"2018-05-27T23:20:17.000Z","title":"一起來了解 Javascript 中的 Proxy 與 Reflect","tags":["javascript","es6","proxy","reflect","frameworkless"],"type":"tech","slug":"js-proxy-reflect"},"timeToRead":15},{"excerpt":"好歌分享：四季","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Nm0HTbO5HhM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">四季</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Nm0HTbO5HhM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>隨著年齡增長，多少開始會遇到家人或親戚需要長期照護，入住療養院或醫院的狀況，接者就會發現許多照護中心可是一位難求，院中的照服人員或是醫護人員也得以一擋百，讓我很想知道目前台灣整體來說，老年人口、長照機構與照服人員的比例失衡有多嚴重。而剛好在前陣子 <a href=\"https://medium.com/@hulitw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@huli</a> 大大介紹了<a href=\"https://blog.techbridge.cc/2018/04/28/antd-and-admin-website/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ant design</a>，讓我再次注意到同樣為螞蟻金服出品的 <a href=\"https://antv.alipay.com/zh-cn/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV</a>，稍微研究之下發現它使用起來非常簡單快速，並且一樣有 React、Angular 與 Vue 的版本。所以今天這篇文章想藉由實作台灣老年人口與長照機構供需比的資料圖表，順便介紹 AntV 這套資料視覺化的套件。</p>\n<p>對了，報導者有發表過一系列專輯 - <a href=\"https://www.twreporter.org/topics/nursing-home-truth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長照機構裡的大象——10萬老人被照顧的真相</a>，說明台灣長照產業的現況，如果懶得看我長篇大論的技術文章，拜託至少在離開前去看一下報導者的專輯，這樣我也算功德一件，讓更多人知道長照產業的重要性，或許也就有那麼一些人有辦法解決這個鮮少被提起的問題。</p>\n<p>先看個成果：</p>\n<p data-height=\"379\" data-theme-id=\"29194\" data-slug-hash=\"OZxNbO\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"總體台灣老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/OZxNbO/\">總體台灣老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<!--\n解釋範例內容\n-->\n<p>我依照 <a href=\"https://zh.wikipedia.org/wiki/%E5%8F%B0%E6%B9%BE%E5%9C%B0%E7%90%86%E5%8C%BA%E5%88%92\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki 上的台灣地理區劃分</a>將資料北、中、南、東與外島五個區塊，並加上兩個按鈕，可以把資料量較少的外島去除，用來展示 G2 在處理資料切換時的順暢感。</p>\n<p>看得出來其實就是個非常簡單用 Excel 也畫得出來的分組長條圖，但實際上你會發現，透過 AntV 製作完全不會比用 Excel 麻煩，還支援 RWD 與資料的切換動畫！真的非常適合我這次想要快速拉出一個比較圖表的狀況！</p>\n<h1 id=\"antv\" style=\"position:relative;\"><a href=\"#antv\" aria-label=\"antv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AntV</h1>\n<p><img src=\"/image/antv-cover.png\" alt=\"AntV 官網\"></p>\n<p>AntV 其實包含了三個不同應用情境的套件：G2、G6、F2。</p>\n<ol>\n<li>G2: 包含各種圖表元素的集成，大多數的應用場景都可以從 G2 中找到對應合適的元件。</li>\n<li>G6: 主要是針對流程圖與關聯性分析的圖表元件，甚至能利用 G2 繪製資料庫的 ER Diagram 與時序圖。</li>\n<li>F2: 針對 Mobile 的使用情境來特別加強圖表在 performance 上的表現，主要繪製在 <code class=\"language-text\">canvas</code> 上。</li>\n</ol>\n<h2 id=\"今天我們使用-g2-來開發\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%A4%A9%E6%88%91%E5%80%91%E4%BD%BF%E7%94%A8-g2-%E4%BE%86%E9%96%8B%E7%99%BC\" aria-label=\"今天我們使用 g2 來開發 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今天我們使用 G2 來開發</h2>\n<p>這幾套由螞蟻金服開發的視覺化套件，除了遵照 Antd 的設計語言外，針對圖表的設計製作上，深受 <a href=\"https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Grammar of Graphics</a> 這本巨作的影響，也是 G2 的名稱的由來。</p>\n<blockquote>\n<p>G2 的強大是由其背後的一套圖形語法所支撐的，它基於《The Grammar of Graphics》(Leland Wilkinson 著)一書，是一套用來描述所有統計圖形深層特性的語法規則，該語法回答了『什麼是統計圖形』這一問題，以自底向上的方式組織最基本的元素形成更高級的元素。由此，G2 所建構出的圖表是由一系列獨立的圖形語法元素組合而成的 -- <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/the-grammar-of-graphics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV G2 官網</a></p>\n</blockquote>\n<p>我並沒有看過那本書，也沒有仔細研究 G2 的原始碼，但這敘述聽起來就超厲害的，整個工具是建構在一套完整的理論基礎上頭。</p>\n<p>在 G2 的世界中，並沒有明確定義一般的圖表類型，像是長條圖、折線圖等等，是依照一系列的圖形語法元素組合成的結果來決定其類型。</p>\n<p>所謂的圖形語法元素大概就是包含：</p>\n<ul>\n<li><strong>DataSet 資料集操作</strong></li>\n<li><strong>Scale 度量</strong></li>\n<li><strong>Geom 幾何標記（point, line, area, shape, etc）</strong></li>\n<li><strong>Attr 圖形屬性</strong></li>\n<li><strong>Coord 座標系</strong></li>\n<li><strong>Axis 座標軸</strong></li>\n<li><strong>Legend 圖例</strong></li>\n<li><strong>Tooltip 提示訊息</strong></li>\n<li><strong>Guide 輔助元素</strong></li>\n<li><strong>Facet 分面 （將一份資料按照某個維度分隔成若干子集）</strong></li>\n<li><strong>Label 標籤</strong></li>\n<li><strong>Theme 主題</strong></li>\n<li><strong>Event 圖表事件</strong></li>\n</ul>\n<p>在<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件上</a>上針對不同的元素都有非常詳細的說明與範例，而且都有中文文件（雖然是簡體...），是 AntV 的絕大優點之一。</p>\n<p>透過操作這些不同元素的組合，可以很容易的切換圖表類型，以 <strong>Coord</strong> 為例：</p>\n<p><code class=\"language-text\">chart.coord('coordType'[, cfg]);</code></p>\n<p>在同樣的資料集上，透過上述的方式來轉換座標軸，馬上就可以從層疊長條圖切換為圓餅圖：</p>\n<p><img src=\"/image/g2_coord.png\" alt=\"Different coord on same chart\"> <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/coord.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>或是透過自定義 <code class=\"language-text\">Shape</code>，快速將一般的長條圖，改變成三角形的形狀：</p>\n<p data-height=\"458\" data-theme-id=\"29194\" data-slug-hash=\"deVMmN\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"AntV-G2-demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/deVMmN/\">AntV-G2-demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>由於這樣的設計理念與基礎，G2 比起其他一樣提供較為高階視覺化語法的套件來說，彈性大了不少。</p>\n<h2 id=\"開始進行實作視覺化總要有個方向走我們先從資料搜集開始\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E5%AF%A6%E4%BD%9C%E8%A6%96%E8%A6%BA%E5%8C%96%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%96%B9%E5%90%91%E8%B5%B0%E6%88%91%E5%80%91%E5%85%88%E5%BE%9E%E8%B3%87%E6%96%99%E6%90%9C%E9%9B%86%E9%96%8B%E5%A7%8B\" aria-label=\"開始進行實作視覺化總要有個方向走我們先從資料搜集開始 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行實作，視覺化總要有個方向，走，我們先從資料搜集開始！</h2>\n<p>首先，要想知道老年人口以及長照機構的比例，我們需要找到依照年齡分組的人口統計資料，這可以從<a href=\"https://www.ris.gov.tw/346\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">內政部的人口資料庫</a>中找到「年底人口數按性別及五歲年齡組分」的資料表，從民國 35 年到 106 年都有，算是蠻齊全的。我們選取 85 ~ 100+ 以上的資料當作老年人口。</p>\n<p>2017 年的部分計算出來後大約是：368,757 人</p>\n<p><img src=\"/image/age_population.png\" alt=\"年底人口數按性別及五歲年齡組分\"></p>\n<p>接著，到<a href=\"https://dep.mohw.gov.tw/DOS/lp-3550-113-xCat-T02.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛福部統計處</a>找尋長期照顧機構的相關資料。</p>\n<p>可以找到 2017 年長照與安養機構總數的可供進住人數，大約 57,147 人：</p>\n<p><img src=\"/image/number_of_nursy_building.png\" alt=\"長照與安養機構總數的可供進住人數\"></p>\n<p>以及 2017 年老人長期照顧、安養機構工作人員人數，大約 19,064 人（只計算護理人員與照顧服務人員）：</p>\n<p><img src=\"/image/number_of_workers.png\" alt=\"老人長期照顧、安養機構工作人員人數\"></p>\n<p>上述的資料來源都有個別縣市的統計資料，上面數字是我將各縣市加總的結果，可能多少會有誤差，大家別介意啊...整體比例應該不會差太多。</p>\n<h2 id=\"接著使用-g2-來進行視覺化\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E4%BD%BF%E7%94%A8-g2-%E4%BE%86%E9%80%B2%E8%A1%8C%E8%A6%96%E8%A6%BA%E5%8C%96\" aria-label=\"接著使用 g2 來進行視覺化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著使用 G2 來進行視覺化</h2>\n<p>要使用 G2 很簡單，只要在 HTML 中載入 <code class=\"language-text\">&lt;script src=\"https://gw.alipayobjects.com/os/antv/assets/g2/3.0.9/g2.min.js\">&lt;/script></code> 即可。</p>\n<p>接著將剛剛的資料定義好：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> SimpleAll <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">57147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">19064</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'老年人口數(85~100+)'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">368757</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們就可以透過 <code class=\"language-text\">G2.Chart</code> 來定義圖表：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">G2<span class=\"token punctuation\">.</span>Chart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token string\">'mountNode'</span><span class=\"token punctuation\">,</span>\n  forceFit<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>innerHeight\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們 new 一個 <code class=\"language-text\">G2.Chart</code> 的 instance，並且同時傳入三個參數給予建構：</p>\n<ul>\n<li>container: 指定你的圖表要掛載在 DOM 中的哪個位置，對應於 HTML 中元素的 id 值。</li>\n<li>forceFit: 超方便的參數，只要設定為 true，你的圖表就能 Responsive，因此也不用再設定寬度。</li>\n<li>height: 可以額外定義需要的圖表高度。</li>\n</ul>\n<p>再來我們把資料與圖表做綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  chart<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>SimpleAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著便能開始設定我們的圖表長相：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart\n  <span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name*value'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'dodge'</span><span class=\"token punctuation\">,</span>\n    marginRatio<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>先前說過，G2 中沒有區分圖表類型，利用的是各種不同的<strong>幾何標記</strong>來組成圖表，如果要製作長條圖，需要用到的就是 <code class=\"language-text\">ìnterval()</code> 這個幾何標記，G2 還支援：<code class=\"language-text\">point()</code>, <code class=\"language-text\">path()</code>, <code class=\"language-text\">line()</code>, <code class=\"language-text\">area()</code>, <code class=\"language-text\">polygon()</code>, <code class=\"language-text\">edge()</code>, <code class=\"language-text\">schema()</code>, <code class=\"language-text\">heatmap()</code> 這幾種類型，<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/geom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網有更詳細的介紹</a></p>\n<p>宣告我們需要的幾何圖形後，接著就會想知道我們要怎麼將資料映射到對的位置，並且給予不同的顏色區別。</p>\n<p>而這一切在 G2 中都非常的簡單直覺。</p>\n<p>透過 <code class=\"language-text\">position('name*value')</code> 這個 API，我們指定資料欄位的 <code class=\"language-text\">name</code> 要對應到圖表座標軸上的 <code class=\"language-text\">x</code>，而 <code class=\"language-text\">value</code> 對應到 <code class=\"language-text\">y</code>，到這邊為止，我們就能畫出一個擁有完整資訊的圖表：</p>\n<img src=\"/image/g2-simple-bar.png\" width=\"500\" height=\"300\">\n<p>當然這樣還不夠，至少也要用顏色來區別一下不同的資料類別。利用 <code class=\"language-text\">color(name)</code> 來告訴 G2，我們要根據資料的 <code class=\"language-text\">name</code> 欄位，用不同的顏色來區分。</p>\n<img src=\"/image/g2-simple-bar-color.png\" width=\"500\" height=\"300\">\n<p>G2 的 API 通常都能接收一個以上的參數，以 color 為例，除了直接傳入顏色要對應的資料欄位外，也可以直接輸入某個顏色，讓他 apply 到整個圖表；或是傳入 callback，在 callback 中根據欄位數值做邏輯上的著色動作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 可以參考官網 API Doc https://antv.alipay.com/zh-cn/g2/3.x/api/geom.html#_color</span>\n\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用默認的顏色</span>\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用傳入的指定顏色</span>\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"接著我們還可以加點東西讓圖表活潑一點\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E9%82%84%E5%8F%AF%E4%BB%A5%E5%8A%A0%E9%BB%9E%E6%9D%B1%E8%A5%BF%E8%AE%93%E5%9C%96%E8%A1%A8%E6%B4%BB%E6%BD%91%E4%B8%80%E9%BB%9E\" aria-label=\"接著我們還可以加點東西讓圖表活潑一點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們還可以加點東西讓圖表活潑一點。</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> imageMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們在原本的 <code class=\"language-text\">interval</code> 幾何圖形上加上另一個幾何圖形 <code class=\"language-text\">point</code>，位置一樣將 <code class=\"language-text\">(name, value)</code> 映射到 <code class=\"language-text\">(x, y)</code>。</p>\n<p>相信眼尖的你會發現，<code class=\"language-text\">position</code> 的參數除了一開始的 <code class=\"language-text\">(name*value)</code> 外，也可以傳遞 array 形式。</p>\n<p>接著設定 size 為 50；在幾何圖形 <code class=\"language-text\">point</code> 中，size 代表原點的半徑，如果是 <code class=\"language-text\">interval</code> 則代表柱體寬度，<code class=\"language-text\">line</code> 則是線段寬度。</p>\n<p>還有個特殊的 <code class=\"language-text\">shape()</code> 函式，他讓我們可以指定特定資料欄位（在這邊我們用 <code class=\"language-text\">name</code>），將其轉換成不同的型態，像是這邊我們就把單純的 <code class=\"language-text\">point</code> mapping 成圖片，而這一切只要透過一個 callback 函數，回傳對應的結果即可！</p>\n<p data-height=\"518\" data-theme-id=\"29194\" data-slug-hash=\"jxZGPV\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"2017 台灣總體老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/jxZGPV/\">2017 台灣總體老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>短短幾行 code 就作出一個比一般 Excel 還要特別一些的圖表，真的蠻方便使用的對吧！</p>\n<h2 id=\"但只看全台灣總體的資料好像不太夠啊能不能看一下各縣市的呢\" style=\"position:relative;\"><a href=\"#%E4%BD%86%E5%8F%AA%E7%9C%8B%E5%85%A8%E5%8F%B0%E7%81%A3%E7%B8%BD%E9%AB%94%E7%9A%84%E8%B3%87%E6%96%99%E5%A5%BD%E5%83%8F%E4%B8%8D%E5%A4%AA%E5%A4%A0%E5%95%8A%E8%83%BD%E4%B8%8D%E8%83%BD%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%90%84%E7%B8%A3%E5%B8%82%E7%9A%84%E5%91%A2\" aria-label=\"但只看全台灣總體的資料好像不太夠啊能不能看一下各縣市的呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>但只看全台灣總體的資料好像不太夠啊，能不能看一下各縣市的呢？</h2>\n<p>當然可以。</p>\n<p>只是每個縣市如果都要放三根長方體好像太密集了點，不是很適合，所以如同最前面的成品圖，將資料北、中、南、東與外島五個區塊，這樣圖表會比較清晰一點。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">18684</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">1609</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">328</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">5997</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">482</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">73</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'老年人口數(85~100+)'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">162443</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">92071</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">101846</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">10197</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">2200</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"dataset\" style=\"position:relative;\"><a href=\"#dataset\" aria-label=\"dataset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataSet</h3>\n<p>要想在同一圖表中呈現多組長條圖，我們需引進 G2 中 <code class=\"language-text\">DataSet</code> 的這個概念。</p>\n<p><img src=\"/image/antv-g2-data-set-structure.svg\" alt=\"DataSet 架構圖（取自官網）\">\n<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/data-set.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網介紹</a></p>\n<p>這張圖看似複雜，但其實很清楚的介紹了 <code class=\"language-text\">DataSet</code> 在使用 G2 製圖的過程中所扮演的角色：操作資料。</p>\n<p>資料可以經由 <code class=\"language-text\">Connector</code> 傳入 <code class=\"language-text\">DataSet</code> 中，接著利用 <code class=\"language-text\">Transforms</code> 針對數據做處理（排序、統計、資料補齊），最後渲染到 <code class=\"language-text\">DataView</code> 中。</p>\n<p>突然看到一堆名詞感覺有點嚇人？別擔心，待會的範例會慢慢講解，只要先把 <code class=\"language-text\">DataSet</code> 想成是存放資料的資料集，而 <code class=\"language-text\">DataView</code> 就是我們要繪製出來的資料視圖。</p>\n<p>另外，一份 <code class=\"language-text\">DataSet</code> 可以連接多個 <code class=\"language-text\">DataView</code>，並透過更動其中的共用 <code class=\"language-text\">State</code> 來進行連動變更，在我們的範例中沒有使用到，但可以參考<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/data-set.html#_%E5%9B%BE%E8%A1%A8%E8%81%94%E5%8A%A8%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網的清楚範例</a></p>\n<p><img src=\"/image/antv2-g2-dataset-state.gif\" alt=\"官網範例示圖\"></p>\n<h3 id=\"回到我們的範例來\" style=\"position:relative;\"><a href=\"#%E5%9B%9E%E5%88%B0%E6%88%91%E5%80%91%E7%9A%84%E7%AF%84%E4%BE%8B%E4%BE%86\" aria-label=\"回到我們的範例來 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>回到我們的範例來</h3>\n<p>跟剛剛的範例不同，我們在進行資料綁定前（<code class=\"language-text\">chart.source(data)</code>），需要先對數據做一些操作，所以要利用 <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">transform</code> 兩個 API：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dv <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span><span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndv<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'fold'</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'南部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'東部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'外島'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 展開資料</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'區域'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// key, 設置新的 key/value 值，來對應新數據的含義。</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// value</span>\n  retains<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\">// 想要保留在 transform 後的資料欄位</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>dv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">new DataSet()</code> 與 <code class=\"language-text\">createView()</code> 創建出一個擁有 <strong>資料集 &#x3C;-> 資料狀態連接 &#x3C;-> 資料視圖</strong> 關聯性的物件 <code class=\"language-text\">dv</code>，接著利用 <code class=\"language-text\">transform()</code> 函數針對資料進行處理。</p>\n<p>我們的資料是根據 <code class=\"language-text\">可供進住人數'</code>、<code class=\"language-text\">長照、養護人員</code> 與 <code class=\"language-text\">老年人口數</code>來分類，但我們實際上希望的是能夠先依照區域劃分，在每個區域中再分別用這三種類別來比較資料。</p>\n<p>因此在傳入 <code class=\"language-text\">transform</code> 的 option 中，我們選定 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">fold</code>，其意義為：<strong>以指定字段集作為 Key，展開數據。</strong>並且設置新的 key/value 值，來對應新數據的含義。</p>\n<p>直接拿我們的資料來作為例子，比較一下前後結果就會很清楚了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 原始資料</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span><span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">18684</span><span class=\"token punctuation\">,</span><span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">1609</span><span class=\"token punctuation\">,</span><span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">328</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">5997</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">482</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">73</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 經過 transform 後</span>\n\n<span class=\"token keyword\">const</span> dataBeenTransformed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 基本上，transform 後，原有的資料欄位會不見，這邊的 `name` 還保留是因為我有加入 `retains: [ 'name' ]` 這個選項。</span></code></pre></div>\n<p>如此一來，我們在繪製圖表的時候，他就會依照目前的 Key, 將相同的 Key 所對應的值 Group 在一起，讓<code class=\"language-text\">北部</code>這個 Key 對應的三個欄位數值（可供進住人數、長照人員數、老年人口數）一起在同個分類（北部）中顯示。</p>\n<p>不過，還沒有結束。</p>\n<p>將資料分組後，依照先前的繪製方式，會畫出下面這樣的結果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart<span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域*區域人數'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img src=\"/image/antv2-g2-multiple-set.png\" width=\"500\" height=\"300\">\n<p>雖然分組了，但資料重疊在一起了...囧</p>\n<p>這是因為每個分組中的每個數據都套用到了同樣的 position 設定（區域*區域人數），我們必須要調整一下！</p>\n<p>透過 <code class=\"language-text\">adjust()</code> 函數可以方便做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'dodge'</span><span class=\"token punctuation\">,</span>\n  marginRatio<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>設定 type 為 <code class=\"language-text\">dodge</code>，代表我們要調整的是分組數據，然後給予 margin 比例為 1/5。</p>\n<p data-height=\"297\" data-theme-id=\"29194\" data-slug-hash=\"JvZWQE\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"2017 台灣老年人口與長照機構供需比 - AntV - demo1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/JvZWQE/\">2017 台灣老年人口與長照機構供需比 - AntV - demo1</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來就正常多了！</p>\n<p>關於 <code class=\"language-text\">transform</code> 的運用，可以參考官方詳解 - <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/api/transform.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Transform</a>\n關於 <code class=\"language-text\">adjust</code> 的運用，目前<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/api/geom.html#_adjust\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">支援四種 type</a>：<code class=\"language-text\">stack</code>, <code class=\"language-text\">dodge</code>, <code class=\"language-text\">jitter</code>, <code class=\"language-text\">symmetric</code>。</p>\n<p>神奇的是，這些不同類型的差異，在擁有豐富文檔的官方網站竟然找不到介紹，所以我其實也不太懂。重點是，不同的資料型態會有各自適合的 type，大家在製作時要記得都嘗試看看效果。</p>\n<h3 id=\"看起來蠻完整的了但圖表沒辦法動態變化怎麼可以\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E8%B5%B7%E4%BE%86%E8%A0%BB%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BA%86%E4%BD%86%E5%9C%96%E8%A1%A8%E6%B2%92%E8%BE%A6%E6%B3%95%E5%8B%95%E6%85%8B%E8%AE%8A%E5%8C%96%E6%80%8E%E9%BA%BC%E5%8F%AF%E4%BB%A5\" aria-label=\"看起來蠻完整的了但圖表沒辦法動態變化怎麼可以 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看起來蠻完整的了，但圖表沒辦法動態變化怎麼可以！</h3>\n<p>沒錯，我也覺得不可以。</p>\n<p>還好 AntV G2 讓我們輕鬆利用 <code class=\"language-text\">chart.changeData()</code> 就能同時更新 <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">DataView</code>。更棒的是，除了提供 RWD 設計外，資料轉換過程中的動畫他也幫你照顧好好的。</p>\n<p>除此之外，我們也能夠直接操作原有的 <code class=\"language-text\">DataSet</code>，像開頭的範例一樣，點選 button 時，我們透過 <code class=\"language-text\">chart.filter</code> 來過濾原有資料，並且在最後呼叫 <code class=\"language-text\">chart.repaint()</code> 進行 <code class=\"language-text\">DataView</code> 的重繪（一定要重繪才會 trigger <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">DataView</code> 間的連動）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  chart<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      chart<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        minLimit<span class=\"token operator\">:</span> <span class=\"token number\">73</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    chart<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      minLimit<span class=\"token operator\">:</span> <span class=\"token number\">400</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">!==</span> <span class=\"token string\">'外島'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chart<span class=\"token punctuation\">.</span><span class=\"token function\">repaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如此一來就能完成開頭的範例啦！</p>\n<p data-height=\"379\" data-theme-id=\"29194\" data-slug-hash=\"OZxNbO\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"總體台灣老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/OZxNbO/\">總體台灣老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>如同我在前言提及的<a href=\"(https://www.twreporter.org/topics/nursing-home-truth)\">報導者專輯</a>中所呈現的，台灣的長照產業正面臨很大的困境，只要家中有人有這種需求，相信都能有很深的體會。先前也曾有學長以長照產業為創業題目，可惜最終黯然收場，可見這問題真的有其嚴重與困難性存在。</p>\n<p>身為前端開發者，或許目前能做的最大貢獻就是盡量製作出許多一目了然的資訊圖表、網頁專輯，讓更多的人知道問題的嚴重性，透過 AntV G2 這樣的工具，製作互動式圖表真的是越來越方便與容易，希望大家能多加貢獻，讓台灣社會往更好的方向走去！而小魯我能力不足分身乏術...先下台一鞠躬...</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://antv.alipay.com/zh-cn/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV</a></li>\n<li><a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">G2</a></li>\n<li><a href=\"https://www.ris.gov.tw/346\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">內政部戶政司人口資料庫</a></li>\n<li><a href=\"https://www.gender.ey.gov.tw/gecdb/Stat_Statistics_DetailData.aspx?sn=%2BwEzRrF1jtJ82VtOVizhxw%3D%3D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">行政院性別平等統計資料庫</a></li>\n<li><a href=\"https://dep.mohw.gov.tw/DOS/lp-3550-113-xCat-T02.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛福部統計處-長期照顧統計</a></li>\n<li><a href=\"https://www.twreporter.org/topics/nursing-home-truth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長照機構裡的大象——10萬老人被照顧的真相</a></li>\n<li>Icon made by Freepik from www.flaticon.com</li>\n</ol>","id":"92256b42-2644-5b1d-8625-b2717a7bc39d","fields":{"slug":"datavis-antv"},"frontmatter":{"date":"2018-05-05T13:41:40.000Z","title":"使用 AntV 製作資料圖表-台灣老年人口與長照機構供需比","tags":["data visualization","AntV","G2","RWD","javascript"],"type":"tech","slug":"datavis-antv"},"timeToRead":17},{"excerpt":"\"The cure for fate is patience.\"","html":"<blockquote>\n<p>\"The cure for fate is patience.\"</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>上一篇<a href=\"https://blog.techbridge.cc/2018/03/10/deeplearnjs-simple-linear-regression/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>中，我們利用 Deeplearn.js 學習了 linear regression，從氣溫與紅茶的關聯性中預測銷量，這次就來練習在機器學習中另一個很基本的方法 - Logistic regression（邏輯分析）。</p>\n<p>先來張 Demo 成果圖：</p>\n<p><img src=\"/image/deeplearnjs-logistic.png\" alt=\"Demo\"> </p>\n<p>從成果圖中可以看出，所謂的 Logistic regression 與 Linear regression 最大不同就是，邏輯回歸大多用來進行<strong>分類</strong>，當結果只有兩種時，就是二元分類，當然也有多元分類，這邊以簡單二元分類來做練習。這次的範例參考自 <a href=\"https://blog.csdn.net/ns2250225/article/details/79416651\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">【webAI】deeplearn.js的邏輯回歸</a></p>\n<h2 id=\"出發總要有個方向做實驗總要有個想像\" style=\"position:relative;\"><a href=\"#%E5%87%BA%E7%99%BC%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%96%B9%E5%90%91%E5%81%9A%E5%AF%A6%E9%A9%97%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%83%B3%E5%83%8F\" aria-label=\"出發總要有個方向做實驗總要有個想像 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>出發總要有個方向，做實驗總要有個想像</h2>\n<p>還記得小時候剛了解智商的概念時，很喜歡去查查名人們的智商數字，像是愛因斯坦、前美國總統布希等等，想看看這些名人的智商是多少，是不是真的很聰明才能像他們這樣成功。\n今天假設我們有一群人的智商資料，現在想要利用這些資料分割出聰明人與笨蛋兩個分類，讓我們之後可以用來判斷一個人是聰明的率高一些，或是愚昧機率高一點，那我們該怎麼做呢？</p>\n<p>這時候就可以出動 Logistic regression 來幫我們計算出一個預測模型，用來判斷該人的智商屬於哪個分類的機率比較高。</p>\n<p>以迴歸分析來說，我們是希望能由給定一個固定的解釋變數 X，然後求出目標變數 Y 的平均值，是條件期望值的概念，若 Y 的結果是連續性的，我們就能試著透過線性模型去逼近一個剛好符合所有資料的公式。像是上一次的範例中，我們可以用線性模型求出在各種溫度下，紅茶的銷售狀況大約會是多少。</p>\n<p>但有些時候，想求得的目標變數是二元或是多元的變數，像是剛剛例子中的<strong>聰明</strong> 或 <strong>笨蛋</strong>。如果硬要用線性函數去逼近的話，求得的結果通常會很差，像是下圖這般：</p>\n<p><img src=\"/image/logistic-linear-bad.png\" alt=\"linear regression\">\n(<a href=\"https://medium.com/@ken90242/machine-learning%E5%AD%B8%E7%BF%92%E6%97%A5%E8%A8%98-coursera%E7%AF%87-week-3-1-logistic-12346f40c6d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a>)</p>\n<p>所以才有人提出用 <a href=\"https://en.wikipedia.org/wiki/Sigmoid_function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">sigmoid</code></a> 這個能將數值侷限在 0 與 1 之間的函數來解決這個問題：</p>\n<p><img src=\"/image/deeplearnjs-decision-boundary.png\" alt=\"Decision Boundary\"></p>\n<p>上圖就是一個 <code class=\"language-text\">sigmoid function</code>，假設我們今天判斷智商 180 代表機率 1 的狀況，而大於機率 0.6 時，就可以算是聰明人（黃色區域），而小於 0.6 的則屬於笨蛋（綠色區域），那今天我們的目標就是要找出一個 <code class=\"language-text\">Ｘ</code> 軸上的 <code class=\"language-text\">Z</code> 值，讓我們能根據 input 的 <code class=\"language-text\">X</code> 特徵值來判斷，若是 <code class=\"language-text\">X</code> 大於 <code class=\"language-text\">Z</code> 時，就可說他是聰明人（因為機率高於 0.6）。</p>\n<p>這個讓我們找出 <code class=\"language-text\">Z</code> 值的函數就是我們要找的 <code class=\"language-text\">Decision Boundary</code>，也就是開頭 Demo 圖中的那條黃色線段！</p>\n<p>有關於 Logistion regression 與 Decision Boundary 的詳細內容，我推薦大家閱讀這幾篇 blog，介紹得很簡單易懂：</p>\n<p><a href=\"https://medium.com/@ken90242/machine-learning%E5%AD%B8%E7%BF%92%E6%97%A5%E8%A8%98-coursera%E7%AF%87-week-3-1-logistic-12346f40c6d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Machine Learning 學習日記</a>\n<a href=\"https://taweihuang.hpd.io/2017/12/22/logreg101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你可能不知道的邏輯迴歸</a></p>\n<h2 id=\"大概了解-logistic-後那就來利用-deeplearnjs-找出-decision-boundary-吧\" style=\"position:relative;\"><a href=\"#%E5%A4%A7%E6%A6%82%E4%BA%86%E8%A7%A3-logistic-%E5%BE%8C%E9%82%A3%E5%B0%B1%E4%BE%86%E5%88%A9%E7%94%A8-deeplearnjs-%E6%89%BE%E5%87%BA-decision-boundary-%E5%90%A7\" aria-label=\"大概了解 logistic 後那就來利用 deeplearnjs 找出 decision boundary 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>大概了解 Logistic 後，那就來利用 deeplearn.js 找出 Decision Boundary 吧!</h2>\n<p>起手式，先來製作個假資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建立假資料，1 代表智商 100 分以上，0 代表智商 100 分以下</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tmpX1 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">120</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> tmpX2 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">120</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> tmpX1<span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> tmpX2<span class=\"token punctuation\">,</span>\n        c<span class=\"token operator\">:</span> tmpX1 <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> tmpX2 <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們隨機產生 200 組 training data，<code class=\"language-text\">tmp_x</code> 與 <code class=\"language-text\">tmp_y</code> 可以當作我們要輸入的 Input 特徵 X 向量，代表一個人的智商以及他閱讀的書籍量。</p>\n<p>接著初始 deeplearn.js 的資料結構：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * deeplearn.js 運算\n */</span>\n<span class=\"token keyword\">const</span> x_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    y_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> x_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor2d</span><span class=\"token punctuation\">(</span>x_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor2d</span><span class=\"token punctuation\">(</span>y_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再次介紹一下，在 deeplearn.js 中，tensor 是最核心的資料結構，用來表示向量、矩陣或是多維度的資料。</p>\n<p>有許多 utility function 可以輔助創建 tensor 資料結構，像是這邊用的是 <code class=\"language-text\">tensor2d</code>，也就是 2D (2-dimension) 的 tensor。</p>\n<p>一個 tensor 其實包含三個成分，也是創建 tensor 時可以傳入的參數：</p>\n<ul>\n<li>values (TypedArray|Array): tensor 的值。可以是 nested array 或 flat array 的結構。</li>\n<li>shape（number[]）:基本上就是該 tensor 的維度。若創建 tensor 時沒有指定維度，就會繼承傳入的 values 維度。也可以像這邊的範例一樣直接使用 <code class=\"language-text\">tensor${1|2|3|4}d</code> 來創建</li>\n<li>dtype（float32'|'int32'|'bool）：值的型別，當然是 optional。</li>\n</ul>\n<p>由於我們要計算的 X 都是一組向量，所以這邊使用 <code class=\"language-text\">dl.tensor2d</code> 來建置一個二維的 tensor。</p>\n<p>接著定義我們要 training 的係數，這邊取為 <code class=\"language-text\">W</code> 與 <code class=\"language-text\">B</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 權重 W 與偏差 B</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">W</span> <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">zeros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">zeros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dl.variable(initialValue, trainable?, name?, dtype?)</code> 用來創建 training 過程中需要的變數，也可透過參數指定該變數能否在 training 過程中被修改（trainable），預設是 <code class=\"language-text\">true</code>。</p>\n<p>用 <code class=\"language-text\">dl.zeros([1, 2])</code> 來創建一個 <code class=\"language-text\">Shape</code> 為 <code class=\"language-text\">[1,2]</code> 的填滿零值的 tensor 變數當權重 W，以及維度 1 的偏差變數 tensor B。</p>\n<p>再來需要定義目標函數與 loss function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 定義目標函數 與 loss function （最一般的 mean square）</span>\n<span class=\"token comment\">// logistic regression 模型</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">sigmoid</span><span class=\"token punctuation\">(</span><span class=\"token constant\">W</span><span class=\"token punctuation\">.</span><span class=\"token function\">matMul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// loss function（log loss）</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loss</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pred<span class=\"token punctuation\">,</span> label</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">neg</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">,</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>目標函數的部分其實就是帶入先前所提的 sigmoid function：</p>\n<p><img src=\"/image/deeplearnjs-sigmod.png\" alt=\"目標函數公式\"></p>\n<p><code class=\"language-text\">Z</code> 就是我們要找的 boundary，就是權重與 input X 向量做矩陣乘法，所以這裡需要轉置矩陣 <code class=\"language-text\">x.transpose()</code>。\n<code class=\"language-text\">dl.sigmoid()</code> 就是 deeplearn.js 提供的 sigmoid 函數（如上圖第二行）</p>\n<p>將 <code class=\"language-text\">Z</code> 帶入 <code class=\"language-text\">dl.sigmoid()</code> 後就獲得了目標函數 f。</p>\n<p>而 loss function 的話，一般在 logistic function 都是採用 log loss 的公式，詳細解釋與公式推導推薦閱讀此篇：\n<a href=\"https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E7%94%A8%E4%BA%BA%E8%AF%9D%E8%A7%A3%E9%87%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84logistic-regression%EF%BC%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%EF%BC%89/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用人話解釋機器學習中的 Logistic Regression</a></p>\n<p>照著公式很容易就可以帶出上述的 <code class=\"language-text\">loss()</code>。</p>\n<p>最後就可以開始 training 我們的 data 啦：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 梯度優化</span>\n<span class=\"token keyword\">const</span> learningRate <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span>\n<span class=\"token keyword\">const</span> optimizer <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span><span class=\"token function\">sgd</span><span class=\"token punctuation\">(</span>learningRate<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Training!</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    optimizer<span class=\"token punctuation\">.</span><span class=\"token function\">minimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跟上一篇 <a href=\"https://blog.techbridge.cc/2018/03/10/deeplearnjs-simple-linear-regression/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">linear regression</a> 相同，我們採用<code class=\"language-text\">dl.train.sgd</code>，是 deeplearn.js 內建的 sgd 演算法模型，接受一個 <code class=\"language-text\">leanring rate</code> 參數。在每一次的迭代中，係數都會不斷被更新，以找出最佳的結果，而這個 <code class=\"language-text\">learningRate</code> 參數是用來控制每一次的更新幅度。因此不能夠設得太大，也不能設得太小。</p>\n<p><code class=\"language-text\">optimizer</code> 可額外輸入兩個參數，分別控制 1. 是否回傳最後的 cost; 2. 限制只更新哪些變數。我們 for loop 1000 次後，利用 <code class=\"language-text\">dataSync()</code> 來將係數從 Tensor 讀出：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 用 dataSync 取得 training 結果</span>\n<span class=\"token keyword\">const</span> wPredict <span class=\"token operator\">=</span> <span class=\"token constant\">W</span><span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bPredict <span class=\"token operator\">=</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wPredict<span class=\"token punctuation\">,</span> bPredict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dataSync()</code> 是 Synchronously 的，會 block Browser 的 UI thread，直到 data 被你讀出。另外還有個 Asynchronously 的 <code class=\"language-text\">data()</code> method，會回傳 promise，當讀取結束時再呼叫 <code class=\"language-text\">resolves</code>。</p>\n<p>因為接下來要用 Highcharts 畫圖，所以需要採用 <code class=\"language-text\">dataSync()</code> 來 block 著 UI thread 等資料讀出後再繼續。</p>\n<p>取出係數的值後，就能算出一條 <code class=\"language-text\">Decision Boundary</code> 並繪製出來！</p>\n<p>根據算出的係數，畫出線條頭尾兩點：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 計算切割線段</span>\n<span class=\"token keyword\">const</span> data_line <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span> <span class=\"token operator\">*</span> wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data_line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然後用 HighCharts 繪圖：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 繪製圖形</span>\n<span class=\"token keyword\">const</span> data_scatter1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data_scatter2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> elem<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data_scatter1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        data_scatter2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n        \n<span class=\"token comment\">// Result</span>\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'deeplearn.js 你是聰明人嗎？'</span>                 \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          text<span class=\"token operator\">:</span> <span class=\"token string\">'智商'</span>                 \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        min<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n        max<span class=\"token operator\">:</span> <span class=\"token number\">180</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          text<span class=\"token operator\">:</span> <span class=\"token string\">'書讀得多寡'</span>                 \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        min<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n        max<span class=\"token operator\">:</span> <span class=\"token number\">180</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Decision Boundary'</span><span class=\"token punctuation\">,</span> \n            color<span class=\"token operator\">:</span> <span class=\"token string\">'#fff600'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> data_line\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'scatter'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Smart'</span><span class=\"token punctuation\">,</span> \n            marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                symbol<span class=\"token operator\">:</span> <span class=\"token string\">'cross'</span><span class=\"token punctuation\">,</span>  \n                radius<span class=\"token operator\">:</span> <span class=\"token number\">4</span>         \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">'#FF0000'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> data_scatter1\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'scatter'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Stupid'</span><span class=\"token punctuation\">,</span>\n            marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                symbol<span class=\"token operator\">:</span> <span class=\"token string\">'cross'</span><span class=\"token punctuation\">,</span>  \n                radius<span class=\"token operator\">:</span> <span class=\"token number\">4</span>         \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">'#6B8E23'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> data_scatter2\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 图表初始化函数</span>\n<span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> Highcharts<span class=\"token punctuation\">.</span><span class=\"token function\">chart</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p data-height=\"469\" data-theme-id=\"29194\" data-slug-hash=\"NYwZwv\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"DeeplearnJS-logistic-regression\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/NYwZwv/\">DeeplearnJS-logistic-regression</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>再次使用 deeplearn.js 來實作 Machine Learing 演算法，發現真的要套用這些 library 已經非常容易了，但還是受限於對演算法與數學公式的理解與敏銳度，不過也是透過這樣的實作練習，逼迫自己去嘗試了解這些演算法背後的概念與數學，在過程中也不斷想起以前大學修離散數學的記憶，當時都不太懂要怎麼使用這些數學，現在知道後就能讀得津津有味，也是蠻有意思的！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://blog.csdn.net/ns2250225/article/details/79416651\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">【webAI】deeplearn.js的邏輯回歸</a></li>\n<li><a href=\"https://github.com/PAIR-code/deeplearnjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Deeplearnjs</a></li>\n<li><a href=\"https://deeplearnjs.org/docs/api/index.html#dl.train.sgd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deeplearn js API doc</a></li>\n<li><a href=\"https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E7%94%A8%E4%BA%BA%E8%AF%9D%E8%A7%A3%E9%87%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84logistic-regression%EF%BC%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%EF%BC%89/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用人話解釋機器學習中的 Logistic Regression</a></li>\n<li><a href=\"https://medium.com/@ken90242/machine-learning%E5%AD%B8%E7%BF%92%E6%97%A5%E8%A8%98-coursera%E7%AF%87-week-3-1-logistic-12346f40c6d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Machine Learning 學習日記</a></li>\n<li><a href=\"https://taweihuang.hpd.io/2017/12/22/logreg101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你可能不知道的邏輯迴歸</a></li>\n<li><a href=\"https://medium.com/@chih.sheng.huang821/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92-%E6%94%AF%E6%92%90%E5%90%91%E9%87%8F%E6%A9%9F-support-vector-machine-svm-%E8%A9%B3%E7%B4%B0%E6%8E%A8%E5%B0%8E-c320098a3d2e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">機器學習-支撐向量機(support vector machine, SVM)詳細推導</a></li>\n</ol>","id":"9b284547-b3ce-573f-8f98-f23bd33522a3","fields":{"slug":"deeplearnjs-logistic-regression"},"frontmatter":{"date":"2018-03-30T20:00:08.000Z","title":"用 Javascript 進行邏輯迴歸分析","tags":["deeplearnjs","machine learning","logistic-regression","javascript"],"type":"tech","slug":"deeplearnjs-logistic-regression"},"timeToRead":10},{"excerpt":"好歌分享：鈴木雅之　恋人","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/CZ95wRScgvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">鈴木雅之　恋人</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/CZ95wRScgvU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>約莫兩個月前，我利用 <a href=\"https://github.com/ITPNYU/p5-deeplearn-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">p5-deeplearn-js</a> 這套工具在 Chrome extension 中玩了一下機器學習的應用 (請參閱<a href=\"https://blog.techbridge.cc/2018/01/13/p5ML-deeplearnjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端也能玩 Deepleaning - 以 p5-deeplearn-js 為例</a>)，當時雖然有去看他們的 source code，但對於底層 deeplearnjs 的部分並沒有仔細去了解，畢竟還是要對 ML 有根本的了解，才能讀得懂。</p>\n<p>而隨著 Google 發布 <a href=\"https://developers.google.com/machine-learning/crash-course/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Machine Learning Crash Course</a>，再度讓我有了研究 deeplearn.js 的念頭，但萬事起頭難，一開始不能太勉強自己，所以本文就先從最簡單的 linear regression 實作開始，來熟悉一下基本操作！</p>\n<p>照慣例先來張 Demo 成果圖：</p>\n<p><img src=\"/image/deeplearnjs-demo-img.png\" alt=\"Demo\"> </p>\n<p>範例是從 <a href=\"https://ithelp.ithome.com.tw/articles/10186905\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a> 中獲得的靈感，假資料也是取自該處。</p>\n<h2 id=\"先進入假想情境\" style=\"position:relative;\"><a href=\"#%E5%85%88%E9%80%B2%E5%85%A5%E5%81%87%E6%83%B3%E6%83%85%E5%A2%83\" aria-label=\"先進入假想情境 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先進入假想情境！</h2>\n<p>想像一下你是一間飲料店老闆，在經濟不景氣的情況下，你需要嚴格控管你的進貨成本，因此，聰明的你開始觀察各種可能，最後發現天氣的變化與你的飲料銷售量有很大的關聯！</p>\n<p>然而，氣象資料很好取得，但你需要的是能夠預測在哪種天氣下，你需要進多少貨，以此來控管每一次的進貨量。</p>\n<p>也就是說，你需要一個公式！</p>\n<p>這個公式要能夠讓你輸入一個特徵 X（也就是氣溫度數），接著透過運算後產生一個目標變數 Y（也就是飲料銷售量）。</p>\n<p>能當到老闆，想必數學不會太差，整理一下後發現，我們只有一個自變量 <code class=\"language-text\">X</code>，以及因變量 <code class=\"language-text\">Y</code>，因此可以嘗試用一個簡單的線性函數來逼近這公式：</p>\n<p><code class=\"language-text\">Y = aX + b</code></p>\n<p>問題就來了，要怎麼樣找出適合的係數 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 呢？</p>\n<h2 id=\"先別急讓我們先把資料整理一下\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%88%A5%E6%80%A5%E8%AE%93%E6%88%91%E5%80%91%E5%85%88%E6%8A%8A%E8%B3%87%E6%96%99%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B\" aria-label=\"先別急讓我們先把資料整理一下 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先別急，讓我們先把資料整理一下</h2>\n<p>資料分析的第一步一定是先取得資料，身為飲料店老闆，要取得銷售資量應該不難，再上網查個氣象資訊就好，因此可以得到如下資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建構資料 （當然是假的）</span>\n<span class=\"token keyword\">const</span> degrees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> salesVolume <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>資料是成對關係，<code class=\"language-text\">氣溫 29 度</code>，<code class=\"language-text\">冰紅茶銷售量 77</code>。</p>\n<p>接著我們可以先利用 HighCharts 把資料先視覺化出來，你就會很有感覺我們該做什麼。</p>\n<p data-height=\"468\" data-theme-id=\"dark\" data-slug-hash=\"PRweww\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"DeeplearnJS-simple-linear-dataset\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/PRweww/\">DeeplearnJS-simple-linear-dataset</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>嗯...看起來這些點似乎真的可以用一個線性函數去逼近呢！而且更棒的是，透過這些過往資料，應該是有助於我們找出公式中最棒的係數的！</p>\n<h2 id=\"接著就該-linear-regression-就登場了\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E5%B0%B1%E8%A9%B2-linear-regression-%E5%B0%B1%E7%99%BB%E5%A0%B4%E4%BA%86\" aria-label=\"接著就該 linear regression 就登場了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著就該 Linear regression 就登場了！</h2>\n<p>在機器學習的領域中，像我們這樣依靠大量資料來輔助學習的，稱作監督式學習。</p>\n<p>而當公式中的目標變數（也就是 y）是連續型（continuous）的變數時，這樣的學習問題會稱為回歸（regression）問題。</p>\n<p>那一個線性函數的回歸問題，就是線性迴歸 (linear regression) 了。</p>\n<p>關於 Linear regression 的一些數學公式推導等等，我推薦大家閱讀這篇文章：<a href=\"https://blog.gtwang.org/statistics/standford-machine-learning-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">史丹佛大學機器學習（Machine Learning）上課筆記（一）</a></p>\n<p>裡面解釋得淺顯易懂，絕對比我解釋得還好...</p>\n<p>就算不清楚線性迴歸，光看公式應該也知道，我們可以透過大量的迭代測試，不斷輸入 <code class=\"language-text\">X</code>，然後調整 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 來求出 <code class=\"language-text\">Y</code>，然後找出在所有 input 中，能得到與所有真實資料差距最小的一對係數即可。</p>\n<p>用線性回歸的概念來解釋，就是我們需要有一個 cost function（或稱 loss function），藉由不同係數的輸入，從公式得出的值來與實際資料比較，想辦法找出結果差距最小的係數。</p>\n<p>一般來說，cost function 會用 LMS（least mean squares）演算法來處理，可以先猜一個初始係數值，然後藉由 LMS 來不斷更新係數，直到找出最小差距的情況。</p>\n<p>但這是單一 training sample 的狀況，當有多個 training sample 時，通用的演算法稱為 stochastic gradient descent (sgd)，概念雷同，就像是根據每一筆 training sample 去跑一次 LMS。</p>\n<p>一樣，還是請大家去閱讀 <a href=\"https://blog.gtwang.org/statistics/standford-machine-learning-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">史丹佛大學機器學習（Machine Learning）上課筆記（一）</a>，獲得更正確的概念。畢竟這次主要是練習如何用 deeplearnjs 來實作。</p>\n<h2 id=\"解法都有了那就來看看到底怎麼用-javascript-實作吧\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95%E9%83%BD%E6%9C%89%E4%BA%86%E9%82%A3%E5%B0%B1%E4%BE%86%E7%9C%8B%E7%9C%8B%E5%88%B0%E5%BA%95%E6%80%8E%E9%BA%BC%E7%94%A8-javascript-%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"解法都有了那就來看看到底怎麼用 javascript 實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法都有了，那就來看看到底怎麼用 Javascript 實作吧！</h2>\n<p>要使用 deeplearn.js，只需要從 cdn 載入即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/deeplearn@latest\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>接著，我們要先初始化資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建構資料</span>\n<span class=\"token keyword\">const</span> degrees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> salesVolume <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 運用 Deeplearn.js 結構化資料</span>\n<span class=\"token comment\">// dl 就是 deeplearn.js 的 global 變數</span>\n<span class=\"token keyword\">const</span> degrees_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor1d</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> salesVolume_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor1d</span><span class=\"token punctuation\">(</span>salesVolume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 deeplearn.js 中，tensor 是最核心的資料結構，用來表示向量、矩陣或是多維度的資料。</p>\n<p>有許多 utility function 可以輔助創建 tensor 資料結構，像是這邊用的是 <code class=\"language-text\">tensor1d</code>，也就是 1D (1-dimension) 的 tensor。</p>\n<p>一個 tensor 其實包含三個成分，也是創建 tensor 時可以傳入的參數：</p>\n<ul>\n<li>values (TypedArray|Array): tensor 的值。可以是 nested array 或 flat array 的結構。</li>\n<li>shape（number[]）:基本上就是該 tensor 的維度。若創建 tensor 時沒有指定維度，就會繼承傳入的 values 維度。也可以像這邊的範例一樣直接使用 <code class=\"language-text\">tensor${1|2|3|4}d</code> 來創建</li>\n<li>dtype（float32'|'int32'|'bool）：值的型別，當然是 optional。</li>\n</ul>\n<p>初始化好 deeplearn.js 的資料結構後，接著定義我們要 training 的係數，這邊取為 <code class=\"language-text\">aw</code> 與 <code class=\"language-text\">ba</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 要 train 的參數 aw, ba</span>\n<span class=\"token keyword\">const</span> aw <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">scalar</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ba <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">scalar</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dl.variable(initialValue, trainable?, name?, dtype?)</code> 用來創建 training 過程中需要的變數，也可透過參數指定該變數能否在 training 過程中被修改（trainable），預設是 <code class=\"language-text\">true</code>。</p>\n<p>其中 <code class=\"language-text\">initialValue</code> 可以是一個 Tensor，也可以像我們這邊一樣，傳入 <code class=\"language-text\">dl.scalar</code>。</p>\n<p><code class=\"language-text\">dl.scalar</code> 是維度為 0 的 tensor，基本上 0 維就是一個點，由於我們只需要亂數產生一個初值給 <code class=\"language-text\">aw</code> 與 <code class=\"language-text\">ba</code>，因此用 <code class=\"language-text\">dl.scalar</code> 即可。</p>\n<p>再來，我們定義目標函數與 loss function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 定義目標函數 與 loss function （最一般的 mean square）</span>\n<span class=\"token comment\">// f = aw * X + ba</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> aw<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ba<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loss</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pred<span class=\"token punctuation\">,</span> label</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pred<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 deeplearn.js 中，函數的建構蠻直覺的，<code class=\"language-text\">y = a * x + b</code> 可以直接寫成 <code class=\"language-text\">y = x => a.mul(x).add(b)</code></p>\n<p>loss function 則是接收兩個參數的函式，<code class=\"language-text\">pred</code> 就是 training data 中的自變因 <code class=\"language-text\">x</code> 透過目標函數 <code class=\"language-text\">f</code>，計算出的值，而 label 是 training data 中的答案 <code class=\"language-text\">y</code>。</p>\n<p>然後，定義我們的 Optimizer，也就是用來最佳化 loss function 結果的演算法，這邊採用 <code class=\"language-text\">stochastic gradient descent (sgd)</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 採用 stochastic gradient descent 來做最佳化 </span>\n<span class=\"token comment\">// learning rate 這邊不能設太大</span>\n<span class=\"token keyword\">const</span> learningRate <span class=\"token operator\">=</span> <span class=\"token number\">0.0005</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> optimizer <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span><span class=\"token function\">sgd</span><span class=\"token punctuation\">(</span>learningRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dl.train.sgd</code> 是 deeplearn.js 內建的 sgd 演算法模型，接受一個 <code class=\"language-text\">leanring rate</code> 參數。在每一次的迭代中，係數都會不斷被更新，以找出最佳的結果，而這個 <code class=\"language-text\">learningRate</code> 參數是用來控制每一次的更新幅度。因此不能夠設得太大，也不能設得太小。</p>\n<p>利用定義好的目標函數 <code class=\"language-text\">f</code>、<code class=\"language-text\">loss function</code> 與 <code class=\"language-text\">optimizer</code>，我們可以就開始 training modal 了！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// training</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> optimizer<span class=\"token punctuation\">.</span><span class=\"token function\">minimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>degrees_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> salesVolume_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>aw<span class=\"token punctuation\">,</span> ba<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cost<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aw'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  aw<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ba'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ba<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最核心的就是這一行：</p>\n<p><code class=\"language-text\">const cost = optimizer.minimize(() => loss(f(degrees_data), salesVolume_data), true, [aw, ba])</code></p>\n<p>使用 <code class=\"language-text\">optimizer</code> 的方式如上所示，輸入執行 <code class=\"language-text\">loss function</code> 的函示，並可額外輸入兩個參數，分別控制 1. 是否回傳最後的 cost; 2. 限制只更新哪些變數。</p>\n<p>我們簡單 for loop 30 次（因為資料量很少...你要 train 一百次也行，但這邊結果不會有什麼差別）</p>\n<p>過程中若想要 debug，可以像我一樣用 <code class=\"language-text\">tensor.print()</code> 的方式把 traning 過程的係數變化 log 出來。</p>\n<p>最後，當 training 結束後，透過 <code class=\"language-text\">dataSync()</code> 將最終係數從 Tensor 中讀出：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 利用 dataSync() 取出 training 後得到的係數</span>\n<span class=\"token keyword\">const</span> awPredict <span class=\"token operator\">=</span> aw<span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baPredict <span class=\"token operator\">=</span> ba<span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>很容易看出 <code class=\"language-text\">dataSync()</code> 是 Synchronously 的，會 block Browser 的 UI thread，直到 data 被你讀出。另外還有個 Asynchronously 的 <code class=\"language-text\">data()</code> method，會回傳 promise，當讀取結束時再呼叫 <code class=\"language-text\">resolves</code>。</p>\n<p>在我們的範例中，因為接下來要用 Highcharts 畫圖，我們需要 block 著 UI thread 等資料讀出後再繼續，因此採用 <code class=\"language-text\">dataSync()</code>。</p>\n<p>取出係數的值後，就能夠畫圖啦～</p>\n<p>根據算出的係數，畫出線條頭尾兩點：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataLine <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span> <span class=\"token operator\">*</span> awPredict <span class=\"token operator\">+</span> baPredict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span> <span class=\"token operator\">*</span> awPredict <span class=\"token operator\">+</span> baPredict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>然後用 HighCharts 繪圖：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'deeplearn.js  最高溫與紅茶銷售量'</span>                 \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'氣溫'</span>                 \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      min<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      max<span class=\"token operator\">:</span> <span class=\"token number\">40</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'銷售量'</span>                 \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      min<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n      max<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'predict line'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> dataLine\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'scatter'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'dataset'</span><span class=\"token punctuation\">,</span>\n            marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                symbol<span class=\"token operator\">:</span> <span class=\"token string\">'cross'</span><span class=\"token punctuation\">,</span>  \n                radius<span class=\"token operator\">:</span> <span class=\"token number\">4</span>         \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> dataset\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 繪製圖表</span>\n<span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> Highcharts<span class=\"token punctuation\">.</span><span class=\"token function\">chart</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p data-height=\"472\" data-theme-id=\"dark\" data-slug-hash=\"dmPZdj\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"DeeplearnJS-simple-linear\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/dmPZdj/\">DeeplearnJS-simple-linear</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>初次使用 deeplearn.js 其實主要門檻還是在於對 Machine Learning 的了解不夠，我有稍微比對一下用 python 與 R 的做法，其實都很雷同，包含資料向量的概念都是，加上很多演算法在這些語言的 library 中都有內建，相信對 ML 與 DL 有深入了解的人來學習 deeplearn.js 會更得心應手。deeplearn.js 畢竟有 Google 支持，也支援 TensorFlow 的 modal，還是很值得投資學習的，想想未來能用別人的 browser 來 training 你的 modal 有多好啊！喔不，是想想未來 Web 能因此有更多的發展潛力，多好呀！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/PAIR-code/deeplearnjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Deeplearnjs</a></li>\n<li><a href=\"https://deeplearnjs.org/docs/api/index.html#dl.train.sgd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deeplearn js API doc</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10186905\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">機器學習 玩具資料與線性迴歸</a></li>\n<li><a href=\"https://blog.gtwang.org/statistics/standford-machine-learning-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">史丹佛大學機器學習（Machine Learning）上課筆記</a></li>\n<li><a href=\"http://blog.csdn.net/ns2250225/article/details/79414790\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deeplearn.js的線性迴歸</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s/X0k2JPze7x8nkSxkoHtWnw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">8 大JavaScript 機器學習框架之探索</a></li>\n</ol>","id":"407fbb50-54af-565f-ad66-fb73fd730202","fields":{"slug":"deeplearnjs-simple-linear-regression"},"frontmatter":{"date":"2018-03-10T15:09:02.000Z","title":"用 Javascript 進行簡單線性迴歸分析","tags":["deeplearnjs","machine learning","linear-regression","javascript"],"type":"tech","slug":"deeplearnjs-simple-linear-regression"},"timeToRead":10},{"excerpt":"『In theory, there is no difference between theory and practice. But, in practice, there is.』- Jan LA van de Snepscheut","html":"<blockquote>\n<p>『In theory, there is no difference between theory and practice. But, in practice, there is.』- Jan LA van de Snepscheut</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>HTML 5 的 Canvas 是許多人做動畫、做遊戲常常會用到的工具，此外，如果是進行資料視覺化，在繪製大量的圖形與動畫時，Canvas 可以為你的 performance 帶來很大的改善，從 <a href=\"http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3.js 實戰 － Canvas 把我的視覺化變「快」了！</a> 中最後的範例就可以看得出來差異。</p>\n<p>總之，身為前端工程師的我卻沒有實作做過 Canvas 相關應用，在羞愧之餘也得奮發向上扳回劣勢才可以，所以決定把上次用 d3 與 svg 繪製的颱風路徑圖重新用 Canvas 重寫一遍，也透過這篇文章做個紀錄。</p>\n<h2 id=\"canvas-基礎概念---繪圖\" style=\"position:relative;\"><a href=\"#canvas-%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5---%E7%B9%AA%E5%9C%96\" aria-label=\"canvas 基礎概念   繪圖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canvas 基礎概念 - 繪圖</h2>\n<p>Canvas 顧名思義就是一塊畫布，只不過是生存在你的 HTML DOM tree 中，讓你透過 Javascript 在上面揮灑創意。</p>\n<p>Canvas 就像一般的 DOM 元素一樣，有 <code class=\"language-text\">width</code> 與 <code class=\"language-text\">height</code> 等屬性可以設定，也能透過 CSS 來操作他的樣式，而這些樣式並不會影響到你在上面所進行的任何繪製功能。\n不過要注意一下，如果你是透過 CSS 去更改寬度與高度，他會放大 Canvas 元素本身，而不會放大 Canvas 內的像素，因此你在 Canvas 內繪製的圖形可能會變形。</p>\n<p><code class=\"language-text\">&lt;canvas id=\"worldMapCanvas\" width=\"1000\" height=\"600\"> Your browser is too old... &lt;/canvas></code></p>\n<p>有了 Canvas 元素後，我們要取得他的 <strong>渲染環境（rendering context）</strong>，之後必須要透過這個 Context 才能進行繪圖：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worldMapCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接下來的一切繪圖操作就會跟著你取得的 context 進行，透過一連串 Canvas API，你可以繪製出如下的圖案：</p>\n<p data-height=\"374\" data-theme-id=\"29194\" data-slug-hash=\"brLmqX\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo - define graph\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/brLmqX/\">First demo - define graph</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>在 <code class=\"language-text\">ball.draw()</code> 這個函數當中，我用了五個最基本的 Canvas API 來進行繪製：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">ctx.beginPath()</code>:\n<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 上的說明是：產生一個新路徑，產生後再使用繪圖指令來設定路徑。\n白話一點就是告訴 Canvas 說你現在要開始繪製線段了喔！請幫我開啟一個新的次路徑清單（sub-path），幫忙紀錄接下來我繪製的路線。\n基本上在你每次繪製新的圖形或線段的時候，都需要呼叫一次 <code class=\"language-text\">beginPath()</code>，否則 Canvas 會將你先前的繪製的部分與後續你想繪製的新圖型當作同一個連續的圖。\n來個範例（沒有使用 beginPath() 就直接想繪製新圖形時）：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"LjQgqg\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo - beginPath\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/LjQgqg/\">First demo - beginPath</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>可以發現我明明在 <code class=\"language-text\">lineTo()</code> 後有設定不同的 <code class=\"language-text\">strokeStyle</code>，但最後都被 <span style=\"color:#B90CB3\">#B90CB3</span> 給取代了，這就是因為沒有呼叫 beginPath 來對線段做區隔。</p>\n<p>加上 <code class=\"language-text\">beginPath()</code> 後，結果就會是我們想要的了：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"ayqRMG\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo - addBeginPath\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/ayqRMG/\">First demo - addBeginPath</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n</li>\n<li>\n<p><code class=\"language-text\">ctx.arc(x,y,raidus,startAngle,endAngle,counterclockwise)</code>:\n就是畫出一個弧線，前兩個參數設定中心點的位置，接著設定半徑、起始點（起始角度）、結束點（結束角度）與方向（順時針或逆時針：</p>\n<p><img src=\"/image/canvasarc.png\" alt=\"Canvas arc\"></p>\n</li>\n<li>\n<p><code class=\"language-text\">ctx.beginPath()</code> 的範例中還有用到 <code class=\"language-text\">moveTo()</code>, <code class=\"language-text\">lineTo()</code> 與 <code class=\"language-text\">stroke()</code>，也都是很常用的 API，但從字面上就很好理解:</p>\n<ul>\n<li>moveTo(x, y): 移動畫筆到 point x,y</li>\n<li>lineTo(x, y): 從現在畫筆位置畫一條直線到 point x,y（但光呼叫 <code class=\"language-text\">lineTo()</code> 還不會畫出線段，需透過 <code class=\"language-text\">stroke()</code> 等相似 API）</li>\n<li>stroke(): 實際下筆繪畫的 API</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ctx.closePath()</code>:\nclosePath 其實在這邊不需要，他主要用途是在於幫你把你在 beginPath 後創建的 sub-path 做連接的動作，像是把第一條 path 的頭與最後一條 path 的尾巴接起來，但你也可以自己再多畫一條線將區域圍起來，只是稍嫌麻煩。\n從字面上來看，<code class=\"language-text\">closePath()</code> 很像是呼叫後就能幫你斷開路徑的連續性，保持後續繪製圖型的獨立性，但實際上沒有這個功用，你需要透過 <code class=\"language-text\">beginPath()</code> 來完成。</li>\n</ul>\n<p>還有很多 canvas API 的介紹都可以在 MDN 上查詢到，有的教學附有中文呦！<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Canvas tutorial</a></p>\n<h2 id=\"canvas-基礎概念---動畫\" style=\"position:relative;\"><a href=\"#canvas-%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5---%E5%8B%95%E7%95%AB\" aria-label=\"canvas 基礎概念   動畫 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canvas 基礎概念 - 動畫</h2>\n<p>先前利用 D3 與 svg 做動畫時，是使用 <code class=\"language-text\">d3.timer</code> 來控制時間，並且更改 svg 元素的 attribute 來移動物件，進而達到動畫效果，但是在 Canvas 的世界中，沒有移動的這種概念，你如果想要讓一個在 Canvas 上的物件移動，你需要的是重新繪製在不同位置的物件，在快速的 frame update 下，人眼看到的就會是一連串動畫了。這原理就跟一般的影片與動畫相同，都是透過每一次 frame 的更新，來呈現出連續畫面。</p>\n<p>那要如何不斷地去更新 Canvas 呢？你可以透過 <code class=\"language-text\">setInterval</code> 也能夠用現在較為人知的 <code class=\"language-text\">requestAnimationFrame</code> 來處理，使用 <code class=\"language-text\">setInterval</code> 你可以直接控制動畫的更新速率，然而在效能上還是採用 <code class=\"language-text\">requestAnimationFrame</code> 較好，是以網頁頁面的更新速度為基準。</p>\n<p>一個採用 <code class=\"language-text\">requestAnimationFrame</code> 的簡單動畫如下：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"yoovpx\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/yoovpx/\">First demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<div class=\"gatsby-highlight\" data-language=\"jsdraw\"><pre class=\"language-jsdraw\"><code class=\"language-jsdraw\">    ctx.clearRect(0,0, canvas.width, canvas.height);\n    ball.draw();\n    // ... calculate position\n\n    raf = window.requestAnimationFrame(draw);</code></pre></div>\n<p>關鍵只有兩個地方：</p>\n<ul>\n<li>在每次 requestAnimationFrame 執行時，你都要清空現在的 Canvas 畫面重新繪製 <code class=\"language-text\">ctx.clearRect(0,0, canvas.width, canvas.height);</code>。</li>\n<li>requestAnimationFrame 是必須自己去呼叫的，所以在我們的 <code class=\"language-text\">draw()</code> 函式中，最後要自己呼叫 raf 來重新 trigger 自己的 draw function。\n你可以像一般的 setInterval 一樣記錄他回傳的 reference，並在適當時間 <code class=\"language-text\">cancelAnimationFrame</code>。</li>\n</ul>\n<h2 id=\"瞭解了-canvas-的基礎知識後可以開始動手今天的主題了\" style=\"position:relative;\"><a href=\"#%E7%9E%AD%E8%A7%A3%E4%BA%86-canvas-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%E5%BE%8C%E5%8F%AF%E4%BB%A5%E9%96%8B%E5%A7%8B%E5%8B%95%E6%89%8B%E4%BB%8A%E5%A4%A9%E7%9A%84%E4%B8%BB%E9%A1%8C%E4%BA%86\" aria-label=\"瞭解了 canvas 的基礎知識後可以開始動手今天的主題了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>瞭解了 Canvas 的基礎知識後，可以開始動手今天的主題了！</h2>\n<p>由於範例是修改自 <a href=\"https://blog.arvinh.info/2017/07/21/d3-workshop-map/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3v4 工作坊 - React + D3 繪製 svg 動態路線地圖</a>，所以關於資料的取得與格式請參考該篇或是下面 Demo 的程式碼。</p>\n<h2 id=\"地圖\" style=\"position:relative;\"><a href=\"#%E5%9C%B0%E5%9C%96\" aria-label=\"地圖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地圖</h2>\n<p>在上一篇 <a href=\"https://blog.arvinh.info/2017/07/21/d3-workshop-map/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3v4 工作坊 - React + D3 繪製 svg 動態路線地圖</a> 中，我們利用 svg path 元素搭配 <code class=\"language-text\">d3.geoPath()</code> 與 <code class=\"language-text\">d3.geo</code> 中的 <code class=\"language-text\">geoMercator()</code> 來繪製世界地圖，那 d3 有辦法幫助我們在 Canvas 上繪製世界圖嗎?</p>\n<p>當然可以！</p>\n<p><code class=\"language-text\">d3.geoPath()</code> 有提供一個 <code class=\"language-text\">context()</code> API，讓你綁定 Canvas 的 context，然後就能傳入路徑資料繪製到 Canvas 上頭：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrendermap\"><pre class=\"language-jsrendermap\"><code class=\"language-jsrendermap\">function renderMap() {\n  const self = this;\n  const canvasNode = d3Select(&#39;#mapCanvas&#39;).node();\n  const context = canvasNode.getContext(&#39;2d&#39;);\n  // 傳入 canvas context 給 geoPath()\n  const path = geoPath().context(context);\n  context.beginPath();\n  // 記得一樣要放入你的映射函數\n  path.projection(this.projection());\n  this.state.worlddata.features.forEach((d, i) =&gt; {\n      context.fillStyle = \n        &#39;rgba(38,50,56,&#39;+ 1 / this.state.worlddata.features.length * i + &#39;)&#39;\n      context.beginPath();\n      // 綁定 Canvas context 的 path 就能將傳入的資料繪製在 Canvas 上頭\n      path(d);\n      context.fill();\n  });\n\n  // add graticules path\n  context.beginPath();\n  path.projection(this.projection());\n  path(this.state.graticule);\n  context.fillStyle = &#39;none&#39;;\n  context.strokeStyle = &#39;#79A09E&#39;;\n  context.stroke();\n  }</code></pre></div>\n<p>Demo: （可以切換模式看 code，或是到<a href=\"https://blog.arvinh.info/2017/07/21/d3-workshop-map/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上一篇</a>看，有許多重複的運算函式）</p>\n<iframe src=\"https://codesandbox.io/embed/w2lp7ml9vw?autoresize=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"路徑\" style=\"position:relative;\"><a href=\"#%E8%B7%AF%E5%BE%91\" aria-label=\"路徑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>路徑</h2>\n<p>接著重頭戲是要畫上路徑，這邊會複雜許多，我盡力說明，但直接看 code 會清楚一點。</p>\n<p>這邊說明在 Canvas 上繪製動態路線的原理與步驟：</p>\n<h3 id=\"線段動畫原理\" style=\"position:relative;\"><a href=\"#%E7%B7%9A%E6%AE%B5%E5%8B%95%E7%95%AB%E5%8E%9F%E7%90%86\" aria-label=\"線段動畫原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>線段動畫原理：</h3>\n<span style=\"color: red\">\n跟 svg 要製作動態路線一樣的原理，我們都是先將線畫好後，利用線段的 **line dash** 與 **dash offset** 來製作出路徑的動畫效果。（可參考 [上一篇](https://blog.arvinh.info/2017/07/21/d3-workshop-map/)）\n</span>\n<p>因此在繪製上的步驟也差不多，只是實作的細節不同罷了：</p>\n<ul>\n<li>Step 1. 繪製線段的入口點：</li>\n</ul>\n<p>既然一樣是利用 <strong>line dash</strong> 與 <strong>dash offset</strong>，那我們也就需要取得路徑的長度，才能夠設定 <code class=\"language-text\">lineDash</code> 麻，但是你如果在前面的範例中有打開過 devTool，就知道根本看不到 Canvas 上面你繪製的物件，每個線段也都是用各點的 x, y 值去連接，這樣要怎麼知道整個線段長呢？！</p>\n<p>難道要每一段每一段的線長度加總起來嗎？或許是個方法，但太麻煩了！</p>\n<p>我們可以直接利用 D3 創建一個 <code class=\"language-text\">invisiablePath</code>，然後透過 <code class=\"language-text\">getTotalLength()</code> 來取得線段長度，並利用在 Canvas 上頭！</p>\n<p><code class=\"language-text\">renderLine()</code> 是一切的起點，我們在這邊創建隱藏的 svg path 好計算長度，並呼叫 <code class=\"language-text\">requestAnimationFrame</code> 進行 loop，傳入 <code class=\"language-text\">updateLine</code> 函式來產生動畫。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderLine</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvasCtx<span class=\"token punctuation\">,</span> typhoonPath<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> typhoonId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pathCoordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    typhoonPath<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        pathCoordinates<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            x<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            y<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> lineFunction <span class=\"token operator\">=</span> <span class=\"token function\">d3Line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">curve</span><span class=\"token punctuation\">(</span>curveCatmullRom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// use svg path to get length</span>\n    <span class=\"token keyword\">const</span> invisiblePath <span class=\"token operator\">=</span> <span class=\"token function\">d3Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'svg'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lineFunction</span><span class=\"token punctuation\">(</span>pathCoordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fill'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stroke'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'invisiblePath'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invisibleSVGPath<span class=\"token punctuation\">[</span>typhoonId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> invisiblePath<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invisibleSVGPath<span class=\"token punctuation\">[</span>typhoonId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTotalLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// this clears itself once the line is drawn</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lineInterval<span class=\"token punctuation\">[</span>typhoonId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateLine</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> canvasCtx<span class=\"token punctuation\">,</span> typhoonPath<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> typhoonId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Step 3. 更新線段的函式：</li>\n</ul>\n<p>在每一次 requestAnimationFrame trigger 的時候，我們都會呼叫 <code class=\"language-text\">updateLine()</code> 來重新 render canvas，主要進行幾個步驟：</p>\n<ol>\n<li><code class=\"language-text\">defineLine()</code>，定義線段，每一次的 loop 都需要重新繪製線段。<a href=\"#step4\"> 跳至 Step 4 看詳細實作</a></li>\n<li>計算目前 <code class=\"language-text\">progress</code>，也就是目前 line offset 要調整到何處，我們是定義一個變數 <code class=\"language-text\">this.speed</code> 與 <code class=\"language-text\">this.dir</code> 來控制線段繪製的方向與速度。每一次的 loop 都會增加 <code class=\"language-text\">this.progress</code> 的值，然後丟入 <code class=\"language-text\">this.moveDash()</code> 中來繪製線段的 line dash 與 line dash offset。<a href=\"#step5\"> 跳至 Step 5 看詳細實作</a></li>\n<li>最後，每一次呼叫 <code class=\"language-text\">updateLine</code> 時，我們都會檢查 <code class=\"language-text\">this.progress</code> 是否已經與線段長度相同，代表已經走完一次路線，需要重新開始，這時候我們就需要先將 canvas 清空：<code class=\"language-text\">canvasCtx.clearRect(0,0,1000,600)</code>，表示將 canvasCtx 所持有的渲染環境從位置 (0,0) 開始對寬 1000 與高 600 的 canvas 清空。最後可以利用 <code class=\"language-text\">setTimoue()</code> 來延長一下路徑走完後的時間，讓他不要馬上就清空 canvas 重繪。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsupdateline\"><pre class=\"language-jsupdateline\"><code class=\"language-jsupdateline\">updateLine(canvasCtx, typhoonPath, length, marker, typhoonId) {\n    // define the line\n    this.defineLine(canvasCtx, typhoonPath, marker, typhoonId);\n    this.progress[typhoonId] = this.progress[typhoonId] || 0;\n    if (this.progress[typhoonId] &lt; length) {\n      this.progress[typhoonId] += this.speed;\n      this.moveDash(canvasCtx, typhoonId, typhoonPath, length, marker, this.progress[typhoonId], this.dir);\n      requestAnimationFrame(this.updateLine.bind(this, canvasCtx, typhoonPath, length, marker, typhoonId));\n    } else {\n    \n      canvasCtx.clearRect(0, 0, 1000, 600);\n      this.progress[typhoonId] = 0;\n      setTimeout(() =&gt; requestAnimationFrame(this.updateLine.bind(this, canvasCtx, typhoonPath, 500, marker, typhoonId)), 1000);\n    }\n  }</code></pre></div>\n<ul>\n<li><span id=\"step4\" style=\"\">Step 4. 定義線段的函式：</span></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsdefineline\"><pre class=\"language-jsdefineline\"><code class=\"language-jsdefineline\">defineLine(canvasCtx, typhoonPath, marker, typhoonId) {\n  // define path\n  canvasCtx.beginPath();\n  // start point\n  const startPoint = {\n    x: this.projection()(marker.coordinates)[0],\n    y: this.projection()(marker.coordinates)[1],\n  };\n  // 移動畫筆到起始點\n  canvasCtx.moveTo(startPoint.x, startPoint.y);\n\n  // 將路徑中的每個點與點之間用 lineTo() 連接起來\n  typhoonPath.forEach((path) =&gt; {\n      const x = this.projection()(path.coordinates)[0];\n      const y = this.projection()(path.coordinates)[1];\n      canvasCtx.lineTo(x, y);\n  });\n  // 設定 style\n  canvasCtx.lineWidth = 2;\n  canvasCtx.strokeStyle = &#39;rgba(53, 247, 14,0.7)&#39;;\n}</code></pre></div>\n<ul>\n<li><span id=\"step5\" style=\"\">Step 5. 實作更新 LineDash 的函式：</span></li>\n</ul>\n<p>單純的 moveDash 很簡單，只要透過 <code class=\"language-text\">setLineDash()</code>，將線段長度傳入，定義好你的 line dash 要多長，接著我們利用 Step 3 中提到的 <code class=\"language-text\">this.speed</code> 與 <code class=\"language-text\">this.dir</code> 來計算出現在要將 <code class=\"language-text\">lineDashOffset</code> 設為多少。</p>\n<p>這邊有個有趣的 API，<code class=\"language-text\">globalCompositeOperation</code>，它可以用來決定你目前的 canvas context 渲染環境中，每個新繪製的物件與其他舊有的物件之間的階層關係，像是我這邊設置的 <code class=\"language-text\">destination-over</code> 就代表 <strong>新繪製的圖形會被壓在舊的圖形下方</strong>，至於為什麼我這邊要設置這個參數呢？待會介紹颱風圈實作時你就知道了！更多關於 <code class=\"language-text\">globalCompositionOperation</code> 的介紹可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN globalCompositeOperation</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsmovedash\"><pre class=\"language-jsmovedash\"><code class=\"language-jsmovedash\">moveDash = (canvasCtx, typhoonId, typhoonPath, length, marker, frac, dir = -1) =&gt; {\n  // default direction right-&gt;left\n  // 設定 line dash 為線段長\n  canvasCtx.setLineDash([length]);\n  // 利用 `this.progress (frac)` 來慢慢增加 line-dash offset，製作出線段動態\n  canvasCtx.lineDashOffset = dir * (frac + length);\n  canvasCtx.globalCompositeOperation = &#39;destination-over&#39;;\n  canvasCtx.stroke();\n}</code></pre></div>\n<p>到這裡為止，你已經創建出與上次相同的動態路線地圖，只是是採用 Canvas 實作，Demo：</p>\n<iframe src=\"https://codesandbox.io/embed/4j3r5yv74w?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"暴風圈\" style=\"position:relative;\"><a href=\"#%E6%9A%B4%E9%A2%A8%E5%9C%88\" aria-label=\"暴風圈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>暴風圈</h2>\n<p>當然不能單純只有線段，還是需要有個跟著線段跑的颱風才比較有 fu。</p>\n<p>你可以會想說，那就每次 <code class=\"language-text\">moveDash()</code> 執行的時候，順便也繪製上一個圓形的暴風圈不就好了嗎？</p>\n<p>接著就這麼做了：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmovedash\"><pre class=\"language-jsmovedash\"><code class=\"language-jsmovedash\">moveDash = (canvasCtx, typhoonId, typhoonPath, length, marker, frac, dir = -1) =&gt; {\n  // default direction right-&gt;left\n  /* 原本繪製線段的部分 ... */\n  // ...\n  // ..\n  // Move typhoon marker\n  canvasCtx.beginPath();\n  canvasCtx.setLineDash([0]);\n  canvasCtx.lineDashOffset = 0;\n  canvasCtx.lineWidth = 1;\n  canvasCtx.strokeStyle = &#39;rgba(53, 247, 14,0.8)&#39;;\n  canvasCtx.arc(p.x, p.y, 10, 0, Math.PI * 2, true);\n  canvasCtx.closePath();\n  canvasCtx.stroke();\n}</code></pre></div>\n<p>然後就看到下面這個悲劇：</p>\n<iframe src=\"https://codesandbox.io/embed/xjz4n92yq4?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>其實也沒有錯，你的確是畫上圈圈了，但是每一次的 moveDash() 都會畫上一個圈圈，並且會持續留在 Canvas 上，而實際上我們應該每一步都要將前一個圈圈刪除。</p>\n<p>但如果你在這邊加上 <code class=\"language-text\">canvasCtx.clearRect(0, 0, 1000, 600);</code>，就會發現圈圈會正常移動了，但線段不見了...因為 <code class=\"language-text\">moveDash()</code> 並沒有重新繪製線段，只有更改 context 的 line dash。</p>\n<p><img src=\"/image/typhooncircleonly.gif\" alt=\"只剩下圈圈了...\"></p>\n<h3 id=\"解法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95\" aria-label=\"解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法</h3>\n<p>那就多畫一層 Canvas 吧！</p>\n<p>沒有人說過 Canvas 只能有一層，你可以疊加一層 Canvas 上去，讓跟著線段移動的暴風圈獨自一個圖層，這樣一來就不會互相影響了！</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmovedash-multilayer\"><pre class=\"language-jsmovedash-multilayer\"><code class=\"language-jsmovedash-multilayer\">moveDash = (canvasCtx, canvasTyphoonMarkerCtx, typhoonId, typhoonPath, length, marker, frac, dir = -1) =&gt; {\n  // default direction right-&gt;left\n  canvasCtx.setLineDash([length]);\n  canvasCtx.lineDashOffset = dir * (frac + length);\n  canvasCtx.globalCompositeOperation = &#39;destination-over&#39;;\n  canvasCtx.stroke();\n  const p = this.invisibleSVGPath[typhoonId].getPointAtLength(frac);\n  canvasCtx.save();\n  // Move typhoon marker\n  canvasTyphoonMarkerCtx.clearRect(0, 0, 1000, 600);\n  canvasTyphoonMarkerCtx.beginPath();\n  canvasTyphoonMarkerCtx.setLineDash([0]);\n  canvasTyphoonMarkerCtx.lineDashOffset = 0;\n  canvasTyphoonMarkerCtx.lineWidth = 1;\n  canvasTyphoonMarkerCtx.strokeStyle = &#39;rgba(53, 247, 14,0.8)&#39;;\n  canvasTyphoonMarkerCtx.arc(p.x, p.y, 10, 0, Math.PI * 2, true);\n  canvasTyphoonMarkerCtx.closePath();\n  canvasTyphoonMarkerCtx.stroke();\n}</code></pre></div>\n<p><code class=\"language-text\">const p = this.invisibleSVGPath[typhoonId].getPointAtLength(frac);</code> 這邊我們先前創立的 <code class=\"language-text\">invisibleSVGPath</code> 又登場了，用來取得目前的線段點資料。</p>\n<p>Demo: 利用兩層 Canvas 來實作跟著線段移動的暴風圈：</p>\n<iframe src=\"https://codesandbox.io/embed/0xoy5yn4rp?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"最後-demo---加上時間判斷顏色區別多個颱風的情況\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C-demo---%E5%8A%A0%E4%B8%8A%E6%99%82%E9%96%93%E5%88%A4%E6%96%B7%E9%A1%8F%E8%89%B2%E5%8D%80%E5%88%A5%E5%A4%9A%E5%80%8B%E9%A2%B1%E9%A2%A8%E7%9A%84%E6%83%85%E6%B3%81\" aria-label=\"最後 demo   加上時間判斷顏色區別多個颱風的情況 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後 Demo - 加上時間判斷、顏色區別、多個颱風的情況：</h2>\n<iframe src=\"https://codesandbox.io/embed/98816jkovr?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>這邊還要注意一下，稍早提到的 <code class=\"language-text\">globalCompositeOperation</code>，如果你設為 <code class=\"language-text\">source-over</code>，也就是新繪製出的物件蓋在舊的上面的話，你就會發現颱風圈都被壓在線段下了！</p>\n<p><img src=\"/image/circleunderline.png\" alt=\"source-over\"></p>\n<p>因為在 moveDash 中，線段是一直在重新繪製的，而你留下的颱風圈相對就是舊的物件，所以記得要改成 <code class=\"language-text\">destinatioin-over</code> 才能有比較好的效果！</p>\n<h2 id=\"根據時間留下暴風圈\" style=\"position:relative;\"><a href=\"#%E6%A0%B9%E6%93%9A%E6%99%82%E9%96%93%E7%95%99%E4%B8%8B%E6%9A%B4%E9%A2%A8%E5%9C%88\" aria-label=\"根據時間留下暴風圈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>根據時間留下暴風圈</h2>\n<p>這實作方法很簡單，就是在 moveDash 中判斷該點的時間，若符合要求就繪製上一個圖案即可，有興趣的讀者可以直接從 code 中看到。</p>\n<h2 id=\"如何讓所有動畫都結束後才一起重播\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E8%AE%93%E6%89%80%E6%9C%89%E5%8B%95%E7%95%AB%E9%83%BD%E7%B5%90%E6%9D%9F%E5%BE%8C%E6%89%8D%E4%B8%80%E8%B5%B7%E9%87%8D%E6%92%AD\" aria-label=\"如何讓所有動畫都結束後才一起重播 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何讓所有動畫都結束後才一起重播？</h2>\n<p>在我最後一個 Demo 中，一個颱風的路徑較短，一個較長，但卻能同時重播，我採用的方法其實蠻愚蠢的，暫時還沒想到更好的解法，歡迎大家提供。</p>\n<p>我的方法是，用一個共有變數 <code class=\"language-text\">this.allDone</code> 來記錄每條路徑是否已經播完動畫（走完整條 path），接著在 <code class=\"language-text\">updateLine()</code> 中，當自己跑完 path 時，就會多檢查一下 <code class=\"language-text\">this.allDone</code> 中的結果，如果還有人在跑，那自己就繼續呼叫 requestAnimationFrame，但不將 Canvas 清空，所以會一直 loop 檢查 <code class=\"language-text\">this.allDone</code>，直到大家都跑完才清空 Canvas 並重新 loop。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsupdateline-multiple\"><pre class=\"language-jsupdateline-multiple\"><code class=\"language-jsupdateline-multiple\">if (this.progress[typhoonId] &lt; length) {\n   // 正常執行 defineLine 與 moveDash\n} else {\n  // 不斷檢查是否每條 path 都跑完了\n  this.allDone[typhoonId] = true;\n  let keepWaiting;\n  Object.keys(this.allDone).forEach((allDoneTyphoonId) =&gt; {\n    if (!this.allDone[allDoneTyphoonId]) {\n        keepWaiting = true;\n    }\n    return keepWaiting;\n  });\n  if (keepWaiting) {\n    requestAnimationFrame(this.updateLine.bind(this, canvasCtx, canvasTyphoonMarkerCtx, typhoonPath, 500, marker, typhoonId));\n  } else {\n    // 清空 canvas 並重新 loop\n  }\n}</code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>利用 Canvas 繪製動畫實際上比用 D3 + svg 煩瑣多了，但是當你的動畫有大量的物件時，Canvas 能為你帶來大幅的 performance 改進，畢竟 svg 的操作會直接影響到 DOM tree。\n另外，實際上要將這些東西應用到 Production 的話，其實還有非常多細節要調整，包含各種 Browser 與 Device 的呈現、Map Scale 的彈性等等，還有很長的路要走啊...\n這篇文章算是我的一個筆記，寫得有點雜亂，歡迎（有看完的或是看不下去的）讀者給予任何建議！\n(PS. 我本來路徑跟暴風圈的顏色是想弄得像 EVA 風格，結果有點慘XD  但我懶得修了就給大家笑笑～)</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/svg-line-animation-works/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How SVG Line Animation Works</a></li>\n<li><a href=\"http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3.js 實戰 － Canvas 把我的視覺化變「快」了！</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Canvas tutorial</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN globalCompositeOperation</a></li>\n<li><a href=\"https://bl.ocks.org/mbostock/3783604\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mbostock d3.geoPath + Canvas</a></li>\n</ol>","id":"1b0e7d88-3ed4-5c1e-8c8d-f1857d0cfea8","fields":{"slug":"canvas-path-map"},"frontmatter":{"date":"2017-08-18T00:04:21.000Z","title":"D3v4 & Canvas 工作坊 - D3 + Canvas 繪製動態路線圖","tags":["javascript","d3","d3v4","canvas"],"type":"tech","slug":"canvas-path-map"},"timeToRead":17},{"excerpt":"~ $ man woman\n~ $ man: No manual entry for woman","html":"<blockquote>\n<p>~ $ man woman\n~ $ man: No manual entry for woman</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>時間過得很快，記得第一次聽到 WebAssembly 這個名詞是在 2015 年，小弟還在服役...當時看到的文章以聳動的標題訴說著 JavaScript 即將要被取代，各家大廠紛紛投入開發...（我就不轉貼這種文章了）害我想說是不是退役後會找不到工作...</p>\n<p>還好事實總是背離記者，WebAssembly 當然不是來取代 JavaScript 的，可以看看 <a href=\"https://brendaneich.com/2015/06/from-asm-js-to-webassembly/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript 的發明人 Brendan Eich 怎麼說</a> 以及 <a href=\"https://www.youtube.com/watch?time_continue=1108&#x26;v=aZqhRICne_M\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">他在 Fluent conference 的 keynote</a>。</p>\n<p>但即便知道 WebAssembly 並非要取代 JavaScript，我其實也還是一直搞不太懂身為開發者，到底要如何使用 WebAssembly，只知道它似乎讓 C/C++ 跑在 Browser 上這件事變成可行，也能大幅提升 JavaScript 的效能。</p>\n<p>直到前陣子發現一部限時免費的教學影片 - <a href=\"https://egghead.io/courses/get-started-using-webassembly-wasm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get Started Using WebAssembly (wasm)</a>，我才稍稍領悟了一些。這部由 <a href=\"https://egghead.io/instructors/guy-bedford\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guy Bedford</a> 製作的影片在 egghead.io 上，短短 56 分鐘，以實際範例告訴你如何使用 WebAssembly，以及與 JS 進行效能比較，也介紹了許多方便你測試的工具，有時間的話我強烈推薦把它看完，不過現在已經要是 egghead 的 pro member 才能看得到了... (作者有 open source 他所有的範例 code 在 <a href=\"https://github.com/guybedford/wasm-intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guybedford/wasm-intro</a> 與 <a href=\"https://github.com/guybedford/wasm-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guybedford/wasm-demo</a>)</p>\n<p>可能你沒有時間也沒有多餘的錢能付費觀看，但沒關係，希望憑著我的記憶，透過這篇文章融合一些影片的重點，讓大家快速了解 WebAssembly 是什麼，以及要如何與 JavaScript 搭配使用。</p>\n<h2 id=\"什麼是-webassembly-wasm\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-webassembly-wasm\" aria-label=\"什麼是 webassembly wasm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 WebAssembly (wasm)？</h2>\n<blockquote>\n<p>WebAssembly or wasm is a new, portable, size- and load-time-efficient format suitable for compilation to the web. -- <a href=\"https://github.com/WebAssembly/design\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly Design</a></p>\n</blockquote>\n<ol>\n<li>一種二進位表示的新語言，但有另外的 text format 可以讓你編輯與 debug。</li>\n<li>Compile Target：顧名思義，只要透過特定的 Compiler，你就能將你自己慣用的語言編譯成 WebAssembly，然後執行在瀏覽器上！目前可以透過 <a href=\"http://kripken.github.io/emscripten-site/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Emscripten(LLVM to JS compiler)</a> 來編譯 C/C++ 的程式。</li>\n<li>提供增強 JavaScript 程式的方法：你可以將 performance critical 的程式部分用 WebAssembly 撰寫，或是用第 2 點提及的 C/C++編譯成 WebAssembly，然後像一般 import js module 一般，導入你的 JavaScript Application。透過 WebAssembly，你能夠自由控制 Memory 的存取與釋放。</li>\n<li>當 Browser 能夠支援運行 WebAssembly 的時候，由於二進位格式以及事先編譯與優化的關係，勢必能夠產生比 JavaScript 運行速度更快、檔案大小更小的結果。</li>\n<li>語言的安全性 WebAssembly 當然也很重視，在 JavaScript VM 中， WebAssembly 運行在一個沙箱化的執行環境，遷入 web 端運行時會強制使用 Browser 的 Same-Origin 和 permissions security policies。此外，wasm 的實作設計中更特別提及他是 <a href=\"https://github.com/WebAssembly/design/blob/master/Security.md#memory-safety\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">memory-safe</a> 的。</li>\n<li><a href=\"https://github.com/WebAssembly/design/blob/master/NonWeb.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Non-Web Embeddings</a>：雖然是為了 Web 設計，但也希望能在其他環境中運行，因此底層實作並沒有 require Web API，讓其擁有良好的 portability，不管是 Nodejs, IoT devices 都可使用。</li>\n</ol>\n<p>WebAssembly 目前由 <a href=\"https://www.w3.org/community/webassembly/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Community Group</a> 設計開發，成員包含所有 major browsers 的代表。</p>\n<p>WebAssembly 有許多 <a href=\"http://webassembly.org/docs/high-level-goals/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">High-Level Goals</a>，目前 release 的版本主要為 <a href=\"http://webassembly.org/docs/mvp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MVP(Minimum Viable Product)</a>，提供先前 <code class=\"language-text\">asm.js</code> 的多數功能，並先以 C/C++ 的編譯為主。</p>\n<h2 id=\"等等第一點就有問題了你說他是二進位表示的語言那該怎麼寫text-format-又是長什麼樣子\" style=\"position:relative;\"><a href=\"#%E7%AD%89%E7%AD%89%E7%AC%AC%E4%B8%80%E9%BB%9E%E5%B0%B1%E6%9C%89%E5%95%8F%E9%A1%8C%E4%BA%86%E4%BD%A0%E8%AA%AA%E4%BB%96%E6%98%AF%E4%BA%8C%E9%80%B2%E4%BD%8D%E8%A1%A8%E7%A4%BA%E7%9A%84%E8%AA%9E%E8%A8%80%E9%82%A3%E8%A9%B2%E6%80%8E%E9%BA%BC%E5%AF%ABtext-format-%E5%8F%88%E6%98%AF%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"等等第一點就有問題了你說他是二進位表示的語言那該怎麼寫text format 又是長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>等等，第一點就有問題了，你說他是二進位表示的語言，那該怎麼寫？！text format 又是長什麼樣子？</h2>\n<p>問得好，這就是本篇的重點，WebAssembly 的檔案格式為 <code class=\"language-text\">wasm</code>，舉一個例子來看，一個用 c++ 撰寫的加法函數：</p>\n<div class=\"gatsby-highlight\" data-language=\"cadd.c\"><pre class=\"language-cadd.c\"><code class=\"language-cadd.c\">#include &lt;math.h&gt;\nint add(int num1, int num2) {\n    return num1 + num2;\n}</code></pre></div>\n<p>若編譯為 <code class=\"language-text\">wasm</code> 會長這個樣子（為節省空間我轉成 Hex）：</p>\n<div class=\"gatsby-highlight\" data-language=\"wasmadd.wasm\"><pre class=\"language-wasmadd.wasm\"><code class=\"language-wasmadd.wasm\">00 61 73 6d 01 00 00 00  01 87 80 80 80 00 01 60\n02 7f 7f 01 7f 03 82 80  80 80 00 01 00 04 84 80\n80 80 00 01 70 00 00 05  83 80 80 80 00 01 00 01\n06 81 80 80 80 00 00 07  95 80 80 80 00 02 06 6d\n65 6d 6f 72 79 02 00 08  5f 5a 33 61 64 64 69 69\n00 00 0a 8d 80 80 80 00  01 87 80 80 80 00 00 20\n01 20 00 6a 0b</code></pre></div>\n<p>當然我們很難去編輯這樣的東西，所以有另一種 <strong>text format</strong> 叫做 <code class=\"language-text\">wast</code>，上述的 .wasm 轉成 .wast 後：</p>\n<div class=\"gatsby-highlight\" data-language=\"wastadd.wast\"><pre class=\"language-wastadd.wast\"><code class=\"language-wastadd.wast\">(module\n  (table 0 anyfunc)\n  (memory $0 1)\n  (export &quot;memory&quot; (memory $0))\n  (export &quot;add&quot; (func $add))\n  (func $add (param $0 i32) (param $1 i32) (result i32)\n    (i32.add\n      (get_local $1)\n      (get_local $0)\n    )\n  )\n)</code></pre></div>\n<p>這樣就好懂多了，我們一行一行來解釋：</p>\n<p><code class=\"language-text\">line 1</code> 的 module 就是 WebAssembly 中一個可載入、可執行的最小單位程式，在 runtime 載入後可以產生 Instance 來執行，而這個 module 也朝著與 ES6 modules 整合的方向，也就是說以後能透過 <code class=\"language-text\">&lt;script src=\"abc.wasm\" type=\"module\" /></code> 的方式載入。</p>\n<p><code class=\"language-text\">line 2 ~ 3</code> 分別宣告了兩個預設的環境變量: <code class=\"language-text\">memory</code> 與 <code class=\"language-text\">table</code>，memory 就是存放變數的記憶體物件，而 table 則是 WebAssembly 用來存放 function reference 的地方，在目前 MVP 的版本中，table 的 element type 只能為 <code class=\"language-text\">anyfunc</code>。</p>\n<p>接著 <code class=\"language-text\">line 4 ~ 5</code> 把 memory 與 add function export 出去。之後在 JavaScript 中，我們可以取得這兩個被 export 出來的物件與函式。</p>\n<p>最後是加法函式的宣告與實作內容，其中 <code class=\"language-text\">get_local</code> 是 WebAssembly 中取得 memory 中 local 變數的方法。</p>\n<p>不知道會不會有人好奇 i32 是什麼？i32 指的就是 32位元的整數，在 WebAssembly 的世界中，是強型態的，必須明確指定變數型態，寫習慣 JS 的要多加注意，稍後的範例會再度提及。</p>\n<!-- ## 工具包 -->\n<h2 id=\"那到底怎麼將-cc-編譯成-wasm-或-wast-呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%88%B0%E5%BA%95%E6%80%8E%E9%BA%BC%E5%B0%87-cc-%E7%B7%A8%E8%AD%AF%E6%88%90-wasm-%E6%88%96-wast-%E5%91%A2\" aria-label=\"那到底怎麼將 cc 編譯成 wasm 或 wast 呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那到底怎麼將 C/C++ 編譯成 wasm 或 wast 呢？</h2>\n<p><a href=\"http://webassembly.org/getting-started/developers-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly.org</a> 中介紹我們使用 <a href=\"https://github.com/kripken/emscripten\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Emscripten</a>，Emscripten 的安裝與使用方法大家可以從官網上看到，就不贅述。</p>\n<p>安裝好後執行 <code class=\"language-text\">emcc add.c -s WASM=1 -o add.html</code> 即可，唯一要注意的是 <code class=\"language-text\">WASM=1</code> 這個 flag 要設定，否則 <code class=\"language-text\">emcc</code> 預設會跑 asm.js。</p>\n<p>如果只是想嚐鮮一下，可能看到要安裝這些東西就會把網頁關掉了...</p>\n<p>不過不用擔心！現在也已經有很方便的 online tool 可以使用：</p>\n<p><a href=\"https://wasdk.github.io/WasmFiddle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WasmFiddle</a></p>\n<p><img src=\"/image/wasmFiddle.png\" alt=\"WasmFiddle\"></p>\n<!-- Fiddle 的限制 -->\n<p>WasmFiddle 可以幫你把 C code 轉成 Wast 與 Wasm (可下載)，然後同時讓你直接利用 JS 進行操作，缺點是沒辦法直接更改 Wast。</p>\n<p><a href=\"http://mbebenita.github.io/WasmExplorer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WasmExplorer</a>：</p>\n<p><img src=\"/image/wasmExplorer.png\" alt=\"wasmExplorer\"></p>\n<!-- Explorer 的限制 -->\n<p>WasmExplorer 一樣能幫你把 C code 編譯成 Wast 與 Wasm，並且可以編輯轉出來的 Wast，缺點是沒有 JS 能直接互動。</p>\n<h3 id=\"所以搭配操作的流程\" style=\"position:relative;\"><a href=\"#%E6%89%80%E4%BB%A5%E6%90%AD%E9%85%8D%E6%93%8D%E4%BD%9C%E7%9A%84%E6%B5%81%E7%A8%8B\" aria-label=\"所以搭配操作的流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以搭配操作的流程...</h3>\n<blockquote>\n<p>先 WasmFiddle 來進行測試，接著把編好的 Wast 複製到 WasmExplorer 進行你想要的編輯，接著再 compile 成 wasm 並下載下來。</p>\n</blockquote>\n<!-- ## 與 JS 的交互使用-->\n<h2 id=\"知道怎麼編譯-wasm-後該說說-javascript-了吧\" style=\"position:relative;\"><a href=\"#%E7%9F%A5%E9%81%93%E6%80%8E%E9%BA%BC%E7%B7%A8%E8%AD%AF-wasm-%E5%BE%8C%E8%A9%B2%E8%AA%AA%E8%AA%AA-javascript-%E4%BA%86%E5%90%A7\" aria-label=\"知道怎麼編譯 wasm 後該說說 javascript 了吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知道怎麼編譯 wasm 後，該說說 JavaScript 了吧</h2>\n<p>好的，但在那之前，要先提醒大家，除了 Chrome 57, Firefox 52 預設支援 WebAssembly 外，Safari 需要是紫色版本（Preview 版）才能使用，而 Edge 15 則是要開啟 Experimental JavaScript Features。</p>\n<h3 id=\"載入-wasm-到-web-端\" style=\"position:relative;\"><a href=\"#%E8%BC%89%E5%85%A5-wasm-%E5%88%B0-web-%E7%AB%AF\" aria-label=\"載入 wasm 到 web 端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>載入 wasm 到 Web 端</h3>\n<p>在 <code class=\"language-text\">&lt;script src=\"abc.wasm\" type=\"module\" /></code> 還無法使用之前，想要載入 wasm 必須透過 <code class=\"language-text\">fetch</code> API。在 <a href=\"https://github.com/guybedford/wasm-intro/blob/master/4-reading-wasm-memory/test.html#L4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guy bedford 的影片範例</a> 與 <a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js#L6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mdn 的 example</a> 中的寫法都差不多：</p>\n<div class=\"gatsby-highlight\" data-language=\"jswasm-loader.js\"><pre class=\"language-jswasm-loader.js\"><code class=\"language-jswasm-loader.js\">function fetchAndInstantiateWasm (url, imports) {\n    return fetch(url) // url could be your .wasm file\n    .then(res =&gt; {\n    if (res.ok)\n        return res.arrayBuffer();\n    throw new Error(`Unable to fetch Web Assembly file ${url}.`);\n    })\n    .then(bytes =&gt; WebAssembly.compile(bytes))\n    .then(module =&gt; WebAssembly.instantiate(module, imports || {}))\n    .then(instance =&gt; instance.exports);\n}</code></pre></div>\n<p>基本上會實作一個 <code class=\"language-text\">wasm-loader</code> 之類的函式，像上面的 <code class=\"language-text\">fetchAndInstantiateWasm</code>。</p>\n<p>內容很簡單，取得 fetch 回來的 result 後，將其轉為 <code class=\"language-text\">ArrayBuffer</code>，利用 <code class=\"language-text\">WebAssembly.compile</code> 這個 Web API 來產生 WebAssembly Module，接著透過 <code class=\"language-text\">WebAssembly.instantiate</code> 來產生 module instance，最後的 instance.exports 就是我們在 wasm 中 export 出來的物件或 function。</p>\n<p>除了 <code class=\"language-text\">fetch</code> 以外，<code class=\"language-text\">WebAssembly.compile</code> 與 <code class=\"language-text\">WebAssembly.instantiate</code> 也都是回傳 Promise。</p>\n<p>這邊出現一個相信一般前端開發者也比較少看到的 <strong>ArrayBuffer</strong>。</p>\n<p>ArrayBuffer 是 JavaScript 的一種 data type，用來表示 generic, fixed-length 的 binary data buffer，屬於 <strong>typed arrays</strong> 的一部分，而關於 <strong>typed arrays</strong> 雖然在 WebAssembly 中很重要，但是難以在這邊詳述，<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mdn 的文件</a>寫得很清楚，值得閱讀。</p>\n<p>我們目前只要知道他是一個 array-like 的物件，讓我們能在 JavaScript 中存取 raw binary data，有 <code class=\"language-text\">Int8Array</code>、<code class=\"language-text\">Int32Array</code> 與 <code class=\"language-text\">Float32Array</code> 等 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DataView</a> 可以使用即可。（又一個名詞...DataView 提供 getter/setter API 來對 buffer 中的 data 做讀取。）</p>\n<p>回到主題，如果你剛剛有先點進 <a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js#L6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mdn 的 example</a> 看，可能會發現他怎麼沒有 <code class=\"language-text\">WebAssembly.compile</code> 這個步驟？</p>\n<p>實際上 <code class=\"language-text\">WebAssembly.instantiate</code> 有兩種 overload 實作：</p>\n<ul>\n<li><code class=\"language-text\">Promise&lt;ResultObject> WebAssembly.instantiate(bufferSource, importObject);</code></li>\n<li><code class=\"language-text\">Promise&lt;WebAssembly.Instance> WebAssembly.instantiate(module, importObject);</code></li>\n</ul>\n<p>差別在於，先透過 <code class=\"language-text\">WebAssembly.compile</code> 後產生的 WebAssembly module，可以存在 indexedDB 中 cache，或是在 web workers 之間傳遞。</p>\n<p>此外，WebAssembly.Instance 的第二個參數：<code class=\"language-text\">importObject</code> 是用來傳遞 JavaScript 的參數或 function 到 WebAssembly 程式中使用，後面會有範例。 </p>\n<h2 id=\"在-javascript-中使用-webassembly-實作的-function\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-javascript-%E4%B8%AD%E4%BD%BF%E7%94%A8-webassembly-%E5%AF%A6%E4%BD%9C%E7%9A%84-function\" aria-label=\"在 javascript 中使用 webassembly 實作的 function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 JavaScript 中使用 WebAssembly 實作的 function</h2>\n<p>有了剛剛的 <code class=\"language-text\">fetchAndInstantiateWasm</code>，取得 WebAssembly function 很方便：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetchAndInstantiateWasm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add.wasm'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用上就是這麼簡單！</p>\n<h2 id=\"那能不能在-webassembly-中使用-javascript-寫的-function-呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E8%83%BD%E4%B8%8D%E8%83%BD%E5%9C%A8-webassembly-%E4%B8%AD%E4%BD%BF%E7%94%A8-javascript-%E5%AF%AB%E7%9A%84-function-%E5%91%A2\" aria-label=\"那能不能在 webassembly 中使用 javascript 寫的 function 呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那能不能在 WebAssembly 中使用 JavaScript 寫的 function 呢？</h2>\n<p>當然可以！就是透過方才所說的第二個參數 <code class=\"language-text\">importObject</code>。</p>\n<p>假設我們想要在剛剛的加法函數內進行 JS 的 <code class=\"language-text\">console.log</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"cadd.c\"><pre class=\"language-cadd.c\"><code class=\"language-cadd.c\">#include &lt;math.h&gt;\nvoid consoleLog (int num);\nint add(int num1, int num2) {\n    int result = num1 + num2;\n    consoleLog(result);\n    return result;\n}</code></pre></div>\n<p>先宣告一個 <code class=\"language-text\">consoleLog</code> 函式，並不需要實作他，因為這會是我們待會要從 JavaScript 那邊 import 進來的部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetchAndInstantiateWasm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add.wasm'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    env<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">consoleLog</span><span class=\"token operator\">:</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// console.log 8</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在剛剛的 <code class=\"language-text\">fetchAndInstantiateWasm</code> 的第二個參數中，我們定義一個 <code class=\"language-text\">env</code> object，並傳入一個內含 console.log 的函式。<code class=\"language-text\">env</code> 是一個特殊的 key，在剛剛的 add.c 當中，我們宣告的 <code class=\"language-text\">void consoleLog (int num)</code> 轉換到 add.wast 時，他會當作這個函式是從 <code class=\"language-text\">env</code> 中 import 進入的（line 2）：</p>\n<div class=\"gatsby-highlight\" data-language=\"wastadd.wast\"><pre class=\"language-wastadd.wast\"><code class=\"language-wastadd.wast\">(module\n  (type $FUNCSIG$vi (func (param i32)))\n  (import &quot;env&quot; &quot;consoleLog&quot; (func $consoleLog (param i32)))\n  // ...函數內容省略，可參考前面的範例\n)</code></pre></div>\n<h3 id=\"難道只能從-env-載入嗎\" style=\"position:relative;\"><a href=\"#%E9%9B%A3%E9%81%93%E5%8F%AA%E8%83%BD%E5%BE%9E-env-%E8%BC%89%E5%85%A5%E5%97%8E\" aria-label=\"難道只能從 env 載入嗎 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>難道只能從 env 載入嗎？</h3>\n<p>當然不是，我們也可以自己定義，但就要去更改 wast 檔案了，其實改過以後會發現邏輯不難懂，有讓我回味到大學修組語的感覺...</p>\n<div class=\"gatsby-highlight\" data-language=\"wastadd-10-20.wast\"><pre class=\"language-wastadd-10-20.wast\"><code class=\"language-wastadd-10-20.wast\">(module\n  (type $FUNCSIG$vi (func (param i32)))\n  (import &quot;env&quot; &quot;consoleLog&quot; (func $consoleLog (param i32)))\n  ++(import &quot;lib&quot; &quot;log&quot; (func $log (param i32)))\n  (table 0 anyfunc)\n  (memory $0 1)\n  (export &quot;memory&quot; (memory $0))\n  (export &quot;add&quot; (func $add))\n  (func $add (param $0 i32) (param $1 i32) (result i32)\n    (call $consoleLog // 從 env 中載入的 consoleLog\n      ++(i32.add\n        (tee_local $1\n          (i32.add\n            (get_local $1)\n            (get_local $0)\n          )\n        )\n        ++(i32.const 20) // 從 env 載入的 consoleLog 將結果多加 20\n      )\n    )\n    ++(call $log // 從我們自己定義的 lib 中載入的 log\n      ++(i32.add\n        ++(get_local $1) // $1 + $0 的結果放到 $1 了，因此我們直接將 $1 + 10 即可。\n        ++(i32.const 10) // 從 lib 載入的 log 會將結果多加 10\n      ++)\n    ++)\n    (get_local $1)\n  )\n)</code></pre></div>\n<p>前面有加號的就是我們直接在 wast 中修改的程式碼，等同於如下 C 語言的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"cadd.c\"><pre class=\"language-cadd.c\"><code class=\"language-cadd.c\">#include &lt;math.h&gt;\nvoid consoleLog (int num);\nint add(int num1, int num2) {\n    int result = num1 + num2;\n    consoleLog(result + 20);\n    log(result + 10); // 多了這個從 lib 匯入的 log 函數\n    return result;\n}</code></pre></div>\n<p>如此一來，我們就能夠像下面這般傳遞 <code class=\"language-text\">lib.log</code> 給我們的 wasm 使用了！</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/mixure/embed?html,console\">WASM Test on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<!-- 操作 memory -->\n<h2 id=\"現在我知道如何在-js-與-webassembly-中互相使用函式了但前面好像有提到他還能讓你操作-memory\" style=\"position:relative;\"><a href=\"#%E7%8F%BE%E5%9C%A8%E6%88%91%E7%9F%A5%E9%81%93%E5%A6%82%E4%BD%95%E5%9C%A8-js-%E8%88%87-webassembly-%E4%B8%AD%E4%BA%92%E7%9B%B8%E4%BD%BF%E7%94%A8%E5%87%BD%E5%BC%8F%E4%BA%86%E4%BD%86%E5%89%8D%E9%9D%A2%E5%A5%BD%E5%83%8F%E6%9C%89%E6%8F%90%E5%88%B0%E4%BB%96%E9%82%84%E8%83%BD%E8%AE%93%E4%BD%A0%E6%93%8D%E4%BD%9C-memory\" aria-label=\"現在我知道如何在 js 與 webassembly 中互相使用函式了但前面好像有提到他還能讓你操作 memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>現在我知道如何在 JS 與 WebAssembly 中互相使用函式了，但前面好像有提到他還能讓你操作 Memory?!</h2>\n<p>前面範例中的 wast 都有將 memory export 出來：<code class=\"language-text\">(export \"memory\" (memory $0))</code>\n我們可以利用前面提及的 JavaScript Typed Array 來取得 memory buffer，並利用 TextDecoder 這個較新的 Web API 來解碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memory <span class=\"token operator\">=</span> wasmModule<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> strBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> wasmModule<span class=\"token punctuation\">.</span><span class=\"token function\">getStrOffset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>strBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/gewayo/embed?html,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<p>可以讀取到 memory，當然也能寫入：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">writeString</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> offset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> strBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> outBuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> strBuf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strBuf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outBuf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strBuf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>對於 Memory 的操作部分，<a href=\"https://github.com/guybedford/wasm-intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guy Bedford 的範例</a>有更多介紹，包含怎麼搭配 <code class=\"language-text\">malloc</code> 來動態調整記憶體。</p>\n<!-- 效能呈現 -->\n<h2 id=\"webassembly-對於效能的展現似乎到目前為止都沒有觸及耶\" style=\"position:relative;\"><a href=\"#webassembly-%E5%B0%8D%E6%96%BC%E6%95%88%E8%83%BD%E7%9A%84%E5%B1%95%E7%8F%BE%E4%BC%BC%E4%B9%8E%E5%88%B0%E7%9B%AE%E5%89%8D%E7%82%BA%E6%AD%A2%E9%83%BD%E6%B2%92%E6%9C%89%E8%A7%B8%E5%8F%8A%E8%80%B6\" aria-label=\"webassembly 對於效能的展現似乎到目前為止都沒有觸及耶 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebAssembly 對於效能的展現似乎到目前為止都沒有觸及耶？</h2>\n<p>要能夠展現 JavaScript 與 WebAssembly 的效能差異其實沒有那麼簡單，Guy Bedford 在影片中的範例是在螢幕上畫出多個圓圈，計算他們之間碰撞的狀況來移動，有趣的是，第一次的 Demo 中，JavaScript 的速度比 WebAssembly 實作碰撞計算的要快得多，然而在重新 optimize 演算法後，才讓 WebAssembly 的效能有大幅進展，比起 JavaScript 好上不少（同樣演算法）</p>\n<p>這邊放個動態截圖給大家看，想自己跑跑看或是看程式碼的可以移駕 Guy Bedford 的 repo - <a href=\"https://github.com/guybedford/wasm-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wasm Demo</a>，載下來直接就能打開 html 執行囉！(要執行這個 Demo 需要 Chrome Canary 並在 chrome://flags 中啟動 Experimental Web Platform Flag)</p>\n<p><img src=\"/image/wasmvsjs.gif\" alt=\"Wasm VS JS\"></p>\n<!-- ## 結論-->\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>目前 wasm 在 Chrome 與 firefox 都已實作，雖然一定還會有規格上的變更，但了解一下這個勢必會影響未來 Web 開發的東西是有必要的！</p>\n<p>本文也只是簡單介紹基礎的使用方法，實際上還有許多相關的議題，像是 <strong>Type Arrays</strong> 與 <strong>WebAssembly Web API</strong> 等等，都需要有所了解。甚至是如何將各種程式語言 compile 成 wasm 也是一門大學問，也有許多我沒有提及的工具可以使用（從資料來源中找得到）。</p>\n<p>希望大家看完後可以對 WebAssembly 的使用方式有點概念，文中若有不清楚或是錯誤的地方也歡迎指正！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://webassembly.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly.org</a></li>\n<li><a href=\"https://egghead.io/courses/get-started-using-webassembly-wasm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get Started Using WebAssembly (wasm)</a></li>\n<li><a href=\"https://github.com/WebAssembly/design\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly Design</a></li>\n<li><a href=\"https://www.w3.org/community/webassembly/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Community Group</a></li>\n<li><a href=\"https://www.w3ctech.com/topic/2024\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly 系列（四）WebAssembly 工作原理</a></li>\n<li><a href=\"https://github.com/guybedford/wasm-intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guybedford/wasm-intro</a></li>\n<li><a href=\"https://github.com/guybedford/wasm-demo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">guybedford/wasm-demo</a>)</li>\n</ol>","id":"388bb6fe-045e-5e70-ab4c-1443a6a3ae10","fields":{"slug":"webassembly-js-future"},"frontmatter":{"date":"2017-06-17T13:34:49.000Z","title":"[筆記] 了解 WebAssembly 的基礎使用方法","tags":["webassembly","javascript"],"type":"tech","slug":"webassembly-js-future"},"timeToRead":16},{"excerpt":"『探索宇宙真理已經很累了，我沒有時間撒謊。』","html":"<blockquote>\n<p>『探索宇宙真理已經很累了，我沒有時間撒謊。』</p>\n</blockquote>\n<!-- more -->\n<p>Web VR 出來也很久了，但沒有去玩過，因為想說我沒有相關設備，直到前陣子看到這篇文章 <a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minecraft in WebVR with HTML Using A-Frame</a></p>\n<p>整個驚艷！</p>\n<p>隨便加幾個 tag，然後調整一下就可以有 VR 效果，這東西不試試怎麼行！說不定以後能像這篇作者一樣，在自己的婚禮上搞一套 VR 的網站！因此決定跟著<a href=\"https://aframe.io/docs/0.5.0/guides/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網範例</a>來了解一下 Web VR 到底該如何實作。</p>\n<p>一樣先看個成品：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BWMjBd\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo5\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/BWMjBd/\">webVR-test-demo5</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"a-frame\" style=\"position:relative;\"><a href=\"#a-frame\" aria-label=\"a frame permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A-frame</h2>\n<p>A-Frame 是 Mozilla VR team 為了在 browser 上利用 Javascript 提供 VR 體驗的一套 web framework，<a href=\"https://aframe.io/docs/0.5.0/guides/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a> 上有很詳細的教學與介紹。\n核心基於 HTML 與 entity-component-system framework (似乎是一套遊戲上常用的 pattern，像是 Unity)，雖然我不懂遊戲，但他的概念頗簡單，<strong>\"ECS favors composition over inheritance\"</strong>。</p>\n<p>在每個場景（scene）中的每個物件（object）都是一個 <strong>entity</strong>，<strong>entity</strong> 可以想做一個物件的空殼，而該空殼的動作、行為、外觀皆是由 <strong>components</strong> 來完成。\n所以透過在場景中混搭組合各種 components 就能創造出無數種的物件，這種方式若是用繼承的方式則會需要 create 許多特殊的 class 才行。</p>\n<p>在 A-frame 中，一個 entity 就是 <code class=\"language-text\">&lt;a-entity>&lt;/a-entity></code>。</p>\n<p>而這個 entity 可以掛載上各種 component，大致的方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">AFRAME</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sun'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    degree<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">init</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when component is plugged in.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">update</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when component's data is updated.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著就能夠在 html 中使用 sun 這個 component，<code class=\"language-text\">&lt;a-entity sun=\"degree: 5; color: yellow\">&lt;/a-entity></code>。\n（這邊比較會跟一般的 html tag 混淆，因為 tag 上看似 attribute 的東西其實是 entity 掛載的 component。）</p>\n<p>就像 Web component 一樣，A-frame 也有個 <a href=\"https://aframe.io/aframe-registry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-Frame Registry</a> 在收集各種開發者貢獻的 component。</p>\n<p>除了 <code class=\"language-text\">&lt;a-entity>&lt;/a-entity></code> 以外，Web VR 還有許多原生原件，像是 <code class=\"language-text\">&lt;a-scene></code>、<code class=\"language-text\">&lt;a-assets></code>、<code class=\"language-text\">&lt;a-box></code> 等等。\n這些 Primitives 的 tag 也是一種 entity，主要是包含了一些複雜但是 common 的元件（像是 <a-sky>，用來代表場景中的天空），\n以 <code class=\"language-text\">&lt;a-box></code> 為例，其實就是一個包含 geometry 與 material components 的 entity：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity id<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span> geometry<span class=\"token operator\">=</span><span class=\"token string\">\"primitive: box\"</span> material<span class=\"token operator\">=</span><span class=\"token string\">\"color: red\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span></code></pre></div>\n<p>也可以透過 <code class=\"language-text\">AFRAME.registerPrimitive</code> 的方式來註冊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">AFRAME</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-wave'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Attaches the wave component by default.</span>\n  <span class=\"token comment\">// And smartly makes the wave parallel to the ground.</span>\n  defaultComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    wave<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    rotation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Maps HTML attributes to wave component's properties.</span>\n  mappings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token string\">'wave.width'</span><span class=\"token punctuation\">,</span>\n    depth<span class=\"token operator\">:</span> <span class=\"token string\">'wave.depth'</span><span class=\"token punctuation\">,</span>\n    density<span class=\"token operator\">:</span> <span class=\"token string\">'wave.density'</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'wave.color'</span><span class=\"token punctuation\">,</span>\n    opacity<span class=\"token operator\">:</span> <span class=\"token string\">'wave.opacity'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這樣就有一個 Primitives 元件可用，<code class=\"language-text\">&lt;a-wave color=\"aqua\" depth=\"100\" width=\"100\">&lt;/a-wave></code></p>\n<p>其中可以看到我們有 <code class=\"language-text\">defaultComponents</code> 與 <code class=\"language-text\">mappings</code> 兩個 properties 可以用，分別讓你設置這個 entity 的 default component 與 將 HTML 的 attribute 映射到你自定義的 component 的屬性中，\n向這邊就是將 html 的 width 映射到 wave 這個 component 的 width 屬性。</p>\n<p>更詳細內容可以參考官網 <a href=\"https://aframe.io/docs/0.5.0/primitives/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">primitives</a></p>\n<h2 id=\"our-first-web-vr-scene-skeleton\" style=\"position:relative;\"><a href=\"#our-first-web-vr-scene-skeleton\" aria-label=\"our first web vr scene skeleton permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our first Web VR Scene (Skeleton)</h2>\n<p>接下來從實作一個最簡單的 Web VR Scene 來一步步認識 Web VR 的一些基礎元件。</p>\n<p>Web VR 的基礎骨幹：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.5.0/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">&lt;a-scene></code> 會 setup 一切 VR 所需的東西，並包含所有 entities，包含 WebGL, canvas, camera 等等，另外還有一些針對不同平台的 WebVR support，一個 out of box 的 magic tag！\n加上這個以後，整個 html 就會變成 WebVR 的骨幹了，你在 codepen 上的話就會看到右下角有個眼鏡的圖示。（當然記得要載入 aframe.js）</p>\n<p>接著，我們需要瞭解一下在 A-frame 的世界中的座標系統，採用所謂的 <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">right-hand rule</a></p>\n<p><img src=\"/image/right-hand-rule.png\" alt=\"Right-hand rule\" title=\"Right-hand rule\"></p>\n<p>在 WebVR API 回傳的距離資料以 Meter 為單位，因此在 A-frame 中的距離單位也是 Meter，所以當你在設計你的 WebVR project 時要注意一下，<code class=\"language-text\">height: 10</code> 跟 <code class=\"language-text\">width: 10</code> 在一般開發 web 來說好像很小，\n但在 A-frame 中可是會超大。</p>\n<h2 id=\"add-entity\" style=\"position:relative;\"><a href=\"#add-entity\" aria-label=\"add entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Entity</h2>\n<p>再來我們可以在 <code class=\"language-text\">&lt;a-scene></code> 中加入 <code class=\"language-text\">&lt;a-cylinder color=\"red\">&lt;/a-cylinder></code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>當你放上去以後應該會覺得奇怪，怎麼什麼都看不到，轉動了一下才發現東西在你腳下ＸＤ\n原因很簡單，我們沒有設定 postion，所以 x, y, z 軸都是 0。根據 right-hand rule，我們可以給 position component 一些參數，另外還可以進行 rotation 與 scale：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此應該就能看到如下結果：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MpLwKa\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/MpLwKa/\">webVR-test-demo1</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>Note：這邊岔開介紹一下 codepen 上的 WebVR 功能，點選右下角眼鏡可以進入全 VR 環境，在電腦上 default 的控制是用滑鼠拖拉，或是 WASD 控制，如果你有 VR headset 就能更直接的體驗。</p>\n<h2 id=\"add-background\" style=\"position:relative;\"><a href=\"#add-background\" aria-label=\"add background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Background</h2>\n<p>我們可以透過 <code class=\"language-text\">&lt;a-sky>&lt;/a-sky></code> 來增加背景，裡面可以單純設置顏色、360度的影片或照片</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>sky src<span class=\"token operator\">=</span><span class=\"token string\">\"http://i.imgur.com/JHZjdp6.jpg\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>sky<span class=\"token operator\">></span></code></pre></div>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"yMZNXO\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/yMZNXO/\">webVR-test-demo2</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>這樣我們就有一個漂浮在城市空中的圓柱體了 XD  (<a href=\"http://www.nwicon.com/seattle-view-from-the-top-of-the-space-needle.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a>)</p>\n<h2 id=\"asset-management-system\" style=\"position:relative;\"><a href=\"#asset-management-system\" aria-label=\"asset management system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asset Management System</h2>\n<p>在 A-frame 裡面有個 <code class=\"language-text\">&lt;a-assets></code>，用來管理所有 Entity 的 assets 資源，與其直接寫在 inline 裡面在 runtime 時讀取，透過定義在 <code class=\"language-text\">&lt;a-assets></code> 中可以讓 Browser 更輕易地做 cache，而 A-frame 會保證在 render 之前就把這些資源都載好，因此官方建議使用這種方式來處理圖片等 assets。</p>\n<p>用法很簡單，在 <code class=\"language-text\">&lt;a-assets></code> 中宣告 <code class=\"language-text\">&lt;img></code>，然後設定好 id，接著在想使用該 asset 的 entity 中的 src 指定對應 id 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-assets</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>skyTexture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://i.imgur.com/JHZjdp6.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-assets</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-sky</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#skyTexture<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-sky</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"more-entity-ground-light-animation\" style=\"position:relative;\"><a href=\"#more-entity-ground-light-animation\" aria-label=\"more entity ground light animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More entity (Ground, Light, Animation)</h2>\n<h3 id=\"ground--light\" style=\"position:relative;\"><a href=\"#ground--light\" aria-label=\"ground  light permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ground &#x26; Light</h3>\n<p>基本的場景除了天空以外，當然還要有地板、燈光，地板其實有很多種選擇，可以用 <code class=\"language-text\">&lt;a-plane></code>，也能用 <code class=\"language-text\">&lt;a-cylinder></code>，只要設置對的高度跟方位即可。\n以 <code class=\"language-text\">&lt;a-plane></code> 來說，因為他 defalut 的角度是與 XY 平行，因此我們要將 X 軸反轉九十度，讓他與 XZ 平行：</p>\n<p><code class=\"language-text\">&lt;a-plane src=\"#groundTexture\" rotation=\"-90 0 0\" width=\"30\" height=\"30\">&lt;/a-plane></code></p>\n<p>另外場景中很重要的燈光，在目前的例子中，我們都沒有特別設定，A-frame 會自己幫我們定義一個 ambient light 和 directional light，一旦我們有了自己的設定，default 值就會被拔掉。</p>\n<p>基本有兩種燈光可以設定：</p>\n<ul>\n<li>ambient: 針對整個 scene 的燈光設定</li>\n<li>point: 像是一個電燈泡，我們可以調整其位置與強度，讓 entity 上的光影效果因應距離與角度的不同有所變化。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-light</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ambient<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#445451<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-light</span><span class=\"token punctuation\">></span></span>\n    // intensity 為強度 2 距離在 x y z: 2 4 4 的燈泡\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-light</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>point<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">intensity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2 4 4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-light</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"animation\" style=\"position:relative;\"><a href=\"#animation\" aria-label=\"animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animation</h3>\n<p>A-frame 有內建的 <a href=\"https://aframe.io/docs/0.5.0/core/animations.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">animation system</a>，要使用很簡單，加上 <code class=\"language-text\">&lt;a-animation></code> 即可（文件上寫說這個 entity 將被取代，不過在我寫文的當下，該 issue 從 aframe 的 milestone 拔除了，所以還需要再觀察看看。）</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 60 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>是的，A-frame 中的 entity 可以有 child，而 child 會擁有 parent 設定的位置與角度等等，A-frame 會幫你處理好。</p>\n<p>這邊我們的動畫讓 <a-cylinder> 改變 rotation，到 30 60 45，也就是往 Y 軸轉動到 60 度，方向是 alternate，兩秒內做完，並且不斷 repeat。\n如果要多個動畫，就再加上一個 <a-animation>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 60 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>position<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2.2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>現在我們的圓柱體會上下左右旋轉移動了！</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"aJXvZa\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/aJXvZa/\">webVR-test-demo3</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"add-user-interation\" style=\"position:relative;\"><a href=\"#add-user-interation\" aria-label=\"add user interation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add user interation</h2>\n<p>VR 如果不能互動，還有什麼意義嗎？</p>\n<p>雖然我們沒有 VR 設備，但 A-frame 有提供給 Desktop 的開發者一個好用的內建 component <code class=\"language-text\">&lt;a-cursor></code>，用來模擬 controllers，我們要讓 controller 固定在 camera 的中間，也就是跟著我們的眼睛，\n只要當作 child 放在 <a-camera> 底下即可。\n(cursor 可以監聽的事件在此 <a href=\"https://aframe.io/docs/0.5.0/components/cursor.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aframe.io/docs/0.5.0/components/cursor.html</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-camera</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cursor</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cursor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-camera</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此一來我們就可以用滑鼠來做點擊的動作。</p>\n<p>要讓場景中的物件跟隨我們的點擊有所反應的話，有兩種做法：</p>\n<ul>\n<li>\n<p>Event Listener Component:\n如同一般我們在 Web 當中一樣，用 javascript 去 querySelector 出 object，接著加上 EventListener：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n        <span class=\"token keyword\">const</span> cylinderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-cylinder'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cylinderEl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseenter'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cylinderEl<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scale'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>也可以設置一個 component 然後 attach 到 Entity 上：\n<code class=\"language-text\">js\n        &lt;script>\n            AFRAME.registerComponent('scale-on-mouseenter', {\n                schema: {\n                    to: {default: '2.5 2.5 2.5'}\n                },\n                init: function () {\n                    var data = this.data;\n                    // 在這邊設定 listener\n                    this.el.addEventListener('mouseenter', function () {\n                        this.setAttribute('scale', data.to);\n                    });\n                    this.el.addEventListener('mouseleave', function () {\n                        this.setAttribute('scale', data.leave);\n                    });\n                }\n            });\n        &lt;/script></code>\n<code class=\"language-text\">html\n        &lt;!-- 掛載一個 sacle-on-mouseenter component 上去 -->\n        &lt;a-cylinder color=\"red\" position=\"0 2 -5\" rotation=\"30 100 0\" scale=\"1 1 1\" height=\"0.2\"\n            scale-on-mouseenter=\"to: 2.2 2.2 2.2\">\n            &lt;a-animation attribute=\"rotation\" to=\"30 90 90\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"position\" to=\"0 2.2 -5\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n        &lt;/a-cylinder></code></p>\n</li>\n<li>Animating on Event:\n另一種方式很簡單，是直接設定 Event 到 <a-animation> 上頭，但你就少了一些自由操作的彈性：\n<code class=\"language-text\">html\n        &lt;a-cylinder color=\"red\" position=\"0 2 -5\" rotation=\"30 100 0\" scale=\"1 1 1\" height=\"0.2\"\n            scale-on-mouseenter=\"to: 2.2 2.2 2.2\">\n            &lt;a-animation attribute=\"rotation\" to=\"30 90 90\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"position\" to=\"0 2.2 -5\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"scale\" begin=\"mouseenter\" dur=\"300\" to=\"2.2 2.2 2.2\">&lt;/a-animation>\n            &lt;a-animation attribute=\"scale\" begin=\"mouseleave\" dur=\"300\" to=\"1 1 1\">&lt;/a-animation>\n            &lt;a-animation attribute=\"rotation\" begin=\"click\" dur=\"2000\" to=\"30 405 0\">&lt;/a-animation>\n        &lt;/a-cylinder></code></li>\n</ul>\n<p>中間的點（cursor）移入與移出圓柱體時會放大縮小，點擊時會旋轉：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BWMjBd\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo5\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/BWMjBd/\">webVR-test-demo5</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>到目前為止學到的東西其實已經足夠我們回去最開始我提及的那篇文章 <a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://css-tricks.com/minecraft-webvr-html-using-frame/</a> 深入閱讀，\n大部分的內容在我這篇都有涵括到了，但透過閱讀該篇文章可以更了解如何利用 reusable 的 component 製作出一個 VR 的 Minecraft！並且裡面還有教你怎麼要設置 Vive, Oculus 的 controller，很推薦閱讀！</p>\n<p>最後，再告訴大家一個好康，A-frame 有提供 Inspector<a href=\"https://github.com/aframevr/aframe-inspector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a>！而且只要在你的 html 加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">inspector</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url: https://aframe.io/releases/0.3.0/aframe-inspector.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Scene... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接著按下 <code class=\"language-text\">&lt;ctrl> + &lt;alt> + i</code>，就可以看到如下畫面了！</p>\n<p><img src=\"/image/vr-inspector.png\" alt=\"aframe-inspector\" title=\"aframe-inspector\"></p>\n<p>A-frame 使用起來真的很簡單方便，大家都來玩玩看吧！</p>\n<p>這邊有瀏覽器支援度：<a href=\"https://webvr.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webvr.rocks/</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://aframe.io/docs/0.5.0/guides\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-frame.io</a></li>\n<li><a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minecraft webVR using A-frame</a></li>\n<li><a href=\"https://mozvr.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla VR</a></li>\n<li><a href=\"https://webvr.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webvr.rocks</a></li>\n<li><a href=\"https://www.gamedev.net/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding Component-Entity-Systems</a></li>\n</ol>","id":"0bb61284-5578-5bf4-866b-3d4ea6314a54","fields":{"slug":"web-vr-101"},"frontmatter":{"date":"2017-04-01T17:12:25.000Z","title":"Web VR 初探","tags":["web vr","javascript"],"type":"tech","slug":"web-vr-101"},"timeToRead":12},{"excerpt":"好歌分享：莫宰羊 - 健康快樂","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/SfehQq0wC84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">莫宰羊 - 健康快樂 </a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/SfehQq0wC84\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<p>去年年底時趁著 Udemy 特價，買了上面很有名的課程 - JavaScript: Understanding the Weird Parts，當初會想買是因為他最後面有個章節是介紹如何建構自己的 JS Framework，\n而我一直都很想有系統性地去瞭解建構一個可供大家使用的 JS library 或是 framework 需要注意哪些事項，該怎麼寫才是安全有彈性的結構。</p>\n<p>大約花了三天的時間斷斷續續把課程上完，這邊紀錄一下該章節的一些筆記，並實做一個小小的 js library 當範例。</p>\n<h3 id=\"goal\" style=\"position:relative;\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h3>\n<p>目標是建構一個 js library，可以將數字做一些簡化約分，像是我在 <a href=\"http://blog.techbridge.cc/2017/03/04/webcomopnent-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Component 實戰</a> 中所實作的 function。\n並讓 user 透過 <code class=\"language-text\">&lt;script src=\"formatNum.js\" /></code> 的方式就能載入使用。</p>\n<p>完整的 code 如下：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/cayelaxewu/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.9\"></script></p>\n<h3 id=\"structuring-safe-code\" style=\"position:relative;\"><a href=\"#structuring-safe-code\" aria-label=\"structuring safe code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structuring Safe Code</h3>\n<p>要建構一個安全的 JS lib，勢必需要保護好自己的 scope 不受外部影響，也不會去影響外部。要做到這件事最簡單的方式就是使用一個 IIFE (Immediately Invoked Function Expression)，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而我們需要將 lib 能夠 export 到外部供人使用，所以在這個立即執行函式中需要傳入 window 物件，在函式內我們則取名為 global，這樣未來如果想要執行在不同環境，像是 nodejs 裡面時，可以不用更改內部的變數名稱，\n只要修改傳入的 window 變數即可。</p>\n<p>另外最前方可以加上個分號，以免有其他人的 code 沒有用分號做結尾而造成問題，不過這個並不是必須的。</p>\n<p>在這個立即執行函式中的變數除非我們刻意 export 出去，否則都只存在於自己的作用域內，是個安全的結構。</p>\n<p>下方的 <code class=\"language-text\">supportedUnit</code> 與 <code class=\"language-text\">unit</code> 在外部都無法存取，無法透過 <code class=\"language-text\">FormaNum.unit</code> 取得。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// hidden within the scope of the IIFE and never directly accessible</span>\n    <span class=\"token keyword\">const</span> supportedUnit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scientific'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        normalUnit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"k\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        siUnit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E18</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"E\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E15</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"P\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E12</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"T\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E9</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"G\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E6</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E3</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"k\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"object-prototype-and-properties\" style=\"position:relative;\"><a href=\"#object-prototype-and-properties\" aria-label=\"object prototype and properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object, Prototype and Properties</h3>\n<p>接著就是開始實作我們的 lib 內容了，這門課程中，有帶著我們了解 JQuery 的 source code，看看這個偉大的 lib 是如何架構其內部程式，其中很特別的地方在於它 new 一個物件的方式，\n通常我們載入一個別人寫好的物件，或是我們自己寫好了一個物件，要使用的時候會需要透過 <code class=\"language-text\">const objectInstanc = new Object()</code> 的方式來產生物件實例，但為何我們使用 JQuery 的時候都不需要特別使用 new 關鍵字呢？</p>\n<p>因為在 JQuery 中，他透過下面的方式來幫你在每次使用它時自動 new 了一個物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// 'new' an object</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FormatNum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatNum<span class=\"token punctuation\">.</span>init</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...</span>\n\n    <span class=\"token comment\">// the actual object is created here, allowing us to 'new' an object without calling 'new'</span>\n    FormatNum<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">=</span> digits <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">=</span> unit <span class=\"token operator\">||</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n        \n        self<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這時候你可能會想說，這樣的寫法，不就代表我要加 method 到 prototype 的話，都是要加在 <code class=\"language-text\">FormatNum.init.prototype</code> 了嗎？ 這樣有點奇怪耶，畢竟我的 lib 是叫做 FormatNum呀！</p>\n<p>沒錯，所以我們可以將 FormatNum.init.prototype 在指定到 FormatNum.prototype 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    FormatNum<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">FormatNum</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過短短這兩個步驟，我們就能夠不需要自己 new object，同時又能直接在 FormatNum 上面設置 prototype method！</p>\n<p>另外，透過在每個 method 的最後 return this，就能讓我們的 function chainable。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// prototype holds methods (to save memory space)</span>\n    <span class=\"token class-name\">FormatNum</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">///</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      \n        <span class=\"token function-variable function\">calculate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unitType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">///</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      \n        <span class=\"token function-variable function\">formatScientific</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'siUnit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n        <span class=\"token function-variable function\">formatNormal</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'normalUnit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// chainable methods return their own containing object</span>\n        <span class=\"token function-variable function\">format</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> formattedNum<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// if undefined or null it will be coerced to 'false'</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">'scientific'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                formattedNum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatScientific</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                formattedNum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>\n          \n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formattedNum <span class=\"token operator\">=</span> formattedNum<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 'this' refers to the calling object at execution time</span>\n            <span class=\"token comment\">// makes the method chainable</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n        <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formattedNum is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formattedNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// make chainable</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"export-to-outside-world\" style=\"position:relative;\"><a href=\"#export-to-outside-world\" aria-label=\"export to outside world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>export to outside world</h3>\n<p>最後我們只要加上 <code class=\"language-text\">global.FormatNum = global.F$ = FormatNum;</code></p>\n<p>就可以在外部使用 <code class=\"language-text\">FormatNum</code> 或是 <code class=\"language-text\">F$</code> 來呼叫我們的 lib 了！</p>\n<h3 id=\"小問題\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E5%95%8F%E9%A1%8C\" aria-label=\"小問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小問題</h3>\n<p>在實作範例時，本來想直接全用 ES6 寫（課程主要都是 ES5），但是在這邊的 function 都不能用 ES6 的 arrow function 取代，<code class=\"language-text\">this</code> 的作用域不同，會造成問題。\n<a href=\"https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇有提到</a>\narrow function 會 binding 到整個 module 的 scope，而非 object。不知道是否有什麼好方法可以解決，等我查到後再來補上。</p>","id":"c2f70c5f-5181-5121-ba39-71a2245daa09","fields":{"slug":"build-own-js-lib"},"frontmatter":{"date":"2017-04-01T15:21:37.000Z","title":"[筆記] JavaScript: Understanding the Weird Parts --- Build your own lib/framework","tags":["javascript","note"],"type":"tech","slug":"build-own-js-lib"},"timeToRead":4},{"excerpt":"好歌分享：Boney M. - Sunny","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/HddPrwMUGVc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boney M. - Sunny</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/HddPrwMUGVc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>上個月我們介紹過 Web Component，大致上把 Web Component 的相關知識都介紹一輪了，也提供了一些範例，但是並沒有製作出一個完整可用的元件，\n因此今天就好好的來實做一個簡易又實用的 Web Component（對我來說很實用啦...），並且將他發佈到 <a href=\"https://www.webcomponents.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webcomponent.org</a> 上面。\n最後也會說明一下我嘗試將我製作的 webcomponent 與 react 整合的心得。</p>\n<p>開始前還是先給大家看一下看完這篇文章後可以達到的成果，發佈到 Webcomponent.org 並有 inline demo：</p>\n<p><img src=\"/image/webcomponent-published.png\" alt=\"Fianl\" title=\"Final Result\"></p>\n<p><a href=\"https://www.webcomponents.org/element/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">format-num webcomponent</a>\n<a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a></p>\n<h2 id=\"idea\" style=\"position:relative;\"><a href=\"#idea\" aria-label=\"idea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Idea</h2>\n<p>在一些活動頁面或是互動性較高的網站中，顯示參與人數是很常見的功能，而有些時候我們並不需要很確切的數目，反倒是希望能夠約分成以 K（千） 或 M（百萬） 為單位，\n這時通常我會寫個類似下面這樣的小函式來作轉換，並在每個需要的 React Component 中去 require 這個函式使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">></span> <span class=\"token number\">999</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'k'</span> <span class=\"token operator\">:</span> num\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但就只是個很簡單的函示，卻每個需要的 Component 都要 require 一次，久了就會覺得怎麼 HTML 5 不出一個 tag 是可以幫我把數字直接做 format 的呢？\n這樣我就只要用對 Tag，就會有我要的結果了，也不用特別去寫個小 function。</p>\n<p>想到這就覺得似乎是個好機會來練習一下 Web Comopnent 的實作，而且依照 React 的<a href=\"https://facebook.github.io/react/docs/web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方說法</a> Web Component 跟 React 是可以相互在對方的環境下使用的！\n那還等什麼呢！</p>\n<h2 id=\"那就來實作吧\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%B0%B1%E4%BE%86%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"那就來實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那就來實作吧</h2>\n<p>根據上一次的學習 <a href=\"http://blog.techbridge.cc/2017/01/06/web-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2017，讓我們再來看看 Web Components 吧！</a>，\n很快的就能建立好基本的架構：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlformatnum.html\"><pre class=\"language-htmlformatnum.html\"><code class=\"language-htmlformatnum.html\">&lt;!-- template --&gt;\n&lt;template id=&quot;format-num-template&quot;&gt;\n  &lt;style&gt;\n    :host {\n      position: relative;\n    }\n  &lt;/style&gt;\n  &lt;span class=&quot;wrapper&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/span&gt;\n&lt;/template&gt;\n\n&lt;!-- custom element --&gt;\n&lt;script&gt;\nclass formatNum extends HTMLElement {\n    constructor() {\n      super();\n      let shadowRoot = this.attachShadow({mode: &#39;open&#39;});\n      const t = document.querySelector(&#39;#format-num-template&#39;);\n      const instance = t.content.cloneNode(true);\n      shadowRoot.appendChild(instance);\n      this.shadowDOM = shadowRoot;\n    }\n  }\n  customElements.define(&#39;format-num&#39;, formatNum);\n&lt;/script&gt;</code></pre></div>\n<p>接著我開始構想這個 tag 需要有哪些 attribute 可以設置，最基本我會需要能指定小數點後的位數，並且能指定轉換單位的型態，因為有時候可能會需要二進位的轉換，也就是以 1024 為單位，而有時需要計算人數時，則是以 K, M, B 來顯示。</p>\n<p>因此會需要設置兩個 attribute，<code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得要設置 <code class=\"language-text\">observedAttributes</code>，這樣使用者改變 tag 的 <code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code> 時，我們才可以有對應動作，也就是重新 format 一次數字。</p>\n<p>接著加入下列兩個關鍵 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們在 <code class=\"language-text\">observedAttributes</code> 中列舉的 attribute 只要有所變動都會觸發 <code class=\"language-text\">attributeChangedCallback</code>，並且執行 <code class=\"language-text\">formatNum()</code>，\n而 <code class=\"language-text\">formatNum()</code> 就會從 shadowDOM 中抓出數字，並且從 attribute 中抓出小數點位數以及是哪種單位，經過 <code class=\"language-text\">format()</code> 的轉換後再將資料塞回 shadowDOM 中。\n（ <code class=\"language-text\">format()</code> 就是類似最上方的數字單位轉換函示，不是重點就不列出，有興趣可以到我的 <a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git repo</a> 連結去看）</p>\n<p>寫到這邊看起來就大功告成了，嗯，我也這麼覺得。</p>\n<p>但是事情就是沒有憨人想得這麼簡單。</p>\n<p>當我在 html 裡面加上我新增的 element <code class=\"language-text\">&lt;format-num digits='1'>1234&lt;/format-num></code> 時，竟然毫無反應，就只是個 1234，而不是 1.2k。</p>\n<p>原因是我以為在執行 <code class=\"language-text\">formatNum()</code> 的時候，可以從 <code class=\"language-text\">this.shadowDOM.querySelector('slot').textContent</code> 裡面取得 slot 內的值的，\n但似乎無法直接這樣做，就算能透過 shadowDOM 存取，當我們想要將 format 過的數字塞回 tag 內的時候，由於原先的 1234 屬於 light DOM，我們需要透過 <code class=\"language-text\">document.querySelect('format-num').innerHML</code> 的方式去改值，這樣變成由外部的 context（document) 來更改 light DOM，似乎有點不符 web component 的精神，應該要讓一切操作保持在內部才對。</p>\n<p>因此換個方式，我們不讓使用者將值寫在 slot 中，而是透過 attribute 來設置，而我們再將 parse 過的結果利用 shadowDOM 設置到 slot 中，這樣就能順利顯示了！</p>\n<p>修改程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 增加 num attribute</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 修改 formatNum()，從 attribute 中拿 num 的值，並透過 shadowDOM 塞進 slot 顯示</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>digits <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>成果：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/xezujo/embed?html,js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.5\"></script></p>\n<h2 id=\"讓別人-import-你的-webcomponent\" style=\"position:relative;\"><a href=\"#%E8%AE%93%E5%88%A5%E4%BA%BA-import-%E4%BD%A0%E7%9A%84-webcomponent\" aria-label=\"讓別人 import 你的 webcomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>讓別人 Import 你的 Webcomponent</h2>\n<p>本來想說做完了，準備要發佈的時候，發現需要準備 Demo page，\n雖然我都直接在 jsbin 與 codepen 上方寫，還沒有真正在別的 page <code class=\"language-text\">Import</code> 過 webcomponent，但想說應該就很簡單啊，把我的 code 都放在一個 html 內，\n然後透過 <code class=\"language-text\">&lt;link rel=\"import\" href=\"../src/formatNum.html\"></code> 不就得了？</p>\n<p>正當我這麼想的時候，卻發現我的 demo page 一直無法正常顯示，出現 \"Uncaught TypeError: Cannot read property 'content' of null\" 的 error，\n是在 custom element constructor 的地方：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#format-num-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>竟然找不到我的 template ?!</p>\n<p>仔細研究了好一陣子後才發現到這篇文章 <a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">introduction to html imports</a></p>\n<p>裡面有提到 html import 時的行為差異，舉例來說：</p>\n<p><em>index.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatNum.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> // 1.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Import Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>     // 4.</code></pre></div>\n<p><em>formatNum.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 2.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 3.</code></pre></div>\n<p>以上面的例子來說明，index.html 載入 formatNum.html，其 script 的執行順序如上面標記，\n但 <span style=\"color:red\">index.html 與 formatNum.html 中的 document 物件卻都是指向 index.html。</span></p>\n<p>因此當我的 demo page 在執行存在於 formatNum.html 內的 script，也就是 constructor 時，document 就找不到存在於 formatNum.html 內的 template 了。</p>\n<p>所以該怎麼解決呢？</p>\n<p>為了要保存住 formatNum.html 自己的 document object，我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">documentCurrentScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>_currentScript <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mainDoc <span class=\"token operator\">=</span> documentCurrentScript<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">;</span></code></pre></div>\n<p>currentScript 是只有在有支援 HTML import 的瀏覽器中才有的屬性，若是透過 webcomponent.js 等 polyfill，則是用 _currentScript</p>\n<h2 id=\"打包發佈\" style=\"position:relative;\"><a href=\"#%E6%89%93%E5%8C%85%E7%99%BC%E4%BD%88\" aria-label=\"打包發佈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打包發佈</h2>\n<p>問題都解決以後當然就要發佈到 Webcomponent.org 上面去了</p>\n<p><img src=\"/image/webcomponentIdx.png\" alt=\"webcomponent.org\" title=\"webcomponent.org\"></p>\n<p>從網站上的步驟看來很簡單，只要你的 repository 滿足三個條件，並加上 badge 與 inline demo，就可以發佈了：</p>\n<img src=\"/image/publishWebcomponent.png\" alt=\"publish to webcomponent\" style=\"width: 500px;\"/>\n<p>三個條件：</p>\n<ol>\n<li>有 Open source license，只要是被 <a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Source Initative</a> 認可的都可以。</li>\n<li>Tagged release，這點很重要，他會依照你 repository 裡面的 tag 去抓檔案，如果你沒有設置的話，就算 repo 中有程式，也會發佈失敗，而且如果你有更新，也一定要有新版 Tag release，Webcomponent.org 這邊才會更新。我一開始因為有些設定沒做好，重新 push 後忘了 release tage，怎麼樣都是發佈失敗...</li>\n<li>README，這當然也是很重要，你總得要介紹一下內容。此外，如果你想要放 inline demo 的話，也是要設置在 README.md 當中。</li>\n</ol>\n<p>加上 badge：</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token url\">[<span class=\"token content\">![Published on webcomponents.org</span>][<span class=\"token variable\">webcomponents-image</span>]</span>][webcomponents-url]\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-image</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://img.shields.io/badge/webcomponents.org-published-blue.svg</span>\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-url</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://www.webcomponents.org/element/arvinh/format-num</span></code></pre></div>\n<p>Inline Demo：</p>\n<p>要製作 inline demo 很簡單，只要在你的 README.md 中加入：</p>\n<p><img src=\"/image/inlineDemoscript.png\" alt=\"Inline Demo\" title=\"Inline Demo\"></p>\n<p>你只需要在 <code class=\"language-text\">&lt;custom-element-demo></code> 中 import 你的 custom-element 即可，<code class=\"language-text\">html</code> block 內的就是你 demo 元件的地方了。</p>\n<p>以我的 README.md 來說，完成後會長這樣：</p>\n<p><img src=\"/image/final-readme.png\" alt=\"Final README\" title=\"IFinal README\"></p>\n<p>當你照著網站上所寫的，完成所有步驟後，可以到這邊去填寫 Repo 名稱並進行發佈。</p>\n<p><img src=\"/image/readyToPublish.png\" alt=\"Ready to publish\" title=\"Ready to publish\"></p>\n<p>然後你會發現發佈失敗，因為網站隱藏了一個步驟沒有寫到。</p>\n<p>他會要求你的 repo 中要含有 <code class=\"language-text\">bower.json</code>，但應該是沒有要你 register 到 bower 中，不過我有順手放上去就是了，\n所以也能透過 <code class=\"language-text\">bower install format-num</code> 來下載這個 webcomponent。</p>\n<p>總之，加上 bower.json 以後應該就能順利發佈了！</p>\n<p>此外，你也可以到 <a href=\"https://www.webcomponents.org/preview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.webcomponents.org/preview</a> 輸入你的 git repo url，就可以在發佈前先進行 preview，\n在這邊甚至能動態調整你的 inline demo！就由讀者自行玩玩吧！</p>\n<h2 id=\"work-with-react-but-failed\" style=\"position:relative;\"><a href=\"#work-with-react-but-failed\" aria-label=\"work with react but failed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Work with React but failed</h2>\n<p>製作這個 Web Component 的初衷是希望能夠透過它讓我輕鬆地放在 React 的 component 中當一般 tag 使用，因此我也嘗試了一下簡單的範例：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"ZeOLRP\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"web-component: <format-num> with React\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZeOLRP/\">web-component: <format-num> with React</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>但眼尖的讀者會發現，我在 html 內又再寫了一次 template...</p>\n<p>沒錯，因為再度遇到 document 存取不到 template 的 error，這次連使用 currentScript 都無法解決，我想是跟 Rect compile 的時間以及 Webcomponent script 載入執行的時間順序有關，導致存取不到正確的 docuemnt scope。</p>\n<p>當然這也只是我的猜測，若有讀者了解原因請不吝指教！</p>\n<p>在試著整合 React 的過程中也有發現，babel 在處理 extends HTMLElement 的元件上有些衝突，需要透過 <a href=\"https://github.com/github/babel-plugin-transform-custom-element-classes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-transform-custom-element-classes</a> 來解，不過沒有真正試過，畢竟我會希望 webcomponent 是獨立的，\n不需要跟 React 一起經過 babel 的 compile，而在支援 webcomponent 的 browser 上，理論上也不需要 babel 編譯 es6 的 code 才對...</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然最後還是沒能順利整合進 React 當中，不過原先預期輕鬆完成的小玩具竟然還是卡了不少關，也有學習到，不過總是因為時間有限沒辦法很完整的將查到的資料認真讀完，\n或許我的實作過程與觀念的理解有錯誤的地方，歡迎讀者留言指教，我會非常感激的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.webcomponents.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components org</a></li>\n<li><a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to html import</a></li>\n<li><a href=\"http://staltz.com/react-could-love-web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React could love web components</a></li>\n</ol>","id":"273fcb37-376d-5e10-844b-69ed092a4ef8","fields":{"slug":"webcomopnent-practice"},"frontmatter":{"date":"2017-03-04T13:34:49.000Z","title":"Web Component 實戰","tags":["web components","javascript"],"type":"tech","slug":"webcomopnent-practice"},"timeToRead":9},{"excerpt":"『我有個朋友曾經跟我說過，時間一直走，沒有盡頭，只有路口。』\n「所以我們到現在還要苦惱跨瀏覽器的問題...大家都走不同路口。」\n『...』","html":"<blockquote>\n<p>『我有個朋友曾經跟我說過，時間一直走，沒有盡頭，只有路口。』\n「所以我們到現在還要苦惱跨瀏覽器的問題...大家都走不同路口。」\n『...』</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>先前研究 Progressive Web App 的時候就有注意到 Web Components 這個東西，也看過公司前輩使用過，甚至在前陣子 <a href=\"https://devfest-taipei-3cbee.firebaseapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GDG DevFest Taipei 2016</a> 的官方網站內，不僅使用 PWA，也採用了 Web Components 的技術（當然應該是用 Google 的 Polymer）來搭建。但還是很少看人使用與談論，我自己也是從來沒有仔細研究過（汗..</p>\n<p>我稍微搜尋一下，大部分的介紹文章都是2013, 2014 年的，過了三年，Web Components 的 API 都從 v0 來到了 v1。除了瀏覽器的支援程度外，React 跟 Vue 等等的崛起相信也是主因之一，畢竟，React 寫起來這麼爽快，實在沒必要去專研一個支援度低，複雜度也不低的技術啊！</p>\n<p>等等，那我寫這篇要幹麻...</p>\n<p>欸不是，都已經 2017 年了，新的一年總要有些新的開始，剛剛也提到，API 版本從 v0 進化到 v1 了，加上 ES6 的支援越來越好，許多寫法都更漂亮了，是個好時機來認識一下這個強大的 web 標準！</p>\n<h2 id=\"為何需要-web-components-\" style=\"position:relative;\"><a href=\"#%E7%82%BA%E4%BD%95%E9%9C%80%E8%A6%81-web-components-\" aria-label=\"為何需要 web components  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為何需要 Web Components ?</h2>\n<p>不論是什麼樣的程式，模組化在開發上都是很重要的一個概念，前端工程也不例外，我們都會希望能夠將 Web 開發過程中的 JS, CSS, HTML 封裝起來，以便後續重複使用，而過程中就會出現一些缺點：</p>\n<ol>\n<li>js, css, html 三者的資源在最一般的網頁開發上基本上是分開管理，你如果想用別人的 library，可能還需要先載入對方需要的 JQuery，include 該套件需要的 css，最後才能在你的 HTML 內加入。</li>\n<li>Scope 問題：即便是使用 React，都有可能遭遇到自己實作的 component 因為別人設定的 CSS class name 衝突而導致 Style 變動的情況。</li>\n<li>相容性：各個 Framework 間的 components 基本上無法共用，當你的舊專案想移植到 React 上頭時，即便我們先不管 React 在狀態管理的機制，很多元件要能夠相容的話，也可能需要透過 webpack 等各種 hack 的方式才能成功。</li>\n</ol>\n<p>關於前兩點，透過 React, Webpack 與 <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modules</a> 都可以找到相對應的解法，而第三點相信透過許多 hack 也是可以解決。</p>\n<p>而 Web Components 則是希望透過規範，用更好更方便的方式，解決這些問題。</p>\n<p>Web Components 是 <a href=\"https://www.w3.org/standards/techs/components#w3c_all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 擬定的標準</a>\n由下列四大規範組成：</p>\n<ul>\n<li>HTML Templates</li>\n<li>Custom Elements</li>\n<li>Shadow DOM</li>\n<li>HTML imports</li>\n</ul>\n<p>其中除了 <code class=\"language-text\">HTML Templates</code> 外，皆尚處在 Drafts 階段。\n接下來會一一介紹。</p>\n<p>不過這邊要先提醒一下，雖然剛剛用 React 來舉例比較，但實際上 React 與 Web Comoponent 真正要解決的問題是不同的，React 主旨在於 state 與 view 的狀態管理方式，而 Web Components 主力於整體元件的封裝，包含 Scoped CSS 等等。React component 內甚至可以載入 Web Components，畢竟 Web Components 可以只是 Plain JS, HTML, CSS。</p>\n<h3 id=\"先來個-demo\" style=\"position:relative;\"><a href=\"#%E5%85%88%E4%BE%86%E5%80%8B-demo\" aria-label=\"先來個 demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先來個 Demo</h3>\n<p>在進入規範的介紹前，怕大家覺得我騙台錢，先給大家看一下一個最簡單的 Web Component 會長什麼樣子。有興趣的話再往下看！</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/sijerap/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>可以看到在 <code class=\"language-text\">&lt;body></code> 的最下方，有個 <code class=\"language-text\">&lt;gakki-div-template></code> 的 tag，這就是我 create 出來的一個簡單的 Web Components，tag 內的文字就會像 Meme 一樣顯示在圖片上方。而圖片以及標題文字與 CSS 都是封裝在裡頭，就算我在外面對一樣的 class name 設定不同 style，(即使是 !important）都不會影響到。</p>\n<p>整段 code 我只有載入一個 polyfill 的外部 js 檔案 <code class=\"language-text\">webcomponents.min.js</code>，但如果你是用 Chrome 53 以上版本，基本上不需要也能正常運作。</p>\n<p>另外，會寫 Vue.js 的讀者可能會覺得有點點眼熟，基本上 Vue.js 的寫法跟概念都跟 Web components 雷同，Vue.js 等於是自己寫了一套 Web Components，並且提供更好的瀏覽器支援，所以如果喜歡 Web Components 的朋友們，在標準真的被各家瀏覽器實作前，可以先用用 Vue.js！</p>\n<h2 id=\"html-template\" style=\"position:relative;\"><a href=\"#html-template\" aria-label=\"html template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Template</h2>\n<p>Template 的概念在許多 Web Framework 當中都有，像是 Django(python), EJS/Jade (Express/Node)，雖然用法皆有所不同，但概念都是共通的，而已經成為 HTML5 標準的 <code class=\"language-text\">&lt;template></code> 也不例外。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mytemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>great image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>以上述的 template 來說，我們在 html 裡面宣告一個 template，裡面包含一個 <code class=\"language-text\">&lt;img></code> 與 <code class=\"language-text\">&lt;div></code> 元件，在瀏覽器解析 HTML 文件時，template 的 DOM 物件並不會生效，裡頭包含的 Javascript 也不會執行，但是會產生一個 <code class=\"language-text\">cloneable</code> 的 DOM 物件，讓你在整個 web app 的生命週期都能使用。</p>\n<p>來看一個簡單的使用情境：</p>\n<p>假設我們要做一個簡單的 counter，計算 button 的點擊次數，然後每次都將次數新增到 button 下方的話，可以怎麼做？</p>\n<p>可能會用字串串接的方式：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/mumacu/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>但如果有了 template 的幫助，可以將 HTML 字串的部分與邏輯分開：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/yaxiyir/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>source: <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/template/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">html5rocks-html-template</a></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">useIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Use me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Update something in the template DOM.</span>\n    <span class=\"token keyword\">let</span> span <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Template used: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我們準備了一個 <code class=\"language-text\">template</code>，<code class=\"language-text\">id</code> 為 <code class=\"language-text\">counter-template</code>，在每次 button 被點選時，從 template 中取得目前的 <code class=\"language-text\">content</code>，將內容加一之後再 append 到 document 內。</p>\n<p>雖然這個例子看起來，使用 template 反倒還要寫比較多 code，但是如果你今天需要產生的 template 是很複雜的 HTML 結構時，<code class=\"language-text\">template</code> 絕對可以為你帶來不少幫助的。</p>\n<p>我們也可以直接複製 template 內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> copyedContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>copyedContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<h2 id=\"custom-elements\" style=\"position:relative;\"><a href=\"#custom-elements\" aria-label=\"custom elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Elements</h2>\n<p>Custom Elements API 是構成 Web Components 的基礎之一，有了它的幫助，我們可以自己用最單純的 JS/HTML/CSS 來創造新的 HTML tags，或是 extend 別人的 components，甚至是擴展原有現存的 HTML tags；而也因為可以自行定義 tag 的名稱，讓標籤能夠更加語意化。</p>\n<p>Chrome 在 version 33 時就有推出 v0 的 Custom Elements，而到了現在 version 55，已經採用 v1 的版本，雖然觀念是一樣的，但語法有許多差異，以下介紹皆為 v1 版本，並使用 ES6 的寫法。</p>\n<p>要新增一個自定義的 HTML tag 很簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GakkiTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">,</span> GakkiTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是可以用暱名函式的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>兩種方式都可以讓你產生一個 <code class=\"language-text\">&lt;gakki-div-template>&lt;/gakki-div-template></code> 的 tag。</p>\n<p>其中我們用到 ES6 的 class 語法，來繼承 <code class=\"language-text\">HTMLElement</code>，這樣做可以讓我們的 <code class=\"language-text\">GakkitTemplate</code> 擁有所有 DOM API，並且讓你自己新增 Method 到你創建的這個 element 的 DOM interface 中。</p>\n<p>拿最前面的 Demo 來舉例，宣告元素的地方我們可以修改成這樣：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/vuvoceq/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>變動有點多，沒關係我們慢慢解釋：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GakkiTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    \n  <span class=\"token keyword\">get</span> <span class=\"token function\">light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">light</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Reflect the value of the light property as an HTML attribute.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Can define constructor arguments if you wish.</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先是 get/set，這兩個 method 代表賦予 <code class=\"language-text\">light</code> 這個 property getter/setter 的功能，這個要做什麼呢？</p>\n<p>假設當別人使用我們的 custom-element 時，有可能他們會想要能透過給予 <code class=\"language-text\">light</code> 這個 property 來設定以下的 style：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">gakki-div-template[light]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當然如果他直接設定 <code class=\"language-text\">&lt;gakki-div-template light>&lt;/gakki-div-template></code> 就可以吃到 style，但多數時候我們會希望能用 JS 的方式來設置，像是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gakkiDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngakkiDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>light\n<span class=\"token comment\">// 此時會觸發 getter，return this.hasAttribute('light');</span>\n\ngakkiDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ligth <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 此時會觸發 setter，this.setAttribute('light', '');</span></code></pre></div>\n<p>此時我們的 custom-elements 就需要給予 getter/setter 的 method，並在其中設定 <code class=\"language-text\">this.setAttribute()</code> 的方式讓我們的 elements 吃得到該 property 的設定。（ Note: property 的名稱跟 get/set 的名稱要相同）</p>\n<p>再來是比較特別的兩個 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// Only called for the change attributes due to observedAttributes</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過定義 <code class=\"language-text\">static get observedAttributes()</code> 可以讓我們的 element 監聽該設定的 attributes 有沒有被 consumer 設置，如果有變動，會觸發 <code class=\"language-text\">attributeChangedCallback()</code> 來執行我們想要的動作。</p>\n<p>那當然也可以加入自定義的 method，像是這邊的 <code class=\"language-text\">addImg()</code>；也可以在 constructor 的時候加入 EventListener，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Setup a click listener on &lt;gakki-div-template> itself.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"custom-elements---life-cycle\" style=\"position:relative;\"><a href=\"#custom-elements---life-cycle\" aria-label=\"custom elements   life cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Elements - Life Cycle:</h3>\n<p>Custom Elements 有自己的生命週期，前述的 <code class=\"language-text\">attributeChangedCallback()</code> 也是其中之一：</p>\n<ul>\n<li>constructor：Custom Elements 建構式，通常會在這邊 create Shadow DOM。</li>\n<li>connectedCallback：當你插入元件到 DOM 時會被呼叫。</li>\n<li>disconnectedCallback：當你從 DOM 中移除元素時會被呼叫，可以在這邊 remove Event listener 之類的。</li>\n<li>attributeChangedCallback(attrName, oldVal, newVal)：監聽的屬性有變動時會被呼叫。</li>\n<li>adoptedCallback：整個 custom element 被人用 <code class=\"language-text\">document.adoptNode(el)</code> 呼叫時觸發。</li>\n</ul>\n<p>可以玩玩看上述範例，看看我做了什麼無聊的功能 (畢竟只是範例麻 XD)。</p>\n<p>除了 <code class=\"language-text\">HTMLElement</code> 外，你也可以繼承別人或是你自己的 Custom-Elements：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyDrawer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppDrawer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always call super() first in the ctor. This also calls the extended class' ctor.</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fancy-app-drawer'</span><span class=\"token punctuation\">,</span> FancyDrawer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是繼承 Native Element：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// See https://html.spec.whatwg.org/multipage/indices.html#element-interfaces</span>\n<span class=\"token comment\">// for the list of other DOM interfaces.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always call super() first in the ctor.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawRipple</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>offsetX<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>offsetY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Material design ripple animation.</span>\n  <span class=\"token function\">drawRipple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ripple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fancy-button'</span><span class=\"token punctuation\">,</span> FancyButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊要注意的是，定義繼承 Native element 的元件時，需要傳入第三個參數 {extendds: '{native element you extend}'}\n表明你要繼承的元素是什麼，因為不同的 HTML tags 可能共享相同的 DOM interface，像是 <code class=\"language-text\">&lt;q></code> 與 <code class=\"language-text\">&lt;blockquote></code> 都是 <code class=\"language-text\">HTMLQuoteElement</code>。</p>\n<p>而繼承 Native Element 的 Custom-Element 可以有另一種特殊使用方式（不過支援度更低 XD）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> This <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span> is a fancy button<span class=\"token punctuation\">.</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>button is<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-button\"</span> disabled<span class=\"token operator\">></span>Fancy button<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"shadow-dom\" style=\"position:relative;\"><a href=\"#shadow-dom\" aria-label=\"shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadow DOM</h2>\n<p>Shadow DOM 算是 Web Components 中的靈魂角色，主要就是設計來建構 Component-based 的 web app，它所帶來的好處有下列幾項：</p>\n<ul>\n<li>Isolated DOM：在 Shadow DOM 裡面的任何 nodes 都不會被外面的 <code class=\"language-text\">document.querySelector()</code> 給取得，不會被汙染也不會去污染別人。</li>\n<li>Scoped CSS：定義在 Shadow DOM 內的 CSS 其作用域就只在 Shadow DOM 當中，不會作用於 Shadow DOM 外的 elements，而其他 Page 的 style 也不會影響到 Shadow DOM 內的定義。</li>\n<li>Composition：可以透過 Shodow DOM 賦予你的 component 擁有 Declarative, markup-based 的 API 可操作。</li>\n<li>Productivity：既然有 Isolated DOM 跟 Scoped CSS，就可以將你的 web app 切割成多個 DOM object 組成，完成模組化的使命！</li>\n</ul>\n<h3 id=\"名詞介紹\" style=\"position:relative;\"><a href=\"#%E5%90%8D%E8%A9%9E%E4%BB%8B%E7%B4%B9\" aria-label=\"名詞介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>名詞介紹</h3>\n<p>Shadow DOM：跟一般的 DOM 差異在於其產生的方式，以及他與頁面其他物件的互動方式。</p>\n<p>shadow tree：一般來說你可以利用 <code class=\"language-text\">document.createElement()</code> 來創建 DOM，並 <code class=\"language-text\">appendChild()</code> 到其他 element 上，而 shadow dom 則是依附在某個 normal DOM 底下，產生一個 scoped subtree，稱作 <code class=\"language-text\">shadow tree</code>。</p>\n<p>shadow host：掛載 shadow tree 的元素即為該 Shadow DOM 的 <code class=\"language-text\">shadow host</code>。</p>\n<h3 id=\"create-shadow-dom\" style=\"position:relative;\"><a href=\"#create-shadow-dom\" aria-label=\"create shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Shadow DOM</h3>\n<p>其實 Shadow DOM 不一定要用在建構 Web components，要創建 Shadow DOM 只要用下列方式即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>#menu { ... }&lt;/style> &lt;!-- styles are scoped to fancy-menu! -->\n      &lt;div id=\"menu\">...&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Could also use appendChild().</span>\n\n<span class=\"token comment\">// header.shadowRoot === shadowRoot</span>\n<span class=\"token comment\">// shadowRoot.host === header</span></code></pre></div>\n<p>這樣一來，你就有一個 header 底下的 Shadow DOM 了，裡面定義的 #menu style，不會向內外影響。</p>\n<p>但並非所有 DOM 都可以掛載 Shadow DOM，有些事已經有自己的 Shadow DOM （像是 <code class=\"language-text\">&lt;textarea></code>, <code class=\"language-text\">&lt;input></code>），有些是沒什麼必要（像是 <code class=\"language-text\">&lt;img></code>）。</p>\n<h3 id=\"create-shadow-dom-for-custom-element\" style=\"position:relative;\"><a href=\"#create-shadow-dom-for-custom-element\" aria-label=\"create shadow dom for custom element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Shadow DOM for Custom Element</h3>\n<p>在 Web Components 中，Shadow DOM 都會搭配 Custom Element 出現，如果說 Custom Element 提供 Web Component 骨幹 (HTML, DOM interface)，Shadow DOM 就是提供血和肉 (JS, Scoped CSS)。</p>\n<p>一樣以我們剛剛的範例來看，在 Custom Element 中創建 Shadow DOM：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#gakki-div-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM <span class=\"token operator\">=</span> shadowRoot<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Setup a click listener on &lt;gakki-div-template> itself.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊有幾點要說明：</p>\n<ol>\n<li>利用 <code class=\"language-text\">this.attachShadow({mode: 'open'})</code> 來綁定 Shadow DOM 到目前的 Custom Element，其中的 <code class=\"language-text\">{mode: 'open'}</code> 是代表這是個 open mode 的 Shadow DOM，host 這個 Shadow DOM 的 Element (以這邊的例子就是我們的 Custom Element）可以透過 JS 取得 Shadow DOM 內部的 DOM 元件，反之，如果設置為 close，即無法取得，官方不建議我們設定為 close，詳情可以參考 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a></li>\n<li>透過 <code class=\"language-text\">const t = document.querySelector('#gakki-div-template');</code> 我們取出 template，並利用 <code class=\"language-text\">t.content.cloneNode()</code> 複製一份 template，接著將此 template appendChild 到我們的 shadow tree 中。</li>\n</ol>\n<p>透過這樣的方式，我們就擁有一個擁有 Scoped template 的 Custom Element，因為整個 Element 的內容都是透過 template 與 Shadow DOM 產生的，別人可以自由拿去使用，也不用擔心他們會污染到這個元件！</p>\n<h3 id=\"slot-element\" style=\"position:relative;\"><a href=\"#slot-element\" aria-label=\"slot element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slot element</h3>\n<p>在我們範例的 template 中有個奇妙的元素 <code class=\"language-text\">slot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gakki-div-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    ...\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Gakki Meme<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://static.ettoday.net/images/2083/d2083850.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>它的用途很簡單，就是一個 placeholders，讓元件的 consumer 可以安插自己的 DOM 進去，而你透過 slot 的位置來決定這些 user 的 DOM 該放在哪些位置。</p>\n<p>在範例中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我們將文字 '你好，我是森山'，放入 custom element，他就會被我們安插到 <code class=\"language-text\">&lt;slot>&lt;/slot></code> 的位置</p>\n<p>如果有兩個以上的元素要插入的話，就需要用 <code class=\"language-text\">name</code> 來綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>嗨..妳好>//&lt; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Gakki Meme<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://static.ettoday.net/images/2083/d2083850.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/jezepof/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>你們也可以打開 DevTool 來看一下 Shadow DOM 的元件展開會是長什麼樣子，這邊就不再贅述。</p>\n<h3 id=\"shadow-dom-styling\" style=\"position:relative;\"><a href=\"#shadow-dom-styling\" aria-label=\"shadow dom styling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadow DOM Styling</h3>\n<p>接下來介紹如何在 Shadow DOM 中設定 CSS。</p>\n<p>在 Shadow DOM 中的 CSS 其實跟一般使用上沒有太大差異，你所設定的 CSS selector 都是 local 的，也就是只能設定到 Shadow DOM 裡頭的 element，不會受外部影響，也不會影響到外部。</p>\n<p>比較需要說明的有三個部分：</p>\n<ol>\n<li><code class=\"language-text\">:host</code>：</li>\n</ol>\n<p>你可以用 <code class=\"language-text\">:host</code> 這個 selector 來設定你的 component 的 style，但要注意的是，<code class=\"language-text\">:host</code> 所設定的值，是可以被外部 component 的使用者蓋過去的。</p>\n<p>像範例中為了讓 slot 的字能絕對定位，我需要把 <code class=\"language-text\">&lt;gakki-div-template></code> 本身設定為 <code class=\"language-text\">relative</code></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:host</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">:host-context</code>：\n讓你根據 Component 的 Context 來設定 style，像是：</li>\n</ol>\n<p>當處於 darktheme class 下時，顏色要變成白色。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>darktheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fancy-tabs</span><span class=\"token punctuation\">></span></span>\n    ...\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fancy-tabs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">:host-context(.darktheme)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">::slotted</code>：\n最後則是透過 <code class=\"language-text\">::slotted</code>，來控制傳入的 slot 元件的 style。</li>\n</ol>\n<p>像範例中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n            <span class=\"token selector\">...\n            ::slotted(#me)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ...\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n        ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>me<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>嗨..妳好>//&lt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"event-handle-in-shadow-dom\" style=\"position:relative;\"><a href=\"#event-handle-in-shadow-dom\" aria-label=\"event handle in shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Handle in Shadow DOM</h3>\n<p>Shadow DOM 還有許多 Event 處理，包含 Slot 的 event 處理等等 issue 可以探討，這邊只簡單講個主要觀念。</p>\n<p>在 Shadow DOM 中對於事件處理，是透過在 Event Bubble 的過程中，來重新定位 event target 的位置，讓該事件像是從 Host 的元件觸發，並且會擋掉可能影響到外部頁面的事件處理。</p>\n<p>詳細可以看 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這邊</a> 與 <a href=\"http://www.jianshu.com/p/e8994b92bb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這邊</a></p>\n<h2 id=\"html-import\" style=\"position:relative;\"><a href=\"#html-import\" aria-label=\"html import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Import</h2>\n<p>Web Component 的最後一哩路，當我們製作好我們的 Component 後，當然會希望能很方便地給他人使用，HTML Import 就是要處理這樣的問題。</p>\n<p>他讓我們可以直接 link 一份 HTML 檔案，不管他是 template 也好，用 shadow dom 創建的 custom-element 也好，都可以直接 inlcude。</p>\n<p>使用方法很簡單，假設我們範例中的 HTML 叫做 <code class=\"language-text\">GakkiMeme.html</code>，別人想要 include 的話，只要在他的 index.html 中加入 <code class=\"language-text\">&lt;link rel=\"import\" href=\"GakkiMeme.html\"></code> 即可使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;head&gt;\n  &lt;link rel=&quot;import&quot; href=&quot;GakkiMeme.html&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;gakki-div-template&gt;\n    &lt;span slot=&#39;title&#39;&gt; 嗨嗨嗨 &lt;/span&gt;\n    &lt;div id=&quot;me&quot;&gt; 嘿嘿嘿 &lt;/div&gt;\n  &lt;/gakki-div-template&gt;\n&lt;/body&gt;</code></pre></div>\n<p>當然 Import 的部分還有很多可以玩，有興趣的可以到 <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML5rocks</a> 研究。</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Web Components 提供我們一種方式來建構 reusable components，能支援 Cross-browser (當然要等標準全通過，瀏覽器全支援，但相信那天會到來的！)；不需要任何 framework 支援；也不需要學特殊語法，就是 DOM/CSS/HTML/JS；可以跟現有 Framework 共存使用。</p>\n<p>相信在未來我們會有更美好的 Web 可以使用！</p>\n<p>最後附上 Browser Support 的 Information 給各位：</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">custom-elementv1</a>\n<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shadow-dom</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/w3c/webcomponents\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Web Components</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom Elements v1</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shadow DOM v1</a></li>\n<li><a href=\"http://www.jianshu.com/p/e8994b92bb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components整理及分享</a></li>\n<li><a href=\"https://blog.hinablue.me/web-components-first-look/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components 初探</a></li>\n<li><a href=\"https://github.com/basic-web-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">basic-web-components</a></li>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML Imports</a></li>\n</ol>","id":"d522f028-f47b-52a4-be20-f67a94691feb","fields":{"slug":"web-components"},"frontmatter":{"date":"2017-01-06T13:00:24.000Z","title":"2017，讓我們再來看看 Web Components 吧！","tags":["web components","javascript"],"type":"tech","slug":"web-Components"},"timeToRead":17},{"excerpt":"『欸你看！Pebble watch 可以自己做錶面耶，超酷！』\n「Apple watch 也可以啊」\n『你這樣我怎麼教育下一代！』\n「...」","html":"<blockquote>\n<p>『欸你看！Pebble watch 可以自己做錶面耶，超酷！』\n「Apple watch 也可以啊」\n『你這樣我怎麼教育下一代！』\n「...」</p>\n</blockquote>\n<!-- more -->\n<p>是的，我「最近」買了一隻 Pebble 2，大概是半年多前的事情...當初看上他便宜信譽好，又可以用 javascript 撰寫自己的 watch face，所以就刷下去了，算是第一次在 kickstarter 上面贊助產品，等待的時間久到我都快忘了....才怪，我大概每個月都會想起來一次 XD</p>\n<p>總之，經過幾個月漫長等待，以及網站上跟我一樣想趕快拿到產品的 baker 們不斷地詢問下，終於還是送到我手上了！</p>\n<p>Tada ~!\n<img alt=\"Pebble 2\" style=\"width: 500px; height: 500px; object-fit: cover\" src=\"/image/pebble.jpg\" /></p>\n<p>...不對這篇不是開箱文</p>\n<p>我今天要來簡介一下如何用 Pebble 提供的 Rocky.js Javascript API 來開發 Pebble watchface，讓你可以安裝到自己的手錶上！</p>\n<h1 id=\"build-your-very-first-pebble-watchface\" style=\"position:relative;\"><a href=\"#build-your-very-first-pebble-watchface\" aria-label=\"build your very first pebble watchface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build your very first pebble watchface</h1>\n<p><a href=\"https://developer.pebble.com/tutorials/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pebble 的官網</a>內容蠻豐富的，從簡單的教學、API Doc 到使用者論壇與 blog 都有。</p>\n<img alt=\"Pebble developer site\" style=\"object-fit: cover\" src=\"/image/pebble-officialsite.png\" />\n<p>Pebble 上頭的 app 基本上都是以 C 語言撰寫為主，而距離我上次寫 C 大約是臉書還沒在台灣出現的時代...不過沒關係，Pebble 沒有捨棄 Javascript 這個強大的語言，我們還能利用 Javascript API 與 官方出的 Rocky.js 來撰寫 Pebble watchface！\n(只是目前不支援 ES6)</p>\n<p>然而，工欲善其事，必先利其器，開發 iOS 我們會想到 Xcode，開發 Android 我們有 Andriod studio，開發 Pebble 呢？</p>\n<h2 id=\"ide---cloudpebble\" style=\"position:relative;\"><a href=\"#ide---cloudpebble\" aria-label=\"ide   cloudpebble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IDE - <a href=\"https://cloudpebble.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloudpebble</a></h2>\n<img alt=\"Pebble Cloud IDE\" style=\"object-fit: cover\" src=\"/image/cloudpebble-index.png\" />\n<p>雖然你也可以透過 command line 去編譯 Pebble 的程式，但我還是要推薦跟介紹他們的雲端 IDE，因為整合得蠻好的，只要以 Pebble 的帳號登入（一開始設定你的手錶時就會要求你註冊），就可以無痛連接你的手機與 Pebble watch。即便開發體驗上面還有許多可以加強的部分，但是已經是非常方便的工具了，而且還有中文！</p>\n<h2 id=\"start-a-new-project\" style=\"position:relative;\"><a href=\"#start-a-new-project\" aria-label=\"start a new project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start a new project</h2>\n<img alt=\"login\" style=\"object-fit: cover\" src=\"/image/cloudpebble-buildproject.png\" />\n<p>當你登入後可以看到很簡單的介面，列出目前擁有的專案，按下建立按鈕來新增。</p>\n<img alt=\"Create New Project\" style=\"object-fit: cover\" src=\"/image/cloudpebble-create.png\" />\n<p>這邊你會看到好幾種選項，<code class=\"language-text\">Pebble C SDK</code> 應該可以算是最主要的開發工具，可以寫 watchface 也可以寫 app，而 <code class=\"language-text\">Pebble.js</code> 似乎是較為舊版的 javascript SDK，我們今天要介紹的 <code class=\"language-text\">Rocky.js</code>也還在持續更新中。</p>\n<p>選了 <code class=\"language-text\">Rocky.js</code> 後，就可以開始進行我們今天的開發了！</p>\n<p>先給大家看一下開發完成後，從 IDE 上的模擬器看起來會長什麼樣子。</p>\n<img alt=\"Final result\" style=\"object-fit: cover\" src=\"/image/cloudpebble-result.png\" />\n<p>左邊大大秀出時間，右上角顯示星期幾，右下角則是股票資訊。</p>\n<h2 id=\"something-you-should-know-before-you-start-to-code\" style=\"position:relative;\"><a href=\"#something-you-should-know-before-you-start-to-code\" aria-label=\"something you should know before you start to code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Something you should know before you start to code</h2>\n<p>Pebble watchface 的 js 開發大致上分為兩塊：Rocky JS 與 PebbleKit JS</p>\n<p>Rocky JS 負責<strong>手錶端</strong>的程式，包含 UI 繪製以及與手機端的溝通。</p>\n<p>PebbleKit JS 我們先前並沒有提到，他是運行在<strong>手機端</strong>的程式，會安裝在你手機的 Pebble app 內，主要負責與其他 Web Service 溝通，並將訊息傳給手錶作畫面上的顯示與更新。</p>\n<p>基本上兩者都是 Javascript，只是多了 Pebble 提供的 API。</p>\n<h2 id=\"coding-time\" style=\"position:relative;\"><a href=\"#coding-time\" aria-label=\"coding time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coding Time!</h2>\n<p>IDE 左邊的列表中有許多選項，我們會先需要新增一個 index.js，按下 <code class=\"language-text\">ADD NEW</code> button</p>\n<img alt=\"Add new resource\" style=\"object-fit: cover\" src=\"/image/cloudpebble-addnew.png\" />\n<p>有三種類型的 javascript 檔案可以選擇，我們先開發 Rocky.js，繪製基本的時間出來。</p>\n<p>先 include <code class=\"language-text\">rocky.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> rocky <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rocky'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>RockyJS 的 API 很簡單，主要是一種 Event-based 的感覺，我們可以透過註冊一個 <code class=\"language-text\">minutechange</code> 的 event 來監聽 <strong>分鐘</strong> 的變化。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minutechange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Request the screen to be redrawn on next pass</span>\n  rocky<span class=\"token punctuation\">.</span><span class=\"token function\">requestDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>每分鐘我們都呼叫一次 <code class=\"language-text\">rocky.requestDraw()</code>，透過這個 function 我們可以發出一個 <code class=\"language-text\">Draw</code> 的 event，而該 event 會帶著一個包含 <code class=\"language-text\">CanvasRenderingContext2D</code> 物件的參數，根據這個參數我們可以有許多 Canvas 相關的 API 可以使用，來繪製我們想要的畫面。</p>\n<p>既然是觸發事件，理所當然就是註冊一個 Listener 來處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Clear the screen</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Determine the width and height of the display</span>\n  <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>unobstructedWidth<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>unobstructedHeight<span class=\"token punctuation\">;</span>\n\n  drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawDigital</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'49px Roboto-subset'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawDay</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span>  w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Draw Stock on the bottom of the screen, if available</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stockData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawStock</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> stockData<span class=\"token punctuation\">,</span> w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在這段 Listener 中，我做了幾件事情：</p>\n<ol>\n<li>從 <code class=\"language-text\">event</code> 中將 <code class=\"language-text\">context</code> 取出來，也就是先前提到的 <code class=\"language-text\">CanvasRenderingContext2D</code>，並且先透過 <code class=\"language-text\">clearRect()</code> 將螢幕清乾淨，因為每次被呼叫到的時候，都代表我們要重新繪製畫面。</li>\n<li>將螢幕畫布的寬高暫存起來，用於之後繪製其他圖形時計算各自要擺放的座標位置。</li>\n<li>呼叫 <code class=\"language-text\">drawAPI</code> 來繪製需要的內容。<code class=\"language-text\">drawAPI</code> 是我另外寫的一個 js file，將繪圖邏輯與主要 API 做個分離。在這邊我們一樣能夠透過 <code class=\"language-text\">require()</code>將我們自己寫的 js 檔案匯入。</li>\n<li>最後是當有股票資料存在的時候，繪製股票資訊，這部分稍後講到 <code class=\"language-text\">PebbleKit.js</code> 的時候會再提到。</li>\n</ol>\n<p>主要的邏輯就這麼簡單，註冊 listener，分發 <code class=\"language-text\">requestDraw</code> 事件，然後重繪畫面！</p>\n<h3 id=\"how-to-draw\" style=\"position:relative;\"><a href=\"#how-to-draw\" aria-label=\"how to draw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to draw?</h3>\n<p>接著就是要發揮你們藝術家天份的時刻了，利用 <code class=\"language-text\">CanvasRenderingContext2D</code> 提供的介面，我們可以輕易地畫出長方體、圓形、路徑與文字，並且設定顏色與字型大小等等，詳細的 API 參數可以直接參考官網，因為能用的 API 其實不多，所以看起來也很清楚。</p>\n<p><a href=\"https://developer.pebble.com/docs/rockyjs/CanvasRenderingContext2D/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CanvasRenderingContext2D API Doc</a></p>\n<p>這邊講解我用到的部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawDigital</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'49px Roboto-subset'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> <code class=\"language-text\">drawDigital</code> 是用來繪製畫面上的數位時間，也就是螢幕左邊大大的數字，參數很簡單，就是 context object、x, y 的座標位置、顏色與字型大小。</p>\n<p> 這邊有兩點要注意，座標位置跟一般 web 上的標準一樣，螢幕左上角為 (0, 0)，計算每個圖形的位置會是初期開發簡單的 watchface 中較為麻煩的地方，因為畫面很小，你要好好調整才行。</p>\n<p>另外一個要小心的是，雖然你看這邊的字型大小寫法，似乎跟一般 CSS 的格式一樣，但你可不能自己隨意亂加大小或是 font-family，需要使用它們定義好的才能生效。\n<a href=\"https://developer.pebble.com/docs/rockyjs/CanvasRenderingContext2D/#font\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">可用字型列表-link</a></p>\n<p>實際的 drawDigital function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> hourAndMin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hourText <span class=\"token operator\">=</span> hourAndMin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> minutesText <span class=\"token operator\">=</span> hourAndMin<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>textAlign <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> font<span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>hourText<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>minutesText<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">+</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">ctx</code> 可以設定 fillStyle、textAlign、font style，並使用 <code class=\"language-text\">fillText()</code> 來將文字繪製在畫面，參數分別是：文字內容, x 座標, y 座標, 最大寬度(option)，若你有設定<strong>最大寬度</strong>，當你的文字大於這寬度時，會自動使用較小的字體。</p>\n<p>繪製星期的部分其實與時間大同小異，直接看程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> day <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"SUN\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"MON\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"TUE\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"WED\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"THU\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"FRI\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"SAT\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'lightgray'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>textAlign <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'24px bold Gothic'</span><span class=\"token punctuation\">;</span>\n\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>當你寫完這些後，你就可以先試著執行看看。</p>\n<p>點擊右邊選項中的播放鍵，就會自動編譯並啟動模擬器。若是沒有問題，你會看到模擬器開啟，並出現一條 progress bar 顯示正在安裝，第一次會比較久一點。</p>\n<p>成功後就會出現畫面，並有個彈跳視窗出來，這邊可能是翻譯問題，所謂的 <strong>解除</strong> 其實就只是取消這個彈跳視窗罷了，我一開始還不太敢按，怕他把我的 App 解除安裝 XD</p>\n<img alt=\"run project\" style=\"width: 800px;\" src=\"/image/cloudpebble-run.gif\">\n<h2 id=\"fetch-stock-data\" style=\"position:relative;\"><a href=\"#fetch-stock-data\" aria-label=\"fetch stock data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch Stock Data</h2>\n<p>既然是智慧手錶，當然不能只有單純的顯示時間，接下來說明怎麼樣搭配 <code class=\"language-text\">PebbleKitJS</code> 透過你的手機來獲取 Web 資料，並傳送給手機顯示。</p>\n<p>PebbleKit JS 是運行在你手機端的 Pebble app 裡面，一樣也是 Event-based 的方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Pebble<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因為是運行在 Pebble 自己的環境下，所以我們這邊不需要 require 什麼 library，\n直接註冊 <code class=\"language-text\">message</code> event 的 listener 即可。</p>\n<p>手錶端的 RockyJS 可以透過 <code class=\"language-text\">postMessage()</code> 傳送訊息給 PebbleKit，當 PebbleKit 的 listener 監聽到傳送過來的 <code class=\"language-text\">message</code> 事件後，就可以採取相對應的措施，像是發送 Ajax 抓取 web 資料，並同樣透過 <code class=\"language-text\">postMessage()</code> 將資料傳回給手錶端的 RockyJS。</p>\n<p>完整的手機端 PebbleKit JS </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Get the message that was passed</span>\n<span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// we random pick one of these stock symbol to show</span>\n<span class=\"token keyword\">var</span> stockSymbols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'YHOO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GOOGL'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AAPL'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> randStockSymbol <span class=\"token operator\">=</span> stockSymbols<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> stockSymbols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// use yql to fetch data (don't use in productin or sell)</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://query.yahooapis.com/v1/public/yql'</span> <span class=\"token operator\">+</span> \n    <span class=\"token string\">'?q=select * from yahoo.finance.quotes where symbol in '</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">'(\"'</span><span class=\"token operator\">+</span>randStockSymbol<span class=\"token operator\">+</span><span class=\"token string\">'\")&amp;format=json&amp;env=store://datatables.org/alltableswithkeys&amp;callback='</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">respText</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> stockData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>respText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Pebble<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'stockData'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'symbol'</span><span class=\"token operator\">:</span> stockData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Ask'</span><span class=\"token operator\">:</span> stockData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">.</span>Ask<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Bid'</span><span class=\"token operator\">:</span> stockData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">.</span>Bid\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>註1: 因為不能用 es6 來寫，所以也沒有 <code class=\"language-text\">fetch</code> 可以用，所以這邊的 request 是自己寫的 XMLHttpRequest function。\n註2: 記得 encodeURI 一下 url，否則有可能會出現 invalid url error</p>\n<p>接著我們回到手錶端的 RockyJS，在原本的程式下加入這兩段：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hourchange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Send a message to fetch the weather information (on startup and every hour)</span>\n  rocky<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'fetch'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nrocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Receive a message from the mobile device (pkjs)</span>\n  <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>stockData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Save the stockData data</span>\n    stockData <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>stockData<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Request a redraw so we see the information</span>\n    rocky<span class=\"token punctuation\">.</span><span class=\"token function\">requestDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">hourchange</code> 事件發生時，我們 <code class=\"language-text\">postMessage()</code> 告訴 PebbleKitJS 需要去抓取新資料，並且註冊 <code class=\"language-text\">message</code> 的 event listener，當資料傳送回來時，我們重繪製畫面。\n（這邊直接把資料存在全域變數，方便讀取）</p>\n<h2 id=\"final-result\" style=\"position:relative;\"><a href=\"#final-result\" aria-label=\"final result permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final Result!</h2>\n<p>Tada~ 股票資訊就出現了！</p>\n<img alt=\"run project\" style=\"width: 800px;\" src=\"/image/cloudpebble-run-stock.gif\">\n<p>當然不能一直在模擬器上跑，我們要安裝到手錶上！</p>\n<img alt=\"install to watch\" style=\"width: 800px;\" src=\"/image/cloudpebble-build-phone.gif\">\n<p>點選左邊選項列表的 <strong>編製</strong>，選擇 <strong>PHONE</strong>，並安裝執行即可！</p>\n<p>記得打開手機上 Pebble app 內的 developer mode</p>\n<img alt=\"open developer mode\" style=\"width: 300px;\" src=\"/image/cloudpebble-developmode.jpg\" />\n<p>編譯成功的話就可以在手錶上看到畫面，若失敗有問題，可以檢視編譯結果，從 log 中去找問題，像我一開始就忘記 encodeURI，導致 ajax 出問題。</p>\n<img alt=\"check build result\" style=\"width: 800px;\" src=\"/image/cloudpebble-log.png\" />\n<p>上圖內的 PBW，是可以讓你下載下來，之後要 publish 到 store 的時候所使用的，至於怎麼 publish？\n這邊再講下去篇幅有點長，會另外寫一篇來介紹。</p>\n<p>手錶上看起來長這樣~</p>\n<img alt=\"watch\" style=\"width: 300px;\" src=\"/image/cloudpebble-watch.jpg\" />\n<p>本文中介紹的程式碼在此：\n<a href=\"https://github.com/ArvinH/clean-stock-pebble-wf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/clean-stock-pebble-wf</a></p>\n<p>若想看官網上指針時鐘與天氣的範例，我也有個修改版本的：\n<a href=\"https://github.com/ArvinH/pebble-watchface-starterkit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/pebble-watchface-starterkit</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.pebble.com/tutorials/js-watchface-tutorial/part1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pebble build with JS</a></li>\n<li><a href=\"https://forums.pebble.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pebble forum</a></li>\n</ol>","id":"14b803d7-e940-5899-8965-0d37eafbfc0a","fields":{"slug":"pebble-rocky-watchface"},"frontmatter":{"date":"2016-11-19T13:36:01.000Z","title":"一小時內製作自己的 Pebble 錶面","tags":["pebble","javascript"],"type":"tech","slug":"pebble-rocky-watchface"},"timeToRead":9},{"excerpt":"時間總是不夠用？聽過番茄工作法嗎？\n專注力總是不夠？聽過番茄工作法嗎？\n感冒白飯吃不下？聽過蕃茄蛋炒飯嗎？","html":"<blockquote>\n<p>時間總是不夠用？聽過番茄工作法嗎？\n專注力總是不夠？聽過番茄工作法嗎？\n感冒白飯吃不下？聽過蕃茄蛋炒飯嗎？</p>\n</blockquote>\n<!-- more -->\n<p><strong>The Pomodoro Technique</strong> 是一個簡易又廣為人知的時間管理方法，其主軸在於將工作時段切割成多個<strong>蕃茄時間</strong>，每個蕃茄時間包含：</p>\n<ol>\n<li>25 分鐘的執行時間</li>\n<li>5 分鐘的休息時間</li>\n</ol>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">蕃茄工作法 wiki</a>\n詳細內容不管是網路上，或是書籍都有許多描述，有興趣深入了解的可以去看看。</p>\n<p>今天重點不在番茄工作法。</p>\n<p>重點在，番茄工作法中不可或缺的工具 - 計時器！</p>\n<p>我用過幾款 Chrome extension 的計時器，但剩餘時間都是用數字來顯示，而我想要的是用圖像的方式來呈現，這樣我的大腦可以省略掉辨識數字的時間（是會花你多少時間... XD），也因為沒有了數字，不知道確切剩餘時間，不會看剩一分鐘就因為緊張而分心（至少對我而言啦~）。</p>\n<p>所謂圖像的呈現方式就像下面的成品，輸入完你想要的倒數時間後，按下enter，就會看到倒數的區塊以及倒數秒數。</p>\n<p data-height=\"322\" data-theme-id=\"dark\" data-slug-hash=\"RGJOov\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/RGJOov/\">Timer-d3-v4</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n[Inspired by @ericbullington](https://www.ericbullington.com/blog/2012/10/27/d3-oclock/)\n<p>一開始本來想說看能不能直接用 html、css 把圖畫出來，但要計算弧度畫出扇型感覺有點麻煩，好在我們有 D3.js 這個方便的工具！除了拿來資料視覺化外，d3.js 提供的許多 lib 都很適合拿來單純作畫。並且，實作計時器的難度並不高，非常適合初學者來學習 D3.js，又比畫出長條圖等來得有成就感！</p>\n<p>因此，今天就來說明如何利用 D3.js 來繪製 Time timer！並在最後解釋一點 D3 data join 的概念。</p>\n<h2 id=\"make-a-plan--prepare-your-data\" style=\"position:relative;\"><a href=\"#make-a-plan--prepare-your-data\" aria-label=\"make a plan  prepare your data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Make a plan &#x26; Prepare your data</h2>\n<p>在打開你的編輯器開始 coding 之前，讓我們先停下來想一下，繪製計時器你大概會需要哪些東西。</p>\n<ol>\n<li>你需要一個圓圈代表時鐘。</li>\n<li>你需要一個秒針，讓你知道時間不斷在跑。</li>\n<li>你需要一個會隨著時間流逝而縮小面積的扇行區塊。</li>\n<li>你需要一個輸入筐，讓使用者輸入想要倒數的時間。</li>\n</ol>\n<p>先不管圓圈、秒針與扇形該怎麼畫，D3.js 比較不一樣的地方在於它是 data-driven，所以我們需要先把資料給準備好，而繪製計時器所需要的資料就是<strong>時間</strong>。</p>\n<p>在我們的 case 裡面，<strong>時間</strong>是使用者輸入的數字，我們要將其 parse 為適合的資料格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">minutes<span class=\"token punctuation\">,</span> sec</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"unit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"numeric\"</span><span class=\"token operator\">:</span> sec\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"unit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"numeric\"</span><span class=\"token operator\">:</span> minutes\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此外，一般繪製 D3.js 都是一次性的，也就是讀入資料後，根據該次讀入的資料繪製圖形。我們需要的則是類似 streaming data 的行為，不間斷的傳入目前時間，讓 D3 幫我們繪製出對應的圖形。作法有很多種，這邊採用最簡單的做法：<code class=\"language-text\">setInterval</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startTimer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Main program</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>valueAsNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> timeAsSec <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>valueAsNumber <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      data <span class=\"token operator\">=</span> <span class=\"token function\">timeData</span><span class=\"token punctuation\">(</span>timeAsSec <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sec <span class=\"token operator\">=</span> sec <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      timeAsSec <span class=\"token operator\">=</span> timeAsSec <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// render() 為繪製 d3 的函式</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeAsSec <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> timeInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimeInput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> startTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">startTimer</code> 是綁定在 input field 的 EventListener，我們根據使用者輸入的數字乘上 60 轉換為需要執行的總秒數(<code class=\"language-text\">timeAsSec</code>)。目的是為了能夠適時（倒數結束）的跳出 <code class=\"language-text\">setInterval()</code>。</p>\n<p>在 <code class=\"language-text\">setInterval()</code> 中，我們每秒執行一次，遞減 <code class=\"language-text\">timeAsSec</code>，同時遞增 <code class=\"language-text\">sec</code> 用以讓秒針轉動。</p>\n<p>將 <code class=\"language-text\">timeAsSec</code> 與 <code class=\"language-text\">sec</code> 傳入剛剛的 <code class=\"language-text\">timeData()</code> 產生 D3 需要的資料格式。這邊我們直接將 <code class=\"language-text\">timeAsSec</code> 除以 60，結果會是分數，因此我們的分鐘區塊會隨著秒數的增加而順順的減少，若你想要有明顯跳動，可以轉為整數後再丟入 <code class=\"language-text\">timeData</code>（轉為整數的話，只有每 60 秒數值會變動一次，才看得到差別）。</p>\n<p>總結一下整個流程：</p>\n<p>每秒執行一次，從 <code class=\"language-text\">timeData</code> 中產生新的資料傳入 <code class=\"language-text\">render()</code> 去繪製圖形，直到 <code class=\"language-text\">timeAsSec</code> 遞減為零。</p>\n<h2 id=\"render-setting\" style=\"position:relative;\"><a href=\"#render-setting\" aria-label=\"render setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render Setting</h2>\n<p>資料都設定好後，接著準備繪製圖形。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// value setting</span>\n<span class=\"token keyword\">let</span> width <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> offSetX <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> offSetY <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pi <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> scaleSecs <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">999</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scaleMins <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">59</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vis <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".chart\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:svg\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> clockGroup <span class=\"token operator\">=</span> vis<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:g\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"translate(\"</span> <span class=\"token operator\">+</span> offSetX <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> offSetY <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:circle\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clock outercircle\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:circle\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clock innercircle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">line 2 ~ line 6</code> 先定義一些常數，這邊就隨意設定。</p>\n<!-- 講解 d3 scale -->\n<p><code class=\"language-text\">line 8 ~ line 9</code> 設定 <code class=\"language-text\">Mins</code> 與 <code class=\"language-text\">Secs</code> 的 scale。scale 是什麼？基本上你可以把 scale 想像成是能夠幫你把 <strong>資料映射</strong> 到適合你想繪製圖形的維度上 的一種方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> scaleSecs <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">999</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scaleMins <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">59</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">domain</code> 與 <code class=\"language-text\">range</code> 來分別給予 <strong>資料的輸入範圍</strong> 以及 <strong>資料的輸出範圍</strong>，以今天的 case 來說，我們要將時間資料轉化為圓形的角度，因此給予 <code class=\"language-text\">domain</code> 的輸入範圍為 0 ~ 59。</p>\n<p><code class=\"language-text\">range</code> 負責輸出的範圍，我們要在圓形的時鐘上顯示，因此是 0 ~ 2 * pi。</p>\n<p>到這邊你可能會想，degree 0 跟 degree 360 不是一樣嗎？這樣 0 秒跟 59 秒會映射到同一個點？</p>\n<p>好問題！所以先前的 seconds 與 minutes 基本上可以共用，但如果想要區別 0 秒與 59 秒，我們需要把範圍多加上小數點的範圍，以分鐘來說，分成 60 等份，因此就是 [0, 59 + 59/60]，秒則是分為 1000 毫秒，也就是 [0, 59 + 999/1000]。</p>\n<p><code class=\"language-text\">line 11 ~ line 14</code> 由於 d3 的 method 是 Chainable 的，因此可利用 <code class=\"language-text\">d3.selectAll()</code> 選取你想要 mount 上去的 DOM 元素，並接著 append 上 <code class=\"language-text\">svg</code> 元素，以及設定 <code class=\"language-text\">width</code> 與 <code class=\"language-text\">height</code> 的屬性值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vis <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".chart\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:svg\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">line 16 ~ line 28</code> 採用同樣方式，在 <code class=\"language-text\">vis</code> 這個 svg 元素下，再 append 上一個 svg group，並加入兩個 circle。</p>\n<p>第一個 circle 是時鐘的外圍，第二個 circle 作為時鐘中心點。</p>\n<h2 id=\"render-timer\" style=\"position:relative;\"><a href=\"#render-timer\" aria-label=\"render timer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render Timer</h2>\n<p>終於可以開始畫圖！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render clock</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">let</span> minuteArc<span class=\"token punctuation\">,</span> secondArc<span class=\"token punctuation\">;</span>\n\n  clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  secondArc <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">innerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">outerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">scaleSecs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>numeric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">endAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">scaleSecs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>numeric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  minuteArc <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">innerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">outerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">endAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">scaleMins</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>numeric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:path\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">secondArc</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">minuteArc</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clockhand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">line 8 ~ line 26</code> 定義了兩個 method: secondArc 和 minuteArc，分別用來將傳入的資料依據其所設定的 <code class=\"language-text\">innerRadius</code> 、 <code class=\"language-text\">outerRadius</code> 、 <code class=\"language-text\">startAngle</code> 與 <code class=\"language-text\">endAngle</code> 來繪製成弧形。 <code class=\"language-text\">d3.arc()</code> 在 d3 v4 中屬於 <a href=\"https://github.com/d3/d3-shape\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-shape</a> 的一環。</p>\n<p><img src=\"/image/d3-arc.png\" alt=\"d3-arc\"></p>\n<p>在 <code class=\"language-text\">endAngle()</code> 中，我們將接收到的參數（也就是傳入的資料）放入我們先前定義好的 <code class=\"language-text\">scaleSecs()</code> 與 <code class=\"language-text\">scaleMins()</code> 中，讓 <code class=\"language-text\">d3.arc()</code> 能接收到我們映射過後的值，進而繪出正確的 scale。</p>\n<p>我們讓秒針的 startAngle 與 endAngle 設定為一樣，以呈現 針 的狀態。而 分鐘區塊 則讓其 startAngle 固定為 0，只在 endAngle 中傳入每次更新的時間，如此一來，每次時間更新時，區塊會隨之改變大小！</p>\n<p>此外，這邊的innerRadius 都設為 0，讓其等同於圓中心，才能產生扇形。</p>\n<p><code class=\"language-text\">line 28 ~ line 56</code> ： 還記得最一開始我們有將最外層的 svg 指定給變數 clockGroup 嗎？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> clockGroup <span class=\"token operator\">=</span> vis<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:g\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"translate(\"</span> <span class=\"token operator\">+</span> offSetX <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> offSetY <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span>\n\n  clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:path\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在最後一段裡面，利用 <code class=\"language-text\">clockGroup.selectAll(\".clockhand\")</code> 我們把資料 import 到擁有 <code class=\"language-text\">.clockhand</code> 這個 classname 的 <code class=\"language-text\">svg:path</code> 底下，透過設置 <code class=\"language-text\">svg:path</code> 的 attribute <code class=\"language-text\">d</code>來繪製 秒針 與 分鍾區塊。利用先前提到的 <code class=\"language-text\">secondArc()</code> 與 <code class=\"language-text\">minuteArc()</code> ）。</p>\n<p><code class=\"language-text\">attr()</code> 函式可以接受 <code class=\"language-text\">callback</code>，所以我們可以根據資料的不同來設定不同的 style，讓秒針與分鍾區塊做個分別。</p>\n<p>不知道大家看到這邊有沒有覺得奇怪，從最一開始到現在從來沒有設置過 <code class=\"language-text\">.clockhand</code> 這個 class 的 DOM 元素，為什麼我們這邊可以直接 <code class=\"language-text\">selectAll</code> 還塞入資料並 append svg 呢？</p>\n<p>原因是在於，d3 的 <code class=\"language-text\">selectAll()</code>, <code class=\"language-text\">select()</code> 如果找不到所指定的元素時，會回傳一個空的 NodeList，所以我們可以拿這個空 NodeList 去進行操作。但要記得在你 append 上去的 DOM 元素中加上你想指定的 classname，否則每次執行這個函數的時候，他就會重新 create 一個空的 NodeList。</p>\n<p>這會造成什麼問題呢？以我們這邊實作的例子來說，在我們的 <code class=\"language-text\">render()</code> 一開始的地方，我們有個</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這個 <code class=\"language-text\">remove()</code> 的動作會在我們每次執行 <code class=\"language-text\">render()</code> 的時候（也就是 setInterval 每次執行時）幫我們把原先的 <code class=\"language-text\">.cockhand</code> DOM 拿掉，重新繪製正確的 秒針 與 分鐘區塊。</p>\n<p>若我們在 append <code class=\"language-text\">svg:path</code> 的時候設定他的 <code class=\"language-text\">attr</code> 為 <code class=\"language-text\">clockhand</code>，則會造成這邊抓不到 <code class=\"language-text\">.clockhand</code> 而無法移除原有的 DOM（秒針與分鐘區塊）。</p>\n<p>像是這樣：</p>\n<p><img src=\"/image/timer-wrong.png\" alt=\"Wrong classname timer\" title=\"Wrong classname timer\"></p>\n<p>因此記得要加上對應的 class name。</p>\n<p>另外一個要注意的部分是，<code class=\"language-text\">clockGroup.selectAll(\".clockhand\").remove();</code> 他雖然會移除掉 DOM 元素，但是 <code class=\"language-text\">clockGroup.selectAll(\".clockhand\")</code> 還是會留存有對原本該 DOM 元素的 reference，有可能會造成 memory leak，若想避免記得額外處理這部分。</p>\n<h2 id=\"小總結-與-附錄\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B8%BD%E7%B5%90-%E8%88%87-%E9%99%84%E9%8C%84\" aria-label=\"小總結 與 附錄 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小總結 與 附錄</h2>\n<p>到這邊為止我們就已經實作出一個簡易的 Timer，希望能讓大家對 d3 繪圖有一點概念，至於再進階一點的，像是互動與動畫的部分，時間實在不多，只能下次再努力找個範例來寫寫。</p>\n<h3 id=\"data-join\" style=\"position:relative;\"><a href=\"#data-join\" aria-label=\"data join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data join</h3>\n<p>不過我想稍微介紹一點關於 D3 裡面很重要的 Data join，對之後實作更複雜的圖形時有絕對幫助。</p>\n<p>先給點資源：</p>\n<p>D3 作者關於 data join 的說明（必看）：\n<a href=\"https://bost.ocks.org/mike/join/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thinking with joins</a></p>\n<p>UNC 的 data join 視覺化教學（也是必看, 上面那篇太長看不下去直接看這邊可以秒懂）：\n<a href=\"https://ils.unc.edu/~gotz/D3joins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dat joins in D3.js</a></p>\n<p>在我們先前的範例裡面，有用到 <code class=\"language-text\">clockGroup.selectAll(\".clockhand\").data().enter()</code>，意思是將資料跟 DOM 連接，並將進入 <code class=\"language-text\">enter</code> 選取狀態 的資料傳遞到後面的 method （像是 <code class=\"language-text\">attr()</code>）中。</p>\n<p>嗯？！ <code class=\"language-text\">enter()</code> 不是指把資料 enter (輸入) 進去的意思喔！</p>\n<p>是，也不是。</p>\n<p><img src=\"/image/d3-join.png\" alt=\"Data joins\" title=\"d3 data join\"></p>\n<p>在 D3 中，資料在繫結到 DOM 上時，會分別進入三種選取狀態：enter, update 與 exit。</p>\n<p><span style=\"font-size: 14px;color: gray;\">[Note] selection 代表的是 <code class=\"language-text\">selectAll()</code> 或 <code class=\"language-text\">select()</code> 所選取到的 d3 node object。</span></p>\n<p><strong>update selection</strong>: 當你 selection 中的資料與新的 <code class=\"language-text\">.data()</code>傳遞進來的資料有重疊時，新的資料會進入 update selection 狀態，可以進行資料更新。</p>\n<p><strong>exit selection</strong>: 當你原本 selection 中的資料與新的資料沒有匹配時，那些舊有的資料會進入 exit selection 狀態，可以透過呼叫 <code class=\"language-text\">.exit().remove()</code> 將之從 selection 中移除。</p>\n<p><strong>enter selection</strong>: 與 update 相反，在原本 selection 中找不到對應的新資料就會進入 enter selection。</p>\n<p>所以，當你想要在原本的圖形內更新資料時，可以直接呼叫 <code class=\"language-text\">selectAll('.oldData').data(newData)</code>，該進入 update 狀態的資料就會取代掉舊的，接著再呼叫 <code class=\"language-text\">selectAll().exit().remove()</code> 移除掉其他不再 newData 內的資料，最後呼叫 <code class=\"language-text\">selectAll().enter().append()</code> 來把不在舊資料中，但在 newData 中的資料新增上去。</p>\n<p>強力推薦搭配參考 <a href=\"https://ils.unc.edu/~gotz/D3joins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dat joins in D3.js</a>，裡面的範例非常清楚，有機會我會翻成中文版的。</p>\n<p>了解資料在 d3 中的狀態後，對於後續設計互動效果與資料更新等等的操作會更得心應手！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://bost.ocks.org/mike/join/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thinking with joins</a></li>\n<li><a href=\"https://ils.unc.edu/~gotz/D3joins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dat joins in D3.js</a></li>\n<li><a href=\"https://www.ericbullington.com/blog/2012/10/27/d3-oclock/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-oclock</a></li>\n</ol>","id":"0a06a98b-c2dd-5158-bd92-10df3be6ef0b","fields":{"slug":"timer-d-3-v-4"},"frontmatter":{"date":"2016-10-15T17:49:38.000Z","title":"詳解簡易 Timer 來學習 D3","tags":["d3","d3v4","javascript","data visualization"],"type":"tech","slug":"timer-d3-v4"},"timeToRead":11},{"excerpt":"如果程式碼也會自己出現就好了...","html":"<blockquote>\n<p>如果程式碼也會自己出現就好了...</p>\n</blockquote>\n<!-- more -->\n<p>今天來點輕鬆的。</p>\n<p>前陣子看了某個面試者的履歷網站，封面有個打字的動畫效果，雖然以前也很常看到，但沒有實際用 CSS 來實作過，只有在 CSS SECRETS 上看過做法，趁著心血來潮就來玩玩吧！</p>\n<h2 id=\"主要概念\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5\" aria-label=\"主要概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主要概念</h2>\n<p>要有打字效果的動畫，主要就是必須讓文字一個一個出現，因此我們可以利用 <code class=\"language-text\">overflow</code> 與調整包含文字的元素寬度，來達到這個效果。</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;h1&gt; 我要成為神奇寶貝大師！ &lt;/h1&gt;</code></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"csstyping.css\"><pre class=\"language-csstyping.css\"><code class=\"language-csstyping.css\">@keyframes typing {\n  from { width: 0 }\n}\n\nh1 {\n  width: 11em;\n  overflow: hidden;\n  animation: typing 6s;\n}</code></pre></div>\n<p>這邊的文字寬度，要去算你包含文字的那個元素所設定的 <code class=\"language-text\">font-size</code>，並乘上你的字數。</p>\n<p>出來的結果如下：</p>\n<p><img src=\"/image/typing1.gif\" alt=\"Typing1\" title=\"Typing1\"></p>\n<p>搞啥啊！這什麼鬼 XD</p>\n<p>兩個問題：</p>\n<ol>\n<li>寬度會影響行數，就算 <code class=\"language-text\">overflow: hidden</code>，文字會折行這件事情並不會消失。</li>\n<li>文字並沒有真正的逐格出現</li>\n</ol>\n<h2 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p>第一個問題好解決，我們可以加上 <code class=\"language-text\">white-space: nowrap</code>。\n第二個問題就必須借助 CSS 中 animation 的一個屬性值：<code class=\"language-text\">steps()</code></p>\n<p>通常我們在用 CSS 的 animatin 時，多數會使用 linear, ease-in-out, cubic-bezier 等等的 Speed Curve，這些依照貝茲曲線為主的函式會在關鍵影格中間插入<strong>過渡動畫</strong>，在一般的使用場景中非常適用，畢竟沒人想要讓動畫看起來卡卡的。</p>\n<p>但是在打字動畫中，我們就是需要讓動畫看起來卡卡的 XD</p>\n<p>所以我們可以利用這個較少人討論的 <code class=\"language-text\">steps()</code> 函式來實作。</p>\n<p><code class=\"language-text\">steps()</code> 會根據你輸入的步驟數，用影格切割動畫，不補入過渡動畫。</p>\n<p>我們調整剛剛的 CSS 如下：</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"csstyping.css\"><pre class=\"language-csstyping.css\"><code class=\"language-csstyping.css\">@keyframes typing {\n  from { width: 0 }\n}\n\nh1 {\n  width: 11em;\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(11)\n}</code></pre></div>\n<p><img src=\"/image/typing2.gif\" alt=\"沒有換行，且一格一格出現文字\" title=\"沒有換行，且一格一格出現文字\"></p>\n<h2 id=\"enhancement\" style=\"position:relative;\"><a href=\"#enhancement\" aria-label=\"enhancement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enhancement</h2>\n<p>但既然是打字，沒有游標怎麼可以。來加強一下。</p>\n<p>閃爍游標的做法很多種，這邊我們採取最簡單的方式，由於我們是利用<strong>調整</strong>元素寬度去控制文字出現，因此可以直接加入一個右邊框，並調整其 transparent。</p>\n<div class=\"gatsby-highlight\" data-language=\"csstyping.css\"><pre class=\"language-csstyping.css\"><code class=\"language-csstyping.css\">@keyframes caret {\n  50% { border-color: transparent; }\n}\n\nh1 {\n  width: 11em;\n  border-right: .05em solid;\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(11),\n    caret 1s steps(1) infinite;\n}</code></pre></div>\n<p><img src=\"/image/typing3.gif\" alt=\"加入閃爍游標\" title=\"最終結果\"></p>\n<p>短短五分鐘，純 CSS 的打字效果動畫就出來囉！</p>\n<p>Live 範例：</p>\n<div class=\"inputField\">\n  <h3>皮卡丘！就決定是你了！</h3>\n</div>\n<style>\n@keyframes caret {\n  50% { border-color: transparent; }\n}\n@keyframes typing {\n  from { width: 0 }\n}\n<p>.inputField {\npadding: 20px;\nborder: 1px solid black;\n}</p>\n<p>h3 {\nwidth: 11em;\nborder-right: .05em solid;\noverflow: hidden;\nwhite-space: nowrap;\nanimation: typing 3s steps(11) infinite,\ncaret 1s steps(1) infinite;\n}\n</style></p>","id":"90b15bf1-d55e-5041-a899-15868a4dad47","fields":{"slug":"css-typing-animation"},"frontmatter":{"date":"2016-08-06T11:47:27.000Z","title":"快速實作 CSS3 打字動畫","tags":["css","javascript"],"type":"tech","slug":"css-typing-animation"},"timeToRead":2},{"excerpt":"\"要學Flux還是直接學Redux好呢？\"\n\t\"Flux我知道, 3D printer麻！\"","html":"<blockquote>\n<p>\"要學Flux還是直接學Redux好呢？\"\n\"Flux我知道, 3D printer麻！\"</p>\n</blockquote>\n<!-- more -->\n<p>今天這篇主要是想藉由 <code class=\"language-text\">Flux</code> 的介紹，進而探討 <code class=\"language-text\">Flux</code> 與 <code class=\"language-text\">MVC</code> 的差異。會想記錄這篇的原因是前幾天跟我的師父（以前實習公司的 CTO）詢問我類似的問題，我才發現自己還沒有真正全盤瞭解過，只是很直接的去了解 Flux，並且使用，但是到底 <code class=\"language-text\">Flux</code> 做對了什麼，而 <code class=\"language-text\">MVC</code> 又犯了什麼錯呢？</p>\n<p>首先我們回顧一下<a href=\"https://www.youtube.com/watch?v=nYkdrAPrdcw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2014 F8大會 - Hacker Way</a>的影片\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=nYkdrAPrdcw\" target=\"_blank\">\n<img src=\"http://img.youtube.com/vi/nYkdrAPrdcw/0.jpg\" alt=\"2014 F8大會 - Hacker Way\" width=\"240\" height=\"180\" border=\"10\">\n</a>\n其中 Jing Chen 用了兩張圖來做對比，說明 MVC 的觀念在複雜的 Application 下難以維護。</p>\n<p><img src=\"/image/flux-react-mvc.png\" alt=\"facebook MVC\" title=\"facebook MVC\"></p>\n<p>經驗豐富一點的 Developer 看到這張圖的第一個念頭應該會是：\"What the fxxx... 誰家的 MVC長這樣啊？\" 沒錯！Jing Chen 事後在 Reddit 上也有回覆，主要是想利用這張圖把 MVC 在大型架構下，資料 與 視圖 之間的 <code class=\"language-text\">bi-directional data flow</code>，容易造成 <code class=\"language-text\">cascading effects</code> 的問題凸顯出來。</p>\n<p>為了解決她說的這個問題，Facebook 提出了 <code class=\"language-text\">Flux</code></p>\n<h2 id=\"flux\" style=\"position:relative;\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h2>\n<p>Flux是一種讓你很容易做到 one-way data flow 的<span style=\"color:red\">概念</span>，讓你View中的每個 component 的 state 都能夠 <code class=\"language-text\">predictable</code>。</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<h3 id=\"views-dispatch-actions\" style=\"position:relative;\"><a href=\"#views-dispatch-actions\" aria-label=\"views dispatch actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Views Dispatch Actions</h3>\n<p><code class=\"language-text\">Dispatcher</code> 是一個重要的 event system，用來 broadcast events 以及 registers callbacks，一般來說 Dispatcher 是唯一且 global 的，可以參考 Facebook 的<a href=\"https://github.com/facebook/flux/blob/master/src/Dispatcher.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dispatcher Library</a>（題外話，有許多一些 Flux 的 framework 並非這樣使用）</p>\n<p>簡單來看個 Dispatcher 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 假設你initiate一個dispatcher</span>\n<span class=\"token keyword\">var</span> AppDispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//.</span>\n<span class=\"token comment\">//..</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token comment\">//在你的 component.jsx 中，可能會有這樣的程式</span>\n<span class=\"token function-variable function\">createNewItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">evt</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    actionName<span class=\"token operator\">:</span> <span class=\"token string\">'newPhoto'</span><span class=\"token punctuation\">,</span>\n    newItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Happy Holiday'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// example data</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createNewPhoto <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>New Photo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當每次的 <code class=\"language-text\">onClick</code> 發生後，<code class=\"language-text\">View</code> 就會透過 <code class=\"language-text\">Dispatcher</code> dispatch 出一個 <code class=\"language-text\">Action</code>，該 Action 可以包含一個 <code class=\"language-text\">payload</code>，說明<code class=\"language-text\">你想做什麼事情</code>以及<code class=\"language-text\">你需要操作什麼資料</code>。</p>\n<h3 id=\"store-responds-to-dispatched-actions\" style=\"position:relative;\"><a href=\"#store-responds-to-dispatched-actions\" aria-label=\"store responds to dispatched actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Responds to Dispatched Actions</h3>\n<p>Store 在 Flux的架構內，通常是 Singleton (一樣，有些 framework 並非這樣做，尤其是想達成 isomorphic 時，可以參考<a href=\"http://fluxible.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yahoo Fluxible</a>)</p>\n<p>在 Flux 的概念中，Store 基本上是你唯一可以<strong>操作資料</strong>與<strong>儲存資料</strong>的地方。去除操作資料的部分，聽起來有點像 MVC 中的 Model ? 更明確一點來說，<strong>Store contains Models</strong></p>\n<p>舉例來說，當你需要存放一些照片以及其 Meta data 時，你會 Create 一個 PhotoStore 來存放 Photo model 與 Meta model。你會依照資料的<code class=\"language-text\">Domain</code> 來切割你的 Store。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> PhotoStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// collection of model data</span>\n  photos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nAppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Store</code> 會向 <code class=\"language-text\">Dispatcher</code> 註冊 <code class=\"language-text\">Callback</code>，依照各種 action 的類別執行相對應的資料操作。</p>\n<h3 id=\"store-emits-change-event-to-view\" style=\"position:relative;\"><a href=\"#store-emits-change-event-to-view\" aria-label=\"store emits change event to view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Emits \"Change\" Event to View</h3>\n<p>當你的 Store 資料做完更新後，要告訴前端頁面去刷新視圖，通常可以在 Store 註冊的 Callback 中執行以下動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// trigger \"Change\" event 通知View去做更新</span>\n      PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接著，如果你是搭配 React 當作你的 View 的話，可能會在 <code class=\"language-text\">componentDidMount</code> 時，binding 一個 Store listener</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">PhotoStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>photoChange <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>在 listener 中重新 fetch store 資料，並且 setState 來 re-render Component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">photoChange</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> newPhotoData <span class=\"token operator\">=</span> PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      photos<span class=\"token operator\">:</span> newPhotoData\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你的 Component 的 render function 大概會像這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> photosComponet <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">photo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'photo'</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photo<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photosComponet<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看完簡單的 Flux 介紹後，讓我們再複習一次 Flux 的流程圖</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<p>相信在業界打滾多年的 Developer 們應該早有疑惑了，Flux 的那張圖，跟最原始的 MVC 圖不是很像嗎？！</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png\" alt=\"MVC definition in wikipedia\" title=\"MVC definition in wikipedia\"></p>\n<p>User 操作 View 所產生的任何 event，都會經由 Controller 來修改與更動相關的 Model，而 Model 再告知 View 是否需要做更動，聽起來也是蠻 <code class=\"language-text\">one-way direction</code> 的呀。</p>\n<p>事實上，MVC 跟 Flux 都只是一個概念，因此有各種不同的實作，加上 MVC 在<code class=\"language-text\">資料流</code>的處理上，並不像 Flux 一般有較為明確的定義，多數時候 Model 的更動與 View 的刷新可能會透過 Controller 來管理，讓 Model 單純存放 data。</p>\n<p>如此一來，假若今天 View 的操作更動了 Model，而 Model 的變化又刷新了 View，在系統龐大的時候，一來一往，就會讓你的資料與頁面狀態變得非常複雜，要追蹤某個頁面的變動到底是誰觸發的，或是哪個資料改變了，你必須從 Controller 去慢慢 trace。而若是遵照 Flux 的流程，任何 View 的 update 都只要去追蹤其 State 的來源 Store 即可，有一個明確的 flow 可以遵循，並且每個 View 所需要監聽的資料來源，可以依照 Store 來區分，這之間的資料流不會互相干擾。\n另外一個 Flux 的好處是，能夠更輕鬆的做出更 Unit 的 Unit test。這是你在複雜的 Controller 中難以達成的。</p>\n<p>當然，你可能會想：“這是你 MVC 用得不好“。 </p>\n<p>我覺得這樣講也沒什麼不對，如果你 MVC 用得很熟很順手，的確單單是 Flux 這個東西對你的誘因可能不高，但當一間明星公司大力 Promote，對於基本概念的定義又夠清楚單純時，還是值得你試試。更別說 Flux 搭配上 React 的宣告式寫法，用起來更是如魚得水。</p>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<p>Flux 做的是：</p>\n<ol>\n<li>改善<code class=\"language-text\">資料狀態</code>與<code class=\"language-text\">視圖狀態</code>的 Data Flow</li>\n<li>讓頁面的狀態 <code class=\"language-text\">Predictable</code></li>\n<li>資料流不會互相污染</li>\n<li>讓你的測試更加容易</li>\n</ol>\n<p>而 MVC 在關注點分離上的貢獻不可小覷，重視在將資料(Model)、視圖(View)、邏輯(Controller)拆開，各自負責各自的工作。</p>\n<p>因此並非是 MVC 不好、不對，所以我們應該採用 Flux；Flux 是在 MVC 建立的基礎下，定義出一個清楚的 <code class=\"language-text\">one-way direction</code> 資料流，並且透過 <code class=\"language-text\">Action</code>、<code class=\"language-text\">Dispatcher</code>與 <code class=\"language-text\">Store</code> 來幫助整個概念的實現。</p>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h3>\n<p>如同前面所提，Flux 的實作有很多種，這邊介紹的只是最基本的流程，很多 Framework 在設計自己的 Dispatcher, Action 與 Store 時，會有不同的方式，或許可以從這邊的比較下去看看</p>\n<ul>\n<li><a href=\"https://github.com/voronianski/flux-comparison\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Comparison</a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Awesome React</a></li>\n</ul>\n<p>參考資料</p>\n<ul>\n<li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux for stupid people</a></li>\n<li><a href=\"http://www.infoq.com/news/2014/05/facebook-mvc-flux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook: MVC Does Not Scale, Use Flux Instead</a></li>\n</ul>","id":"80f48bd4-139f-5ec5-bdbf-8c2000d8c7c8","fields":{"slug":"flux-vs-mvc"},"frontmatter":{"date":"2016-04-27T22:25:24.000Z","title":"從 Flux 與 MVC 的曖昧關係來介紹 Flux","tags":["flux","mvc","javascript"],"type":"tech","slug":"flux-vs-mvc"},"timeToRead":6}],"tagName":"javascript","type":"tech"}},"staticQueryHashes":["2123680655"]}