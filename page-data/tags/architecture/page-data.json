{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/architecture","result":{"pageContext":{"posts":[{"excerpt":"If you don't want to start over, don't give up","html":"<blockquote>\n<p>If you don't want to start over, don't give up</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年的 Google I/O 2019 中，<a href=\"https://twitter.com/dassurma\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Surma</a>, <a href=\"https://twitter.com/jaffathecake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Jake</a> 與 <a href=\"https://twitter.com/kosamari\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mariko</a> 推出了一款能在低階的 feature phone 上運作順暢的 <a href=\"https://github.com/GoogleChromeLabs/proxx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web app - PROXX</a>，其中利用到了 Web worker 來分擔許多 Browser main thread 中的工作，讓畫面渲染可以更順暢，也因此讓我注意到去年在 Chrome dev summit 2018 中的一支影片 - <a href=\"https://www.youtube.com/watch?v=Vg60lf92EkM&#x26;list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&#x26;index=17&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Architecting Web Apps - Lights, Camera, Action!</a>，讓我眼睛為之一亮，裡面講到他們利用 Actor Model 來將關注點分離，不同的 Actors 各自負責不同的工作，彼此之間用共通的介面溝通，如此一來，除了將複雜的運算邏輯放入 Web worker 外，由於架構上的特性，理論上也能很方便的抽換 View 的實作方式，像是一套 web app，可以在不重寫所有邏輯的情況下，從 Vue 實作 view，轉換到以 React 實作。</p>\n<p>聽起來非常合理，而有趣的是，這個 Actor Model 其實早在 46 年前就被提出，也有應用在 Web 領域上過，像是用 Scala 撰寫 的 Akka，或是在電信通訊上有名的 Erlang，但是在前端上似乎是第一次被提出來。</p>\n<p>今天透過這篇文章來了解一下這個 46 年前就存在的觀念是什麼，而又能如何與 Web 前端整合呢！</p>\n<h2 id=\"actor-model-介紹\" style=\"position:relative;\"><a href=\"#actor-model-%E4%BB%8B%E7%B4%B9\" aria-label=\"actor model 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actor Model 介紹</h2>\n<p>Actor Model 是一個關於 concurrent computation 的 conceptual model，在 1973 年最早被提出時，只是一個概念模型，用來抽象化並行處理程序的複雜程式，直到 1985 才被延伸出一個完整的 Actor model theory，有興趣可以到 <a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a> 查看。</p>\n<p>而為什麼會需要提出 Actor Model 來處理 concurrent issue 呢？</p>\n<p>歷史上的前因後果在這個影片中的前半段解釋得蠻清楚的 <a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></p>\n<p>大體上是說，由於 CPU 的製程是有其極限存在，已經無法保證 Moore's Law 會持續下去，取而代之的是用多核心來提高處理器內的電晶體數量，透過多核心的並行處理來提高運算速度，而平行處理對於撰寫程式的我們來說，就是很複雜的一個存在，因為我們有 Shared mutable state，造成 race condition、dead lock 等等的 issue 需要避免，而 Actor Model 就是因應而生的解決方案之一。</p>\n<p>Actor Model 主要有幾個特點：</p>\n<ul>\n<li>輕量物件: Actor 是系統內的一個基礎單位，每個 Actor 只負責自己的工作，所以可以很輕量。</li>\n<li>沒有 shared state：每個 Actor 各自管理自己的 state，跑在各自的 thread 上，不共享 memory 與 state。</li>\n<li>透過 message 溝通：每個 Actor 會有一個 message queue，或稱作 mailbox，接收到的訊息會在此排隊等著依序執行。</li>\n</ul>\n<p>一個 Actor 的架構略如下圖：</p>\n<p><img src=\"/image/actor-model.png\" alt=\"Actor Model\"></p>\n<p>每個 Actor 都有自己的 private state，別的 Actor 沒辦法直接更動你的 state，降低了因為 shared state 產生的問題。</p>\n<p>我們拉遠一點來看，Actor 運行在不同的 Thread 中，彼此之間透過 Message 來溝通，收到訊息後各自決定要採取什麼樣的對應動作，而更改的都只會是自己的 private state，沒有 share memory，彼此之間是互相獨立的。</p>\n<p><img src=\"/image/actor-model-system.png\" alt=\"Actor Model system\"></p>\n<p>而在操作上，每個 Actor 只被允許做下面三種 operation：</p>\n<ol>\n<li>創建另一個 Actor</li>\n<li>傳送 Message</li>\n<li>指示該如何處理下一個 Message</li>\n</ol>\n<p>前面兩種很好理解，但第三個就蠻有趣的了，舉例來說，假設有個 Counter Actor A，一直以來都是會把接受到的 Message 數字累加到自己的 counter state 中，但今天可以有另一個 Actor B 傳遞訊息跟 Actor A 說：『hey, 你這次先不用累加數字了，但是下一個傳進來的訊息，你要乘以 2 以後再放到計數器內喔』。</p>\n<p><img src=\"/image/actor-model-counter.png\" alt=\"Counter example\"></p>\n<p>這個三個特性合再一起時，有個很大的好處：容錯系統。</p>\n<p>一個 Actor 對於他創建的 Actor 可以擁有 supervisor 的權限，可以告訴其管控的 Actor 說：『如果你 crash 了，至少死前丟給我個訊息跟我說』，然後當 Supervisor Actor 收到 Actor 死亡訊息時，可以再傳送 \"restart\" Message 去重啟 Actor，這樣的能力造就了一個 Self-healing systems：</p>\n<p><img src=\"/image/actor-model-fault-tolerance.png\" alt=\"Fault Tolerance System\"></p>\n<p>看到這邊會發現，雖然 Actor model 是因為 concurrent computation 而提出的，但其特性用在<strong>分散式系統</strong>上也是非常合適的，每個 Actor 跑在不同的 thread 上，當然也可以是不同的遠端環境上，並透過統一個 Message 介面溝通。</p>\n<h2 id=\"運用到-web-前端上\" style=\"position:relative;\"><a href=\"#%E9%81%8B%E7%94%A8%E5%88%B0-web-%E5%89%8D%E7%AB%AF%E4%B8%8A\" aria-label=\"運用到 web 前端上 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>運用到 Web 前端上</h2>\n<p>在瀏覽器的世界中，也是存在有多種 Process 與 Context（推薦閱讀 @Mariko 的這篇<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">瀏覽器深入淺出介紹</a>)，像是負責渲染的 UI Process，而在 DOM 外的 web worker 則是另一個獨立的 Worker Process，就想是一個縮小版的分散式系統，Worker Process 沒辦法直接存取 UI Process 所控制的 DOM 元件，相對的 UI Process 也無法直接呼叫 Worker Process 中所存在的函式。</p>\n<p>照著這樣的邏輯梳理下來，Web 前端真的是蠻適合套用 Actor Model 的，就像我們有個 UI Actor 運行在 UI Process，同時負責控制狀態的 State Actor 運行在 Worker Process，彼此之間透過 Message 來溝通。</p>\n<p>透過 Actor Model 來切割 UI 與 State 的關係，只要處理得當，理論上我們能夠讓一套相同商業邏輯的 Web app，輕易地從普通的 Web 轉換成 3D 版本，或是 Web VR 版本。</p>\n<p>更棒的是，將關注點分離成各種 Actor 後，code splitting 變得更自然更容易了，每個 Actor 都能夠在需要的時候再載入即可。</p>\n<h2 id=\"web-應用的範例\" style=\"position:relative;\"><a href=\"#web-%E6%87%89%E7%94%A8%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"web 應用的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web 應用的範例</h2>\n<p>說了這麼多，來看點實際的例子！</p>\n<p>既然這個概念是 Google engineer 在他們的開發大會展示的，勢必有 Demo code 可以看，這套叫做 <a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a> 的 repository 包含了 <a href=\"https://github.com/PolymerLabs/actor-helpers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-helper</a> 來幫忙 cover 了 Actor Model 與 Messaging system 的實作細節，讓我們能輕易的體驗 Actor Model 運用在 Web Frontend 的感覺。</p>\n<p>我們做個簡單的基礎代謝率(BMR)計算器來感受一下。</p>\n<p>先看一下成果：</p>\n<p><img src=\"/image/actor-bmr-demo.gif\" alt=\"bmr calculator - actor model\"></p>\n<p>UI 上就是簡單幾個 input 欄位而已，按下按鈕後，取出使用者輸入的值進行計算，最後顯示結果。這段流程我們可以拆分成兩個 Actor 來完成，分別是控制 UI 的 <strong>UI Actor</strong> 與更動 State 的 <strong>State Actor</strong>。（仔細看上方的 gif 的話，可以看到 State Actor 其實是運行在 Worker process 上的。</p>\n<p>接著我們先來看看 UI Actor 長什麼樣子，關鍵的程式碼在下面這幾行（順帶一提，因為 action-boilerplate 本身就是以 TypeScript 實作，因此接下來範例也是 TypeScript）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UiActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> state <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> resultEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSpanElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">getInputVal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// gender</span>\n    <span class=\"token keyword\">const</span> genderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSelectElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> genderVal <span class=\"token operator\">=</span> genderEl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// height, weight, age 依此類推...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      gender<span class=\"token operator\">:</span> genderVal<span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> heightVal<span class=\"token punctuation\">,</span>\n      weight<span class=\"token operator\">:</span> weightVal<span class=\"token punctuation\">,</span>\n      age<span class=\"token operator\">:</span> ageVal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> calculateButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Calculate\"</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n    calculateButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> StateMessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultEl<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先從 <code class=\"language-text\">actor-helpers</code> 中取出 Actor 物件來繼承，實作兩個主要函式：<code class=\"language-text\">init()</code> 與 <code class=\"language-text\">onMessage()</code>：</p>\n<ul>\n<li>init()：\n負責在初始時與 DOM 元件建立關係，綁定 event handler，當事件觸發時傳遞訊息給 State Actor。</li>\n<li>onMessage():\n就像是接收 <code class=\"language-text\">postMessage</code> 傳送的訊息一般，<code class=\"language-text\">actor-helpers</code> 幫我們串接好訊息溝通這段，在這 <code class=\"language-text\">onMessage()</code> 中，可以接收到其他 Actor 傳送過來的訊息。</li>\n</ul>\n<p>在 <code class=\"language-text\">init()</code> 中的 <code class=\"language-text\">this.state</code> 是什麼呢？為什麼他可以 send message？</p>\n<p>那是我們利用 <code class=\"language-text\">actor-helpers</code> 提供的 <code class=\"language-text\">lookup</code> 函式，將 State Actor 綁定到創建的私有變數上，這樣就能使用 <code class=\"language-text\">send</code> 來傳送訊息。</p>\n<p>接著我們來看看 State Actor：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lots of Type definitions...</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StateActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> ui <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          weight<span class=\"token punctuation\">,</span>\n          height<span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">,</span>\n          gender\n        <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> BMRParams <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Do the math</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> bmr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">RESET</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      state<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跟 UI Actor 大同小異，繼承 <code class=\"language-text\">Actor</code> 並利用 <code class=\"language-text\">lookup</code> 綁定 UI Actor 到私有變數上，在 <code class=\"language-text\">onMessage()</code> 中，根據接收到的 Message Type 來執行對應動作，並更改自身的 state，再將 Result Message 傳回給 UI Actor。</p>\n<p>透過 <code class=\"language-text\">action-helps</code>，實作 Actor 變得方便許多（當然也是因為這是很簡單的例子...）。</p>\n<p>不過還沒結束，Actor 都有了以後，我們要怎麼使用呢？</p>\n<p>我們要準備兩個特殊的檔案，<code class=\"language-text\">bootstrap.ts</code> 與 <code class=\"language-text\">worker.ts</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup<span class=\"token punctuation\">,</span> initializeQueues <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> UiActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/ui.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">initializeQueues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UiActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// This is necessary in Safari to keep the worker alive.</span>\n  <span class=\"token comment\">// 相關討論可以看 repo 內的 issue https://github.com/PolymerLabs/actor-boilerplate/issues/13</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>顧名思義，<code class=\"language-text\">bootstrap.ts</code> 負責啟動整個專案，透過 <code class=\"language-text\">hookup</code> 載入 UI Actor，並且 new 出一個 worker 來運行我們的 State Actor。</p>\n<p><code class=\"language-text\">initializeQueues</code> 主要是在程式執行前，清空目前瀏覽器的 Message queue，該函式的程式碼也就一行 <code class=\"language-text\">await messageStore.popMessages(\"*\");</code>。</p>\n<p>而 <code class=\"language-text\">worker.ts</code> 的內容更簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> StateActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/state.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StateActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就是 <code class=\"language-text\">hookup</code> State Actor！</p>\n<p>最後在你的 html 上加入 <code class=\"language-text\">bootstrap.ts</code> 即可，這樣我們就完成了一個以 Actor Model 為基礎架構的 Web app！</p>\n<p><a href=\"https://github.com/ArvinH/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整程式瑪可從此參考</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Actor Model 雖然有了 <code class=\"language-text\">actor-helps</code> 的幫忙，實作上來說已經簡易很多，但任何操作都要透過 Message 的實作方式在前端應用上恐怕還是不好被接受，可能也因為如此，<code class=\"language-text\">actor-boilerplate</code> 其實在去年 Chrome dev summit 結束後似乎就沒再更新了 XD</p>\n<p>不過我個人是蠻喜歡這個想法的，之後有機會再來真的實作一個不同 View 但使用同樣 State 的 Web app 看看！</p>\n<p>另外，我也發現到，Web worker 雖存在已久，但是使用上的限制，讓一般我們在開發上很少會去考慮他，但這幾年看來，像是 AMP 等等的出現，發現 Google 似乎在推廣一個概念，就是 User experience first，Developer experience second，Developer 擅長處理複雜的事情，既然如此，我們應該專注在提供使用者最佳使用體驗上，而犧牲一點開發體驗。</p>\n<p>如果你的 Web app 有複雜運算的需求，就試試看用 Actor Model 來將複雜的邏輯丟給在 Worker process 的 Actor 處理吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://dassur.ma/things/lights-camera-action/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lights, Camera, Action!</a></li>\n<li><a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki - Actor Model</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside Browser</a></li>\n</ol>","id":"f58e6401-0c27-5e8f-a15e-5d313b471e6a","fields":{"slug":"actor-model-in-web"},"frontmatter":{"date":"2019-06-21T13:37:30.000Z","title":"46 年老技術與 Web 的新火花 - Actor Model in Web","tags":["web","web worker","google chrome","architecture"],"type":"tech","slug":"actor-model-in-web"},"timeToRead":10}],"tagName":"architecture","type":"tech"}},"staticQueryHashes":["2123680655"]}