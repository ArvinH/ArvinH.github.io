{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/git-hub-api","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：MONKEY MAJIK × 岡崎体育 / 留学生","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/lvEVP7NPklU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MONKEY MAJIK × 岡崎体育 / 留学生</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/lvEVP7NPklU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前陣子在公司的專案裡頭想引用 <a href=\"https://github.com/conventional-changelog/standard-version\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standard-version</a> 這套工具來優化 release changelog 的過程，但發現雖然可以用 <code class=\"language-text\">commitlint</code> 或是 <code class=\"language-text\">commitizen</code> 來輔助大家遵循 commit message 的 convention，卻沒辦法簡單的控制 Pull Request 的 title 格式，或是在 GitHub 上 squash merge 時的 commit format，雖然不是太大的問題，code review 的時候稍微注意一下即可，但還是很希望能有個工具來幫忙，心靈上會舒服些。</p>\n<p>GitHub 的 marketplace 上其實找得到可用的 GitHub Apps，可惜公司 policy 的緣故，無法直接使用，試想了ㄧ下原理與實作方法的選項，覺得足夠簡單，可以自己實作，順便學習如何製作 GitHub App，並以這篇文章與大家稍作分享。原始碼分享於此 - <a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<p>效果大致如下，依據你的 PR title 有無符合特定格式，改變 status check 的狀態：</p>\n<p><img src=\"/image/prlint-serverless-demo.gif\" alt=\"DEMO\"></p>\n<h2 id=\"需求分析\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\" aria-label=\"需求分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需求分析</h2>\n<p>想達成 Demo 的功能，我們需要監聽 Pull Request 被 Create、Update 的事件，並且透過 GitHub API 將 Pull Request 上的狀態做更改。</p>\n<p>而要能監聽 GitHub 上的事件，想必是需要設定 webhook endpoint 給 GitHub 呼叫。若是幾年前的我，大概直覺會想到去 Heroku 或是 Digital ocean 開一個最低規格的機器來架 server，但現在我們有了各種 serverless 服務可以使用，AWS Lamda、GCP Cloud Function、Azure Function 等等，基本上只要寫好一個 function 就能 deploy 上去當作 webhook 給其他服務呼叫了。用什麼都可以，但因為公司使用的是 GCP 平台，所以我也就順勢採用 Cloud Function 來作為我的 webhook endpoint。</p>\n<p>總結所需要的技術只有兩個：GitHub API 與 Cloud Function。</p>\n<h2 id=\"github-api\" style=\"position:relative;\"><a href=\"#github-api\" aria-label=\"github api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub API</h2>\n<p>GitHub 開放的 API 很多，每個 API 可以控制的權限分得很細，官方文件針對每個 API 的參數、用法都有提供範例與解釋，不過我覺得有些專屬於 GitHub API 的名詞還是需要花點時間去額外搜尋資料釐清。</p>\n<p><img src=\"/image/github-api-docs.png\" alt=\"github api doc\"></p>\n<p>目前 GitHub 上有使用 GraphQL 的 <a href=\"https://developer.github.com/v4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v4</a> 版本，以及 Rest API 的 <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v3</a>，兩種都能使用，端看你的需求，這次的實作是採用 Rest API。</p>\n<p>若要監聽 Pull Request 的 event，得用到 - <a href=\"https://developer.github.com/v3/activity/event_types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Event types and payloads API</a>，從中可以找到 <a href=\"https://developer.github.com/v3/activity/event_types/#pullrequestevent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PullRequestEvent</a>，</p>\n<p><img src=\"/image/github-api-pr-event.png\" alt=\"github-api-pr-event\"></p>\n<p>event 回傳的 payload 包藏不少資訊，從 <code class=\"language-text\">action</code> 中可以得知該 event 是被哪種操作所觸發，像是 <code class=\"language-text\">opened</code>, <code class=\"language-text\">closed</code> 或 <code class=\"language-text\">edited</code> 等等。而關於 Pull Request 的詳細內容，會放在 <code class=\"language-text\">pull_request</code> 這個物件裡，從 <a href=\"https://developer.github.com/v3/pulls/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pull Request API</a> 中 <a href=\"https://developer.github.com/v3/pulls/#get-a-pull-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get a pull request</a> 的 <code class=\"language-text\">Response</code> 中，我們可以找到 API 回傳的完整 payload 範例，資訊含量非常多，你在 GitHub UI 看得到的內容都找得到，甚至包含 Repo 的資訊。</p>\n<p>這些豐富的資訊中，有一個 <code class=\"language-text\">statuses_url</code>，這是我們創建 Pull request 狀態的端點，待會我們會再提到，可以從 <a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 了解。</p>\n<h2 id=\"cloud-function\" style=\"position:relative;\"><a href=\"#cloud-function\" aria-label=\"cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud Function</h2>\n<p>了解要使用的 GitHub API 後，接著就是要撰寫我們的 webhook endpoint，也就是 Cloud Function。要開始使用 Cloud Function 很簡單，到你的 GCP project 底下點選 Cloud Functions，按下 <strong>CREATE FUNCTION</strong> 即可。</p>\n<p><img src=\"/image/create-cloudfunction.png\" alt=\"create-cloudfunction\"></p>\n<p>創建 Cloud Function 的頁面上可以設定 function 名稱、要配置的記憶體大小、Trigger 的介面（除了能被 HTTP 的 request 觸發外，也能設定由 Cloud Storage、Firestore、Cloud pub/sub 等等服務來啟動函式執行）</p>\n<p><img src=\"/image/cloud-function-details.png\" alt=\"cloud-function-details\"></p>\n<p>URL 就是此 cloud function 的 endpoint，到時候就是要把這個 url 設定到 GitHub 的 webhook 上。此外，要記得把 <code class=\"language-text\">Allow unauthenticated invocations</code> 的選項打勾，此舉能將該 endpoint 公開給所有人存取，GitHub webhook 也才能打得到這隻 API。</p>\n<p>接著最後就是設定程式碼的部分，你可以直接把程式碼貼上（inline editor）、壓縮成 zip 檔上傳（ZIP upload, ZIP from cloud storage）和連接 repository（cloud source repository）。</p>\n<p>也有多種 runtime 可以選擇：</p>\n<p><img src=\"/image/cloud-function-runtimes.png\" alt=\"cloud-function-runtimes\"></p>\n<p>runtime 結構大同小異，都會有一個 entry file，與一個對應的套件管理檔案，以 NodeJS 為例就是一個 <code class=\"language-text\">index.js</code> 與 <code class=\"language-text\">package.json</code>。因此你要在你的 cloud function 中使用第三方套件是沒問題的。</p>\n<p>另外，也能夠有不同的資料夾結構，將一些邏輯拆分到別的檔案再 import 進來也可以（依照相對路徑存取），但當然就必須選擇 <code class=\"language-text\">ZIP upload</code> 等方式上傳你的專案。</p>\n<p>至於 Cloud Function 的基本結構，可以從 inline editor 提供的範例來觀察，以 NodeJS 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Responds to any HTTP request.\n *\n * @param {!express:Request} req HTTP request context.\n * @param {!express:Response} res HTTP response context.\n */</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">helloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其實就像是 Express 的一個 route 或 middleware 的結構，傳入 <code class=\"language-text\">req</code> 與 <code class=\"language-text\">res</code> 物件讓你操作。</p>\n<p>exports 的名稱則是用在設定中，讓 Cloud Function 知道要呼叫哪個函式：</p>\n<p><img src=\"/image/cloud-funciton-name.png\" alt=\"cloud-funciton-name\"></p>\n<h2 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作</h2>\n<p>你可能會有個疑惑，雖然我們已經知道 cloud function 的結構與設定方式，但難道我每寫完一段程式想要測試一下時，就得重新上傳到 cloud function 一次嗎？</p>\n<p>當然不用，Google Cloud team 有推出一個 <code class=\"language-text\">@google-cloud/functions-framework</code> 套件可以使用，透過 <code class=\"language-text\">functions-framework --target=${function name}</code> 的方式啟動你的 cloud function，會幫你起一個 express server，監聽在 port 8080：</p>\n<p><img src=\"/image/cloud-function-framework-cli.png\" alt=\"cloud-function-framework-cli\"></p>\n<p>接著你可以使用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngrok</a> 將其 expose 成 public access 的 url，就能用來設定在 webhook 上，同時又能一邊持續開發。</p>\n<h2 id=\"結合-github-api-與-cloud-function\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E5%90%88-github-api-%E8%88%87-cloud-function\" aria-label=\"結合 github api 與 cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結合 GitHub API 與 Cloud Function</h2>\n<p>當你有了 webhook url，就可以先到 GitHub repo 去設定看看，實際測試 webhook 與 GitHub API 的串連。方法也很簡單，到你想使用的 repository 中，選擇 <code class=\"language-text\">Settings</code> -> <code class=\"language-text\">Webhooks</code> -> <code class=\"language-text\">Add webhook</code>，就會看到下面的畫面：</p>\n<p><img src=\"/image/git-webhook.png\" alt=\"git-webhook\"></p>\n<p>Payload URL 填入你的 <code class=\"language-text\">ngrok</code> url，Content-type 可以選擇 json 格式。</p>\n<p>最後注意一下，你可以選擇哪些 events 會 trigger 你的這隻 webhook，選擇 <code class=\"language-text\">Let me select individual events.</code> 並勾選 <code class=\"language-text\">Pull Requests</code> 的選項，這樣才不會拿到其餘你不需要的事件資訊。</p>\n<p><img src=\"/image/select-individual-event.png\" alt=\"select-individual-event\"></p>\n<p><img src=\"/image/pull-request-event.png\" alt=\"pull-request-event\"></p>\n<p>設定完後回到我們的程式碼，最基礎的 webhook 架構如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prStatus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'opened'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'edited'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ready_for_review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prLint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pull_request<span class=\"token operator\">:</span> pullRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> statuses_url<span class=\"token operator\">:</span> statusesUrl<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pullRequest<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prStatus<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// check pr title</span>\n    <span class=\"token keyword\">const</span> isValid <span class=\"token operator\">=</span> <span class=\"token function\">validatePullReqeustTitle</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// create status</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>依照我們在 <a href=\"#github-api\">GitHub API</a> 所瞭解到的 Event API 與 Pull Request Object，我們知道可以從 <code class=\"language-text\">req.body</code> 中取出 <code class=\"language-text\">pull_request</code> 物件，而在該物件中能取得 <code class=\"language-text\">action</code>、<code class=\"language-text\">title</code> 與 <code class=\"language-text\">statuses_url</code> 兩個我們需要的資訊。</p>\n<p>接著就能實作我們 GitHub App 想要的功能邏輯，包含 filter 掉我們不想要的 action 操作、驗證 Title 是否有符合格式、創建 pull request status 等等。</p>\n<h2 id=\"創建-pull-request-status\" style=\"position:relative;\"><a href=\"#%E5%89%B5%E5%BB%BA-pull-request-status\" aria-label=\"創建 pull request status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>創建 pull request status</h2>\n<p>程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// call status api</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'pass pr lint'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'please check your pr title'</span><span class=\"token punctuation\">,</span>\n  context<span class=\"token operator\">:</span> <span class=\"token string\">'pr-lint'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Token </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessTokens<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>statusesUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'PR lint error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用上來說非常簡單，<a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 接收的 Post body 有四個 properties 可以設置：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"state\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// error, failure, pending, or success.</span>\n  <span class=\"token string\">\"target_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/build/status\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The build succeeded!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"continuous-integration/jenkins\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>state</strong> 就是你想設定的狀態，有四種可以選；<strong>target_url</strong> 則是使用者點選該狀態後要連結去的地方，可以忽略不設；<strong>description</strong> 就是顯示在狀態列的文字；而 <strong>context</strong> 則是讓系統知道這是由第三方 App 所創立的 status。</p>\n<p>要發送 Post API 到 GitHub 上需要有 accessToken，有使用過 webhook 的讀者應該知道，我們可以輕易從 <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 個人 profile settings 中的 Developer options</a> 產生 Personal Token：</p>\n<p><img src=\"/image/github-personal-token.png\" alt=\"github-personal-token\"></p>\n<p>取得 personal token 後填入上方範例程式碼的 <code class=\"language-text\">accessTokens</code>，就能夠發送 Post request 到我們從 pull request event 中取得的 <strong>statuses_url</strong>，在該 Pull Request 的頁面產生一個 Check status：</p>\n<p><img src=\"/image/github-check-status.png\" alt=\"github-check-status\"></p>\n<p>到這邊為止看起來就完成了，只要我們把程式碼部署到 Cloud Function 上，將 Webhook 的 URL 更改成實際的連結，一切就大功告成。</p>\n<p>對，也不對。</p>\n<p>如果你仔細看一下你創建的 Check Status，你會發現因為你用的是 Personal Token，他會顯示該狀態是由你本人產生的：</p>\n<p><img src=\"/image/github-check-status-issue.png\" alt=\"github-check-status-issue\"></p>\n<p>這當然不是太大的問題，但看起來不是很專業，而且當你用在多個公司專案時，總是出現你的大頭貼好像很討人厭啊。要解決這問題，就需要創建 GitHub App 了。</p>\n<h2 id=\"github-app\" style=\"position:relative;\"><a href=\"#github-app\" aria-label=\"github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub App</h2>\n<p>GitHub App 目前有分兩種類型：OAuth Apps 與普通的 GitHub Apps，官網有詳細的<a href=\"https://developer.github.com/apps/differences-between-apps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">差別說明</a>，我們的案例只需要用到一般的 GitHub Apps 即可，一樣在官網有手把手的<a href=\"https://developer.github.com/apps/quickstart-guides/using-the-github-api-in-your-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">創建教學範例</a>。</p>\n<p>我們之所以需要用到 GitHub App，是因為我們想要能夠以 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub App 的名義去取得 AccessToken</a>，利用該 AccessToken 去創建 pull request 的 check status。</p>\n<p>為此，有幾個步驟需要進行：</p>\n<h4 id=\"在-github-上新增一個-github-app\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-github-%E4%B8%8A%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8B-github-app\" aria-label=\"在 github 上新增一個 github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 GitHub 上新增一個 GitHub App</h4>\n<p>在你個人的 <a href=\"https://github.com/settings/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub developer settings 頁面</a> 中，有個 GitHub Apps 的選項，可以 <strong>New GitHub App</strong>：</p>\n<p><img src=\"/image/github-apps-index.png\" alt=\"github-apps\"></p>\n<p>創建的時候有很多欄位可以填選，像是 App 名稱、網站、Logo 等等，但基本上重要的只有 <strong>Webhook</strong> 與 <strong>Repository Permissions</strong>（其實 GitHub App 除了 repository permission 可以設定外，也能設定到 Organization 與 User 兩種不同層級的權限，不過目前我們只需要 repository 層級即可）：</p>\n<p>跟先前我們在 repo 的 webhook 是ㄧ樣的</p>\n<p><img src=\"/image/github-app-webhook.png\" alt=\"github-app-webhook\"></p>\n<p>為了讓我們的 GitHub App 能存取 Repo 的 Pull request 與 status，需要將這兩個的權限設定為 Read&#x26;Write。</p>\n<p><img src=\"/image/github-app-repo-permission.png\" alt=\"github-app-repo-permission\"></p>\n<p>當你設定完後，下方會出現你可以訂閱的 Event，而我們一樣選擇 <em>pull request</em>：</p>\n<p><img src=\"/image/github-app-subscribe-event.png\" alt=\"github-app-subscribe-event\"></p>\n<h4 id=\"產生該-app-的-private-keys\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F%E8%A9%B2-app-%E7%9A%84-private-keys\" aria-label=\"產生該 app 的 private keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生該 App 的 Private keys</h4>\n<p>當你都創建好 App 後，App settings 的頁面最下方會有一個 <strong>Private keys</strong> 的區塊，點選 <code class=\"language-text\">Generate a private key</code> 的按鈕，會自動下載一份 <code class=\"language-text\">.pem</code> 的檔案到你電腦裡，而這把 Key 就是我們用來產生 JWT 的關鍵：</p>\n<p><img src=\"/image/github-app-private-key.png\" alt=\"github-app-private-key\"></p>\n<h4 id=\"利用該-private-keys-去產生-jwtjson-web-token\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E8%A9%B2-private-keys-%E5%8E%BB%E7%94%A2%E7%94%9F-jwtjson-web-token\" aria-label=\"利用該 private keys 去產生 jwtjson web token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用該 Private keys 去產生 JWT（JSON Web Token）</h4>\n<p>產生 JWT 的方式有很多，在 NodeJS 上我是用 <a href=\"https://github.com/auth0/node-jsonwebtoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Auth0 的 jsonwebtoken</a> 這個套件。</p>\n<p>要產生 GitHub App 能使用來取得 AccessToken 的 JWT，需要將一些資訊利用剛剛下載的那把 key 簽署到 JWT 上 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#jwt-payload\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// issued at time</span>\n    iat<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// JWT expiration time (10 minute maximum)</span>\n    exp<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// GitHub App's identifier</span>\n    iss<span class=\"token operator\">:</span> <span class=\"token constant\">YOUR_APP_ID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// https://github.com/settings/apps/${your app}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> privateKey<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    privateKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/../key/your-app.private-key.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> jsonwebtoken<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'RS256'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最主要的資訊是 <code class=\"language-text\">iss</code>，可以從你的 GitHub App 設定頁面取得 App 的 ID，而其餘時間的資訊其實對我們來說不太重要，因為每次 Cloud Funciton 被呼叫的時候，我們都會重新去申請一次 AccessToken，所以 Expiration 的時間問題不大。</p>\n<p>透過 <code class=\"language-text\">jsonwebtoken.sign</code> 把剛剛下載的 Key 跟相關的 Payload 結合產生 JWT，接著就能拿這個 Token 去申請 AccessToken。</p>\n<h4 id=\"以該-jwt-與-github-app-的-installations-id-去取得屬於該-app-的-accesstoken\" style=\"position:relative;\"><a href=\"#%E4%BB%A5%E8%A9%B2-jwt-%E8%88%87-github-app-%E7%9A%84-installations-id-%E5%8E%BB%E5%8F%96%E5%BE%97%E5%B1%AC%E6%96%BC%E8%A9%B2-app-%E7%9A%84-accesstoken\" aria-label=\"以該 jwt 與 github app 的 installations id 去取得屬於該 app 的 accesstoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>以該 JWT 與 GitHub App 的 installations id 去取得屬於該 App 的 AccessToken</h4>\n<p>要以 GitHub App 的身份取得 AccessToken 需要呼叫的 endpoint 為：</p>\n<p><code class=\"language-text\">POST /app/installations/:installation_id/access_tokens</code> <a href=\"https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a></p>\n<p>其中需要用到 GitHub App 的 installation id，而這個資訊其實也包含在我們 subscribe 的 pull request event 回傳的物件中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>const { pull_request: pullRequest = {}, action } = req.body;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const { pull_request: pullRequest = {}, action, installation } = req.body;</span></code></pre></div>\n<p>在呼叫 access token API 時要注意一點，官方文件特別叮囑：</p>\n<blockquote>\n<p>Note: To access the API with your GitHub App, you must provide a custom media type in the Accept Header for your requests. </p>\n</blockquote>\n<p>所謂的 custom meida type 就是 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，因此在呼叫 API 時記得要將 Accept 改成該類型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAccessToken</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>installationId <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get a JWT every time</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">JWT</span> <span class=\"token operator\">=</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">GITHUB_API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/installations/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>installationId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/access_tokens</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/vnd.github.machine-man-preview+json'</span><span class=\"token punctuation\">,</span>\n        Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JWT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-console</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> exception <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"修改-api-request-header\" style=\"position:relative;\"><a href=\"#%E4%BF%AE%E6%94%B9-api-request-header\" aria-label=\"修改 api request header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改 API request Header</h4>\n<p>最後取得 AccessToken 後，回到我們最初發送 Status API 的 request，將原有的 personal access token 取代掉，並將 Accept header 也改為 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，就大功告成了！</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">const headers = {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Authorization: `Token ${personal accessToken}`,\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Authorization: `Token ${github app accessToken}`,\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Accept: 'application/json',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Accept: 'application/vnd.github.machine-man-preview+json',\n</span>};</code></pre></div>\n<p>透過 GitHub App 取得的 AccessToken 所創建的 Check status 運作起來就會有這樣的效果，就是個第三方 App 所產生的，而不是你個人的大頭照：</p>\n<p><img src=\"/image/github-app-final.png\" alt=\"github-app-final\"></p>\n<p>完整程式碼請參考：<a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一個不小心似乎又把篇幅拉得太長，使用 GitHub App 與 Cloud Function 其實真的很簡單，只是步驟稍微多了些，但每一個步驟都只需要做一點點事情，或是設定一些資訊，只要實作過一次後，要再次使用就會快很多了。</p>\n<p>花費些微的力氣，利用 Serverless 的解決方案搭配 GitHub App/API，能提昇不少生產力，是很值得的投資，希望大家都能試試看！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Developer Guide</a></li>\n<li><a href=\"https://cloud.google.com/functions/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloud Function Docs</a></li>\n<li><a href=\"https://github.com/ewolfe/prlint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prlint github app</a></li>\n</ol>","id":"82bcb2ef-a77c-5d3a-9b38-36499a601a55","fields":{"slug":"github-apps-cloudfunction"},"frontmatter":{"date":"2020-06-14T13:50:00.000Z","title":"利用 Cloud function 製作 GitHub Apps","tags":["GitHub API","javascript","Cloud Function"],"type":"tech","slug":"github-apps-cloudfunction"},"timeToRead":13}],"tagName":"GitHub API","type":"tech"}},"staticQueryHashes":["2123680655"]}