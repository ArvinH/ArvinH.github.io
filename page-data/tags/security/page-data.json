{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/security","result":{"pageContext":{"posts":[{"excerpt":"『既然很幸運不需要為生存掙扎, 那就該盡量過多種的生活比較不枉費自己掌握的資源。』","html":"<blockquote>\n<p>『既然很幸運不需要為生存掙扎, 那就該盡量過多種的生活比較不枉費自己掌握的資源。』</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年年初的時候，W3C 正式將 Web Authentication (WebAuthn) 列入<a href=\"https://www.w3.org/TR/webauthn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">正式標準</a>，開發者可以透過 API 啟動 <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO 2 驗證</a>，讓使用者透過行動裝置、指紋辨識或硬體安全金鑰來登入帳號，不需輸入密碼！</p>\n<p>雖然目前<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">支援度還不高</a>，但既然已成為標準，沒理由不來認識一下何謂 Web Authentication，以及我們可以如何使用。今天就一起來了解我們能如何使用 Web Authentication，增加網站安全性，並免除密碼帶給我們的諸多麻煩。</p>\n<h2 id=\"先回憶一下我們平常的註冊登入方式\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%9B%9E%E6%86%B6%E4%B8%80%E4%B8%8B%E6%88%91%E5%80%91%E5%B9%B3%E5%B8%B8%E7%9A%84%E8%A8%BB%E5%86%8A%E7%99%BB%E5%85%A5%E6%96%B9%E5%BC%8F\" aria-label=\"先回憶一下我們平常的註冊登入方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先回憶一下我們平常的註冊登入方式</h2>\n<p>不管是手機 application 或是網站，只要是需要登入操作的，勢必都會提供一個頁面讓你註冊帳號與密碼，接著你才能拿著這組帳密登入進行使用。這是我們習以為常的使用方式，但隨之而來的問題大家也是見怪不怪：</p>\n<ul>\n<li>每個網站都要想一組新密碼，若用太固定的 pattern 又容易被猜到。</li>\n<li>太複雜的密碼容易忘記。</li>\n<li>自己要防範釣魚網站。</li>\n<li>需要擔心該網站被入侵，密碼遭偷竊。</li>\n</ul>\n<p>而大約有<a href=\"https://duo.com/blog/state-of-the-auth-experiences-and-perceptions-of-multi-factor-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三成左右</a>危機意識較高的使用者會啟用 2FA (2 factor authentication)，但這何嘗不是為使用上帶來更多不便？</p>\n<p>因此 WebAuthn 就是希望來解決這些問題，為我們使用者提供一個除了密碼登入以外的選項。</p>\n<h2 id=\"再來說明一下基本觀念\" style=\"position:relative;\"><a href=\"#%E5%86%8D%E4%BE%86%E8%AA%AA%E6%98%8E%E4%B8%80%E4%B8%8B%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5\" aria-label=\"再來說明一下基本觀念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再來說明一下基本觀念</h2>\n<p>聽到所謂<strong>免密碼登入</strong>，應該很容易聯想到我們透過 SSH 連進遠端 Server 時，大多也會設定免密碼登入，透過的是 <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Public-key cryptography</a> 或又稱 <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asymmetric cryptography</a>，也就是利用產生一組非對稱的加密金鑰：<code class=\"language-text\">private key</code> 與 <code class=\"language-text\">public key</code>，又可稱作 <code class=\"language-text\">credential</code>，讓使用者自己保管 private key，而服務端利用 public key 來驗證使用者的身份。</p>\n<p>WebAuthn 也是利用相同的加密原理來達成免密碼的 Authentication。</p>\n<p><img src=\"/image/oldway-vs-webauthn.png\" alt=\"How we create account\"></p>\n<h2 id=\"進入-api-細節前我們科普一下web-authentication-與-fido\" style=\"position:relative;\"><a href=\"#%E9%80%B2%E5%85%A5-api-%E7%B4%B0%E7%AF%80%E5%89%8D%E6%88%91%E5%80%91%E7%A7%91%E6%99%AE%E4%B8%80%E4%B8%8Bweb-authentication-%E8%88%87-fido\" aria-label=\"進入 api 細節前我們科普一下web authentication 與 fido permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>進入 API 細節前，我們科普一下，Web Authentication 與 FIDO</h2>\n<p>其實很多人會誤解，以為 WebAuthn 指的就是上述利用非對稱加密來達到 authentication 的技術，但實際上，真正規範這項技術的是 <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2</a>，FIDO2 是 FIDO Alliance 的最新規範，裡面包含了一系列技術，讓使用者能透過一些普通的設備，輕易的與線上服務進行 authentication，無論是 Mobile 或是 Desktop。</p>\n<p>FIDO2 規範包含了 WebAuthn 與 Client-to-Authenticator Protocol (CTAP)</p>\n<p><img src=\"/image/FIDO2-Graphic-v3.png\" alt=\"FIDO2\">\nref: <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fidoalliance.org</a></p>\n<p>也就是說，WebAuthn 其實是 FIDO2 的一部分，用來規範標準的 Web API 讓瀏覽器實作。</p>\n<p>目前支援的瀏覽器有 Chrome, Firefox, Edge 與 Safari preview 版。另外也可以再多參考 <a href=\"https://duo.com/blog/developments-to-webauthn-and-the-fido2-framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duo 的文章</a>。</p>\n<p>我們稍微解釋一下上圖：</p>\n<p>當使用者像應用程序要求註冊或登入時，使用 FIDO2 的服務端 (RP App Server) 會告知瀏覽器說，我們現在要用 FIDO Authentication，而瀏覽器則會使用 WebAuthn API，透過 CTAP protocol 來與 Authenticator 溝通，存取到需要的資訊並產生 public key 傳回給服務端。</p>\n<p>這邊出現兩個新名詞：RP app server 與 Authenticator。</p>\n<p>所謂的 RP (Relying Party)，描寫的就是負責註冊與認證使用者的組織或是服務，基本上我覺得就是你的伺服器。</p>\n<p>而 Authenticator 就是負責產生 credential 的軟硬體，例如：TouchID, YubiKey 等等。TouchID 這種存在於設備內部的，屬於 \"platform\" type，而 Yubikey 這類外部硬體設施則屬於 \"cross-platform\" type。</p>\n<h2 id=\"web-authentication-的主要特性\" style=\"position:relative;\"><a href=\"#web-authentication-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\" aria-label=\"web authentication 的主要特性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication 的主要特性：</h2>\n<ul>\n<li>強健的安全體系：Authentication 有安全性硬體作為支援，來儲存私鑰與進行 Web Authentication 需要的加密運算。</li>\n<li>效用受到作用域規範：產生的 Credential keypair 是綁定在 origin 上的，意思是說，註冊在 \"techbridge.com\" 的 keypair 是不能用在 \"bad-techbridge.com\" 的網域上頭，消除了釣魚攻擊的危險。</li>\n<li>受認證的（Attested）：上面提到負責產生 credential 的 Authenticators 可以提供 certificate 來幫助服務端驗證拿到的 public key 是由可信任的 authenticators 發出，而非有害的來源。</li>\n</ul>\n<h2 id=\"web-authentication-api---registering\" style=\"position:relative;\"><a href=\"#web-authentication-api---registering\" aria-label=\"web authentication api   registering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication API - Registering</h2>\n<p>接著我們可以開始來看看如何使用 Web Authentication API 來註冊使用者 （參考至 Duo 的 <a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.guide</a>：</p>\n<p><code class=\"language-text\">navigator.credentials.create()</code></p>\n<p>首先，Server 利用 <code class=\"language-text\">navigator.credentials.create()</code> 來產生 client 的 credential</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> credential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialCreationOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">publicKeyCredentialCreationOptions</code> 中有一堆 required 與 optional 的欄位需要填寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// should generate from server</span>\n<span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userID <span class=\"token operator\">=</span> <span class=\"token string\">'Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> Uint8Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">c</span><span class=\"token operator\">=></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> publicKeyCredentialCreationOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    challenge<span class=\"token punctuation\">,</span>\n    rp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tech Bridge\"</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">\"techbridge.inc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"arvin@techbridge.cc\"</span><span class=\"token punctuation\">,</span>\n        displayName<span class=\"token operator\">:</span> <span class=\"token string\">\"Arvin\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pubKeyCredParams<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>alg<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"public-key\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    authenticatorSelection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        authenticatorAttachment<span class=\"token operator\">:</span> <span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n    attestation<span class=\"token operator\">:</span> <span class=\"token string\">\"direct\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">challenge</code>：challenge 是由 server 產生的一個 buffer，裡面含有一串隨機加密過的 bytes，用來防止 <a href=\"https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"replay attacks\"</a>。這邊單純 demo，用 <code class=\"language-text\">Unit8Array</code> 與 <code class=\"language-text\">window.crypto.getRandomValues</code> 做個示範。</p>\n<p><code class=\"language-text\">rp</code>：先前解釋過，代表 \"relying party\"，指的就是註冊與認證使用者的網站。其中，<code class=\"language-text\">id</code> 一定要是目前網站的 domain 的 subset，像是如果是從 <code class=\"language-text\">techbridge.cc</code> 觸發 WebAuthn 認證，那這邊的 id 就得填寫 <code class=\"language-text\">techbridge.cc</code>。</p>\n<p><code class=\"language-text\">user</code>：就是目前想要註冊的使用者的資訊，這邊的 <code class=\"language-text\">id</code> 很重要，authenticator 會用這個 id 來與 credential 做連結，這樣之後才能透過一樣的 <code class=\"language-text\">id</code> 與一樣的 autenticator 去認證你是同個 user。而這資訊可能會被存在 authenticator 中，依據不同載具與實作會有不同，但是因為有這可能性存在，所以一般不建議 id 內藏有可以認出你本身的相關個人資訊，像是生日等等的。</p>\n<p><code class=\"language-text\">pubKeyCredParams</code>：這個 array 用來描述 Server 支援哪些 types 的 public key (signing algorithms) 。目前 FIDO2 servers 授權支援 RS1、RS256 與 ES256。 <code class=\"language-text\">alg</code> 的數字對應可以從 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">COSE</a> 去找。</p>\n<p><code class=\"language-text\">authenticatorSelection (optional)</code>：可以用來限制 Relying parties 支援的 authenticators 種類，像這邊我指定 platform，就是 Touch ID 之類內建的 authenticators。</p>\n<p><code class=\"language-text\">timeout (optional)</code>：以 milliseconds 為單位，表示說如果使用者在這段 timeout 時間內沒有回應 prompt 的話，就會回傳認證失敗。</p>\n<p><code class=\"language-text\">attestation (optional)</code>：attestation data 是從 authenticator 回傳的內容，server 可以用這個選項來決定要跟 authenticators 拿多少資訊，有三種選項：<em>none</em>、<em>indirect</em> 與 <em>direct</em>。<em>none</em> 指的是 server 不在意 attestation 資料；indirect 表示願意只拿匿名的 attestation 資料；而 direct 代表要求 authenticator 回傳所有 attestation data。</p>\n<h2 id=\"看了一些程式碼來嘗試一下吧\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E4%BA%86%E4%B8%80%E4%BA%9B%E7%A8%8B%E5%BC%8F%E7%A2%BC%E4%BE%86%E5%98%97%E8%A9%A6%E4%B8%80%E4%B8%8B%E5%90%A7\" aria-label=\"看了一些程式碼來嘗試一下吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看了一些程式碼，來嘗試一下吧</h2>\n<p>現在打開瀏覽器的 console，把上面那段 code 複製上去，然後你會發現什麼事都沒發生？！</p>\n<p>因為上面那段 code 當中，我們在 <code class=\"language-text\">rp</code> 中的 id 有指定 <code class=\"language-text\">techbridge.inc</code>，而這並非你目前所在的 domain，因此無法啟用 WebAuthn。</p>\n<p>修改一下，將 <code class=\"language-text\">rp</code> 中的 <code class=\"language-text\">id</code> 移除，再試一次：</p>\n<p><img src=\"/image/webauthn-makecredential.gif\" alt=\"demo - make credentail\"></p>\n<p>就可以 credentials 了！</p>\n<p>另外，因為我們在 <code class=\"language-text\">authenticatorSelection.authenticatorAttachment</code> 中有指定 <code class=\"language-text\">platform</code>，所以當我們一請求 credential 後，Chrome 會直接跳出 prompt 要求使用 TouchID（上面出現 codepen.io 是因為我在 codepen.io 的頁面 console 測試：</p>\n<p><img src=\"/image/touchid-authenticator.png\" alt=\"TouchID authenticator\"></p>\n<p>但如果今天你沒有指定，或是指定為 <code class=\"language-text\">cross-platform</code>，則會顯示如下兩種 prompt：</p>\n<p><strong>cross-platform</strong>：</p>\n<p>會要求你插入實體 usb key。</p>\n<p><img src=\"/image/webauthn-cross-platform.png\" alt=\"cross platform\"></p>\n<p>不指定：</p>\n<p>你有兩種選項可以選擇，使用 TouchID 或是實體 usb key。</p>\n<p><img src=\"/image/webauthn-both.png\" alt=\"two options\"></p>\n<h2 id=\"parsing-與-validating-註冊資料\" style=\"position:relative;\"><a href=\"#parsing-%E8%88%87-validating-%E8%A8%BB%E5%86%8A%E8%B3%87%E6%96%99\" aria-label=\"parsing 與 validating 註冊資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing 與 Validating 註冊資料</h2>\n<p>從剛剛的範例可以看到，呼叫 <code class=\"language-text\">navigator.credentials.create</code> 後會回傳一個 credential 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPublicKeyCredential <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...'</span><span class=\"token punctuation\">,</span>\n    rawId<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> AuthenticatorAttestationResponse <span class=\"token punctuation\">{</span>\n        clientDataJSON<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        attestationObject<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">306</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中：</p>\n<p><code class=\"language-text\">id</code>：代表產生的 credential，在對 user 進行 authentication 時，用此 id 來 identify user credential，是 base64-encoded string。</p>\n<p><code class=\"language-text\">rawId</code>：同上，只是是 binary form。</p>\n<p><code class=\"language-text\">response.clientDataJSON</code>：是瀏覽器產生的一組資料，包含 origin、challenge 等等，這個資料重要在於可以用來防止 phishing attemp。此外，內容是由 authenticator 加密過的。</p>\n<p><code class=\"language-text\">response.attestationObject</code>：包含了 credential public key、optional attestation certificate 與其他 metadata，用 <a href=\"https://cbor.io/impls.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CBOR</a> encoded 過的 binary data。</p>\n<p>拿到 PublicKeyCredential 後，就可以送到 Server 端去進行驗證與後續動作。</p>\n<p>WebAuthn 規範中有描述了一系列<a href=\"https://w3c.github.io/webauthn/#registering-a-new-credential\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">驗證 registration data 的程序</a>，而實作部分則與你用什麼語言有所不同，可以參考 Duo Labs 的 <a href=\"https://github.com/duo-labs/webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go</a> 與 <a href=\"https://github.com/duo-labs/py_webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a> 版本。</p>\n<p>這邊以 JavaScript 為例說明：</p>\n<p>首先，Server 端需要先解析 clientDataJSON：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// decode the clientDataJSON into a utf-8 string</span>\n<span class=\"token keyword\">const</span> utf8Decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decodedClientData <span class=\"token operator\">=</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>\n    credential<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>clientDataJSON<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// parse the string as an object</span>\n<span class=\"token keyword\">const</span> clientDataObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>decodedClientData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clientDataObj</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    challenge<span class=\"token operator\">:</span> <span class=\"token string\">\"ZVTQWf9y7JkEjKFH-iWiKL4FTtTrQJwhYt2kiJQlcM8\"</span>\n    origin<span class=\"token operator\">:</span> <span class=\"token string\">\"https://codepen.io\"</span> <span class=\"token comment\">// again, 因為我在 codepen.io 的頁面 console 測試，所以 origin 才會是這個</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"webauthn.create\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊我們拿出 challenge、origin 與 type 來驗證，challenge 應該要與當初 Server 產生的一致、origin 要正確，且 type 要確定為 create，才能代表是在註冊使用者。如此來避免釣魚與 replay attacks。</p>\n<p>接著，處理 attestationObject，由於是由 CBOR encode，所以需要額外找 lib 來 decode：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 需要找個 CBOR lib 來 decode</span>\n<span class=\"token keyword\">const</span> decodedAttestationObj <span class=\"token operator\">=</span> <span class=\"token constant\">CBOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>attestationObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decodedAttestationObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n    authData<span class=\"token operator\">:</span> <span class=\"token function\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fmt<span class=\"token operator\">:</span> <span class=\"token string\">\"fido-u2f\"</span><span class=\"token punctuation\">,</span>\n    attStmt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        sig<span class=\"token operator\">:</span> <span class=\"token function\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        x5c<span class=\"token operator\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解碼出來後的 <code class=\"language-text\">attestationObject</code> 含有幾項資訊：</p>\n<ul>\n<li>authData：authData 這個 byte array 包含著所有 registration event 的 metadata，以及 public key。</li>\n<li>fmt：這個是包含著 attestation 的 format，如果你在 create credentials 時有要求 Authenticators 提供 attestation data，那 server 可以從這個欄位知道該如何 parse 與 validate attestation data。</li>\n<li>attStmt：這就是要求來的 attestation data，根據 fmt 的不同會有不同的結構，以這邊範例為例，我們拿到的是一個 signature 與 x5c certificate，servers 可以用這資料來驗證 publickey 是不是來自預期的 authenticator，或是根據 authenticator 的資訊而 reject authenticate (像是覺得不能信任該 certifacate，等等)</li>\n</ul>\n<p>最後可以從 authData 中取得更多資料：credentialId、publicKeyBytes、publicKeyObject 等等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>authData<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> decodedAttestationObject<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// get the credential ID</span>\n<span class=\"token keyword\">const</span> credentialId <span class=\"token operator\">=</span> authData<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span> credentialIdLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// get the public key object</span>\n<span class=\"token keyword\">const</span> publicKeyBytes <span class=\"token operator\">=</span> authData<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span> <span class=\"token operator\">+</span> credentialIdLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the publicKeyBytes are encoded again as CBOR</span>\n<span class=\"token keyword\">const</span> publicKeyObject <span class=\"token operator\">=</span> <span class=\"token constant\">CBOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>publicKeyBytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>整個 Validation process 完成後，Server 就能將 publicKeyBytes 與 credentialId 存進資料庫，與使用者關聯起來。</p>\n<p>到這邊為止，我們走完了 <code class=\"language-text\">Registering</code> 的流程。而剛剛都是直接在 console 貼入程式碼，如果想看稍微”真實“一點的範例，可以到 <a href=\"https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html</a> 這個網址玩玩看，點選 button 註冊的流程。</p>\n<p><img src=\"/image/more-real-demo-1.png\" alt=\"more real demo\"></p>\n<p>接著，再努力一下，看看 <code class=\"language-text\">Authenticating</code>，也就是登入時要走的步驟吧！</p>\n<h2 id=\"web-authentication-api---authenticating\" style=\"position:relative;\"><a href=\"#web-authentication-api---authenticating\" aria-label=\"web authentication api   authenticating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication API - Authenticating</h2>\n<p>Authenticated 的過程中，使用者會用其持有的 private key 簽上一個 signature 到 assertion 上頭，並傳給 server，server 則利用 public key 來驗證該 signature。</p>\n<p><code class=\"language-text\">navigator.credentials.get()</code></p>\n<p>Authentication 的過程在於使用者要證明他們擁有註冊時所提交的 key pair 中的 private key。證明方法為利用 <code class=\"language-text\">navigator.credentials.get()</code> 取得註冊時的 credential，並附上 signature。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> credential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialRequestOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> publicKeyCredentialRequestOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    challenge<span class=\"token punctuation\">,</span>\n    allowCredentials<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> credentialId<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from registration</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span><span class=\"token punctuation\">,</span>\n        transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'usb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ble'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nfc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> assertion <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialRequestOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>跟註冊時比較不同的是 <code class=\"language-text\">allowCredentials</code>，這欄位是 Servers 端想要瀏覽器提供的 credentials 資訊，用來認證使用者，其中 id 為註冊時獲取的 credentialId。此外也能指定要用哪種方式傳輸 credentials (usb、bluetooth 或 NFC)。你可以填入多個 credentialId，authenticator 會找出他認識的來使用。</p>\n<p><code class=\"language-text\">navigator.credentials.get</code> 取得的 <code class=\"language-text\">assertion</code> 也是一個 <code class=\"language-text\">PublicKeyCredential</code> object，跟註冊時的差別在於，這次我們拿到的多了 signature，少了 public key。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPublicKeyCredential <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...'</span><span class=\"token punctuation\">,</span>\n    rawId<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> AuthenticatorAssertionResponse <span class=\"token punctuation\">{</span>\n        authenticatorData<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        clientDataJSON<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        userHandle<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本結構都差不多，多出來的 <code class=\"language-text\">signature</code> 是由 private key 與此 credential 所產生，在 server 端可以用 public key 來驗證此 signature。</p>\n<p><code class=\"language-text\">userHandle</code> 則是 authenticator 提供的使用者 id，也是註冊時使用的那組。在 Server 端可以用來關聯使用者。</p>\n<h2 id=\"parsing-與-validating-登入資料\" style=\"position:relative;\"><a href=\"#parsing-%E8%88%87-validating-%E7%99%BB%E5%85%A5%E8%B3%87%E6%96%99\" aria-label=\"parsing 與 validating 登入資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing 與 Validating 登入資料</h2>\n<p>拿到 assertion 後，可以送往 server 進行驗證，server 會用註冊時的 public key 來驗證 signature。</p>\n<p>一樣，Server 端實作有各種語言版本：<a href=\"https://github.com/duo-labs/webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go</a> 與 <a href=\"https://github.com/duo-labs/py_webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a>，等等。</p>\n<p>這邊簡單舉例：</p>\n<p>首先，從資料庫中取得 credential。接著利用 public key 和 client 傳來的 signature 與 authenticator data 和 SHA-256 hash 過的 cliendDataJSON 做驗證。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> storedCredential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCredentialFromDatabase</span><span class=\"token punctuation\">(</span>userHandle<span class=\"token punctuation\">,</span> credentialId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> signedData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>authenticatorDataBytes <span class=\"token operator\">+</span> hashedClientDataJSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> signatureIsValid <span class=\"token operator\">=</span> storedCredential<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> signedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signatureIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Nice! User is authenticated!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oops, verification failed.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就把一段無密碼登入的註冊與登入流程都走完了！一樣，可以到 <a href=\"https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html</a> 來玩玩看實際一點的範例。</p>\n<p><img src=\"/image/more-real-demo-2.gif\" alt=\"more real demo\"></p>\n<h2 id=\"結論與更多資源\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96%E8%88%87%E6%9B%B4%E5%A4%9A%E8%B3%87%E6%BA%90\" aria-label=\"結論與更多資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論與更多資源</h2>\n<p>今天花了點時間把 Web Authentication 的概念與大致的實作方式瞭解了一番，雖然才剛成為標準，離全部瀏覽器都支援還需要一點時間，但最新版的瀏覽器幾乎都已支援（至少桌機版），想必不久的未來，passwordless 的登入會是一種趨勢。</p>\n<p>這邊再多提供幾個網站資源供大家參考，裡面有更為豐富的範例程式，以及詳細的 API 與情境解說：</p>\n<ol>\n<li><a href=\"https://duo.com/blog/tags/web-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duo blog</a> - Duo 是 Cisco 旗下的公司，主要發展與 Authentication 與 security 相關的產品，也因此針對 web authentication 有不少的文章教學與介紹。</li>\n<li><a href=\"https://github.com/herrjemand/FIDO2WebAuthnSeries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2WebAuthnSeries</a> - 這是我在找資料過程中發現的範例 github，裡面有多種情境的 source code 與 demo，推薦大家去玩玩看，看看程式碼，想必會更加了解。作者也有在 Medium 上寫了一篇<a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長文</a>介紹，更詳細的說明各種情境的 Web authentication 應用會是如何的流程，而我們的程式碼又該如何修改。如果覺得這篇文章內的範例與說明不夠清楚，可以到他的 medium 看看。</li>\n</ol>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.guide</a></li>\n<li><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to WebAuthn API</a></li>\n<li><a href=\"https://github.com/herrjemand/FIDO2WebAuthnSeries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2WebAuthnSeries</a></li>\n<li><a href=\"https://webauthn.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.io</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Authentication API - MDN</a></li>\n</ol>","id":"e8f002a3-30f5-5fda-ba02-bdcbc3fc734d","fields":{"slug":"webauthn-intro"},"frontmatter":{"date":"2019-08-17T10:29:18.000Z","title":"一起來了解 Web Authentication","tags":["web","authentication","security"],"type":"tech","slug":"webauthn-intro"},"timeToRead":15}],"tagName":"security","type":"tech"}},"staticQueryHashes":["2123680655"]}