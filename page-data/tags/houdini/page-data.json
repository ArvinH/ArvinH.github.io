{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/houdini","result":{"pageContext":{"posts":[{"excerpt":"\"I stopped checking email for entire week and it change my life!\"\nOh, really?\n\"I got fired.\"","html":"<blockquote>\n<p>\"I stopped checking email for entire week and it change my life!\"\nOh, really?\n\"I got fired.\"</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>今天想繼續 CSS 的議題，常常會覺得學 CSS 的新發展不太划算，因為每次看到新的 Feature 出現，都只能當下興奮個幾分鐘，然後就會認命接受可能還要再等個五年才能真正使用的可能性...如果你有跟我一樣的感受，那今天這篇文章或許可以帶給你一絲絲希望。</p>\n<p>在現今的 Web 開發中，JavaScript 幾乎佔據所有版面，除了控制頁面邏輯與操作 DOM 物件以外，連 CSS 都直接寫在 JavaScript 裡面了，就算瀏覽器都還沒有實作的規格，總會有人做出對應的 Polyfills，讓你快速的將新 Feature 應用到 Production 環境中，更別提我們還有 Babel 等工具幫忙轉譯。</p>\n<p>而 CSS 就不同了，除了制定 CSS 標準規格所需的時間外，各家瀏覽器的版本、實作進度差異更是曠日費時，再加上 CSS 並非 Javascript 這樣的動態語言，我們無法簡單的提供 Polyfills，頂多利用 PostCSS、SASS 等工具來幫我們轉譯出瀏覽器能接受的 CSS，而剩下的就是瀏覽器的事了。</p>\n<p>這邊讓我們回想一下，瀏覽器在網頁的渲染過程中，做了哪些事情？</p>\n<p><img src=\"/image/render_pipeline.png\" alt=\"Render Pipeline (source from google)\"></p>\n<p>瀏覽器的 Render Pipeline 中，<strong>JavaScript</strong> 與 <strong>Style</strong> 兩個階段會解析 HTML 並為載入的 JS 與 CSS 建立 Render Tree，也就是所謂的 DOM 與 CSSOM：（對於 Render Pipeline 與 Render Tree 若不了解，可以先看看我先前的文章 <a href=\"https://blog.arvinh.info/2016/03/26/Front-end%20kata%2060fps%E7%9A%84%E5%BF%AB%E6%84%9F/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Front-end kata 60fps的快感</a>）</p>\n<p><img src=\"/image/RenderTree.png\" alt=\"Render Tree (source from google)\"></p>\n<p>而就現階段的 Web 技術來看，開發者們能操作的就是透過 JS 去控制 DOM 與 CSSOM，來影響畫面的變化，但是對於接下來的 <strong>Layout</strong>、<strong>Paint</strong> 與 <strong>Composite</strong> 就幾乎沒有控制權了。</p>\n<p>既無法讓各家瀏覽器快速並統一實作規格，亦不能輕易產生 Polyfills，所以到現在我們依然無法大膽使用 Flexbox，即便它早在 2009 年就被提出了...</p>\n<p>但 CSS 並非就此駐足不前。</p>\n<p>為了解決上述問題，為了讓 CSS 的魔力不再被瀏覽器把持，Houdini 就誕生了！（ Houdini 是美國的偉大魔術師，擅長逃脫術，很適合想將 CSS 從瀏覽器中解放的概念）</p>\n<h2 id=\"css-houdini\" style=\"position:relative;\"><a href=\"#css-houdini\" aria-label=\"css houdini permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Houdini</h2>\n<p>CSS Houdini 是由一群來自 Mozilla, Apple, Opera, Microsoft, HP, Intel, IBM, Adobe 與 Google 的工程師所組成的工作小組，志在建立一系列的 API，讓開發者能夠介入瀏覽器的 CSS engine 運作，帶給開發者更多的解決方案，用來解決 CSS 長久以來的問題：</p>\n<ul>\n<li>Cross-Browser isse</li>\n<li>CSS Polyfill 的製作困難</li>\n</ul>\n<p>Houdini task force 目前起草了一些 API 規範，並逐步努力讓其通過 W3C，成為真正的 Web standards。\n由於都是草稿階段，有些甚至只有規劃，還未被真正寫入規範，所以變動很大，有些我也不是很了解，所以就大致介紹一下，若有錯誤拜託務必告知！\n另外，有興趣的讀者可以直接從這裡 <a href=\"http://dev.w3.org/houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini Drafts</a> 看詳細內容（ Drafts 的更新時間都非常近期，活躍中的草稿！）。</p>\n<p>下面這張圖我將 Google 提供的 Render pipeline 與 <a href=\"https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini: Maybe The Most Exciting Development In CSS You’ve Never Heard Of</a> 中提到的 pipeline 做個結合對比，顯示出 Houdini 試圖在瀏覽器的 Render pipeline 中提供哪些 API 給開發者使用：</p>\n<p><img src=\"/image/huodini-apis.png\" alt=\"Houdini API on render pipeline\"></p>\n<p>其中灰色部分就是只在規劃階段，而黃色部份就是已經寫入規範正在推行中。</p>\n<h2 id=\"houdini-api-介紹\" style=\"position:relative;\"><a href=\"#houdini-api-%E4%BB%8B%E7%B4%B9\" aria-label=\"houdini api 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Houdini API 介紹</h2>\n<h3 id=\"css-properties-and-values-api\" style=\"position:relative;\"><a href=\"#css-properties-and-values-api\" aria-label=\"css properties and values api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Properties and Values API</h3>\n<p>先介紹一個最能夠使用的 API，除了 IE family 以外，Chrome、Firefox 與 Safari 都已經能夠直接使用了！ <a href=\"http://caniuse.com/#search=custom%20properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">caniuse</a></p>\n<p>相信很多人都使用過 CSS Preprocessors，他給予開發者在 CSS 中使用變數的能力：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$font-size</span></span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$brightBlue</span></span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">.mark</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.5 <span class=\"token operator\">*</span> <span class=\"token variable\">$font-size</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$brightBlue</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但其實使用 Preprocessors 還是有其缺點，像是不同的 Preprocessors 就有不同的 Syntax，需要額外 setup 與 compile，\n而現在 CSS 已經有原生的變數可以使用了！就是 CSS Properties and Values API！</p>\n<p>SCSS 與 Native CSS Custom Properties 的一個主要差別可以看<a href=\"http://slides.com/malyw/houdini-codemotion#/18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">下圖</a>：</p>\n<p><img src=\"/image/scss-vs-css.png\" alt=\"source from http://slides.com/malyw/houdini-codemotion#/18\"></p>\n<p>原生的 CSS variable syntax：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* declaration */</span>\n<span class=\"token property\">--VAR_NAME</span><span class=\"token punctuation\">:</span> &lt;declaration-value><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* usage */</span>\n<span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--VAR_NAME<span class=\"token punctuation\">)</span></code></pre></div>\n<p>變數可以定義在 root element selector 內，也能在一般 selector 內，甚至是給別的變數 reuse：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/* root element selector (全域) */</span>\n<span class=\"token selector\">:root </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--main-color</span><span class=\"token punctuation\">:</span> #ff00ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--main-bg</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>200<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--block-font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.btn__active::after</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--btn-text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'This is btn'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 相等於 --box-highlight-text:'This is btn been actived'; */</span>\n  <span class=\"token property\">--btn-highlight-text</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--btn-text<span class=\"token punctuation\">)</span><span class=\"token string\">' been actived'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--btn-highlight-text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 也能使用 calc 來做運算 */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--block-font-size<span class=\"token punctuation\">)</span>*1.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* variable usage */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而有了變數以後，會為 CSS 帶來什麼好處應該很明顯，他的 Use case 可以多寫一篇文章來介紹了，<a href=\"https://blog.hospodarets.com/css_properties_in_depth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">或是可以直接看這篇的詳細介紹</a>，我這邊介紹幾個我覺得比較有趣的：</p>\n<ol>\n<li>\n<p>模擬一個特殊的 CSS rule:</p>\n<p>單純透過更改變數來達到改變 box-shadow 顏色</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.textBox</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">--box-shadow-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 30px <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--box-shadow-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.textBox:hover</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">/* box-shadow: 0 0 30px green; */</span>\n<span class=\"token property\">--box-shadow-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>動態調整某個 CSS rule 內的各別屬性：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"ZKKyer\" data-default-tab=\"html,result\" data-user=\"malyw\" data-embed-version=\"2\" data-pen-title=\"Generated colors from CSS custom properties\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/malyw/pen/ZKKyer/\">Generated colors from CSS custom properties</a> by Serg Hospodarets (<a href=\"https://codepen.io/malyw\">@malyw</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n</li>\n</ol>\n<p>此外，我們也可以用 JavaScript 來控制：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> textBox <span class=\"token operator\">=</span> \n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.textBox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// GET</span>\n<span class=\"token keyword\">const</span> Bxshc <span class=\"token operator\">=</span> <span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>textBox<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--box-shadow-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SET</span>\ntextBox<span class=\"token punctuation\">.</span>style\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--box-shadow-color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'new color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>非常好用的特性，幾乎所有主流瀏覽器都已經支援了，大家快來使用吧！</p>\n<h3 id=\"box-tree-api\" style=\"position:relative;\"><a href=\"#box-tree-api\" aria-label=\"box tree api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box Tree API</h3>\n<p>Box tree API 並沒有出現在上圖中，但在 Paintin API 中會用到其概念。\n大家都知道在 DOM tree 中的每個元素都有一個 Box Modal，而在瀏覽器解析過程中，還會將其拆分成 fragments，至於什麼是 fragments？以 drafts 中的例子來解釋：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"wdZvOm\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"fragments-sample\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/wdZvOm/\">fragments-sample</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>上面的 HTML 總共就會拆出七個 fragments：</p>\n<ul>\n<li>最外層的 div</li>\n<li>第一行的 box (包含 foo bar)</li>\n<li>第二行的 box (包含 baz)</li>\n<li>吃到 <code class=\"language-text\">::first-line</code> 與 <code class=\"language-text\">::first-letter</code> 的 f 也會被拆出來成獨立的 fragments</li>\n<li>只吃到 <code class=\"language-text\">::first-line</code> 的 oo 只好也獨立出來</li>\n<li>吃到 <code class=\"language-text\">::first-line</code> 與 包在 <code class=\"language-text\">&lt;i></code> 內的 bar 當然也是</li>\n<li>在第二行底下且為 italic 的 <code class=\"language-text\">baz</code></li>\n</ul>\n<p>而 Box tree API 目的就是希望讓開發者能夠取得這些 fragments 的資訊，至於取得後要如何使用，基本上應該會跟後面會介紹的 Parser API、Layout API 與 Paint API 有關聯，當我們能取得詳細的 Box Modal 資訊時，要客製化 Layout Module 才更為方便。</p>\n<h3 id=\"css-layout-api\" style=\"position:relative;\"><a href=\"#css-layout-api\" aria-label=\"css layout api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Layout API</h3>\n<p>Layout API 顧名思義就是提供開發者撰寫自己的 Layout module，Layout module 也就是用來 assign 給 <code class=\"language-text\">display</code> 屬性的值，像是 <code class=\"language-text\">display: grid</code> 或 <code class=\"language-text\">display: flex</code>。\n你只要透過 <code class=\"language-text\">registerLayout</code> 的 function，傳入 Layout 名稱與 JS class 來定義 Layout 的邏輯即可，例如我們實作一個 <code class=\"language-text\">block-like</code> 的 Layout：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsblocklike.js\"><pre class=\"language-jsblocklike.js\"><code class=\"language-jsblocklike.js\">registerLayout(&#39;block-like&#39;, class extends Layout {\n    static blockifyChildren = true;\n    static inputProperties = super.inputProperties;\n\n    *layout(space, children, styleMap) {\n        const inlineSize = resolveInlineSize(space, styleMap);\n\n        const bordersAndPadding = resolveBordersAndPadding(constraintSpace, styleMap);\n        const scrollbarSize = resolveScrollbarSize(constraintSpace, styleMap);\n        const availableInlineSize = inlineSize -\n                                    bordersAndPadding.inlineStart -\n                                    bordersAndPadding.inlineEnd -\n                                    scrollbarSize.inline;\n\n        const availableBlockSize = resolveBlockSize(constraintSpace, styleMap) -\n                                   bordersAndPadding.blockStart -\n                                   bordersAndPadding.blockEnd -\n                                   scrollbarSize.block;\n\n        const childFragments = [];\n        const childConstraintSpace = new ConstraintSpace({\n            inlineSize: availableInlineSize,\n            blockSize: availableBlockSize,\n        });\n\n        let maxChildInlineSize = 0;\n        let blockOffset = bordersAndPadding.blockStart;\n\n        for (let child of children) {\n            const fragment = yield child.layoutNextFragment(childConstraintSpace);\n\n            // 這段控制 Layout 下的 children 要 inline 排列\n            // fragment 應該就是前述的 Box Tree API 內提到的 fragment\n            fragment.blockOffset = blockOffset;\n            fragment.inlineOffset = Math.max(\n                bordersAndPadding.inlineStart,\n                (availableInlineSize - fragment.inlineSize) / 2);\n\n            maxChildInlineSize =\n                Math.max(maxChildInlineSize, childFragments.inlineSize);\n            blockOffset += fragment.blockSize;\n        }\n\n        const inlineOverflowSize = maxChildInlineSize + bordersAndPadding.inlineEnd;\n        const blockOverflowSize = blockOffset + bordersAndPadding.blockEnd;\n        const blockSize = resolveBlockSize(\n            constraintSpace, styleMap, blockOverflowSize);\n\n        return {\n            inlineSize: inlineSize,\n            blockSize: blockSize,\n            inlineOverflowSize: inlineOverflowSize,\n            blockOverflowSize: blockOverflowSize,\n            childFragments: childFragments,\n        };\n    }\n});</code></pre></div>\n<p>上面這段 code 是來自 <a href=\"https://drafts.css-houdini.org/css-layout-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">houdini draft 的範例</a>，完整放上來是想給大家看一下實作一個 Layout 需要注意的細節有多少，其實並不是如想像中的輕鬆，\n相信未來會出現更多方便的 API 輔助開發。（放心接下來不會再有這麼多 code 了 XD）</p>\n<p>有了 Layout API，不管是自己實作或是拿別人寫好的 Layout，你都可以直接如下方式使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token function\">layout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'block-like'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"css-painting-api\" style=\"position:relative;\"><a href=\"#css-painting-api\" aria-label=\"css painting api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Painting API</h3>\n<p>Painting API 與 Layout 類似，提供一個叫做 <code class=\"language-text\">registerPaint</code> 的方法：</p>\n<p>定義 Paint Method，這邊偷偷用到了待會要介紹的 CSS Properties：</p>\n<div class=\"gatsby-highlight\" data-language=\"jssimplerect.js\"><pre class=\"language-jssimplerect.js\"><code class=\"language-jssimplerect.js\">registerPaint(&#39;simpleRect&#39;, class {\n    static get inputProperties() { return [&#39;--rect-color&#39;]; }\n    paint(ctx, size, properties) {\n        // 依據 properties 改變顏色\n        const color = properties.get(&#39;--rect-color&#39;);\n        ctx.fillStyle = color.cssText;\n        ctx.fillRect(0, 0, size.width, size.height);\n    }\n});</code></pre></div>\n<p>宣告使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.div-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.div-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 50% 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">.div-1</code> 與 <code class=\"language-text\">.div-2</code> 就可以擁有各自定義寬高顏色的方形 background-image</p>\n<h3 id=\"worklets\" style=\"position:relative;\"><a href=\"#worklets\" aria-label=\"worklets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Worklets</h3>\n<p>在上述的 Layout API 與 Paint API 中，我們都有撰寫一支 js 檔案，用來定義新的屬性，然後在 css 檔案中呼叫取用，你可能會覺得那支 js 檔案就直接像一般 web 嵌入 js 的方式一樣即可，\n但實際上並非如此，我們需要透過 <strong>Worklets</strong> 來幫我們載入。以上面的 Paint API 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add a Worklet</span>\npaintWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// WORKLET \"simpleRect.js\"</span>\n<span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>同理，Layout API 則是 <code class=\"language-text\">layoutWorklet.addModule('blockLike.js')</code>。</p>\n<p><strong>Worklets</strong> 光名字就有點像 Web Worker 了，都是獨立於主要執行緒之外，並且不直接與 DOM 互動。你可能會想那為何還需要有一個 Worklets？</p>\n<p>因為 Houdini 是希望將開發者的程式碼 hook 到 CSS engine 中運作，而根據規範內的敘述，web worker 相對笨重，不適合用來處理 CSS engine 這種可能會牽扯到數百萬畫素圖片的工作。\n所以可以推斷，Worklets 的特點就是輕量以及生命週期較短。</p>\n<p>其實除了 Layout Worklets 與 Paint Worklets 外，還有所謂的 Animation Worklet，雖然還沒有放入規範，但已經有在著手進行中，也有 <a href=\"https://github.com/GoogleChrome/houdini-samples/tree/master/animation-worklet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polyfills</a> 了，Chrome 的 Sticky Header 就是採用 Houdini 的 Animation Worklet。Twitter 的 <a href=\"https://blog.hospodarets.com/demos/houdini-anim-twitter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Header Effect</a> 也是採用 Animation Worklet\nAnimation Worklet 是想介入 Render Pipeline 中的 Composite 步驟，也就是原本利用 js 與 css 控制動畫時，瀏覽器會重新執行的部分。\n關於 Animation Worklet 的詳細實作介紹可以看這份投影片 <a href=\"http://slides.com/malyw/houdini-codemotion#/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">houdini-codemotion</a></p>\n<h3 id=\"css-parser-api\" style=\"position:relative;\"><a href=\"#css-parser-api\" aria-label=\"css parser api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Parser API</h3>\n<p>Parser API 目前還是處在 Unofficial draft，但我相信如果這個 API 確認的話，對前端開發有絕對的幫助，她的概念是想讓開發者能擴充瀏覽器解析 HTML、CSS 的功能，\n也就是說，你可以想辦法讓他看得懂最新定義的 pseudo-classes 或甚至是 element-queries 等等，這樣就能正確解析出 CSSOM，從此不用再等瀏覽器更新。</p>\n<h3 id=\"css-typed-om\" style=\"position:relative;\"><a href=\"#css-typed-om\" aria-label=\"css typed om permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Typed OM</h3>\n<p>CSS Typed OM 就是 CSSOM 的強化版，最主要的功能在於將 CSSOM 所使用的字串值轉換成具有型別意義的 JavaScript 表示形態，像是所有的 CSS Values 都有一個 base class interface：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CSSStyleValue</span> <span class=\"token punctuation\">{</span>\n    stringifier<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> CSSStyleValue<span class=\"token operator\">?</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>DOMString property<span class=\"token punctuation\">,</span> DOMString cssText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> sequence<span class=\"token operator\">&lt;</span>CSSStyleValue<span class=\"token operator\">></span><span class=\"token operator\">?</span> <span class=\"token function\">parseAll</span><span class=\"token punctuation\">(</span>DOMString property<span class=\"token punctuation\">,</span> DOMString cssText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你可以如下操作 CSS style: (source from <a href=\"http://slides.com/malyw/houdini-codemotion#/27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CSS -> JS</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>styleMap<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSSimpleLength {value: 12, type: \"px\", cssText: \"12px\"}</span>\n\n<span class=\"token comment\">// JS -> JS</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSUnitValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSUnitValue{value:5,unit:\"px\",type:\"length\",cssText:\"5px\"}</span>\n\n<span class=\"token comment\">// JS -> CSS</span>\n<span class=\"token comment\">// set style \"transform: translate3d(0px, -72.0588%, 0px);\"</span>\nelem<span class=\"token punctuation\">.</span>outputStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTransformValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTranslation</span><span class=\"token punctuation\">(</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSSimpleLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> currentPercent<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>根據 <a href=\"https://drafts.css-houdini.org/css-typed-om/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Drafts 的內容</a>，有了型別定義，在 JavaScript 的操作上據說會有效能上的顯著提升。此外，CSS Typed OM 也應用在 Parser API 與 CSS Properties API 上。</p>\n<h3 id=\"font-metrics-api\" style=\"position:relative;\"><a href=\"#font-metrics-api\" aria-label=\"font metrics api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Font Metrics API</h3>\n<p>Font Metrics 也沒有出現在上方的 <strong>Houdini API on render pipeline</strong> 中，但它其實已經被寫入 <a href=\"https://drafts.css-houdini.org/font-metrics-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draft 規範</a> 中了。\n老實說看不是很懂他的 spec 寫的內容，但我猜測這東西的用途應該跟這篇文章 <a href=\"http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep dive CSS: font metrics, line-height and vertical-align</a> 其中提到一個問題有關，（裡面非常詳細的介紹了 font metrics、line-height 與 vertical-align 在網頁上如何互相影響，推薦大家有空的話耐心閱讀一番。）：</p>\n<p>不同 font-family 在相同 font-size 下，所產生的 span 高度會不同。</p>\n<p><img src=\"/image/font-size.png\" alt=\"source from http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align\"></p>\n<p>要想控制 Font metrics，也就是控制字所佔的寬高的話，目前可以先用 CSS Properties 來處理，根據已知字體的 font-metrics 動態算出我們要 apply 多少的 font-size：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 定義好我們已知字型的 Font metrics */</span>\n    <span class=\"token comment\">/* font metrics */</span>\n    <span class=\"token property\">--font</span><span class=\"token punctuation\">:</span> Catamaran<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-capitalHeight</span><span class=\"token punctuation\">:</span> 0.68<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-descender</span><span class=\"token punctuation\">:</span> 0.54<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-ascender</span><span class=\"token punctuation\">:</span> 1.1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-linegap</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 定義想要的高度 */</span>\n    <span class=\"token property\">--capital-height</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 設定 font-family */</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 利用 Font metrics 的資訊與想定義的高度來計算出 font-size */</span>\n    <span class=\"token property\">--computedFontSize</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--capital-height<span class=\"token punctuation\">)</span> / <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--fm-capitalHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--computedFontSize<span class=\"token punctuation\">)</span> * 1px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而想必 Font Metrics API 就是希望能 expose 出更方便的 API 來達成上述的事情。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<!-- JS 與 CSS 的發展速度剛好相反 -->\n<p>Web 開發基本上就是由 HTML、JS、CSS 三大要素構成，然而 JS 與 CSS 的發展差異卻極其龐大，一個速度快到讓人跟不上，一個則是等半天還是無法放心使用新規格，實在非常有趣...\n但透過這次了解 Houdini API 的過程，理解到了 CSS 算是朝向好的方向前進，雖然很多離實際採用還有段距離，但至少我們已經能夠在最新的瀏覽器上使用 Custom Properties 了！CSS 的未來還是充滿希望的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/malyw/houdini-codemotion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</li>\n<li><a href=\"https://drafts.css-houdini.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini Draft</a></li>\n<li><a href=\"http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep dive CSS: font metrics, line-height and vertical-align</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini: Maybe The Most Exciting Development In CSS You’ve Never Heard Of</a></li>\n<li><a href=\"https://github.com/GoogleChrome/houdini-samples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">houdini-samples</a></li>\n<li><a href=\"https://github.com/w3c/css-houdini-drafts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini API Draft</a></li>\n</ol>","id":"9560287f-56d5-5dd8-8ecf-f72cb4e30c0e","fields":{"slug":"css-houdini-custom-properties"},"frontmatter":{"date":"2017-05-23T19:44:02.000Z","title":"CSS 魔術師 Houdini API 介紹","tags":["css","houdini"],"type":"tech","slug":"css-houdini-custom-properties"},"timeToRead":13}],"tagName":"houdini","type":"tech"}},"staticQueryHashes":["2123680655"]}