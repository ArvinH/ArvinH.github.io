{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/figma","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：Figma In Quarantine: The Musical","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/vHXmj3hN5mI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Figma In Quarantine: The Musical</a></p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Figma 已經是現在設計師間的必備武器，不少人都已經從 <a href=\"https://medium.com/as-a-product-designer/%E6%88%91%E5%BE%9E-sketch-%E8%80%81%E7%B2%89%E8%AE%8A%E6%88%90-figma-%E9%90%B5%E7%B2%89%E7%9A%84-10-%E5%80%8B%E7%90%86%E7%94%B1-4a47a4e394c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sketch 轉移到 Figma</a> 上，其免費方案幾乎包含所有核心功能，讓像我一樣沒有設計專業的工程師也能毫無壓力的使用。</p>\n<p>Figma 主要建構於 Web 技術，透過 <code class=\"language-text\">Webassembly</code> 來使用 C++ 等模組，而其推出的 Plugin 平台理所當然也能由 Javascript 撰寫。</p>\n<p>基於這個事實，讓我覺得或許學習一下如何撰寫 Figma plugin 是個不錯的投資，如果能提供公司內部設計師所需要的外掛，不僅能提升整體工作的效率，也能提高自己對團隊的影響力，雙贏策略！所以今天就來學習一下如何製作 Figma plugin！</p>\n<p>如果有讀者不太知道 Figma plugin 會長什麼樣子，這邊給大家看個範例：</p>\n<p><img src=\"/image/figma-plugin-demo.gif\" alt=\"demo\"></p>\n<p>也可以去官方 <a href=\"https://www.figma.com/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">community</a> 網站看看其他實際發佈上線的外掛，並載下來試用。</p>\n<p>上圖的範例是為設計中的元件加入一些 status，像是 <code class=\"language-text\">In review</code>，<code class=\"language-text\">Work in progress</code> 等等。（實際上早已有人實作ㄧ樣點子的<a href=\"https://www.figma.com/community/plugin/742769304454952644/Status-%E2%9C%85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">外掛</a>，也比較完善，所以我也不打算發佈出去，就當作一個練習，並拿來說明實作過程，<a href=\"https://github.com/ArvinH/figma-status-label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼在此</a>。）</p>\n<p>在開始之前，想跟大家分享一個很讚的東西，這是一齣由 Figma 員工在其內部一年兩次的 Maker Weeks 中所製作的音樂劇，完整體現 2020 年因為武漢肺炎而造成的許多工作軼事，其中還包含他們處理 incident 的過程，好聽之外也非常有趣，他們應該都工作得很愉快吧：）</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/vHXmj3hN5mI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><em>剛好最近又是他們的 Maker Weeks，可以到 Figma 的 <a href=\"https://twitter.com/figmadesign\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a> 看看員工分享他們做了什麼！</em></p>\n<h2 id=\"一些簡單的前置作業\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E4%BA%9B%E7%B0%A1%E5%96%AE%E7%9A%84%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\" aria-label=\"一些簡單的前置作業 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些簡單的前置作業</h2>\n<p>如果你跟我一樣，是個蠻愛跟風的前端工程師，需要做的前置作業相信你都早已準備好了。</p>\n<p>基本就是需要你有能夠運行 Typescript、Nodejs 與 NPM 的環境、適合 TS 的編輯器（VScode, etc）以及桌面版本的 Figma。</p>\n<p>對，目前若是要開發 Figma Plugin，你必須使用桌面版本，他們才能讀取你本地端的程式來執行。</p>\n<h2 id=\"figma-plugin-context-介紹\" style=\"position:relative;\"><a href=\"#figma-plugin-context-%E4%BB%8B%E7%B4%B9\" aria-label=\"figma plugin context 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Figma plugin context 介紹</h2>\n<p>在真的進入開發階段前，先了解一下 Figma plugin 是怎麼運作，其基本架構為何，對開發會有不小的幫助，就像是你開發 Chrome extension 時，也得先搞懂何謂 <code class=\"language-text\">background scripts</code>、<code class=\"language-text\">content scripts</code> ㄧ樣。</p>\n<p>如同前面所說，Figma plugin 全由 Web 技術打造，也就是 Javascript、CSS 與 HTML，然而為了維持 Figma 本身的穩定與安全性，你的 plugin 需要拆分成兩個部分，執行在不同的環境：</p>\n<ul>\n<li><strong>Sandbox</strong></li>\n</ul>\n<p>一部分是運行在 Figma main thread 中 Sandbox 內的程式，可以使用完整的 ES6 Javascript，存取操作 Figma 檔案內容，但無法存取 DOM 物件，也無法發出網路請求。</p>\n<ul>\n<li><strong>iframe</strong></li>\n</ul>\n<p>另一部分則是運行在 iframe 內，可以存取 DOM 元素、發起網路請求等一般的網頁功能，因此也是你提供 plugin 使用者外掛操作介面的地方。</p>\n<p>從<a href=\"https://www.figma.com/plugin-docs/how-plugins-run/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>的一張圖中，可以非常簡單明瞭的看出架構：</p>\n<p><img src=\"/image/figma-plugin-structure.png\" alt=\"figma-plugin-structure\"></p>\n<p>兩個部分的程式的溝通如同 worker 與 main thread 溝通一般，透過 <code class=\"language-text\">postMessage</code> 與 <code class=\"language-text\">onmessage</code> 來收發訊息。</p>\n<h2 id=\"目前支援的-figma-plugin-api\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8F%B4%E7%9A%84-figma-plugin-api\" aria-label=\"目前支援的 figma plugin api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前支援的 Figma Plugin API</h2>\n<p>目前 Figma plugin API 支援：</p>\n<ul>\n<li>\n<p><strong>Reading layers and layer properties in the local file</strong></p>\n<p>理論上整個 figma file 內的 content 你都能夠讀取，包含 layer 的各種屬性。在現有架構下，即便有缺少的，也能夠提 request 請官方補上，不會太困難。</p>\n</li>\n<li><strong>Create a modal with custom UI</strong></li>\n<li>\n<p><strong>Access browser APIs</strong></p>\n<p>由於有一部分的 code 是會運行在上述提到的 iframe 中，而在 iframe 中基本上你可以創建任何 Web UI，運行 JS、發送 network request 等等。</p>\n</li>\n</ul>\n<p>雖然看起來只有三個大類別，但其實也已經包含了上百個 method 與可操作的屬性。</p>\n<p>未來官方還想繼續拓展延伸的部分有更多，包含像是 <code class=\"language-text\">Access Team library</code>、<code class=\"language-text\">Access Team info</code>，以及我最想要的 <code class=\"language-text\">Trigger plugin code on events</code> 等等。不過這些並沒有排入他們目前的 Road map 中，因為要在不影響主要產品的穩定度下進行，需要考慮的東西很多，所以沒有明確的 Timeline。</p>\n<p>至於詳細的項目以及個別項目實作上會有的困難，官方都有在<a href=\"https://www.figma.com/plugin-docs/whats-supported/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文件</a>中說明，我覺得很簡單易讀，建議大家有興趣的話去看一看，可以看出他們對於整體設計上的一些思路。</p>\n<h2 id=\"存取-figma-document\" style=\"position:relative;\"><a href=\"#%E5%AD%98%E5%8F%96-figma-document\" aria-label=\"存取 figma document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>存取 Figma Document</h2>\n<p>基本上 Figma 的 plugin 都是想要存取 Figma 檔案內的物件，或是應該說是 Layer：</p>\n<p><img src=\"/image/figma-layers-example.png\" alt=\"figma-layers-example\"></p>\n<p>不過以程式的角度來看，Layer 其實比較適合用 <code class=\"language-text\">node</code> 來代表。</p>\n<p>有稍微用過 Figma 這類設計工具就知道，物件都可以被 Grouping 在一起成為一個物件，但你還是能繼續編輯 Group 底下的每一個物件，也就是 Layer 底下還可能會有其他 Layer，而這個概念就跟樹狀結構一樣\b，所以在撰寫程式的時候，用 <code class=\"language-text\">node</code> 來代表會直覺一點。</p>\n<p>例如，如果我們想要將當前選擇的物件中的文字統一調整成 font size 16，我們可以這樣寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"TEXT\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 告知 figma 你的 plugin 已經結束，可以關閉。</span>\nfigma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>而當你需要遍歷尋找特定節點時，就可以依靠我們學習樹狀資料結構時最常用的 traverse 函式，自己去找出需要的 Node：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"children\"</span> <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"INSTANCE\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// leaf, do something...etc</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 從 root 開始跑, 用 figma.root 也可</span></code></pre></div>\n<h3 id=\"node-type\" style=\"position:relative;\"><a href=\"#node-type\" aria-label=\"node type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Type</h3>\n<p>Figma 中有許多類別的 Node，像是 <code class=\"language-text\">[RectangleNode](https://www.figma.com/plugin-docs/api/RectangleNode)</code>、<code class=\"language-text\">[TextNode](https://www.figma.com/plugin-docs/api/TextNode)</code> 與 <code class=\"language-text\">[FrameNode](FrameNode)</code> 等等，完整列表可以參考官方文件 - <a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node Type</a>。</p>\n<p>零零總總有 16 種不同類別的 Node，每一種也都擁有不同的屬性。要記起來不太可能，這時就得感謝一下 Typescript 的幫忙，Figma 有提供 <code class=\"language-text\">@figma/plugin-typings</code> 供你使用，搭配 VSCode 的支援，在操作不同 Node 時，可以輕鬆知道其所擁有的屬性，若是不清楚詳細用法，再對照<a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>即可。</p>\n<p><img src=\"/image/figma-typescript-autocom.png\" alt=\"ts-autocomplete\"></p>\n<p>此外，因為大部分的 Plugin 都是作用在特定的 Node type，為了不讓系統 crash，製作 plugin 時，各種 edge case 的處理就很重要，你要顧慮到當使用者在不適合的 Node type 上使用你的 plugin 時該怎麼處理，無論是 ignore 或是給予警告都可以，重點是要盡量讓系統維持穩定。</p>\n<h2 id=\"編輯屬性\" style=\"position:relative;\"><a href=\"#%E7%B7%A8%E8%BC%AF%E5%B1%AC%E6%80%A7\" aria-label=\"編輯屬性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>編輯屬性</h2>\n<p>看到這邊你可能會覺得奇怪，編輯屬性為什麼需要特別提出來說呢？</p>\n<p>一般來說，更改 Object 內部的 properties，我們自然會這樣處理：</p>\n<p><code class=\"language-text\">text.fontSize = 12</code></p>\n<p>在 Figma plugin sandbox 中操作普通的 Node object 時，這樣的寫法大部分也會是有效的。</p>\n<p>然而，若是要操作一些複雜一點的屬性，像是陣列（Array）與陣列內的物件（Object）時，就不能這樣處理，除了修改不會生效外，Figma 也會報 Error：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// error: object is not extensible</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>otherNode<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// error: Cannot assign to read only property 'r' of object</span>\nnode<span class=\"token punctuation\">.</span>fills<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">10</span></code></pre></div>\n<p>若要成功更改內容，你必須複製整個內容然後取代，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nselection<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>someNode<span class=\"token punctuation\">)</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> selection</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fills <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>fills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfills<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\nrect<span class=\"token punctuation\">.</span>fills <span class=\"token operator\">=</span> fills</code></pre></div>\n<p>之所以要這樣做，主要原因是，某些 Javascript Object 在 Figma 的 Sandbox 中其實並不是一般的 Javascript Object，Figma 在其內部有特殊的實作，expose 出的介面可能背後有複雜的抽象細節，像是屬性更動時，需要處理 <code class=\"language-text\">re-render</code>、<code class=\"language-text\">update instance</code> 等等；加上 Figma 背後使用 <a href=\"https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly memory</a>，基於穩定性與實作複雜度的考量，才只能出此下策。</p>\n<p>這點在實作 Plugin 的過程中，算是比較需要注意以及比較麻煩的點。</p>\n<p>官方在文件內有說明他們的難處與考量，有興趣的可以前去詳讀，附上連結<a href=\"https://www.figma.com/plugin-docs/editing-properties/#the-why\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在此</a>。</p>\n<h2 id=\"開始實作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"開始實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作吧</h2>\n<p>基本的概念介紹得差不多了，可以開始實作了。</p>\n<p>回顧一下我們的範例：</p>\n<p><img src=\"/image/figma-plugin-demo.gif\" alt=\"demo\"></p>\n<p>功能很簡單，就是幫使用者選取的物件加上 Label，會創建出一個 FrameNode，然後與使用者選取的物件群組在一起。</p>\n<p>前面說過，要開發 Figma plugin 需要使用 Figma 桌面版（有 Windows 與 Mac 版本），在 Figma 桌面版中，<code class=\"language-text\">點選右鍵 -> Plugins -> Development -> New Plugin...</code>：</p>\n<p><img src=\"/image/figma-new-plugin-1.png\" alt=\"figma-new-plugin-step1\"></p>\n<p><img src=\"/image/figma-new-plugin-2.png\" alt=\"figma-new-plugin-step2\"></p>\n<p>Figma 已經為你準備好了一些基本的 template，有三種選項可以選擇，<code class=\"language-text\">RunOnce</code> 與 <code class=\"language-text\">With UI &amp; browser APIs</code> 的差別就在於有沒有 <code class=\"language-text\">iframe</code> 的環境可以提供 Plugin 使用者一個 UI 介面操作。</p>\n<p><img src=\"/image/figma-new-plugin-3.png\" alt=\"figma-new-plugin-step3\"></p>\n<p>選定好 template 後，選擇 <code class=\"language-text\">Save as...</code> 就可以將一個 Figma plugin template 載下。（這次的範例選擇 <code class=\"language-text\">With UI &amp; browser APIs</code>）</p>\n<p>載下來的 Plugin template 結構如下：</p>\n<p><img src=\"/image/figma-new-plugin-template-structure.png\" alt=\"figma-new-plugin-template-structure\"></p>\n<p>是一個簡單的 typescript project，<code class=\"language-text\">code.ts</code> 是主要的 Figma Plugin Sandbox 程式，<code class=\"language-text\">code.js</code> 可想而知是編譯後的檔案。</p>\n<p><code class=\"language-text\">ui.html</code> 則是運行在 <code class=\"language-text\">iframe</code> 裡面，你可以用來繪製 UI 與使用 browser APIs、Network reqeust 的部分。</p>\n<p><code class=\"language-text\">mainifest.json</code> 則是用來描述你的 Plugin，告知 Figma 你的 Sanbox code 與 iframe code 位置在哪等等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StatusLabel\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"917361515292167655\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"code.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui.html\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊的 <code class=\"language-text\">main</code> 與 <code class=\"language-text\">ui</code> 就是主要程式進入點，所以你其實也可以像開發一般的 Web SPA 一樣，用 React、Vue 來製作 UI，用 Webpack 來 bundle 你的程式，只要指定對路徑即可。範例可以參考<a href=\"https://www.figma.com/plugin-docs/bundling-webpack/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">此處</a>。</p>\n<p><strong>ui.html</strong></p>\n<p>我們先從 <code class=\"language-text\">ui.html</code> 開始看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Select status label<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Choose a status<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LGTM<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>LGTM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Work in progress<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Work in progress<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>In Review<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>In Review<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Please Review<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please Review<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Create<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cancel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cancel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> select <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">[</span>select<span class=\"token punctuation\">.</span>selectedIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pluginMessage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cancel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pluginMessage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'cancel'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>完全就是一個普通的 HTML 檔案，唯一要注意的是，因為他是運行在 iframe 裡面，所以當我們要將資訊傳遞給 Sandbox 內的 <code class=\"language-text\">code.ts</code> 時，得用 <code class=\"language-text\">parent.postMessage()</code>。</p>\n<p>傳遞的參數要用 <code class=\"language-text\">pluginMessage</code>，可以傳遞幾乎任何 object。這邊我們為了要讓 Sandbox 內的 <code class=\"language-text\">code.ts</code> 知道使用者點選了哪種 Button，以及選擇了哪個 status label，我們定義以下的 Message 來傳遞：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Msg <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'create-label'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cancel'</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用者 select 的字串</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的程式碼呈現在 Figma 當中就如下圖（畫面中的 Developer VM <a href=\"#%E5%A6%82%E4%BD%95%E9%99%A4%E9%8C%AF\">待會會說明</a>）：</p>\n<p><img src=\"/image/figma-plugin-ui.png\" alt=\"figma-plugin-ui\"></p>\n<p><strong>code.ts</strong></p>\n<p>使用者介面有了，接著來看 <code class=\"language-text\">code.ts</code>。</p>\n<p>主要重點有兩個函式：<code class=\"language-text\">figma.showUI</code> 與 <code class=\"language-text\">figma.ui.onmessage</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This shows the HTML page in \"ui.html\".</span>\nfigma<span class=\"token punctuation\">.</span><span class=\"token function\">showUI</span><span class=\"token punctuation\">(</span>__html__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfigma<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...Implementation details</span>\n  <span class=\"token comment\">// ...ignore for now</span>\n  <span class=\"token comment\">// Make sure to close the plugin when you're done. Otherwise the plugin will</span>\n  <span class=\"token comment\">// keep running, which shows the cancel button at the bottom of the screen.</span>\n  figma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">figma.showUI</code> 就是單純告知 Figma 你有一個 UI 要呈現給使用者，參數 <code class=\"language-text\">__html__</code> 會指向 <code class=\"language-text\">ui.html</code> 的內容，Figma 會開啟一個 Modal 去呈現這個 iframe UI。</p>\n<p><code class=\"language-text\">figma.ui.onmessage</code> 用來接收從 iframe 傳來的 <code class=\"language-text\">postMessage</code>。（相反的，我們也可以用 <code class=\"language-text\">figma.ui.postMessage</code> <a href=\"https://www.figma.com/plugin-docs/creating-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">傳遞資訊給 iframe</a>，iframe 以 <code class=\"language-text\">window.onmessage</code> 接收。）</p>\n<p>以我們的<a href=\"https://github.com/ArvinH/figma-status-label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>來說，我們想要接收的訊息可以分為兩種：</p>\n<ul>\n<li>插入使用者選擇的 Status label（Create button）</li>\n<li>關閉外掛（Cancel button）</li>\n</ul>\n<p>在 <code class=\"language-text\">figma.ui.onmessage</code> 中，我們根據接收到的 <code class=\"language-text\">msg.type</code> 來判斷是要處理哪一種類型的動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">figma<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 替選取的物件加上 label</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 若 msg.type !== 'create-label'，就直接關掉 plugin，也就是 cancel button</span>\n  figma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>當 <code class=\"language-text\">msg.type</code> 為 <code class=\"language-text\">create-label</code> 時，代表我們要創建 status label 並與使用者當前選取的 Layers（Nodes）群組在一起：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodes<span class=\"token operator\">:</span> SceneNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">loadFontAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> family<span class=\"token operator\">:</span> <span class=\"token string\">\"Roboto\"</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> <span class=\"token string\">\"Bold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> group<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 調整位置</span>\n    frame<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    frame<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n    group <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    group<span class=\"token punctuation\">.</span>layoutGrow <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span>\n  figma<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span><span class=\"token function\">scrollAndZoomIntoView</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因為我們的 Label 需要用到文字，也就是 <code class=\"language-text\">TextNode</code>，在 Figma 內他會要求你先載入字體檔，所以才需要加入這行：<code class=\"language-text\">await figma.loadFontAsync({ family: \"Roboto\", style: \"Bold\" });</code>。</p>\n<p>接著我們遍歷 <code class=\"language-text\">figma.currentPage.selection</code> 這個陣列，該陣列包含所有被使用者選取的 Layers（Nodes），我們針對每一個 Node 都創建一個 Label，這邊我們使用的是 <a href=\"https://www.figma.com/plugin-docs/api/FrameNode/#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">FrameNode</code></a>，類似於 HTML 中的 <code class=\"language-text\">Div</code>，我們用他與 <a href=\"https://www.figma.com/plugin-docs/api/TextNode/#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">TextNode</code></a> 一起組合排版出一個 Label，像這樣：</p>\n<p><img src=\"/image/figma-plugin-ui-label.png\" alt=\"figma-plugin-ui-label\"></p>\n<p><code class=\"language-text\">createLabel</code> 函式是我自己抽出去實作的，主要就是針對 <code class=\"language-text\">FrameNode</code> 與 <code class=\"language-text\">TextNode</code> 做排版、顏色、內容的處理，這邊簡略給大家看一下，實際上 Node 的使用方式，例如有什麼屬性可以調整，可以搭配<a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>閱讀：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createLabel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">createFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Status Label'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n  frame<span class=\"token punctuation\">.</span>fills <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'SOLID'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> colorMap<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>cornerRadius <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">createText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>fontName <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> family<span class=\"token operator\">:</span> <span class=\"token string\">\"Roboto\"</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> <span class=\"token string\">\"Bold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n  <span class=\"token comment\">// 這邊將 ui.html 傳入的 msg.text assign 給 TextNode</span>\n  text<span class=\"token punctuation\">.</span>characters <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>constrainProportions <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> frame<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再來呢，我們想要讓群組好的 <a href=\"https://www.figma.com/plugin-docs/api/GroupNode/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">GroupNode</code></a>，自動被選取，並移動到使用者視野正中間。</p>\n<p>要做到這件事，我們必需把他放入一個 Node 陣列中，因為如同我們在 <a href=\"#%E7%B7%A8%E8%BC%AF%E5%B1%AC%E6%80%A7\">編輯屬性</a> 提到的，要跟改陣列物件，我們必須整個陣列改掉才能生效：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...略</span>\n<span class=\"token keyword\">const</span> nodes<span class=\"token operator\">:</span> SceneNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...略</span>\n<span class=\"token comment\">// 將我們創造的 Label frameNode 與 目前選到的 Node 群組起來。</span>\ngroup <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...略</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 呼叫此 API 來移動 view port</span>\nfigma<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span><span class=\"token function\">scrollAndZoomIntoView</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到這邊為止，整個 Plugin 的實作就完成了，接著只要執行 <code class=\"language-text\">npm run build</code>，將檔案編譯好，你就能在 Figma Desktop 中找到你的 Plugin 來使用。（可以在 Development 下面找到）</p>\n<p><img src=\"/image/figma-plugin-in-app.png\" alt=\"figma-plugin-in-app\"></p>\n<p>當然，每次都要 build 會很麻煩，所以你一樣可以設定 Webpack watch mode，這樣會比較方便一些。<a href=\"https://www.figma.com/plugin-docs/bundling-webpack/#6-configure-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方有範例可以參考</a></p>\n<h2 id=\"如何除錯\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%99%A4%E9%8C%AF\" aria-label=\"如何除錯 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何除錯</h2>\n<p>開發的過程中，免不了需要除錯，Figma 既然是以 Web 技術為底，當然有 Dev Tool 可以使用，可以從 <code class=\"language-text\">右鍵 -> plugins -> Development -> Open console</code> 或是用跟 Chrome 開啟 Devtool 一樣的 shortcut 來開啟：</p>\n<p><img src=\"/image/figma-plugin-debug.png\" alt=\"figma-plugin-debug\"></p>\n<p>不過這只能讓你看到錯誤訊息，若是你想加入 Debugger 來下中斷點，並在 Console 內看到你的 source code，你需要啟用 <code class=\"language-text\">Developer VM</code>：</p>\n<p><img src=\"/image/figma-plugin-debug-developer-vm.png\" alt=\"figma-plugin-debug-developer-vm\"></p>\n<p><img src=\"/image/figma-plugin-debugger.gif\" alt=\"figma-plugin-debugger\"></p>\n<h3 id=\"caveat\" style=\"position:relative;\"><a href=\"#caveat\" aria-label=\"caveat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat</h3>\n<p>運行在 <code class=\"language-text\">Developer VM</code> 環境的 Plugin，其效能與 runtime 與實際跑在 Figma 上的會有不同，所以正式發佈前記得要取消 <code class=\"language-text\">Developer VM</code> 的選項，在一般環境下運行看看。</p>\n<h2 id=\"發佈你的-plugin\" style=\"position:relative;\"><a href=\"#%E7%99%BC%E4%BD%88%E4%BD%A0%E7%9A%84-plugin\" aria-label=\"發佈你的 plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>發佈你的 Plugin</h2>\n<p>最後，完成你的 Plugin 後，當然會想要上架啦。</p>\n<p>目前要上架 Plugin 需要經過 Figma 團隊的審核，官方有文章詳細說明每一個步驟，我就不贅述，可以到這邊查看：</p>\n<p><a href=\"https://help.figma.com/hc/en-us/articles/360042293394-Publish-a-plugin-to-the-Community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Publish a plugin to the Community</a></p>\n<h3 id=\"caveat-1\" style=\"position:relative;\"><a href=\"#caveat-1\" aria-label=\"caveat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat</h3>\n<p>雖然我沒有實際上架 Plugin，但相信照著文章步驟做不會有太大問題，只是有一個點要注意一下。</p>\n<p>你在 Figma 的帳號需要啟動 two-factor authentication 才能夠申請發佈 Plugin，<a href=\"https://help.figma.com/hc/en-us/articles/360039817634\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>如果你是用 Google account SSO 申請的帳號，是不能夠啟用 two-factor authentication 的</strong></a>，必須重新申請一個以 Email 註冊的帳號。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Figma Plugin 的製作概念不複雜，除了要手動去設定每個 Node 的屬性來改變物件型態一開始不太習慣外，整體實作起來的感覺是蠻迅速方便的，程式編譯完以後，在 Figma 桌面程式內可以直接使用，不需要有額外載入的動作。</p>\n<p>比較可惜的是目前還無法根據 Event 來觸發 Plugin，但依照 Figma 工程師的能力與創造力，相信在未來是有可能的。看看他們今年 maker week 就有人做了一個 Gameboy 的 plugin LOL：</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">For maker week at <a href=\"https://twitter.com/figmadesign?ref_src=twsrc%5Etfw\">@figmadesign</a> I really wanted to do something wild, so I made a plugin that runs a gameboy emulator inside of Figma and renders the output as vectors to the canvas. <a href=\"https://t.co/M7up2Gb2a8\">pic.twitter.com/M7up2Gb2a8</a></p>&mdash; Sawyer Hood (@sawyerhood) <a href=\"https://twitter.com/sawyerhood/status/1336000511107977216?ref_src=twsrc%5Etfw\">December 7, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>感謝閱讀到這邊的讀者，不知道是否有激起你一點慾望想去試試看製作 Figma plugin？有或沒有都很好，至少希望你對此有個大概的了解。而我呢，準備要去跟設計師討論看看，有什麼內部需求可以來玩玩了！</p>","id":"39941b87-aca7-5c20-abbe-28fd41462baa","fields":{"slug":"create-figma-plugin"},"frontmatter":{"date":"2020-12-05T22:47:05.000Z","title":"製作 Figma Plugin","tags":["Figma","Plugin"],"type":"tech","slug":"create-figma-plugin"},"timeToRead":16}],"tagName":"Figma","type":"tech"}},"staticQueryHashes":["2123680655"]}