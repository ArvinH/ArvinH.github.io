{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/drawing","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：Organic melody feat.Takuya Maeda","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/wTebM8bWxJk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Organic melody feat.Takuya Maeda</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/wTebM8bWxJk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>大約在兩年前我曾經寫過一篇文章介紹如何用 CSS 繪圖 - <a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 CSS 畫畫的小技巧</a>，該文章的最後我有稍微提到我們能夠利用 CSS3 的 <code class=\"language-text\">box-shadow</code> 屬性來製造出 Pixel 風格的圖案。然而，所有圖案不都是由 pixel 組成的嗎？如果我們能夠用 box-shadow 畫出 Pixel Art，那只要 Pixel 數量足夠，size 夠細緻，應該是能夠繪製出任何圖形的吧？</p>\n<p>不過在<a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 CSS 畫畫的小技巧</a>這篇文章中，所製作的是比較簡單的文字，透過直接編輯 <code class=\"language-text\">box-shadow</code> 還在可接受範圍中，但如果是想要繪製複雜一點的人物角色，例如鋼鐵人<a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src</a>：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/40adf0260c1844fb9868f7c524424976.png\" alt=\"iron-man\"> </p>\n<p>這如果一格一格手動對照，然後撰寫 <code class=\"language-text\">box-shadow</code>，比登天還難，更別提想繪製出比 Pixel Art 細緻一點的圖案了。</p>\n<p>網路上對於 <code class=\"language-text\">box-shadow</code> 的運用，大多圍繞在 Pixel Art 的實作，例如 <a href=\"https://una.im/sass-pixel-art/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Una Kravets 的部落格</a> 介紹了如何使用 SCSS 與陣列來產生 CSS Pixel Art；上面鋼鐵人原圖<a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">也是利用相同原理</a>；<a href=\"http://elrumordelaluz.github.io/Pixelator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pixelator</a> 則是讓你能線上繪製自己喜歡的 Pixel Art，並且產生出對應的 <code class=\"language-text\">box-shadow</code>；</p>\n<p>好在 Codepen 上高手如雲，被我發現<a href=\"https://codepen.io/andrewarchi/pen/jPbqMx?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一篇</a>利用 Angular 實作圖片轉 <code class=\"language-text\">box-shadow</code> 的版本，實作方式很有意思，我用 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">svelte</a> 改寫了一個版本，今天就來分享一下實作細節！</p>\n<p>先看個成果：</p>\n<p>Gif Demo:\n<img src=\"https://static.coderbridge.com/img/ArvinH/1697c384e21246a491d1bdc34fc3c61a.gif\" alt=\"gif-demo\"></p>\n<p>Live Demo:</p>\n<iframe src=\"https://codesandbox.io/embed/image-to-pixel-art-usdtn?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"image-to-pixel-art\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>可以下載這個範例圖來上傳，效果會比較好：<img src=\"https://static.coderbridge.com/img/ArvinH/d4b4dbd77b93482781f7a5d27761630f.png\" alt=\"demo-mario\"></p>\n<h1 id=\"box-shadow\" style=\"position:relative;\"><a href=\"#box-shadow\" aria-label=\"box shadow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box-Shadow</h1>\n<p>在開始前，先複習一下 <code class=\"language-text\">box-shadow</code>，CSS3 的 <code class=\"language-text\">box-shadow</code> 屬性可以設定多個值，每個值代表著一個 <code class=\"language-text\">box-shadow</code> 的 x 位移(x-offset)，y 位移(y-offset)，陰影模糊半徑(shadow blur radii)，陰影擴散半徑(shadow spread radii) 和顏色(color)。</p>\n<p>由於 <strong>允許設置多個值</strong> 和 <strong>可控制 X 與 Y 位移</strong> 這兩個特質，<code class=\"language-text\">box-shadow</code> 非常適合用來組合成圖片，尤其是 Pixel Art。以黑白相間的棋盤為例：</p>\n<div id=\"chess\" style=\"margin-bottom: 60px; width: 40px; height: 40px; box-shadow: 0 40px #000, 40px 0 #000; border: 1px solid #000;\"></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n    width: 40px;\n    height: 40px;\n    box-shadow: 0 40px #000, 40px 0 #000;\n    border: 1px solid #000;\n<span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/789b88b181d44da997f09a02c23e0bf1.png\" alt=\"box-shadow-explain\"></p>\n<p>依照這個原理，就能組合成複雜一點的 Pixel Art：</p>\n<div id=\"result\" style=\"margin-bottom: 120px; width: 10px; height: 10px; box-shadow: rgb(243, 156, 18) 20px 30px 0px, rgb(243, 156, 18) 30px 30px 0px, rgb(243, 156, 18) 80px 30px 0px, rgb(243, 156, 18) 90px 30px 0px, rgb(243, 156, 18) 10px 40px 0px, rgb(231, 76, 60) 20px 40px 0px, rgb(231, 76, 60) 30px 40px 0px, rgb(243, 156, 18) 40px 40px 0px, rgb(243, 156, 18) 70px 40px 0px, rgb(243, 156, 18) 100px 40px 0px, rgb(243, 156, 18) 10px 50px 0px, rgb(231, 76, 60) 20px 50px 0px, rgb(243, 156, 18) 50px 50px 0px, rgb(243, 156, 18) 60px 50px 0px, rgb(243, 156, 18) 100px 50px 0px, rgb(243, 156, 18) 10px 60px 0px, rgb(231, 76, 60) 20px 60px 0px, rgb(231, 76, 60) 30px 60px 0px, rgb(243, 156, 18) 100px 60px 0px, rgb(243, 156, 18) 20px 70px 0px, rgb(231, 76, 60) 30px 70px 0px, rgb(231, 76, 60) 40px 70px 0px, rgb(243, 156, 18) 90px 70px 0px, rgb(243, 156, 18) 30px 80px 0px, rgb(231, 76, 60) 40px 80px 0px, rgb(231, 76, 60) 50px 80px 0px, rgb(243, 156, 18) 80px 80px 0px, rgb(243, 156, 18) 40px 90px 0px, rgb(231, 76, 60) 50px 90px 0px, rgb(243, 156, 18) 70px 90px 0px, rgb(243, 156, 18) 50px 100px 0px, rgb(243, 156, 18) 60px 100px 0px;\"></div>\n<p>但說實話，要手動撰寫 <code class=\"language-text\">box-shadow</code> 來組合出這個小愛心，大概就去掉半條命了，還是得依靠 <a href=\"http://elrumordelaluz.github.io/Pixelator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pixelator</a> 來繪製並產生 CSS。</p>\n<h1 id=\"圖片轉-box-shadow-實作原理\" style=\"position:relative;\"><a href=\"#%E5%9C%96%E7%89%87%E8%BD%89-box-shadow-%E5%AF%A6%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-label=\"圖片轉 box shadow 實作原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>圖片轉 box-shadow 實作原理</h1>\n<p>在複習完 <code class=\"language-text\">box-shadow</code> 組成圖片的原理後，應該不難推斷出圖片轉 <code class=\"language-text\">box-shadow</code> 的做法。</p>\n<p>概念上就是先定義出一個 grid system，將圖片切割成一塊一塊的單位，接著計算出每個單位區塊的 x-offset 與 y-offset，然後放入對應顏顏色，這樣就能組合出一個 unit 所對應的 <code class=\"language-text\">box-shadow</code> 值，依此類推把每個單位區塊都轉換完即可。</p>\n<p>實作上的步驟比較繁瑣一些，但概念是相同的：</p>\n<ul>\n<li>利用 <code class=\"language-text\">URL.createObjectURL(event.target.files[0]);</code> 將圖片檔案轉換成 <code class=\"language-text\">Image</code> 物件。</li>\n<li>在 image <code class=\"language-text\">onload</code> 時，透過 canvas 2d context 的 <code class=\"language-text\">drawImage()</code> 函式將圖片繪製到 canvas 上。</li>\n<li>接著再以 canvas 2d context 的 <code class=\"language-text\">getImageData</code> 取得一個以一維陣列存放的圖片資訊。</li>\n<li>遍歷該一維陣列內的圖片資訊，組合出 <code class=\"language-text\">box-shadow</code> 的值。</li>\n</ul>\n<p>上述步驟中，最關鍵的就是最後一點，canvas 2d context 的 <code class=\"language-text\">getImageData</code> 函式會回傳一個一維陣列 - <code class=\"language-text\">Unit8ClampedArray</code>，裡面包含了圖片每個 unit 的 RGBA 值（值段區間為 0 ~ 255）。</p>\n<p>利用這個一維陣列，我們就可以知道載入的圖片有多少 unit（grid system)，每個 unit 又各自是什麼顏色，進而推算出 box-shadow 每一個值的 x-offset、y-offset 與顏色。這也是為何我們需要先將圖片繪製到 Canvas 的原因。 </p>\n<p>關鍵程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildPixelArt</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixelSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">,</span> canvasContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n  canvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> boxShadow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> imageData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> canvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> row <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> width <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> col <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> row <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      boxShadow<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        col <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"px \"</span> <span class=\"token operator\">+</span>\n          row <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"px \"</span> <span class=\"token operator\">+</span>\n          <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p> <code class=\"language-text\">Unit8ClampedArray</code> 陣列裡面，每四個 indices 為一單位，分別為該 unit 的 <code class=\"language-text\">R</code>、<code class=\"language-text\">G</code>、<code class=\"language-text\">B</code>、<code class=\"language-text\">A</code> 值，所以在迴圈中我們以 4 為遞增單位，並以此為計算二維平面中 <code class=\"language-text\">row</code> 與 <code class=\"language-text\">col</code> 的基礎。</p>\n<p> 計算出一維陣列內每個 unit 在二維平面上的行與列後，個別乘上定義好的 <code class=\"language-text\">pixelSize</code>，就能算出該 unit 在 <code class=\"language-text\">box-shadow</code> 值中的 x-offset 與 y-offset，然後聯同顏色值一起 push 到 <code class=\"language-text\">boxShadow</code> 陣列中。</p>\n<p> 最後利用預先寫好的 css template，將 <code class=\"language-text\">boxShadow</code> 整合進去即可產生需要的 css style：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> generatedCss <span class=\"token operator\">=</span>\n   <span class=\"token string\">\"#pixel-art {\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  height: \"</span> <span class=\"token operator\">+</span>\n   height <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  width: \"</span> <span class=\"token operator\">+</span>\n   width <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"}\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"#pixel-art:after {\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">'  content: \"\";\\n'</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  position: absolute;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  width: \"</span> <span class=\"token operator\">+</span>\n   pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  height: \"</span> <span class=\"token operator\">+</span>\n   pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  box-shadow:\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span>\n   boxShadow<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n    \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\";\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> generatedCss<span class=\"token punctuation\">;</span></code></pre></div>\n<p>載入產生的 CSS 後，就可以看到我們上傳的圖片重新以 <code class=\"language-text\">box-shadow</code> 的形式被重組在頁面上，單單一個 <code class=\"language-text\">div</code> 就能繪製出任何圖形！蠻酷的吧！</p>\n<p>完整程式碼請到 CodeSandbox 上翻閱，大部分邏輯都在 <code class=\"language-text\">PixelArtArea.svelte</code> 元件與 <code class=\"language-text\">buildPixelArt.js</code> 這隻檔案，其餘 svelte 部分的程式碼也很好理解，不過我是第一次用 svelte，若有使用不當的地方歡迎指教！</p>\n<iframe src=\"https://codesandbox.io/embed/image-to-pixel-art-usdtn?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"image-to-pixel-art\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"注意事項\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事項</h2>\n<p>利用 <code class=\"language-text\">box-shadow</code> 繪圖基本上沒什麼實質意義，就只是好玩而已，千萬不要把這用到正式環境，效能之差會把使用者端的瀏覽器搞當機的。這次的範例也只能吃得下像素較小的圖片，若是上傳了較大的檔案，打開 Devtool 時就會發現你的頁面 crash 了...\n另外，產生完的 CSS，範例中我是直接 append 到 <code class=\"language-text\">head</code> 下，所以若是在沒有重整頁面的狀況下上傳別的圖片，就會再度 append 新的 css 進去，久了以後 head 也會越來越肥。</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>CSS 真的很有趣，能做出許多意料之外的事，雖然絕大多數沒什麼用處，但這種技術上的創意應用所帶來的興奮感，正是繁忙於日常的開發者們所需要的吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://una.im/sass-pixel-art/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Una Kravets 的部落格</a></li>\n<li><a href=\"https://codepen.io/andrewarchi/pen/jPbqMx?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Convert an image to CSS Box Shadows</a> </li>\n<li><a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iron man</a></li>\n</ol>","id":"a6d5585c-9df1-505f-89da-f2b735b10a03","fields":{"slug":"box-shadow-drawing"},"frontmatter":{"date":"2020-02-01T17:31:23.000Z","title":"利用 box-shadow 畫出任何圖案","tags":["css","box-shadow","drawing"],"type":"tech","slug":"box-shadow-drawing"},"timeToRead":6}],"tagName":"drawing","type":"tech"}},"staticQueryHashes":["2123680655"]}