{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/reflect","result":{"pageContext":{"posts":[{"excerpt":"『強者是不會待在同一個地方太久的。』","html":"<blockquote>\n<p>『強者是不會待在同一個地方太久的。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在眾多 ES6 提供的新功能上，Proxy 與 Reflect 算是最少被提及的，主要原因我想還是因為瀏覽器的支援度較低，不過在我前陣子看到 <a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frameworkless JavaScript Part 3: One-Way Data Binding</a> 這篇文章時（好文推薦！很有趣），特意去查了一下才發現目前支援度已經越來越好：</p>\n<p><img src=\"/image/caniuseproxy.png\" alt=\"Can I Use Proxy\"></p>\n<p><img src=\"/image/caniusereflect.png\" alt=\"Can I Use Reflect\"></p>\n<p>常用的瀏覽器幾乎都支援，我想也是可以來好好了解一下這兩個神奇的物件了！</p>\n<p>最後有個參考該篇文章實作的 Todo app 範例，如果懶得看介紹的可以先 <a href=\"#todo-sample\">跳下去</a> 玩玩，但若是對 Proxy 與 Reflect 不了解的人還是建議先看一下。</p>\n<h1 id=\"proxy\" style=\"position:relative;\"><a href=\"#proxy\" aria-label=\"proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy</h1>\n<blockquote>\n<p>Proxy 物件被使用於定義基本操作的自定行為（例如：尋找屬性、賦值、列舉、函式調用等等）。 - <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></p>\n</blockquote>\n<p>不知道為什麼唸起來有點饒口，但基本上跟其字面意思相同，就是代理（代為管理）物件行為。</p>\n<p>Proxy 是一個函式物件（可被建構），他提供一個機會讓你能介入一般物件的基本操作行為，像是在你 assign 一個值給某個物件時，可以透過 Proxy 先進行一些 validation 等等，藉此讓使用被代理過後的物件之開發者可以專注在其他核心功能上。</p>\n<p>咦？聽起來很像許多 framework 或 helper library 會做的事情？有趣！讓我們繼續看下去。</p>\n<p>使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> proxyObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">target</code> 就是你想要代理的對象；而 <code class=\"language-text\">handler</code> 則是一個物件，其中定義了所有你想替 target 代為管理的操作定義，包含了：</p>\n<ul>\n<li>construct(target, args) - 代理 Object 的 <code class=\"language-text\">new</code> operator</li>\n<li>get(target, prop, receiver) - 代理 Object getting properties 時的行為</li>\n<li>set(target, prop, value, receiver) - 代理 Object setting properties 時的行為</li>\n<li>apply(target, object, args) - 代理 function call，像是 f.apply()</li>\n<li>has(target, prop) - 代理 <code class=\"language-text\">in</code> operator</li>\n<li>defineProperty(target, propKey, propDesc) - 代理 <code class=\"language-text\">Object.defineProperty</code>.</li>\n<li>deleteProperty(target, prop) - 代理 <code class=\"language-text\">delete</code> operator</li>\n<li>getOwnPropertyDescriptor(target, prop) - 代理 <code class=\"language-text\">Object.getOwnPropertyDescriptor</code>.</li>\n<li>getPrototypeOf(target) - 代理 <code class=\"language-text\">Object.getPrototypeOf</code>.</li>\n<li>setPrototypeOf(target, proto) - 代理 <code class=\"language-text\">Object.setPrototypeOf</code>.</li>\n<li>ownKeys(target) - 代理 <code class=\"language-text\">Object.getOwnPropertyNames</code> 與 <code class=\"language-text\">Object.getOwnPropertySymbols</code>.</li>\n<li>isExtensible(target) - 代理 <code class=\"language-text\">Object.isExtensible</code>.</li>\n<li>preventExtensions(target) - 代理 <code class=\"language-text\">Object.preventExtensions</code>.</li>\n</ul>\n<p><code class=\"language-text\">handler</code> object 所包含的 method 定義可以從 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 看到更多範例與描述。</p>\n<h2 id=\"說了這麼多我們到底能拿-proxy-來做什麼呢直接來點範例吧\" style=\"position:relative;\"><a href=\"#%E8%AA%AA%E4%BA%86%E9%80%99%E9%BA%BC%E5%A4%9A%E6%88%91%E5%80%91%E5%88%B0%E5%BA%95%E8%83%BD%E6%8B%BF-proxy-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2%E7%9B%B4%E6%8E%A5%E4%BE%86%E9%BB%9E%E7%AF%84%E4%BE%8B%E5%90%A7\" aria-label=\"說了這麼多我們到底能拿 proxy 來做什麼呢直接來點範例吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>說了這麼多，我們到底能拿 Proxy 來做什麼呢？直接來點範例吧！</h2>\n<h3 id=\"直觀的私有變數\" style=\"position:relative;\"><a href=\"#%E7%9B%B4%E8%A7%80%E7%9A%84%E7%A7%81%E6%9C%89%E8%AE%8A%E6%95%B8\" aria-label=\"直觀的私有變數 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>直觀的私有變數</h3>\n<p>以往在 Javascript 中，我們可能需要透過 <code class=\"language-text\">closure</code> 來實現物件的私有變數，像是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FooBar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeTime <span class=\"token operator\">=</span> <span class=\"token string\">'never'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setSecretDrink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">secret</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> secretDrink <span class=\"token operator\">=</span> secret<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getSecretDrink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> secretDrink<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FooBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfooBar<span class=\"token punctuation\">.</span><span class=\"token function\">setSecretDrink</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span><span class=\"token function\">getSecretDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Jäger Bom'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span>closeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span>secretDrink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>但透過 Proxy，我們可以很直觀地在一個 Object 內達成類似效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _secretDrink<span class=\"token operator\">:</span> <span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">,</span>\n  closeTime<span class=\"token operator\">:</span> <span class=\"token string\">'never'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBarProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 以底線開頭的作為私有變數</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能存取私有變數！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 非私有變數，那就回傳原物件的原屬性值</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能修改私有變數！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">has</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>prop <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFooBarProxy<span class=\"token punctuation\">.</span>_secretDrink<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能存取私有變數！</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBarProxy<span class=\"token punctuation\">.</span>closeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\nFooBarProxy<span class=\"token punctuation\">.</span>_secretDrink <span class=\"token operator\">=</span> <span class=\"token string\">'Cola'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能修改私有變數！</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_secretDrink'</span> <span class=\"token keyword\">in</span> FooBarProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'closeTime'</span> <span class=\"token keyword\">in</span> FooBarProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>眼尖一點的讀者可能會發現，這邊 handler 裡面的 <code class=\"language-text\">get</code>、<code class=\"language-text\">set</code> 好像跟上面定義中的參數不同，少了 <code class=\"language-text\">receiver</code> 這個參數？</p>\n<p>沒錯，這個神奇的第三個參數其實是指向你產生的 Proxy 實例，以上面例子來看就是 <code class=\"language-text\">FooBarProxy</code> 本身，由於範例中用不到，所以不宣告也沒關係，不過晚點在 <code class=\"language-text\">Reflect</code> 的介紹會再度提起。</p>\n<p>另外，若是沒有被你代理到的操作，則會直接 fallback 回原始 target 物件的操作上。</p>\n<h3 id=\"在設置物件屬性前進行-validation\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E8%A8%AD%E7%BD%AE%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%89%8D%E9%80%B2%E8%A1%8C-validation\" aria-label=\"在設置物件屬性前進行 validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在設置物件屬性前進行 Validation</h3>\n<p>延續剛剛的例子，我們的 FooBar 除了秘密飲料外，也需要紀錄一下基本資訊，像是電話、地址等等，這時候 Proxy 就能為我們帶來另一個好處：驗證屬性值：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _secretDrink<span class=\"token operator\">:</span> <span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">,</span>\n  closeTime<span class=\"token operator\">:</span> <span class=\"token string\">'never'</span><span class=\"token punctuation\">,</span>\n  phoneNumber<span class=\"token operator\">:</span> <span class=\"token string\">'02-2849-2839'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">===</span> <span class=\"token string\">'phoneNumber'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// phone number validation</span>\n      <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\(?\\d{2}\\)?[\\s\\-]?\\d{4}\\-?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot set </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Wrong format. Should be xx-xxxx-xxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"/image/proxy-validationexample.png\" alt=\"proxy example validation\"></p>\n<p>只要你設置的 <code class=\"language-text\">phoneNumber</code> 不符合 regex 的規則，就會拋出一個 Error 告訴開發者，此物件的 <code class=\"language-text\">phoneNumber</code> 屬性值是有固定 format 的。</p>\n<p>當然，javascript 充滿彈性，你也可以有彈性一點的寫法，把 validator 抽離出來：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> BarValidator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">_secretDrink</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'cola'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lame...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">phoneNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\(?\\d{2}\\)?[\\s\\-]?\\d{4}\\-?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot set phoneNumber to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Wrong format. Should be xx-xxxx-xxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    BarValidator<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"用來設定屬性預設值\" style=\"position:relative;\"><a href=\"#%E7%94%A8%E4%BE%86%E8%A8%AD%E5%AE%9A%E5%B1%AC%E6%80%A7%E9%A0%90%E8%A8%AD%E5%80%BC\" aria-label=\"用來設定屬性預設值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用來設定屬性預設值</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 實際上沒有這個屬性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 但經過 Proxy 後</span>\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop <span class=\"token operator\">===</span> <span class=\"token string\">'revenue'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'None of your business'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可以讀取到我們設定的預設值</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'None of your business'</span></code></pre></div>\n<h3 id=\"複寫原有物件讓測試更加順利mock-object\" style=\"position:relative;\"><a href=\"#%E8%A4%87%E5%AF%AB%E5%8E%9F%E6%9C%89%E7%89%A9%E4%BB%B6%E8%AE%93%E6%B8%AC%E8%A9%A6%E6%9B%B4%E5%8A%A0%E9%A0%86%E5%88%A9mock-object\" aria-label=\"複寫原有物件讓測試更加順利mock object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>複寫原有物件，讓測試更加順利（mock object）</h3>\n<p>寫測試的時候很常會需要 mock object，像是 function 中若有讀取 <code class=\"language-text\">document.location.href</code> 的部分，在你開發機上基本上都會是 <code class=\"language-text\">localhost</code>，這時候就會需要把這個值 mock 掉。</p>\n<p>這時我們就可以將 <code class=\"language-text\">document.location</code> 委託給 proxy 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mockDocument <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  location<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">==</span> <span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"your-website-com\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"location href: \"</span><span class=\"token punctuation\">,</span> mockLocation<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// https://blog.arvinh.info</span></code></pre></div>\n<h3 id=\"看到這邊想必很多人都會想到我們可以實作-observe-function\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E5%88%B0%E9%80%99%E9%82%8A%E6%83%B3%E5%BF%85%E5%BE%88%E5%A4%9A%E4%BA%BA%E9%83%BD%E6%9C%83%E6%83%B3%E5%88%B0%E6%88%91%E5%80%91%E5%8F%AF%E4%BB%A5%E5%AF%A6%E4%BD%9C-observe-function\" aria-label=\"看到這邊想必很多人都會想到我們可以實作 observe function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看到這邊想必很多人都會想到，我們可以實作 Observe function！</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> FooBarObserver <span class=\"token operator\">=</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  property <span class=\"token operator\">===</span> <span class=\"token string\">'open'</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">?</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBar is open!!!'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keep waiting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFooBarObserver<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"不是什麼都可以被代理的\" style=\"position:relative;\"><a href=\"#%E4%B8%8D%E6%98%AF%E4%BB%80%E9%BA%BC%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BB%A3%E7%90%86%E7%9A%84\" aria-label=\"不是什麼都可以被代理的 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不是什麼都可以被代理的</h3>\n<p>不知道大家會不會有個疑問，難道所有物件都能被 proxy 代理嗎？有沒有辦法限制我的某個物件就是不希望被他人代理？</p>\n<p>當然有！</p>\n<p>如果你的物件擁有 <code class=\"language-text\">configurable: false</code> 與 <code class=\"language-text\">writable: false</code> 的屬性，那該物件就無法被 proxy 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  FooBar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'???'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nproxy<span class=\"token punctuation\">.</span>FooBar\n<span class=\"token comment\">// Uncaught TypeError: 'get' on proxy: property 'FooBar' is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value (expected 'undefined' but got '???')</span></code></pre></div>\n<h3 id=\"小結論\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B5%90%E8%AB%96\" aria-label=\"小結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小結論</h3>\n<p>這邊我只列了幾個我覺得比較能凸顯 Proxy 用途的範例，而其他 handler 可以介入的操作如果大家也想了解並看看例子的話，阮一峰的 <a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入門</a> 中有針對每個操作給予例子做解析，可以參考。</p>\n<h1 id=\"reflect\" style=\"position:relative;\"><a href=\"#reflect\" aria-label=\"reflect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflect</h1>\n<p>接著我們來看看 Reflect。Reflect 不能建構實例，就像 Math 一樣，單純包含了一系列的靜態方法。</p>\n<h2 id=\"reflect-與-proxy-的完美搭配\" style=\"position:relative;\"><a href=\"#reflect-%E8%88%87-proxy-%E7%9A%84%E5%AE%8C%E7%BE%8E%E6%90%AD%E9%85%8D\" aria-label=\"reflect 與 proxy 的完美搭配 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflect 與 Proxy 的完美搭配</h2>\n<p>網路上許多文章都說 Reflect 是因應 Proxy 才增加的規範，最明確的連結是，Reflect 所定義的靜態方法包含了 Proxy Handler 能處理的所有代理操作，但他提供的是呼叫原始物件的操作，舉例來說：</p>\n<p><code class=\"language-text\">Reflect.get(target, name);</code> 效果等同於 <code class=\"language-text\">target[name];</code></p>\n<p>所以我們在 Proxy 中，如果需要 target 物件的預設操作，使用 Reflect 會更合理更清楚：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loggedObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"主要的理由在於reflect-讓我們對物件的操作可以用函數來處理\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E8%A6%81%E7%9A%84%E7%90%86%E7%94%B1%E5%9C%A8%E6%96%BCreflect-%E8%AE%93%E6%88%91%E5%80%91%E5%B0%8D%E7%89%A9%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C%E5%8F%AF%E4%BB%A5%E7%94%A8%E5%87%BD%E6%95%B8%E4%BE%86%E8%99%95%E7%90%86\" aria-label=\"主要的理由在於reflect 讓我們對物件的操作可以用函數來處理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主要的理由在於，Reflect 讓我們對物件的操作可以用函數來處理</h3>\n<p>例如在判斷物件有無特定屬性，或是刪除物件屬性時，以往我們會這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'_secretDrink'</span> <span class=\"token keyword\">in</span> FooBar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delete</span> Object<span class=\"token punctuation\">.</span>_secretDrink<span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了 Reflect 我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token string\">'_secretDrink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token string\">'_secretDrink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因此，在 Proxy 中，比起使用 <code class=\"language-text\">delete target[name]</code>, <code class=\"language-text\">Reflect.deleteProperty</code> 更能保持一制性：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loggedObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">deleteProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// instead of `delete target[name]...</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"控制被-proxy-代理的函數之-this-參考對象\" style=\"position:relative;\"><a href=\"#%E6%8E%A7%E5%88%B6%E8%A2%AB-proxy-%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%BD%E6%95%B8%E4%B9%8B-this-%E5%8F%83%E8%80%83%E5%B0%8D%E8%B1%A1\" aria-label=\"控制被 proxy 代理的函數之 this 參考對象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>控制被 Proxy 代理的函數之 this 參考對象</h3>\n<p>這個例子比較難懂，但這是說明為何 Reflect 是因應 Proxy 而生的好例子(<a href=\"https://stackoverflow.com/questions/35276559/benefits-of-es6-reflect-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyKey <span class=\"token operator\">===</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reflect.get '</span><span class=\"token punctuation\">,</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this in foo getter references Proxy instance; logs 2</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target[propertyKey] '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this in foo getter references \"target\" - logs 3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\nobj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Reflect.get  2</span>\n<span class=\"token comment\">// target[propertyKey]  3</span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/bimadip/2/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.1.4\"></script></p>\n<p>假設你的 object target 有一個 getter 函數 foo()，現在你透過 Proxy 代理 get 函數，當今天你呼叫 <code class=\"language-text\">obj.bar</code> 時，會印出 <code class=\"language-text\">2</code>，因為 Proxy handler 攔截並代理了原始 target 物件的 get 函數；接著，若你呼叫 <code class=\"language-text\">obj.foo</code>，會出現兩個結果: <code class=\"language-text\">Reflect.get  2</code> 與 <code class=\"language-text\">target[propertyKey]  3</code>。</p>\n<p>為什麼？</p>\n<p>這是因為只有透過 <code class=\"language-text\">Reflect.get()</code> 的第三個參數 <code class=\"language-text\">receiver</code>，將指向 Proxy 本身的實例傳進去原始物件的 get 呼叫，才能夠真的呼叫到 Proxy.get。</p>\n<p>若是直接透過 <code class=\"language-text\">target['foo']</code>，則原本在 <code class=\"language-text\">foo</code> 中的 this，就會指向原始的 target 本身，而不會觸發 Proxy 的 get。</p>\n<p>這邊概念真的比較難懂，若我有任何錯誤地方歡迎指正，我相信大家多看幾次範例後都能悟道的。</p>\n<p>除了與 Proxy 匹配的優勢外，Reflect 還帶來了一些好處（source: <a href=\"https://goo.gl/9v9STM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Benefits of ES6 Reflect API</a>, <a href=\"https://github.com/tvcutsem/harmony-reflect/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Harmony-reflect</a>)：</p>\n<h3 id=\"更優雅更好用的回傳值\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%84%AA%E9%9B%85%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9B%9E%E5%82%B3%E5%80%BC\" aria-label=\"更優雅更好用的回傳值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更優雅、更好用的回傳值</h3>\n<p>以往使用 <code class=\"language-text\">Object.defineProperty(obj, name, desc);</code> 時，若成功，會回傳 obj，失敗則有可能會拋出 Error。而使用 <code class=\"language-text\">Reflect.defineProperty(obj, name, desc)</code> 的話，則會回傳 boolean 值，讓失敗或成功的結果有統一的格式。</p>\n<!-- 介紹其他更多好處 https://github.com/tvcutsem/harmony-reflect/wiki-->\n<h3 id=\"更可靠的-code-classlanguage-textapplycode\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%8F%AF%E9%9D%A0%E7%9A%84-code-classlanguage-textapplycode\" aria-label=\"更可靠的 code classlanguage textapplycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更可靠的 <code class=\"language-text\">apply</code></h3>\n<p>在 es5 時，大家都很習慣透過 <code class=\"language-text\">f.apply(obj, args)</code> 的方式來 apply 函數到物件上頭，但很有可能在某些情況下，<code class=\"language-text\">f.apply</code> 被串改了，這時候就會有不預期的結果。</p>\n<p>Senior 一點的會知道可以利用 <code class=\"language-text\">Function.prototype.apply.call(f, obj, args)</code> 來呼叫，至少 prototype 不會騙你，但這種方式總是不夠優雅。</p>\n<p>現在有了 Reflect 後，就不需要擔心這種事情，透過 <code class=\"language-text\">Reflact.apply(obj, args)</code> 就能輕鬆達到一樣效果。</p>\n<h3 id=\"接受可變參數的-constructor\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E5%8F%97%E5%8F%AF%E8%AE%8A%E5%8F%83%E6%95%B8%E7%9A%84-constructor\" aria-label=\"接受可變參數的 constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接受可變參數的 Constructor</h3>\n<p>這個優點只有跟 ES5 比較時才有優勢。主要是讓你能透過：<code class=\"language-text\">const obj = Reflect.construct(FooBar, args)</code> 來在建構物件實例時，傳遞可變參數；若是在 ES5 的世界，只有 <code class=\"language-text\">FooBar.apply</code> 或 <code class=\"language-text\">FooBar.call</code> 能夠接受變動參數，但是在 <code class=\"language-text\">new</code> 物件實例時，並沒有 <code class=\"language-text\">apply</code> 或 <code class=\"language-text\">call</code> 可以使用。</p>\n<p>而現在透過 ES6 的 spread syntax，我們可以在建構物件實例時，直接傳遞可變參數：<code class=\"language-text\">const obj = new FooBar(...args)</code>。</p>\n<!-- 最後說明 https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/ 中 data binding 的實作-->\n<p><span id=\"todo-sample\"></span></p>\n<h2 id=\"最終範例利用-proxy-與-reflect-完成-one-way-data-binding\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%AF%84%E4%BE%8B%E5%88%A9%E7%94%A8-proxy-%E8%88%87-reflect-%E5%AE%8C%E6%88%90-one-way-data-binding\" aria-label=\"最終範例利用 proxy 與 reflect 完成 one way data binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終範例：利用 Proxy 與 Reflect 完成 one way data binding</h2>\n<p>在了解完 Proxy 與 Reflect 的基本使用方式後，想分享一個很有趣的應用，也就是我開頭提到，激發我研究 Proxy 的範例：frameworkless js one way data binding.</p>\n<p>結合先前提過的 Observe function，來實作一個簡單 Todo App：</p>\n<p data-height=\"339\" data-theme-id=\"dark\" data-slug-hash=\"LrpOEw\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"Oneway-data-binding-js-proxy-reflect\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/LrpOEw/\">Oneway-data-binding-js-proxy-reflect</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>基本上是結合了上述介紹的 Proxy 與 Reflect 特性，並融合[這篇文章]((<a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/</a>)的範例所製作的，如果大家有看完前面的介紹，對於這段 code 應該不難理解。</p>\n<p>主要是透過 Proxy 來代理 Object 的 <code class=\"language-text\">set</code> 與 <code class=\"language-text\">deleteProperty</code> 操作，讓 Todo list 的變動能夠被代理。</p>\n<p>此外，在先前的介紹中，都是以 Object 為主，但 todo app 範例中被 Proxy 代理的是 Array。</p>\n<p>最大的差別在於，當你 push 一個新 item 進入 Array 時，<code class=\"language-text\">set</code> 會被呼叫兩次，一次是新的 item 被塞入陣列時，一次是 Array 的 <code class=\"language-text\">length</code> property 加一時。所以要特別濾掉 <code class=\"language-text\">length</code> 更動的那次代理操作。</p>\n<p>最後，只要在代理的操作中，想辦法把 DOM 做對應的修改，如同上面程式中的 <code class=\"language-text\">line 22 ~ line 40</code>，定義一些 render template 的 function 來更新 DOM 即可。</p>\n<!-- 最終結論 -->\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>Javascript 的變動總是快於瀏覽器支援度，所以常常造成一些新的 Spec 我們不熟悉、不知如何運用，這次的研究學習了不少，而上面的 Todo App 是個簡陋不嚴謹的範例，不過也足以展現 Proxy 與 Reflect 在實際運用上的情境，並帶給我們另一種思考方向，很多時候不用一開始就套用 Framework，透過越來越進步的瀏覽器與 ES 版本，我們也能達到一樣目的。雖然比不上 framework 包山包海的優化，但或許能讓我們更了解實際要解決的問題是什麼，以及解決方法背後的概念。</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frameworkless JavaScript Part 3: One-Way Data Binding</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Proxy</a></li>\n<li><a href=\"https://www.jianshu.com/p/34f0e6abe312\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 之 Proxy 介绍</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入门</a></li>\n</ol>","id":"393df517-f9fc-527c-b09f-770cb56ee625","fields":{"slug":"js-proxy-reflect"},"frontmatter":{"date":"2018-05-27T23:20:17.000Z","title":"一起來了解 Javascript 中的 Proxy 與 Reflect","tags":["javascript","es6","proxy","reflect","frameworkless"],"type":"tech","slug":"js-proxy-reflect"},"timeToRead":15}],"tagName":"reflect","type":"tech"}},"staticQueryHashes":["2123680655"]}