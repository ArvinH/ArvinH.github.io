{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/pwa","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：San Cisco - Messages","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/yO5fOGKU-kM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - Messages</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/yO5fOGKU-kM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<!-- 流程介紹 -->\n<p>先前介紹過 Progressive Web App，我們利用 vanilla js 與 css 刻出一個支援 PWA 的天氣 web app，\n但現在應該很少人這麼有風格的用純 JS 寫 web app，世俗如我還是會想用 React 來支援前端框架，但 React 的 configuration 就已經頗複雜，要再加上 service-worker 的設定，想想就覺得累。</p>\n<p>好在 facebook 先前推出 <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-app</a> 這個工具，幫你預先設定好一些 config，並且隱藏起來（還是想要自己設定的話，可以透過 <code class=\"language-text\">npm run eject</code> 這個指令），如果是中小型專案應該很適合。</p>\n<p>因此，問題就剩下加上 service worker 這段了。</p>\n<p>幸運的是，Google chrome 的開發成員有一個 open source 的 repository - <a href=\"https://github.com/jeffposnick/create-react-pwa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-pwa</a>，是基於 create-react-app 的架構去支援 PWA。</p>\n<p>不過實際上我使用起來還是有些地方需要微調與注意的，所以今天就是來帶著大家一步一步把你從 <code class=\"language-text\">create-react-app</code> 中所創建的 React Web App 加入 PWA 的支援。</p>\n<h2 id=\"add-pwa-support-in-your-create-react-app\" style=\"position:relative;\"><a href=\"#add-pwa-support-in-your-create-react-app\" aria-label=\"add pwa support in your create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add PWA support in your create-react-app</h2>\n<!-- 講解如何加入 pwa support -->\n<p>以防大家沒用過 <code class=\"language-text\">create-react-app</code>，這邊稍稍介紹一下。首先你要先透過 <code class=\"language-text\">create-react-app</code> 來產生你的 web app:</p>\n<p><code class=\"language-text\">npm install -g create-react-app</code></p>\n<p><code class=\"language-text\">create-react-app react-pwa-boilerplate</code></p>\n<p>接著就會產生以下結構的資料夾：</p>\n<img src=\"/image/create-react-app-structure.png\" alt=\"create-react-app-structure\" style=\"width: 200px;\">\n<p>當然 <code class=\"language-text\">src</code> 內的結構你可以依照你自己需求調整。</p>\n<p>接著 <code class=\"language-text\">npm start</code> 即可在 <code class=\"language-text\">localhost:3000</code> 看到頁面了。</p>\n<p>而在有了一個 react web app 的雛形後，我們就可以來加上 PWA 的支援了！</p>\n<h3 id=\"step-i---sw-precache\" style=\"position:relative;\"><a href=\"#step-i---sw-precache\" aria-label=\"step i   sw precache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step I - sw-precache</h3>\n<p>要能夠擁有 <code class=\"language-text\">Progressive Web App</code> 的能力，需要 <code class=\"language-text\">Service Worker</code> 的幫助，除了自己撰寫 service-worker 以外，我們可以利用 Google 出的 <a href=\"https://github.com/GoogleChrome/sw-precache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">sw-precache</code> </a>來幫我們產生需要的 <code class=\"language-text\">service-worker.js</code>。</p>\n<p>在 <code class=\"language-text\">package.json</code> 中的 <code class=\"language-text\">devDependencies</code> 加入 <code class=\"language-text\">sw-precache</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspackage.json\"><pre class=\"language-jspackage.json\"><code class=\"language-jspackage.json\">  &quot;devDependencies&quot;: {\n    &quot;react-scripts&quot;: &quot;0.4.1&quot;,\n    &quot;sw-precache&quot;: &quot;^4.0.0&quot;\n  },</code></pre></div>\n<p>or <code class=\"language-text\">npm install sw-precache --save</code></p>\n<p>接著，在 <code class=\"language-text\">package.json</code> 中的 <code class=\"language-text\">script</code> 內，我們要修改一下 <code class=\"language-text\">build</code> 的指令：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspackage.json\"><pre class=\"language-jspackage.json\"><code class=\"language-jspackage.json\">&quot;scripts&quot;: {\n  &quot;build&quot;: &quot;react-scripts build &amp;&amp; cp manifest.json favicon.ico build/ &amp;&amp; sw-precache --navigate-fallback=&#39;index.html&#39; --root=&#39;build/&#39; --static-file-globs=&#39;build/**/!(*map*)&#39;&quot;,\n}</code></pre></div>\n<p>這個指令做了幾件事情：</p>\n<ol>\n<li><code class=\"language-text\">react-scripts build</code> 是原本 <code class=\"language-text\">create-react-app</code> 的指令，將相關的 react component 等等透過 webpack 幫你編譯轉譯後放到 <code class=\"language-text\">build</code> folder 底下。</li>\n<li><code class=\"language-text\">cp manifest.json favicon.ico build/</code> ： manifest.json 與 favicon.ico 都是 PWA 需要的東西，待會會在說明內容。因為原本的 react-scripts build 中並不會產生這樣的東西，自然也不會幫你 build 進去，但我們需要讓 <code class=\"language-text\">service worker</code> 能儲存它們，所以這邊就手動把他放入 <code class=\"language-text\">build</code> 底下。</li>\n<li><code class=\"language-text\">sw-precache --navigate-fallback='index.html' --root='build/' --static-file-globs='build/**/!(*map*)'</code> ：</li>\n</ol>\n<p>這個指令透過 sw-precache，產生一個 service-worker.js 的檔案，他會自動幫你把 build folder 底下的 static 檔案都暫存起來！</p>\n<p><code class=\"language-text\">--navigate-fallback='index.html'</code> 這個 flag 是為了讓你使用 React Router 而放入的。如果你是根據 facebooke 的 <a href=\"https://github.com/facebookincubator/create-react-app/blob/master/template/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">doc</a> 加入 react-router，並且 deploy 到 github page，那你必須加入這個 flag，這樣一來，當 user 在切換動作而改變 url 時，任何的 random url 都會 fallback 到 index.html，其實也就是你 single page 的那個 entry 點，<code class=\"language-text\">service-worker</code> 才能夠找得到 cache。</p>\n<p><code class=\"language-text\">--static-file-globs</code>：這個 flag 讓 sw-precache 存 source map 外的所有 static files。</p>\n<h3 id=\"step-ii---manifestjson\" style=\"position:relative;\"><a href=\"#step-ii---manifestjson\" aria-label=\"step ii   manifestjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step II - manifest.json</h3>\n<p>再來是 PWA 中很重要的 manifest.json，能不能順利在 mobile 上 Add to homescreen 就要靠這份檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmanifest.json\"><pre class=\"language-jsmanifest.json\"><code class=\"language-jsmanifest.json\">{\n    &quot;short_name&quot;: &quot;react-pwa-boilerplate&quot;,\n    &quot;name&quot;: &quot;react-pwa-boilerplate&quot;,\n    &quot;icons&quot;: [\n        {\n            &quot;src&quot;: &quot;favicon.ico&quot;,\n            &quot;sizes&quot;: &quot;144x144&quot;,\n            &quot;type&quot;: &quot;image/png&quot;\n        }\n    ],\n    &quot;start_url&quot;: &quot;./&quot;,\n    &quot;display&quot;: &quot;standalone&quot;\n}</code></pre></div>\n<p>要注意的是，這邊的 icons，size 一定要給正確的值，否則會造成 manifest 的解析錯誤，另外，如果要能讓 iOS 內的 safari 也能夠跑，需要有額外的設定，待會還會提及，也可以先參考之前的 <a href=\"blog.arvinh.info/2016/07/18/progressive-web-app/\">文章</a></p>\n<h3 id=\"step-iii---indexhtml\" style=\"position:relative;\"><a href=\"#step-iii---indexhtml\" aria-label=\"step iii   indexhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step III - index.html</h3>\n<p>上述設定都做完後，要將 <code class=\"language-text\">manifest.json</code> 放入 <code class=\"language-text\">index.html</code> 內，並註冊 <code class=\"language-text\">service-worker.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n    &lt;link rel=&quot;shortcut icon&quot; href=&quot;./src/favicon.ico&quot;&gt;\n    &lt;!-- manifest 加入這邊～ --&gt;\n    &lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;\n    &lt;title&gt;React App&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n    &lt;!-- service worker 在這邊註冊~ --&gt;\n    &lt;script&gt;\n        if (&#39;serviceWorker&#39; in navigator) {\n            navigator.serviceWorker.register(&#39;service-worker.js&#39;).catch(function(ex) {\n                console.warn(ex);\n                console.warn(&#39;(This warning can be safely ignored outside of the production build.)&#39;);\n            });\n        }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<h3 id=\"step-iv---deploy-to-github-page\" style=\"position:relative;\"><a href=\"#step-iv---deploy-to-github-page\" aria-label=\"step iv   deploy to github page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step IV - Deploy to github page</h3>\n<p>搭配 github page 可以快速將你的 web app 部署上去，<code class=\"language-text\">create-react-app</code> 在你執行完 build 以後，提供了 deploy to github 的指令，我們可以把它先加入 package.json 當中。另外也一並加入 <code class=\"language-text\">homepage</code> 的欄位。</p>\n<div class=\"gatsby-highlight\" data-language=\"jspackage.json\"><pre class=\"language-jspackage.json\"><code class=\"language-jspackage.json\">&quot;scripts&quot;: {\n    &quot;deploy&quot;: &quot;git commit -am \\&quot;Save local changes\\&quot;; git checkout -B gh-pages; git add -f build; git commit -am \\&quot;Rebuild website\\&quot;; git filter-branch -f --prune-empty --subdirectory-filter build; git push -f origin gh-pages; git checkout -&quot;,\n    &quot;start&quot;: &quot;react-scripts start&quot;,\n    &quot;build&quot;: &quot;react-scripts build &amp;&amp; cp manifest.json favicon.ico build/ &amp;&amp; sw-precache --navigate-fallback=&#39;index.html&#39; --root=&#39;build/&#39; --static-file-globs=&#39;build/**/!(*map*)&#39;&quot;,\n    &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,\n    &quot;eject&quot;: &quot;react-scripts eject&quot;\n  },\n  &quot;homepage&quot;: &quot;https://blog.arvinh.info/react-pwa-boilerplate&quot;</code></pre></div>\n<h3 id=\"step-v---build--deploy--run-and--debug\" style=\"position:relative;\"><a href=\"#step-v---build--deploy--run-and--debug\" aria-label=\"step v   build  deploy  run and  debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step V - build &#x26; deploy &#x26; run and ... debug?!</h3>\n<p>如果你一步一步跟著做到這裡，理論上就可以 <code class=\"language-text\">npm run build</code> 來 build 看看，接著再 <code class=\"language-text\">npm run deploy</code> 來部署到 github page 上。</p>\n<p>不過當你執行完，console 也沒有噴任何 error，將你的 web app 用手機開啟並加入主畫面後，重新開啟還是一樣進入瀏覽器的畫面？！</p>\n<h4 id=\"manifest-path-error\" style=\"position:relative;\"><a href=\"#manifest-path-error\" aria-label=\"manifest path error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest path error</h4>\n<p>仔細檢查一下瀏覽器 error 會發現在我們 build 出來的 index.html 內，manifest.json 的路徑被 parse 錯誤了！</p>\n<p><img src=\"/image/manifestError.png\" alt=\"manifest error\"></p>\n<p>這其實是因為目前 <code class=\"language-text\">create-react-app</code> 內部的 webpack loader 的 issue，在這個 <a href=\"https://github.com/jeffposnick/create-react-pwa/issues/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a> 裡面有提到，目前我的解法是：</p>\n<ol>\n<li>將一開始的 index.html 修改為 <code class=\"language-text\">&lt;link rel=\"manifest\" href=\"/manifest.json\"></code></li>\n<li>build 完以後，到 build/index.html 內將其修正為 <code class=\"language-text\">&lt;link rel=\"manifest\" href=\"./manifest.json\"></code></li>\n</ol>\n<p>除了上面這個錯誤以外，以上步驟還少了一些東西。</p>\n<h4 id=\"ios-support\" style=\"position:relative;\"><a href=\"#ios-support\" aria-label=\"ios support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iOS support</h4>\n<p>如果你想要你的 web app 能夠在 iOS 上的 safari 運作，在 index.html 中還得要加入以下幾行：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;!-- Add to home screen for Safari on iOS --&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;React-PWA&quot;&gt;\n    &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;./src/images/favicon-144x144.png&quot;&gt;</code></pre></div>\n<p>其中的 icon 路徑記得要填寫正確，也一樣要確認好 image 的 size。</p>\n<h4 id=\"cache-polyfill\" style=\"position:relative;\"><a href=\"#cache-polyfill\" aria-label=\"cache polyfill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache polyfill</h4>\n<p>現在 service worker 的支援度還很低，有些 polyfill 可能需要加一下，但我還不確定到底需要哪些...</p>\n<p>這個 Cache polyfill 用來增加 Cache api 的支援：</p>\n<p><a href=\"https://github.com/dominiccooney/cache-polyfill\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/dominiccooney/cache-polyfill</a></p>\n<p>修改你 pacakage.json 中的 build script，加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspacakage.json\"><pre class=\"language-jspacakage.json\"><code class=\"language-jspacakage.json\">&quot;build&quot;: &quot;react-scripts build &amp;&amp; cp manifest.json cache-polyfill.js favicon.ico build/ &amp;&amp; sw-precache --navigate-fallback=&#39;index.html&#39; --root=&#39;build/&#39; --static-file-globs=&#39;build/**/!(*map*)&#39;&quot;,</code></pre></div>\n<p>並在你 build folder 內的 service-worker.js 內加上：</p>\n<p><code class=\"language-text\">importScripts('cache-polyfill.js');</code></p>\n<h4 id=\"run\" style=\"position:relative;\"><a href=\"#run\" aria-label=\"run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run</h4>\n<p>修正完上述錯誤後，執行 <code class=\"language-text\">npm run deploy</code>，應該就會自動幫你把 build folder 底下的內容部署到 gh-pages 這個 branch 上，你就能在 <a href=\"https://%5Byour_github_acount%5D.github.io/%5Bproject_name%5D/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://[your_github_acount].github.io/[project_name]/</a> 看到你的 web app。</p>\n<p>試著加入主畫面看看，如果沒問題的話，當你再次從主畫面點選 icon 開啟時，應該就可以看到你的網站像 app 一般的呈現在手機上了！</p>\n<p>你可以先從 chrome devtool 確認 service worker 的運作情況，打開在 devtool 中的 <strong>Application tab</strong> (以前叫做 resources tab)</p>\n<p>online:\n<img src=\"/image/pwa-network.png\" alt=\"pwa-network\"></p>\n<p>offline:\n<img src=\"/image/pwa-nonetwork.png\" alt=\"pwa-nonetwork\"></p>\n<p>可以看到 resource 在 offline 時是從 service worker 來。</p>\n<p>手機上的狀況像是:</p>\n<img src=\"/image/pwa-sample.gif\" alt=\"pwa-sample\" style=\"width: 200px;\">\n<img src=\"/image/pwa-sample2.gif\" alt=\"pwa-sample2\" style=\"width: 200px;\">\n<h3 id=\"補充說明\" style=\"position:relative;\"><a href=\"#%E8%A3%9C%E5%85%85%E8%AA%AA%E6%98%8E\" aria-label=\"補充說明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>補充說明</h3>\n<p>這篇文章講述到的 PWA support 實際上只能讓你的 web app 能跳脫瀏覽器，運作起來像個 Native App，但是並沒有考量其他實作 PWA 時需要注意的細節，像是 PWA 內的 App shell 等等。</p>\n<p>另外，你的 web app 一定不可能只有 static files，勢必會需要有跟 API 溝通的部分，這邊就需要額外使用 <a href=\"https://github.com/GoogleChrome/sw-toolbox\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sw-toolbox</a> 來負責 runtime caching strategies，你也可以透過 sw-precache 的設定檔來處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsprecache-config.json\"><pre class=\"language-jsprecache-config.json\"><code class=\"language-jsprecache-config.json\">{\ndynamicUrlToDependencies: {\n  dynamic/page1: [\n    &quot;app/views/layout.jade&quot;,\n    &quot;app/views/page1.jade&quot;\n  ],\n  dynamic/page2: [\n    &quot;app/views/layout.jade&quot;,\n    &quot;app/views/page2.jade&quot;\n  ]\n  },\n  staticFileGlobs: [\n    &quot;app/css/**.css&quot;,\n    &quot;app/**.html&quot;,\n    &quot;app/images/**.*&quot;,\n    &quot;app/js/**.js&quot;\n  ],\n  stripPrefix: &quot;app/&quot;,\n  verbose: true,\n  runtimeCaching: [\n    {\n      urlPattern: &quot;/this\\.is\\.a\\.regex/&quot;,\n      handler: &quot;networkFirst&quot;\n    }\n  ]\n}</code></pre></div>\n<p>只要在 sw-precache 的指令後加上 <code class=\"language-text\">--config=sw-precache-config.json</code> 這個 flag 來指定 config 檔即可。</p>\n<h3 id=\"程式碼\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BC%8F%E7%A2%BC\" aria-label=\"程式碼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程式碼</h3>\n<p>上述完整程式碼可以在這裡取得：\n<a href=\"https://github.com/ArvinH/react-pwa-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/react-pwa-boilerplate</a></p>\n<p>測試頁面：<a href=\"https://blog.arvinh.info/react-pwa-boilerplate/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.arvinh.info/react-pwa-boilerplate/</a></p>\n<p>目前測試似乎 offline 會有問題，會持續修正更新！並加入 react-router、redux 等常用 lib。</p>\n<h3 id=\"工商服務時間\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%95%86%E6%9C%8D%E5%8B%99%E6%99%82%E9%96%93\" aria-label=\"工商服務時間 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工商服務時間</h3>\n<p>前陣子強者我朋友寫了一個神奇寶貝屬性對戰的遊戲，可以幫助你瞭解神奇寶貝之間各種屬性的相剋狀況，剛好是使用 <code class=\"language-text\">create-react-app</code> 與 <code class=\"language-text\">Redux</code> 實作，我也加入了 pwa 的版本，只是目前 offline 似乎有點問題...</p>\n<p>歡迎大家幫忙修~</p>\n<p>大家可以先到原本網站玩玩!</p>\n<p>原版：\n<a href=\"https://kaddopur.github.io/type_instructor/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kaddopur.github.io/type_instructor/</a></p>\n<p>PWA：\n<a href=\"https://blog.arvinh.info/type_instructor/#/?_k=usu9f3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.arvinh.info/type_instructor/#/?_k=usu9f3</a></p>\n<p><img src=\"/image/pwa-react.gif\" alt=\"type_instructor\"></p>\n<h2 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h2>\n<ul>\n<li><a href=\"https://github.com/jeffposnick/create-react-pwa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Create-react-pwa</a></li>\n<li><a href=\"https://github.com/GoogleChrome/sw-precache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google sw-precache</a></li>\n<li><a href=\"https://github.com/dominiccooney/cache-polyfill\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-polyfill</a></li>\n</ul>","id":"32d0817d-e222-5abb-97f2-a1ccd4b8894e","fields":{"slug":"create-react-pwa-serviceworker"},"frontmatter":{"date":"2016-09-17T12:37:22.000Z","title":"當 React web app 遇上 Progressive web app","tags":["react","pwa","web app"],"type":"tech","slug":"create-react-pwa-serviceworker"},"timeToRead":9},{"excerpt":"\"所以你是說...我手機上會有我上傳到平台的資料？\"\n\"是的\"\n\"可是它顯示 0kb 呀？！\"","html":"<blockquote>\n<p>\"所以你是說...我手機上會有我上傳到平台的資料？\"\n\"是的\"\n\"可是它顯示 0kb 呀？！\"</p>\n</blockquote>\n<!-- more -->\n<p>距離今年 Google I/O 2016 轉眼間也過了兩個多月，議程中提及的 Progressive Web App (PWA) 似乎討論不多，我當時隨便掃過 Google Developers 上的資料後的念頭是：“怎麼有點像當年 Firefox OS 上跑 web app的長相？”</p>\n<p>其實我覺得是蠻雷同的，差別在於 Progressive Web App 是想能夠直接利用目前的 Browser 來支援其運作。實際上 Mozilla 一樣有在推動相關標準的建立。</p>\n<p>這也是我初次接觸 Progressive Web App，因此就照著 Google Developers 上的教學走一遍，並紀錄分享在此。</p>\n<h2 id=\"何謂-progressive-web-app-pwa\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-progressive-web-app-pwa\" aria-label=\"何謂 progressive web app pwa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 Progressive Web App (PWA)</h2>\n<p>先講結論，Progressive Web App 是希望能夠讓 Web application 盡可能的在各種環境（網路環境、手機作業系統等）下都能順暢且不減功能性的運作，並讓你的 Web App 可以：</p>\n<ol>\n<li>直接被使用者安裝到桌面</li>\n<li>offline 使用</li>\n<li>擁有推播功能</li>\n<li>開啟時看不到 URL Bar（類 Native app 的使用經驗）</li>\n<li>開啟時有 Splash Screen</li>\n</ol>\n<p>而要做到這些事情，整個 PWA 的設計要點就會包含以下特性：</p>\n<ul>\n<li><strong><span style=\"color: #c11b1b\">Progressive - 漸進增強：在越完善的環境下，能執行更加完整的服務，若環境不許可，能夠優雅降級，運行最基本的功能。</span></strong></li>\n<li>Responsive - 響應式介面：能夠在各種螢幕尺寸下顯示、能夠因應多種輸入方式與設備回饋（震動、音頻等）。</li>\n<li><strong><span style=\"color: #c11b1b\">App-like - 類原生程式的操作模式與使用者介面：採用原生平台（Native App）的 Style 與資料更新方式（利用 service worker 存取快取資源）。</span></strong></li>\n<li><strong><span style=\"color: #c11b1b\">Fresh - 持續更新：使用 Service worker API 來自動更新應用程式（無需透過 App store, Google Play 等）。</span></strong></li>\n<li>Safe - 應全面採用 HTTPS 提供最基本的安全防護。</li>\n<li>Discoverable - 透過設置 manifest 檔案，一樣能進行 SEO 優化，讓搜尋引擎找得到你的 APP。</li>\n<li><strong><span style=\"color: #c11b1b\">Re-engageable - 透過推播，能主動與使用者互動。</span></strong></li>\n<li><strong><span style=\"color: #c11b1b\">Installable - 可安裝：透過 Add To Home 等方式，將 Web App 放在手機桌面，並且能在應用程式中單獨列出與切換，就像一般的 App 一樣，但完全不用透過應用程式商店下載。</span></strong></li>\n<li>Linkable - 透過 URL 可以隨時分享你的 App。</li>\n</ul>\n<p>上面是官網所列出的，而紅色是我認為較為重點的特徵，而在這些重點特徵下，最大要點就是 Service worker。有了 Service worker 的幫助，你可以實作出離線可用的 Web App，讓 User 操作起來有更佳的使用體驗。</p>\n<!-- 簡介 service worker -->\n<h2 id=\"service-worker\" style=\"position:relative;\"><a href=\"#service-worker\" aria-label=\"service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service Worker</h2>\n<p>Service worker 是一個運行在瀏覽器背後的腳本，有其自己的生命週期，並獨立於網頁頁面。\n其特性如下：</p>\n<ul>\n<li><strong><span style=\"color: #071684\">Javascript worker，無法直接操作頁面 DOM，但可透過 <code class=\"language-text\">postMessage</code> 與頁面溝通，讓該頁面自行操作 DOM。</span></strong></li>\n<li><strong><span style=\"color: #071684\">Service worker 可以讓你截取並掌控頁面發出的 network request。(這點很重要！要記住！！)</span></strong></li>\n<li><strong><span style=\"color: #071684\">當 Service worker 不需要被使用時，會進入 Terminated 生命週期，等待下一次的需求進來。因此你在 onfetch 或是 onmessage 的 event handler 中若想要儲存全域變數，必須使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IndexedDB</a> API 來輔助儲存。</span></strong></li>\n<li><strong><span style=\"color: #071684\">使用 Promise (這對一般開發者來說應該已經不算難事)</span></strong></li>\n</ul>\n<p>待會進行 PWA 實作的時候，我們就會運用到 service worker，透過 intercept 以及 handle network requests 來幫忙處理 Cache 的議題。</p>\n<p>今天重點擺在 PWA，Service Worker 的相關介紹可以看這裡：\n<a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source: html5rocks</a>\n<img src=\"/image/sw-lifecycle.png\" alt=\"Service Worker LifeCycle\" style=\"width: 500px;\"/></p>\n<!-- 動手做第一個 pwa -->\n<p>看太多文字會想睡覺，所以開始動手做我們的第一個 Progressive Web App 吧！</p>\n<h1 id=\"progressive-web-app\" style=\"position:relative;\"><a href=\"#progressive-web-app\" aria-label=\"progressive web app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Progressive Web App</h1>\n<p>為求快速，我們跟著 Google developers 上的範例程式走一遍，才能專注在 PWA 的部分，不用去管其他細節。code 可以在此下載 <a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/pwa-weather.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google developers pwa example</a>，後續步驟會需要這份 code 來做對應比較方便理解。</p>\n<p>範例是一個天氣卡，可以顯示所選區域的天氣狀況，大致上會長這樣：</p>\n<img src=\"/image/pwa-weather-example-final.png\" alt=\"pwa-weather\" style=\"width: 200px;\"/>\n<h2 id=\"app-shell-architecture\" style=\"position:relative;\"><a href=\"#app-shell-architecture\" aria-label=\"app shell architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App Shell Architecture</h2>\n<p>當你用瀏覽器打開一個網頁時，通常都需要等該頁面載完需要的 javascript, css 等等檔案後，你才能看到一個完整的頁面，在 SPA 當道的現今更是如此（姑且先不談 server-side render）</p>\n<p>但還記得先前提過，Progressive Web App 的目標是想要能夠 <strong><span style=\"color: #c11b1b\">讓 Web application 盡可能的在各種環境（網路環境、手機作業系統等）下都能順暢且不減功能性的運作。</span></strong></p>\n<p>因此 PWA 提出了一個 <strong>App Shell Architecture</strong></p>\n<p>App shell architecture 將應用程式的基礎設施（infrastructure）、UI 與資料做分離，並利用 service worker 將 infra 與 UI 做 Cache，如此一來，當你重複打開 Web App 時，需要遠端載入的就只剩下資料，因為其他部分都已經先快取在本地端了（也可以把部分資料先快取起來）。</p>\n<p>由上述說明應該不難看出 app shell 的設計會非常重要，他決定了你的 User 進到你的 App 後的第一印象。所以在設計 App shell architecture 時，有幾個要點必須考量清楚：</p>\n<ul>\n<li>當 Web App 開啟時，哪些東西需要立即呈現在螢幕上?</li>\n<li>有哪些是重要的 UI components？</li>\n<li>此 app shell 是否需要 styles, javascript 等等資源？</li>\n</ul>\n<p>以今天的範例來說，我們會預期一開啟 App 時，要能馬上看到最上方的 Header 以及中間至少一張天氣預測卡，因此這兩個元件就會是我們必須設計進 App shell architecture 的 component。</p>\n<p>稍稍整理一下，我們的 App shell 將會擁有：</p>\n<ul>\n<li>顯示 App 名稱、更新與新增按鈕的 Header Bar</li>\n<li>Header 下方放置天氣卡的 Container</li>\n<li>天氣卡模板</li>\n<li>加入地區天氣時的對話筐</li>\n<li>載入狀態的 loader</li>\n</ul>\n<h2 id=\"app-shell-architecture-implementation\" style=\"position:relative;\"><a href=\"#app-shell-architecture-implementation\" aria-label=\"app shell architecture implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App shell architecture implementation</h2>\n<p>根據上方列出的需求，身為 web developer 一定很快就會把 HTML、CSS 刻好，甚至將可能需要的 JS 都先準備好，但實際上 Progressive web app 的重點其實在於如何將元件與資料做 cache ，以及 app-like 的顯示模式，因此我們跳過這些跟基礎 web 開發相關的步驟，直接到剛剛下載的範例檔案中，打開 step-04 資料夾，裡面就有了最 default 的元件 layout（<code class=\"language-text\">index.html</code>, <code class=\"language-text\">inline.cs</code>），以及資料 fetch 相關的 javascript 檔案（<code class=\"language-text\">app.js</code>）：</p>\n<img src=\"/image/step-04-foldr.png\" alt=\"step-04 folder\" style=\"width: 200px;\"/>\n<p><strong><span style=\"color: #c11b1b\">[!NOTICE] 需要將程式碼內的一些相關路徑修改一下才能正常運作喔！</span></strong></p>\n<p>開啟以後正常會看到如下畫面：</p>\n<p><img src=\"/image/step-04.gif\" alt=\"step-04\" title=\"step-04\"></p>\n<p>會先閃過 loading 圈圈，接著利用 <code class=\"language-text\">initialWeatherForecast</code> 做第一次資料繪製，這邊是先寫死一個假資料，但實務上應該要根據 user 當下 ip location 去抓取資料並更新。</p>\n<p>但不管是假資料與否，重點在於，當處理完第一次資料 fetch 後，要能夠 cache 起來，才能應付 slow connection 或是 offline 的狀況。也就是待會 service-worker 要負責的事情。</p>\n<p>此外，此 Wep app的功能中，要<strong>讓 user 能夠選擇想要的區域</strong>，我們總不能要 user 每次進來都重選，因此要能儲存這部分資訊，實務上可以用 <code class=\"language-text\">IndexDB</code> 來儲存，Google 推薦的 lib 為 <a href=\"https://www.npmjs.com/package/idb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">idb</a>，而這邊我們簡單用 LocalStorage API 來處理即可。</p>\n<p>相關設定在 <code class=\"language-text\">app.js</code> 當中：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapp.js\"><pre class=\"language-jsapp.js\"><code class=\"language-jsapp.js\"> // Iterate all of the cards and attempt to get the latest forecast data\n  app.updateForecasts = function() {\n    var keys = Object.keys(app.visibleCards);\n    keys.forEach(function(key) {\n      app.getForecast(key);\n    });\n  };\n\n  // Save list of cities to localStorage, see note below about localStorage.\n  app.saveSelectedCities = function() {\n    var selectedCities = JSON.stringify(app.selectedCities);\n    // IMPORTANT: See notes about use of localStorage.\n    localStorage.selectedCities = selectedCities;\n  };\n\n  app.selectedCities = localStorage.selectedCities;\n  if (app.selectedCities) {\n    app.selectedCities = JSON.parse(app.selectedCities);\n    app.selectedCities.forEach(function(city) {\n      app.getForecast(city.key, city.label);\n    });\n  } else {\n    app.updateForecastCard(initialWeatherForecast);\n    app.selectedCities = [\n      {key: initialWeatherForecast.key, label: initialWeatherForecast.label}\n    ];\n    app.saveSelectedCities();\n  }</code></pre></div>\n<p>如此一來，你可以新增想要的城市，在當你重新載入時，就會看到剛剛所選的城市依然會出現了。</p>\n<p><img src=\"/image/localstorage.gif\" alt=\"localstorage\" title=\"local storage test\"></p>\n<h2 id=\"use-service-worker-to-pre-cache-the-app-shell\" style=\"position:relative;\"><a href=\"#use-service-worker-to-pre-cache-the-app-shell\" aria-label=\"use service worker to pre cache the app shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Service Worker to Pre-cache the App Shell</h2>\n<h3 id=\"前情提要\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E6%83%85%E6%8F%90%E8%A6%81\" aria-label=\"前情提要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前情提要</h3>\n<p><strong><span style=\"color: #c11b1b\">Service worker 的功能只能在 localhost 或是 HTTPS 的環境下，並且目前的瀏覽器有支援的不多，至少要 Chrome 47 以上。不過相信會越來越多瀏覽器加入此支援的。</span></strong></p>\n<h3 id=\"step-1-註冊-service-worker\" style=\"position:relative;\"><a href=\"#step-1-%E8%A8%BB%E5%86%8A-service-worker\" aria-label=\"step 1 註冊 service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 1. 註冊 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">service worker</a></h3>\n<p>在我們的 <code class=\"language-text\">app.js</code> 中，需要先檢查是否有 service worker 存在，若無，則透過 <code class=\"language-text\">navigator.serviceWorker</code> 去註冊。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapp.js\"><pre class=\"language-jsapp.js\"><code class=\"language-jsapp.js\">if(&#39;serviceWorker&#39; in navigator) {  \n  navigator.serviceWorker  \n           .register(&#39;/service-worker.js&#39;)  \n           .then(function() { console.log(&#39;Service Worker Registered&#39;); });  \n}</code></pre></div>\n<p>當然，我們也要創建好我們的 <code class=\"language-text\">service-worker.js</code>。 Service worker 的檔案要放在<strong>根目錄</strong>底下，因為 service worker 的 js scope 是包含其所在之目錄。</p>\n<h3 id=\"step-2-pre-cache-assets\" style=\"position:relative;\"><a href=\"#step-2-pre-cache-assets\" aria-label=\"step 2 pre cache assets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 2. Pre-cache assets</h3>\n<p>當 service worker 被註冊好後，當使用者初次開啟我們的 web app，會觸發一個 <code class=\"language-text\">install</code> event，而我們可以在這個 event handler 中 cache 住我們需要的 assets。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;install&#39;, function(e) {\n  console.log(&#39;[ServiceWorker] Install&#39;);\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log(&#39;[ServiceWorker] Caching App Shell&#39;);\n      return cache.addAll(filesToCache);\n    })\n  );\n});</code></pre></div>\n<p><strong>其中的 caches 是 Service Worker API 中的 <code class=\"language-text\">CacheStorage</code>，可以到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 瞭解一下。</strong></p>\n<p>此外，<code class=\"language-text\">chacheName</code> 的設定也是蠻重要的，可以依此來分開你的資料與 App shell 的快取。</p>\n<p>當你 <code class=\"language-text\">caches.open</code>後，裡面的 callback 可以呼叫 <code class=\"language-text\">cache.addAll()</code> 來將 assets 放入快取，<code class=\"language-text\">cache.addAll()</code> 接受 <code class=\"language-text\">URL</code> list，像是這樣的格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">var filesToCache = [  \n  &#39;/&#39;,  \n  &#39;/index.html&#39;,  \n  &#39;/scripts/app.js&#39;,  \n  &#39;/styles/inline.css&#39;,  \n  &#39;/images/clear.png&#39;,  \n  &#39;/images/cloudy-scattered-showers.png&#39;,  \n  &#39;/images/cloudy.png&#39;,  \n  &#39;/images/fog.png&#39;,  \n  &#39;/images/ic\\_add\\_white\\_24px.svg&#39;,  \n  &#39;/images/ic\\_refresh\\_white\\_24px.svg&#39;,  \n  &#39;/images/partly-cloudy.png&#39;,  \n  &#39;/images/rain.png&#39;,  \n  &#39;/images/scattered-showers.png&#39;,  \n  &#39;/images/sleet.png&#39;,  \n  &#39;/images/snow.png&#39;,  \n  &#39;/images/thunderstorm.png&#39;,  \n  &#39;/images/wind.png&#39;  \n];</code></pre></div>\n<p>建議你加入版號來設置你的 <code class=\"language-text\">cachName</code>，這樣才能確保每次更新都能拿到最新資料。不過要記得將過期的 cache 清空！\n我們可以在 <code class=\"language-text\">activate</code> 這個 event 的 handler 來做這件事情。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;activate&#39;, function(e) {  \n  console.log(&#39;[ServiceWorker] Activate&#39;);  \n  e.waitUntil(  \n    caches.keys().then(function(keyList) {  \n      return Promise.all(keyList.map(function(key) {  \n        console.log(&#39;[ServiceWorker] Removing old cache&#39;, key);  \n        if (key !== cacheName) {  \n          return caches.delete(key);  \n        }  \n      }));  \n    })  \n  );  \n});</code></pre></div>\n<h3 id=\"step-3-fetch-assets-from-cache-or-not\" style=\"position:relative;\"><a href=\"#step-3-fetch-assets-from-cache-or-not\" aria-label=\"step 3 fetch assets from cache or not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 3. Fetch assets from cache or not</h3>\n<p>到目前為止，我們知道了怎麼把 assets 存進 cache 裡面，但要怎麼拿出來呢？\n我們註冊一個 <code class=\"language-text\">fetch</code> event handler，用來擷取 web app 發出的 request，當 request 有 match 到我們剛剛存入的那些 assets 時，我們就從中取出並回傳，若並沒有 match 到，則利用 <code class=\"language-text\">fetch</code> api 去真的打 request。 [ fetch api 也是目前實驗中的 web api，介紹可看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fetch api</a> ]</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;fetch&#39;, function(e) {  \n  console.log(&#39;[ServiceWorker] Fetch&#39;, e.request.url);  \n  e.respondWith(  \n    caches.match(e.request).then(function(response) {  \n      return response || fetch(e.request);  \n    })  \n  );  \n});</code></pre></div>\n<h3 id=\"beware-of-the-edge-cases\" style=\"position:relative;\"><a href=\"#beware-of-the-edge-cases\" aria-label=\"beware of the edge cases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Beware of the edge cases</h3>\n<p>目前範例中的 code 實際上並不適合運用在 production 上頭，因為有許多 edge cases 沒有被考慮與處理到：</p>\n<ol>\n<li>剛剛提過的，當你的 content 有變動時，cache key 要更新（範例內我們需要手動更新）。</li>\n<li>只要你的檔案有一點點更動，小至 typo，大至 code refactor，都會造成 cache invalidated，需要重新下載，效率不好。</li>\n<li>必須確保 service-worker 中的 <code class=\"language-text\">install handler</code> 所發出的 https request 不會被 Brower cache 影響，否則會無法 update。</li>\n<li>最重要的一點，範例採用 cache-first 的策略，任何 request 只要有 cache 在就會先拿 cache，若 service worker 相關的註冊與設定也被 cache 時，更新會變得很困難。</li>\n</ol>\n<p>Google 提出一套 lib <a href=\"https://github.com/GoogleChrome/sw-precache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sw-precache</a> 來幫助你避免上述的 edge cases，這超出此篇的範疇，但若要製作 Productoin 版本的 PWA 時，務必研究一下。</p>\n<p>此外，在開發中，也可以透過 <code class=\"language-text\">chrome://serviceworker-internals</code> 來 stop、un-register 現存的 service workers 以及 fresh start service worker。</p>\n<h3 id=\"test-service-worker\" style=\"position:relative;\"><a href=\"#test-service-worker\" aria-label=\"test service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Service worker</h3>\n<p>現在我們可以來試試看剛剛的 service worker 到底能不能幫我們把 assets cache 起來，你可以像 Google 教學中 deploy 到 <a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/step-08?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">firebase</a>，也可以學我直接用 express 來 host。</p>\n<p>用 express 來 host 範例需要更動幾個地方：</p>\n<ol>\n<li>把範例的 index.html, inline.css, app.js 和一些 images 放入 express 中的相對路徑。</li>\n<li>修改 service-worker.js 中的 <code class=\"language-text\">filesToCache</code> 相對路徑，主要是 app.js 與 inline.css</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker-in-express.js\"><pre class=\"language-jsservice-worker-in-express.js\"><code class=\"language-jsservice-worker-in-express.js\">var filesToCache = [\n  &#39;/&#39;,\n  &#39;/javascripts/app.js&#39;,\n  &#39;/stylesheets/inline.css&#39;,\n  &#39;...&#39;,\n  &#39;..&#39;</code></pre></div>\n<p>啟動server 後，開啟 Chrome devTool 的 resources tab，應該可以看到如下畫面，就代表你的 service worker 有成功幫你 cache 住 assets：</p>\n<p><img src=\"/image/cache-example.png\" alt=\"service-worker cache\" title=\"service-worker cache\"></p>\n<h3 id=\"step-4-cache-data\" style=\"position:relative;\"><a href=\"#step-4-cache-data\" aria-label=\"step 4 cache data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 4. Cache Data</h3>\n<p>接下來我們要 cache 住資料！</p>\n<p>策略上分兩種：</p>\n<ol>\n<li>cache first then network：一次發兩種 request，先抓 cache 資料，等 network request 回來後更新 cache。</li>\n<li>network first then cache：先發 network request，若 timeout 再撈 cache 資料。</li>\n</ol>\n<p>這邊我們採用 cache-first，才能因應快速 response 與 offline 使用的需求。</p>\n<p>首先我們得在 service-worker 中加入一個 <code class=\"language-text\">dataCacheName</code>，用以區分資料與 app shell 的 cache。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">var dataCacheName = &#39;weatherData-v1&#39;;</code></pre></div>\n<p>接著在 <code class=\"language-text\">fetch</code> event handler 中，我們將抓取資料的API request 與其他 request 分開。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;fetch&#39;, function(e) {  \n  console.log(&#39;[ServiceWorker] Fetch&#39;, e.request.url);  \n  var dataUrl = &#39;https://publicdata-weather.firebaseio.com/&#39;;  \n  if (e.request.url.indexOf(dataUrl) === 0) {  \n    // Put data handler code here  \n  } else {  \n    e.respondWith(  \n      caches.match(e.request).then(function(response) {  \n        return response || fetch(e.request);  \n      })  \n    );  \n  }  \n});</code></pre></div>\n<p>上面的 code 中，service-worker 會擷取頁面發出的 request，如果包含 dataUrl，我們就另外處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">e<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>  \n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>dataCacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[ServiceWorker] Fetched&amp;Cached Data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>  \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用 <code class=\"language-text\">fetch API</code> 發送 request，送回來的 response 再傳回去之前，會先 clone 一份到 cache 當中。</p>\n<p>到這邊為止我們 cache 住資料了，但還是不能 offline 運作！因為還少了一個步驟，先前提到我們要同步發送 <strong>兩個</strong> request，一個抓 cache，一個真的送資料。</p>\n<p>在 <code class=\"language-text\">app.js</code> 中的 <code class=\"language-text\">app.getForecast</code>裡加入這段：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapp.js\"><pre class=\"language-jsapp.js\"><code class=\"language-jsapp.js\">if (&#39;caches&#39; in window) {\n  caches.match(url).then(function(response) {\n    if (response) {\n      response.json().then(function(json) {\n        // Only update if the XHR is still pending, otherwise the XHR\n        // has already returned and provided the latest data.\n        if (app.hasRequestPending) {\n          console.log(&#39;[App] Forecast Updated From Cache&#39;);\n          json.key = key;\n          json.label = label;\n          app.updateForecastCard(json);\n        }\n      });\n    }\n  });\n}</code></pre></div>\n<p>先檢查 <code class=\"language-text\">window</code> 有無支援 <code class=\"language-text\">caches</code> object，接著從 caches 中拿出資料，這時要確認一下同時發送出去的 network request 是否已經 response 回來了，我們這邊用個 flag <code class=\"language-text\">app.hasRequestPending</code> 來控制。只有在 network response 還沒回來前我們會使用 caches 內的資料。</p>\n<p>而在發送原本的 <code class=\"language-text\">XMLHttpRequest</code> 之前，記得加上 <code class=\"language-text\">app.hasRequestPending = true;</code>，並在 <code class=\"language-text\">app.updateForecastCard(response)</code>之前，將 <code class=\"language-text\">app.hasRequestPending</code> 設為 false。</p>\n<h3 id=\"test-offline-function\" style=\"position:relative;\"><a href=\"#test-offline-function\" aria-label=\"test offline function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Offline function</h3>\n<p>到目前為止我們的 Web app 已經可以在 offline 使用了，即便遠端 host 掛掉，我們能從 cache 中抓到我們的 App Shell，並且透過 service worker 幫我們去跟 <code class=\"language-text\">https://publicdata-weather.firebaseio.com/</code> 要資料；若是連網路都沒有，至少會有 cache 的資料可以顯示！</p>\n<p><img src=\"/image/offline-1.gif\" alt=\"offline test I- without host server\" title=\"offline test\"></p>\n<p><img src=\"/image/offlinetest-2.gif\" alt=\"offline test II - without network connection\" title=\"offline test\"></p>\n<h2 id=\"support-native-integration\" style=\"position:relative;\"><a href=\"#support-native-integration\" aria-label=\"support native integration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support Native Integration</h2>\n<p>Progressive Web App 的最後一哩路，我們要加入 Add-to-Homescreen。</p>\n<p>要有 Add to Homescreen 的功能不難，只要加入一個 manifest.json 即可，透過這方式打開的 Web App 不會顯示出 URL bar，看起來就像一般的 App！你也可以再加入 Web app install banners，這邊就不討論，可以看這篇的教學 - <a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web app install banners</a></p>\n<h3 id=\"web-app-manifest\" style=\"position:relative;\"><a href=\"#web-app-manifest\" aria-label=\"web app manifest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web App Manifest</h3>\n<p>透過 web app manifest，你可以：</p>\n<ul>\n<li>像 App 一般有個漂亮 icon 顯現在 Android 的 Homescreen 上。</li>\n<li>開啟時可以進入全螢幕畫面，不顯示 URL bar！</li>\n<li>控制 screen orientation。</li>\n<li>設定 <code class=\"language-text\">splash screen</code>，以前是為了降低 User 等待載入時間，但現在通常都用來宣傳你的網站品牌等等（有些人是不推薦使用...）</li>\n<li>追蹤你的 App 是從 homescreen 還是 url 開啟。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsonmanifets.json\"><pre class=\"language-jsonmanifets.json\"><code class=\"language-jsonmanifets.json\">{\n  &quot;name&quot;: &quot;Weather&quot;,\n  &quot;short_name&quot;: &quot;Weather&quot;,\n  &quot;icons&quot;: [{\n    &quot;src&quot;: &quot;images/icons/icon-128x128.png&quot;,\n      &quot;sizes&quot;: &quot;128x128&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/icons/icon-144x144.png&quot;,\n      &quot;sizes&quot;: &quot;144x144&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/icons/icon-152x152.png&quot;,\n      &quot;sizes&quot;: &quot;152x152&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/touch/icon-192x192.png&quot;,\n      &quot;sizes&quot;: &quot;192x192&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/touch/icon-256x256.png&quot;,\n      &quot;sizes&quot;: &quot;256x256&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }],\n  &quot;start_url&quot;: &quot;/&quot;,\n  &quot;display&quot;: &quot;standalone&quot;,\n  &quot;background_color&quot;: &quot;#3E4EB8&quot;,\n  &quot;theme_color&quot;: &quot;#2F3BA2&quot;\n}</code></pre></div>\n<p>[小技巧] 可以透過在 <code class=\"language-text\">start_url</code> 設置 query string 的參數來追蹤開啟來源。</p>\n<p>manifest 檔案設定好後記得回到你的 <code class=\"language-text\">index.html</code> 的 <code class=\"language-text\">&lt;head></code> 加上 <code class=\"language-text\">&lt;link rel=\"manifest\" href=\"/manifest.json\"></code></p>\n<h3 id=\"for-safari-in-ios\" style=\"position:relative;\"><a href=\"#for-safari-in-ios\" aria-label=\"for safari in ios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for safari in ios</h3>\n<p>如果要用在 ios 上的 safari 還需要額外設定</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Add to home screen for Safari on iOS --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-mobile-web-app-capable<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-mobile-web-app-status-bar-style<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-mobile-web-app-title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Weather App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/icons/icon-152x152.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"best-practices\" style=\"position:relative;\"><a href=\"#best-practices\" aria-label=\"best practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best practices</h3>\n<ul>\n<li>在你網站的每個 page 都可放入 manifest.json，這樣不管 user 是從哪頁進去，Chrome都能偵測到</li>\n<li><code class=\"language-text\">short_name</code> 盡量都要設置，優先權高於 <code class=\"language-text\">name</code> 這個 field。</li>\n<li>icon 的大小要盡可能符合多種 device。</li>\n<li>icon 也要考量到是否符合 slash screen，並記得設置 <code class=\"language-text\">background_color</code></li>\n</ul>\n<h2 id=\"final\" style=\"position:relative;\"><a href=\"#final\" aria-label=\"final permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final</h2>\n<p>最終到你手機上的呈現就會像這樣：</p>\n<p>IOS 版本 (ISO 版本看不到 splash screen，不確定原因，可能版本不支援）：</p>\n<img src=\"/image/iphoneDemo_1.gif\" alt=\"iphone demo\" style=\"width: 400px;\">\n<p>Android 版本（主要是看得到 splash screen..）：</p>\n<img src=\"/image/android-1.jpg\" alt=\"android demo\" style=\"width: 300px;\"/>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>看了今年 Google I/O 與 Apple WWDC 後，Apple 感覺想把 App 更融入他們的系統，以後或許不會再有 App 的概念，就是 Apple。而 Google 則持續推廣 Progressive Web App，希望讓 Web 能夠更行動化，似乎都希望能夠弭平一些隔閡。</p>\n<p>我個人是蠻希望 Progressive Web App 的方式能普及，可惜現在的瀏覽器支援度還很差，需要更多時間，但大家應該有看過這張圖：</p>\n<img src=\"/image/appinstall.png\" alt=\"source: https://www.youtube.com/watch?v=MyQ8mtR9WxI\" style=\"width: 300px;\"/>\n<p>App 從下載到安裝使用的人數差了四分之一，如果 Progressive Web App 可以起來的話，相信對使用者與開發者來說都是雙贏的局面（更多人使用、又不會佔手機空間、又不用到 app store 更新），但大廠怎麼想就不知道了...</p>\n<p>但至少 Progressive web app 會帶給使用者更好的 web 瀏覽體驗是無庸置疑的！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/?hl=zh-tw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google developer web fundamentals</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">html5rocks: service-worker</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google developer web app install banner</a></li>\n</ol>","id":"eeb84b85-b27f-55a1-9095-19d8c77d40c5","fields":{"slug":"progressive-web-app"},"frontmatter":{"date":"2016-07-18T20:46:02.000Z","title":"Progressive Web App 會是未來趨勢嗎？","tags":["pwa"],"type":"tech","slug":"progressive-web-app"},"timeToRead":16}],"tagName":"pwa","type":"tech"}},"staticQueryHashes":["2123680655"]}