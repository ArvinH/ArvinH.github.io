{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/visualization","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：那天晚上 我夢見了你 feat.Vita 張芮菲","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/2MGUXtO7atA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">那天晚上 我夢見了你 feat.Vita 張芮菲</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/2MGUXtO7atA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>軟體工程師應該很少沒參加過 Conference 吧，不管是社群或是學術性的，只要是與會者都會拿到一面主辦方製作的名牌，上面除了印著你的大名外，大多就剩下 Conference 名稱與 Logo 了，然而，由灣區的資料視覺化社群所舉辦的年度聚會 - visfest unconf 很是特別，他們提供與會者一個製作自己 badge 的機會，讓大家自行發揮創意，特別之餘也很符合整個會議的調性。今年八月是他們舉辦的第五屆 visfest unconf，這次他們在 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a> 這個平台上釋出了一個 Template，讓大家更方便的製作名牌，效果如同下方（因為用到 ECMAScript modules，建議使用桌面版 Chrome），若無法觀看，可以前往此 <a href=\"https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>，或是拉到最下面看 gif：</p>\n<div id=\"animation\"></div>\n<script type=\"module\">\n  import notebook from \"https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js\";\n\n  const renders = {\n    \"result\": \"#animation\",\n  };\n\n  import {Inspector, Runtime} from \"https://unpkg.com/@observablehq/notebook-runtime@2?module\";\n  for (let i in renders)\n    renders[i] = document.querySelector(renders[i]);\n\n  Runtime.load(notebook, (variable) => {\n    console.log(variable)\n    if (renders[variable.name])\n      return new Inspector(renders[variable.name]);\n  });\n</script>\n<p>除了 Observable 與 visfest 的 Logo 外，你可以繪製任何你想呈現的東西，改變背景顏色等等，而主辦方會用 <a href=\"https://gifpop.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gitpop</a> 這項服務，將你的動畫製作成 10 frames 的 gif，因此在製作時，可以根據 template 提供的繪圖函式傳入的 <code class=\"language-text\">frameNumbers</code> 來控制動畫的呈現。</p>\n<p>我自己是覺得這樣的想法很酷，所以即便無緣參加 visfest unconf，也製作了一個自己的 Badge 玩玩，順便來試用已經想玩很久的平台 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>，這篇文章就記錄一下使用的過程，並說明其特性，希望能引起大家興趣！</p>\n<h2 id=\"observablehq-起源\" style=\"position:relative;\"><a href=\"#observablehq-%E8%B5%B7%E6%BA%90\" aria-label=\"observablehq 起源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 起源</h2>\n<p>D3.js 的作者 <a href=\"https://twitter.com/mbostock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mbostock</a>，在 2017 年的時候發了一篇名為 <a href=\"https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Better Way to Code</a> 的文章，介紹了他當時正在製作的專案 - <code class=\"language-text\">d3.express</code>，也就是現在的 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>。</p>\n<!-- 介紹目的 -->\n<p>Mike Bostock 在過去十年左右的時間都致力於資料視覺化，為了能夠更方便的將資料以各種方式呈現，D3.js 因應而生，然而，致力於一個工具太久，反而忘了當初為何要製作工具，目的變成了工具本身，而不是透過該工具所能傳達的價值。</p>\n<blockquote>\n<p>The purpose of visualization is insight, not pictures - Ben Shneiderman</p>\n</blockquote>\n<p>資料視覺化的重點應在於將資料的 insight 更加輕易的傳遞給世界，儘管現在已經有很多圖形化介面的拖拉工具輔助你將資料視覺化，但若是想要最大幅度的自由創作並表達 insight，撰寫程式碼是無可避免的。</p>\n<p>然而寫程式一直都不是一件簡單的事，為了降低寫程式的難度，他創造了另一個工具：<a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>。你可以把它想像成 JavaScript 版本的 jupyter notebook，但使用上某些語法跟純 JavaScript 有些差異，因此剛開始可能會有些不太習慣的地方，等到上手後，你就會發現它的好用之處，尤其適合應用在製作資料視覺化專案上。</p>\n<h2 id=\"observablehq-基礎操作\" style=\"position:relative;\"><a href=\"#observablehq-%E5%9F%BA%E7%A4%8E%E6%93%8D%E4%BD%9C\" aria-label=\"observablehq 基礎操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 基礎操作</h2>\n<p>ObservableHQ 其實不能算是 JavaScript，因為有許多操作行為與 vanilla JavaScript 不相同，作者也有寫了一篇<a href=\"https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>。</p>\n<p>基本上，你可以把 ObservableHQ 想像成一個試算表，由一格一格的 <code class=\"language-text\">cell</code> 所組成，而每一格 <code class=\"language-text\">cell</code> 都是一個 JavaScript snippet，可以是一則運算式、一段簡短的函式，當然也可以將值指定給一變數名稱。</p>\n<p><img src=\"/image/observablehq-statement.png\" alt=\"ObservableHQ statements\"></p>\n<p>在上面的圖片中，比較不同的地方在於運算函式的寫法，除了一般的 Function Declarations 與 Function Expressions 外，你也可以用一個大括號 <code class=\"language-text\">{}</code> 包裹著一段程式碼，最後 <code class=\"language-text\">return</code> 出去的值，就會被印出來。</p>\n<p>而就像試算表的公式一樣，表格內的值是互相 reference 的，只要你在某處修改了某個 <code class=\"language-text\">cell</code> 的值，所有引用到該 <code class=\"language-text\">cell</code> 的程式都會相應改變（re-run），跟一般 vanilla JavaScript 從上到下執行程式碼的邏輯有所不同：</p>\n<p><img src=\"/image/observablehq-var-reference.gif\" alt=\"demo\"></p>\n<p>從這點來看，你也可以把所有在 ObservableHQ 上的變數 assignments 都想成是 hoisted declarations，因為宣告順序不影響 reference。</p>\n<p>此外，支援使用 <code class=\"language-text\">html</code> 與 <code class=\"language-text\">markdown</code> 的語法，利用 <code class=\"language-text\">Template literals</code> 來完成：</p>\n<p><img src=\"/image/observablehq-html-md.png\" alt=\"demo-html-md\"></p>\n<p>還有一個特別的 built-in 運算子 - <code class=\"language-text\">viewof</code>：</p>\n<p><img src=\"/image/observablehq-viewof.gif\" alt=\"demo-viewof\"></p>\n<p>如上面的 gif 所示，viewof 可以將使用者針對一個 html input element 操作所產生的值，exposes 出來，或是 assign 給一個變數。可以想見，這用在互動式視覺化專案中會是很棒的功能。</p>\n<p>這幾個大概是最基本的操作，還有其他諸如：如何匯入第三方套件、使用非同步 API 呼叫等等，我們就直接透過實際演練來學習吧！</p>\n<h2 id=\"observablehq-實際操作\" style=\"position:relative;\"><a href=\"#observablehq-%E5%AF%A6%E9%9A%9B%E6%93%8D%E4%BD%9C\" aria-label=\"observablehq 實際操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 實際操作</h2>\n<p>接下來用我這次製作的 visfest badge 來做範例，進一步帶大家認識這個工具！</p>\n<p>這次的 badge，主要概念是在 2D 地球圖上，顯示各城市的人口數量級別，用地球的轉動與 marker 的 radius 大小變化來呈現動畫。</p>\n<p>要完成這個目標，起手第一步就是得先把 2D 地球畫出來。而 Mike Bostock 有提供一份 <code class=\"language-text\">topojson</code> 格式的世界地圖資料：<code class=\"language-text\">https://unpkg.com/world-atlas@1/world/110m.json</code>。</p>\n<p>因此，我們需要載入 <code class=\"language-text\">topojson</code> 套件，並 <code class=\"language-text\">fetch</code> 世界圖資，而在 ObservableHQ 上我們可以這樣做：</p>\n<p><img src=\"/image/observablehq-import-lib.png\" alt=\"Import libs\"></p>\n<p>這邊我們用 <code class=\"language-text\">require</code> 來載入 <code class=\"language-text\">topojson</code> 套件，但其實它背後並非 CommonJS，而是用 <a href=\"https://requirejs.org/docs/whyamd.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Asynchronous Module Definition (AMD)</a> 實作。另外它也支援 ES modules 與 imports，所以可以依照你所使用的套件支援度來選擇要用哪種方式載入模組。</p>\n<p>至於取得世界圖資，我們需要兩個步驟：</p>\n<ol>\n<li>取得圖資 JSON 檔案：<code class=\"language-text\">let world = await (await fetch(\"https://unpkg.com/world-atlas@1/world/110m.json\")).json();</code></li>\n<li>取得拓樸後的資料：<code class=\"language-text\">topojson.feature(world, world.objects.countries);</code></li>\n</ol>\n<p>在 ObservableHQ 上，我們可以利用先前說到的大括號 <code class=\"language-text\">{}</code> 來執行多行程式碼，並把最後 return 的值賦予給某個變數：</p>\n<p><img src=\"/image/observablehq-get-worldmap.png\" alt=\"Get world map data\"></p>\n<p>接著還需要有各城市的人口資料，取得方式與上面相同：</p>\n<p><img src=\"/image/observablehq-get-cities-pop.png\" alt=\"Get cities population\"></p>\n<p>資料到手後，剩下的就就跟一般撰寫 D3.js 的專案ㄧ樣。</p>\n<p>在 visfest 提供的模板中，提供了許多以定義好的變數宣告，像是姓名、字體亮度、大小等等，而我們只需要在 <code class=\"language-text\">badgeCode</code> 這個函數中實作我們的視覺化作品即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Your D3 code goes here.</span>\n<span class=\"token comment\">// The function badgeCode gets called below to generate the previews.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">badgeCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> frameNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// g: a &lt;g>, i.e. d3.select(... the node)</span>\n  <span class=\"token comment\">// context: a canvas context, useful for doing canvas drawing</span>\n  <span class=\"token comment\">// frameNumber: a number that represents the frame (1, 2, … 10) for psuedo-animation.</span>\n  <span class=\"token comment\">// width &amp; height are available via the environment, as is d3</span>\n  <span class=\"token comment\">// Note: the &lt;g> is drawn on top of the &lt;canvas></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">badgeCode</code> 接收三個參數，一個是在 badge 上留給你繪圖的空間 <code class=\"language-text\">&lt;g></code> 元素，以及 <code class=\"language-text\">canvas context</code> 和 <code class=\"language-text\">frameNumber</code>，該模板會呼叫此函式十次，依序傳入遞增的 <code class=\"language-text\">frameNumber</code>，讓你來掌控動畫過程。</p>\n<p>到這邊可能你會好奇，在 ObservableHQ 中的 <strong>模板</strong> 到底是怎麼運作的？為什麼能定義出一個函式，讓我去填寫內容，又幫我執行呢？</p>\n<p>答案要追究到 ObservableHQ 的一個特殊 <code class=\"language-text\">import-with</code> 方法：</p>\n<p><img src=\"/image/observablehq-import-with.png\" alt=\"import-with\"></p>\n<p><code class=\"language-text\">b93171820ba3f268</code> 是 ObservableHQ 上的另一個 notebook，也就是實際的 template 程式碼所在位置，我們可以從該 notebook 中 import 進 <code class=\"language-text\">{preview, animation, download, width, height, d3}</code> 這幾個函式來呼叫使用，而這幾個函式中所用到的變數，我們能使用 <code class=\"language-text\">with</code> 來取出，並且賦予其新的值！</p>\n<p>這就是為什麼我們可以修改 <code class=\"language-text\">firstName</code>、<code class=\"language-text\">lastName</code> 以及自行填入 <code class=\"language-text\">badgeCode</code> 函數的原因了。</p>\n<p><code class=\"language-text\">badgeCode</code> 內的程式碼基本上就是普通的 D3.js 程式，這邊就不再附上程式碼，有興趣想知道怎麼實作在地球呈現人口分布的，可以到我的 <a href=\"https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">notebook</a> 去看，其中我也有用到前面提及的 <code class=\"language-text\">viewof</code> 運算子，讓我能手動調整地球的 scale 大小。</p>\n<p>都完成後就會看到由模板提供的 <code class=\"language-text\">preview</code> 函式所繪製出的十張圖：</p>\n<p><img src=\"/image/observablehq-preview-ten-pics.png\" alt=\"Preview ten pics\"></p>\n<p>以及用 <code class=\"language-text\">animation</code> 函式（一樣模板提供）繪製的動畫：</p>\n<p><img src=\"/image/observablehq-animation.gif\" alt=\"Animation gif\"></p>\n<h2 id=\"分享你的-observablehq-作品\" style=\"position:relative;\"><a href=\"#%E5%88%86%E4%BA%AB%E4%BD%A0%E7%9A%84-observablehq-%E4%BD%9C%E5%93%81\" aria-label=\"分享你的 observablehq 作品 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分享你的 ObservableHQ 作品</h2>\n<p>完成作品後，最重要的就是分享。</p>\n<p>這篇文章的最上方，我放入的成品並不是 gif，而是貨真價實從 ObservableHQ 所匯入的，利用 <code class=\"language-text\">ECMAScript modules</code>，載入想要嵌入的 notebook，接著再載入 ObservableHQ 提供的 <code class=\"language-text\">{Inspector, Runtime}</code>，當 notebook 載入後，取得其中 export 的變數，透過 <code class=\"language-text\">Inspector</code> 將其繪製到指定的 DOM id 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> notebook <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> renders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"result\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#animation\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Inspector<span class=\"token punctuation\">,</span> Runtime<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://unpkg.com/@observablehq/notebook-runtime@2?module\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> renders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    renders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>notebook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variable</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inspector</span><span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>透過這種方式，除了能夠在 ObservableHQ 上載入引用他人的 notebook 外，也能在一般網站上嵌入任何作品，非常方便！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>這篇文章只是非常簡略的說明了 ObservableHQ 的起源、用途與使用方式，希望能引起大家的興趣，如果有想要使用這套工具玩玩，或是製作視覺化專案的話，官方網站其實有出了一系列的<a href=\"https://observablehq.com/collection/@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">教學與說明文件</a>，直接就是用 ObservableHQ 的 notebook 撰寫的，互動式的閱讀體驗非常好，可以非常清楚的知道各個環節該怎麼使用，以及其背後的設計原理。</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://observablehq.com/@observablehq/five-minute-introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observablehq five minute intro</a></li>\n<li><a href=\"https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observable’s not JavaScript</a></li>\n<li><a href=\"https://observablehq.com/collection/@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observablehq introduction</a></li>\n</ol>","id":"1628307b-7c51-5350-8588-44aba765b8f3","fields":{"slug":"observablehq-intro"},"frontmatter":{"date":"2019-09-09T02:01:00.000Z","title":"從製作 visfest 2019 badge 認識 ObservableHQ","tags":["d3.js","javascript","visualization"],"type":"tech","slug":"observablehq-intro"},"timeToRead":8},{"excerpt":"『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』","html":"<blockquote>\n<p>『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>從 2017 年開始，我每天都會用 Google Calendar 紀錄生活，也在年底的時候利用 D3.js 與 Google api 將紀錄的資料視覺化出來做個年終回顧。（沒看過的讀者可以往這裡走：<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>）</p>\n<p>2018 當然也不例外，我依然持續記錄每天的日常，透過每週回顧自己的時間花費來調整目標與心理狀態。</p>\n<p>而既然我有了兩年的資料，不拿來比較看看就太可惜了，因此決定在我今年的最後一篇文章中，將 2017 年與 2018 年的資料做個視覺化的比較，看看我在工作、生活、娛樂以及自我進修等上面的時間調配是否有照著我去年所希望的步調進行。在一年的尾聲，好好面對自己！</p>\n<p>一樣先附上成果與 <a href=\"https://blog.arvinh.info/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a>：</p>\n<p><img src=\"/image/YearEndReview-2018_.png\" alt=\"YearEndReview-2018\"></p>\n<h2 id=\"工具\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%85%B7\" aria-label=\"工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具</h2>\n<p>工具的使用上，這次並沒有使用 D3.js，畢竟以需求來說，D3.js 太大材小用了，加上我前陣子發現一個基於 D3.js 與 React 的視覺化 library - <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a>，看起來非常不錯，所以這次就拿這套來試試看，透過這套工具，整個作品大概不用花費一小時就可以完成了，大多的時間都是在處理資料格式上。</p>\n<p>而抓取 Google Calendar 資料的部分，一樣使用 Google 的 api，只不過一年過去，Google api 也是有所更新，不過問題不大，稍微修改一些小地方即可，稍後會帶到。</p>\n<h2 id=\"視覺化的第一步取得資料\" style=\"position:relative;\"><a href=\"#%E8%A6%96%E8%A6%BA%E5%8C%96%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%8F%96%E5%BE%97%E8%B3%87%E6%96%99\" aria-label=\"視覺化的第一步取得資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>視覺化的第一步，取得資料</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>中我有提到過，雖然 Google 有提供一個 <a href=\"https://takeout.google.com/settings/takeout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Takeout</a> 的功能，你也能直接匯出日曆，但是下載到的資料其格式都是 <a href=\"https://zh.wikipedia.org/wiki/ICalendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">iCalendar</code></a>，除非你在每個紀錄的項目上都有很詳細的紀錄內容，才有辦法去將每一項 task 都進行分類，像我只用顏色來區分的就沒辦法。</p>\n<p><img src=\"/image/google-takeout.png\" alt=\"Google Takeout\"></p>\n<p>所以還是得靠 Google 提供的 Calendar API 來取得資料。</p>\n<p>而 Google Calendar API 的使用方式很簡單，只要照著<a href=\"https://console.developers.google.com/start/api?id=calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>拿到憑證後，就可以從他們提供的<a href=\"https://developers.google.com/google-apps/calendar/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a> 來修改實作。</p>\n<p>基本上跟我<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年寫的</a>差不多，主要是在 auth 的套件（拿 cretential 的方式）以及 api 回傳的 schema 有所變動：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var googleAuth = require('google-auth-library');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const { google } = require('googleapis');\n</span>// If modifying these scopes, delete token.json.\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nvar SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n<span class=\"token prefix deleted\">-</span>  process.env.USERPROFILE) + '/.credentials/';\n<span class=\"token prefix deleted\">-</span> var TOKEN_PATH = TOKEN_DIR + 'calendar-nodejs-quickstart.json';\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const TOKEN_PATH = 'token.json';</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function listEvents(auth, pageToken) {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var calendar = google.calendar('v3');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const calendar = google.calendar({version: 'v3', auth});\n</span>const queryOptions = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> auth: auth,\n<span class=\"token prefix unchanged\"> </span> calendarId: 'primary',\n<span class=\"token prefix unchanged\"> </span> timeMax: (new Date()).toISOString(),\n<span class=\"token prefix unchanged\"> </span> singleEvents: true,\n<span class=\"token prefix unchanged\"> </span> orderBy: 'startTime'\n</span>};\nif (pageToken) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> queryOptions.pageToken = pageToken;\n</span>}\ncalendar.events.list(queryOptions, function (err, response) {\nif (err) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('The API returned an error: ' + err);\n<span class=\"token prefix unchanged\"> </span> return;\n</span>}\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>var events = response.items;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const resData = response.data || {};\n<span class=\"token prefix inserted\">+</span>const events = resData.items;\n</span>if (events.length == 0) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('No upcoming events found.');\n</span>} else {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> // ...\n</span>}\n// ...\n}\n}</code></pre></div>\n<p>完整的程式碼我一樣有放在 <a href=\"https://gist.github.com/ArvinH/5960a33b54fb03d504bcba7a4d5982e5#file-fetchcalendardata-js-L86-L151\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a> 上，如果你也想要用 Google API 下載自己的 Calendar，基本上除了 <code class=\"language-text\">listEvents</code> 函數內的部分以外，都可以直接照抄，<code class=\"language-text\">listEvents</code> 內的程式碼是 API 的 callback，主要是負責後續資料的處理，將之轉化成我們視覺化所需要的格式。而關於 Calendar api 相關參數的介紹，可以參考<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年的文章</a>。</p>\n<h1 id=\"nivo\" style=\"position:relative;\"><a href=\"#nivo\" aria-label=\"nivo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nivo</h1>\n<p>接下來介紹一下 <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a> 這套工具。</p>\n<p>它是 <a href=\"https://twitter.com/benitteraphael\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Raphaël Benitte</a> 所製作，基於 D3.js 與 React.js 的視覺化套件。</p>\n<p><img src=\"/image/nivo-cover.png\" alt=\"nivo\"></p>\n<p>比起市面上其他套件，我自己認為 nivo 的優勢有幾點：</p>\n<ul>\n<li>對於 Server-side render 的支援度很高。</li>\n<li>由於支援 React SSR，nivo 提供了 api 介面，讓你能透過 http request 產生圖表 - 詳情可看 <a href=\"https://github.com/plouc/nivo-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo-api</a>。</li>\n<li>Mono repo 的方式管理 packages，可以依照需求，只安裝你需要的圖表 package。</li>\n<li>宣告式的寫法，加上他互動式的文件範例，套用他的圖表幾乎沒有學習曲線。</li>\n</ul>\n<p><img src=\"/image/nivo-bar-doc.png\" alt=\"nivo 文件網站\"></p>\n<ul>\n<li>部分元件提供 Canvas 實作的版本，大量數據也不怕！</li>\n<li>動畫部分使用 <code class=\"language-text\">react-motion</code>，寫過 react 的人應該不陌生，<code class=\"language-text\">react-motion</code> 可說是 react 動畫界的翹楚啊！</li>\n<li>每個元件都有對應的 <code class=\"language-text\">Storybook</code> 可以看，非常的 developer-friendly!</li>\n</ul>\n<p>當然也是有缺點的：</p>\n<ul>\n<li>不是每個元件都支援動畫，這時候會知道 D3.js 的好(?</li>\n<li>圖表種類固定，比較難有創意的發揮。</li>\n</ul>\n<p>基於以上的優缺點，不難看出，如果是對於不熟悉 D3.js 或是想要快速產出圖表，但又想要有動畫效果或是互動性的人來說，直接採用 nivo 這類的 library 會是很不錯的選擇，也是我這次採用的原因。</p>\n<h1 id=\"開始進行我們的圖表製作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E6%88%91%E5%80%91%E7%9A%84%E5%9C%96%E8%A1%A8%E8%A3%BD%E4%BD%9C%E5%90%A7\" aria-label=\"開始進行我們的圖表製作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行我們的圖表製作吧！</h1>\n<p>基本的想法一樣是將資料用 Calendar 圖表呈現，觀察每種類別的 task 在一年中的分佈狀況，並且加入去年的資料來做對比。</p>\n<p>接著，想利用一個折線圖來觀察單一類別在每個月的波動，是不是在某些月份我比較勤奮工作、某些月份很認真在進修或玩樂。當然這些資訊從 Calendar 圖表也看得出來，但是用月加總的數值呈現在折線圖上，感覺會更直接一點。</p>\n<p>最後在把每種類別的資料集結起來，利用 Waffle 圖表，一目瞭然各個類別的比例關係。</p>\n<p>要達成上面三個想法，我們只需要使用 nivo 的 <a href=\"https://github.com/plouc/nivo/tree/master/packages/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/calendar</a>、<a href=\"https://github.com/plouc/nivo/tree/master/packages/line\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/line</a> 與 <a href=\"https://github.com/plouc/nivo/tree/master/packages/waffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/waffle</a> 三種套件即可。</p>\n<p>使用方法都很簡單，基本上只要到對應的 doc 頁面，就直接有現成的程式碼可以<del>複製</del>參考。</p>\n<p>像是 <a href=\"https://nivo.rocks/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calendar</a>:</p>\n<p><img src=\"/image/nivo-calendar-doc.gif\" alt=\"calendar doc demo\"></p>\n<p>重點反而是資料格式，即便我們只是想繪製三種圖表，但就需要整理出三種資料格式，才能夠符合其各自的需求，一樣可以從 nivo 的 doc 中找到每個圖表所需要的資料格式（data tab）。</p>\n<p>我製作範例的 parser 放在 <a href=\"https://github.com/ArvinH/YearEndReview-2018/tree/master/src/dataParser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 上，有興趣可以參考，不過就只是一些髒髒的資料轉換，是個耗時費力的工作啊...</p>\n<p>值得一提的是，這邊我除了轉化資料格式外，還花了不少時間在做資料的整理與同步。</p>\n<p>為什麼呢？</p>\n<p>因為每天的日誌是我自己手動輸入，顏色 label 也是我自己標記，有些事項的類別在 2017 年與 2018 年我用的是不同的顏色，但卻應該是分在同類中，這在做對比時，就會有問題了，因此花了不少時間從 2017 年一月開始過到 2018 年十二月...所以如果有人想跟我一樣這樣紀錄的話，或許可以用 Calendar 內建的分類功能，而不要像我一樣用手動標記顏色的方式。</p>\n<p>總之，當資料處理好以後，照著網站範例將我們想要的元件放到頁面上即可，這邊我是直接用 CRA 製作 React SPA，其中 <code class=\"language-text\">Calendar</code> 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ResponsiveCalendar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nivo/calendar'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calendar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ResponsiveCalendar\n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>\n        from<span class=\"token operator\">=</span><span class=\"token string\">\"2017-01-01\"</span>\n        to<span class=\"token operator\">=</span><span class=\"token string\">\"2018-12-31\"</span>\n        emptyColor<span class=\"token operator\">=</span><span class=\"token string\">\"#eeeeee\"</span>\n        colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"#61cdbb\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#97e3d5\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#e8c1a0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#f47560\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        margin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"bottom\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        yearSpacing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">45</span><span class=\"token punctuation\">}</span>\n        monthBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        monthLegendOffset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n        dayBorderWidth<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n        dayBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        legends<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"anchor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bottom-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"direction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"row\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"translateY\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemHeight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemDirection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"top-to-bottom\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Calendar<span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的範例看得出來，你有許多 <code class=\"language-text\">options</code> 可以設定，像是資料的起始日期(<code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>)、資料顏色的區間或是各種 margin 等都能調整，非常方便好用。</p>\n<p>唯一要注意的是，如果採用支援 RWD 的元件（像是這邊用的 <code class=\"language-text\">ResponsiveCalendar</code>），記得要給定這個 Component 的 Parent component 固定的高度，否則 nivo 的元件偵測到高度為零時，就不會 render 了，所以記得要多加個有高度的 Wrapper 在 nivo 的元件上。</p>\n<p>其他的實作細節基本上就是 React 而已，真的有興趣<del>（想看看 code 有多鳥）</del>可以到 <a href=\"https://github.com/ArvinH/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 瞧瞧。</p>\n<h2 id=\"最後分享一下我的年終檢討\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84%E5%B9%B4%E7%B5%82%E6%AA%A2%E8%A8%8E\" aria-label=\"最後分享一下我的年終檢討 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後分享一下我的年終檢討</h2>\n<p>我記錄在 Google Calendar 上的 task，基本上分為六類：</p>\n<ul>\n<li>English - 包含上英文線上課程、背單字、唸英文等</li>\n<li>Entertainment - 所有娛樂事項</li>\n<li>Sick/Rehabilitation - 生病、做物理復健</li>\n<li>Exercise - 運動</li>\n<li>Training - 一切我認為跟加強我自身實力有關的事，有可能是看文章、寫 code 或是刷題</li>\n<li>Work - 上班</li>\n</ul>\n<p><img src=\"/image/nivo-waffle-explain.png\" alt=\"waffle\"></p>\n<p>Waffle 圖的數據是我將每個月的分類 task 加總後做平均所算出的比例。</p>\n<p>而從 Waffle 圖可以很明顯看到，2018 年我對於 <code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 這兩部分的分類，加重了不少。回想過去半年，很急切的想要有所突破，雖然我不覺得有達到我心中的努力程度，但以結果論來說，這些多出的 <code class=\"language-text\">Training</code> 或許真的幫助了我，讓我在今年達成了人生中一個小小的目標，有了<del>逃離鬼島</del>前往海外的機會。</p>\n<p>若是從 Calendar 圖與折線圖來做兩個年度的對比，感受會更深一點：</p>\n<p><img src=\"/image/review-explain.gif\" alt=\"Review\"></p>\n<p>首先，去年做完 year end review 後，我就發現假日也在工作的時間有點太多，除了有些時候的確是 project 較為忙碌，但大多是自己平日上班專注力沒有好好發揮。</p>\n<p>因此今年開始，我調整作息，除了早上運動外，也盡量在公司時保持專注，降低與社群媒體的接觸，從圖表結果來看，成效挺好的，明顯看到 2018 年的假日在 Work 這個分類，是比較空的。</p>\n<p>另外，<code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 分類的差異從 Calendar 圖表非常明顯啊！</p>\n<p>2018 我幾乎每天都有抽出一點時間學習工作外的事，持續練英文的時間也變多了！</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>在製作第一年的 Year End Review 時，只是覺得好玩，可以把紀錄一年的資料做個整理跟視覺化呈現，但到了第二年，有了對照後，好像真的可以從中看出自己一年來的成長，也在整理資料的過程中，回顧了這一年所做的事情，並反省自己的缺失。雖然整體上來說，還是覺得自己浪費了許多時間，但套句李笑來的話：『所有對於現狀的解脫，最終都只能靠積累來實現。』從現在開始繼續努力、繼續積累，活在未來！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a></li>\n</ol>","id":"35d05912-1e5e-51e9-84c6-a16c2877ea32","fields":{"slug":"dataviz-yearendreview"},"frontmatter":{"date":"2018-12-15T15:15:09.000Z","title":"用 Google Calendar 與 nivo 製作自己的年終檢討報告","tags":["data","visualization","d3","nivo","google calendar","yearend"],"type":"tech","slug":"dataviz-yearendreview"},"timeToRead":10}],"tagName":"visualization","type":"tech"}},"staticQueryHashes":["2123680655"]}