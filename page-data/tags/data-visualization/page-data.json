{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/data-visualization","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：Sunset Rollercoaster - Candlelight feat. OHHYUK","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/kb0whVogBkI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sunset Rollercoaster - Candlelight feat. OHHYUK</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/kb0whVogBkI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Airbnb 一向在前端與設計上有深刻著墨，總能推出質感很好的工具給相關人員使用，而在上個月他們釋出了 v1.0 版本的資料視覺化套件 - <a href=\"https://github.com/airbnb/visx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visx</a>，強調特色是架構在 React 上，提供與類似 D3 的底層 API 來製作圖表。然而結合 React 與 D3 的套件何其多，Airbnb 出品的 visx 與其它產品的差異是什麼，使用起來的感覺又是如何，今天趁著雙十連假，嘗試實際寫寫看，並跟大家分享。</p>\n<p>照例先展示個最終範例：</p>\n<p><img src=\"/image/visx-final-demo.gif\" alt=\"final demo\"></p>\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview\">\n  <img alt=\"Edit SimpleRadar-AQI (with Tooltip + select data)  (react-spring)\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>\n<h2 id=\"visx-簡介\" style=\"position:relative;\"><a href=\"#visx-%E7%B0%A1%E4%BB%8B\" aria-label=\"visx 簡介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>visx 簡介</h2>\n<p>visx 在三年前就已經開源了，當時叫做 vx，一直處於 beta 的狀態，而實際上在 Airbnb 內部已經應用在各種正式環境的專案上兩年多，中間經過許多更新並以 TypeScript 重寫過，才在上個月以 1.0 的版本再次問世。</p>\n<p>如同前言提到的，市面上不乏整合 React 與 D3 的套件可以使用，而且大多數都盡量設計得簡單易用，資料傳進去，一組 Bar Chart 就出來了，為什麼 Airbnb 要在自己打造一套工具呢？</p>\n<p>在官方的 <a href=\"https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> 中他們繪製了一張圖精簡的解釋了這個工具存在的意義：</p>\n<p><img src=\"https://miro.medium.com/max/700/1*K7IJg1Gd_grQEhnos0XiqQ.png\" alt=\"why visx\">\n（偷偷吐槽一下，他們的 logo 放在這圖裡感覺像是在那欄畫了一的大叉叉...)</p>\n<p>那些隨插即用的 Chart library 之所以無法撼動 D3 地位的原因在於缺乏足夠的 Expressive，也就是不夠底層，能夠操控的範圍受限，相對的，D3 則提供了非常多的底層介面讓你能細緻的操作資料與畫面的整合互動。</p>\n<p>然而 D3 對於前端工程師來說，最讓人畏懼的就是其陡峭的學習曲線，尤其當你嘗試將 D3 直接運用在你的 React 專案內時，兩種截然不同的 mental model 與操作 DOM 的方式，相信一定會在你心裡留有芥蒂，當然也容易產生 Bug。</p>\n<p>因此 visx 針對這幾個問題做了解決，提供以下主要特色：</p>\n<ol>\n<li>\n<p>以 Typescript 與 React 實作</p>\n<ul>\n<li>這個 tech stack 組合應該是目前前端主流之一，Airbnb 的官方前端語言就是 Typescript，網站也是以 React 為主，以此組合實作能降低前端工程師踏入資訊視覺化專案的門檻，熟悉的感覺最對味。</li>\n</ul>\n</li>\n<li>\n<p>以模組化的方式提供豐富的底層「畫面操作」元件和少許的 Layout, interaction, svg, data utilities</p>\n<ul>\n<li>前端在乎的不外乎美觀、效率與安全，在操作資訊視覺專案時，面對大量資料，降低 Bundle size 以增加效能就很重要了，比起其他 Chart library，visx 提供各種底層元件讓你自己選擇組裝，要使用的在載入即可，不需要整包裝進去你的 Bundle 內。e.g. <code class=\"language-text\">import { Bar } from '@vx/shape';</code></li>\n</ul>\n</li>\n<li>\n<p>Un-opinionated on purpose</p>\n<ul>\n<li>visx 很大的一個特點是，所提供的模組與元件都是以 React 為基礎實作的，因此無論是狀態管理、動畫操作、CSS solution 等等，你都不需要特別為了 visx 去做處理或是額外的整合，就當作一般寫 React project 即可，你原本如何做動畫、如何 theming, styling，都可以沿用。</li>\n</ul>\n</li>\n<li>\n<p>與 D3 能互相搭配使用</p>\n<ul>\n<li>visx 主要提供底層操作 DOM 的元件，讓前端工程師能用一套 mental modal 處理畫面，而關於 data operation 或 scale function 等運算，visx 設計上就是希望能繼續利用 D3 所提供的強大函式庫來處理。</li>\n</ul>\n</li>\n</ol>\n<p>綜合以上特色，使用 visx 與使用 D3 的最大差異在於，<strong>你不再需要了解 <code class=\"language-text\">d3.select</code>, data join, enter/exit status 等等屬於 D3 根據 data 更新 DOM 的邏輯思路，但又能保有相對 primitives 的元件可使用，而且在進行一些單純的資料運算、scale 函式上，你也還是能使用 D3 提供的 utils。</strong> 其餘的一切都是 React，包含 Layout responsive 等等都是由 React component 來負責。</p>\n<p><img src=\"/image/airbnb-visx-doc.png\" alt=\"visx doc\"></p>\n<h2 id=\"實際演練---台灣六都即時空氣品質指標\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E6%BC%94%E7%B7%B4---%E5%8F%B0%E7%81%A3%E5%85%AD%E9%83%BD%E5%8D%B3%E6%99%82%E7%A9%BA%E6%B0%A3%E5%93%81%E8%B3%AA%E6%8C%87%E6%A8%99\" aria-label=\"實際演練   台灣六都即時空氣品質指標 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際演練 - 台灣六都即時空氣品質指標</h2>\n<p>簡單介紹完 visx 的特色，接著就來實際把玩看看！官方 github 附有一個簡單的 bar chart 圖表，但每次都使用 bar chart 做範例太無趣，因此挑個稍微複雜一點的 Radar chart（雷達圖） 來做範例。</p>\n<p><a href=\"https://vis.baidu.com/chartusage/radar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">雷達圖</a>適合用來呈現多維度的資料，用來展示臺灣六都的幾個重要空氣品質指標項目感覺蠻適合的，加上其 API 在 政府 open data 中又算是比較方便取用的一個...</p>\n<p>API 取自 <a href=\"https://opendata.epa.gov.tw/Data/Details/AQI/?show=all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">行政院環境保護署。環境資源資料開放平臺</a>，每小時會更新一次。</p>\n<p>為了體驗 visx 的特色，這次範例的製作流程大致如下：</p>\n<ol>\n<li>根據 API 資料，利用 visx 元件製作出基本畫面（了解基本使用方法）</li>\n<li>增加資料切換與 tooltip 使用（加一點變化）</li>\n<li>採用 react-spring 增加切換資料時的動畫（確認是否 Un-opinionated on animation）</li>\n<li>採用 d3-scale 來處理顏色變換（了解如何一起運用 D3）</li>\n</ol>\n<p>完整程式碼可以從 <a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?file=/Radar.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeSandbox</a> 上取得，這邊只會擷取重要部分。</p>\n<p>那麼就開始吧！</p>\n<h3 id=\"第一步使用-visx-元件堆疊出基本畫面\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%BF%E7%94%A8-visx-%E5%85%83%E4%BB%B6%E5%A0%86%E7%96%8A%E5%87%BA%E5%9F%BA%E6%9C%AC%E7%95%AB%E9%9D%A2\" aria-label=\"第一步使用 visx 元件堆疊出基本畫面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一步，使用 visx 元件堆疊出基本畫面</h3>\n<p>老實說 visx 官網其實沒什麼文件，都是很基本的 props 類型與介紹，範例就直接丟程式碼給你，唯一一篇手把手教你建立出一個 bar chart 的教學也是<a href=\"https://medium.com/vx-code/getting-started-with-vx-1756bb661410\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三年前</a>寫的。</p>\n<p>在這條件下，最好的學習方式也只有從範例開始，剛好在 visx 官網的 Gallery 已經有個雷達圖的<a href=\"https://airbnb.io/visx/radar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>，可以根據範例進行修改。</p>\n<p>本步驟的結果可以從這個 CodeSandbox 取得：\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-t1qjl?fontsize=14&hidenavigation=1&theme=dark&view=preview\">\n<img alt=\"Edit SimpleRadar-AQI\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a></p>\n<p>首先，資料視覺化的第一步就是準備好資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">URI</span> <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&amp;%24top=1000&amp;%24format=json\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fallbackData<span class=\"token punctuation\">;</span> <span class=\"token comment\">// await (await fetch(URI)).json();</span>\n        <span class=\"token keyword\">const</span> fileterdData <span class=\"token operator\">=</span> data\n          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* data process */</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* data process */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>fileterdData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useDataFetch<span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用先前提到的保護署開放資料 API 來取得即時的六都空氣品質資訊。不過 API response time 很久，一次 request 可能要等個十幾二十秒...所以開發上我多放個 fallback data 擋著，才部會一直沒有畫面出現。</p>\n<p>題外話，visx 也提供一些 mockdata 供你使用，像是 apple stock <code class=\"language-text\">import { appleStock } from '@vx/mock-data';</code>。</p>\n<p>接著我們需要定義一下整個圖表的大小，也就是長寬，你可以定義固定大小的圖表，或是使用 visx 中一個叫做 <code class=\"language-text\">@visx/responsive</code> 的 package，裡面有三種控制元素大小的 HOC 可以使用：<code class=\"language-text\">ParentSize</code>, <code class=\"language-text\">ScaleSVG</code> 和 <code class=\"language-text\">withScreenSize</code>。從名稱很簡單可以看出功能，這邊我採用 <code class=\"language-text\">ParentSize</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParentSize</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Radar</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ParentSize</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">index.tsx</code> 中，直接用 <code class=\"language-text\">ParentSize</code> 包住我的 <code class=\"language-text\">Radar</code> component，將其長寬傳入，如此一來，只要 Parent container size 改變了，我的 Radar component 就會根據新傳入的長寬去進行調整。</p>\n<p>有了 Container 的大小後，接著定義雷達圖的半徑、大小：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> xMax <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> yMax <span class=\"token operator\">=</span> height <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>xMax<span class=\"token punctuation\">,</span> yMax<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> radialScale <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">scaleLinear</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  range<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>degrees<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> yScale <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">scaleLinear</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  range<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webs <span class=\"token operator\">=</span> <span class=\"token function\">genAngles</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token function\">genPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonPoints <span class=\"token operator\">=</span> <span class=\"token function\">genPolygonPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">yScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊基本上只要用過 D3 的人都會覺得熟悉，在真正渲染圖表前，會需要依照資料內容、長度等等製作適當的 scale 函式，來映射適當的元素大小到圖表上。</p>\n<p>雷達圖需要知道的不外乎是資料所在的角度（radialScale）與半徑位置（yScale），visx 的 <code class=\"language-text\">@visx/scale</code> 提供幾種 scale 函式供你使用，基本上他就是在 <a href=\"https://github.com/d3/d3-scale\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-scale</a> 上外加一層 wrapper。</p>\n<p>而雷達本身的點與線段（<code class=\"language-text\">genAngles</code>, <code class=\"language-text\">genPoints</code>, <code class=\"language-text\">genPolygonPoints</code>），基本上都是基本的數學運算，跟 visx 本身關係不大，這邊不詳述細節，可以到<a href=\"https://codesandbox.io/s/simpleradar-aqi-t1qjl?fontsize=14&hidenavigation=1&theme=dark&view=preview\">\n<img alt=\"Edit SimpleRadar-AQI\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>查看實際程式碼。</p>\n<p>scale 函式也準備就緒後，就可以來創建雷達圖表本身了：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Radar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>visx 的元件基本上都預期你將其 render 在 <code class=\"language-text\">svg</code> 元素內。</p>\n<p>接著載入幾個建立雷達圖需要的 packages：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Group <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/group\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Line<span class=\"token punctuation\">,</span> LineRadial <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/shape\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/text\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Group</code>, <code class=\"language-text\">Line</code> 與 <code class=\"language-text\">Text</code> 基本對應 svg 內的 <code class=\"language-text\">g</code>, <code class=\"language-text\">line</code> 和 <code class=\"language-text\">text</code>；<code class=\"language-text\">LineRadial</code> 則是 visx 提供的 <a href=\"https://airbnb.io/visx/docs/shape\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shape</code> 元件</a>。</p>\n<p>組合起來的 render function：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">rx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">14</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Group</span></span> <span class=\"token attr-name\">top</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>levels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LineRadial</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">web-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>webs<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">angle</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">radialScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">radius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> levels<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>silver<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeLinecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Line</span></span>\n          <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">radar-line-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">from</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>zeroPoint<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>silver<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span>\n          <span class=\"token attr-name\">textAnchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">verticalAnchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">dx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">dy</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polygon</span>\n      <span class=\"token attr-name\">points</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonPoints<span class=\"token punctuation\">.</span>pointString<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>orange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fillOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>orange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>polygonPoints<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">radar-point-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">cx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">cy</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">r</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pumpkin<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Group</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>到這邊可以發現，你就是在寫 React 而已，把 visx 提供的 component 堆疊到 <code class=\"language-text\">svg</code> 元素中，然後把 data 當作 props 傳入即可，不用再去思考什麼 <code class=\"language-text\">d3.select</code>，更不用理解 D3 中 <code class=\"language-text\">enter/exit</code> 等資料更新狀態。</p>\n<p>到這邊為止就能繪製出這樣的圖表：</p>\n<p><img src=\"/image/simple-AQI.png\" alt=\"simple-AQI\"></p>\n<h3 id=\"增加資料切換與-tooltip-使用\" style=\"position:relative;\"><a href=\"#%E5%A2%9E%E5%8A%A0%E8%B3%87%E6%96%99%E5%88%87%E6%8F%9B%E8%88%87-tooltip-%E4%BD%BF%E7%94%A8\" aria-label=\"增加資料切換與 tooltip 使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>增加資料切換與 tooltip 使用</h3>\n<p>在上一步中，只有繪製一份資料的圖表，現在是時候把六個直轄市的資料都放進來，並且加上 tooltip 來呈現詳細資訊，這樣才是一個合格的資訊圖表。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDataFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">,</span> setSelectedIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>info <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更新資料的部分，直接用 <code class=\"language-text\">useState</code> 去更改要傳入給 component 的 props 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Selector</span></span> <span class=\"token attr-name\">setSelectedIdx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setSelectedIdx<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">apiData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>apiData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>可以與其他 react component 結合，這邊我額外實作一個 selector component 來切換六都資料。</p>\n<p>當資料切換，<code class=\"language-text\">setSelectedIdx</code> 被呼叫，component 重新 render，所有 <code class=\"language-text\">svg</code> 內我們堆疊的 component 也都會進行更新，就是 React 的邏輯。</p>\n<p>而 tooltip 的部分，可以利用 <a href=\"https://airbnb.io/visx/docs/tooltip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">@visx/tooltip</code></a> 來完成，<code class=\"language-text\">@visx/tooltip</code> 跟目前主流的 react 套件一樣，提供 hook 與 HOC 兩種方法可供使用：</p>\n<p>Hooks: <code class=\"language-text\">useTooltip()</code>, HOC: <code class=\"language-text\">withTooltip()</code></p>\n<p>這次的範例我採用 Hooks：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    tooltipData<span class=\"token punctuation\">,</span>\n    tooltipLeft<span class=\"token punctuation\">,</span>\n    tooltipTop<span class=\"token punctuation\">,</span>\n    tooltipOpen<span class=\"token punctuation\">,</span>\n    showTooltip<span class=\"token punctuation\">,</span>\n    hideTooltip\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleMouseOver <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">coords<span class=\"token punctuation\">,</span> datum</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">showTooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        tooltipLeft<span class=\"token operator\">:</span> coords<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n        tooltipTop<span class=\"token operator\">:</span> coords<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n        tooltipData<span class=\"token operator\">:</span> datum\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>showTooltip<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useTooltip()</code> 回傳 tooltip 內的資料、位置、現在開啟與否，以及控制顯示與隱藏 tooltip 的函式。搭配一些 event handler 就能輕鬆達成 tooltip 功能。</p>\n<p>至於 tooltip 本身的元件，並不是由 Hooks 回傳，得從 <code class=\"language-text\">@visx/tooltip</code> 中載入 <code class=\"language-text\">Tooltip</code>。此外，這個 <code class=\"language-text\">Tooltip</code> 元件其實蠻雷的，他跟其他的 visx component 不同，不是讓你繪製在 <code class=\"language-text\">svg</code> 內，而是 render 出一個 <code class=\"language-text\">div</code>，要小心不要跟其他 component 一起放到 <code class=\"language-text\">svg</code> 內了。</p>\n<p>另外，<code class=\"language-text\">Tooltip</code> 使用 <code class=\"language-text\">position: absolute</code> 來控制位置，這代表著你必須需要提供他一個 Wrapper 是 <code class=\"language-text\">position: relatieve</code>，才能正確地顯示相對位置，這並不是這麼好調整，算是 visx 我使用起來覺得有待改善的部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token operator\">:</span> <span class=\"token string\">'relative'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* other components */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>tooltipOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">top</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipTop <span class=\"token operator\">+</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipLeft <span class=\"token operator\">+</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipStyles<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>tooltipData<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Tooltip</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>此步驟成果如下：</p>\n<p><img src=\"/image/select-tooltip.png\" alt=\"selector-tooltip\">\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-jjb8v?fontsize=14&hidenavigation=1&theme=dark\">\n<img alt=\"Edit SimpleRadar-AQI (with Tooltip + select data) \" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a></p>\n<h3 id=\"使用-react-spring-讓畫面動起來\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-react-spring-%E8%AE%93%E7%95%AB%E9%9D%A2%E5%8B%95%E8%B5%B7%E4%BE%86\" aria-label=\"使用 react spring 讓畫面動起來 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 react-spring 讓畫面動起來</h3>\n<p>基本功能都完成後，就得來加上點動畫，順便體驗看看 visx 所謂的 <strong>un-opinionated on purpose</strong> 是什麼感覺。</p>\n<p>如果是用 D3 繪製圖表，當你要製作動畫時，必須得注意資料的 join 狀態，在沒有了解 <code class=\"language-text\">enter/exit</code> 的概念前，要讓 d3 圖表動起來，會感覺是盲人摸象看不清。</p>\n<p>而使用 visx 的話，基本上你要操控的就是將資料當作 props 傳入的 component，要套上哪一套 react animation library 都可以，我採用 <a href=\"https://www.react-spring.io/docs/hooks/basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a> 來將 polygon 在資料切換時做位移的 transform：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSpring<span class=\"token punctuation\">,</span> animated <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-spring\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>react-spring 的用法也算簡單，提供一個 <code class=\"language-text\">useSpring</code> Hooks 來產生一個 spring（moves data from a -> b）：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> polygonPoints <span class=\"token operator\">=</span> <span class=\"token function\">genPolygonPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">yScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonProps <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> points<span class=\"token operator\">:</span> polygonPoints<span class=\"token punctuation\">.</span>pointString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們想要讓 polygon points 變動時有動畫效果，方法就是透過 <code class=\"language-text\">useSpring</code> 針對 polygon points 生成一個 spring，然後將該 spring 傳入以 <code class=\"language-text\">animated.polygon</code> 取代的 polygon 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>&lt;animated.polygon\n<span class=\"token prefix inserted\">+</span> points={polygonProps.points}\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>&lt;polygon\n<span class=\"token prefix deleted\">-</span> points={polygonPoints.pointString}\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> fill={polygonColor}\n<span class=\"token prefix unchanged\"> </span> fillOpacity={0.3}\n<span class=\"token prefix unchanged\"> </span> stroke={polygonColor}\n<span class=\"token prefix unchanged\"> </span> strokeWidth={1}\n</span>/></code></pre></div>\n<p>每當資料切換，component 重新 render 時，新產生的 spring 就會被傳給 <code class=\"language-text\">animated.polygon</code>，<code class=\"language-text\">react-spring</code> 就會幫我們進行其中的補間動畫。完全不需要思考什麼 data enter, data exit，就是單純的 react component animation：</p>\n<p><img src=\"/image/visx-final-demo.gif\" alt=\"final demo\"></p>\n<h3 id=\"搭配-d3-scale-進行資料與顏色運算\" style=\"position:relative;\"><a href=\"#%E6%90%AD%E9%85%8D-d3-scale-%E9%80%B2%E8%A1%8C%E8%B3%87%E6%96%99%E8%88%87%E9%A1%8F%E8%89%B2%E9%81%8B%E7%AE%97\" aria-label=\"搭配 d3 scale 進行資料與顏色運算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭配 d3-scale 進行資料與顏色運算</h3>\n<p>最後再加上一點顏色變化，也試試看 D3 與 visx 的搭配。</p>\n<p>以 d3-scale 來負責顏色的運算，讓 visx 負責圖表元件的渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> scaleSequential <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-scale\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> max <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-array\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> interpolateOrRd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-scale-chromatic\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 <code class=\"language-text\">scaleSequential</code> 搭配 <code class=\"language-text\">interpolateOrRd</code> 來對應不同 AQI 的數值顏色。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> AQIvalue <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> prev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorScale <span class=\"token operator\">=</span> <span class=\"token function\">scaleSequential</span><span class=\"token punctuation\">(</span>interpolateOrRd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>AQIvalue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonColor <span class=\"token operator\">=</span> <span class=\"token function\">colorScale</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的程式碼可以看出，這邊我們單純的運用資料與 d3 packages 進行運算，產出的顏色直接當作 props 傳入 visx 元件即可完成我們想要的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animated.polygon</span>\n  <span class=\"token attr-name\">points</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonProps<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonColor<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">fillOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonColor<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>如此一來就大功告成啦！完整版程式碼請參考：</p>\n<iframe src=\"https://codesandbox.io/embed/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"SimpleRadar-AQI (with Tooltip + select data)  (react-spring)\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>visx 的使用體驗蠻好的，提供底層的元件讓你自己組裝，搭配上 d3 方便的資料處理套件，基本上可以用來建造屬於你們自己 team 內的 chart library。</p>\n<p>雖然已經開發三年，但感覺得出來還是有不少功能需要加入或改善，他們的 maintainer 目前還算蠻積極在回應 issue，若是看到這邊的讀者有興趣，歡迎去玩玩看，翻翻他們的程式碼，說不定也有你能貢獻的地方！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/airbnb/visx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visx</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introducing visx from Airbnb</a></li>\n<li><a href=\"https://vis.baidu.com/chartusage/radar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECharts 數據可視化實驗室</a></li>\n</ol>","id":"c53702ba-6ae8-5070-be74-c3f9a8386736","fields":{"slug":"datavis-visx"},"frontmatter":{"date":"2020-10-10T13:41:40.000Z","title":"使用 visx 製作資料圖表-台灣六都即時空氣品質指標","tags":["data visualization","visx","Airbnb","javascript","AQI"],"type":"tech","slug":"datavis-visx"},"timeToRead":14},{"excerpt":"好歌分享：四季","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Nm0HTbO5HhM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">四季</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Nm0HTbO5HhM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>隨著年齡增長，多少開始會遇到家人或親戚需要長期照護，入住療養院或醫院的狀況，接者就會發現許多照護中心可是一位難求，院中的照服人員或是醫護人員也得以一擋百，讓我很想知道目前台灣整體來說，老年人口、長照機構與照服人員的比例失衡有多嚴重。而剛好在前陣子 <a href=\"https://medium.com/@hulitw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@huli</a> 大大介紹了<a href=\"https://blog.techbridge.cc/2018/04/28/antd-and-admin-website/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ant design</a>，讓我再次注意到同樣為螞蟻金服出品的 <a href=\"https://antv.alipay.com/zh-cn/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV</a>，稍微研究之下發現它使用起來非常簡單快速，並且一樣有 React、Angular 與 Vue 的版本。所以今天這篇文章想藉由實作台灣老年人口與長照機構供需比的資料圖表，順便介紹 AntV 這套資料視覺化的套件。</p>\n<p>對了，報導者有發表過一系列專輯 - <a href=\"https://www.twreporter.org/topics/nursing-home-truth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長照機構裡的大象——10萬老人被照顧的真相</a>，說明台灣長照產業的現況，如果懶得看我長篇大論的技術文章，拜託至少在離開前去看一下報導者的專輯，這樣我也算功德一件，讓更多人知道長照產業的重要性，或許也就有那麼一些人有辦法解決這個鮮少被提起的問題。</p>\n<p>先看個成果：</p>\n<p data-height=\"379\" data-theme-id=\"29194\" data-slug-hash=\"OZxNbO\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"總體台灣老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/OZxNbO/\">總體台灣老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<!--\n解釋範例內容\n-->\n<p>我依照 <a href=\"https://zh.wikipedia.org/wiki/%E5%8F%B0%E6%B9%BE%E5%9C%B0%E7%90%86%E5%8C%BA%E5%88%92\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki 上的台灣地理區劃分</a>將資料北、中、南、東與外島五個區塊，並加上兩個按鈕，可以把資料量較少的外島去除，用來展示 G2 在處理資料切換時的順暢感。</p>\n<p>看得出來其實就是個非常簡單用 Excel 也畫得出來的分組長條圖，但實際上你會發現，透過 AntV 製作完全不會比用 Excel 麻煩，還支援 RWD 與資料的切換動畫！真的非常適合我這次想要快速拉出一個比較圖表的狀況！</p>\n<h1 id=\"antv\" style=\"position:relative;\"><a href=\"#antv\" aria-label=\"antv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AntV</h1>\n<p><img src=\"/image/antv-cover.png\" alt=\"AntV 官網\"></p>\n<p>AntV 其實包含了三個不同應用情境的套件：G2、G6、F2。</p>\n<ol>\n<li>G2: 包含各種圖表元素的集成，大多數的應用場景都可以從 G2 中找到對應合適的元件。</li>\n<li>G6: 主要是針對流程圖與關聯性分析的圖表元件，甚至能利用 G2 繪製資料庫的 ER Diagram 與時序圖。</li>\n<li>F2: 針對 Mobile 的使用情境來特別加強圖表在 performance 上的表現，主要繪製在 <code class=\"language-text\">canvas</code> 上。</li>\n</ol>\n<h2 id=\"今天我們使用-g2-來開發\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%A4%A9%E6%88%91%E5%80%91%E4%BD%BF%E7%94%A8-g2-%E4%BE%86%E9%96%8B%E7%99%BC\" aria-label=\"今天我們使用 g2 來開發 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今天我們使用 G2 來開發</h2>\n<p>這幾套由螞蟻金服開發的視覺化套件，除了遵照 Antd 的設計語言外，針對圖表的設計製作上，深受 <a href=\"https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Grammar of Graphics</a> 這本巨作的影響，也是 G2 的名稱的由來。</p>\n<blockquote>\n<p>G2 的強大是由其背後的一套圖形語法所支撐的，它基於《The Grammar of Graphics》(Leland Wilkinson 著)一書，是一套用來描述所有統計圖形深層特性的語法規則，該語法回答了『什麼是統計圖形』這一問題，以自底向上的方式組織最基本的元素形成更高級的元素。由此，G2 所建構出的圖表是由一系列獨立的圖形語法元素組合而成的 -- <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/the-grammar-of-graphics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV G2 官網</a></p>\n</blockquote>\n<p>我並沒有看過那本書，也沒有仔細研究 G2 的原始碼，但這敘述聽起來就超厲害的，整個工具是建構在一套完整的理論基礎上頭。</p>\n<p>在 G2 的世界中，並沒有明確定義一般的圖表類型，像是長條圖、折線圖等等，是依照一系列的圖形語法元素組合成的結果來決定其類型。</p>\n<p>所謂的圖形語法元素大概就是包含：</p>\n<ul>\n<li><strong>DataSet 資料集操作</strong></li>\n<li><strong>Scale 度量</strong></li>\n<li><strong>Geom 幾何標記（point, line, area, shape, etc）</strong></li>\n<li><strong>Attr 圖形屬性</strong></li>\n<li><strong>Coord 座標系</strong></li>\n<li><strong>Axis 座標軸</strong></li>\n<li><strong>Legend 圖例</strong></li>\n<li><strong>Tooltip 提示訊息</strong></li>\n<li><strong>Guide 輔助元素</strong></li>\n<li><strong>Facet 分面 （將一份資料按照某個維度分隔成若干子集）</strong></li>\n<li><strong>Label 標籤</strong></li>\n<li><strong>Theme 主題</strong></li>\n<li><strong>Event 圖表事件</strong></li>\n</ul>\n<p>在<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件上</a>上針對不同的元素都有非常詳細的說明與範例，而且都有中文文件（雖然是簡體...），是 AntV 的絕大優點之一。</p>\n<p>透過操作這些不同元素的組合，可以很容易的切換圖表類型，以 <strong>Coord</strong> 為例：</p>\n<p><code class=\"language-text\">chart.coord('coordType'[, cfg]);</code></p>\n<p>在同樣的資料集上，透過上述的方式來轉換座標軸，馬上就可以從層疊長條圖切換為圓餅圖：</p>\n<p><img src=\"/image/g2_coord.png\" alt=\"Different coord on same chart\"> <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/coord.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>或是透過自定義 <code class=\"language-text\">Shape</code>，快速將一般的長條圖，改變成三角形的形狀：</p>\n<p data-height=\"458\" data-theme-id=\"29194\" data-slug-hash=\"deVMmN\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"AntV-G2-demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/deVMmN/\">AntV-G2-demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>由於這樣的設計理念與基礎，G2 比起其他一樣提供較為高階視覺化語法的套件來說，彈性大了不少。</p>\n<h2 id=\"開始進行實作視覺化總要有個方向走我們先從資料搜集開始\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E5%AF%A6%E4%BD%9C%E8%A6%96%E8%A6%BA%E5%8C%96%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%96%B9%E5%90%91%E8%B5%B0%E6%88%91%E5%80%91%E5%85%88%E5%BE%9E%E8%B3%87%E6%96%99%E6%90%9C%E9%9B%86%E9%96%8B%E5%A7%8B\" aria-label=\"開始進行實作視覺化總要有個方向走我們先從資料搜集開始 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行實作，視覺化總要有個方向，走，我們先從資料搜集開始！</h2>\n<p>首先，要想知道老年人口以及長照機構的比例，我們需要找到依照年齡分組的人口統計資料，這可以從<a href=\"https://www.ris.gov.tw/346\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">內政部的人口資料庫</a>中找到「年底人口數按性別及五歲年齡組分」的資料表，從民國 35 年到 106 年都有，算是蠻齊全的。我們選取 85 ~ 100+ 以上的資料當作老年人口。</p>\n<p>2017 年的部分計算出來後大約是：368,757 人</p>\n<p><img src=\"/image/age_population.png\" alt=\"年底人口數按性別及五歲年齡組分\"></p>\n<p>接著，到<a href=\"https://dep.mohw.gov.tw/DOS/lp-3550-113-xCat-T02.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛福部統計處</a>找尋長期照顧機構的相關資料。</p>\n<p>可以找到 2017 年長照與安養機構總數的可供進住人數，大約 57,147 人：</p>\n<p><img src=\"/image/number_of_nursy_building.png\" alt=\"長照與安養機構總數的可供進住人數\"></p>\n<p>以及 2017 年老人長期照顧、安養機構工作人員人數，大約 19,064 人（只計算護理人員與照顧服務人員）：</p>\n<p><img src=\"/image/number_of_workers.png\" alt=\"老人長期照顧、安養機構工作人員人數\"></p>\n<p>上述的資料來源都有個別縣市的統計資料，上面數字是我將各縣市加總的結果，可能多少會有誤差，大家別介意啊...整體比例應該不會差太多。</p>\n<h2 id=\"接著使用-g2-來進行視覺化\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E4%BD%BF%E7%94%A8-g2-%E4%BE%86%E9%80%B2%E8%A1%8C%E8%A6%96%E8%A6%BA%E5%8C%96\" aria-label=\"接著使用 g2 來進行視覺化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著使用 G2 來進行視覺化</h2>\n<p>要使用 G2 很簡單，只要在 HTML 中載入 <code class=\"language-text\">&lt;script src=\"https://gw.alipayobjects.com/os/antv/assets/g2/3.0.9/g2.min.js\">&lt;/script></code> 即可。</p>\n<p>接著將剛剛的資料定義好：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> SimpleAll <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">57147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">19064</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'老年人口數(85~100+)'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">368757</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們就可以透過 <code class=\"language-text\">G2.Chart</code> 來定義圖表：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">G2<span class=\"token punctuation\">.</span>Chart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token string\">'mountNode'</span><span class=\"token punctuation\">,</span>\n  forceFit<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>innerHeight\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們 new 一個 <code class=\"language-text\">G2.Chart</code> 的 instance，並且同時傳入三個參數給予建構：</p>\n<ul>\n<li>container: 指定你的圖表要掛載在 DOM 中的哪個位置，對應於 HTML 中元素的 id 值。</li>\n<li>forceFit: 超方便的參數，只要設定為 true，你的圖表就能 Responsive，因此也不用再設定寬度。</li>\n<li>height: 可以額外定義需要的圖表高度。</li>\n</ul>\n<p>再來我們把資料與圖表做綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  chart<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>SimpleAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著便能開始設定我們的圖表長相：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart\n  <span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name*value'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'dodge'</span><span class=\"token punctuation\">,</span>\n    marginRatio<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>先前說過，G2 中沒有區分圖表類型，利用的是各種不同的<strong>幾何標記</strong>來組成圖表，如果要製作長條圖，需要用到的就是 <code class=\"language-text\">ìnterval()</code> 這個幾何標記，G2 還支援：<code class=\"language-text\">point()</code>, <code class=\"language-text\">path()</code>, <code class=\"language-text\">line()</code>, <code class=\"language-text\">area()</code>, <code class=\"language-text\">polygon()</code>, <code class=\"language-text\">edge()</code>, <code class=\"language-text\">schema()</code>, <code class=\"language-text\">heatmap()</code> 這幾種類型，<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/geom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網有更詳細的介紹</a></p>\n<p>宣告我們需要的幾何圖形後，接著就會想知道我們要怎麼將資料映射到對的位置，並且給予不同的顏色區別。</p>\n<p>而這一切在 G2 中都非常的簡單直覺。</p>\n<p>透過 <code class=\"language-text\">position('name*value')</code> 這個 API，我們指定資料欄位的 <code class=\"language-text\">name</code> 要對應到圖表座標軸上的 <code class=\"language-text\">x</code>，而 <code class=\"language-text\">value</code> 對應到 <code class=\"language-text\">y</code>，到這邊為止，我們就能畫出一個擁有完整資訊的圖表：</p>\n<img src=\"/image/g2-simple-bar.png\" width=\"500\" height=\"300\">\n<p>當然這樣還不夠，至少也要用顏色來區別一下不同的資料類別。利用 <code class=\"language-text\">color(name)</code> 來告訴 G2，我們要根據資料的 <code class=\"language-text\">name</code> 欄位，用不同的顏色來區分。</p>\n<img src=\"/image/g2-simple-bar-color.png\" width=\"500\" height=\"300\">\n<p>G2 的 API 通常都能接收一個以上的參數，以 color 為例，除了直接傳入顏色要對應的資料欄位外，也可以直接輸入某個顏色，讓他 apply 到整個圖表；或是傳入 callback，在 callback 中根據欄位數值做邏輯上的著色動作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 可以參考官網 API Doc https://antv.alipay.com/zh-cn/g2/3.x/api/geom.html#_color</span>\n\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用默認的顏色</span>\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用傳入的指定顏色</span>\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"接著我們還可以加點東西讓圖表活潑一點\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E9%82%84%E5%8F%AF%E4%BB%A5%E5%8A%A0%E9%BB%9E%E6%9D%B1%E8%A5%BF%E8%AE%93%E5%9C%96%E8%A1%A8%E6%B4%BB%E6%BD%91%E4%B8%80%E9%BB%9E\" aria-label=\"接著我們還可以加點東西讓圖表活潑一點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們還可以加點東西讓圖表活潑一點。</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> imageMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們在原本的 <code class=\"language-text\">interval</code> 幾何圖形上加上另一個幾何圖形 <code class=\"language-text\">point</code>，位置一樣將 <code class=\"language-text\">(name, value)</code> 映射到 <code class=\"language-text\">(x, y)</code>。</p>\n<p>相信眼尖的你會發現，<code class=\"language-text\">position</code> 的參數除了一開始的 <code class=\"language-text\">(name*value)</code> 外，也可以傳遞 array 形式。</p>\n<p>接著設定 size 為 50；在幾何圖形 <code class=\"language-text\">point</code> 中，size 代表原點的半徑，如果是 <code class=\"language-text\">interval</code> 則代表柱體寬度，<code class=\"language-text\">line</code> 則是線段寬度。</p>\n<p>還有個特殊的 <code class=\"language-text\">shape()</code> 函式，他讓我們可以指定特定資料欄位（在這邊我們用 <code class=\"language-text\">name</code>），將其轉換成不同的型態，像是這邊我們就把單純的 <code class=\"language-text\">point</code> mapping 成圖片，而這一切只要透過一個 callback 函數，回傳對應的結果即可！</p>\n<p data-height=\"518\" data-theme-id=\"29194\" data-slug-hash=\"jxZGPV\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"2017 台灣總體老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/jxZGPV/\">2017 台灣總體老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>短短幾行 code 就作出一個比一般 Excel 還要特別一些的圖表，真的蠻方便使用的對吧！</p>\n<h2 id=\"但只看全台灣總體的資料好像不太夠啊能不能看一下各縣市的呢\" style=\"position:relative;\"><a href=\"#%E4%BD%86%E5%8F%AA%E7%9C%8B%E5%85%A8%E5%8F%B0%E7%81%A3%E7%B8%BD%E9%AB%94%E7%9A%84%E8%B3%87%E6%96%99%E5%A5%BD%E5%83%8F%E4%B8%8D%E5%A4%AA%E5%A4%A0%E5%95%8A%E8%83%BD%E4%B8%8D%E8%83%BD%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%90%84%E7%B8%A3%E5%B8%82%E7%9A%84%E5%91%A2\" aria-label=\"但只看全台灣總體的資料好像不太夠啊能不能看一下各縣市的呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>但只看全台灣總體的資料好像不太夠啊，能不能看一下各縣市的呢？</h2>\n<p>當然可以。</p>\n<p>只是每個縣市如果都要放三根長方體好像太密集了點，不是很適合，所以如同最前面的成品圖，將資料北、中、南、東與外島五個區塊，這樣圖表會比較清晰一點。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">18684</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">1609</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">328</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">5997</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">482</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">73</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'老年人口數(85~100+)'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">162443</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">92071</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">101846</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">10197</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">2200</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"dataset\" style=\"position:relative;\"><a href=\"#dataset\" aria-label=\"dataset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataSet</h3>\n<p>要想在同一圖表中呈現多組長條圖，我們需引進 G2 中 <code class=\"language-text\">DataSet</code> 的這個概念。</p>\n<p><img src=\"/image/antv-g2-data-set-structure.svg\" alt=\"DataSet 架構圖（取自官網）\">\n<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/data-set.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網介紹</a></p>\n<p>這張圖看似複雜，但其實很清楚的介紹了 <code class=\"language-text\">DataSet</code> 在使用 G2 製圖的過程中所扮演的角色：操作資料。</p>\n<p>資料可以經由 <code class=\"language-text\">Connector</code> 傳入 <code class=\"language-text\">DataSet</code> 中，接著利用 <code class=\"language-text\">Transforms</code> 針對數據做處理（排序、統計、資料補齊），最後渲染到 <code class=\"language-text\">DataView</code> 中。</p>\n<p>突然看到一堆名詞感覺有點嚇人？別擔心，待會的範例會慢慢講解，只要先把 <code class=\"language-text\">DataSet</code> 想成是存放資料的資料集，而 <code class=\"language-text\">DataView</code> 就是我們要繪製出來的資料視圖。</p>\n<p>另外，一份 <code class=\"language-text\">DataSet</code> 可以連接多個 <code class=\"language-text\">DataView</code>，並透過更動其中的共用 <code class=\"language-text\">State</code> 來進行連動變更，在我們的範例中沒有使用到，但可以參考<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/data-set.html#_%E5%9B%BE%E8%A1%A8%E8%81%94%E5%8A%A8%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網的清楚範例</a></p>\n<p><img src=\"/image/antv2-g2-dataset-state.gif\" alt=\"官網範例示圖\"></p>\n<h3 id=\"回到我們的範例來\" style=\"position:relative;\"><a href=\"#%E5%9B%9E%E5%88%B0%E6%88%91%E5%80%91%E7%9A%84%E7%AF%84%E4%BE%8B%E4%BE%86\" aria-label=\"回到我們的範例來 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>回到我們的範例來</h3>\n<p>跟剛剛的範例不同，我們在進行資料綁定前（<code class=\"language-text\">chart.source(data)</code>），需要先對數據做一些操作，所以要利用 <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">transform</code> 兩個 API：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dv <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span><span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndv<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'fold'</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'南部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'東部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'外島'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 展開資料</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'區域'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// key, 設置新的 key/value 值，來對應新數據的含義。</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// value</span>\n  retains<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\">// 想要保留在 transform 後的資料欄位</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>dv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">new DataSet()</code> 與 <code class=\"language-text\">createView()</code> 創建出一個擁有 <strong>資料集 &#x3C;-> 資料狀態連接 &#x3C;-> 資料視圖</strong> 關聯性的物件 <code class=\"language-text\">dv</code>，接著利用 <code class=\"language-text\">transform()</code> 函數針對資料進行處理。</p>\n<p>我們的資料是根據 <code class=\"language-text\">可供進住人數'</code>、<code class=\"language-text\">長照、養護人員</code> 與 <code class=\"language-text\">老年人口數</code>來分類，但我們實際上希望的是能夠先依照區域劃分，在每個區域中再分別用這三種類別來比較資料。</p>\n<p>因此在傳入 <code class=\"language-text\">transform</code> 的 option 中，我們選定 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">fold</code>，其意義為：<strong>以指定字段集作為 Key，展開數據。</strong>並且設置新的 key/value 值，來對應新數據的含義。</p>\n<p>直接拿我們的資料來作為例子，比較一下前後結果就會很清楚了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 原始資料</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span><span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">18684</span><span class=\"token punctuation\">,</span><span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">1609</span><span class=\"token punctuation\">,</span><span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">328</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">5997</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">482</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">73</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 經過 transform 後</span>\n\n<span class=\"token keyword\">const</span> dataBeenTransformed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 基本上，transform 後，原有的資料欄位會不見，這邊的 `name` 還保留是因為我有加入 `retains: [ 'name' ]` 這個選項。</span></code></pre></div>\n<p>如此一來，我們在繪製圖表的時候，他就會依照目前的 Key, 將相同的 Key 所對應的值 Group 在一起，讓<code class=\"language-text\">北部</code>這個 Key 對應的三個欄位數值（可供進住人數、長照人員數、老年人口數）一起在同個分類（北部）中顯示。</p>\n<p>不過，還沒有結束。</p>\n<p>將資料分組後，依照先前的繪製方式，會畫出下面這樣的結果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart<span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域*區域人數'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img src=\"/image/antv2-g2-multiple-set.png\" width=\"500\" height=\"300\">\n<p>雖然分組了，但資料重疊在一起了...囧</p>\n<p>這是因為每個分組中的每個數據都套用到了同樣的 position 設定（區域*區域人數），我們必須要調整一下！</p>\n<p>透過 <code class=\"language-text\">adjust()</code> 函數可以方便做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'dodge'</span><span class=\"token punctuation\">,</span>\n  marginRatio<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>設定 type 為 <code class=\"language-text\">dodge</code>，代表我們要調整的是分組數據，然後給予 margin 比例為 1/5。</p>\n<p data-height=\"297\" data-theme-id=\"29194\" data-slug-hash=\"JvZWQE\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"2017 台灣老年人口與長照機構供需比 - AntV - demo1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/JvZWQE/\">2017 台灣老年人口與長照機構供需比 - AntV - demo1</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來就正常多了！</p>\n<p>關於 <code class=\"language-text\">transform</code> 的運用，可以參考官方詳解 - <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/api/transform.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Transform</a>\n關於 <code class=\"language-text\">adjust</code> 的運用，目前<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/api/geom.html#_adjust\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">支援四種 type</a>：<code class=\"language-text\">stack</code>, <code class=\"language-text\">dodge</code>, <code class=\"language-text\">jitter</code>, <code class=\"language-text\">symmetric</code>。</p>\n<p>神奇的是，這些不同類型的差異，在擁有豐富文檔的官方網站竟然找不到介紹，所以我其實也不太懂。重點是，不同的資料型態會有各自適合的 type，大家在製作時要記得都嘗試看看效果。</p>\n<h3 id=\"看起來蠻完整的了但圖表沒辦法動態變化怎麼可以\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E8%B5%B7%E4%BE%86%E8%A0%BB%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BA%86%E4%BD%86%E5%9C%96%E8%A1%A8%E6%B2%92%E8%BE%A6%E6%B3%95%E5%8B%95%E6%85%8B%E8%AE%8A%E5%8C%96%E6%80%8E%E9%BA%BC%E5%8F%AF%E4%BB%A5\" aria-label=\"看起來蠻完整的了但圖表沒辦法動態變化怎麼可以 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看起來蠻完整的了，但圖表沒辦法動態變化怎麼可以！</h3>\n<p>沒錯，我也覺得不可以。</p>\n<p>還好 AntV G2 讓我們輕鬆利用 <code class=\"language-text\">chart.changeData()</code> 就能同時更新 <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">DataView</code>。更棒的是，除了提供 RWD 設計外，資料轉換過程中的動畫他也幫你照顧好好的。</p>\n<p>除此之外，我們也能夠直接操作原有的 <code class=\"language-text\">DataSet</code>，像開頭的範例一樣，點選 button 時，我們透過 <code class=\"language-text\">chart.filter</code> 來過濾原有資料，並且在最後呼叫 <code class=\"language-text\">chart.repaint()</code> 進行 <code class=\"language-text\">DataView</code> 的重繪（一定要重繪才會 trigger <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">DataView</code> 間的連動）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  chart<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      chart<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        minLimit<span class=\"token operator\">:</span> <span class=\"token number\">73</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    chart<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      minLimit<span class=\"token operator\">:</span> <span class=\"token number\">400</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">!==</span> <span class=\"token string\">'外島'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chart<span class=\"token punctuation\">.</span><span class=\"token function\">repaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如此一來就能完成開頭的範例啦！</p>\n<p data-height=\"379\" data-theme-id=\"29194\" data-slug-hash=\"OZxNbO\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"總體台灣老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/OZxNbO/\">總體台灣老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>如同我在前言提及的<a href=\"(https://www.twreporter.org/topics/nursing-home-truth)\">報導者專輯</a>中所呈現的，台灣的長照產業正面臨很大的困境，只要家中有人有這種需求，相信都能有很深的體會。先前也曾有學長以長照產業為創業題目，可惜最終黯然收場，可見這問題真的有其嚴重與困難性存在。</p>\n<p>身為前端開發者，或許目前能做的最大貢獻就是盡量製作出許多一目了然的資訊圖表、網頁專輯，讓更多的人知道問題的嚴重性，透過 AntV G2 這樣的工具，製作互動式圖表真的是越來越方便與容易，希望大家能多加貢獻，讓台灣社會往更好的方向走去！而小魯我能力不足分身乏術...先下台一鞠躬...</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://antv.alipay.com/zh-cn/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV</a></li>\n<li><a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">G2</a></li>\n<li><a href=\"https://www.ris.gov.tw/346\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">內政部戶政司人口資料庫</a></li>\n<li><a href=\"https://www.gender.ey.gov.tw/gecdb/Stat_Statistics_DetailData.aspx?sn=%2BwEzRrF1jtJ82VtOVizhxw%3D%3D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">行政院性別平等統計資料庫</a></li>\n<li><a href=\"https://dep.mohw.gov.tw/DOS/lp-3550-113-xCat-T02.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛福部統計處-長期照顧統計</a></li>\n<li><a href=\"https://www.twreporter.org/topics/nursing-home-truth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長照機構裡的大象——10萬老人被照顧的真相</a></li>\n<li>Icon made by Freepik from www.flaticon.com</li>\n</ol>","id":"92256b42-2644-5b1d-8625-b2717a7bc39d","fields":{"slug":"datavis-antv"},"frontmatter":{"date":"2018-05-05T13:41:40.000Z","title":"使用 AntV 製作資料圖表-台灣老年人口與長照機構供需比","tags":["data visualization","AntV","G2","RWD","javascript"],"type":"tech","slug":"datavis-antv"},"timeToRead":17},{"excerpt":"好歌分享：Surfing day feat.秋僧","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/DaBdf8ULeiA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Surfing day feat.秋僧</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/DaBdf8ULeiA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>大概是在 2016 年底的時候，我整個人的心理狀態很糟，一直覺得自己對生活的掌控力非常低落，庸庸碌碌的過著每一天，卻不曉得自己的目標在哪，對什麼都興致缺缺，似乎把生活遺失了。</p>\n<p>我試著想從過往日常生活中的所作所為來找出一些癥結點，結果發現記憶有限，越想越覺得自己好像什麼都沒完成，接著就進入無止盡的負面迴圈...</p>\n<p>為了打破這樣的心理狀態，我從 2017 年的一月開始記錄自己每天的生活，將一整天所做的事項記錄在 Google Calendar 中，有了這樣的紀錄後，我每週都會回顧一下自己這一整個星期所做的事情，花在工作、運動、娛樂、學習等等的時間如何，讓自己在負面情緒滿漲時，能看看自己其實還是達成了不少事，同時也能隨時警惕自己在時間管理與各種事項間的分配是否有需要調整的部分。</p>\n<p>好啦，說穿了就是用 Google Calendar 寫日記。</p>\n<p>而現在又接近年底了，在這近乎一年的紀錄中，我想應該可以來做個 Year End Review，利用 D3 來幫助我將記錄在 Google Calendar 上的資料視覺化出來！</p>\n<p>大致的想法是將不同分類的資料整理出來，然後看看 <strong><em>我在這一年當中，每一天花在每一個類別的事項的 Heat Map</em></strong> 會是長什麼樣子，並加上簡單的 Select box 方便切換。</p>\n<p>成果截圖如下：</p>\n<p><img src=\"/image/arvin-yerr-calendar.png\" alt=\"YERR\"></p>\n<p>有興趣的可以連結到 <a href=\"https://bl.ocks.org/ArvinH/56909246bd584743fa5ee7ad148ad1ac\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bl.ocks 看 Demo 與完整的程式碼</a></p>\n<h1 id=\"資料視覺化的第一步當然是取得資料\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%95%B6%E7%84%B6%E6%98%AF%E5%8F%96%E5%BE%97%E8%B3%87%E6%96%99\" aria-label=\"資料視覺化的第一步當然是取得資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料視覺化的第一步，當然是取得資料</h1>\n<p>Google 存了多少資料想必大家都心知肚明，而他老大哥也是願意把我們的資料還給我們，只要連結到 <a href=\"https://takeout.google.com/settings/takeout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Takeout</a> 就可以將你在 Google 服務上的資料副本下載下來：</p>\n<p><img src=\"/image/google-takeout.png\" alt=\"Google Takeout\"></p>\n<p>既然我要視覺化我在 Google Calendar 上的資料，當然就是選取 Calendar 來下載：</p>\n<p><img src=\"/image/google_calendar_details.png\" alt=\"Google Calendar download\"></p>\n<p>或著，你也能直接從 Google Calendar 匯出你的日曆：</p>\n<p><img src=\"/image/google_calendar_export.png\" alt=\"Export from Google Calendar\"></p>\n<p>仔細看一下，這兩種方式下載到的資料其格式都是 <a href=\"https://zh.wikipedia.org/wiki/ICalendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">iCalendar</code></a>。</p>\n<p>是 <code class=\"language-text\">iCalendar</code> 又如何呢？通用的標準格式不是很好嗎？代表我之後若換成 Apple 的 iCal，我這次的專案也能套用上去耶！</p>\n<p>But!</p>\n<p>在我當初紀錄日曆時，我每一項 item 的資訊很少，就只是單純的填入 Summary，並且依照分類給予顏色。</p>\n<p>而在 <code class=\"language-text\">iCalendar</code> 的標準中，並沒有 Google Calendar 的顏色資訊，所以我只好忍痛放棄這條方便的道路...（這告訴我們做事還是不能太懶）</p>\n<p>iCalendar 的內容大概長這樣，以 <code class=\"language-text\">BEGIN:VEVENT</code> 開始，<code class=\"language-text\">END:VEVENT</code> 為止：</p>\n<div class=\"gatsby-highlight\" data-language=\"ics\"><pre class=\"language-ics\"><code class=\"language-ics\">BEGIN:VEVENT\nDTSTART;VALUE=DATE:20171209\nDTEND;VALUE=DATE:20171210\nDTSTAMP:20171210T075750Z\nUID:839skadkfcd03812j3f0c030s0s@google.com\nCREATED:20171210T024308Z\nDESCRIPTION:\nLAST-MODIFIED:20171210T024310Z\nLOCATION:\nSEQUENCE:0\nSTATUS:CONFIRMED\nSUMMARY:運動（主：背）\nTRANSP:TRANSPARENT\nBEGIN:VALARM\nACTION:DISPLAY\nDESCRIPTION:This is an event reminder\nTRIGGER:-F0AB0H30C0D\nEND:VALARM\nBEGIN:VALARM\nACTION:EMAIL\nDESCRIPTION:This is an event reminder\nSUMMARY:Alarm notification\nATTENDEE:mailto:arvin0731@gmail.com\nTRIGGER:-F0AB0H30C0D\nEND:VALARM\nEND:VEVENT</code></pre></div>\n<h2 id=\"既然是-google就會有-api\" style=\"position:relative;\"><a href=\"#%E6%97%A2%E7%84%B6%E6%98%AF-google%E5%B0%B1%E6%9C%83%E6%9C%89-api\" aria-label=\"既然是 google就會有 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>既然是 Google，就會有 API</h2>\n<p>沒辦法直接載到資料，那就從 API 取得吧！</p>\n<p>Google 最棒的一點就是有一堆 API，而為人詬病的剛好是這些 API 常常沒有完善的 Doc。</p>\n<p>幸運的是，Google Calendar API 的文件還蠻好懂的，因為給了一個<a href=\"https://developers.google.com/google-apps/calendar/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">直接可以複製來用的範例 Sample</a>（笑</p>\n<p>直接照著步驟做就可以了，他有很多實作版本，我是用熟悉的 Node.js 來幫我爬取資料。</p>\n<p>唯一要注意的是步驟一中的 <a href=\"https://console.developers.google.com/start/api?id=calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this wizard</a> 要好好照著說明執行，即便他步驟看起來有些匪夷所思，像是要你到某一頁後按下 <code class=\"language-text\">Cancel</code> button (eg. On the Add credentials to your project page, click the Cancel button.)</p>\n<p>當你設定好一切，取得 OAuth2 需要的 credentials 後，可以參照他下面的範例依據你想要的資料作修改，比較關鍵的程式是這幾行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">var</span> calendar <span class=\"token operator\">=</span> google<span class=\"token punctuation\">.</span><span class=\"token function\">calendar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> queryOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        auth<span class=\"token operator\">:</span> auth<span class=\"token punctuation\">,</span>\n        calendarId<span class=\"token operator\">:</span> <span class=\"token string\">'primary'</span><span class=\"token punctuation\">,</span>\n        timeMax<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        singleEvents<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        orderBy<span class=\"token operator\">:</span> <span class=\"token string\">'startTime'</span><span class=\"token punctuation\">,</span>\n        maxResults<span class=\"token operator\">:</span> <span class=\"token number\">2500</span> <span class=\"token comment\">// 不給 maxResults 的話，預設值就是 2500</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        queryOptions<span class=\"token punctuation\">.</span>pageToken <span class=\"token operator\">=</span> pageToken<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    calendar<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>queryOptions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ... 從 response 中取得需要的資料</span>\n        <span class=\"token comment\">// var events = response.items;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們使用的是 v3 的 google calendar api，利用 <code class=\"language-text\">calendar.events.list</code> 可以取得某個 Calendar 的 events 列表，在 <code class=\"language-text\">queryOptions</code> 中，比較重要的有下面幾個:</p>\n<p><code class=\"language-text\">auth</code> 就是你在 <a href=\"https://console.developers.google.com/start/api?id=calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this wizard</a> 中產生的 credentials，你在頁面上就能找到下載 json 的連結：</p>\n<p><img src=\"/image/googleapi-credentials.png\" alt=\"download credentials\"></p>\n<p><code class=\"language-text\">calendarId</code> 是你想抓取的 Calendar 名稱，primary 指的是你登入帳號的主要日曆。</p>\n<p><code class=\"language-text\">timeMax</code> (or <code class=\"language-text\">timeMin</code>) 可以用來規範你想抓取哪段時間內的 events。</p>\n<p>最後是 <code class=\"language-text\">pageToken</code>，由於 Google Calendar API 有限制，你一次最多只能抓取 2500 個 events，即便你有設定 <code class=\"language-text\">maxResults</code> 這個參數也一樣。因此你會需要透過每次 API request 回傳的 <code class=\"language-text\">nextPageToken</code> 來進行下一頁的 Query。（沒錯，response 回來的是 <code class=\"language-text\">nextPageToken</code>，但你下 Query 時帶的是 <code class=\"language-text\">pageToken</code>，請注意！）</p>\n<p>可以設定的參數還非常多，可以從 Google 提供的 <a href=\"https://developers.google.com/apis-explorer/#p/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API Explorer</a> 中選取 <code class=\"language-text\">Calendar API</code> 來測試看看哪樣的參數是你需要的！每個參數都有對應的說明，還算清楚。</p>\n<p>我在這部分的實作放在 <a href=\"https://gist.github.com/ArvinH/a46f9af2df4316651d2056e610ba68b1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gist</a> 上，有興趣可以參考，寫得很暴力簡陋，畢竟這不是這次的重點～</p>\n<p>主要是依照日曆中每筆 Event 的時間與顏色做分類與統計，依照不同顏色（也就是不同類別）分別存放到不同檔案。</p>\n<p>資料格式也很簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"csv\"><pre class=\"language-csv\"><code class=\"language-csv\"><span class=\"token value\">date</span><span class=\"token punctuation\">,</span><span class=\"token value\">colorIdNum</span>\n<span class=\"token value\">2017-10-10</span><span class=\"token punctuation\">,</span><span class=\"token value\">1</span>\n<span class=\"token value\">2017-10-11</span><span class=\"token punctuation\">,</span><span class=\"token value\">1</span>\n<span class=\"token value\">2017-10-12</span><span class=\"token punctuation\">,</span><span class=\"token value\">1</span>\n<span class=\"token value\">2017-10-13</span><span class=\"token punctuation\">,</span><span class=\"token value\">1</span>\n<span class=\"token value\">2017-10-14</span><span class=\"token punctuation\">,</span><span class=\"token value\">1</span>\n<span class=\"token value\">2017-10-15</span><span class=\"token punctuation\">,</span><span class=\"token value\">1</span>\n<span class=\"token value\">...</span>\n<span class=\"token value\">..</span>\n<span class=\"token value\">.</span></code></pre></div>\n<h1 id=\"資料有了終於能開始畫圖了\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E6%9C%89%E4%BA%86%E7%B5%82%E6%96%BC%E8%83%BD%E9%96%8B%E5%A7%8B%E7%95%AB%E5%9C%96%E4%BA%86\" aria-label=\"資料有了終於能開始畫圖了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料有了終於能開始畫圖了！</h1>\n<p>主要參考 <a href=\"https://bl.ocks.org/mbostock/4063318\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mike Bostock 大神的作品</a>，改成只繪製單一年度圖表，並加上切換資料後的動畫。</p>\n<p>接下來是手把手說明：</p>\n<p>我們總共需要三個 Function：<code class=\"language-text\">DrawCalendar</code>、<code class=\"language-text\">UpdateCalendar</code> 與 <code class=\"language-text\">changeDataSrc</code>，分別用來繪製圖表、更新圖表與更新資料。</p>\n<p>最主要的當然就是 <code class=\"language-text\">DrawCalendar</code>。繪製日曆又可分為三個步驟：</p>\n<h3 id=\"steps-i-設定日曆基本外觀大小顏色svg-container\" style=\"position:relative;\"><a href=\"#steps-i-%E8%A8%AD%E5%AE%9A%E6%97%A5%E6%9B%86%E5%9F%BA%E6%9C%AC%E5%A4%96%E8%A7%80%E5%A4%A7%E5%B0%8F%E9%A1%8F%E8%89%B2svg-container\" aria-label=\"steps i 設定日曆基本外觀大小顏色svg container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps I: 設定日曆基本外觀（大小、顏色、svg container）</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">DrawCalendar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataSrc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> width <span class=\"token operator\">=</span> <span class=\"token number\">960</span><span class=\"token punctuation\">,</span>\n      height <span class=\"token operator\">=</span> <span class=\"token number\">136</span><span class=\"token punctuation\">,</span>\n      cellSize <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> formatPercent <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleQuantize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"#006837\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#1a9850\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#66bd63\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#a6d96a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#d9ef8b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#ffffbf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#fee08b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#fdae61\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#f46d43\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#d73027\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#a50026\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token comment\">// .</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面這段很單純的就是設置好圖表的基本資訊，包含寬、高與日曆中每\"天\"的格子大小，利用 <code class=\"language-text\">d3.scaleQuantize()</code> 創建一個 color 函數，用來將之後的資料映射到對應的顏色。</p>\n<p>這邊有個 <code class=\"language-text\">d3.format(\"d\")</code> 的函數，其實在這邊用不到，但還是想介紹一下。\n<code class=\"language-text\">d3.format()</code> 是個方便你正規化資料數值的函式，例如你想將數值侷限在小數點後兩位，就可以用 <code class=\"language-text\">d3.format(\"2f\")</code>，或是想轉換成百分比，可以用 <code class=\"language-text\">d3.format(\".2%\")</code>，這樣會將你輸入的數值乘上 100 後，再加上百分比符號，並依照 % 前的數字來決定小數點後的位數。</p>\n<p>eg. d3.format(\".2%\")(0.234) === 20.34% <a href=\"http://www.oxxostudio.tw/articles/201501/svg-d3-12-formatting.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(可參考此網站說明)</a></p>\n<p>接著是繪製主要的 calendar chart svg container：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> svg <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#calendar-chart\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"translate(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">-</span> cellSize <span class=\"token operator\">*</span> <span class=\"token number\">53</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">-</span> cellSize <span class=\"token operator\">*</span> <span class=\"token number\">7</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  svg<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"translate(-6,\"</span> <span class=\"token operator\">+</span> cellSize <span class=\"token operator\">*</span> <span class=\"token number\">3.5</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") rotate(-90)\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"font-family\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"font-size\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text-anchor\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/d3/d3-array#range\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">d3.range()</code></a> 會回傳根據你傳入的區間，回傳一段連續數值陣列。</p>\n<p>我們利用 <code class=\"language-text\">d3.range(2017, 2018)</code> 取得陣列資料，會回傳長度為一，包含 2017 這個數值的陣列 <code class=\"language-text\">[2017]</code>。</p>\n<p>你可能會想，為什麼我要這樣做？</p>\n<p>只需要一年的資料，就直接 append svg 就好呀，何必 binding 2017 這個值到 svg 的 <code class=\"language-text\">__data__</code> 裡面呢？</p>\n<p>賣個關子，待會看到 Steps II 你就會知道了！</p>\n<p>而剩下的部分就是利用 <code class=\"language-text\">transform</code> 來位移 svg，為整個圖表保留空間，並加上文字標記。</p>\n<h3 id=\"steps-ii-繪製日曆中的每一天也就是每個小格子啦\" style=\"position:relative;\"><a href=\"#steps-ii-%E7%B9%AA%E8%A3%BD%E6%97%A5%E6%9B%86%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E5%A4%A9%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%AF%8F%E5%80%8B%E5%B0%8F%E6%A0%BC%E5%AD%90%E5%95%A6\" aria-label=\"steps ii 繪製日曆中的每一天也就是每個小格子啦 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps II: 繪製日曆中的每一天（也就是每個小格子啦～）</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> rect <span class=\"token operator\">=</span> svg<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#ccc\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rect\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">timeDays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rect\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> cellSize<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> cellSize<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d3<span class=\"token punctuation\">.</span>timeWeek<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span><span class=\"token function\">timeYear</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cellSize<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cellSize<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">datum</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span><span class=\"token function\">timeFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  svg<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#000\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">timeMonths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> pathMonth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>要繪製出一年中的 \"每一天\"，我們可以直接 for loop 跑 365 次，或是產生 365 筆資料，但更聰明的做法是利用 <a href=\"https://github.com/d3/d3-time#timeDays\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-time 提供的 timeDays 函數</a> 來幫我們產生出特定日期區間的日期資料！</p>\n<p><code class=\"language-text\">d3.timeDays(new Date(d, 0, 1), new Date(d + 1, 0, 1));</code></p>\n<p>其中 <code class=\"language-text\">new Date()</code> 的第一個參數 <code class=\"language-text\">d</code> 代表年，<code class=\"language-text\">0</code> 代表第一個月（月份從 0 開始），<code class=\"language-text\">1</code> 則是第一天，因此這邊會回傳 d 年到 d + 1 年間的每一天。</p>\n<p>好那問題來了，這個 <code class=\"language-text\">d</code> 是什麼呢？</p>\n<p>要回答這個問題，必須先了解一下 d3 中的 <code class=\"language-text\">selection.data()</code>。</p>\n<p>我以前都以為 <code class=\"language-text\">data()</code> 只能夠丟入資料陣列，但是在這次的實作過程中才發現，原來他可以接受函數！</p>\n<p>但他是怎麼運作的呢？我們偷看一下 <a href=\"https://github.com/d3/d3-selection/blob/master/src/selection/data.js#L94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-selection 的原始碼</a></p>\n<p><img src=\"/image/d3-selection-src.png\" alt=\"d3-selection src\"></p>\n<p>真的蠻有趣的，他其實是先判斷你傳入的 <code class=\"language-text\">value</code> 是不是函數，若不是，會先利用 <code class=\"language-text\">constants()</code> 將你的值包裹過，讓他變成可執行的函數：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsconstants.js\"><pre class=\"language-jsconstants.js\"><code class=\"language-jsconstants.js\">export default function(x) {\n  return function() {\n    return x;\n  };\n}</code></pre></div>\n<p>他會將 <code class=\"language-text\">parent.__data__</code> 傳入該函數中執行，回傳的就會是該 <code class=\"language-text\">selector</code> 的 <code class=\"language-text\">__data__</code>。所以直接傳入 function 也是可行的！</p>\n<p>以我們的例子來說，<code class=\"language-text\">rect</code> 的 parent 就是 <code class=\"language-text\">svg</code>，而你們記得在 Steps I 時，我們 binding 陣列 <code class=\"language-text\">[2017]</code> 到 <code class=\"language-text\">svg</code> 的 <code class=\"language-text\">__data__</code> 中嗎？這邊就派上用場了！在 rect 的 <code class=\"language-text\">data()</code> 中的函數所接收到的 <code class=\"language-text\">d</code> 值就是 <code class=\"language-text\">2017</code>。</p>\n<p>而上述的 <code class=\"language-text\">d3.timeDays(new Date(d, 0, 1), new Date(d + 1, 0, 1));</code> 就會回傳 2017 到 2018 中間 365 筆的日期資料！我們也因此得到 365 個小方塊啦！</p>\n<p>接著，利用類似的概念，使用 <code class=\"language-text\">d3.timeMonths()</code> 產生 12 筆月份資料，接著實作 <code class=\"language-text\">pathMonth()</code> 來畫出 svg path：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspathmonth()\"><pre class=\"language-jspathmonth()\"><code class=\"language-jspathmonth()\">function pathMonth(t0) {\n  var t1 = new Date(t0.getFullYear(), t0.getMonth() + 1, 0),\n    d0 = t0.getDay(), w0 = d3.timeWeek.count(d3.timeYear(t0), t0),\n    d1 = t1.getDay(), w1 = d3.timeWeek.count(d3.timeYear(t1), t1);\n  return &quot;M&quot; + (w0 + 1) * cellSize + &quot;,&quot; + d0 * cellSize\n    + &quot;H&quot; + w0 * cellSize + &quot;V&quot; + 7 * cellSize\n    + &quot;H&quot; + w1 * cellSize + &quot;V&quot; + (d1 + 1) * cellSize\n    + &quot;H&quot; + (w1 + 1) * cellSize + &quot;V&quot; + 0\n    + &quot;H&quot; + (w0 + 1) * cellSize + &quot;Z&quot;;\n}</code></pre></div>\n<p>這段邏輯看似複雜，其實很直覺。</p>\n<p><a href=\"https://github.com/d3/d3-time#interval_count\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">d3.timeWeek.count(start, end)</code></a> 可以計算出 start 到 end 這兩個日期間有幾週。</p>\n<p><code class=\"language-text\">t0</code> 是目前傳入的時間，依照 d3.timeMonths() 的產出，會是一個月的第一天，<code class=\"language-text\">t1</code> 則是該月的月底。\n<code class=\"language-text\">d0</code> 與 <code class=\"language-text\">d1</code> 就是單純的 <code class=\"language-text\">t0</code>、<code class=\"language-text\">t1</code> 對應的 day，就是星期幾。\n<code class=\"language-text\">w0</code> 算出從 <code class=\"language-text\">t0</code> 該年的第一天到 <code class=\"language-text\">t0</code> 有幾週，依此類推 <code class=\"language-text\">w1</code> 就是相對於 <code class=\"language-text\">t1</code>。</p>\n<p>用這些數值就能夠 <code class=\"language-text\">M(移動)</code> 到月初的位置，並往下移動 7 天 <code class=\"language-text\">V 7*cellSize</code>，接著在水平位移(H) 到月底的位置，然後垂直位移到月底日期的星期位置<code class=\"language-text\">(d1 +1) * cellSize</code>，最後為到原點把整個月份框起來。</p>\n<p>svg path 的繪製方法可以[參考這篇](<a href=\"http://www.oxxostudio.tw/articles/201406/svg-04-path-1.html%E3%80%82\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.oxxostudio.tw/articles/201406/svg-04-path-1.html。</a></p>\n<p>到目前為止可以畫出如下的圖：</p>\n<p><img src=\"/image/months-outline.png\" alt=\"outline\"></p>\n<h3 id=\"steps-iii-該開始-binding-資料了\" style=\"position:relative;\"><a href=\"#steps-iii-%E8%A9%B2%E9%96%8B%E5%A7%8B-binding-%E8%B3%87%E6%96%99%E4%BA%86\" aria-label=\"steps iii 該開始 binding 資料了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps III: 該開始 Binding 資料了</h3>\n<p>再來算是最後一步了，我們將資料綁定並填入剛剛產生的格子中！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">csv</span><span class=\"token punctuation\">(</span>dataSrc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> csv</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">nest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 將 date 抽到外層當 key</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 透過 rollup 將 value 設為 colorId</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">rollup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">+</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>colorIdNum<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>csv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  rect<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> d <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找出有 match 到的日期，表示那天我有做事 XD</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> d <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">formatPercent</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊主要就兩個步驟，第一步先用 <a href=\"https://github.com/d3/d3-collection#nests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3.nest</a> 來整理資料，我們需要把陣列中每筆資料的 \"date\" 抓出來當 Key，如此一來，在第二步中，我們可以直接利用 <code class=\"language-text\">d in data</code> 的語法在 <code class=\"language-text\">selection.filter()</code> 中進行過濾，選出 365 個格子中，哪些有跟我們真正的 csv 日期資料 match，有 match 到的格子，我們填入顏色！（使用最前面的 color 函數來做映射）</p>\n<p>填入和顏色後：</p>\n<p><img src=\"/image/color-calendar.png\" alt=\"填入資料顏色後的 calendar\"></p>\n<h3 id=\"steps-iv-加入動態切換資料的功能\" style=\"position:relative;\"><a href=\"#steps-iv-%E5%8A%A0%E5%85%A5%E5%8B%95%E6%85%8B%E5%88%87%E6%8F%9B%E8%B3%87%E6%96%99%E7%9A%84%E5%8A%9F%E8%83%BD\" aria-label=\"steps iv 加入動態切換資料的功能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps IV: 加入動態切換資料的功能</h3>\n<p>最後我們實作一下綁定在 <code class=\"language-text\">&lt;select></code> 元素上的 <code class=\"language-text\">onchange</code> 函數來做資料切換，而在圖表方面，我們只需要選取出 <code class=\"language-text\">rect</code> 並重新 <code class=\"language-text\">filter</code> 資料即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 切換資料</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">changeDataSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dataSrcSelector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">UpdateCalendar</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">calendarData-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.csv</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 更新圖表，加上 `transition()` 與 `duration()` 讓過程滑順一些</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">UpdateCalendar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataSrc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token comment\">// ..</span>\n  d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> d <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>d <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"成果\" style=\"position:relative;\"><a href=\"#%E6%88%90%E6%9E%9C\" aria-label=\"成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>成果</h2>\n<p><img src=\"/image/calendar-d3.gif\" alt=\"final demo\">\n<a href=\"https://bl.ocks.org/ArvinH/56909246bd584743fa5ee7ad148ad1ac\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo 與完整的程式碼</a></p>\n<p>嗯～看起來我工作頗認真，不過等等...怎麼好像週末顏色都比較深啊哈哈哈...哈哈..哈..嗚嗚嗚</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>當初開始在 Google Calendar 上紀錄日誌時，並沒有想到可以在年終的時候進行整年的 review，所以每天的紀錄都很隨性，並沒有很完整的進行分類，有些可惜，但還是能透過資料視覺化的結果，看出我在時間分配的掌控度有相當的進步空間，像是花在工作與培養額外興趣（娛樂）的時間有蠻大的落差。</p>\n<p>不管怎麼說，有了這次的經驗，相信明年的 Year End Review 會更好！\n如果你也覺得這樣做有趣，或許可以加入我的行列，也或許想想有什麼方式可以為你自己進行一次年終 Review，相信都會有所收穫！</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"http://www.oxxostudio.tw/articles/201501/svg-d3-12-formatting.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3 formatting</a></li>\n<li><a href=\"https://github.com/d3/d3-time\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-time</a></li>\n<li><a href=\"https://github.com/d3/d3-array\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-array</a></li>\n<li><a href=\"https://github.com/d3/d3-collection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-collection</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Date</a></li>\n<li><a href=\"https://bl.ocks.org/mbostock/4063318\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mbostock calendar view</a></li>\n<li><a href=\"https://developers.google.com/google-apps/calendar/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Calendar API</a></li>\n</ol>","id":"6b27745a-f793-5c6c-8bf7-d8d3ba7bb33b","fields":{"slug":"d-3-v-4-calendar-yearendreview"},"frontmatter":{"date":"2017-12-12T21:10:27.000Z","title":"一起用 Google Calendar 與 D3.js 進行年終回顧吧！","tags":["google","google calendar api","d3","d3v4","data visualization"],"type":"tech","slug":"d3v4-calendar-yearendreview"},"timeToRead":15},{"excerpt":"『怎樣都行』\n『只要別讓任何人打敗你』\n--- Daigo Umehara","html":"<blockquote>\n<p>『怎樣都行』\n『只要別讓任何人打敗你』\n--- Daigo Umehara</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前陣子 Mozilla 如火如荼地推出他們的量子專案，而其中在介紹 Quantum CSS 架構的時候，用了許多 [可愛的草圖]((<a href=\"https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/</a>) 來解說，讓我突然想到如果能夠將這種手繪風格套用到資料圖表上面，應該會蠻有趣的，也才因此有了這篇文章。</p>\n<p>一般來說，我們不管是用 D3.js 或是 Highcharts 等工具來製作圖表，都是朝向專業、有質感、表達清晰的方向去實作，利用各種顏色搭配與互動操作來讓圖表更漂亮更吸引人。</p>\n<p><img src=\"/image/highchart_demo.png\" alt=\"source: highchart offical site\">\n（來源：highchart offical site）</p>\n<p>但看久了以後總會有點疲乏，加上現代人專注力越來越短暫，利用一些漫畫、草圖的方式來呈現要說明的東西，反而夠容易抓住大家的注意力，像是上述文章的作者 Lin Clark 在 medium 上就有一系列的 <a href=\"https://code-cartoons.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cartoon Intro</a> 的文章。</p>\n<p>但身為前端工程師，手上的工具只有 Javascript、CSS 與 HTML，要怎麼樣 \"手繪\" 圖表呢？</p>\n<p>其實很簡單，利用 D3.js 我們就能做得到！</p>\n<h2 id=\"d3-sketchy\" style=\"position:relative;\"><a href=\"#d3-sketchy\" aria-label=\"d3 sketchy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>d3 sketchy</h2>\n<blockquote>\n<p>“開玩笑的吧？我知道 D3 可以在 Canvas 上繪圖，但 Canvas 用起來還是沒有操作 svg 來得方便，而 svg 畫的長條圖就是四四方方的啊！\"</p>\n</blockquote>\n<p>沒錯我一開始也是這麼想的，但就在某次偶然機會下，拜讀到 <a href=\"https://www.manning.com/books/d3js-in-action-second-edition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3 in Action</a> 這本書的作者在 <a href=\"https://github.com/emeeks/d3-sketchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github 上的 code</a> 後讓我改觀了。</p>\n<p>這篇文章的範例就是修改自他三年前的 code，當時還是 v3 的版本，似乎也沒有將它推上 npm。</p>\n<p>所以順便利用這篇文章記錄並分享一下如何製作出 Sketchy 效果的長條圖，並且包裝成 d3 plugin 來使用！</p>\n<p>先給大家看一下比較圖：</p>\n<p><img src=\"/image/normal_barchart.png\" alt=\"一般的長條圖\"></p>\n<p><img src=\"/image/sketchy_barchart.png\" alt=\"套用 sketchy 效果的長條圖\"></p>\n<p>是不是瞬間活潑很多呢？</p>\n<p>雖然你可能會說這樣喪失了圖表的精準度，但很多時候我們只需要用來強調比較性的結果，這種情況就很適合了。</p>\n<h2 id=\"那到底是如何做到的呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%88%B0%E5%BA%95%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E7%9A%84%E5%91%A2\" aria-label=\"那到底是如何做到的呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那到底是如何做到的呢？</h2>\n<p>稍微仔細觀察上面的兩張圖，你可能會發現，擁有 Sketchy 效果的長條圖，好像少了間距，多了黑色的手繪編框。</p>\n<p>發現到這點以後，答案就呼之欲出了！</p>\n<p>其實所謂 Sketchy 的效果，就只是在原本的長條圖上加入了不規則的黑色邊框線條！</p>\n<p>而這些黑色的邊框其實是利用 <code class=\"language-text\">svg</code> 的 <code class=\"language-text\">path</code> 來繪製的，我們把它拆開來看就很清楚：</p>\n<p data-height=\"419\" data-theme-id=\"29194\" data-slug-hash=\"XeQbPP\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"sketchy-split\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/XeQbPP/\">sketchy-split</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>黑色的手繪風格邊框其實是利用至少九條 <code class=\"language-text\">L</code> 線段繪製出來的，等於是將原本的長方圖用線段包起來，實作上我們只要在原本長條圖的 x, y 位置與寬高上加上一些隨機變動的 offset，就可以做出這樣的效果！原理其實就這麼簡單！</p>\n<p><img src=\"/image/path-d-order.png\" alt=\"pathd\"></p>\n<h2 id=\"知道原理以後來看點-code-吧\" style=\"position:relative;\"><a href=\"#%E7%9F%A5%E9%81%93%E5%8E%9F%E7%90%86%E4%BB%A5%E5%BE%8C%E4%BE%86%E7%9C%8B%E9%BB%9E-code-%E5%90%A7\" aria-label=\"知道原理以後來看點 code 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知道原理以後來看點 code 吧！</h2>\n<p>既然他的實作原理很簡單，我們理當可以將它變成一個 d3 的 plugin，像是其他 d3 v4 的模組一樣，讓其他使用者都能夠透過 npm 或是 script 的方式載入使用。</p>\n<p>而要做成 d3-plugin 的話，在 code 的架構上我們就要稍微注意一下。</p>\n<p>基本上我們希望能沿用一般使用 d3 lib 的語法習慣：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdemo\"><pre class=\"language-jsdemo\"><code class=\"language-jsdemo\">d3.select(&#39;#svgParent&#39;).selectAll(&quot;g&quot;).data(data)\n    .enter()\n    .append(&quot;g&quot;)\n    .attr(&quot;class&quot;, &quot;bar&quot;);\n\nd3.select(&quot;#svgParent&quot;)\n    .selectAll(&quot;g.bar&quot;)\n    .each(function (d, i) {\n        var x = i * 100 + 20;\n        var y = 500 - hscale(d) / 2;\n        var rw = 100;\n        var rh = hscale(d) / 2;\n        // 1. 我們想將此 plugin 放到 d3 的 global object 內\n        // d3.sketchy 就是我們的 plugin\n        var sketchyBar = d3.sketchy.rect();\n\n        // 2. 我們要能 chaining 函數\n        sketchyBar\n            .height(rh)\n            .width(rw)\n            .x(x)\n            .y(y)\n            .fill(color)\n            .stroke(&quot;black&quot;)\n            .strokeWidth(10)\n            .jostle(5)\n        // 3. 最後我們利用 d3-selection 來幫我們選取 d3 DOM 傳入\n        d3.select(this).call(sketchyBar);\n    })</code></pre></div>\n<p>要達到這種效果，對 Javascript 熟悉的你應該都不困難，我們只要 <code class=\"language-text\">export</code> 一個物件，在其內設定一個會回傳函式的 function，製作出 closure，再實作相對應的 <code class=\"language-text\">setter</code>，並且每一個 <code class=\"language-text\">setter</code> 都回傳 <code class=\"language-text\">this</code> 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptd3-sketchy\"><pre class=\"language-javascriptd3-sketchy\"><code class=\"language-javascriptd3-sketchy\">import { select as d3Select, selectAll as d3SelectAll } from &quot;d3-selection&quot;;\nimport { scaleLinear as d3ScaleLinear } from &quot;d3-scale&quot;;\nimport { line as d3Line, curveLinear as d3CurveLinear } from &quot;d3-shape&quot;;\nlet d3sketchy = {};\n\nd3sketchy.rect = function(selection) {\n\n  let rh = 50, rw = 10, w = 2, c = [0, 0],\n    fillColor = &quot;red&quot;, strokeColor = &quot;black&quot;, jostle = 0;\n\n  function d3_sketchyRect(selection) {\n      // 繪製 sketchy 長條圖的主要函式\n  }\n\n  // 實作各個屬性的 setter\n  d3_sketchyRect.height = function(data) {\n    if (!arguments.length) return rh;\n    rh = data;\n    return this;\n  }\n\n  d3_sketchyRect.width = function(data) {\n    // ... 作法與 height 相同\n  }\n\n  d3_sketchyRect.x = function(data) { /* ... */ }\n\n  d3_sketchyRect.y = function(data) { /* ... */ }\n\n  d3_sketchyRect.fill = function(data) { /* ... */ }\n\n  d3_sketchyRect.jostle = function(data) { /* ... */ }\n\n  // ... 可以再繼續設置你要的函數\n\n  return d3_sketchyRect;\n}\nexport default d3sketchy;</code></pre></div>\n<p>而 export 出去的物件函式執行後所回傳的 function 就是用來接收 d3-selection 傳遞給我們的 d3 DOM，並且繪製 sketchy bar 的函式，相關的 code 大家可以從下面的 codepen 看到，或是到我的 <a href=\"https://github.com/ArvinH/d3-sketchy/blob/master/src/sketchy.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 上去看也可以：</p>\n<p data-height=\"360\" data-theme-id=\"29194\" data-slug-hash=\"QqPbEK\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"d3-sketchy demo I\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/QqPbEK/\">d3-sketchy demo I</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>繪製 sketchy bar 的函式主要做三件事：</p>\n<ol>\n<li>繪製一般的長條圖</li>\n<li>Random 產生一些動態 offset （在 <code class=\"language-text\">d3_sketchyRect</code> 這個函式中可以看到有一段看似複雜的計算，其實就只是對稱的畫出內外框，像是在原理介紹那邊的圖一樣）</li>\n<li>用 Svg path 來繪製手繪邊框</li>\n</ol>\n<h2 id=\"最後來打包-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BE%86%E6%89%93%E5%8C%85-plugin-%E5%90%A7\" aria-label=\"最後來打包 plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後來打包 Plugin 吧！</h2>\n<p>其實要打包一個 lib 有很多方法，但是 D3 的作者在 D3 v4 尚未推出前就有寫了一篇文章介紹要<a href=\"https://bost.ocks.org/mike/d3-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">怎麼樣製作一個 d3 plugin</a>，為了要能盡量共用所有的 d3 plugin，最好大家都是遵照同樣的準則來處理會比較好。</p>\n<p>不過其實也沒什麼準則 XD...主要比較特別的就是 D3 的 plugin 大多是用 rollup 來打包，我猜想是因為當時 webpack 1.x 還沒有加入 tree-shaking 的功能，而針對 plugin 這種小型模組來說，也用不到 webpack 的許多功能，rollup 反而比較適合用來打包 plugin 模組。</p>\n<p>｀</p>\n<p>檔案結構大概就是這樣：</p>\n<p><img src=\"/image/file_structure.png\" alt=\"檔案結構\"></p>\n<p>在你的 <code class=\"language-text\">index.js</code> 中加入：</p>\n<p><code class=\"language-text\">export {default as sketchy} from \"./src/sketchy\";</code></p>\n<p>當作 module 的入口，也方便 require。</p>\n<p>接著在你的 package.json 中加入 script：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsonpackage.json\"><pre class=\"language-jsonpackage.json\"><code class=\"language-jsonpackage.json\">&quot;scripts&quot;: {\n    &quot;pretest&quot;: &quot;rm -rf build &amp;&amp; mkdir build &amp;&amp; rollup -c rollup.config.js&quot;,\n    &quot;test&quot;: &quot;tape &#39;test/**/*-test.js&#39;&quot;,\n    &quot;prepublish&quot;: &quot;npm run test &amp;&amp; uglifyjs build/d3-sketchy.js -c -m -o build/d3-sketchy.min.js&quot;,\n    &quot;postpublish&quot;: &quot;zip -j build/d3-sketchy.zip -- LICENSE README.md build/d3-sketchy.js build/d3-sketchy.min.js&quot;\n}</code></pre></div>\n<p>可以看到這邊在 publish 前都會用 uglify.js 來產生 min.js 檔案，如此一來你的 user 就可以選擇要不要下載 minify 過的套件。</p>\n<p>最後就是撰寫你的 <code class=\"language-text\">rollup.config.js</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrollup.config.js\"><pre class=\"language-jsrollup.config.js\"><code class=\"language-jsrollup.config.js\">import resolve from &#39;rollup-plugin-node-resolve&#39;;\nimport babel from &#39;rollup-plugin-babel&#39;;\n\nexport default {\n    entry: &#39;index.js&#39;,\n    dest: &#39;build/d3-sketchy.js&#39;,\n    format: &#39;umd&#39;, // umd 的格式能透過 CommonJS 或是 AMD 載入\n    moduleName: &#39;d3&#39;, // 設定為 d3 可以將你的 plugin 放入 global.d3 底下\n    sourceMap: true,\n    plugins: [\n        resolve(),\n        babel({\n            exclude: &#39;node_modules/**&#39;\n        })\n    ]\n};</code></pre></div>\n<p>這邊要注意兩件事情。</p>\n<ol>\n<li>rollup 不會幫你打包你從 node<em>modules 裡面 import 進來的檔案，所以如果你有用到其他的 d3 plugin，變成在你的 plugin 說明內要告知使用者，記得載入相依的 plugin。或是你也可以向我這邊一樣，透過 <code class=\"language-text\">rollup-plugin-node-resolve</code> 這個 rollup plugin 來幫我們把 `node</em>modules` 底下的 lib 也打包</li>\n<li>rollup 不會幫你編譯 babel，如果你真的想用 babel，就像我一樣加入 <code class=\"language-text\">rollup-plugin-babel</code> 即可。</li>\n<li>format 記得設為 umd，這樣才能夠在 CommonJS 或 AMD 環境下都能使用。</li>\n<li>最雷的一點在這邊！目前用 rollup 打包 d3 plugin 的話，你需要將 roullup 的版本鎖在 0.41，否則你會發現你編譯出來的 <code class=\"language-text\">build/d3-xxx.js</code> 內的最前面幾行長得像這樣：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">global<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd <span class=\"token operator\">?</span> <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'exports'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有看出什麼問題嗎？</p>\n<p><code class=\"language-text\">factory((global.d3 = {}))</code></p>\n<p>他會將 global.d3 塞入一個空物件，而非先使用原先的 global.d3：<code class=\"language-text\">factory((global.d3 = global.d3 || {}))</code></p>\n<p>如此一來，你如果在載入 plugin 之前先載入其他 d3 plugin，就會發生問題了...</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://d3js.org/d3.v4.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../build/d3-sketchy.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 裡面的 d3 object 會蓋掉上面 d3.v4.js 產生的---></span></code></pre></div>\n<p>可能有其他解法，但看了 d3 的一些 plugin 也是先將版本卡在 0.41。</p>\n<p>當你做完上述工作後，在你的 repo 底下執行 <code class=\"language-text\">npm install</code>，就會產生 <code class=\"language-text\">build</code> folder，裡面含有：</p>\n<ol>\n<li>d3-sketchy.js</li>\n<li>d3-sketchy.min.js</li>\n<li>d3-sketchy.js.map (如果你 rollup.config.js 有設定 sourceMap: true 就會有此檔案)</li>\n</ol>\n<p>如此一來別人就能使用你的 plugin 了：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../build/d3-sketchy.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> sketchyBar <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span>sketchy<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token comment\">//..</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>有些時候看似很複雜的東西，其實原理卻非常簡單，只是需要發揮點創意。剛好透過這篇也學習了一下 rollup 的相關設定，雖然我私人猜測 rollup 應該還是會慢慢被 webpack 壓過去，即便 rollup 作者寫了<a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>。\n這篇算是一個小小的筆記，不是太完整，若有任何疑問或建議歡迎留言討論！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/emeeks/d3-sketchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-sketchy</a></li>\n<li><a href=\"https://bost.ocks.org/mike/d3-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-plugin</a></li>\n<li><a href=\"https://github.com/rollup/rollup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rollup</a></li>\n</ol>","id":"e8539dea-9a05-51d1-a347-bcdb8d3eba5a","fields":{"slug":"d-3-v-4-sketchy-plugin"},"frontmatter":{"date":"2017-10-21T18:16:38.000Z","title":"D3v4 工作坊 - 製作 D3 plugin 來繪製草圖風格長條圖","tags":["d3","plugin","rollup","data visualization"],"type":"tech","slug":"d3v4-sketchy-plugin"},"timeToRead":9},{"excerpt":"好歌分享：教練 傑利 - 下雨的午後","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/JDqrw7b5knk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">教練 傑利 - 下雨的午後</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/JDqrw7b5knk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Q2 的時候稍微玩了一下 WebVR，主要是瞭解了 Mozilla 主導推出的 A-Frame，驚訝於其簡單方便的 API 設計外，也一直在想還能做什麼有趣的應用，直到最近在構思 D3 的一些範例時，\n才突然又再想起 WebVR：既然 A-Frame 提供了一系列的 VR DOM object，而 D3.js 又能操作 DOM，那理論上一起使用是沒有問題的。</p>\n<p>果不其然，稍稍在網路搜尋一下就看到 WSJ 的這篇 <a href=\"http://graphics.wsj.com/3d-nasdaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Is the Nasdaq in Another Bubble?</a></p>\n<p>超酷的呀，視覺化股票歷史資料，做成雲霄飛車般的閱讀體驗，雖然我個人覺得資料視覺化應該要以宏觀角度來讓他人清楚了解整個脈絡，VR 的「個人」視角，限制了這部分的特性，但若以 Story telling 的角度來看，VR 加上數據視覺化反倒為使用者帶來更豐富生動的閱讀經驗，不僅僅是瞭解內容，過程有趣才能在碎片資訊爆炸的時代抓住人們的眼球！</p>\n<p>在這個想法下就決定來嘗試看看用 A-Frame 與 D3 來製作資料視覺化，雖然還沒辦法做出太絢麗的互動體驗，但出發總要有個開始，就先試試最簡單的 Bar Chart 吧！</p>\n<p>最後會長這樣：</p>\n<p><img src=\"/image/webvr-datavis.png\" alt=\"Demo\"></p>\n<h2 id=\"前置作業\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\" aria-label=\"前置作業 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前置作業</h2>\n<p>有摸過 A-Frame 的讀者應該很清楚要建立出一個 VR 場景有多簡單：\n沒摸過的也歡迎回去看這篇 <a href=\"https://blog.arvinh.info/2017/04/01/web-vr-101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebVR 101</a></p>\n<p data-height=\"414\" data-theme-id=\"29194\" data-slug-hash=\"RLGmvp\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-I\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/RLGmvp/\">WebVR-D3-I</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"加入-d3\" style=\"position:relative;\"><a href=\"#%E5%8A%A0%E5%85%A5-d3\" aria-label=\"加入 d3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加入 D3</h2>\n<p>回想一下，一般在使用 D3 的時候，就是選取出你要操作的 svg 元件，接著將進入 <code class=\"language-text\">enter()</code> 狀態的資料 append 上去，然後調整 Style 與 attributes。</p>\n<p>那在 A-Frame 當中我們也可以如法泡製：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 就像是以前選取 svg 一樣，只是在 VR 中我們要選取 a-scene</span>\n<span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-scene'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 處理資料與 DOM 元素的方式與平時操作 d3 相同，一樣的 enter/update/exit 狀態</span>\n<span class=\"token keyword\">const</span> bars <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-box.bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 真正 append 資料並設定屬性</span>\nbars<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">classed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span>  i <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> z   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'depth'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// hscale 就只是個 d3 的 scaleLinear 映射函數</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>首先我們 select 出 <code class=\"language-text\">a-scene</code>，接著在其下面預先將資料 binding 到擁有 <code class=\"language-text\">bar</code> 這個 classname 的 <code class=\"language-text\">a-box</code> entity 內（此時還是虛擬的 DOM 物件），最後再呼叫 <code class=\"language-text\">enter()</code> 來真正的將資料 append 到 DOM 上面。</p>\n<p>這邊有兩個小地方需要注意：</p>\n<ol>\n<li>除了寬（width）與高（height）外，還有深度（depth）需要設定，畢竟現在是在 3D 的世界中。</li>\n<li>數值的設定：在 WebVR API 中，回傳的距離資料以 Meter 為單位，因此在 A-frame 中的距離單位也是 Meter，並非一般頁面的 pixel，因此我們的 x, y, z 值記得不能設定太大。</li>\n</ol>\n<p>結果如下：</p>\n<p data-height=\"301\" data-theme-id=\"29194\" data-slug-hash=\"aLmgNd\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-II\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/aLmgNd/\">WebVR-D3-II</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>簡單幾行 code 就能夠在 VR 的世界內呈現資料圖表囉！</p>\n<h2 id=\"互動元素\" style=\"position:relative;\"><a href=\"#%E4%BA%92%E5%8B%95%E5%85%83%E7%B4%A0\" aria-label=\"互動元素 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>互動元素</h2>\n<p>平面的 D3 能夠互動，VR 版當然也要。</p>\n<p>在 VR 裡面的 Cursor 基本上是跟著你的攝影機（camera），你可以直接用 A-Frame 提供的 entity，就可以有基本的 gaze-based cursor（凝視型），顧名思義，也就是以你的視線為中心的 cursor，並且可以觸發 mouseenter, mouseleave 等事件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>camera<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>cursor<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>cursor<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>camera<span class=\"token operator\">></span></code></pre></div>\n<p>或是自己 create 一個 cursor entity：<a href=\"https://aframe.io/docs/0.7.0/components/cursor.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity position<span class=\"token operator\">=</span><span class=\"token string\">\"0 1 0\"</span> rotation<span class=\"token operator\">=</span><span class=\"token string\">\"0 0 0\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity camera look<span class=\"token operator\">-</span>controls wasd<span class=\"token operator\">-</span>controls<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity cursor<span class=\"token operator\">=</span><span class=\"token string\">\"fuse: true; fuseTimeout: 500\"</span>\n                position<span class=\"token operator\">=</span><span class=\"token string\">\"0 0 -2\"</span>\n                geometry<span class=\"token operator\">=</span><span class=\"token string\">\"primitive: ring; radiusInner: 0.02; radiusOuter: 0.027\"</span>\n                material<span class=\"token operator\">=</span><span class=\"token string\">\"color: black; shader: flat\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span></code></pre></div>\n<p>要注意的是，由於我們需要設定 cursor 與 camera 的位置，所以將這兩個 entity 都包在另一個 entity 下，並由最上層的 entity 來設定初始 position 會較為方便。</p>\n<p>而在 cursor 這個 entity 上我們設定了幾個屬性：</p>\n<ul>\n<li>cursor：設定為 fuse: true，即代表 gaze-based cursor，會跟著你視線移動，並且當你「盯著」某個點一段時間（fuseTimeout）後，會觸發 <code class=\"language-text\">Click</code> event。</li>\n<li>material：可以設定其顏色材質。</li>\n<li>geometry：設定其物理形狀。</li>\n</ul>\n<p>當然如果你是用 Vive, daydream 的 controller，也已有其相對應的 entity 可以使用，可以參考這份文件 (laser-controls)[https://aframe.io/docs/0.7.0/components/laser-controls.html]</p>\n<p>設定好 cursor 後，接著就是在我們的 bar 上面設置 event listener 了。</p>\n<p>在剛剛的 attr 後面再接著利用 <code class=\"language-text\">on</code> 來設定 listener：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">bars<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">classed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span>  i <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'depth'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseenter\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-text\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'align'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">0 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scale'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1 1 1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dataText<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>d<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseleave\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面做的事情很簡單，在 <code class=\"language-text\">mouseenter</code> 時，我們 append 上一個 <code class=\"language-text\">&lt;a-text></code>，並設定顏色位置等等，然後套用一個 <code class=\"language-text\">transition</code> 動畫來改變 bar 的顏色，<code class=\"language-text\">mouseleave</code> 時把 style 還原。</p>\n<p>如此一來你就有了一個可以互動的 VR bar chart 了！</p>\n<p data-height=\"341\" data-theme-id=\"29194\" data-slug-hash=\"eGdwxz\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-II\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/eGdwxz/\">WebVR-D3-II</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"component-化\" style=\"position:relative;\"><a href=\"#component-%E5%8C%96\" aria-label=\"component 化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component 化</h2>\n<p>我做到這邊的時候突然有個想法，既然 A-frame 可以讓我們自己客製化 Entity 內要放的 component，那我們能不能將剛剛的 code 全部塞進 component 內呢？</p>\n<p>還記得在 <a href=\"https://blog.arvinh.info/2017/04/01/web-vr-101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebVR 101</a> 中有記錄到我們可以透過 AFRAME 這個全域變數來註冊 component，並放入 <code class=\"language-text\">&lt;a-entity></code> 中：\n<a href=\"https://aframe.io/docs/0.7.0/core/component.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reference</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsbarchart.js\"><pre class=\"language-jsbarchart.js\"><code class=\"language-jsbarchart.js\">AFRAME.registerComponent(&#39;barchart&#39;, {\n    schema: {\n        json: {\n            default: {\n                    key: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;],\n                    value: [19, 80, 30, 15, 55]\n                }\n            }\n    },\n    init: function () {\n        this.generate();\n    },\n\n    generate: function () {\n        const json = this.data.json;\n        const el = this.el;\n        // default alpha for bars\n        const alpha = 0.6;\n        const data = json.value;\n        const dataText = json.key;\n        // Select the current enity object just like an svg\n        const currentEntity = d3.select(el);\n\n        // we use d3&#39;s enter/update/exit pattern to draw and bind our dom elements\n        const bars = currentEntity.selectAll(&#39;a-box.bar&#39;).data(data);\n        /*\n        ... \n        這邊放入上面所撰寫的 D3 相關的程式碼\n        */\n    }\n    });</code></pre></div>\n<ul>\n<li>schema: 這邊是用來設定此 entity 的 properties，像是能透過設置 json 屬性來傳入資料 <code class=\"language-text\">&lt;a-entity barchart=\"json: data.json\">&lt;/a-entity></code>。同時你也可以在這邊設定 default 的屬性值。</li>\n<li>init: Component 在初始階段會呼叫此函數一次，用來初始變數或是 component 的狀態，以我們這邊的例子就是用來呼叫 d3 繪製圖表。\n（Component 還有許多 lifecycle：update, remove, tick, play, pause, updateSchema，可以參考<a href=\"https://aframe.io/docs/0.7.0/core/component.html#overview-of-methods\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>）</li>\n<li>generate: 這邊就是我們用來處理 D3 圖表的函式。</li>\n</ul>\n<p>在這邊比較需要了解的是 schema property 與 Component 本身的 HTML Element 的存取方式：\n我們在 schema 中定義的屬性都會存在於 <code class=\"language-text\">this.data</code> 中，因此我們可以透過 <code class=\"language-text\">this.data.json</code> 來取得 json 屬性的資料；而 <code class=\"language-text\">this.el</code> 則是回傳 Component 本身的 HTML Element，我們要用來給 D3 進行 DOM object 操作的。</p>\n<p>當你註冊好 component 後，在我們的 HTML 中就只需要放置 <code class=\"language-text\">&lt;a-entity barchart>&lt;/a-entity></code> 就可以產生圖表了！</p>\n<p><span style=\"color:red;\">（唯一要注意的是，你的 component 一定要在 <code class=\"language-text\">&lt;a-sene></code> render 之前就處理好，最好是放在 <code class=\"language-text\">&lt;head></code> 的位置。</span></p>\n<p>你之後只要將剛剛創建的 component export 出去，就可以讓任何人透過 <code class=\"language-text\">&lt;a-entity barchart>&lt;/a-entity></code> 的方式來使用。\n而且透過 property 的設定，我們可以傳入不同資料，甚至是顏色設定等等的屬性，來進行客製化的圖表！</p>\n<p>像是可以產生一個 104 年台灣年齡人口數統計長條圖：</p>\n<p>只要在 html 中加入\n<code class=\"language-text\">&lt;a-entity barchart=\"json: https://cdn.rawgit.com/ArvinH/f47671a9ff33b6719b043945d36054ac/raw/09a6ea23ee40d4a83205eef6d4fd4e5efa072c2b/104life.json\">&lt;/a-entity></code></p>\n<p>稍微修改一下 component 內的 <code class=\"language-text\">init</code> 函數，因為從 entity 傳來的 property 預設會是 string 的 type：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">init</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>json <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parsedJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            self<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>parsedJson <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fallback to default</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parsing failed'</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>順便加入一些 color 的處理，成果如下：</p>\n<p data-height=\"346\" data-theme-id=\"29194\" data-slug-hash=\"oGYvbK\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-IV\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/oGYvbK/\">WebVR-D3-IV</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然只是簡單的實作一個 Barchart，但透過這次的小嘗試，大概了解該怎麼樣用 D3 與 A-Frame 寫出一個 WebVR Data visulization Component 後，就可以有許多東西可以玩了！或許可以結合現有的 3D modal，並將開放資料用不同的模型呈現，製作出一個 3D VR 版的城市圖表，應該會很有趣！加上他包裹成 Component 的方式非常方便，在社群的努力下，實作上勢必會更加輕鬆（github 上已經有許多人釋出的 component 可以使用）。</p>\n<p>預計下一篇會再來做個有趣並複雜一點的 VR 資訊圖表！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://aframe.io/docs/0.7.0/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-Frame doc</a></li>\n<li><a href=\"https://github.com/ngokevin/kframe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kframe</a></li>\n<li><a href=\"https://bl.ocks.org/enjalot/8be32e6f1f32920ba841\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe + d3 test</a></li>\n<li><a href=\"https://blog.arvinh.info/2017/04/01/web-vr-101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebVR 101</a></li>\n<li><a href=\"http://graphics.wsj.com/3d-nasdaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Is the Nasdaq in Another Bubble?</a></li>\n</ol>","id":"05328de9-f471-50f1-8dfe-0ed4a6086f26","fields":{"slug":"webvr-d-3"},"frontmatter":{"date":"2017-09-23T10:53:07.000Z","title":"D3v4 工作坊 - WebVR 與資料視覺化","tags":["web vr","d3","d3v4","data visualization"],"type":"tech","slug":"webvr-d3"},"timeToRead":9},{"excerpt":"~ $ What's the funny thing about UDP jokes?\n~ $ I don't care if you get them.","html":"<blockquote>\n<p>~ $ What's the funny thing about UDP jokes?\n~ $ I don't care if you get them.</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>以前在做一些跟地圖有關的應用時，第一個出現在腦海的不外乎是 Google Map 和 OpenStreetMap，然後搭配 Leaflet 與 Mapbox 等工具來對 map tile 做各種加工渲染，然而到了工作上需要時就會發現這些工具在不付費、遵守授權的狀況下，就出現了各種限制，像是需要自己架設 tile server 來轉換 OpenStreetMap 的圖資，或是 request 的次數限制等等。</p>\n<p>想了想發現最好的替代方案就是直接用 svg 來繪製，雖然沒有辦法像 Google Map 那般詳細，但在某些應用上來說就非常足夠，效果也很好，因此今天就來紀錄一下該如何使用 D3.js 與 svg 來繪製出有動態路線功能的地圖，讓大家可以做出類似中央氣象局的颱風路線預覽圖的作品！</p>\n<p>先看一下成品：(P.S. 最近發現 <a href=\"https://codesandbox.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a> 這個服務，比起在 jsbin 或是 jsfiddle 上寫 React 來說好用一些，缺點是 mobile 體驗較差)</p>\n<iframe src=\"https://codesandbox.io/embed/Wv9kBrJW?hidenavigation=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"地圖資料搜集\" style=\"position:relative;\"><a href=\"#%E5%9C%B0%E5%9C%96%E8%B3%87%E6%96%99%E6%90%9C%E9%9B%86\" aria-label=\"地圖資料搜集 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地圖資料搜集</h2>\n<p>要自己畫地圖，當然就必須自己準備好圖資，看你想要台灣地圖或是世界地圖，基本上在網路上都能找得到，但是在使用網路資料的時候都需要小心授權條款，以世界地圖為例，目前我看到最能自由運用的就是 <a href=\"http://www.naturalearthdata.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Natural Earth</a> 的資料了，基本上有分三種比例的圖資，1:10m、1:50m 與 1:100m:</p>\n<p><img src=\"/image/naturalearth.png\" alt=\"Natural Earth Dataset\"></p>\n<p>從 Natural Earth 載下來的會是 Vector data，無法直接使用在 D3.js 上，好在 D3.js 的作者 Mike Bostock 製作的另一套工具 <a href=\"ttps://github.com/topojson\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">topojson</a> 中已經有 parse 過後的 TopoJSON 檔案，可以直接透過 <code class=\"language-text\">https://unpkg.com/world-atlas@1/world/110m.json</code> 取得，<code class=\"language-text\">50m</code> 的也有，就換一下後面的檔名即可。</p>\n<p>如果你想要其他 Natural Earth 上的資料，其實也可以修改 <a href=\"https://github.com/topojson/world-atlas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">world-atlas</a> 裡面的 script 來自己轉換成 TopoJSON，可以參考我 fork 過來修改的這份檔案 <a href=\"https://github.com/ArvinH/world-atlas/blob/master/prepublish-populor-place.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prepublish-populor-place.sh</a>，用來 parse Natural Earth 上的 popular_place data。</p>\n<h2 id=\"繪製基本的-svg-地圖\" style=\"position:relative;\"><a href=\"#%E7%B9%AA%E8%A3%BD%E5%9F%BA%E6%9C%AC%E7%9A%84-svg-%E5%9C%B0%E5%9C%96\" aria-label=\"繪製基本的 svg 地圖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>繪製基本的 svg 地圖</h2>\n<p>已經有了資料來源，就可以開始動手將地圖繪製出來了！</p>\n<p>首先，React component 的起手式先準備好：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsworldmap.jsx\"><pre class=\"language-jsworldmap.jsx\"><code class=\"language-jsworldmap.jsx\">import React, { Component } from &#39;react&#39;;\nimport { render } from &#39;react-dom&#39;;\n\nclass WorldMap extends Component {\n  constructor() {\n    super()\n    this.state = {\n      worlddata: [],\n      typhoonPath: [],\n      marker: {},\n      graticule: geoGraticule10(),\n    }\n  }\n  \n  componentDidMount() {\n     fetch(&quot;https://unpkg.com/world-atlas@1/world/50m.json&quot;)\n      .then(response =&gt; {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return;\n        }\n        response.json().then(worlddata =&gt; {\n          this.setState({\n            worlddata: feature(worlddata, worlddata.objects.countries).features,\n          });\n        })\n      });\n  }\n\n  render() {\n    return (\n      &lt;svg className=&quot;map-svg&quot; width={ 800 } height={ 600 } viewBox=&quot;0 0 800 600&quot;&gt;\n      &lt;/svg&gt;\n    )\n  }\n}\n\nrender(&lt;WorldMap /&gt;, document.getElementById(&#39;root&#39;));</code></pre></div>\n<p>我在 <code class=\"language-text\">componentDidMount</code> 的時候去抓取地圖資料，接著才 <code class=\"language-text\">setState()</code>，但實際上你的專案可以先把資料存起來，這樣一來在 render 的地方就可以直接先 render 出 svg 地圖，這對於採用 Server-side rendering 的專案來說會方便很多，因為如果全部用 D3.js 的話，會需要先 select 到 DOM object 才能進行繪製，會麻煩一些。</p>\n<h3 id=\"利用-svg-path-繪製世界地圖\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8-svg-path-%E7%B9%AA%E8%A3%BD%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9C%96\" aria-label=\"利用 svg path 繪製世界地圖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用 svg path 繪製世界地圖</h3>\n<p>在 svg 底下 append 一個 group，然後 iterate state 中的世界地圖資料，加上每個區塊的 svg path：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsworld_map_path.js\"><pre class=\"language-jsworld_map_path.js\"><code class=\"language-jsworld_map_path.js\">&lt;g className=&quot;countries&quot;&gt;\n    {\n    this.state.worlddata.map((d,i) =&gt; (\n        &lt;path\n        key={ `path-${ i }` }\n        d={ geoPath().projection(this.projection())(d) }\n        className=&quot;country&quot;\n        fill={ `rgba(219, 163, 43,${ 1 / this.state.worlddata.length * i})` }\n        stroke=&quot;#FFFFFF&quot;\n        strokeWidth={ 0.5 }\n        /&gt;\n    ))\n    }\n&lt;/g&gt;</code></pre></div>\n<p>這邊先看一下我們 state 中的 worlddata 到底是什麼東西：</p>\n<p><img src=\"/image/worldtopojson.png\" alt=\"World Map topojson\"></p>\n<p>這是一個 TopoJSON 的格式，TopoJSON 簡單來說可以當作效能更好的 GeoJSON，詳細介紹可以看 <a href=\"https://github.com/topojson/topojson\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a>。Array 裡面的每一個 object 都是 type 為 Feature 的物件，其中的 geometry 包含了實際的地理資訊，可能是一個 Polygon，以及此 Polygon 每個點的座標。</p>\n<p>接著我們需要使用 <code class=\"language-text\">d3-geo</code> 中的 <code class=\"language-text\">geoPath</code>，其中有 <code class=\"language-text\">projection()</code> method 能讓我們把剛剛的座標投影（project）到我們繪製的地圖上。</p>\n<p>投影在地圖的繪製中扮演著極為重要的角色，透過投影，我們才能將真實世界的經緯度映射到我們網頁上小小的 svg 中。</p>\n<p><code class=\"language-text\">d3-geo</code> 中的 <code class=\"language-text\">geoPath.projection()</code> 會回傳一個 function，讓你傳地理資訊進去，接著回傳映射過後的 svg path，基本上就是一連串的 svg mini language，就是下列程式碼中的 <code class=\"language-text\">d</code> 的內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>path d<span class=\"token operator\">=</span>\"<span class=\"token constant\">M</span> <span class=\"token number\">10</span> <span class=\"token number\">25</span>\n         <span class=\"token constant\">L</span> <span class=\"token number\">10</span> <span class=\"token number\">75</span>\n         <span class=\"token constant\">L</span> <span class=\"token number\">60</span> <span class=\"token number\">75</span>\n         <span class=\"token constant\">L</span> <span class=\"token number\">10</span> <span class=\"token number\">25</span>\"</code></pre></div>\n<p>M 代表將 筆 移動到 (10, 25)，接著 L 畫一條線到 (10, 75)，以此類推。詳細介紹可看 <a href=\"https://www.dashingd3js.com/svg-paths-and-d3js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a>。</p>\n<p>當然，你必須傳入一個參數，告訴 <code class=\"language-text\">geoPath.projection()</code> 你想要映射的範圍為何，也就是 <code class=\"language-text\">world_map_path.js</code> 中 <code class=\"language-text\">#L6</code> 所傳入的 <code class=\"language-text\">this.projection()</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsprojection\"><pre class=\"language-jsprojection\"><code class=\"language-jsprojection\">projection() {\n    return geoMercator()\n        .scale(1000)\n        .center([125.9605, 26.6978]);\n}</code></pre></div>\n<p>也是回傳一個 Function，利用到 <code class=\"language-text\">d3-geo</code> 的 <code class=\"language-text\">geoMercator</code>，可以定義好你要映射的 scale 是多大，中心位置在哪。</p>\n<p>最後為了讓每個國家的區塊有明顯區分，我們在 <code class=\"language-text\">fill</code> 的地方，隨機給他不同的顏色，<code class=\"language-text\">fill={ rgba(219, 163, 43,${ 1 / this.state.worlddata.length * i}) }</code></p>\n<p>到這個步驟你已經可以畫出下面這樣的地圖了：</p>\n<iframe src=\"https://codesandbox.io/embed/0RKnYZMAL?hidenavigation=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"繪製動態路線---資料準備\" style=\"position:relative;\"><a href=\"#%E7%B9%AA%E8%A3%BD%E5%8B%95%E6%85%8B%E8%B7%AF%E7%B7%9A---%E8%B3%87%E6%96%99%E6%BA%96%E5%82%99\" aria-label=\"繪製動態路線   資料準備 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>繪製動態路線 - 資料準備</h2>\n<p>接著進行重頭戲，我們要在地圖上繪製出動態的路徑圖。</p>\n<p>第一個步驟也是先準備好資料，以文章開頭的成品來說，是我修改某年的颱風路徑資料而成的，如果想要串接目前的颱風路徑圖，可以到 <a href=\"http://opendata.cwb.gov.tw/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">氣象資料開放平臺</a> 申請會員，就可以拿到 API Key 去索取資料，格式會是 xml。</p>\n<p>API 範例：<code class=\"language-text\">http://opendata.cwb.gov.tw/opendataapi?dataid=W-C0034-004&amp;authorizationkey={你的 API key}</code>\n其中 <code class=\"language-text\">W-C0034-004</code> 是颱風路徑圖資料的 data id。</p>\n<p>資料中會有三個個主要部分，分別是過去的路徑資料 (past)、現在的位置 (curr) 與 未來預測的位置 (fcst)，簡單的 parser 可以參考我的 <a href=\"https://gist.github.com/ArvinH/66d1f9cedfc96deb956031502362202b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a></p>\n<p>出來的結果格式如下，主要包含經緯度座標與颱風半徑：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"pastData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"past\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-07-02T08:00:00+08:00\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"coordinates\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token number\">126.8</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">20.9</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"radius\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ... 過往資料通常很多</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token string\">\"currData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"curr\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-07-05T02:00:00+08:00\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"coordinates\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token number\">142.5</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">35.1</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"radius\"</span><span class=\"token operator\">:</span> <span class=\"token number\">120</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"fcstData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fcst\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-07-05T14:00:00+08:00\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"coordinates\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token number\">150.5</span><span class=\"token punctuation\">,</span>\n                <span class=\"token number\">36.7</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"radius\"</span><span class=\"token operator\">:</span> <span class=\"token number\">120</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"繪製動態路線---路徑繪製\" style=\"position:relative;\"><a href=\"#%E7%B9%AA%E8%A3%BD%E5%8B%95%E6%85%8B%E8%B7%AF%E7%B7%9A---%E8%B7%AF%E5%BE%91%E7%B9%AA%E8%A3%BD\" aria-label=\"繪製動態路線   路徑繪製 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>繪製動態路線 - 路徑繪製</h2>\n<p>資料產生後，記得先放到 state 當中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pastData<span class=\"token punctuation\">,</span> currData<span class=\"token punctuation\">,</span> fcstData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./parsedWeatherData.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//...</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      worlddata<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      typhoonPath<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>pastData<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>currData<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>fcstData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"201701\"</span><span class=\"token punctuation\">,</span> coordinates<span class=\"token operator\">:</span> pastData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>coordinates <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>順便加上一個 marker，用來代表颱風本體，以路徑圖的第一個位置為其座標起始點。</p>\n<p>接著我們另外寫一個 <code class=\"language-text\">renderLine()</code> function 來處理路徑繪製的部分，因為待會還會需要加上動畫效果，會複雜一些：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrenderline\"><pre class=\"language-jsrenderline\"><code class=\"language-jsrenderline\">renderLine() {\n    // 座標映射\n    const pathCoordinates = [];\n    this.state.typhoonPath.forEach((path, i) =&gt; {\n      pathCoordinates.push({\n        x: this.projection()(path.coordinates)[0],\n        y: this.projection()(path.coordinates)[1]\n      });\n    });\n    \n    // 線段繪製函數\n    const lineFunction = d3Line()\n      .x((d) =&gt; d.x)\n      .y((d) =&gt; d.y)\n      .curve(curveCatmullRom);\n\n    // 增加 svg 元素\n    // add path\n    d3Select(&#39;svg&#39;)\n      .append(&#39;g&#39;)\n      .append(&#39;path&#39;)\n      .attr(&#39;class&#39;, &#39;typhoonPath&#39;)\n      .attr(&#39;d&#39;, lineFunction(pathCoordinates))\n      .attr(&#39;fill&#39;, &#39;none&#39;)\n      .attr(&#39;stroke&#39;, &#39;red&#39;)\n      .attr(&#39;stroke-width&#39;, &#39;5px&#39;);\n\n    // add marker\n    d3Select(&#39;svg&#39;)\n      .append(&#39;g&#39;)\n      .append(&#39;circle&#39;)\n        .attr(&quot;transform&quot;, () =&gt; {\n            const x = this.projection()(this.state.marker.coordinates)[0]\n            const y = this.projection()(this.state.marker.coordinates)[1]\n            return `translate(${x}, ${y})`;\n        })\n        .attr(&#39;r&#39;, 10)\n        .attr(&#39;fill&#39;, &#39;yellow&#39;)\n        .attr(&#39;opacity&#39;, 0.7)\n        .attr(&#39;class&#39;, &#39;typhoonMarker&#39;);\n\n    const linePath = d3SelectAll(&#39;path.typhoonPath&#39;);\n    \n  }</code></pre></div>\n<p>繪製路線的 <code class=\"language-text\">renderLine()</code> 可以拆成三部分來說明：</p>\n<ol>\n<li>座標映射：\n由於我們自己 parse 的路徑資料並非 TopoJSON，而且還區分成不同時間的資料，所以我們先個別將路徑映射好座標點，再串接到一個 Array 中，方便後續繪製。\n我們先前提到的 <code class=\"language-text\">projection()</code> 非常好用，只要傳入一個含有 x, y 經緯度的物件，就能幫我們在設定的 scale 中映射出對應位置：<code class=\"language-text\">this.projection()(path.coordinates)</code>，會回還一個 Array，分別為經度和緯度。</li>\n<li>線段繪製函數：\n在 D3.js 中，attribute 可以傳入 function，這邊我們利用 <code class=\"language-text\">d3-shape</code> 中的 <code class=\"language-text\">line</code>（ code 裡面的 d3Line 是我 import 後的變數名稱)來幫忙將映射後的座標 x, y 轉換成 svg path 的 d value。\n其中 <code class=\"language-text\">curve</code> 是 <code class=\"language-text\">d3-shape.line</code> 的補間函數，簡單來說就是決定線段中，每個 <strong>點</strong> 與 <strong>點</strong> 之間該怎麼 <strong>連接</strong>，看過這個對照應該會比較能了解：\n<a href=\"https://bl.ocks.org/d3noob/ced1b9b18bd8192d2c898884033b5529\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v4 curve interpolation comparison</a>\n<img src=\"/image/linecurve-comparsion.png\" alt=\"curve interpolation comparison\"></li>\n<li>增加 svg 元素：\n這就是最基本的步驟囉，<code class=\"language-text\">d3-select</code> 出 svg 後，再 append 上我們要的 line path 與 marker，有寫過 D3.js 的勢必不陌生。</li>\n</ol>\n<p>在 <code class=\"language-text\">componentDidMount()</code> 的地方加上 <code class=\"language-text\">renderLine()</code> 函數，就可以看到如下結果：</p>\n<iframe src=\"https://codesandbox.io/embed/ERPYl4q94?hidenavigation=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"繪製動態路線---加上動態路徑效果\" style=\"position:relative;\"><a href=\"#%E7%B9%AA%E8%A3%BD%E5%8B%95%E6%85%8B%E8%B7%AF%E7%B7%9A---%E5%8A%A0%E4%B8%8A%E5%8B%95%E6%85%8B%E8%B7%AF%E5%BE%91%E6%95%88%E6%9E%9C\" aria-label=\"繪製動態路線   加上動態路徑效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>繪製動態路線 - 加上動態路徑效果</h2>\n<p>接著我們要讓這個路徑 <strong>活起來</strong>！</p>\n<p>要讓 svg 線段有動畫般的效果其實很簡單，利用 svg 的 <code class=\"language-text\">stroke-dasharray</code> 這個屬性即可，詳細的實作原理可以看 css-tricks 上的這篇文章 <a href=\"https://css-tricks.com/svg-line-animation-works/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How SVG Line Animation Works</a>，解釋的非常清楚，只是裡面說的做法是透過 CSS 的 animation，跟我們這邊有些微差異，但是原理是相同的。</p>\n<span style=\"color: red\">\n重點就在於，將原始的 **直線** 轉換為 **虛線**，透過改變該虛線的 **dasharray** 區間，來做出動態的效果。\n</span>\n<p>stroke-dasharray 的參數是 ( dash 的長度, gap 的長度 ))，我們只要固定 gap 的長度為線段長，然後讓 dash 的長度從零慢慢轉換成線段長即可達到動畫效果！</p>\n<p>所以我們加上一個 <code class=\"language-text\">transition</code> 函數：</p>\n<div class=\"gatsby-highlight\" data-language=\"jstransition\"><pre class=\"language-jstransition\"><code class=\"language-jstransition\">transition(linePath) {\n    const self = this;\n    linePath.transition()\n      .duration(15000)\n      .attrTween(&quot;stroke-dasharray&quot;, this.translateFn.bind(this, linePath))\n      .on(&#39;end&#39;, () =&gt; {\n        setTimeout(() =&gt; {\n           d3Select(this).call(self.transition.bind(self, linePath)); // infinite loop\n        }, 1500);\n      });\n}</code></pre></div>\n<p><code class=\"language-text\">linePath</code> 是 <code class=\"language-text\">d3-select</code> 到的路徑 path 元件。透過 <code class=\"language-text\">transition()</code> 與 <code class=\"language-text\">attrTween()</code> 來動態調整 <code class=\"language-text\">stroke-dasharray</code> 的值，並且在最後監聽一個 <code class=\"language-text\">end</code> 事件，也就是當每次動畫結束以後，我們隔個 1.5 秒再重新呼叫一次 <code class=\"language-text\">transition()</code>，進行 loop。</p>\n<p><strong>[Note]</strong>\n這邊要注意的是，<code class=\"language-text\">linePath</code> 雖然是透過 <code class=\"language-text\">d3-select</code> 取得的元件，要呼叫他的 <code class=\"language-text\">transition()</code> 函式的話，會需要額外加入 <code class=\"language-text\">d3-transition</code> 的 lib 才行，他會將 <code class=\"language-text\">transition</code> bind 到元件中：\n<code class=\"language-text\">import { transition as d3Transition } from 'd3-transition';</code></p>\n<p><code class=\"language-text\">attrTween</code> 會將 <code class=\"language-text\">transition</code> 過程中的<strong>時間</strong>當作參數丟進去給它的 <strong>value</strong>，而該 <strong>value</strong> 扮演著處理 <strong>補間動畫</strong> 的角色，是一個 input 為時間的補間函式，我們這邊執行一個<code class=\"language-text\">translateFn()</code>，用來處理我們補間動畫過程中需要做的事情，以及定義補間動畫函式的內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"jstranslatefn\"><pre class=\"language-jstranslatefn\"><code class=\"language-jstranslatefn\">translateFn(linePath) {\n    const self = this;\n    // 回傳 input 為 time 的補間函式\n    return (t) =&gt; {\n        const l = linePath.node().getTotalLength();\n        const p = linePath.node().getPointAtLength(t * l);\n        const marker = d3Select(&#39;.typhoonMarker&#39;);\n        marker.attr(&quot;transform&quot;, `translate(${p.x}, ${p.y})`);\n        marker.style(&quot;transition&quot;, &#39;r 1.5s&#39;);\n        marker.attr(&quot;r&quot;, 10);\n        const interpolate = d3Interpolate(`0,${l}`, `${l},${l}`);\n\n        return interpolate(t);\n    }\n}</code></pre></div>\n<p>如同先前提到的，我們要改變 <code class=\"language-text\">stroke-dasharray</code> 的區間，也就是要讓第一個參數，dash 的長度遞增為線段長，線段長度可以從 <code class=\"language-text\">linePath.node().getTotalLength()</code> 取得，透過 <code class=\"language-text\">d3-interpolate</code> 幫助我們產生一個補間函式 <code class=\"language-text\">interpolate(t)</code>，補完 <code class=\"language-text\">0, 線段長</code> -> <code class=\"language-text\">線段長, 線段長</code> 這段參數的變化，並且回傳出去給 <code class=\"language-text\">attrTween</code>。</p>\n<p><code class=\"language-text\">d3</code> 的文件都顯得蠻詳細的，<a href=\"https://github.com/d3/d3-interpolate#interpolate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-interpolate</a> 這邊有說明不同的 input type 會採用不同的補間函式來處理，例如字串、時間、數字等等。</p>\n<p>加上了這個 <code class=\"language-text\">tranlsateFn</code> 後，線段就活起來了！</p>\n<iframe src=\"https://codesandbox.io/embed/Q1KBD2WLZ?hidenavigation=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>在剛剛的 <code class=\"language-text\">translateFn</code> 中我們其實還做了一件事情，就是讓 Marker 跟著線段移動，透過 <code class=\"language-text\">const p = linePath.node().getPointAtLength(t * l);</code> 取得線段在該時間的 point 位置，並 transform 過去。</p>\n<p>但這樣還不夠，既然是想要有颱風路徑的效果，怎麼可以缺少了暴風半徑的資訊呢？</p>\n<p>記得我們原本 parse 出來的資料中有個 <code class=\"language-text\">radius</code> 的值嗎？我們可以在 <code class=\"language-text\">translateFn</code> 中抓出目前資料的半徑值，然後放到 marker 的 <code class=\"language-text\">r</code> attribute 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>typhoonPath<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> pixelLocSource <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>pixelLocSource<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">distanceCalculate</span><span class=\"token punctuation\">(</span>pixelLocSource<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          marker<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但這邊還有個小問題，資料中，半徑的單位是 km，我要怎麼讓它轉換成 svg 中的距離呢？！我們之前的投影函式 <code class=\"language-text\">projection()</code> 只能接受座標參數，沒辦法直接轉換距離啊！</p>\n<p>別慌張，那我們就先計算出中心點到這段半徑後的座標，在轉換成地圖上的點，接著利用國高中數學計算出距離即可！</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdistancecalculate\"><pre class=\"language-jsdistancecalculate\"><code class=\"language-jsdistancecalculate\">distanceCalculate(pixelLocSource, [longitude, latitude], distance){\t\n    // Latitude: 1 deg = 110.574 km\n    // Longitude: 1 deg = 111.320*cos(latitude) km\n    const lat_diff = distance / 110.574;\n    const lon_distance = 111.320 * Math.cos(latitude * Math.PI / 180);\n    const lon_diff = distance / lon_distance;\n  \n    const E = longitude + Math.abs(lon_diff);\n    const pixelLoc = this.projection()([E, latitude]);\n    // distance calculate\n    return Math.sqrt(Math.pow(pixelLocSource[0] - pixelLoc[0], 2) + Math.pow(pixelLocSource[1] - pixelLoc[1], 2));\n}</code></pre></div>\n<p>取巧的點是，利用已知的經緯度距離來做運算：\nLatitude: 1 deg = 110.574 km\nLongitude: 1 deg = 111.320*cos(latitude) km</p>\n<p><code class=\"language-text\">pixelLocSource</code> 是映射過後的中心點位置，<code class=\"language-text\">[longitude, latitude]</code> 則是中心點的原始經緯度，而 <code class=\"language-text\">distance</code> 就是我們要算的暴風半徑。\n由於我們並不需要算出真正半徑內每個點的經緯度，所以這邊我只抓該緯度上的精度來做投影計算，找出該半徑後的精度，再套用普通的兩點距離公式。</p>\n<p>（其實這是我想出來比較暴力的解法啦，歡迎知道有更簡單更好的方式映射距離的朋友告知我！非常感謝）</p>\n<p>最後的成果（將 scale 調大比較看得出來半徑變化）：</p>\n<iframe src=\"https://codesandbox.io/embed/Xo0gjl6qA?hidenavigation=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>結論：</p>\n<p>要讓路徑在地圖上動起來並不困難，而且透過 D3.js 的補間函式也能讓你在補間過程中偷做許多手腳，像是我最一開始的範例中還有多判斷資料的時間，針對不同時間留下颱風半徑範圍圖等等。\n本篇的重點在於如何單純透過 D3.js v4 與 svg 的操作來製作出地圖上的動態線段，其他像是基本的經緯度線段 (graticule) 礙於篇幅關係就不細談，相信大家可以從我最一開始的範例中看出是如何製作的。希望本文能對想用 svg 繪製動態路線圖的讀者有所幫助，若文中有任何錯誤也歡迎指正！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://www.naturalearthdata.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Natural Earth</a></li>\n<li><a href=\"ttps://github.com/topojson\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">topojson</a></li>\n<li><a href=\"https://css-tricks.com/svg-line-animation-works/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How SVG Line Animation Works</a></li>\n<li><a href=\"https://www.dashingd3js.com/svg-paths-and-d3js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SVG Paths and D3.js</a></li>\n<li><a href=\"http://andyshora.com/tweening-shapes-paths-d3-js.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TWEENING CUSTOM SHAPES AND PATHS IN D3.JS</a></li>\n<li><a href=\"http://www.oxxostudio.tw/articles/201411/svg-d3-02-line.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SVG D3.js - 繪製線段</a></li>\n<li><a href=\"https://bl.ocks.org/dimitardanailov/6f0a451d4457b9fa7bf6e0dddcd0f468\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3.js Path Data Generator Line Example</a></li>\n<li><a href=\"https://bl.ocks.org/d3noob/ced1b9b18bd8192d2c898884033b5529\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v4 curve interpolation comparison</a></li>\n</ol>","id":"34f3bc2e-5a9a-5c0a-b97b-285e2ed9597d","fields":{"slug":"d-3-workshop-map"},"frontmatter":{"date":"2017-07-21T00:25:01.000Z","title":"D3v4 工作坊 - React + D3 繪製 svg 動態路線地圖","tags":["d3","react","svg","d3v4","data visualization"],"type":"tech","slug":"d3-workshop-map"},"timeToRead":14},{"excerpt":"時間總是不夠用？聽過番茄工作法嗎？\n專注力總是不夠？聽過番茄工作法嗎？\n感冒白飯吃不下？聽過蕃茄蛋炒飯嗎？","html":"<blockquote>\n<p>時間總是不夠用？聽過番茄工作法嗎？\n專注力總是不夠？聽過番茄工作法嗎？\n感冒白飯吃不下？聽過蕃茄蛋炒飯嗎？</p>\n</blockquote>\n<!-- more -->\n<p><strong>The Pomodoro Technique</strong> 是一個簡易又廣為人知的時間管理方法，其主軸在於將工作時段切割成多個<strong>蕃茄時間</strong>，每個蕃茄時間包含：</p>\n<ol>\n<li>25 分鐘的執行時間</li>\n<li>5 分鐘的休息時間</li>\n</ol>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">蕃茄工作法 wiki</a>\n詳細內容不管是網路上，或是書籍都有許多描述，有興趣深入了解的可以去看看。</p>\n<p>今天重點不在番茄工作法。</p>\n<p>重點在，番茄工作法中不可或缺的工具 - 計時器！</p>\n<p>我用過幾款 Chrome extension 的計時器，但剩餘時間都是用數字來顯示，而我想要的是用圖像的方式來呈現，這樣我的大腦可以省略掉辨識數字的時間（是會花你多少時間... XD），也因為沒有了數字，不知道確切剩餘時間，不會看剩一分鐘就因為緊張而分心（至少對我而言啦~）。</p>\n<p>所謂圖像的呈現方式就像下面的成品，輸入完你想要的倒數時間後，按下enter，就會看到倒數的區塊以及倒數秒數。</p>\n<p data-height=\"322\" data-theme-id=\"dark\" data-slug-hash=\"RGJOov\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/RGJOov/\">Timer-d3-v4</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n[Inspired by @ericbullington](https://www.ericbullington.com/blog/2012/10/27/d3-oclock/)\n<p>一開始本來想說看能不能直接用 html、css 把圖畫出來，但要計算弧度畫出扇型感覺有點麻煩，好在我們有 D3.js 這個方便的工具！除了拿來資料視覺化外，d3.js 提供的許多 lib 都很適合拿來單純作畫。並且，實作計時器的難度並不高，非常適合初學者來學習 D3.js，又比畫出長條圖等來得有成就感！</p>\n<p>因此，今天就來說明如何利用 D3.js 來繪製 Time timer！並在最後解釋一點 D3 data join 的概念。</p>\n<h2 id=\"make-a-plan--prepare-your-data\" style=\"position:relative;\"><a href=\"#make-a-plan--prepare-your-data\" aria-label=\"make a plan  prepare your data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Make a plan &#x26; Prepare your data</h2>\n<p>在打開你的編輯器開始 coding 之前，讓我們先停下來想一下，繪製計時器你大概會需要哪些東西。</p>\n<ol>\n<li>你需要一個圓圈代表時鐘。</li>\n<li>你需要一個秒針，讓你知道時間不斷在跑。</li>\n<li>你需要一個會隨著時間流逝而縮小面積的扇行區塊。</li>\n<li>你需要一個輸入筐，讓使用者輸入想要倒數的時間。</li>\n</ol>\n<p>先不管圓圈、秒針與扇形該怎麼畫，D3.js 比較不一樣的地方在於它是 data-driven，所以我們需要先把資料給準備好，而繪製計時器所需要的資料就是<strong>時間</strong>。</p>\n<p>在我們的 case 裡面，<strong>時間</strong>是使用者輸入的數字，我們要將其 parse 為適合的資料格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">minutes<span class=\"token punctuation\">,</span> sec</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"unit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"numeric\"</span><span class=\"token operator\">:</span> sec\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"unit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"numeric\"</span><span class=\"token operator\">:</span> minutes\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此外，一般繪製 D3.js 都是一次性的，也就是讀入資料後，根據該次讀入的資料繪製圖形。我們需要的則是類似 streaming data 的行為，不間斷的傳入目前時間，讓 D3 幫我們繪製出對應的圖形。作法有很多種，這邊採用最簡單的做法：<code class=\"language-text\">setInterval</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startTimer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Main program</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>valueAsNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> timeAsSec <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>valueAsNumber <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      data <span class=\"token operator\">=</span> <span class=\"token function\">timeData</span><span class=\"token punctuation\">(</span>timeAsSec <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sec <span class=\"token operator\">=</span> sec <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      timeAsSec <span class=\"token operator\">=</span> timeAsSec <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// render() 為繪製 d3 的函式</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeAsSec <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> timeInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimeInput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> startTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">startTimer</code> 是綁定在 input field 的 EventListener，我們根據使用者輸入的數字乘上 60 轉換為需要執行的總秒數(<code class=\"language-text\">timeAsSec</code>)。目的是為了能夠適時（倒數結束）的跳出 <code class=\"language-text\">setInterval()</code>。</p>\n<p>在 <code class=\"language-text\">setInterval()</code> 中，我們每秒執行一次，遞減 <code class=\"language-text\">timeAsSec</code>，同時遞增 <code class=\"language-text\">sec</code> 用以讓秒針轉動。</p>\n<p>將 <code class=\"language-text\">timeAsSec</code> 與 <code class=\"language-text\">sec</code> 傳入剛剛的 <code class=\"language-text\">timeData()</code> 產生 D3 需要的資料格式。這邊我們直接將 <code class=\"language-text\">timeAsSec</code> 除以 60，結果會是分數，因此我們的分鐘區塊會隨著秒數的增加而順順的減少，若你想要有明顯跳動，可以轉為整數後再丟入 <code class=\"language-text\">timeData</code>（轉為整數的話，只有每 60 秒數值會變動一次，才看得到差別）。</p>\n<p>總結一下整個流程：</p>\n<p>每秒執行一次，從 <code class=\"language-text\">timeData</code> 中產生新的資料傳入 <code class=\"language-text\">render()</code> 去繪製圖形，直到 <code class=\"language-text\">timeAsSec</code> 遞減為零。</p>\n<h2 id=\"render-setting\" style=\"position:relative;\"><a href=\"#render-setting\" aria-label=\"render setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render Setting</h2>\n<p>資料都設定好後，接著準備繪製圖形。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// value setting</span>\n<span class=\"token keyword\">let</span> width <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> offSetX <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> offSetY <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pi <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> scaleSecs <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">999</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scaleMins <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">59</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vis <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".chart\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:svg\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> clockGroup <span class=\"token operator\">=</span> vis<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:g\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"translate(\"</span> <span class=\"token operator\">+</span> offSetX <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> offSetY <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:circle\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clock outercircle\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:circle\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clock innercircle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">line 2 ~ line 6</code> 先定義一些常數，這邊就隨意設定。</p>\n<!-- 講解 d3 scale -->\n<p><code class=\"language-text\">line 8 ~ line 9</code> 設定 <code class=\"language-text\">Mins</code> 與 <code class=\"language-text\">Secs</code> 的 scale。scale 是什麼？基本上你可以把 scale 想像成是能夠幫你把 <strong>資料映射</strong> 到適合你想繪製圖形的維度上 的一種方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> scaleSecs <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">999</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> scaleMins <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span> <span class=\"token operator\">+</span> <span class=\"token number\">59</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> pi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">domain</code> 與 <code class=\"language-text\">range</code> 來分別給予 <strong>資料的輸入範圍</strong> 以及 <strong>資料的輸出範圍</strong>，以今天的 case 來說，我們要將時間資料轉化為圓形的角度，因此給予 <code class=\"language-text\">domain</code> 的輸入範圍為 0 ~ 59。</p>\n<p><code class=\"language-text\">range</code> 負責輸出的範圍，我們要在圓形的時鐘上顯示，因此是 0 ~ 2 * pi。</p>\n<p>到這邊你可能會想，degree 0 跟 degree 360 不是一樣嗎？這樣 0 秒跟 59 秒會映射到同一個點？</p>\n<p>好問題！所以先前的 seconds 與 minutes 基本上可以共用，但如果想要區別 0 秒與 59 秒，我們需要把範圍多加上小數點的範圍，以分鐘來說，分成 60 等份，因此就是 [0, 59 + 59/60]，秒則是分為 1000 毫秒，也就是 [0, 59 + 999/1000]。</p>\n<p><code class=\"language-text\">line 11 ~ line 14</code> 由於 d3 的 method 是 Chainable 的，因此可利用 <code class=\"language-text\">d3.selectAll()</code> 選取你想要 mount 上去的 DOM 元素，並接著 append 上 <code class=\"language-text\">svg</code> 元素，以及設定 <code class=\"language-text\">width</code> 與 <code class=\"language-text\">height</code> 的屬性值。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> vis <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".chart\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:svg\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">line 16 ~ line 28</code> 採用同樣方式，在 <code class=\"language-text\">vis</code> 這個 svg 元素下，再 append 上一個 svg group，並加入兩個 circle。</p>\n<p>第一個 circle 是時鐘的外圍，第二個 circle 作為時鐘中心點。</p>\n<h2 id=\"render-timer\" style=\"position:relative;\"><a href=\"#render-timer\" aria-label=\"render timer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render Timer</h2>\n<p>終於可以開始畫圖！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render clock</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">let</span> minuteArc<span class=\"token punctuation\">,</span> secondArc<span class=\"token punctuation\">;</span>\n\n  clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  secondArc <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">innerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">outerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">scaleSecs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>numeric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">endAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">scaleSecs</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>numeric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  minuteArc <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">innerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">outerRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">endAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">scaleMins</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>numeric<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:path\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">secondArc</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">minuteArc</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"clockhand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"seconds\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">\"minutes\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">line 8 ~ line 26</code> 定義了兩個 method: secondArc 和 minuteArc，分別用來將傳入的資料依據其所設定的 <code class=\"language-text\">innerRadius</code> 、 <code class=\"language-text\">outerRadius</code> 、 <code class=\"language-text\">startAngle</code> 與 <code class=\"language-text\">endAngle</code> 來繪製成弧形。 <code class=\"language-text\">d3.arc()</code> 在 d3 v4 中屬於 <a href=\"https://github.com/d3/d3-shape\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-shape</a> 的一環。</p>\n<p><img src=\"/image/d3-arc.png\" alt=\"d3-arc\"></p>\n<p>在 <code class=\"language-text\">endAngle()</code> 中，我們將接收到的參數（也就是傳入的資料）放入我們先前定義好的 <code class=\"language-text\">scaleSecs()</code> 與 <code class=\"language-text\">scaleMins()</code> 中，讓 <code class=\"language-text\">d3.arc()</code> 能接收到我們映射過後的值，進而繪出正確的 scale。</p>\n<p>我們讓秒針的 startAngle 與 endAngle 設定為一樣，以呈現 針 的狀態。而 分鐘區塊 則讓其 startAngle 固定為 0，只在 endAngle 中傳入每次更新的時間，如此一來，每次時間更新時，區塊會隨之改變大小！</p>\n<p>此外，這邊的innerRadius 都設為 0，讓其等同於圓中心，才能產生扇形。</p>\n<p><code class=\"language-text\">line 28 ~ line 56</code> ： 還記得最一開始我們有將最外層的 svg 指定給變數 clockGroup 嗎？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> clockGroup <span class=\"token operator\">=</span> vis<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:g\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"translate(\"</span> <span class=\"token operator\">+</span> offSetX <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> offSetY <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">.</span>\n\n  clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svg:path\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在最後一段裡面，利用 <code class=\"language-text\">clockGroup.selectAll(\".clockhand\")</code> 我們把資料 import 到擁有 <code class=\"language-text\">.clockhand</code> 這個 classname 的 <code class=\"language-text\">svg:path</code> 底下，透過設置 <code class=\"language-text\">svg:path</code> 的 attribute <code class=\"language-text\">d</code>來繪製 秒針 與 分鍾區塊。利用先前提到的 <code class=\"language-text\">secondArc()</code> 與 <code class=\"language-text\">minuteArc()</code> ）。</p>\n<p><code class=\"language-text\">attr()</code> 函式可以接受 <code class=\"language-text\">callback</code>，所以我們可以根據資料的不同來設定不同的 style，讓秒針與分鍾區塊做個分別。</p>\n<p>不知道大家看到這邊有沒有覺得奇怪，從最一開始到現在從來沒有設置過 <code class=\"language-text\">.clockhand</code> 這個 class 的 DOM 元素，為什麼我們這邊可以直接 <code class=\"language-text\">selectAll</code> 還塞入資料並 append svg 呢？</p>\n<p>原因是在於，d3 的 <code class=\"language-text\">selectAll()</code>, <code class=\"language-text\">select()</code> 如果找不到所指定的元素時，會回傳一個空的 NodeList，所以我們可以拿這個空 NodeList 去進行操作。但要記得在你 append 上去的 DOM 元素中加上你想指定的 classname，否則每次執行這個函數的時候，他就會重新 create 一個空的 NodeList。</p>\n<p>這會造成什麼問題呢？以我們這邊實作的例子來說，在我們的 <code class=\"language-text\">render()</code> 一開始的地方，我們有個</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">clockGroup<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".clockhand\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這個 <code class=\"language-text\">remove()</code> 的動作會在我們每次執行 <code class=\"language-text\">render()</code> 的時候（也就是 setInterval 每次執行時）幫我們把原先的 <code class=\"language-text\">.cockhand</code> DOM 拿掉，重新繪製正確的 秒針 與 分鐘區塊。</p>\n<p>若我們在 append <code class=\"language-text\">svg:path</code> 的時候設定他的 <code class=\"language-text\">attr</code> 為 <code class=\"language-text\">clockhand</code>，則會造成這邊抓不到 <code class=\"language-text\">.clockhand</code> 而無法移除原有的 DOM（秒針與分鐘區塊）。</p>\n<p>像是這樣：</p>\n<p><img src=\"/image/timer-wrong.png\" alt=\"Wrong classname timer\" title=\"Wrong classname timer\"></p>\n<p>因此記得要加上對應的 class name。</p>\n<p>另外一個要注意的部分是，<code class=\"language-text\">clockGroup.selectAll(\".clockhand\").remove();</code> 他雖然會移除掉 DOM 元素，但是 <code class=\"language-text\">clockGroup.selectAll(\".clockhand\")</code> 還是會留存有對原本該 DOM 元素的 reference，有可能會造成 memory leak，若想避免記得額外處理這部分。</p>\n<h2 id=\"小總結-與-附錄\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B8%BD%E7%B5%90-%E8%88%87-%E9%99%84%E9%8C%84\" aria-label=\"小總結 與 附錄 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小總結 與 附錄</h2>\n<p>到這邊為止我們就已經實作出一個簡易的 Timer，希望能讓大家對 d3 繪圖有一點概念，至於再進階一點的，像是互動與動畫的部分，時間實在不多，只能下次再努力找個範例來寫寫。</p>\n<h3 id=\"data-join\" style=\"position:relative;\"><a href=\"#data-join\" aria-label=\"data join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data join</h3>\n<p>不過我想稍微介紹一點關於 D3 裡面很重要的 Data join，對之後實作更複雜的圖形時有絕對幫助。</p>\n<p>先給點資源：</p>\n<p>D3 作者關於 data join 的說明（必看）：\n<a href=\"https://bost.ocks.org/mike/join/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thinking with joins</a></p>\n<p>UNC 的 data join 視覺化教學（也是必看, 上面那篇太長看不下去直接看這邊可以秒懂）：\n<a href=\"https://ils.unc.edu/~gotz/D3joins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dat joins in D3.js</a></p>\n<p>在我們先前的範例裡面，有用到 <code class=\"language-text\">clockGroup.selectAll(\".clockhand\").data().enter()</code>，意思是將資料跟 DOM 連接，並將進入 <code class=\"language-text\">enter</code> 選取狀態 的資料傳遞到後面的 method （像是 <code class=\"language-text\">attr()</code>）中。</p>\n<p>嗯？！ <code class=\"language-text\">enter()</code> 不是指把資料 enter (輸入) 進去的意思喔！</p>\n<p>是，也不是。</p>\n<p><img src=\"/image/d3-join.png\" alt=\"Data joins\" title=\"d3 data join\"></p>\n<p>在 D3 中，資料在繫結到 DOM 上時，會分別進入三種選取狀態：enter, update 與 exit。</p>\n<p><span style=\"font-size: 14px;color: gray;\">[Note] selection 代表的是 <code class=\"language-text\">selectAll()</code> 或 <code class=\"language-text\">select()</code> 所選取到的 d3 node object。</span></p>\n<p><strong>update selection</strong>: 當你 selection 中的資料與新的 <code class=\"language-text\">.data()</code>傳遞進來的資料有重疊時，新的資料會進入 update selection 狀態，可以進行資料更新。</p>\n<p><strong>exit selection</strong>: 當你原本 selection 中的資料與新的資料沒有匹配時，那些舊有的資料會進入 exit selection 狀態，可以透過呼叫 <code class=\"language-text\">.exit().remove()</code> 將之從 selection 中移除。</p>\n<p><strong>enter selection</strong>: 與 update 相反，在原本 selection 中找不到對應的新資料就會進入 enter selection。</p>\n<p>所以，當你想要在原本的圖形內更新資料時，可以直接呼叫 <code class=\"language-text\">selectAll('.oldData').data(newData)</code>，該進入 update 狀態的資料就會取代掉舊的，接著再呼叫 <code class=\"language-text\">selectAll().exit().remove()</code> 移除掉其他不再 newData 內的資料，最後呼叫 <code class=\"language-text\">selectAll().enter().append()</code> 來把不在舊資料中，但在 newData 中的資料新增上去。</p>\n<p>強力推薦搭配參考 <a href=\"https://ils.unc.edu/~gotz/D3joins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dat joins in D3.js</a>，裡面的範例非常清楚，有機會我會翻成中文版的。</p>\n<p>了解資料在 d3 中的狀態後，對於後續設計互動效果與資料更新等等的操作會更得心應手！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://bost.ocks.org/mike/join/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thinking with joins</a></li>\n<li><a href=\"https://ils.unc.edu/~gotz/D3joins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dat joins in D3.js</a></li>\n<li><a href=\"https://www.ericbullington.com/blog/2012/10/27/d3-oclock/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-oclock</a></li>\n</ol>","id":"0a06a98b-c2dd-5158-bd92-10df3be6ef0b","fields":{"slug":"timer-d-3-v-4"},"frontmatter":{"date":"2016-10-15T17:49:38.000Z","title":"詳解簡易 Timer 來學習 D3","tags":["d3","d3v4","javascript","data visualization"],"type":"tech","slug":"timer-d3-v4"},"timeToRead":11},{"excerpt":"（最近的辦公室日常...）\n\"欸欸欸！ 有乾爹撒花！！\"\n\"有傑尼龜！\"\n\"Gotcha!! 偉哉乾爹！感恩乾爹！\"","html":"<blockquote>\n<p>（最近的辦公室日常...）\n\"欸欸欸！ 有乾爹撒花！！\"\n\"有傑尼龜！\"\n\"Gotcha!! 偉哉乾爹！感恩乾爹！\"</p>\n</blockquote>\n<!-- more -->\n<p>自從 Pokemon Go 在台灣可以玩後，勾起了我許多兒時回憶，因此除了跟著大家一起抓神奇寶貝以外（對我就是不想講寶可夢啊啊啊），我也稍微去追了一下最新版的神奇寶貝動畫，似乎是在打什麼卡洛斯聯盟，也出現了好奇怪的 Mega 進化，會讓神奇寶貝在戰鬥中轉屬性...</p>\n<p>咳咳，等等，再講下去這整篇都是神奇寶貝了...</p>\n<p>總之，看到會轉屬性這件事情就讓我想到，我小時候從來都沒有認真研究過哪種屬性剋哪種屬性，只知道基本的水剋火之類的，於是乎決定來好好研究一下，順便練習已經出來一陣子的 D3 v4，看看差異性在哪。</p>\n<p>幸運的是，當我在搜尋 Pokemon 的 API 時，發現 <a href=\"http://filipekiss.github.io/pokemon-type-chart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://filipekiss.github.io/pokemon-type-chart/</a> 這個人已經把我想做的做完了 XD 也做得不錯。不過是兩三年前的專案，用的是 D3 v3。雖然點子已經被做完了，但臨摹也是一種學習，所以我們就來把它 Migrate 到 D3 v4，順便看看有哪些值得注意的地方吧！</p>\n<p>想直接看 code 的在這邊... <a href=\"http://bl.ocks.org/arvinh/b30ed888914a2794830ceb023c911a5b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span style=\"color: #c40522;\">成果 與 程式碼</span></a></p>\n<h2 id=\"介紹\" style=\"position:relative;\"><a href=\"#%E4%BB%8B%E7%B4%B9\" aria-label=\"介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>介紹</h2>\n<img src=\"/image/pokemontype.png\" alt=\"pokemon type\" style=\"width: 500px;\"/>\n<p>這張圖乍看之下我原本以為是修改自 Chord Diagram，但其實是來自於 Cluster。想想也對，屬性間的關係的確類似於階層樹狀，也不需要有比例分佈對應。\n( 從程式碼看來，原作者應該是修改自 <a href=\"https://bl.ocks.org/mbostock/7607999\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bl.ocks.org/mbostock/7607999</a> )</p>\n<p>使用方法很簡單，只要點擊某個屬性，就會列出該屬性對哪些屬性較為強勢 (Strong)、弱勢 (Weak) 或是 免疫 (Immune)，同時點擊兩種屬性的話，就會秀出擁有雙重屬性的結果為何。</p>\n<h2 id=\"解析\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%9E%90\" aria-label=\"解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析</h2>\n<p>由於 D3 v4 的變動幅度很大，為了模組化，將很多 packages 都拆出來，替代以往使用 namespace 的方式，因此最單純的 Migration 方式就是直接重刻並設法 re-use 原來的 code。</p>\n<p>首先，基本的 <code class=\"language-text\">index.html</code> 內定義好圖要畫在哪裡，並加上一個 reset button 來還原圖表狀態：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>typeChart<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>graph<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button reset<span class=\"token punctuation\">\"</span></span><span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>reset<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接著，我們需要先定義 <code class=\"language-text\">layout</code>，這邊使用 Cluster Layout，在原本的 D3 v3 版本中，使用的方式為：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsv3.js\"><pre class=\"language-jsv3.js\"><code class=\"language-jsv3.js\">  var diameter = 750,\n      radius = diameter / 2,\n      innerRadius = radius - 120;\n  var cluster = d3.layout.cluster()\n      .size([360, innerRadius])\n      .sort(null)\n      .value(function(d) { return d.size; });</code></pre></div>\n<p>然而，v4 模組化後，原本的 namespace 都不需要了，因為實際上是個別存放在一個 lib 底下，以 Layout 來說 會放在 <code class=\"language-text\">d3-hierarchy</code>，而使用方式則變成直接呼叫 <code class=\"language-text\">d3.cluster()</code> 即可，原有的 <code class=\"language-text\">sort()</code>, <code class=\"language-text\">value()</code>等 method 也都移到 <code class=\"language-text\">node</code> 這個層級底下了（後面會在講到 node）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsv4.js\"><pre class=\"language-jsv4.js\"><code class=\"language-jsv4.js\">  // 定義圖形的基本設定值\n  var diameter = 750,\n      radius = diameter / 2,\n      innerRadius = radius - 120;\n\n  var cluster = d3.cluster()\n      .size([360, innerRadius]);</code></pre></div>\n<p>寫好圖形的基本設定值後，先把我們已知的 svg 放上去吧！\n我們先把剛剛定義好的 <code class=\"language-text\">diameter</code>, <code class=\"language-text\">radius</code> 的值 append 到最外層的 graph div 上，\n接著先把待會會用到的四種 svg group 先記錄起來，分別有 immune (免疫)、weak (弱勢)、strong (強勢)、node (屬性)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsweaknesses-graph.js\"><pre class=\"language-jsweaknesses-graph.js\"><code class=\"language-jsweaknesses-graph.js\">var svg = d3.select(&quot;#typeChart &gt; #graph&quot;).append(&quot;svg&quot;)\n    .attr(&quot;width&quot;, diameter)\n    .attr(&quot;height&quot;, diameter)\n    .append(&quot;g&quot;)\n    .attr(&quot;transform&quot;, &quot;translate(&quot; + radius + &quot;,&quot; + radius + &quot;)&quot;);\n\nvar immune = svg.append(&quot;g&quot;).selectAll(&quot;.immune&quot;),\n    weak = svg.append(&quot;g&quot;).selectAll(&quot;.weak&quot;),\n    strong = svg.append(&quot;g&quot;).selectAll(&quot;.strong&quot;),\n    node = svg.append(&quot;g&quot;).selectAll(&quot;.node&quot;);</code></pre></div>\n<p>我蠻喜歡這樣的寫法，將與資料繪製較無關（相對較固定）的程式碼先寫好，接著再利用 <code class=\"language-text\">d3.json</code> 將資料讀入後去繪製。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdraw-graph\"><pre class=\"language-jsdraw-graph\"><code class=\"language-jsdraw-graph\">d3.json(&quot;types.json&quot;, function(error, classes) {\n    var nodes = cluster(d3.hierarchy(packageHierarchy(classes))).children;\n    var immunes = typeImmune(nodes);\n    var strengths = typeStrong(nodes);\n    var weaknesses = typeWeak(nodes);\n\n    // draw path\n\n    ......\n    ....\n    ..\n\n    //Make the immune links\n    function typeImmune(nodes) {\n    var map = {},\n        immunes = [];\n\n    nodes.forEach(function(d) {\n        map[d.data.name] = d;\n    });\n\n    nodes.forEach(function(d) {\n        if (d.data.immunes) d.data.immunes.forEach(function(i) {\n            immunes.push({\n                source: map[d.data.name],\n                target: map[i]\n            });\n        });\n    });\n\n        return immunes;\n    }\n    // 以下先省略\n});</code></pre></div>\n<p>解釋一下上面這段程式碼，我們的資料存放在 types.json 中，利用 d3.json 將資料讀出後，\n會先做兩件事情：</p>\n<ol>\n<li>將資料轉化成 hierarchy 格式，並初始化 cluster</li>\n<li>將產生的 nodes 轉化並分類成 immunes, strengths, weaknesses。</li>\n</ol>\n<p>這邊的 <code class=\"language-text\">packageHierarchy</code> 主要是將 raw data 整理成有父子關係的 structure，並且給予每筆資料自己的 <code class=\"language-text\">key</code> 與 <code class=\"language-text\">name</code>。（詳細程式碼可以到最後的連結看，這部分比較跟資料格式相關，就不放在這裡佔版面了）</p>\n<p>在原本 v3 的做法裡，如果我們要把資料轉化成 hierarchy 的格式，可以直接利用 <code class=\"language-text\">cluster.nodes()</code> ，即可一次初始化 cluster 並且得到擁有 x, y 值 的 nodes，但在 v4 中，我們必須先利用 <code class=\"language-text\">d3.hierarchy()</code> 將資料轉化成 hierarchy 格式，建立好父子關係與每個 node 的深度，接著才能丟入 <code class=\"language-text\">cluster</code> 中初始，其回傳值才會是擁有對應 cluster 內 x, y 值的 nodes。</p>\n<p><code class=\"language-text\">window.nodes = cluster(d3.hierarchy(packageHierarchy(classes))).children;</code>\n(這邊取 children 也只是資料格式的關係)</p>\n<p>由於繪製 <code class=\"language-text\">svg path</code> 需要給訂 data 的 source 與 target，因此這邊利用 <code class=\"language-text\">typeImmune</code>, <code class=\"language-text\">typeStrong</code>, <code class=\"language-text\">typeWeak</code> 來作轉換，也將資料分為這三種關係的 path 來繪製。</p>\n<p>接著，轉換好後就能根據 node 的 <code class=\"language-text\">source</code> 與 <code class=\"language-text\">target</code> 繪製 path。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdraw-path\"><pre class=\"language-jsdraw-path\"><code class=\"language-jsdraw-path\">// 這邊只列出一種\nwindow.immune = immune\n        .data(immunes.map(function(node){\n            return node.source.path(node.target);\n        }))\n        .enter().append(&quot;path&quot;)\n        .each(function(d) {\n            d.source = d[0], d.target = d[d.length - 1];\n        })\n        .attr(&quot;class&quot;, &quot;immune&quot;)\n        .attr(&quot;d&quot;, line);</code></pre></div>\n<p>以往在 v3，我們可以事先定義 <code class=\"language-text\">var bundle = d3.layout.bundle();</code>，然後在上面這段程式碼中的 <code class=\"language-text\">data()</code> 中呼叫 <code class=\"language-text\">bundle(immunes)</code>，他就會幫我們把 source 跟 target 做連接。</p>\n<p>但是在 v4 裡，<code class=\"language-text\">bundle</code> 被 <code class=\"language-text\">node.path()</code> 給取代了。</p>\n<p>注意喔！是 <code class=\"language-text\">node.path()</code>，層級是在 node，因此我們要從剛才分類好的 immunes 中將 node 一個一個抓出來呼叫。</p>\n<p>另外在這邊我們有用一個 <code class=\"language-text\">each()</code> 來將每筆 node 資料都加上 <code class=\"language-text\">d.source = d[0], d.target = d[d.length - 1];</code>\n原因是為了之後我們點擊每個類別的時候，要利用這個來找出對應的點來上色。</p>\n<div class=\"gatsby-highlight\" data-language=\"jscolorpath.js\"><pre class=\"language-jscolorpath.js\"><code class=\"language-jscolorpath.js\">window.colorPath = function(d, l, type) {\n      var type = type || &#39;strong&#39;;\n      if (type == &#39;strong&#39;) {\n        if (l.target === d) return l.source.target = true;\n      }\n      if (type == &#39;weak&#39;) {\n        for (type in d) {\n          if(type !== &quot;size&quot;) {\n            if (l.target === d[type]) return l.source.target = true;\n          }\n        }\n      }\n    }</code></pre></div>\n<p>到目前為止，已經把原本 v3 的 cluster layout 轉移到 v4 了，其餘繪製部分就與版本沒有什麼關聯性，需要注意的是資料格式的變動，像是在原本作者的程式碼內，點擊類別的 <code class=\"language-text\">activate()</code> 函數中，根據 <code class=\"language-text\">d.name</code> 來判斷位置的部分，由於資料格式的變動，要改為 <code class=\"language-text\">d.data.name</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsactivate(d).js\"><pre class=\"language-jsactivate(d).js\"><code class=\"language-jsactivate(d).js\">    window.node\n        .classed(&quot;node--active&quot;, function(target) {\n            return (target === d) || this.classList.contains(&quot;node--active&quot;);\n        })\n        .classed(&quot;node--target&quot;, function(n) {\n            return n.target;\n        })\n        .classed(&quot;immune-node&quot;, function(target, l) {\n            return (this.classList.contains(&#39;immune-node&#39;) || target.data.immunes.indexOf(d.data.name) != -1);\n        })\n        ....\n        ...\n        ..</code></pre></div>\n<p>其餘繪製部分，包含點擊後的上色邏輯（ activate() 函數中），有興趣的讀者就直接看 code 吧，相信會更清楚！</p>\n<p><a href=\"http://bl.ocks.org/arvinh/b30ed888914a2794830ceb023c911a5b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span style=\"font-size: 20px; color: #c40522;\">成果 與 程式碼</span></a></p>\n<p>不過實際上我並沒有完整 Migration 完成，在原本 v3 的 <code class=\"language-text\">d3.svg.line.radial()</code> 這裡，v4 的寫法應該是 <code class=\"language-text\">d3.radialLine()</code>，並搭配上 <code class=\"language-text\">curve()</code> 函數，只是我並沒有嘗試成功，還請高手指教！</p>\n<p>最後，送給大家一隻純 CSS 卡比獸，祝大家早日成為神奇寶貝大師！\n（好啦其實不像XD...畢竟我對 css 的掌控度大概跟我對腰間肥肉的掌控度一樣低落...）</p>\n<p data-height=\"448\" data-theme-id=\"dark\" data-slug-hash=\"dXLvVm\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/dXLvVm/\">Snorlax-pokemon</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","id":"473e535d-2e0b-55bb-8fa9-08d856ed9c3a","fields":{"slug":"d-3-pokemon"},"frontmatter":{"date":"2016-08-19T20:26:11.000Z","title":"用 D3.js v4 看 Pokemon 屬性表","tags":["d3","pokemon","d3v4","data visualization"],"type":"tech","slug":"d3-pokemon"},"timeToRead":7}],"tagName":"data visualization","type":"tech"}},"staticQueryHashes":["2123680655"]}