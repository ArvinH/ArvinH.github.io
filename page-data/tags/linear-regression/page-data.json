{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/linear-regression","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：鈴木雅之　恋人","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/CZ95wRScgvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">鈴木雅之　恋人</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/CZ95wRScgvU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>約莫兩個月前，我利用 <a href=\"https://github.com/ITPNYU/p5-deeplearn-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">p5-deeplearn-js</a> 這套工具在 Chrome extension 中玩了一下機器學習的應用 (請參閱<a href=\"https://blog.techbridge.cc/2018/01/13/p5ML-deeplearnjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端也能玩 Deepleaning - 以 p5-deeplearn-js 為例</a>)，當時雖然有去看他們的 source code，但對於底層 deeplearnjs 的部分並沒有仔細去了解，畢竟還是要對 ML 有根本的了解，才能讀得懂。</p>\n<p>而隨著 Google 發布 <a href=\"https://developers.google.com/machine-learning/crash-course/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Machine Learning Crash Course</a>，再度讓我有了研究 deeplearn.js 的念頭，但萬事起頭難，一開始不能太勉強自己，所以本文就先從最簡單的 linear regression 實作開始，來熟悉一下基本操作！</p>\n<p>照慣例先來張 Demo 成果圖：</p>\n<p><img src=\"/image/deeplearnjs-demo-img.png\" alt=\"Demo\"> </p>\n<p>範例是從 <a href=\"https://ithelp.ithome.com.tw/articles/10186905\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a> 中獲得的靈感，假資料也是取自該處。</p>\n<h2 id=\"先進入假想情境\" style=\"position:relative;\"><a href=\"#%E5%85%88%E9%80%B2%E5%85%A5%E5%81%87%E6%83%B3%E6%83%85%E5%A2%83\" aria-label=\"先進入假想情境 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先進入假想情境！</h2>\n<p>想像一下你是一間飲料店老闆，在經濟不景氣的情況下，你需要嚴格控管你的進貨成本，因此，聰明的你開始觀察各種可能，最後發現天氣的變化與你的飲料銷售量有很大的關聯！</p>\n<p>然而，氣象資料很好取得，但你需要的是能夠預測在哪種天氣下，你需要進多少貨，以此來控管每一次的進貨量。</p>\n<p>也就是說，你需要一個公式！</p>\n<p>這個公式要能夠讓你輸入一個特徵 X（也就是氣溫度數），接著透過運算後產生一個目標變數 Y（也就是飲料銷售量）。</p>\n<p>能當到老闆，想必數學不會太差，整理一下後發現，我們只有一個自變量 <code class=\"language-text\">X</code>，以及因變量 <code class=\"language-text\">Y</code>，因此可以嘗試用一個簡單的線性函數來逼近這公式：</p>\n<p><code class=\"language-text\">Y = aX + b</code></p>\n<p>問題就來了，要怎麼樣找出適合的係數 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 呢？</p>\n<h2 id=\"先別急讓我們先把資料整理一下\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%88%A5%E6%80%A5%E8%AE%93%E6%88%91%E5%80%91%E5%85%88%E6%8A%8A%E8%B3%87%E6%96%99%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B\" aria-label=\"先別急讓我們先把資料整理一下 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先別急，讓我們先把資料整理一下</h2>\n<p>資料分析的第一步一定是先取得資料，身為飲料店老闆，要取得銷售資量應該不難，再上網查個氣象資訊就好，因此可以得到如下資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建構資料 （當然是假的）</span>\n<span class=\"token keyword\">const</span> degrees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> salesVolume <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>資料是成對關係，<code class=\"language-text\">氣溫 29 度</code>，<code class=\"language-text\">冰紅茶銷售量 77</code>。</p>\n<p>接著我們可以先利用 HighCharts 把資料先視覺化出來，你就會很有感覺我們該做什麼。</p>\n<p data-height=\"468\" data-theme-id=\"dark\" data-slug-hash=\"PRweww\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"DeeplearnJS-simple-linear-dataset\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/PRweww/\">DeeplearnJS-simple-linear-dataset</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>嗯...看起來這些點似乎真的可以用一個線性函數去逼近呢！而且更棒的是，透過這些過往資料，應該是有助於我們找出公式中最棒的係數的！</p>\n<h2 id=\"接著就該-linear-regression-就登場了\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E5%B0%B1%E8%A9%B2-linear-regression-%E5%B0%B1%E7%99%BB%E5%A0%B4%E4%BA%86\" aria-label=\"接著就該 linear regression 就登場了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著就該 Linear regression 就登場了！</h2>\n<p>在機器學習的領域中，像我們這樣依靠大量資料來輔助學習的，稱作監督式學習。</p>\n<p>而當公式中的目標變數（也就是 y）是連續型（continuous）的變數時，這樣的學習問題會稱為回歸（regression）問題。</p>\n<p>那一個線性函數的回歸問題，就是線性迴歸 (linear regression) 了。</p>\n<p>關於 Linear regression 的一些數學公式推導等等，我推薦大家閱讀這篇文章：<a href=\"https://blog.gtwang.org/statistics/standford-machine-learning-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">史丹佛大學機器學習（Machine Learning）上課筆記（一）</a></p>\n<p>裡面解釋得淺顯易懂，絕對比我解釋得還好...</p>\n<p>就算不清楚線性迴歸，光看公式應該也知道，我們可以透過大量的迭代測試，不斷輸入 <code class=\"language-text\">X</code>，然後調整 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 來求出 <code class=\"language-text\">Y</code>，然後找出在所有 input 中，能得到與所有真實資料差距最小的一對係數即可。</p>\n<p>用線性回歸的概念來解釋，就是我們需要有一個 cost function（或稱 loss function），藉由不同係數的輸入，從公式得出的值來與實際資料比較，想辦法找出結果差距最小的係數。</p>\n<p>一般來說，cost function 會用 LMS（least mean squares）演算法來處理，可以先猜一個初始係數值，然後藉由 LMS 來不斷更新係數，直到找出最小差距的情況。</p>\n<p>但這是單一 training sample 的狀況，當有多個 training sample 時，通用的演算法稱為 stochastic gradient descent (sgd)，概念雷同，就像是根據每一筆 training sample 去跑一次 LMS。</p>\n<p>一樣，還是請大家去閱讀 <a href=\"https://blog.gtwang.org/statistics/standford-machine-learning-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">史丹佛大學機器學習（Machine Learning）上課筆記（一）</a>，獲得更正確的概念。畢竟這次主要是練習如何用 deeplearnjs 來實作。</p>\n<h2 id=\"解法都有了那就來看看到底怎麼用-javascript-實作吧\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95%E9%83%BD%E6%9C%89%E4%BA%86%E9%82%A3%E5%B0%B1%E4%BE%86%E7%9C%8B%E7%9C%8B%E5%88%B0%E5%BA%95%E6%80%8E%E9%BA%BC%E7%94%A8-javascript-%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"解法都有了那就來看看到底怎麼用 javascript 實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法都有了，那就來看看到底怎麼用 Javascript 實作吧！</h2>\n<p>要使用 deeplearn.js，只需要從 cdn 載入即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/deeplearn@latest\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>接著，我們要先初始化資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建構資料</span>\n<span class=\"token keyword\">const</span> degrees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> salesVolume <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 運用 Deeplearn.js 結構化資料</span>\n<span class=\"token comment\">// dl 就是 deeplearn.js 的 global 變數</span>\n<span class=\"token keyword\">const</span> degrees_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor1d</span><span class=\"token punctuation\">(</span>degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> salesVolume_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor1d</span><span class=\"token punctuation\">(</span>salesVolume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 deeplearn.js 中，tensor 是最核心的資料結構，用來表示向量、矩陣或是多維度的資料。</p>\n<p>有許多 utility function 可以輔助創建 tensor 資料結構，像是這邊用的是 <code class=\"language-text\">tensor1d</code>，也就是 1D (1-dimension) 的 tensor。</p>\n<p>一個 tensor 其實包含三個成分，也是創建 tensor 時可以傳入的參數：</p>\n<ul>\n<li>values (TypedArray|Array): tensor 的值。可以是 nested array 或 flat array 的結構。</li>\n<li>shape（number[]）:基本上就是該 tensor 的維度。若創建 tensor 時沒有指定維度，就會繼承傳入的 values 維度。也可以像這邊的範例一樣直接使用 <code class=\"language-text\">tensor${1|2|3|4}d</code> 來創建</li>\n<li>dtype（float32'|'int32'|'bool）：值的型別，當然是 optional。</li>\n</ul>\n<p>初始化好 deeplearn.js 的資料結構後，接著定義我們要 training 的係數，這邊取為 <code class=\"language-text\">aw</code> 與 <code class=\"language-text\">ba</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 要 train 的參數 aw, ba</span>\n<span class=\"token keyword\">const</span> aw <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">scalar</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ba <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">scalar</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dl.variable(initialValue, trainable?, name?, dtype?)</code> 用來創建 training 過程中需要的變數，也可透過參數指定該變數能否在 training 過程中被修改（trainable），預設是 <code class=\"language-text\">true</code>。</p>\n<p>其中 <code class=\"language-text\">initialValue</code> 可以是一個 Tensor，也可以像我們這邊一樣，傳入 <code class=\"language-text\">dl.scalar</code>。</p>\n<p><code class=\"language-text\">dl.scalar</code> 是維度為 0 的 tensor，基本上 0 維就是一個點，由於我們只需要亂數產生一個初值給 <code class=\"language-text\">aw</code> 與 <code class=\"language-text\">ba</code>，因此用 <code class=\"language-text\">dl.scalar</code> 即可。</p>\n<p>再來，我們定義目標函數與 loss function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 定義目標函數 與 loss function （最一般的 mean square）</span>\n<span class=\"token comment\">// f = aw * X + ba</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> aw<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ba<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loss</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pred<span class=\"token punctuation\">,</span> label</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pred<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 deeplearn.js 中，函數的建構蠻直覺的，<code class=\"language-text\">y = a * x + b</code> 可以直接寫成 <code class=\"language-text\">y = x => a.mul(x).add(b)</code></p>\n<p>loss function 則是接收兩個參數的函式，<code class=\"language-text\">pred</code> 就是 training data 中的自變因 <code class=\"language-text\">x</code> 透過目標函數 <code class=\"language-text\">f</code>，計算出的值，而 label 是 training data 中的答案 <code class=\"language-text\">y</code>。</p>\n<p>然後，定義我們的 Optimizer，也就是用來最佳化 loss function 結果的演算法，這邊採用 <code class=\"language-text\">stochastic gradient descent (sgd)</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 採用 stochastic gradient descent 來做最佳化 </span>\n<span class=\"token comment\">// learning rate 這邊不能設太大</span>\n<span class=\"token keyword\">const</span> learningRate <span class=\"token operator\">=</span> <span class=\"token number\">0.0005</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> optimizer <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span><span class=\"token function\">sgd</span><span class=\"token punctuation\">(</span>learningRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dl.train.sgd</code> 是 deeplearn.js 內建的 sgd 演算法模型，接受一個 <code class=\"language-text\">leanring rate</code> 參數。在每一次的迭代中，係數都會不斷被更新，以找出最佳的結果，而這個 <code class=\"language-text\">learningRate</code> 參數是用來控制每一次的更新幅度。因此不能夠設得太大，也不能設得太小。</p>\n<p>利用定義好的目標函數 <code class=\"language-text\">f</code>、<code class=\"language-text\">loss function</code> 與 <code class=\"language-text\">optimizer</code>，我們可以就開始 training modal 了！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// training</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cost <span class=\"token operator\">=</span> optimizer<span class=\"token punctuation\">.</span><span class=\"token function\">minimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>degrees_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> salesVolume_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>aw<span class=\"token punctuation\">,</span> ba<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cost<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aw'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  aw<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ba'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ba<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最核心的就是這一行：</p>\n<p><code class=\"language-text\">const cost = optimizer.minimize(() => loss(f(degrees_data), salesVolume_data), true, [aw, ba])</code></p>\n<p>使用 <code class=\"language-text\">optimizer</code> 的方式如上所示，輸入執行 <code class=\"language-text\">loss function</code> 的函示，並可額外輸入兩個參數，分別控制 1. 是否回傳最後的 cost; 2. 限制只更新哪些變數。</p>\n<p>我們簡單 for loop 30 次（因為資料量很少...你要 train 一百次也行，但這邊結果不會有什麼差別）</p>\n<p>過程中若想要 debug，可以像我一樣用 <code class=\"language-text\">tensor.print()</code> 的方式把 traning 過程的係數變化 log 出來。</p>\n<p>最後，當 training 結束後，透過 <code class=\"language-text\">dataSync()</code> 將最終係數從 Tensor 中讀出：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 利用 dataSync() 取出 training 後得到的係數</span>\n<span class=\"token keyword\">const</span> awPredict <span class=\"token operator\">=</span> aw<span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baPredict <span class=\"token operator\">=</span> ba<span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>很容易看出 <code class=\"language-text\">dataSync()</code> 是 Synchronously 的，會 block Browser 的 UI thread，直到 data 被你讀出。另外還有個 Asynchronously 的 <code class=\"language-text\">data()</code> method，會回傳 promise，當讀取結束時再呼叫 <code class=\"language-text\">resolves</code>。</p>\n<p>在我們的範例中，因為接下來要用 Highcharts 畫圖，我們需要 block 著 UI thread 等資料讀出後再繼續，因此採用 <code class=\"language-text\">dataSync()</code>。</p>\n<p>取出係數的值後，就能夠畫圖啦～</p>\n<p>根據算出的係數，畫出線條頭尾兩點：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataLine <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span> <span class=\"token operator\">*</span> awPredict <span class=\"token operator\">+</span> baPredict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span> <span class=\"token operator\">*</span> awPredict <span class=\"token operator\">+</span> baPredict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>然後用 HighCharts 繪圖：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'deeplearn.js  最高溫與紅茶銷售量'</span>                 \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'氣溫'</span>                 \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      min<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      max<span class=\"token operator\">:</span> <span class=\"token number\">40</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'銷售量'</span>                 \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      min<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n      max<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'predict line'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> dataLine\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'scatter'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'dataset'</span><span class=\"token punctuation\">,</span>\n            marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                symbol<span class=\"token operator\">:</span> <span class=\"token string\">'cross'</span><span class=\"token punctuation\">,</span>  \n                radius<span class=\"token operator\">:</span> <span class=\"token number\">4</span>         \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> dataset\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 繪製圖表</span>\n<span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> Highcharts<span class=\"token punctuation\">.</span><span class=\"token function\">chart</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p data-height=\"472\" data-theme-id=\"dark\" data-slug-hash=\"dmPZdj\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"DeeplearnJS-simple-linear\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/dmPZdj/\">DeeplearnJS-simple-linear</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>初次使用 deeplearn.js 其實主要門檻還是在於對 Machine Learning 的了解不夠，我有稍微比對一下用 python 與 R 的做法，其實都很雷同，包含資料向量的概念都是，加上很多演算法在這些語言的 library 中都有內建，相信對 ML 與 DL 有深入了解的人來學習 deeplearn.js 會更得心應手。deeplearn.js 畢竟有 Google 支持，也支援 TensorFlow 的 modal，還是很值得投資學習的，想想未來能用別人的 browser 來 training 你的 modal 有多好啊！喔不，是想想未來 Web 能因此有更多的發展潛力，多好呀！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/PAIR-code/deeplearnjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Deeplearnjs</a></li>\n<li><a href=\"https://deeplearnjs.org/docs/api/index.html#dl.train.sgd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deeplearn js API doc</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10186905\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">機器學習 玩具資料與線性迴歸</a></li>\n<li><a href=\"https://blog.gtwang.org/statistics/standford-machine-learning-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">史丹佛大學機器學習（Machine Learning）上課筆記</a></li>\n<li><a href=\"http://blog.csdn.net/ns2250225/article/details/79414790\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deeplearn.js的線性迴歸</a></li>\n<li><a href=\"http://mp.weixin.qq.com/s/X0k2JPze7x8nkSxkoHtWnw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">8 大JavaScript 機器學習框架之探索</a></li>\n</ol>","id":"407fbb50-54af-565f-ad66-fb73fd730202","fields":{"slug":"deeplearnjs-simple-linear-regression"},"frontmatter":{"date":"2018-03-10T15:09:02.000Z","title":"用 Javascript 進行簡單線性迴歸分析","tags":["deeplearnjs","machine learning","linear-regression","javascript"],"type":"tech","slug":"deeplearnjs-simple-linear-regression"},"timeToRead":10}],"tagName":"linear-regression","type":"tech"}},"staticQueryHashes":["2123680655"]}