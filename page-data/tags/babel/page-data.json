{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/babel","result":{"pageContext":{"posts":[{"excerpt":"『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』","html":"<blockquote>\n<p>『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近公司同事組了 Design pattern 的讀書會，剛好這週研讀到 <code class=\"language-text\">Visitor Pattern</code> 時，同事介紹說我們每天在用的工具 Babel 就是採用 <code class=\"language-text\">Vistor Pattern</code>，透過 <code class=\"language-text\">visitor</code> 拜訪 <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">AST (Abstract Syntax Tree)</code></a>，進而將程式碼進行對應轉換。</p>\n<p>這除了勾起我前陣子想要了解 <code class=\"language-text\">AST</code> 的想法外，也再度提醒我對於 Babel Plugin 背後的實作方式不太了解，只知道像是 ESLint, UglifyJS 或是 Webpack，他們的核心都是用到了 <code class=\"language-text\">AST</code> 來實現程式碼的檢查、分析與操作，但並不曉得實際上要如何使用。</p>\n<p>此外，我先前其實都沒有想過要自己寫 Babel Plugin，總覺得 Babel 的 Plugin 就是要很一般化，大家都能使用的，但其實不然啊，自己的專案或甚至是公司團隊內的專案，只要能有助於大家的工作效率，就算只給內部使用又何妨？明確定義好使用的情境跟 Style 即可。</p>\n<p>因此這次就決定花點時間來學習如何實作 Babel Plugin，並透過實作 Babel Plugin 的過程，一同了解 AST 的概念。</p>\n<h2 id=\"一直提到-ast到底什麼是-ast\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E7%9B%B4%E6%8F%90%E5%88%B0-ast%E5%88%B0%E5%BA%95%E4%BB%80%E9%BA%BC%E6%98%AF-ast\" aria-label=\"一直提到 ast到底什麼是 ast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一直提到 AST，到底什麼是 AST？</h2>\n<p>AST 的全文是 Abstract Syntax Tree，中文大多翻作抽象語法樹，主要是將我們 <strong>人類</strong> 所寫的程式語法，轉換成 <strong>程式</strong> 比較容易閱讀的語法結構，並以樹的資料結構來儲存。</p>\n<p>直接來個例子，先讓大家看看 <strong>給人類看的 code</strong> 與 <strong>給程式讀的 code</strong> 之間的差異：</p>\n<p><img src=\"/image/humancode-programcode.png\" alt=\"Human code vs Program code(AST)\"></p>\n<p>左邊的程式經過 Parser 的轉換後，就會產出右圖中的 AST。</p>\n<p>在遠古的 Nestcape 時代，對於 Javascript 的 AST 有許多種實作，而後來為了解決一致性的問題，<a href=\"https://github.com/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESTree</a> 這個組織定義了現今通用的 <a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a>。</p>\n<p>像是我們現在常用的 Babel 所使用的 AST 就是基於 ESTree 的規範延伸修改的。</p>\n<h3 id=\"那-babel-這些工具到底拿-ast-來做什麼呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3-babel-%E9%80%99%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%88%B0%E5%BA%95%E6%8B%BF-ast-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2\" aria-label=\"那 babel 這些工具到底拿 ast 來做什麼呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那 Babel 這些工具到底拿 AST 來做什麼呢？</h3>\n<p>稍稍回想一下，Babel 或是 ESLint 在我們平日的開發中扮演了什麼角色？</p>\n<p>情境大概是：</p>\n<blockquote>\n<p>你用 ES6 寫了一段 arrow function，而 Babel 會幫忙轉換成 ES5 的匿名函數，同時 ESLint 可能會顯示 Warning 告知你的括號前面必須要留有空格。</p>\n</blockquote>\n<p>這段描述當中，Babel 其實將你的 code 透過三個 stage 來處理：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#stages-of-babel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>parse</strong>, <strong>transform</strong>, <strong>generate</strong>.</a></p>\n<p>而其中，AST 其實就出現了兩次：</p>\n<!-- 放置圖片 code to AST and Modefied AST to code -->\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"The role AST plays in babel\"></p>\n<ul>\n<li>\n<p><strong>Parse stage</strong></p>\n<p>你寫的 js code 會經由 js parser 轉換為 AST，當然其中會透過 <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lexical Analysis</a> 與 <a href=\"https://en.wikipedia.org/wiki/Parsing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Syntactic Analysis</a>。</p>\n</li>\n<li>\n<p><strong>Transform stage</strong></p>\n<p>而這時 Babel plugin 與 ESLint plugin 就可以介入你的程式進行改造，<strong>幫忙轉換成 ES5 的匿名函數</strong>以及<strong>審視你的程式，決定是否要提示 Warning</strong> 的這兩個動作就是在這個階段發生的，我們將 Parser 解析後的 AST 改造成我們想要的樣子。</p>\n</li>\n<li>\n<p><strong>Generate stage</strong></p>\n<p>最後，改造完成的 AST 會再被 generator 轉換為一般的 code 輸出。</p>\n</li>\n</ul>\n<p>常用的 js parser 有很多種，像是 babylon, acorn, esprima 等等，而所謂的 Babel plugin 或是 ESLint plugin，則可以看作是一種 Transformer。</p>\n<h3 id=\"窺探一下-ast-的內容\" style=\"position:relative;\"><a href=\"#%E7%AA%BA%E6%8E%A2%E4%B8%80%E4%B8%8B-ast-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"窺探一下 ast 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>窺探一下 AST 的內容</h3>\n<p>在實作 Plugin 前，先了解一下 AST 的長相對之後會比較有幫助。</p>\n<p>開始之前先介紹兩個常用網站：</p>\n<ul>\n<li>\n<p><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></p>\n<p>超棒的網站，在上面可以邊看原始程式碼根據不同 Parser 所建構出來的 AST，也能切換不同 Transformer 來實作 Plugin 內容。</p>\n</li>\n<li>\n<p><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></p>\n<p>主要是將 AST 視覺化，對於理解整個程式碼的 AST 結構能有比較清楚 Overview。</p>\n</li>\n</ul>\n<p>不過我個人是覺得 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 就足夠了， <a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VISUALIZER</a> 雖然能看到圖像化的樹狀結構，但操作起來不是很順暢，也無法直接在上面撰寫 Transformer。所以下面都會以 <code class=\"language-text\">AST Exporler</code> 為使用工具來介紹。</p>\n<p>現在我們以一個比最開始稍稍複雜一點的簡單範例來解析，在這邊我們採用與 Babel 相同的 Parser - <a href=\"https://github.com/babel/babel/tree/master/packages/babel-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babylon7</a>：</p>\n<p>我們的原始程式碼如下，定義 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 兩個變數，以及一個 <code class=\"language-text\">add</code> function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一步一步來看，<code class=\"language-text\">const a = 2</code> 的 AST 會長這樣：</p>\n<p><img src=\"/image/ast-explorer-sample-1.png\" alt=\"AST Explorer example 1\"></p>\n<p>你的程式碼在 AST 當中，會被拆解成各種 node 來存放表示，而每一個 node 都有自己的 type，各種 type 有其特定的屬性參數，以上圖為例：</p>\n<p><code class=\"language-text\">const</code> 在 AST 中就是ㄧ個 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">VariableDeclaration</code> 的 node，這個 node 必須包含兩種屬性， <code class=\"language-text\">declarations</code> 與 <code class=\"language-text\">kind</code>：</p>\n<p><code class=\"language-text\">kind</code> 很好理解，意指我們的 <code class=\"language-text\">VariableDeclaration</code> 可以有三種類型（<code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>）， 而 <code class=\"language-text\">declarations</code> 看起來就是存放你所宣告的變數，像 <code class=\"language-text\">a = 2</code>，但他是 <code class=\"language-text\">Array of VariableDeclarator</code>，我們不是只有宣告一個變數嗎？</p>\n<p>其實是要應付這種寫法：<code class=\"language-text\">const a = 2, b = 3</code>，需要能接收多個 <code class=\"language-text\">VariableDeclarator</code>。</p>\n<p>而 <code class=\"language-text\">VariableDeclarator</code> 這種 type 的 node 代表的就是 <code class=\"language-text\">a=2</code> 這種宣告式，其中包含兩個屬性 <code class=\"language-text\">id</code> 與 <code class=\"language-text\">init</code>，我們將其展開看看：</p>\n<p><img src=\"/image/ast-explorer-sample-2.png\" alt=\"AST Explorer example 2\"></p>\n<p><code class=\"language-text\">id</code> 屬性所接受的是 <code class=\"language-text\">identifier</code> 這個 type 的 node，代表該 <code class=\"language-text\">VariableDeclarator</code> 的 identity。該 node 只需要一個 <code class=\"language-text\">name</code> 屬性，也就是他的名稱，在這邊的例子中當然就是 <code class=\"language-text\">a</code> 囉。而 <code class=\"language-text\">init</code> 則是這個 <code class=\"language-text\">VariableDeclarator</code> 的初始值，因為我們程式中是初始 <code class=\"language-text\">a</code> 為 <code class=\"language-text\">2</code>，所以這個 <code class=\"language-text\">init</code> 屬性就會連到一個 <code class=\"language-text\">NumericLiteral</code> type 的 node，擁有 <code class=\"language-text\">value</code> 為 <code class=\"language-text\">2</code> 的屬性。</p>\n<p>此外，眼尖的讀者想必都有發現到，每個 node 都有 <code class=\"language-text\">start</code>, <code class=\"language-text\">end</code> 與 <code class=\"language-text\">loc</code> 這三個屬性，這是用來代表該 node 在程式的第幾行第幾列。</p>\n<p>看到這邊應該對於 AST 的結構會有點感覺了，基本上就是 Parser 會先將你的程式切成多種 tokens，接著依照類別來區分是哪種 node，最後從程式結構上一一把 node 串接，形成一顆完整的 Abstract Syntax Tree。如果覺得剛剛用 AST Explorer 轉化的格式不夠清楚，這邊補充一下同樣程式用 VISUALIZER 出來的 AST 長相，應該會對 AST 的結構更有感受：</p>\n<p><img src=\"/image/ast-visualizer.png\" alt=\"ast visualizer\"></p>\n<p>範例程式中我們還有使用到 <code class=\"language-text\">function</code>，他長出的 AST 與宣告變數在 node type 上有不少差異，但大體結構就如同上面介紹的一般，這邊就不再贅述，相信看到這邊的讀者也有能力自己去 AST Explorer 玩玩看了！寫些簡單的程式，看看他們經由 Parser 轉換後，會產生怎樣的 AST，每種語法所對應的 node type 又是什麼。</p>\n<h2 id=\"懂了-ast來實際應用一下開始製作-babel-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%87%82%E4%BA%86-ast%E4%BE%86%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8%E4%B8%80%E4%B8%8B%E9%96%8B%E5%A7%8B%E8%A3%BD%E4%BD%9C-babel-plugin-%E5%90%A7\" aria-label=\"懂了 ast來實際應用一下開始製作 babel plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>懂了 AST，來實際應用一下，開始製作 Babel Plugin 吧！</h2>\n<p>出發，總要有個方向。</p>\n<p>要做 Plugin 也得要先決定要做什麼。</p>\n<p>剛好在工作上常常會用到 <code class=\"language-text\">React-intl</code> 這個套件來幫忙處理 i18n，他的使用方法還算簡單，當一些基本設定做好以後，你只要用其提供的一個特殊元件 <code class=\"language-text\">&lt;FormattedMessage /></code>，放入對應文字的 id 即可，像是： <code class=\"language-text\">&lt;FormattedMessage id=\"#words-need-i18n\" /></code> 。</p>\n<p>雖然實際上已經非常簡單了，但我還想更懶一點，能不能直接輸入 <code class=\"language-text\">{'#words-need-i18n'}</code> 就好呢？</p>\n<p>像是能把：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>轉換成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedMessage</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>words-need-i18n<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以！自己寫 Plugin 就可以！</p>\n<h3 id=\"撰寫-babel-plugin-的起手式\" style=\"position:relative;\"><a href=\"#%E6%92%B0%E5%AF%AB-babel-plugin-%E7%9A%84%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-label=\"撰寫 babel plugin 的起手式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>撰寫 Babel Plugin 的起手式</h3>\n<p>先到 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 開啟一個新的頁面，接著在上方列表選取好 Parser (Babylon7) 與 Transformer (Babel7)，並在旁邊的程式區塊內寫上一點範例程式，就是你預期能被 Babel 認得並轉換的\"新\"程式碼，以我的例子就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/step-1-babel-plugin.gif\" alt=\"Babel plugin step 1\"></p>\n<p>接著看看你的 AST 長什麼樣子，想想你該怎麼修改他：</p>\n<p><img src=\"/image/step-2-babel-plugin.png\" alt=\"Babel plugin step 2\"></p>\n<p>出現沒看過的 type 了！沒關係，在剛開始撰寫 Plugin 的過程中一定會遇到許多沒看過的 type 或是不清楚他的屬性型別，好在 babel 有一份非常詳細的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook</a> 與 <a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 可以查閱，只要到上面 <code class=\"language-text\">ctrl + f</code> 一下，應該都能在上頭找到你所需要的知識。</p>\n<p>準備好測試程式碼、了解測試程式碼的 AST、也有了工具書可以查，就能毫無懸念的開始撰寫 Babel plugin 了。</p>\n<h3 id=\"babel-plugin-之-transformvisitorstraversal\" style=\"position:relative;\"><a href=\"#babel-plugin-%E4%B9%8B-transformvisitorstraversal\" aria-label=\"babel plugin 之 transformvisitorstraversal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 之 Transform、Visitors、Traversal</h3>\n<p>還記得我在最一開始說過，Babel 大量使用到了 Visitor pattern 嗎？就是用在這邊！</p>\n<p>之所以 Babel 能夠輕易解析你的程式碼，並且進行各種修改操作，依賴的就是各種 visitors 在 AST 上進行 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">traverse</a>，當遇到對應的 node 時，visitor 就會做出相對的操作，進而將輸入的程式碼 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-generator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transform</a> 成預期的結果，這就是整個 Babel plugin 的實作核心。</p>\n<h3 id=\"babel-plugin-的基礎結構\" style=\"position:relative;\"><a href=\"#babel-plugin-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%B5%90%E6%A7%8B\" aria-label=\"babel plugin 的基礎結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 的基礎結構</h3>\n<p>若你剛剛有照著我的說明，在 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上方列表選取好 Parser 與 Transformer，那左下角應該會出現類似下方的程式區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"ast-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上的預設 template，基本的 Babel plugin 也就是長這樣。</p>\n<p>你會接受一個 <code class=\"language-text\">babel</code> 物件，其中我們會需要的是 <code class=\"language-text\">babel.types</code>，在之後新增修改 node 時會不斷地用到，因此最好存成一個變數，省去 chain lookup。</p>\n<p>而基本上你要做的就是回傳一個 <code class=\"language-text\">visitor object</code>，其中定義以 node type 為名的 funciton，接收兩種參數：<code class=\"language-text\">path</code> 與 <code class=\"language-text\">state</code>：</p>\n<ul>\n<li>path\npath 代表的是在 traverse AST 過程中，連接 node 之間的邊。所以你可以用 <code class=\"language-text\">path.node</code> 取得目前的節點，也可以用 <code class=\"language-text\">path.parent</code> 取得父節點。\n此外，path 還能透過 <code class=\"language-text\">path.traverse</code> 來在原有的 visitor 內進行 nested visiting，這對於想要<strong>讓 visitor 在某個特定 visitor 執行後再執行</strong>時很有幫助，可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 範例</a>。</li>\n<li>state\nstate 的用法在 handbook 上也沒有說得很明確，我的理解是一個貫串整個 traverse 過程的 global state，你可以在任意階段修改 state。其中也包含你想讓使用 plugin 的使用者傳入的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#plugin-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">options 設定</a>。</li>\n</ul>\n<p>以上述 template 為例，你的 visitor 在遇到 type 為 <code class=\"language-text\">Identifier</code> 的節點時，就會執行 <code class=\"language-text\">path.node.name = path.node.name.split('').reverse().join('');</code>，也就是將該 <code class=\"language-text\">Identifier</code> node 的名稱給顛倒過來。</p>\n<p>此外，Visitor 在 traverse AST 的過程中，會在節點上進進出出，所以其實我們是可以定義 <code class=\"language-text\">enter</code> 與 <code class=\"language-text\">exit</code> 的函式來進行操作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Identifier<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entered!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exited!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#visitors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 中有更多詳細介紹</a></p>\n<h3 id=\"動手撰寫自己的-visitor\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E6%89%8B%E6%92%B0%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84-visitor\" aria-label=\"動手撰寫自己的 visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動手撰寫自己的 Visitor</h3>\n<p>知道基礎架構後，就可以開始撰寫 Visitor 了！</p>\n<p>但你可能會有點沒頭緒該怎麼開始，因為你不知道要從哪個 node type 的 visitor function 開始寫。這就是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 的好處了，你只要將游標停放在編譯前的程式碼的任意位置上，右邊的 AST 樹就會自動 Focus 到對應的節點上頭（前提是要記得選取上方的 <code class=\"language-text\">AutoFocus</code>，預設會是啟用的）：</p>\n<p><img src=\"/image/ast-explorer-find-node.gif\" alt=\"Find the node we need\"></p>\n<p>以範例來說，我們要轉換的是 <code class=\"language-text\">{'#words-need-i18n'}</code>，將游標指上去後發現他是一個 type 為 <code class=\"language-text\">StringLiteral</code> 的 node，這就是我們要撰寫的 visitor function！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"i18n-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// some logic in here</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下來把需要的邏輯填寫上去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'JSXExpressionContainer'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>\n          t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXElement</span><span class=\"token punctuation\">(</span>\n              t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXOpeningElement</span><span class=\"token punctuation\">(</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FormattedMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span>\n                      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- 解釋前四行  然後畫個 path 的圖 -->\n<p>在前面有介紹到，<code class=\"language-text\">path</code> 代表連接著目前被拜訪到的節點，所以我們能用 <code class=\"language-text\">path.node.value.startsWith('#')</code> 來檢查目前節點的值是否為我們想要的（開頭為 hashtag）。但由於 <code class=\"language-text\">StringLiteral</code> 感覺得出來是到處都會出現的 node type，所以我們需要設立一些條件：當 <code class=\"language-text\">path.parent.type !== 'JSXExpressionContainer'</code> 時，我們就 bypass 這次的 visit 操作。所謂的 <code class=\"language-text\">JSXExpressionContainer</code> 就是在 jsx 中的 <code class=\"language-text\">{ }</code>。</p>\n<p>當條件都成立時，也就代表我們的 visitor 成功找到我們想轉換的程式碼 <code class=\"language-text\">{'#words-need-i18n'}</code>。這時聰明如你，一定會想說那就把 <code class=\"language-text\">path.node</code> 替換掉就好了吧！</p>\n<p>但是，<code class=\"language-text\">path.node</code> 目前指到的是 <code class=\"language-text\">StringLiteral</code>，也就是 <code class=\"language-text\">#words-need-i18n</code>，外面還有一層 <code class=\"language-text\">JSXExpressionContainer</code>，我們不能直接使用 <code class=\"language-text\">path.node.replaceWith</code> 來替換程式碼，我們要連同上一層都一起換掉，因此這邊需要使用 <code class=\"language-text\">path.parentPath.replaceWith</code>。以圖像表示的話大概像這樣：</p>\n<p><img src=\"/image/ast-explorer-path-replace.png\" alt=\"需要找到 parent path 來直接從上層替換程式碼節點\"></p>\n<!-- 放個 gif 說明如何找出要 create 什麼 node, 以及去哪裡找合法參數 （提及 log 訊息不一定看得出來）-->\n<p>接著，<code class=\"language-text\">replaceWith</code> 接收你要替換的節點當作參數，而這時我們最一開始宣告的 <code class=\"language-text\">const { types: t } = babel;</code> 就派上用場啦！</p>\n<p><code class=\"language-text\">babel.types</code> 可以幫我們創建出各種 type 的 node，也提供許多 type checking 的 function，像是剛剛我們檢查 <code class=\"language-text\">path.parent.type</code> 的地方其實應該更改為 <code class=\"language-text\">!t.isJSXExpressionContainer(path.parent)</code>。更多關於 <code class=\"language-text\">babel.types</code> 的操作可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-transformation-operations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 上的說明</a></p>\n<p>但到這邊問題又來了，我們怎麼知道要創建什麼 node 呢？</p>\n<p>我一開始也不知道，但抬頭想一想，AST Explorer 不是就會幫我們轉換 AST 嗎？那就把我們預期的結果程式碼也貼上去，不就知道他的 AST 長相了嗎？</p>\n<p>大膽將 <code class=\"language-text\">&lt;FormattedMessage id={'#words-need-i18n'}></code> 貼上去後，就能得到其 AST 結構：</p>\n<p><img src=\"/image/ast-explorer-final-ast-format.png\" alt=\"預期結果的 AST 結構\"></p>\n<p>接著呢，就到 <strong><a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 官網的 docs</a>  裡面去查詢每一種需要創建的 type，各自要填入哪些參數</strong>，舉例來說，<code class=\"language-text\">&lt;FormattedMessage></code> 會是一個被 <code class=\"language-text\">JSXOpeningElement</code> 包起來，從 <a href=\"https://babeljs.io/docs/en/babel-types#jsxopeningelement\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 能看到非常詳細的說明：</p>\n<p><img src=\"/image/ast-explorer-docs.png\" alt=\"JSXOpeningElement\"></p>\n<p>我們要填入三個參數: <code class=\"language-text\">name</code>, <code class=\"language-text\">attributes</code> 與 <code class=\"language-text\">selfClosing</code>，第一與第三個很好理解，中間的 <code class=\"language-text\">attributes</code> 裡面包含了其他的 type，這時你就需要再繼續往下查，直到完成所有需求為止。</p>\n<p>照著這樣的思路，一一將 AST 內的結構轉換到你的 plugin 程式碼內，就大功告成啦！</p>\n<p><img src=\"/image/ast-explorer-final-result.png\" alt=\"最終結果\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>當然這只是個很簡陋的實作，不過也算是把 plugin 的製作概念呈現了一遍，並稍加了解了 AST 的重要性與實用性。</p>\n<p>在實作你所想要的 plugin 功能時，勢必會遇到複雜得多的狀況，建議大家還是直接在 handbook 上查看最直接，上面有更詳細的 API 介紹與教學，包含 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-template</a> 、 babel-types 的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#builders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">builder</a> 與 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#validators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Validators</a>，更有 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Best Practices</a> 可供參考。也可以看看高手們的<a href=\"https://github.com/kentcdodds/babel-plugin-preval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a></p>\n<p>最後，不知道有沒有讀者會覺得整個 Plugin 的邏輯操作與大家熟悉的 jQuery 有點類似？都是選取到某個元件後，就針對該元件進行更動：<code class=\"language-text\">$('StringLiteral').textContent = '&lt;FormattedMessage id={'xxx'}>'</code></p>\n<p>我在查資料的過程中發現一篇<a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常有趣又很清楚的介紹</a>，其中就是以 jQuery 來做類比（節錄其 slides 中的一段）：</p>\n<p><code class=\"language-text\">Babel:Javascript :: jQuery:DOM</code></p>\n<p><strong>jQuery 幫助你改變 DOM，而 Babel 幫助你轉化 Javascirpt</strong></p>\n<p>實在是很貼切的比喻不是嗎？</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/kentcdodds/a-beginners-guide-to-asts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Writing custom Babel and ESLint plugins</a></li>\n<li><a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How writing babel-plugin is like wrigint jQuery</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel Plugin Handbook</a></li>\n<li><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></li>\n<li><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></li>\n<li><a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a></li>\n</ol>","id":"89ec09ae-24c7-5115-8444-f16260372725","fields":{"slug":"visit-ast-with-babel-plugin"},"frontmatter":{"date":"2018-08-25T18:32:14.000Z","title":"透過製作 Babel-plugin 初訪 AST","tags":["es6","javascript","babel","ast","pattern"],"type":"tech","slug":"visit-ast-with-babel-plugin"},"timeToRead":16}],"tagName":"babel","type":"tech"}},"staticQueryHashes":["2123680655"]}