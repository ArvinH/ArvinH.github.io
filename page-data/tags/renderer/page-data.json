{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/renderer","result":{"pageContext":{"posts":[{"excerpt":"『願你餘生所有的珍惜都不用靠失去來懂得。』","html":"<blockquote>\n<p>『願你餘生所有的珍惜都不用靠失去來懂得。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近因為武漢肺炎的關係，公司展開了不知得持續多久的 Work From Home 政策，雖然團隊裡有些人不太喜歡，覺得這樣溝通與開會效率比不上在辦公室面對面，但我個人是還蠻習慣的，並且，這節省下來的通勤時間，剛好讓我可以多看一些影片跟玩玩 side project。這次在補帶 React Conf 2019 的影片時，看到前 React team 的 EM, Sophie Alpert 介紹 <a href=\"https://www.youtube.com/watch?v=CGpMlWVcHok\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a Custom React Renderer</a>，加上 side project 用上了 <a href=\"https://github.com/vadimdemedes/ink\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ink</a> 這個能用 React 撰寫 command line 工具的套件，讓我決定透過實際操作來了解何謂 Custom React Renderer，以及該如何打造。除了 Sophie Alpert 的影片外，基本上是參考 <a href=\"https://github.com/nitin42/Making-a-custom-React-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nitin42 的這份教學</a>，以 <a href=\"https://github.com/Ziv-Barber/officegen\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">officegen</a> 作為 React Component 的 host environment，讓我們能用撰寫 React 的方式來製作 pptx 投影片！</p>\n<h1 id=\"react-reconciliation-與-renderer\" style=\"position:relative;\"><a href=\"#react-reconciliation-%E8%88%87-renderer\" aria-label=\"react reconciliation 與 renderer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Reconciliation 與 Renderer</h1>\n<p>React 的架構中有兩個主要的重心，<strong>reconciliation</strong> 與 <strong>rendering</strong>。<strong>reconciliation</strong> 是 React 用來找出狀態改變前後，其 UI 樹狀結構差異的演算法，並決定哪一部分的節點是需要被更動的，也就是市面上流傳所謂 <code class=\"language-text\">Virtual DOM</code> 的核心概念。但實際上所謂 <code class=\"language-text\">Virtual DOM</code> 這個名詞有點誤用，因為在 <strong>reconciliation</strong> 的演算法與定義中，完全不涉及 <strong>DOM</strong>，<strong>DOM</strong> 只是 React reconciliation 可以套用的其中一個 <strong>Host Environment</strong>，<strong>rendering</strong> 的過程會依據 <strong>reconiliation</strong> 的結果，搭配所在的 <strong>Host Environment</strong> 來渲染出相對應的畫面，這就是 <strong>Renderer</strong> 所負責的。例如 <code class=\"language-text\">React-Native</code> 就是 <strong>Host Environment</strong> 為 iOS、Android 平台的一種 Renderer，當然 <code class=\"language-text\">react-dom</code> 也是。</p>\n<p>這個架構老早就存在於 React 的核心中，當初 Fiber 架構就是在改善 <strong>reconciliation</strong> 的實作方式（當然也有影響 renderer 的實作），也有許多文章在探討與說明。</p>\n<p>只是較少為人知的是，Rect 其實有一個 <code class=\"language-text\">react-reconciler</code> 的套件可以使用，幫你處理好 reconciliation 的部分，提供一些介面讓你根據想要的 host environment 實作 rendering，而這就是為什麼有人能客製化各種 renderer，讓大家能用 React 撰寫 VR、Command Line 或是 等等（可參考此 <a href=\"https://github.com/chentsulin/awesome-react-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome list</a>）。</p>\n<p>關於 Fiber 架構的觀念介紹，推薦大家去看 <a href=\"https://twitter.com/acdlite?lang=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Clark</a> 的<a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，雖然是很久之前寫的，但我覺得觀念闡述的很清晰易懂。</p>\n<p>簡單來說，所謂的 fiber 是在 reconciliation 中的一個工作單位，一個 fiber 是一個 JavaScript object，包含著一個 Component 的資訊，其輸入與輸出，在接下來的實作中，我們會利用 <code class=\"language-text\">react-reconciler</code> 與 fiber 所提供的 Component 資訊來實作一個客製化 PPTXRenderer。</p>\n<h2 id=\"最終的結果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%9A%84%E7%B5%90%E6%9E%9C\" aria-label=\"最終的結果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終的結果</h2>\n<p>先看一下最終的成品功能，這樣在說明後面的實作時，應該會比較有感受。</p>\n<p>這次範例中所客製化的 PPTXRenderer 可以讓我們使用兩個 Component：<code class=\"language-text\">&lt;Slide></code> 與 <code class=\"language-text\">&lt;Text></code> 來產生投影片。</p>\n<p>例如在 <code class=\"language-text\">App.js</code> 中這樣寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text<span class=\"token punctuation\">,</span> Slide<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../src'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">2</span> 😍 😍<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/text.pptx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>會產生這樣的投影片：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/29dd4226b9c0462bb75ef278795ee337.gif\" alt=\"demo\"></p>\n<blockquote>\n<p>TL;DR\n篇幅有點長，很多程式碼，若不想看文章，可以直接參考程式碼 <a href=\"https://github.com/ArvinH/reapptx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reapptx</a></p>\n</blockquote>\n<h1 id=\"custom-renderer-基本結構\" style=\"position:relative;\"><a href=\"#custom-renderer-%E5%9F%BA%E6%9C%AC%E7%B5%90%E6%A7%8B\" aria-label=\"custom renderer 基本結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Renderer 基本結構</h1>\n<p><code class=\"language-text\">react-reconciler</code> 提供的函式可以接受一個 <strong>host config object</strong>，並回傳 renderer instance。其中 <strong>host config object</strong> 是我們用來定義與實作在 renderer 的 lifecycle 中所需要的 method，包含 <code class=\"language-text\">update</code>、<code class=\"language-text\">append children</code>、<code class=\"language-text\">remove children</code> 等等，這邊所處理的通通都是 <strong>host environment</strong> 底下的 components，其餘 non-host 的 components 都會由 React 負責管理。</p>\n<p>先看看 <code class=\"language-text\">react-reconciler</code> Readme 內提供的範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-reconciler\"</span>\n\n<span class=\"token keyword\">const</span> HostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You'll need to implement some methods here.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>HostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RendererPublicAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> MyRendererContainer <span class=\"token operator\">=</span> MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call MyRenderer.updateContainer() to schedule changes on the roots.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> RendererPublicAPI<span class=\"token punctuation\">;</span></code></pre></div>\n<p>還記得你一般開發 react app 時，都會呼叫 <code class=\"language-text\">ReactDOM.render</code> 來將你的 root component 掛載到一個 <code class=\"language-text\">div</code> 上頭嗎？上述程式碼中所 export 的 <code class=\"language-text\">RenderPublicAPI.render</code> 就等同於 <code class=\"language-text\">ReactDOM.render</code>。</p>\n<p>而在 <code class=\"language-text\">render</code> 函式中，由 <code class=\"language-text\">HostConfig</code> 與 <code class=\"language-text\">react-conciler</code> 所建構的 custom renderer 就可以將 React component 應用在不同的 host environment 中。</p>\n<p>至於如何實作 <code class=\"language-text\">HostConfig</code>，這邊有<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整的 method 列表</a>，你也可以參考 <a href=\"https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-dom</code></a> 或 <a href=\"https://github.com/facebook/react/blob/master/packages/react-native-renderer/src/ReactNativeHostConfig.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-native</code> 的 HostConfig</a>。</p>\n<p>不過從列表中洋洋灑灑一堆 interface，到底哪些是重要的呢？</p>\n<p>我們可以利用一個方式來測試，先把原本使用 <code class=\"language-text\">react-dom</code> 的 renderer 換成你自己的：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">import React from \"react\";\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>// import ReactDOM from \"react-dom\";\n<span class=\"token prefix inserted\">+</span>import MyRenderer from \"./MyRenderer\";\n</span>\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>ReactDOM.render(\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>MyRenderer.render(\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> &lt;React.StrictMode>\n<span class=\"token prefix unchanged\"> </span>   &lt;App />\n<span class=\"token prefix unchanged\"> </span> &lt;/React.StrictMode>,\n<span class=\"token prefix unchanged\"> </span> rootElement\n</span>);</code></pre></div>\n<p>而在 <code class=\"language-text\">MyRenderer.js</code> 中，將各個函式一個一個放上去，並加上 log，直到你的頁面沒有出現 error：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-reconciler\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> HostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appendInitialChild\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createTextInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ... 依此類推將各種 method 都放上去，並加上 log</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>HostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RendererPublicAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render function 中的內容則參考 react-conciler 的 readme</span>\n    <span class=\"token comment\">// 將 renderer 的 container 創建出來，並將傳入的 element update 上去。</span>\n    <span class=\"token keyword\">const</span> MyRendererContainer <span class=\"token operator\">=</span> MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> MyRendererContainer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RendererPublicAPI<span class=\"token punctuation\">;</span></code></pre></div>\n<p>這時你的頁面應該會是空白的，因為你所有 renderer 的 method 都尚未實作。但如此一來就能觀察出在你的 <code class=\"language-text\">&lt;App /></code> component 中，renderer 會調用哪些函數、執行順序為何、個別的參數是什麼。</p>\n<p>這邊給大家一個 codesandbox 的例子把玩：</p>\n<iframe\n  src=\"https://codesandbox.io/embed/youthful-shaw-cinj5?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"custom-react-renderer-check-func-order\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"實際的-host-config\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E7%9A%84-host-config\" aria-label=\"實際的 host config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際的 Host Config</h2>\n<p>初步了解 Renderer 的結構與需要填入的 Host Config 後，我們可以來實作需要的 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">'react-reconciler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentInstance<span class=\"token punctuation\">.</span>appendChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parentInstance<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext<span class=\"token punctuation\">,</span>\n    internalInstanceHandle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getRootHostContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getChildHostContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentHostContext<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> rootContainerInstance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">shouldSetTextContent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">text<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext<span class=\"token punctuation\">,</span>\n    internalInstanceHandle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">finalizeInitialChildren</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inst</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> inst<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">prepareForCommit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootcontainerInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">resetAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootcontainerInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">appendChildToContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">removeChildFromContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">now</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  supportsMutation<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> PPTXRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>hostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有許多 function 是必要但我們的範例中用不著的，所以留空，不過我還是一個一個說明他們各自的功能為何。</p>\n<ul>\n<li><code class=\"language-text\">appendInitialChild(parentInstance, child)</code></li>\n</ul>\n<p>當 renderer 在繪製 component 的時候，會透過此函式將該 component 的 child component append 上去，所以在這個函式中，你必須實作如何將你想要 render 的 component child 加到其 parent component 上頭。以我們的範例為例，是會在每個 component 都實作一個 <code class=\"language-text\">appendChild</code> 函式，在這邊我們就只需要執行 <code class=\"language-text\">parentInstance.appendChild(child);</code> 即可。</p>\n<ul>\n<li><code class=\"language-text\">createInstance(\ntype,\nprops,\nrootContainerInstance,\nhostContext,\ninternalInstanceHandle\n)</code></li>\n</ul>\n<p>看名字就知道是在創建 Component instance 的函式，會傳入當前節點的 type、該節點的 props、根節點的實例、host 環境的 context，以及一個叫做 internalInstanceHandle 的物件。</p>\n<p>其他參數都很好懂，這個 internalInstanceHandle 其實就是對應此節點的 fiber。我們前面有說過，fiber 代表的是整個 reconciler 過程中的一個工作單位，而每個 component 都有對應的兩種 fiber，分別是已經完成工作，可以render 的 flushed fiber 跟尚未處理完的 work in progress fiber，fiber 中包含許多 component 的資訊。基本上這個範例中，前面兩個參數就足夠了。想了解更多 fiber 的內容請參考 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-fiber-architecture</a>。</p>\n<p>在這個範例中，我們只需要透過傳入的 type 來決定我們要對應產生哪個 component 的實例，後面會在說明每個 component 的實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">getRootHostContext(instance)</code></li>\n</ul>\n<p>這個函式讓你能夠與 Host Config 中的其他 method 共享 context。基本上會傳入 root component instance 當參數。\n在這範例中，並沒有需要 share 任何 context，所以回傳個空物件即可。</p>\n<ul>\n<li><code class=\"language-text\">getChildHostContext(parentHostContext, type, rootContainerInstance)</code></li>\n</ul>\n<p>與上一個函式雷同，讓你能夠分享 context 給當下節點的 children，也能取得 parent 的 context。我們一樣不需要用到，所以回傳空物件。</p>\n<ul>\n<li><code class=\"language-text\">shouldSetTextContent(type, props)</code></li>\n</ul>\n<p>就我的理解，這個函數的目的可以簡單說是讓你有機會判斷是否要將 traversal 停止在當前節點。通常我們的 leaf node 都會是 text node，若在此函式內你回傳 true，則 reconciler 會停止繼續往下 traverse，他會停止在這層，然後接著呼叫 <code class=\"language-text\">createInstance</code> 去創建實例。</p>\n<p>若是設為 false，reconciler 澤會繼續遞迴下去，直到此函式回傳 true，或是真的達到了 leaf text node。若是達到 leaf text node，就會呼叫另個函式 - <code class=\"language-text\">createTextInstance</code>。</p>\n<p>以我們的範例來說，我們不像 <code class=\"language-text\">react-dom</code> 需要考慮 <code class=\"language-text\">textarea</code> 或是 <code class=\"language-text\">dangerouslySetInnerHTML</code> 等情況，都直接回傳 false 即可。</p>\n<ul>\n<li><code class=\"language-text\">createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle)</code></li>\n</ul>\n<p>顧名思義就是創建 Text instance，這個 Text 指的是你在 component 中直接撰寫的 string 部分，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span> Taiwan No<span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">Taiwan No.1</code> 就是這邊要處理的 Text instance。在 <code class=\"language-text\">react-dom</code> 中就是要創建一個 <code class=\"language-text\">textNode</code>，而在這邊我們直接回傳 Text 本身，讓他的父節點 <code class=\"language-text\">&lt;Text></code> 來處理。\n除了第一個參數 text 外，ㄧ樣會有 root component instance、host context 跟 internalInstanceHandle(fiber)，ㄧ樣我們只會用到第一個參數 text。</p>\n<ul>\n<li><code class=\"language-text\">finalizeInitialChildren(\nparentInstance,\ntype,\nprops,\nrootContainerInstance,\nhostContext\n)</code></li>\n</ul>\n<p>這個函式主要目的在於告訴 reconciler 需不需要在當前的 component 上呼叫 <code class=\"language-text\">commitMount()</code>，也就是需不需要等到所有 element 都被 rendered 以後才執行某些事情。例如 input elements 的 autofocus，就需要等 component mount 以後才能被呼叫。\n在我們的範例中，不需要做這些事，所以就回傳 false 即可。若是你回傳 true，那就必須也實作 <code class=\"language-text\">commitMount</code>。</p>\n<ul>\n<li><code class=\"language-text\">getPublicInstance(ins)</code></li>\n</ul>\n<p>只是個公開介面讓你能取得 instance。</p>\n<ul>\n<li><code class=\"language-text\">prepareForCommit(rootcontainerInfo)</code></li>\n</ul>\n<p>當你的節點實例都生成後，即將掛載到根節點時，可以在這個函式內進行一些準備工作，例如統計需要 autofucs 的節點等等，以我們的範例來說不需要做任何事，留空。</p>\n<ul>\n<li><code class=\"language-text\">resetAfterCommit(rootcontainerInfo)</code></li>\n</ul>\n<p>當 reconciliation 結束，inmemory tree 都掛載到 host root element 時，我們可以利用這個函式執行任何後續動作，像是回覆一些 event 狀態等等。</p>\n<ul>\n<li><code class=\"language-text\">appendChildToContainer(container, child)</code></li>\n<li><code class=\"language-text\">removeChildFromContainer(container, child)</code></li>\n<li><code class=\"language-text\">supportsMutation</code></li>\n</ul>\n<p>這幾個可以一起看，<code class=\"language-text\">supportsMutation</code> 代表的是你的 host environment 支不支援一些可以更改結構的 API，像是 DOM 內的 <code class=\"language-text\">appendChild</code>，若有則回傳 true，並實作 <code class=\"language-text\">appendChildToContainer</code> 與 <code class=\"language-text\">removeChildFromContainer</code>，讓 renderer 知道當 host element 執行 mutative api 時該如何處理。\n在我們的範例中我們不需要用到這些，但因為這應該是蠻容易用到的，所以我設為 true 並在這邊說明一下。</p>\n<ul>\n<li><code class=\"language-text\">now()</code></li>\n</ul>\n<p>host config 內最後一個函式 <code class=\"language-text\">now()</code>，是 reconciler 用來計算當前時間的，我們可以留空，或是提供 <code class=\"language-text\">Date.now</code>。</p>\n<h2 id=\"對應-custom-renderer-的-component\" style=\"position:relative;\"><a href=\"#%E5%B0%8D%E6%87%89-custom-renderer-%E7%9A%84-component\" aria-label=\"對應 custom renderer 的 component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>對應 Custom Renderer 的 component</h2>\n<p>終於走完一遍 host config，接下來可以看看我們的 component 該怎麼實作。</p>\n<p>在我們的 <code class=\"language-text\">createInstance()</code> 中，我們根據傳入的 fiber type 來決定要實例化哪個 component：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4 id=\"root-component---pptxdocument\" style=\"position:relative;\"><a href=\"#root-component---pptxdocument\" aria-label=\"root component   pptxdocument permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Component - PPTXDocument</h4>\n<p>Root component 在 <code class=\"language-text\">react-dom</code> 內可以說是 <code class=\"language-text\">document</code> 物件，而在我們的 PPTXRenderer 中，該角色就是 <code class=\"language-text\">new officegen('pptx')</code> 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PPTXDocument</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pptx <span class=\"token operator\">=</span> <span class=\"token function\">officegen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pptx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而此物件會被當成 <code class=\"language-text\">rootContainerInstance</code> 被傳到其他 host config 的函式中。</p>\n<h4 id=\"slide-component\" style=\"position:relative;\"><a href=\"#slide-component\" aria-label=\"slide component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slide Component</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Slide</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>pptx<span class=\"token punctuation\">.</span><span class=\"token function\">makeNewSlide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 依據不同 Host environment 來決定要如何實作</span>\n    <span class=\"token comment\">// 在 react-dom 中，可能就是 document.appendChild(child)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// render the text node</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideInstance<span class=\"token punctuation\">.</span><span class=\"token function\">addText</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Slide component 會取得 root instance，並呼叫 <code class=\"language-text\">makeNewSlide()</code> 來創建 slide（這是屬於 <code class=\"language-text\">officegen</code> 的 API）。</p>\n<p>然後我們需要實作 <code class=\"language-text\">appendChild(child)</code>，因為我們希望能透過以下的方式來創建 slides：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span></code></pre></div>\n<p>能接收一個 <code class=\"language-text\">&lt;Text></code> component 當子節點來 render Text 到 slide 上，我們用 <code class=\"language-text\">officegen</code> 提供的 <code class=\"language-text\">addText</code> 來將 <code class=\"language-text\">child.content</code> 繪製上去。此函式會被 <code class=\"language-text\">appendInitialChild</code> 呼叫。</p>\n<h4 id=\"text-component\" style=\"position:relative;\"><a href=\"#text-component\" aria-label=\"text component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text Component</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本結構一樣，只是在 <code class=\"language-text\">appendChild</code> 中，我們不用 append 任何 child，反之，我們需要將 text component 收到的 text child 存入一個 content 變數，讓其 parent(slide component) 可以接收到。</p>\n<h4 id=\"注意事項\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事項</h4>\n<p>雖然我們在這邊都創建了 <code class=\"language-text\">Slide</code> 與 <code class=\"language-text\">Text</code> component，但是在真正使用在 jsx 裡面時（也就是 <code class=\"language-text\">App.js</code>）是不能直接 import 這邊的 component 來使用的，我們可以另外創建一個 string alias 給 <code class=\"language-text\">App.js</code> 使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Aliases for createInstance</span>\n<span class=\"token keyword\">const</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Slide <span class=\"token operator\">=</span> <span class=\"token string\">'SLIDE'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們上述所撰寫的 Component 會在 reconciler 的 <code class=\"language-text\">createInstance</code> 中依據這邊的 alias 來創建實例。</p>\n<h4 id=\"render-function\" style=\"position:relative;\"><a href=\"#render-function\" aria-label=\"render function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render function</h4>\n<p>最後我們要實作 render function 來真正取代一般的 <code class=\"language-text\">ReactDOM.render</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render component</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component<span class=\"token punctuation\">,</span> filePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 創建 Root component instance 當整個 react tree 的 root。 </span>\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 呼叫 create container，該函式會回傳一個 flushed fiber（完成工作的 fiber，代表可以 render）</span>\n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> PPTXRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 接著透過呼叫 updateContainer 來設定一個從根節點開始的 update，更新整個樹。</span>\n  PPTXRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Officegen generates a output stream and not a file</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Generate a pptx document</span>\n    container<span class=\"token punctuation\">.</span>pptx<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token function\">Events</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得我們一般在呼叫 <code class=\"language-text\">ReactDOM.render</code> 時，都會傳入兩個參數嗎？一個是我們的 root component，一個就是要掛載的 dom element，而在我們的範例中，我們一樣傳入 root component，但第二參數給予的是要產生的 ppt 的路徑，而非要掛載的 element，因為我們是要將 react component 寫入 pptx 檔案。</p>\n<p>最後在回傳的 Promise function 中，我們呼叫 <code class=\"language-text\">officegen</code> 的 <code class=\"language-text\">generate</code> 函式來將我們在前面 host config 的 lifecycle method 中所附加到根節點的內容（appendChild 的部分）寫入檔案。</p>\n<p>這樣就完成了我們的 Custom Renderer！</p>\n<p>完整程式碼在此 -> <a href=\"https://github.com/ArvinH/reapptx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reapptx</a></p>\n<h2 id=\"補充說明---update\" style=\"position:relative;\"><a href=\"#%E8%A3%9C%E5%85%85%E8%AA%AA%E6%98%8E---update\" aria-label=\"補充說明   update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>補充說明 - update</h2>\n<p>這次的範例裡面並沒有需要更新 Component 狀態，如果你需要實作一個能處理 state update 的 custom renderer，在你的 host config 中，除了 <code class=\"language-text\">appendChildToContainer()</code> 和 <code class=\"language-text\">removeChildFromContainer()</code> 外，還需要實作 <code class=\"language-text\">prepareUpdate()</code> 與 <code class=\"language-text\">commitUpdate()</code>。</p>\n<ul>\n<li><code class=\"language-text\">prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext)</code></li>\n</ul>\n<p>從他傳入的參數就可以看出，你可以藉由 <code class=\"language-text\">oldProps</code> 與 <code class=\"language-text\">newProps</code> 的比較來決定是否要進行更新，若不需要就回傳 null，要的話就回傳要更新的 payload。</p>\n<ul>\n<li><code class=\"language-text\">commitUpdate(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle)</code></li>\n</ul>\n<p>這個函式就是負責最後將要 <code class=\"language-text\">prepareUpdate</code> 回傳的 update payload 套用到實際 instance 上。</p>\n<p>關於<strong>更新</strong>的實際例子，可以參考 <a href=\"https://juejin.im/post/5c31b814f265da612b13bf23#heading-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 渲染器了解一下</a> 這篇文章，有實際的例子與詳細程式碼講解。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一不小心洋洋灑灑紀錄了一堆，但透過製作 custom react renderer，一步步把整個流程與其中用到的函式都釐清用途後，對於 react 在進行 reconciliation 與 rendering 的流程多了不少了解，也不再對 React 為什麼能套用在這麼多不同的環境中感到神秘了，算是很不錯的收穫！有耐心看完的讀者若發現錯誤或是不清楚的地方，歡迎留言告知指教。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=CGpMlWVcHok\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a Custom React Renderer</a></li>\n<li><a href=\"https://github.com/nitin42/Making-a-custom-React-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Making-a-custom-React-renderer</a></li>\n<li><a href=\"https://blog.atulr.com/react-custom-renderer-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">⚛️👆Beginners guide to React Renderers. How to build your own renderer from scratch?</a></li>\n<li><a href=\"https://juejin.im/post/5c31b814f265da612b13bf23#heading-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 渲染器了解一下?</a></li>\n<li><a href=\"https://github.com/facebook/react/tree/60016c448bb7d19fc989acd05dda5aca2e124381/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">facebook/react-reconciler</a></li>\n<li><a href=\"https://github.com/chentsulin/awesome-react-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome-react-renderer</a></li>\n</ol>","id":"3000840e-b58a-5470-a668-03d2f4d15680","fields":{"slug":"custom-react-renderer-pttx"},"frontmatter":{"date":"2020-02-26T19:38:40.000Z","title":"製作 Custom React renderer - 用 React 寫 ppt","tags":["web","react","renderer"],"type":"tech","slug":"custom-react-renderer-pttx"},"timeToRead":16}],"tagName":"renderer","type":"tech"}},"staticQueryHashes":["2123680655"]}