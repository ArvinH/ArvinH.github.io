{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/2-d-physics","result":{"pageContext":{"posts":[{"excerpt":"今年 地味ハロウィン 的第一名我給這位 LOL - パンダが足にまとわりついてしまう飼育員","html":"<blockquote>\n<p>今年 地味ハロウィン 的第一名我給這位 LOL - パンダが足にまとわりついてしまう飼育員</p>\n</blockquote>\n<!-- more -->\n<blockquote class=\"twitter-tweet\" data-dnt=\"true\" data-theme=\"light\"><p lang=\"ja\" dir=\"ltr\">パンダが足にまとわりついてしまう飼育員<a href=\"https://twitter.com/hashtag/%E5%9C%B0%E5%91%B3%E3%83%8F%E3%83%AD%E3%82%A6%E3%82%A3%E3%83%B3?src=hash&amp;ref_src=twsrc%5Etfw\">#地味ハロウィン</a> <a href=\"https://twitter.com/hashtag/DPZ?src=hash&amp;ref_src=twsrc%5Etfw\">#DPZ</a> <a href=\"https://t.co/GlHyjuZJ5R\">pic.twitter.com/GlHyjuZJ5R</a></p>&mdash; チカ (@chica_1107) <a href=\"https://twitter.com/chica_1107/status/1322368574380335104?ref_src=twsrc%5Etfw\">October 31, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>大約是在前陣子 GitHub 的 profile readme 很夯的時候，我在網路上看到了 matter.js 這個套件的作品，腦袋中就萌生一個點子想試試看，但因為真的沒有實際用處，也不確定效果好不好，就被我一直擱置，直到這個週末的空閒時間才決定要來實現它。</p>\n<p>整體想法是這樣的，我想從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</p>\n<p>這邊用我老婆☺️ 的名字作為範例先給大家看看成果：</p>\n<p><img src=\"/image/HSI-HOver-DropName-loop.gif\" alt=\"wife\"></p>\n<p>而放到 GitHub 頁面的效果如下：</p>\n<p><img src=\"/image/github-demo.gif\" alt=\"github\"></p>\n<p>效果跟我想像的還是有點差異，不過也有八成像了，今天就利用我製作的小玩具來介紹一下 matter.js 的基本使用方式。</p>\n<h2 id=\"基本介紹\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9\" aria-label=\"基本介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本介紹</h2>\n<p><img src=\"/image/matterjs-website.png\" alt=\"matterjs-website\"></p>\n<p>matter.js 是一套由 JavaScript 撰寫的物理引擎，讓你能透過 JS 在瀏覽器上模擬物理反應，可以輕易調整物體重量、質量、速度，甚至是密度、摩擦力等等變量，非常適合用在需要呈現物理效果的 2D 遊戲中。</p>\n<p>其提供的 API 也設計得簡單好用，只是雖然每個 API 都有文件，但內容都不太實用，如果你需要調整細節的話，要馬就自己慢慢更動嘗試，不然就得查看其原始碼會比較清楚。</p>\n<p>而至於支援度部分也無須擔心，瀏覽器支援 IE8+，手機的觸控 Event 也不成問題。我覺得是另一個如同 GSAP 一樣值得花點時間學習把玩的前端工具。</p>\n<p>在進入我們的範例製作解析前，我想先條列介紹 matter.js 中的常用套件，除了先了解整體的 Context 外，也能當作之後說明實作內容時的 reference。</p>\n<h3 id=\"matterjs-的通用模組\" style=\"position:relative;\"><a href=\"#matterjs-%E7%9A%84%E9%80%9A%E7%94%A8%E6%A8%A1%E7%B5%84\" aria-label=\"matterjs 的通用模組 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Matter.js 的通用模組</h3>\n<p>matter.js 的 API 定義的很易懂，既然是做物理模擬，當然就要有 <code class=\"language-text\">World</code>、<code class=\"language-text\">Body</code> 與 <code class=\"language-text\">Constraint</code>，而這些也是你使用 matter.js 所需要的基礎元件。</p>\n<p><strong>World</strong>: matter.js 透過此模組來創建一個模擬世界，可以微調世界中的一些屬性，像是重力、邊界等等，而一個世界當然是由多個 Bodies 所組成。</p>\n<p><strong>Bodies</strong>: Bodies 模組提供你方法去生成一些物體，像是圓形物體、方形物體等等，你也可以傳入 svg、img 去客製化物體形狀與樣式。產生的物體放入 World 中後就可以被 render 在畫面上。</p>\n<p><strong>Body</strong>: 利用 Bodies 產生的物件可以利用 Body 模組來進行進一步的操控。透過 Body，你可以旋轉、縮放、位移你的物體，也可以更改物體本身的密度、速度等等。換句話說，Body 讓你調整物體的物理特性。</p>\n<p><strong>Engine</strong>: 引擎，顧名思義就是驅動整個模擬物理世界的動力，根據 Body 的物理性質來精準掌控 <code class=\"language-text\">World</code> 內 <code class=\"language-text\">Body</code> 彼此間的物理現象，確保能模擬出符合設定的反應。是 matter.js 的核心。主要的<a href=\"https://github.com/liabru/matter-js/blob/master/src/core/Engine.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">程式碼</a>意外的沒有很長，可以大略看出 Engine 會負責控制 Bodies 之間的狀態更新。</p>\n<p><strong>Render</strong>: matter.js 有提供一個 Canvas based 的 Renderer，讓你能將 Engine 所催動的結果繪製出來，這個內建的 Render 模組主要是讓你用在開發與除錯上的，但對於簡單的動畫或遊戲，還是可以使用。另外要注意的是，該模組預設只會繪製出 wirefram 與向量，你要主動將 <code class=\"language-text\">render.options.wireframes</code> 設為 false，否則，以今天的模組為例（我們今天的範例也是用此模組開發。），他會變成這樣：</p>\n<p><img src=\"/image/matterjs-wireframe.png\" alt=\"matterjs-wireframe\"></p>\n<p>不過照這樣看來，依照官方的意思，如果你要使用 matter.js 來製作遊戲等等，基本上應該要自己實作 Render，你才能更好的控制畫面的變化。官方有提供一些 Renderer 的<a href=\"https://github.com/liabru/matter-js/wiki/Rendering#renderer-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>，也可以從其<a href=\"https://github.com/liabru/matter-js/blob/master/src/render/Render.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>參考。</p>\n<p><strong>Composites</strong>: 這個模組有點像是 Bodies 模組，差別在於 Bodies 模組讓你創建出 ”一個“ 物體，而 Composites 提供方法讓你創建出多個物體所組合而成的物體，像是 Stack、Pyramid 或甚至是 Car, Chain 等等常用的內建組合。</p>\n<p><strong>Composite</strong>: 如同 Body 對應於 Bodies，Composite 就是對應於 Composites 的模組，讓你控制由 Composites 創建出的組合物體的物理特性。</p>\n<p><strong>Constraint</strong>: Constraint 模組讓你能為兩個物體之間增加物理限制，像是兩物體一定要間隔一定距離等等。這個模組在我們這次的範例中我沒有用到，不過官網有不少範例都有使用，像是 <a href=\"https://brm.io/matter-js/demo/#newtonsCradle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Newton's Cradle</a>。</p>\n<p><strong>MouseConstraint</strong>: 如同 Constraint，這個模組讓你增加滑鼠與物體之間的”約束”，透過建立物體與滑鼠的限制，就可以讓使用者透過滑鼠與你創建的物體互動。前面的範例中沒用到，但後面我會稍微帶到如何使用。</p>\n<h2 id=\"知道了基本模組就從做中學吧\" style=\"position:relative;\"><a href=\"#%E7%9F%A5%E9%81%93%E4%BA%86%E5%9F%BA%E6%9C%AC%E6%A8%A1%E7%B5%84%E5%B0%B1%E5%BE%9E%E5%81%9A%E4%B8%AD%E5%AD%B8%E5%90%A7\" aria-label=\"知道了基本模組就從做中學吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知道了基本模組，就從做中學吧</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Engine <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Engine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Render <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Render<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Composites <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Composites<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> World <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bodies <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Bodies<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Body <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">;</span></code></pre></div>\n<p>起手式就是先將先前介紹過的模組都宣告出來。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// create engine</span>\n<span class=\"token keyword\">const</span> engine <span class=\"token operator\">=</span> Engine<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> world <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>world<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// create renderer</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> Render<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  element<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  engine<span class=\"token operator\">:</span> engine<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">920</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著創建 instance，利用 <code class=\"language-text\">Engine.create()</code> 創造 Engine 實例，而 <code class=\"language-text\">engine.world</code> 最後會需要傳給 <code class=\"language-text\">World</code> 模組，可以想像成是此引擎（Engine） 所驅動的世界（world）。</p>\n<p><code class=\"language-text\">Render</code> 的部分我們要指定使用的 engine、要渲染的 root element，以及寬高等基本選項。更細部的 properties 可以參考<a href=\"https://brm.io/matter-js/docs/classes/Render.html#properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網文件</a>，以我們的範例來說，只需要這樣就夠了。</p>\n<p>到目前為止，我們設定好了 <code class=\"language-text\">Engine</code> 與 <code class=\"language-text\">Render</code> 的實例，代表我們已經準備好了一個虛擬的世界，然而光是準備好還不夠，我們需要“啟動”它。</p>\n<p>所謂的啟動，其實就是要不斷地去呼叫 <code class=\"language-text\">Engine.update()\b</code> 來觸發引擎計算，或是讓 Renderer 更新畫面，執行類似下面的動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Engine<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而實際上 matter.js 內有另一個模組 <code class=\"language-text\">Matter.Runner</code>，可以來幫忙運行引擎與觸發 Render，在 <code class=\"language-text\">Engine</code> 與 <code class=\"language-text\">Render</code> 物件內都有個叫 <code class=\"language-text\">run</code> 的 helper 函式，就是用到此內建 Runner 模組，只要將實例放入，matter.js 的 <code class=\"language-text\">Runner</code> 就會幫忙執行 Runner 該做的事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Engine<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRender<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不過，與前面提到的 <code class=\"language-text\">Matter.Render</code> 類似，依照官網說法，內建的 <code class=\"language-text\">Matter.Runner</code> 主要也是開發與除錯用途，只適合用在簡單的小應用上。</p>\n<h3 id=\"萬事俱備只欠東風\" style=\"position:relative;\"><a href=\"#%E8%90%AC%E4%BA%8B%E4%BF%B1%E5%82%99%E5%8F%AA%E6%AC%A0%E6%9D%B1%E9%A2%A8\" aria-label=\"萬事俱備只欠東風 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>萬事俱備，只欠東風</h3>\n<p>Engine 與 Render 都啟動了，虛擬世界已上線，再來就只要往裡面丟入物體就好了。</p>\n<p>分析一下我的點子：<em>從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</em></p>\n<p>大致需要幾個條件：</p>\n<ul>\n<li>一堆小方塊來堆疊出 contribution graph。</li>\n<li>小方塊要能自由墜落，而代表名字部分的小方塊到某個點時需要停住。</li>\n<li>小方塊要能有噴散的效果。</li>\n</ul>\n<p>從 matter.js 的官網中可以找到許多範例，從那些範例內，可以大致摸索出自己需要哪些模組才能拼湊出這樣的效果。</p>\n<p>首先，可以利用 <code class=\"language-text\">Composites.stack</code> <a href=\"https://brm.io/matter-js/docs/classes/Composites.html#method_stack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a> 來製造出堆疊好的 contribution graph：</p>\n<blockquote>\n<p>API: Matter.Composites.stack(xx, yy, columns, rows, columnGap, rowGap, callback)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...略</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      fillStyle<span class=\"token operator\">:</span> color<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 隨機給定格子顏色</span>\n      strokeStyle<span class=\"token operator\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...略</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Composites.stack</code> 前面六個參數可以定義一個 grid 空間，範例中我們在相對於 <code class=\"language-text\">Render</code> 設定範圍的 x 軸 125px 與 y 軸 15px 的位置開始放置 stack，並定義該 grid 是 45 x 7 的格子（GitHub 上每行七天，大約 45 週），每個方塊大小 15px x 15px，格子與格子之間我們不需要空格，因此 columnGap 與 rowGap 都填 0。</p>\n<p>而最後的 callback 函數中，可以組合多個 body 來擺放在其 grid 空間中。舉例來說，我們想要繪製出 contribution graph 的話，就是在 callback 函式中，利用 <code class=\"language-text\">Bodies.rectangle</code> 來產生一個個的小方塊，在這個 callback 中可以做很多事情，包含定義方塊的顏色、狀態等等。 </p>\n<p>到這邊可以繪製出一個還不錯的 contribution graph：</p>\n<p><img src=\"/image/github-graph.png\" alt=\"github-graph\"></p>\n<h3 id=\"那名字呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%90%8D%E5%AD%97%E5%91%A2\" aria-label=\"那名字呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那名字呢？</h3>\n<p>要客製化 contribution graph 好像很不少方式，像是<a href=\"https://hackernoon.com/hack-your-github-contribution-graph-d88bdb417351\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>，但我沒想那麼多 LOL 畢竟一開始只是想實驗看看，所以就用最土炮的方式，用 <a href=\"https://www.pixilart.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pixilart</a> 手動在 45x7 的格子上用 pixel art 的方式寫出名字，然後再慢慢把格子數出來，建立一個雙層陣列來存：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nameBlock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然後在剛剛的 <code class=\"language-text\">Composites.stack</code> 的 callback 函數中，我就能判斷當下繪製的 body（rectangle）是不是屬於名字的一部分，進一步做處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 根據當下的 rectangle 位置 (x, y) 與 nameBlock 做比對</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">static</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> indexX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> indexY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> nameBlock<span class=\"token punctuation\">[</span>indexY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 若是屬於名字的一部分，設定為 static，然後給予不同的顏色設定</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block <span class=\"token operator\">&amp;&amp;</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#229A3B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#196126'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#EBEDEF'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#C5E48B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isStatic<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>繪製成果：</p>\n<p><img src=\"/image/matterjs-githubgraph-withname.png\" alt=\"withName\"></p>\n<p>另外，在上面我自製的 <code class=\"language-text\">static</code> 函式中，會根據 rectangle 是否屬於名字的一部分，回傳 <code class=\"language-text\">isStatic</code> 布林值，這個值其實是屬於 <code class=\"language-text\">Body</code> 的一個 property，若 <code class=\"language-text\">isStatic</code> 設為 true，則該物體就不會受到其他物體的物理影響，很適合用在製作牆壁之類的物體，也恰好可以用來滿足我希望名字能被定住的需求。</p>\n<p>而由於我希望方塊們是在掉落到一半的時候，名字才卡住，而其餘的方塊得隨著地心引力繼續下落，所以我必須要延緩設定 <code class=\"language-text\">isStatic</code> 的時間點，不能在我使用 <code class=\"language-text\">Bodies</code> 創建 rectangle 時就設定，需要來個 setTimeout 才行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Body<span class=\"token punctuation\">.</span><span class=\"token function\">setStatic</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> isStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>由於因為“物理界”的正常現象，方塊會從我們設定的 y 軸 15px 的地方掉落，而在下落的 800ms 時，我們透過 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setStatic\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Body.setStatic()</code></a> 這個 method 讓屬於名字部分的方塊變為 static，這樣就能達到名字掉落一半時定住，其餘方塊繼續掉落的效果：</p>\n<p><img src=\"/image/name-fix-block-drop.gif\" alt=\"name-fix-block-drop\"></p>\n<h3 id=\"增加阻礙摩擦力與速度\" style=\"position:relative;\"><a href=\"#%E5%A2%9E%E5%8A%A0%E9%98%BB%E7%A4%99%E6%91%A9%E6%93%A6%E5%8A%9B%E8%88%87%E9%80%9F%E5%BA%A6\" aria-label=\"增加阻礙摩擦力與速度 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>增加阻礙、摩擦力與速度</h3>\n<p>想要的效果達成一半了，就是方塊掉落速度太線性了，而且直直落到畫面外也有點好笑，我們需要製造一點障礙物以及改變物體的速度，產生撞擊的效果。</p>\n<p>首先，增加障礙物。</p>\n<p>要增加障礙物很簡單，matter.js 的範例裡面很多都有利用 <a href=\"https://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Bodies.rectangle</code></a> 去創建牆壁，控制物體的活動範圍，這在製作遊戲時也是很重要的一部分。我們也可以如法泡製，增加四面八方的牆壁：</p>\n<blockquote>\n<p>API: Matter.Bodies.rectangle(x, y, width, height, [options])</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wallOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    fillStyle<span class=\"token operator\">:</span> <span class=\"token string\">'transparernt'</span><span class=\"token punctuation\">,</span>\n    strokeStyle<span class=\"token operator\">:</span> <span class=\"token string\">'#FBFBFB'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> topWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bottomWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rightWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">880</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> leftWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>牆壁的製作就是利用前面提到的 <code class=\"language-text\">isStatic</code> 屬性，讓他固定住，然後設定好擺放位置與長寬即可。唯一要注意的是，牆壁的長度要調整，不能四面都ㄧ樣長，這樣小方塊撞擊到牆壁後，還能從邊緣掉落或向外噴散，效果會好一點。</p>\n<p>加了牆壁後，讓小方塊不會直直掉落，有了一些回饋感：</p>\n<p><img src=\"/image/matterjs-wall.gif\" alt=\"matter-js-wall\"></p>\n<p>接著是物體的速度。</p>\n<p><code class=\"language-text\">Matter.Body</code> 有提供 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setVertices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">setVelocity</code></a> 這個屬性可以立即增加物體本身的線性速度，調整的方式為給予一個向量，因此可以調整施予速度的方向性：</p>\n<blockquote>\n<p>API: Matter.Body.setVertices(body, vertices), Vertor: { x: 0, y: 0 }</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocity</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這樣就會讓一個小方塊往 x 軸 3，y 軸 -10 的方向增加速度，再加上先前加入的牆壁與固定住的名字方塊，產生的撞擊反彈就能達成這樣的效果：</p>\n<p><img src=\"/image/matter-js-velocity.gif\" alt=\"velocity\"></p>\n<p>除此之外，<code class=\"language-text\">Bodies.rectangle</code> 在宣告時能夠傳入調整物理特性的 properties，像是 <code class=\"language-text\">frictionAir</code> 可以改變物體的空氣摩擦力，數值越高，物體掉落越慢，並且都能透過 <code class=\"language-text\">Matter.Body</code> 去操控，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Body<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>相關 <a href=\"https://brm.io/matter-js/docs/classes/Body.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API</a> 官網都有條列出來。</p>\n<p>將上述調整物體物理特性的函式呼叫搭配適當的 setTimeout，就能夠完成我們今天的範例效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isStatic<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">.</span><span class=\"token function\">setStatic</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> isStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isStatic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocity</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>喔對了，最後當然要記得把我們產生的 Stack composites 與牆壁放入模擬的世界中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// const world = engine.world;</span>\nWorld<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  stack<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// walls</span>\n  topWall<span class=\"token punctuation\">,</span>\n  bottomWall<span class=\"token punctuation\">,</span>\n  rightWall<span class=\"token punctuation\">,</span>\n  leftWall\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing...</h3>\n<p>matter.js 主打物理引擎，當然不是單純用來製造動畫，而是用來製作遊戲等等，也就是說要能與使用者互動，而方法就是一開始提到過的 <code class=\"language-text\">MouseConstraint</code>，雖然這次範例用不著這個東西，但還是放個使用方法在這邊供參考：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Mouse <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MouseConstraint <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>MouseConstraint<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> Mouse<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouseConstraint <span class=\"token operator\">=</span> MouseConstraint<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mouse<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">,</span>\n  constraint<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    stiffness<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      visible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nWorld<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">,</span> mouseConstraint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用法其實很簡單，其中 constraint 參數 <code class=\"language-text\">visible</code> 代表著滑鼠的拖拉軌跡會不會呈現出來，而 stiffness 可以算是調整所設定的 constraint 的韌度，調整該值可以影響物體受牽制（與滑鼠互動）後產生的彈性。文字可能有點難以描述，有需要使用的時候可以從官網文件查看可調整的參數值，試試看效果再決定要如何設置。</p>\n<p>上述設定的效果如下：</p>\n<p><img src=\"/image/matter-js-mouse.gif\" alt=\"matter-js-mouse\"></p>\n<p>最後放上程式碼連結供各位參考：<a href=\"https://codepen.io/arvin0731/pen/qBNoLQv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/arvin0731/pen/qBNoLQv</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Matter.js 應該算是蠻久的一個工具了，以使用上來說非常容易上手，做些小動畫小遊戲蠻適合的，至於要真的用來製作複雜的遊戲的話，可能還是要再多研究他的效能如何，畢竟我這次並沒有觸碰到那塊，就歡迎有接觸過的讀者分享了！</p>\n<p>畢竟這個範例也是拼拼湊湊而來的，週末小玩具就是這樣，的確沒辦法理解到他底層是如何實作，但是至少完成了想要的效果，然後也知道了這個工具的一些基本用法，之後有需要時可以快速拿來使用。</p>\n<p>不過，提醒自己也提醒大家，要記得撥出時間去理解底層原理，因為這才是能讓你成長的要素，共勉之啦！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://brm.io/matter-js/docs/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">matter-js website</a></li>\n<li><a href=\"https://code.tutsplus.com/series/getting-started-with-matterjs--cms-1186\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started with Matter.js</a></li>\n<li><a href=\"https://www.pixilart.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pixilart</a></li>\n</ol>","id":"8449f260-f743-5214-ab33-8d991fd3b091","fields":{"slug":"matterjs-intro"},"frontmatter":{"date":"2020-11-01T13:37:30.000Z","title":"使用 Matter.js 2D 物理引擎製作動畫","tags":["web","matterjs","2d physics","for fun"],"type":"tech","slug":"matterjs-intro"},"timeToRead":15}],"tagName":"2d physics","type":"tech"}},"staticQueryHashes":["2123680655"]}