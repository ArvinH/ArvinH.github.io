{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/selector","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：LINION - Mountain Dude feat.雷擎L8CHING","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/LN4rYKaNV1g\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LINION - Mountain Dude feat.雷擎L8CHING</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/LN4rYKaNV1g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近經手的一個專案採用 React Hooks 與 Context API 實作類似 Redux 的狀態管理，也就是利用 <code class=\"language-text\">useReducer</code>、<code class=\"language-text\">createContext</code> 等 API 來實作全域的 Store 與 Dispatch Actions。</p>\n<p>這樣做其實挺方便的，在狀態管理的流程上跟 Redux 的思維一樣，但設置上更為簡單。</p>\n<p>不過有個問題是，<strong>ㄧ但任何 context 的值更新，所有使用 <code class=\"language-text\">useContext</code> 的 component 都會被通知到，並且進行 render，即便該 component 需要的 state 可能根本沒有變動\u001d。</strong></p>\n<p>簡單看個範例(modified from <a href=\"https://github.com/dai-shi/use-context-selector/tree/master/examples/01_minimal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>)：</p>\n<p><img src=\"/image/context-perf-issue-sample-flamegraph.gif\" alt=\"demo\"></p>\n<p>從上圖中 devtool 中的 flamegraph 可以明顯看出當點選 Counter 時，TextBox 也會觸發 render，因為他們共享同一個 Context。</p>\n<p>附上 codesandbox 供參考（另外，這邊提到的 render 主要是 VDOM 的 render，範例中為了凸顯效果，在其中放了 Math.random() 讓 DOM 一定會更新，否則實際上 TextBox 在值都不變的狀態下，DOM 是不會更新的）：</p>\n<iframe src=\"https://codesandbox.io/embed/context-api-perf-issue-14v1r?autoresize=1&fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"context-api-perf-issue\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>先不論頁面複雜時可能會有的潛在效能問題，光是想到會有這種無謂的 render，應該很多人就會覺得不舒服。</p>\n<p>而實際上，<strong>Context API 一開始就不是拿來給你作用在更新頻率高的狀態上的。</strong></p>\n<p><a href=\"https://reactjs.org/docs/context.html#when-to-use-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>雖然沒有明講這件事，但從他們給的範例圍繞在 <code class=\"language-text\">theme</code> 與 <code class=\"language-text\">user data</code> 就可略知一二，另外在 react-redux v6 版本推出時的<a href=\"https://github.com/reduxjs/react-redux/issues/1177#issue-406051556\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">討論</a>中也有提到。</p>\n<p>所以我們應該要就此打住，改回用 react-redux 嗎？</p>\n<p>也不一定，創造出問題然後解決，就是工程師的職責啊，怎麼能逃避！</p>\n<p>玩笑話，實務上當然自己斟酌，如果是公司內部專案或是你自己的 side project，當然是能多嘗試就嘗試，我並不覺得一昧遵守 best practice 是好的。</p>\n<p>另外，官方團隊也是有<a href=\"https://twitter.com/acdlite/status/1250097231568334848\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">意識到這件事情</a></p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">We indeed have observed performance problems when propagating context to large trees. <a href=\"https://twitter.com/joshcstory?ref_src=twsrc%5Etfw\">@joshcstory</a> is doing some great research on how to make it better. We do have a plan, but it will require a significant refactor so it might take a while to land. <a href=\"https://t.co/gtpLEyfgU9\">https://t.co/gtpLEyfgU9</a></p>&mdash; Andrew Clark (@acdlite) <a href=\"https://twitter.com/acdlite/status/1250097231568334848?ref_src=twsrc%5Etfw\">April 14, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>並且在 <a href=\"https://github.com/reactjs/rfcs/pull/119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC: Context selectors</a> 中曾有蠻熱絡的討論，雖然依照現況來說沒有明確的計劃針對這個問題去做改善，但 RFCs 提出的概念已經有類似實作了，而今天我就是想要來解析ㄧ下到底是怎麼在不更動架構，利用現有 API 下去解決這個問題。</p>\n<h2 id=\"解決方法---usecontextselector\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95---usecontextselector\" aria-label=\"解決方法   usecontextselector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方法 - useContextSelector</h2>\n<p>除了在頁面不複雜的狀態下可以透過組合<a href=\"https://github.com/reactjs/rfcs/pull/119#issuecomment-649848439\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">多個 context</a> 來解決，同事找到的這套 lib - <a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a> 實作了 RFCs 中的概念，提供了 <code class=\"language-text\">selector</code> 給 Context 使用。</p>\n<p>以先前同樣的範例來看看使用後的效果：</p>\n<p><img src=\"/image/context-perf-issue-sample-flamegraph-useContextSelector.gif\" alt=\"Demo with context selector\"></p>\n<a href=\"https://codesandbox.io/s/context-api-perf-issue-usecontextselector-nk0ho?fontsize=14&amp;hidenavigation=1&amp;theme=dark\">\n  <img alt=\"Edit context-api-perf-issue (useContextSelector)\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>\n<p>從圖中的 flamegraph 可以看到，在一樣的操作下，TextBox 在所有的 commits 中都沒有被觸發 render，只有 Counter 有執行 render。</p>\n<p>若是再仔細看一點，你也會發現，跟原本的版本比起來，Commits 數量多了一倍，並多了一個 Anonymous (memo) 的 component。</p>\n<p>而這多出來的部分就是 <a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a> 能 <strong>bail out of rendering</strong> 的原因，接下來我們就從程式碼來理解實作原理！</p>\n<p>（題外話，<code class=\"language-text\">bail out of rendering</code> 是我在查詢相關資訊時，常常看到的句子，覺得是很貼切的描述，所以保留原文，加上我也找不到合適的中文翻譯...）</p>\n<h2 id=\"程式碼解析\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BC%8F%E7%A2%BC%E8%A7%A3%E6%9E%90\" aria-label=\"程式碼解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程式碼解析</h2>\n<p><code class=\"language-text\">use-context-selector</code> 的<a href=\"(https://github.com/dai-shi/use-context-selector/blob/master/src/index.js)\">程式碼</a>很短，就 100 多行而已，所以要直接看也是 ok，但我一般都習慣先從 lib 的使用方式下手，觀察出我們應該先閱讀哪部分的程式碼。</p>\n<p>我們只取上面範例中的 Counter 來觀察：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createContext<span class=\"token punctuation\">,</span>\n  useContextSelector<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./use-context-selector'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useContextSelector</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContextSelector</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Provider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>context<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>context<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Counter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StrictMode<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>跟我們一般使用 Context API 的方式相同，需要用 <code class=\"language-text\">createContext</code> 來創建 context，只不過這邊用到的並不是 React 原生的 createContext，而是 <code class=\"language-text\">use-context-selector</code> 提供的。</p>\n<p>另外就是與一般 <code class=\"language-text\">useContext</code> 不同，在 Component 中使用 <code class=\"language-text\">useContextSelector</code> 來取得 context 中的 state 與 dispatch 函式（React.useReducer() 產生的）。</p>\n<p><code class=\"language-text\">useContextSelector</code> 很好理解，就是多傳一個 selector 參數進去選取我們需要的 context value，但為什麼這邊他要我們使用它提供的 <code class=\"language-text\">createContext</code> 呢？</p>\n<p>看來關鍵就在這邊，所以我們直接先從 <a href=\"https://github.com/dai-shi/use-context-selector/blob/master/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a> 中的 <code class=\"language-text\">createContext</code> 函式看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make changedBits always zero</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// shared listeners (not ideal)</span>\n  context<span class=\"token punctuation\">[</span><span class=\"token constant\">CONTEXT_LISTENERS</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hacked provider</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token function\">createProvider</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">[</span><span class=\"token constant\">CONTEXT_LISTENERS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// no support for consumer</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看出他其實也是使用 <code class=\"language-text\">React.createContext</code> 來創建 Context，只是他多傳了一個參數進去。</p>\n<p>🤔 什麼時候 <code class=\"language-text\">React.createContext</code> 有第二個參數選項了？</p>\n<p>從上面的註解來看，傳入的第二個參數會回傳一個叫做 <code class=\"language-text\">changedBits</code> 的值，Google 一下後發現原來是沒有寫在文件上的 API，而且兩年前新的 Context API 出來時就已經有不少人在討論了（原來只是自己學識淺薄😅）</p>\n<p>在先前提到的 <a href=\"https://github.com/reactjs/rfcs/pull/119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC: Context selectors</a> 中也是想要利用這個 API。</p>\n<p>這第二個參數叫做 <code class=\"language-text\">calculateChangedBits</code>，他會接受 Context 的新值與舊值作為 input，最後 return <code class=\"language-text\">changedBits</code>，如果 <code class=\"language-text\">changedBits</code> 為 0，Context Provider 就不會觸發更新；而Context Consumer 中也能傳入一個叫做 <code class=\"language-text\">unstable_observedBits</code> 的 props，若是 <code class=\"language-text\">unstable_observedBits &amp; changedBits !== 0</code>，Consumer 也不會更新。</p>\n<p>雖然 <code class=\"language-text\">observedBits</code> 是 unstable 的，但在 <a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/__tests__/ReactNewContext-test.js#L65\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-reconciler 的 NewContext test</a> 中，他們就是利用 <code class=\"language-text\">changedBits</code> 與 <code class=\"language-text\">observedBits</code> 來做更新的測試。</p>\n<p>這邊再羅列幾篇講解得比較詳細的文章供大家參考：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/42654080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不一樣的 React context</a></li>\n<li><a href=\"https://medium.com/@koba04/a-secret-parts-of-react-new-context-api-e9506a4578aa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Secret parts of React New Context API</a></li>\n<li><a href=\"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React tips — Context API (performance considerations)</a></li>\n</ul>\n<p>總而言之，我們是可以客製化一個函式來決定 Context 的值更動時，需不需要觸發更新。</p>\n<p>但這個函式是在 <code class=\"language-text\">createContext</code> 時就得傳入的，而不是 <code class=\"language-text\">useContext</code>，我們的 Component 沒辦法動態去傳各自的 Selector。</p>\n<p>也正是如此，<code class=\"language-text\">use-context-selector</code> 就直接以 <code class=\"language-text\">() => 0</code> 作為 <code class=\"language-text\">calculateChangedBits</code> 函式，讓 React Context Provider 拿到的 <code class=\"language-text\">changedBits</code> 永遠為 0。</p>\n<p>這樣做會讓 Provider 永遠不會跟隨著 Context 變動而觸發 render，而是由我們自己來判斷何時要做更新，為此，<code class=\"language-text\">use-context-selector</code> 實作了另一個 <code class=\"language-text\">context.Provider</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">OrigProvider<span class=\"token punctuation\">,</span> listeners</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we use layout effect to eliminate warnings.</span>\n    <span class=\"token comment\">// but, this leads tearing with startTransition.</span>\n    <span class=\"token comment\">// eslint-disable-next-line react-hooks/rules-of-hooks</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we call listeners in render for optimization.</span>\n    <span class=\"token comment\">// although this is not a recommended pattern,</span>\n    <span class=\"token comment\">// so far this is only the way to make it as expected.</span>\n    <span class=\"token comment\">// we are looking for better solutions.</span>\n    <span class=\"token comment\">// https://github.com/dai-shi/use-context-selector/pull/12</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>OrigProvider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">createProvider</code> 除了包裹 React 原生的 Context Provide 外，額外接收一個 <code class=\"language-text\">listeners</code> 參數，而這就是 Custom Provider 的主要目的。</p>\n<p>剛剛提到由於 <code class=\"language-text\">changedBits</code> 都會是零，所以需要我們主動觸發更新，而觸發的方式就是直接將 listener 註冊到 Customer Provder 中，而 listener 就是每個 Component 用來<strong>針對目前最新的 context value 做 select 以決定要不要更新的函式</strong>，詳細實作等等就會說明。</p>\n<p>現在重新拿範例程式碼來檢視一下目前為止的邏輯：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Provider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>context<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>context<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Counter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StrictMode<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>將 <code class=\"language-text\">useReducer</code> 回傳的 <code class=\"language-text\">state</code> 與 <code class=\"language-text\">dispatch</code> 當作 Context Value 傳入 Provider，當 <code class=\"language-text\">Counter</code> 裡面透過 <code class=\"language-text\">dispatch</code> 去更新 Context 內的 <code class=\"language-text\">state</code> 時，由於此時的 Provider 是客製化後的 Provider，他會進行 render，並在 render 的過程中，呼叫所有與他直接 subscribe 的 listener，由 listener 來判斷與執行 component 的 re-render 與否。</p>\n<p>這層客製化的 Provider 也就是我們先前在 flamegraph 中看到多出來的一層 Anonymous (memo) component，也解釋了為什麼 commits 數量會多了一倍，就是因為這個 Anonymous component 所進行的 render。</p>\n<p>最後我們來看看 listener 是怎麼產生與運作的，我們拆三個部分來說明：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useContextSelector</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span><span class=\"token constant\">CONTEXT_LISTENERS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useContextSelector requires special context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在一開始 <code class=\"language-text\">createContext</code> 時，其實有在 context 中塞一個 <code class=\"language-text\">Set()</code>：</p>\n<p><code class=\"language-text\">context[CONTEXT_LISTENERS] = new Set();</code></p>\n<p>而在 <code class=\"language-text\">useContextSelector</code> 中的一開始，我們就會取出這個 set，目的在於<strong>要放入呼叫 <code class=\"language-text\">useContextSelector</code> 的 component 的 listener。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> selected <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token operator\">:</span> selector<span class=\"token punctuation\">,</span> <span class=\"token comment\">// last selector \"f\"unction</span>\n    v<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span> <span class=\"token comment\">// last \"v\"alue</span>\n    s<span class=\"token operator\">:</span> selected<span class=\"token punctuation\">,</span> <span class=\"token comment\">// last \"s\"elected value</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>接著準備一些 listener 需要的東西：</p>\n<ol>\n<li>當執行完 Selector，確認 Component 需要更新後，我們得有個 <code class=\"language-text\">forceUpdate</code> 函式來觸發 render，這邊的實作方式是額外使用 <code class=\"language-text\">React.useReducer</code> 產生一個不斷 +1 的 reducer，來達到效果。</li>\n<li>我們還是需要一個真正的 <code class=\"language-text\">React.context</code> 來紀錄 Globle state。</li>\n<li>透過 <code class=\"language-text\">React.useRef</code> 紀錄當下的 selector function、context value 與 selector 選出的值。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nextValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>v <span class=\"token operator\">===</span> nextValue\n        <span class=\"token operator\">||</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>nextValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ignored (stale props or some other reason)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  listeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>listeners<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> selected<span class=\"token punctuation\">;</span></code></pre></div>\n<p>再來實作 listener，listener function 接受的 <code class=\"language-text\">nextValue</code> 就是 Custom Provider 取得的最新的 Context value，listener function 就能夠利用這個 <code class=\"language-text\">nextValue</code> 與我們先前存放在 <code class=\"language-text\">ref</code> 中的值做比較，若是 Context Value 完全相等，或是 Selected 的值也沒有變動（用 <code class=\"language-text\">ref</code> 中存好的 selector function 對 <code class=\"language-text\">nextValue</code> 做選取），那就不用 render。</p>\n<p>反之，若發現值不同，需要更新，就會呼叫 <code class=\"language-text\">forceUpdate()</code> 強制讓這個 <code class=\"language-text\">useContextSelector</code> 進行 render，也就會跟著觸發使用 <code class=\"language-text\">useContextSelector</code> 的 Component 進行 render，更新 <code class=\"language-text\">ref</code> 內的值，並回傳最新的 <code class=\"language-text\">selected value</code>。</p>\n<p>而這邊建立的 listener 會放入一開始從 Context 取出的 <code class=\"language-text\">Set()</code> 中，Custom Provider 在 render 時，就能取出運行。</p>\n<h3 id=\"總結一遍流程\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90%E4%B8%80%E9%81%8D%E6%B5%81%E7%A8%8B\" aria-label=\"總結一遍流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結一遍流程</h3>\n<p><code class=\"language-text\">use-context-selector</code> 替 Context API 的效能問題所找到的 escape hatch 流程如下：</p>\n<ol>\n<li>利用 <strong>Custom Provider</strong> 與 <strong>Custome createContext</strong> 迫使 changedBits 總是回傳 0，停止所有 Context 使用者的自動更新。</li>\n<li>建立一個 global listeners 的 Set 在 Context 中，讓 Components 直接 subscribe 到 <Provider> (<em>Custom Provider</em>)</li>\n<li>有使用 <code class=\"language-text\">useContextSelector</code> 的 components 會建立 listener，放入 Context Set 中進行 subscribe。</li>\n<li>當 <Provider> re-renders 時， 觸發所有 subscribers。</li>\n<li>listener 執行，檢查 Selector，檢查 Context Value，只針對有需要更新的 Component 做 forceUpdate。</li>\n</ol>\n<p>這就是 <code class=\"language-text\">use-context-selector</code> 所找到的出路，讓你在 global context update 時，<code class=\"language-text\">bail out of rendering</code>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p><code class=\"language-text\">use-context-selector</code> 的作者自己也說了這個套件有很多<a href=\"https://github.com/dai-shi/use-context-selector#limitations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">限制</a>與<a href=\"https://github.com/dai-shi/reactive-react-redux/issues/29#issuecomment-512785639\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不足</a></p>\n<p>即便他有 <a href=\"https://github.com/dai-shi/use-context-selector/pull/12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v2</a> 版本的實作，是建立在比較有機會實作的 RFC 上，但整體來說還是不能算一個穩定的解決方案。</p>\n<p>但是作為使用在內部或是個人專案上來說，是個還不錯的選擇。尤其是簡單易懂的實作，就算是出了什麼問題，只要理解他的原理，也是能找得出問題所在。</p>\n<p>這次也是透過閱讀其程式碼，才對 Context API 有更多了解，從中延伸閱讀了很多包含 react-redux v6 當初的效能 issue、RFCs 上的討論、關於 <code class=\"language-text\">calculateChangedBits</code> 的知識，或甚至是 react scheduling 的一些內部實作。</p>\n<p>這也回應到我最開始所說的，有時候太過於遵循 best practice，會讓你失去研究一些有趣問題或是學習的機會，甚至透過走這些旁門走道，會讓你對於 best practice 之所以為 best practice 的原因更加深刻。</p>\n<p>分析程式碼的文章有點冗長鬆散，如果你有看到這邊，感謝你的閱讀，若有任何問題也歡迎指教討論！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a></li>\n<li><a href=\"https://reactjs.org/docs/context.html#when-to-use-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">When to use Context</a></li>\n<li><a href=\"https://github.com/reduxjs/react-redux/issues/1177#issue-406051556\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React-Redux Roadmap: v6, Context, Subscriptions, and Hooks</a></li>\n<li><a href=\"https://github.com/reactjs/rfcs/pull/119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC: Context selectors</a></li>\n<li><a href=\"https://github.com/dai-shi/reactive-react-redux/issues/29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why calculateChangedBits = () => 0</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/42654080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不一樣的 React context</a></li>\n<li><a href=\"https://medium.com/@koba04/a-secret-parts-of-react-new-context-api-e9506a4578aa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Secret parts of React New Context API</a></li>\n<li><a href=\"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React tips — Context API (performance considerations)</a></li>\n</ol>","id":"8df5b74e-afd6-5127-a8dd-3a1262c3f945","fields":{"slug":"use-context-selector-src-analysis"},"frontmatter":{"date":"2020-09-12T11:19:30.000Z","title":"Context API 效能問題 - use-context-selector 解析","tags":["react","context api","selector","state management"],"type":"tech","slug":"use-context-selector-src-analysis"},"timeToRead":13}],"tagName":"selector","type":"tech"}},"staticQueryHashes":["2123680655"]}