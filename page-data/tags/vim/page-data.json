{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/vim","result":{"pageContext":{"posts":[{"excerpt":"\"欸，你都用什麼編輯器？\"  \"小畫家啊\" 其實有蠻長一段時間都用寫code，但不管是在研究所時期或是現在工作以後，幾乎都需要連線到遠端開發機作業，即便可以用掛載磁碟的方式在本地端編輯，但若是加個VPN再參雜一些種花點心的網路... 恩，就這樣我又回到的懷抱。以往都直接抓vgod大神的設定檔來改，但你知道改code改到最後都會想說直接重寫還比較快，加上我用到的套件其實不多，所以乾脆自己設定一個。 基本上是使用Vundle這套plug-in manager 來幫我安裝所有的plugin…","html":"<blockquote>\n<p>\"欸，你都用什麼編輯器？\"  \"小畫家啊\"</p>\n</blockquote>\n<!-- more --> \n<p>其實有蠻長一段時間都用<code class=\"language-text\">sublime text</code>寫code，但不管是在研究所時期或是現在工作以後，幾乎都需要連線到遠端開發機作業，即便可以用掛載磁碟的方式在本地端編輯，但若是加個VPN再參雜一些種花點心的網路...</p>\n<p>恩，就這樣我又回到<code class=\"language-text\">vim</code>的懷抱。以往都直接抓<a href=\"https://github.com/vgod/vimrc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vgod</a>大神的設定檔來改，但你知道改code改到最後都會想說直接重寫還比較快，加上我用到的套件其實不多，所以乾脆自己設定一個。</p>\n<p>基本上是使用<a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vundle</a>這套plug-in manager 來幫我安裝所有的plugin，是我目前使用起來最簡潔的工具了</p>\n<p>以下是我的<code class=\"language-text\">vimrc</code>，可以看得出來基本上是以<code class=\"language-text\">javascript</code>與<code class=\"language-text\">reactjs</code>開發為主</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tset nocompatible              \" be iMproved, required\n\tfiletype off                  \" required\n\n\t\" set the runtime path to include Vundle and initialize\n\tset rtp+=~/.vim/bundle/Vundle.vim\n\tcall vundle#begin()\n\n\t\" let Vundle manage Vundle, required\n\tPlugin 'VundleVim/Vundle.vim'\n\n\n\tPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\tPlugin 'tpope/vim-fugitive'\n\t\" vim-airline\n\tPlugin 'vim-airline/vim-airline'\n\tPlugin 'elzr/vim-json'\n\tPlugin 'pangloss/vim-javascript'\n\tPlugin 'mattn/emmet-vim'\n\tPlugin 'mxw/vim-jsx'\n\n\t\" All of your Plugins must be added before the following line\n\tcall vundle#end()            \" required\n\tfiletype plugin indent on    \" required\n\t\" To ignore plugin indent changes, instead use:\n\t\"filetype plugin on\n\t\"\n\t\" Brief help\n\t\" :PluginList       - lists configured plugins\n\t\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\t\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\t\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\t\"\n\t\" see :h vundle for more details or wiki for FAQ\n\t\" Put your non-Plugin stuff after this line\n\t\"\n\tset nocompatible\t\" not compatible with the old-fashion vi mode\n\tset bs=2\t\t\" allow backspacing over everything in insert mode\n\tset history=50\t\t\" keep 50 lines of command line history\n\tset ruler\t\t\" show the cursor position all the time\n\tset autoread\t\t\" auto read when file is changed from outside\n\tset laststatus=2\n\n\tsyntax on\n\n\tlet g:airline_powerline_fonts = 1\n\tlet g:airline_theme='solarized'\n\tsyntax enable\n\tset nu</code></pre></div>\n<p>除此之外，既然要遠端連線工作，總不能每次斷線以後，都要手動重新打開上一次工作階段，並且清除<code class=\"language-text\">temp file</code>吧！</p>\n<p>我們是程式設計師，我們很懶，所以需要更聰明的作法。因此<code class=\"language-text\">tmux</code>就很重要了！</p>\n<p><a href=\"https://tmux.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tmux</a>是什麼呢？ 根據官方文件：</p>\n<p><em>*tmux is a terminal multiplexer. It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal. And do a lot more. *</em></p>\n<p>看到沒有！</p>\n<p>** <span style=\"color:red; font-style: italic;\">  Detach them (they keep running in the background) and reattach them to a different terminal </span> **  </p>\n<p>簡單來說，有了tmux，以後連線到遠端VM或是server時，就算在你開著好幾個session並且vim使用中的情況下，網路斷了或是你想拿著筆電去樓下買咖啡，回來時還是可以無痛回到你原先的工作狀態！不會因為連線中斷而需要重新initialize你原先的state。</p>\n<p>那要怎麼使用這麼好用的工具呢？</p>\n<h5 id=\"於-debian--ubuntu-linux-安裝-tmux\" style=\"position:relative;\"><a href=\"#%E6%96%BC-debian--ubuntu-linux-%E5%AE%89%E8%A3%9D-tmux\" aria-label=\"於 debian  ubuntu linux 安裝 tmux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>於 Debian / Ubuntu Linux 安裝 Tmux</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> tmux</code></pre></div>\n<p>安裝很簡單，接著要編輯<code class=\"language-text\">tmux.conf</code>，以下是我的設定檔：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tunbind C-b\n\tset -g prefix ^A\n\tbind a send-prefix\n\n\t# set colors\n\tset-window-option -g window-status-current-fg blue\n\tset-window-option -g window-status-current-bg yellow\n\tset-window-option -g window-status-current-attr default\n\n\t# switch to next window\n\tunbind C-Right\n\tbind -n C-Right next-window\n\n\t# switch to previous window\n\tunbind C-Left\n\tbind -n C-Left previous-window\n\n\t# split windows like vim\n\t# vim's definition of a horizontal/vertical split is reversed from tmux's\n\tbind s split-window -v\n\tbind v split-window -h\n\n\t# move around panes with hjkl, as one would in vim after pressing ctrl-w\n\tbind h select-pane -L\n\tbind j select-pane -D\n\tbind k select-pane -U\n\tbind l select-pane -R\n\n\t# vi-style controls for copy mode\n\tsetw -g mode-keys vi\n\tunbind [\n\tbind Escape copy-mode\n\tunbind p\n\tbind p paste-buffer\n\tbind-key -t vi-copy 'v' begin-selection\n\tbind-key -t vi-copy 'y' copy-selection\n\n\tunbind ,\n\tbind A command-prompt \"rename-window '%%'\"</code></pre></div>\n<p>好，其實也很多是東抓西抓出來的，所以依照我這份設定檔，我常用的指令大概就是：</p>\n<ul>\n<li>tmux\n進入tmux session</li>\n<li>tmux attach\n在新的terminal (我推薦Iterm2) 重新attach回你之前的工作狀態(先前開啟中的tmux seesion)</li>\n<li>Crtl + A &#x26; C\n先按Crtl A，接著按下C，就會開啟一個新的tmux session</li>\n<li>Crtl + A &#x26; Shift+7\n其實就是Crtl + A接著按下 <code class=\"language-text\">&amp;</code> 符號，就可以刪除當前session</li>\n</ul>\n<p>用了tmux以後好像世界太平一片祥和風和日麗，但是事情沒有這麼簡單，當你用慣iterms方便的捲軸功能去瀏覽先前的terminal紀錄後，發現開了tmux就捲不上去時可能會很痛苦，不過沒關係，還是有折衷方案！</p>\n<ul>\n<li>Crtl + A &#x26; pageUp or up Arrow\n讓你可以往上或往下去terminal紀錄</li>\n</ul>\n<p>好的，老實說這篇只是我想記錄一下我的記錄檔案...\n所以如果需要好好學習tmux的人，可以移駕 <a href=\"https://blog.longwin.com.tw/2011/04/tmux-learn-screen-config-2011/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tsung's Blog</a></p>","id":"db94b934-fb2a-535d-990a-3fbbcdcc2d68","fields":{"slug":"vimrc-tmux設定"},"frontmatter":{"date":"2016-03-05T11:22:33.000Z","title":"vimrc & tmux 設定","tags":["vim","tmux"],"type":"tech","slug":"vimrc-tmux設定"},"timeToRead":4}],"tagName":"vim","type":"tech"}},"staticQueryHashes":["2123680655"]}