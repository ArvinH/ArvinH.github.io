{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/logistic-regression","result":{"pageContext":{"posts":[{"excerpt":"\"The cure for fate is patience.\"","html":"<blockquote>\n<p>\"The cure for fate is patience.\"</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>上一篇<a href=\"https://blog.techbridge.cc/2018/03/10/deeplearnjs-simple-linear-regression/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>中，我們利用 Deeplearn.js 學習了 linear regression，從氣溫與紅茶的關聯性中預測銷量，這次就來練習在機器學習中另一個很基本的方法 - Logistic regression（邏輯分析）。</p>\n<p>先來張 Demo 成果圖：</p>\n<p><img src=\"/image/deeplearnjs-logistic.png\" alt=\"Demo\"> </p>\n<p>從成果圖中可以看出，所謂的 Logistic regression 與 Linear regression 最大不同就是，邏輯回歸大多用來進行<strong>分類</strong>，當結果只有兩種時，就是二元分類，當然也有多元分類，這邊以簡單二元分類來做練習。這次的範例參考自 <a href=\"https://blog.csdn.net/ns2250225/article/details/79416651\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">【webAI】deeplearn.js的邏輯回歸</a></p>\n<h2 id=\"出發總要有個方向做實驗總要有個想像\" style=\"position:relative;\"><a href=\"#%E5%87%BA%E7%99%BC%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%96%B9%E5%90%91%E5%81%9A%E5%AF%A6%E9%A9%97%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%83%B3%E5%83%8F\" aria-label=\"出發總要有個方向做實驗總要有個想像 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>出發總要有個方向，做實驗總要有個想像</h2>\n<p>還記得小時候剛了解智商的概念時，很喜歡去查查名人們的智商數字，像是愛因斯坦、前美國總統布希等等，想看看這些名人的智商是多少，是不是真的很聰明才能像他們這樣成功。\n今天假設我們有一群人的智商資料，現在想要利用這些資料分割出聰明人與笨蛋兩個分類，讓我們之後可以用來判斷一個人是聰明的率高一些，或是愚昧機率高一點，那我們該怎麼做呢？</p>\n<p>這時候就可以出動 Logistic regression 來幫我們計算出一個預測模型，用來判斷該人的智商屬於哪個分類的機率比較高。</p>\n<p>以迴歸分析來說，我們是希望能由給定一個固定的解釋變數 X，然後求出目標變數 Y 的平均值，是條件期望值的概念，若 Y 的結果是連續性的，我們就能試著透過線性模型去逼近一個剛好符合所有資料的公式。像是上一次的範例中，我們可以用線性模型求出在各種溫度下，紅茶的銷售狀況大約會是多少。</p>\n<p>但有些時候，想求得的目標變數是二元或是多元的變數，像是剛剛例子中的<strong>聰明</strong> 或 <strong>笨蛋</strong>。如果硬要用線性函數去逼近的話，求得的結果通常會很差，像是下圖這般：</p>\n<p><img src=\"/image/logistic-linear-bad.png\" alt=\"linear regression\">\n(<a href=\"https://medium.com/@ken90242/machine-learning%E5%AD%B8%E7%BF%92%E6%97%A5%E8%A8%98-coursera%E7%AF%87-week-3-1-logistic-12346f40c6d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a>)</p>\n<p>所以才有人提出用 <a href=\"https://en.wikipedia.org/wiki/Sigmoid_function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">sigmoid</code></a> 這個能將數值侷限在 0 與 1 之間的函數來解決這個問題：</p>\n<p><img src=\"/image/deeplearnjs-decision-boundary.png\" alt=\"Decision Boundary\"></p>\n<p>上圖就是一個 <code class=\"language-text\">sigmoid function</code>，假設我們今天判斷智商 180 代表機率 1 的狀況，而大於機率 0.6 時，就可以算是聰明人（黃色區域），而小於 0.6 的則屬於笨蛋（綠色區域），那今天我們的目標就是要找出一個 <code class=\"language-text\">Ｘ</code> 軸上的 <code class=\"language-text\">Z</code> 值，讓我們能根據 input 的 <code class=\"language-text\">X</code> 特徵值來判斷，若是 <code class=\"language-text\">X</code> 大於 <code class=\"language-text\">Z</code> 時，就可說他是聰明人（因為機率高於 0.6）。</p>\n<p>這個讓我們找出 <code class=\"language-text\">Z</code> 值的函數就是我們要找的 <code class=\"language-text\">Decision Boundary</code>，也就是開頭 Demo 圖中的那條黃色線段！</p>\n<p>有關於 Logistion regression 與 Decision Boundary 的詳細內容，我推薦大家閱讀這幾篇 blog，介紹得很簡單易懂：</p>\n<p><a href=\"https://medium.com/@ken90242/machine-learning%E5%AD%B8%E7%BF%92%E6%97%A5%E8%A8%98-coursera%E7%AF%87-week-3-1-logistic-12346f40c6d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Machine Learning 學習日記</a>\n<a href=\"https://taweihuang.hpd.io/2017/12/22/logreg101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你可能不知道的邏輯迴歸</a></p>\n<h2 id=\"大概了解-logistic-後那就來利用-deeplearnjs-找出-decision-boundary-吧\" style=\"position:relative;\"><a href=\"#%E5%A4%A7%E6%A6%82%E4%BA%86%E8%A7%A3-logistic-%E5%BE%8C%E9%82%A3%E5%B0%B1%E4%BE%86%E5%88%A9%E7%94%A8-deeplearnjs-%E6%89%BE%E5%87%BA-decision-boundary-%E5%90%A7\" aria-label=\"大概了解 logistic 後那就來利用 deeplearnjs 找出 decision boundary 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>大概了解 Logistic 後，那就來利用 deeplearn.js 找出 Decision Boundary 吧!</h2>\n<p>起手式，先來製作個假資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 建立假資料，1 代表智商 100 分以上，0 代表智商 100 分以下</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">200</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tmpX1 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">120</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> tmpX2 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">120</span> <span class=\"token operator\">+</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> tmpX1<span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> tmpX2<span class=\"token punctuation\">,</span>\n        c<span class=\"token operator\">:</span> tmpX1 <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> tmpX2 <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們隨機產生 200 組 training data，<code class=\"language-text\">tmp_x</code> 與 <code class=\"language-text\">tmp_y</code> 可以當作我們要輸入的 Input 特徵 X 向量，代表一個人的智商以及他閱讀的書籍量。</p>\n<p>接著初始 deeplearn.js 的資料結構：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * deeplearn.js 運算\n */</span>\n<span class=\"token keyword\">const</span> x_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    y_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> x_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor2d</span><span class=\"token punctuation\">(</span>x_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y_data <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">tensor2d</span><span class=\"token punctuation\">(</span>y_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再次介紹一下，在 deeplearn.js 中，tensor 是最核心的資料結構，用來表示向量、矩陣或是多維度的資料。</p>\n<p>有許多 utility function 可以輔助創建 tensor 資料結構，像是這邊用的是 <code class=\"language-text\">tensor2d</code>，也就是 2D (2-dimension) 的 tensor。</p>\n<p>一個 tensor 其實包含三個成分，也是創建 tensor 時可以傳入的參數：</p>\n<ul>\n<li>values (TypedArray|Array): tensor 的值。可以是 nested array 或 flat array 的結構。</li>\n<li>shape（number[]）:基本上就是該 tensor 的維度。若創建 tensor 時沒有指定維度，就會繼承傳入的 values 維度。也可以像這邊的範例一樣直接使用 <code class=\"language-text\">tensor${1|2|3|4}d</code> 來創建</li>\n<li>dtype（float32'|'int32'|'bool）：值的型別，當然是 optional。</li>\n</ul>\n<p>由於我們要計算的 X 都是一組向量，所以這邊使用 <code class=\"language-text\">dl.tensor2d</code> 來建置一個二維的 tensor。</p>\n<p>接著定義我們要 training 的係數，這邊取為 <code class=\"language-text\">W</code> 與 <code class=\"language-text\">B</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 權重 W 與偏差 B</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">W</span> <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">zeros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">variable</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">zeros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dl.variable(initialValue, trainable?, name?, dtype?)</code> 用來創建 training 過程中需要的變數，也可透過參數指定該變數能否在 training 過程中被修改（trainable），預設是 <code class=\"language-text\">true</code>。</p>\n<p>用 <code class=\"language-text\">dl.zeros([1, 2])</code> 來創建一個 <code class=\"language-text\">Shape</code> 為 <code class=\"language-text\">[1,2]</code> 的填滿零值的 tensor 變數當權重 W，以及維度 1 的偏差變數 tensor B。</p>\n<p>再來需要定義目標函數與 loss function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 定義目標函數 與 loss function （最一般的 mean square）</span>\n<span class=\"token comment\">// logistic regression 模型</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">sigmoid</span><span class=\"token punctuation\">(</span><span class=\"token constant\">W</span><span class=\"token punctuation\">.</span><span class=\"token function\">matMul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// loss function（log loss）</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loss</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pred<span class=\"token punctuation\">,</span> label</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">mean</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">neg</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>dl<span class=\"token punctuation\">.</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">,</span> dl<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>目標函數的部分其實就是帶入先前所提的 sigmoid function：</p>\n<p><img src=\"/image/deeplearnjs-sigmod.png\" alt=\"目標函數公式\"></p>\n<p><code class=\"language-text\">Z</code> 就是我們要找的 boundary，就是權重與 input X 向量做矩陣乘法，所以這裡需要轉置矩陣 <code class=\"language-text\">x.transpose()</code>。\n<code class=\"language-text\">dl.sigmoid()</code> 就是 deeplearn.js 提供的 sigmoid 函數（如上圖第二行）</p>\n<p>將 <code class=\"language-text\">Z</code> 帶入 <code class=\"language-text\">dl.sigmoid()</code> 後就獲得了目標函數 f。</p>\n<p>而 loss function 的話，一般在 logistic function 都是採用 log loss 的公式，詳細解釋與公式推導推薦閱讀此篇：\n<a href=\"https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E7%94%A8%E4%BA%BA%E8%AF%9D%E8%A7%A3%E9%87%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84logistic-regression%EF%BC%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%EF%BC%89/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用人話解釋機器學習中的 Logistic Regression</a></p>\n<p>照著公式很容易就可以帶出上述的 <code class=\"language-text\">loss()</code>。</p>\n<p>最後就可以開始 training 我們的 data 啦：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 梯度優化</span>\n<span class=\"token keyword\">const</span> learningRate <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span>\n<span class=\"token keyword\">const</span> optimizer <span class=\"token operator\">=</span> dl<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span><span class=\"token function\">sgd</span><span class=\"token punctuation\">(</span>learningRate<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Training!</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    optimizer<span class=\"token punctuation\">.</span><span class=\"token function\">minimize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跟上一篇 <a href=\"https://blog.techbridge.cc/2018/03/10/deeplearnjs-simple-linear-regression/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">linear regression</a> 相同，我們採用<code class=\"language-text\">dl.train.sgd</code>，是 deeplearn.js 內建的 sgd 演算法模型，接受一個 <code class=\"language-text\">leanring rate</code> 參數。在每一次的迭代中，係數都會不斷被更新，以找出最佳的結果，而這個 <code class=\"language-text\">learningRate</code> 參數是用來控制每一次的更新幅度。因此不能夠設得太大，也不能設得太小。</p>\n<p><code class=\"language-text\">optimizer</code> 可額外輸入兩個參數，分別控制 1. 是否回傳最後的 cost; 2. 限制只更新哪些變數。我們 for loop 1000 次後，利用 <code class=\"language-text\">dataSync()</code> 來將係數從 Tensor 讀出：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 用 dataSync 取得 training 結果</span>\n<span class=\"token keyword\">const</span> wPredict <span class=\"token operator\">=</span> <span class=\"token constant\">W</span><span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bPredict <span class=\"token operator\">=</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">dataSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wPredict<span class=\"token punctuation\">,</span> bPredict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">dataSync()</code> 是 Synchronously 的，會 block Browser 的 UI thread，直到 data 被你讀出。另外還有個 Asynchronously 的 <code class=\"language-text\">data()</code> method，會回傳 promise，當讀取結束時再呼叫 <code class=\"language-text\">resolves</code>。</p>\n<p>因為接下來要用 Highcharts 畫圖，所以需要採用 <code class=\"language-text\">dataSync()</code> 來 block 著 UI thread 等資料讀出後再繼續。</p>\n<p>取出係數的值後，就能算出一條 <code class=\"language-text\">Decision Boundary</code> 並繪製出來！</p>\n<p>根據算出的係數，畫出線條頭尾兩點：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 計算切割線段</span>\n<span class=\"token keyword\">const</span> data_line <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span> <span class=\"token operator\">*</span> wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> bPredict<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>wPredict<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data_line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然後用 HighCharts 繪圖：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 繪製圖形</span>\n<span class=\"token keyword\">const</span> data_scatter1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data_scatter2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>x <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> elem<span class=\"token punctuation\">.</span>y <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        data_scatter1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        data_scatter2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>elem<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n        \n<span class=\"token comment\">// Result</span>\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'deeplearn.js 你是聰明人嗎？'</span>                 \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          text<span class=\"token operator\">:</span> <span class=\"token string\">'智商'</span>                 \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        min<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n        max<span class=\"token operator\">:</span> <span class=\"token number\">180</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          text<span class=\"token operator\">:</span> <span class=\"token string\">'書讀得多寡'</span>                 \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        min<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n        max<span class=\"token operator\">:</span> <span class=\"token number\">180</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Decision Boundary'</span><span class=\"token punctuation\">,</span> \n            color<span class=\"token operator\">:</span> <span class=\"token string\">'#fff600'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> data_line\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'scatter'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Smart'</span><span class=\"token punctuation\">,</span> \n            marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                symbol<span class=\"token operator\">:</span> <span class=\"token string\">'cross'</span><span class=\"token punctuation\">,</span>  \n                radius<span class=\"token operator\">:</span> <span class=\"token number\">4</span>         \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">'#FF0000'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> data_scatter1\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'scatter'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> <span class=\"token string\">'Stupid'</span><span class=\"token punctuation\">,</span>\n            marker<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                symbol<span class=\"token operator\">:</span> <span class=\"token string\">'cross'</span><span class=\"token punctuation\">,</span>  \n                radius<span class=\"token operator\">:</span> <span class=\"token number\">4</span>         \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            color<span class=\"token operator\">:</span> <span class=\"token string\">'#6B8E23'</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token operator\">:</span> data_scatter2\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 图表初始化函数</span>\n<span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> Highcharts<span class=\"token punctuation\">.</span><span class=\"token function\">chart</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p data-height=\"469\" data-theme-id=\"29194\" data-slug-hash=\"NYwZwv\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"DeeplearnJS-logistic-regression\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/NYwZwv/\">DeeplearnJS-logistic-regression</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>再次使用 deeplearn.js 來實作 Machine Learing 演算法，發現真的要套用這些 library 已經非常容易了，但還是受限於對演算法與數學公式的理解與敏銳度，不過也是透過這樣的實作練習，逼迫自己去嘗試了解這些演算法背後的概念與數學，在過程中也不斷想起以前大學修離散數學的記憶，當時都不太懂要怎麼使用這些數學，現在知道後就能讀得津津有味，也是蠻有意思的！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://blog.csdn.net/ns2250225/article/details/79416651\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">【webAI】deeplearn.js的邏輯回歸</a></li>\n<li><a href=\"https://github.com/PAIR-code/deeplearnjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Deeplearnjs</a></li>\n<li><a href=\"https://deeplearnjs.org/docs/api/index.html#dl.train.sgd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deeplearn js API doc</a></li>\n<li><a href=\"https://www.codelast.com/%E5%8E%9F%E5%88%9B-%E7%94%A8%E4%BA%BA%E8%AF%9D%E8%A7%A3%E9%87%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84logistic-regression%EF%BC%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%EF%BC%89/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用人話解釋機器學習中的 Logistic Regression</a></li>\n<li><a href=\"https://medium.com/@ken90242/machine-learning%E5%AD%B8%E7%BF%92%E6%97%A5%E8%A8%98-coursera%E7%AF%87-week-3-1-logistic-12346f40c6d6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Machine Learning 學習日記</a></li>\n<li><a href=\"https://taweihuang.hpd.io/2017/12/22/logreg101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你可能不知道的邏輯迴歸</a></li>\n<li><a href=\"https://medium.com/@chih.sheng.huang821/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92-%E6%94%AF%E6%92%90%E5%90%91%E9%87%8F%E6%A9%9F-support-vector-machine-svm-%E8%A9%B3%E7%B4%B0%E6%8E%A8%E5%B0%8E-c320098a3d2e\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">機器學習-支撐向量機(support vector machine, SVM)詳細推導</a></li>\n</ol>","id":"9b284547-b3ce-573f-8f98-f23bd33522a3","fields":{"slug":"deeplearnjs-logistic-regression"},"frontmatter":{"date":"2018-03-30T20:00:08.000Z","title":"用 Javascript 進行邏輯迴歸分析","tags":["deeplearnjs","machine learning","logistic-regression","javascript"],"type":"tech","slug":"deeplearnjs-logistic-regression"},"timeToRead":10}],"tagName":"logistic-regression","type":"tech"}},"staticQueryHashes":["2123680655"]}