{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/grid","result":{"pageContext":{"posts":[{"excerpt":"好歌分享：San Cisco - Awkward","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/ukNOaKeUEQY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - Awkward</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ukNOaKeUEQY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前陣子 netflix 上了最新一季的夜魔俠，其中的反派角色很愛在家中擺設畫作，有了藝術品襯托，壞人在我的腦海裡突然就變成看似很有深度的角色。這讓我覺得應該也該擺點畫作在家裡，看看能不能提高自己的層次。</p>\n<p>而宅宅如我當然無法做如此的投資，不過如果能夠自己用 Web 技術產生一些藝術作品，然後投影在家中呢？應該很酷吧！\n然後就在 codepen 上發現了一個有趣的東西：</p>\n<p data-height=\"416\" data-theme-id=\"29194\" data-slug-hash=\"XZqwaq\" data-default-tab=\"result\" data-user=\"jh3y\" data-pen-title=\"Randomly generate Mondrian Art with CSS Grid + Vue 🎨\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/jh3y/pen/XZqwaq/\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a> by Jhey (<a href=\"https://codepen.io/jh3y\">@jh3y</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來煞有其事啊！原來簡單利用 CSS Grid 就能排出這樣的藝術圖畫！ 查了一下這叫做蒙德里安 (mondrian art)。</p>\n<p>臨摹也算是一種學習，原作者是使用 Vue.js 與 Stylus 製作，今天我們就簡單利用 React 來重新實作一次並說明原理吧！</p>\n<h2 id=\"css-grid-小複習\" style=\"position:relative;\"><a href=\"#css-grid-%E5%B0%8F%E8%A4%87%E7%BF%92\" aria-label=\"css grid 小複習 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid 小複習</h2>\n<p>如果有不了解 CSS Grid 的讀者，可以先去看我先前寫的介紹 - <a href=\"https://blog.techbridge.cc/2017/02/03/css-grid-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">與 CSS Grid 的第一次接觸</a> 或是很完整的 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a>。</p>\n<p>這邊簡單總結一下 CSS Grid 的特性：</p>\n<p>相比於 <code class=\"language-text\">Flexbox</code> 是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 可以理解為 <code class=\"language-text\">two-dimentional layout solution</code>。</p>\n<p>也就是說，你能夠在二維平面上，透過網格系統來擺放你的元件位置。</p>\n<p>現在最新版的 Chrome 與 Firefox 都已經支援 CSS Grid Layout 了，並且在 devtool 中能清楚看到網格狀態：</p>\n<p><img src=\"/image/css-grid-in-devtools.png\" alt=\"css grid in devtools\"></p>\n<h2 id=\"實作前的小分析\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E5%89%8D%E7%9A%84%E5%B0%8F%E5%88%86%E6%9E%90\" aria-label=\"實作前的小分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作前的小分析</h2>\n<p>不管你對 CSS Grid 有沒有概念，看了上面的圖應該也很快可以猜出其原理。</p>\n<p>主要就是讓整個 <code class=\"language-text\">container</code> 切割成數個小方塊，接著隨機產生出多個區塊，每個區塊隨機橫跨不同的行數與列數，並填上不同顏色，將 <code class=\"language-text\">container</code> 填滿即可。</p>\n<p>有點像是七巧板的感覺，只是我們的板子都是矩形~ 不過聽起來簡單，實作上還是有些細節需要注意的。</p>\n<h1 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作！</h1>\n<p>第一步是先定義出我們這幅畫作的畫框，也就是 CSS Grid 中的 <code class=\"language-text\">container</code>，透過這個 <code class=\"language-text\">container</code> 來定義好整個網格系統：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.MondrainArt</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px solid #070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"grid\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"250px\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這裡面發生了幾件事情：</p>\n<p>我們用 <code class=\"language-text\">grid-template-columns</code> 與 <code class=\"language-text\">grid-template-rows</code> 先規範我們的 container 內要有多少欄與列，以及每格的長寬。</p>\n<p>由於每個格子的大小我們要固定，所以使用 <code class=\"language-text\">repeat()</code>，並且採用 <code class=\"language-text\">&lt;auto-repeat> values</code> 的語法，這樣做的好處是我們只要固定好 <code class=\"language-text\">container</code> 的寬高，不用去限制 grid 的 column 數與 row 數，讓 CSS Grid 幫我們計算出不會 overflow 的數目。<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN: repeat()</a></p>\n<p>至於要用 <code class=\"language-text\">auto-fit</code> 或是 <code class=\"language-text\">auto-fill</code>， 在這邊的例子中其實都可以，因為這兩者的差別主要在於寬度改變時，針對多出的空間在運用上有不同的方式：</p>\n<p>以 <code class=\"language-text\">auto-fit</code> 來說，視覺上的效果是會將原本 column 內的 item 寬度都平均拉長，但實際上還是有新增 column 數，只是因為 content 是空的，所以空間被壓縮了：</p>\n<p><img src=\"/image/auto-fit.gif\" alt=\"auto-fit\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>而 <code class=\"language-text\">auto-fill</code> 則是不管是否有新的 content 在，新增的 column 數都會佔有一樣的空間大小，並不會去延伸原有 item 的寬度：</p>\n<p><img src=\"/image/auto-fill.gif\" alt=\"auto-fill\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>接著，利用 <code class=\"language-text\">gap: 10px 10px</code> 設定好每個格子間的空隙；然後給定一個固定的寬高並將 overflow hidden 起來。</p>\n<p>到這邊為止，我們可以先在 <code class=\"language-text\">container</code> 內放入數個 grid item，然後每個 item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 皆設置為 <code class=\"language-text\">span 1</code>，也就是都只占 grid 的中的一個單位。如此一來就能看到目前的格子樣式：</p>\n<iframe src=\"https://codesandbox.io/embed/ww21ow2nvl\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"隨機產生不同大小的區塊\" style=\"position:relative;\"><a href=\"#%E9%9A%A8%E6%A9%9F%E7%94%A2%E7%94%9F%E4%B8%8D%E5%90%8C%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%80%E5%A1%8A\" aria-label=\"隨機產生不同大小的區塊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>隨機產生不同大小的區塊</h2>\n<p>有了基礎的格子後，看起來我們接著只要把目前 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 改造一下就大功告成了吧!?</p>\n<p>馬上來試試！</p>\n<p>首先，先做點數學，我們剛剛設定每個格子是 <code class=\"language-text\">50px</code>，而每個格子的間距 <code class=\"language-text\">gap</code> 為 <code class=\"language-text\">10px</code>，而寬度為 <code class=\"language-text\">250px</code>，所以每一個 <code class=\"language-text\">row</code> 最多就是 <code class=\"language-text\">4</code> 個格子。（用肉眼看上圖其實就知道了...）</p>\n<p>為什麼要算這個呢？</p>\n<p>因為我們要讓 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 隨機分配，但要在正確的範圍內，更改上面範例內的 <code class=\"language-text\">generateBlocks()</code> 如下，並加上個 <code class=\"language-text\">colorMap</code> 來隨機分配顏色：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(242, 245, 241)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(214, 0, 20)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">generateBlocks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blocks-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        gridColumn<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        gridRow<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        backgroundColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorMap<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以得到以下結果：</p>\n<iframe src=\"https://codesandbox.io/embed/934p8px7pw\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>疑？好像跟想像不太一樣？</p>\n<p>的確是隨機產生了橫跨不同欄位數的區塊，但是大小好像不太對啊！</p>\n<p>那是因為我們沒辦法保證隨機產生的 grid-area 都能剛剛好接續著各自的起始點排滿滿的，所以可能發生下列情況：</p>\n<p><img src=\"/image/auto-col-row.png\" alt=\"auto-col-row\"></p>\n<p>在右下角實際產生的黃色區塊前，<code class=\"language-text\">row5</code> 與 <code class=\"language-text\">row6</code> 的位置實際上是空的，所以 grid layout 會將其當作為高度 0 的 item。</p>\n<p>好在，我們可以利用 <code class=\"language-text\">grid-auto-columns</code> 與 <code class=\"language-text\">grid-auto-rows</code> 來解決！<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p>我們在 <code class=\"language-text\">container</code> 加上以下設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">grid-auto-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>這樣就會讓 grid layout 知道空的欄位我們想要自動填補上 <code class=\"language-text\">50px</code> 的大小。</p>\n<p>基本上到此為止就完成了一個不錯的版本：</p>\n<p><img src=\"/image/no-fill-algo.png\" alt=\"no-fill-algo\"></p>\n<p>但總還是覺得怪怪的，好像“不夠密”。</p>\n<p>有些區塊如果能換個位置似乎會好看一點？</p>\n<p>由於我們並沒有明確指定每個區塊在 grid 中的確切位置，grid layout 會採用一個 <code class=\"language-text\">auto-placement algorithm</code> 來擺放，而我們能透過 <code class=\"language-text\">grid-auto-flow</code> 這個屬性來更改其排放的規則。<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p><code class=\"language-text\">grid-auto-flow</code> 有 <code class=\"language-text\">row</code>, <code class=\"language-text\">column</code> 與 <code class=\"language-text\">dense</code> 這三種值可以設置，從字面上來看就能理解各自代表的意思，如果你設定為 <code class=\"language-text\">row</code> 或 <code class=\"language-text\">column</code>，那 grid layout 會盡量幫你的 item 照著列與行的方向照順序排放；而 <code class=\"language-text\">dense</code> 則是會盡量把空間塞滿，小的 item 就可能會先排在大的 item 之前，跟你在 html dom 上的排放位置可能有所落差，對於 accessibility 並不好，但以我們的 case 來說，不需要考慮那些，就大膽採用 <code class=\"language-text\">dense</code> 就對了！</p>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p>最後我們可以再加上一點點動畫效果，讓 react component 每五秒重新 render 一次新的圖案，這樣投放出來以後，就好像你有一幅不斷自行變化的藝術品一般了！</p>\n<iframe src=\"https://codesandbox.io/embed/420rv1v86w\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>有趣的作品實作起來可能原理很簡單，但也是有一些眉眉角角需要注意。透過這次的實作，重新複習了一次 CSS Grid 的好處與用法，也期許自己未來能夠有更多的時間去思考與創造這樣的作品！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"https://codepen.io/jh3y/pen/XZqwaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","id":"4d5a489b-0f84-5fcb-a2e7-7a727e0b5e73","fields":{"slug":"css-grid-art-generator"},"frontmatter":{"date":"2018-11-15T00:18:37.000Z","title":"用 CSS Grid 創造蒙德里安藝術","tags":["css","grid","mondrian","react"],"type":"tech","slug":"css-grid-art-generator"},"timeToRead":7}],"tagName":"grid","type":"tech"}},"staticQueryHashes":["2123680655"]}