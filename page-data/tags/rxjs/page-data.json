{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/rxjs","result":{"pageContext":{"posts":[{"excerpt":"\"好想把自己subscribe到鬧鐘上...\"","html":"<blockquote>\n<p>\"好想把自己subscribe到鬧鐘上...\"</p>\n</blockquote>\n<!-- more -->\n<p>Rx 其實也出來一段時間了，一直都沒有好好靜下心來研究他，前陣子看到一篇<a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>解釋得蠻好的，擷取重點並加入一些自己的心得範例供大家參考，畢竟 Rx 中文的介紹似乎少了點...</p>\n<p>相信聽過 Rx 的讀者，應該也會耳聞 RxJS, RxJAVA, RxAndroid等等，因此被 Google 慣壞的我們一定會試著去搜尋一下 Rx 到底是什麼</p>\n<p>然後在 Google Search Result page 的最下方會看到 MSDN 的 Reactive Extensions 和 ReactiveX </p>\n<p><img src=\"/image/RxGoogleResult.png\" alt=\"Rx goolge search result\" title=\"Rx goolge search result\"></p>\n<p>好的看來就是我們要找的東西，但這好眼熟喔? 是每天在寫的React嗎？難道是相關的東西？!</p>\n<p>定睛一看會發現... 恩，基本上沒什麼關係。</p>\n<p>Reactive Extensions 是 Microsoft open source 推廣的一個lib</p>\n<p><code class=\"language-text\">Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators.</code></p>\n<p>網站連結：<a href=\"https://rx.codeplex.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rx</a>\n網站連結：<a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactiveX.io</a></p>\n<p><img src=\"/image/reactiveX.png\" alt=\"ReactiveX\" title=\"ReactiveX\"></p>\n<p><code class=\"language-text\">ReactiveX is a combination of the best ideas from\nthe Observer pattern, the Iterator pattern, and functional programming</code></p>\n<p>ok, Observer pattern, Iterator patter, functional programming 都聽過，而這些串起來似乎就是傳說中的 Reactive Programming.</p>\n<h1 id=\"what-is-reactive-programming\" style=\"position:relative;\"><a href=\"#what-is-reactive-programming\" aria-label=\"what is reactive programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Reactive Programming?</h1>\n<p>Reactive Programming 是一種以 asynchronous data streams 為中心思想出發的程式撰寫方式，比較常聽到的是 asynchronous event，像是 user click event, mouse hover event 等等，而這邊特別的則是 <strong><span style=\"color:red; font-style: italic;\">data<span></strong> 與 <strong><span style=\"color:red; font-style: italic;\">stream<span></strong>，顧名思義，Reactive Extensions 將 event 延伸為 data，並且注重在 stream （串流）上，也就是 <strong><span style=\"color:red; font-style: italic;\">時間序列上的一連串資料事件<span></strong>，Rx讓你將任何事情都變化為 data streams : variables, user inputs, properties, caches, data structures 等等皆可，透過 Observe 這些 data streams，並依據其造成的 side effects 進行對應的動作。</p>\n<h3 id=\"stream-時間序列上的一連串資料事件\" style=\"position:relative;\"><a href=\"#stream-%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E4%B8%8A%E7%9A%84%E4%B8%80%E9%80%A3%E4%B8%B2%E8%B3%87%E6%96%99%E4%BA%8B%E4%BB%B6\" aria-label=\"stream 時間序列上的一連串資料事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Stream</strong>:\t <strong>時間序列上的一連串資料事件</strong></h3>\n<p>以一個 click event 來說，在 user 點擊的動作發生後，會有一段時間觸發了幾個事件 (event stream)：value, error or completed signal</p>\n<p><img src=\"/image/clickeventstream.png\" alt=\"click event stream (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)\" title=\"click event stream \"></p>\n<p>而在 Reactive Programming 的概念下，你可以把任何事情都看作 <strong>Stream</strong>，並且 <strong>Observe</strong> stream 中的變化，以下面一個例子來說：</p>\n<p>假設我們想要印出一個包含 1 到 5 的 Array，一般我們會這樣做：</p>\n<p><a href=\"http://jsbin.com/fiyiyo/edit?js,console,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example 1</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptiterate1to5.js\"><pre class=\"language-javascriptiterate1to5.js\"><code class=\"language-javascriptiterate1to5.js\">\tvar source = [1,2,3,4,5];\n\tsource.map((item) =&gt; {\n\t  console.log(&quot;onNext: &quot;+item);\n\t})</code></pre></div>\n<p>然而，以Rx來說，任何事情都要 Observable，因此我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptobserve1to5.js\"><pre class=\"language-javascriptobserve1to5.js\"><code class=\"language-javascriptobserve1to5.js\">\t// Creates an observable sequence of 5 integers\n\tvar source = Rx.Observable.range(1, 5);\n\n\t// catch every status and print out value\n\tvar subscription = source.subscribe(\n\t    x =&gt; console.log(&#39;onNext: &#39; + x),\n\t  \n\t    e =&gt; console.log(&#39;onError: &#39; + e.message),\n\t  \n\t    () =&gt; console.log(&#39;onCompleted&#39;));</code></pre></div>\n<p>在上面的例子中，我們創建了一個 Observable 的整數陣列，並且透過 <strong>subscribe</strong> 的動作去 <strong>listening</strong> 這個陣列，當有我們設定的 event 觸發時，我們就會 <strong>observe</strong> 到，並採取對應動作，這基本上就是 <strong>Observer Design Pattern</strong> 做的事情</p>\n<h2 id=\"why-rxjs\" style=\"position:relative;\"><a href=\"#why-rxjs\" aria-label=\"why rxjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why RxJS</h2>\n<p>以 Javascript 來說，想要抓取這些事件，一般可以用 callback 或是 Promise 來達成，然而 Promise 主要設計於一次性的事件與單一回傳值，而 RxJS 除了包含 Promise 外，提供了更豐富的整合應用。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Single return value</th>\n<th>Mutiple return values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pull/Synchronous/Interactive</td>\n<td>Object</td>\n<td>Iterables (Array/Set/Map/Object)</td>\n</tr>\n<tr>\n<td>Push/Asynchronous/Reactive</td>\n<td>Promise</td>\n<td>Observable</td>\n</tr>\n</tbody>\n</table>\n<p>還記得前面 ReactiveX 的定義嗎？ \"combination of Observer pattern, <strong>Iterator pattern</strong> and functional programming\" </p>\n<p>RxJS 結合 Array#extras 的優點，讓你能夠方便處理 <strong>Multiple return values</strong></p>\n<p>延伸上面的例子來說：</p>\n<p><a href=\"http://jsbin.com/yizequ/edit?html,js,console,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example 2</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptiteratorpattern.js\"><pre class=\"language-javascriptiteratorpattern.js\"><code class=\"language-javascriptiteratorpattern.js\">\tconst data = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;];\n\tconst source = Rx.Observable\n\t                 .interval(500)\n\t                 .take(6)\n\t                 .map(i =&gt; data[i])\n\n\tconst result = source\n\n\tresult.subscribe(x =&gt; console.log(x));</code></pre></div>\n<p>當你 subscribe 這個 Observale 的 data source 時，他能讓你 <strong>監聽</strong> 陣列中，每 500ms (interval) 取一個值 (map(i => data[i])) 並取 6 次 (take(6))</p>\n<p>再回到最早的 click event 來說，假若我們想要能夠抓取 single click 與 double click 的事件，用最原始的 javascript 可能會需要許多變數來紀錄狀態、時間等等，但透過 RxJS 提供的 library，你只需要短短四行 code 就可以達成：</p>\n<p><a href=\"http://jsfiddle.net/staltz/4gGgs/27/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整範例</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptmulticlickstream.js\"><pre class=\"language-javascriptmulticlickstream.js\"><code class=\"language-javascriptmulticlickstream.js\">\tvar multiClickStream = clickStream\n\t    .buffer(function() { return clickStream.throttle(250); })\n\t    .map(function(list) { return list.length; })\n\t    .filter(function(x) { return x &gt;= 2; });</code></pre></div>\n<p><img src=\"/image/muticlick.png\" alt=\"Double click event (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)\" title=\"double click\">     </p>\n<p>由上圖可以清楚看到，RxJS 幫你把 Stream 上的 event 依照你想要的時間做 <strong>整理</strong>，<code class=\"language-text\">buffer</code> 住觸發時間在 250ms 間的 click events，並且利用 <code class=\"language-text\">map</code> 函式抓出每個 event list 的長度，並進一步抓出長度大於 2 ，也就是 double click 的 event 出來。</p>\n<p>接著你只需要 <code class=\"language-text\">subscribe</code> 你剛剛定義的 event stream，即可做出反應(reaction)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptmulticlickstream.js\"><pre class=\"language-javascriptmulticlickstream.js\"><code class=\"language-javascriptmulticlickstream.js\">\tmultiClickStream.subscribe(function (numclicks) {\n\t    document.querySelector(&#39;h2&#39;).textContent = &#39;&#39;+numclicks+&#39;x click&#39;;\n\t});</code></pre></div>\n<h3 id=\"more-examples-autocompletion-service\" style=\"position:relative;\"><a href=\"#more-examples-autocompletion-service\" aria-label=\"more examples autocompletion service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More examples (Autocompletion service)</h3>\n<p>以現在的 web app 來說，大量依賴 user 互動的效果與呈現，在不影響使用者體驗的前提下，多是用非同步的方式去抓取資料、渲染頁面等等，因此 Rx 系列的出現絕對是一個很大的助益。</p>\n<p>最後讓我們再以一個例子來做結尾，利用 RxJS 與 Jquery 打造 Wikipedia Autocompletion Service。</p>\n<p><a href=\"http://jsbin.com/yojuwu/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整範例</a>\n(source: <a href=\"http://xgrommx.github.io/rx-book/why_rx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://xgrommx.github.io/rx-book/why_rx.html</a>)</p>\n<h3 id=\"step-1\" style=\"position:relative;\"><a href=\"#step-1\" aria-label=\"step 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">var</span> keyups <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'keyup'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Now throttle the input for 500ms */</span>\n\t<span class=\"token keyword\">var</span> throttled <span class=\"token operator\">=</span> keyups<span class=\"token punctuation\">.</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token comment\">/* ms */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Now get only distinct values, so we eliminate the arrows and other control characters */</span>\n\t<span class=\"token keyword\">var</span> distinct <span class=\"token operator\">=</span> throttled<span class=\"token punctuation\">.</span><span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>我們先利用 Rx.Observable.fromEvent 來 Create 一個 binding keyup event 的 Observalbe keyups object，並且針對每次事件發生時，回傳被綁定的元素其 value 值長度大於二的</li>\n<li>接著設定 keyups 的 throttle 時間，將 500ms 內的input當做一次event去觸發</li>\n<li>再來剔除掉不相干的控制輸入，只抓取 distinct 的 value</li>\n</ol>\n<h3 id=\"step-2\" style=\"position:relative;\"><a href=\"#step-2\" aria-label=\"step 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">searchWikipedia</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">term</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t        url<span class=\"token operator\">:</span> <span class=\"token string\">'http://en.wikipedia.org/w/api.php'</span><span class=\"token punctuation\">,</span>\n\t        dataType<span class=\"token operator\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span>\n\t        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t            action<span class=\"token operator\">:</span> <span class=\"token string\">'opensearch'</span><span class=\"token punctuation\">,</span>\n\t            format<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n\t            search<span class=\"token operator\">:</span> term\n\t        <span class=\"token punctuation\">}</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>簡單撰寫一個 ajax 來 fetch search api</li>\n<li>這邊我們直接 return promise，RxJS 會幫你 wrap 起來變成 Obserbale，或是你也可以利用 <code class=\"language-text\">Rx.Observable.fromPromise</code>來將原有的 Promise 改裝</li>\n</ol>\n<h3 id=\"step-3\" style=\"position:relative;\"><a href=\"#step-3\" aria-label=\"step 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">var</span> suggestions <span class=\"token operator\">=</span> distinct<span class=\"token punctuation\">.</span><span class=\"token function\">flatMapLatest</span><span class=\"token punctuation\">(</span>searchWikipedia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"6\">\n<li>利用 <a href=\"http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/flatmaplatest.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flatMapLatest</a> 將剛才的 Observable object <code class=\"language-text\">distinct</code> 與 <code class=\"language-text\">searchWikipedia</code> function 做結合，then we good to go! (先不管flatMapLatest是什麼，總之他會將 distinct 這個 Observable sequence內的元素丟給 searchWikipedia，並將回傳回來的資料再轉換成 Observable sequence，讓人可以 subscribe)</li>\n</ol>\n<h3 id=\"step-4\" style=\"position:relative;\"><a href=\"#step-4\" aria-label=\"step 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\tsuggestions<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t    $results<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t    $<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;li>'</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">/* handle any errors */</span>\n\t    $results<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;li>Error: '</span> <span class=\"token operator\">+</span> error <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"7\">\n<li>接著就是 Subscribe 剛剛的 Observable sequence <strong>suggestions</strong>，並將 listen 到的資料 show 出來</li>\n</ol>\n<p>就這麼簡單完成了一個 Autocompletion 的 service 了！</p>\n<h3 id=\"題外話\" style=\"position:relative;\"><a href=\"#%E9%A1%8C%E5%A4%96%E8%A9%B1\" aria-label=\"題外話 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>題外話</h3>\n<p>先簡單介紹什麼是 flatMap 與 flatMapLatest，畢竟剛剛範例有用到，而實際上 RxJS 還有很多複雜的 function 可以應用，待之後我有時間再繼續專研吧！但有興趣的讀者可以在文章最下方的連結找到資源。</p>\n<p>flatMap 會將 一個 Observable Sequence 的元素 映射到 另一個新的 Observable Sequence，並且subscribe 原先的 Observable Sequence 的人也都可以聽得到</p>\n<p>簡單的例子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptflatmap\"><pre class=\"language-javascriptflatmap\"><code class=\"language-javascriptflatmap\">\tconsole.clear();\n\tvar source = Rx.Observable\n\t    .range(1, 2)\n\t    .flatMap(function (x) {\n\t        return Rx.Observable.range(x, 2);    \n\t    });\n\n\tvar subscription = source.subscribe(\n\t    function (x) {\n\t        console.log(&#39;Next: &#39; + x);\n\t    },\n\t    function (err) {\n\t        console.log(&#39;Error: &#39; + err);   \n\t    },\n\t    function () {\n\t        console.log(&#39;Completed&#39;);   \n\t    });\n\n    // Result: \n\t// =&gt; Next: 1 \n\t// =&gt; Next: 2  Rx.Observable.range(1, 2)\n\t// =&gt; Next: 2 \n\t// =&gt; Next: 3  Rx.Observable.range(2, 2)\n\t// =&gt; Completed    </code></pre></div>\n<p>See? 他會把 sequence 中的元素丟進 callback，並回傳 Observable sequence，你也可以丟入 Promise，就像範例中做的。</p>\n<p>而 flatMapLatest 則是只會進行最後一次的 sequence，以剛剛的範例來說，最後subscribe的人接收到的會是最新的那個 Observable sequence 的結果！而不會每打一個字所搜尋的結果都一直累加顯示上去。</p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>在我前面放的圖中，描繪 Click event 的 叫做 <strong>marble</strong> 圖，這邊有個網站可以讓你以視覺化互動的方式去操作這些 event，幫助你理解 Rx 當中的各個 function 之功用！非常推薦！！\n去玩玩吧！<a href=\"http://rxmarbles.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxmarbles</a></p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>Rx 真的是蠻有趣的東西，提供的lib又號稱毫無相依性，可以應用在各種framework上方，只是必須要懂得如何Think in Reactive Programming，否則這些lib的用法還真的是不好理解，這篇拋磚引玉簡單介紹一下罷了，之後會再有更深入的研究！ 有什麼說明不對的地方也請見諒與指教！</p>\n<p>參考資料</p>\n<ul>\n<li><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The introduction to Reactive Programming you've been missing (by @andrestaltz)</a></li>\n<li><a href=\"http://xgrommx.github.io/rx-book/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rx-book</a></li>\n<li><a href=\"https://github.com/Reactive-Extensions/RxJS/tree/master/doc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactive-Extensions RxJS</a></li>\n<li><a href=\"http://rxmarbles.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxmarbles</a></li>\n</ul>","id":"635b391f-fdcd-5535-ae32-6b8a30486a37","fields":{"slug":"reactive-programming-簡介與教學-以-rx-js-為例"},"frontmatter":{"date":"2016-05-28T00:03:18.000Z","title":"Reactive Programming 簡介與教學(以 RxJS 為例)","tags":["rxjs","reactive programming"],"type":"tech","slug":"Reactive Programming 簡介與教學(以 RxJS 為例)"},"timeToRead":8}],"tagName":"rxjs","type":"tech"}},"staticQueryHashes":["2123680655"]}