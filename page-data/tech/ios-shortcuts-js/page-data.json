{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/ios-shortcuts-js","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/0WtcPL8Zac4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rescue</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/0WtcPL8Zac4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>出社會後，平常一天 24 小時，可能有 14 小時都會待在電腦前的我，對於手機功能的需求真的不多，也就不像學生時代會很關注 iOS 上有什麼新的功能。而就在上個月的某天，我ㄧ如往常地在 GitHub 上閒晃時，發現一款叫做 <a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shortcuts-js</code></a> 的套件，原以為是另一套處理網頁快捷鍵的框架，但看了其敘述寫的是『A JavaScript iOS 12 Shortcuts creator』，我才去查了一下 shortcuts 是什麼...</p>\n<p>原來 iOS 12 推出了一個叫 shortcuts 的功能，能讓你透過一連串 <strong>Action</strong> 的組合，自動化你的 workflow。而該套件的作者很 hardcode 的<a href=\"https://medium.com/shortcutsjs/creating-ios-12-shortcuts-with-javascript-and-shortcuts-js-942420ca9904\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">逆向工程解析</a> shortcuts 上的程式，撰寫出一套 JavaScript 的工具，讓你能用熟悉的 JavaScript 來撰寫 iOS shortcuts。</p>\n<p>覺得蠻有意思的，所以也花了幾個小時的時間玩了一下，透過這篇文章記錄一下過程與心得。</p>\n<p>照慣例先給大家看個簡單的成品，我其實做了兩個 shortcuts，一個是利用 Google 的 <a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a> 製作的事實查核捷徑，讓你在網頁上快速查驗資訊，但 API 回傳的資料效果不是很好，所以做了另一個 <code class=\"language-text\">vConsole shortcuts</code>，讓你能夠在一般網頁（沒有特別在 header 的 CSP 設定 <code class=\"language-text\">script-src</code> 的網頁）內插入 <code class=\"language-text\">vConsole</code> 套件的 shortcuts，讓你能在手機上直接打開 console！</p>\n<p>想實際玩玩的可以從 iphone 上下載此 <a href=\"https://www.icloud.com/shortcuts/efffb762336744a5857d5defe6ff0ba7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iCloud link</a></p>\n<p>下載前記得要到 \"設定\" -> \"捷徑\" -> \"允許不受信任的捷徑\" 將該選項開啟。</p>\n<p>下載完後到該 shortcut 的詳細資訊頁內將 <strong>在共享工作表中顯示</strong> 選項打開，這樣才能在 safari 的網頁分享 panel 找到 shortcut 來執行。</p>\n<p><img src=\"/image/ios-shortcuts-js-demo.gif\" alt=\"project-demo\" title=\"project-demo\"></p>\n<h2 id=\"ios-shortcuts\" style=\"position:relative;\"><a href=\"#ios-shortcuts\" aria-label=\"ios shortcuts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iOS Shortcuts</h2>\n<p>在 Shortcuts 出現之前，有個叫做 Workflow 的應用程式可以讓你透過客製化的腳本，自訂自動化流程，而在 Apple 將其買下後，隨著 iOS 12 一起推出，並且開放免費下載。</p>\n<p>Shortcuts 的操作有點像是 Scratch，可以將一個一個的 action block 任意組合，也能夠串接別人做好的 shortcuts，對於不會撰寫程式的人來說，操作上算親民，應該也會覺得蠻有趣的，給大家看一下操作過程（gif 可能有點大）：</p>\n<p><img src=\"/image/shortcuts-ops-demo.gif\" alt=\"shortcuts-ops-demo\" title=\"shortcuts-ops-demo\"></p>\n<p>可以加入各種內建指令，拖拉組合你想要的順序。</p>\n<p>action 的 output 可以當作下一個 action 的 input，也可以與 App 互動，例如可以串接 Evernote：</p>\n<p><img src=\"/image/interaact-with-app.jpeg\" alt=\"interact-with-app\" title=\"interact-with-app\"></p>\n<p>除了上面範例這種簡單的指令堆疊，也支援 <code class=\"language-text\">if-else</code> 結構：</p>\n<p><img src=\"/image/if-else.jpeg\" alt=\"if-else\" title=\"if-else\"></p>\n<p>但是呢，我很難相信會有工程師忍受得了在手機上面一個一個 action 拖拉組合，然後輸入內容，實在太麻煩啦。</p>\n<p>還是直接寫程式比較舒服，而對於習慣 JavaScript 的我來說，<a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shortcuts-js</code></a> 就是一個很棒的選擇！</p>\n<h2 id=\"shortcuts-js\" style=\"position:relative;\"><a href=\"#shortcuts-js\" aria-label=\"shortcuts js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shortcuts JS</h2>\n<p><img src=\"/image/shortcuts-js-official.png\" alt=\"shortcuts-js-official\"></p>\n<p>Shortcuts JS 基本上就是將 Apple 內建的 Action 都製作出對應的 JS 版本，你可以編排與呼叫那些 JS function，shortcuts-js 會幫你轉譯成 iOS 能運行的 <code class=\"language-text\">shortcut</code> 檔案。</p>\n<p>在 Shortcuts JS 的網站上就有一個 playground 讓你實際玩玩看，並且能馬上下載成 <code class=\"language-text\">shortcut</code> 檔，只是從 iOS 13 開始，不能夠直接將 <code class=\"language-text\">.shortcut</code> 檔案 AirDrop 到手機內，需要透過 icloud link 才行。</p>\n<p>另外，從他們網站上與 github issue 上也能知道目前並不是所有 Apple 內建的 actions 都支援，所以實際上許多 idea 要實作還是不容易。</p>\n<h3 id=\"官方上簡單的範例\" style=\"position:relative;\"><a href=\"#%E5%AE%98%E6%96%B9%E4%B8%8A%E7%B0%A1%E5%96%AE%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"官方上簡單的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>官方上簡單的範例</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//////// Import necessary actions and function ////////</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actionOutput<span class=\"token punctuation\">,</span> buildShortcut <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@joshfarrant/shortcuts-js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  comment<span class=\"token punctuation\">,</span>\n  wait<span class=\"token punctuation\">,</span>\n  runJavaScriptOnWebPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@joshfarrant/shortcuts-js/actions\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////</span>\n\n<span class=\"token comment\">//////// Create and arrange actions ////////</span>\n<span class=\"token comment\">// We'll use this later to reference the output of a calculation</span>\n<span class=\"token keyword\">let</span> calcVar <span class=\"token operator\">=</span> <span class=\"token function\">actionOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Define a list of actions</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    operand<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> calcVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">showResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the Magic Variable</span>\n    text<span class=\"token operator\">:</span> withVariables<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>calcVar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/////////////////////////////////////////////</span>\n\n<span class=\"token comment\">//////// Generate the Shortcut data ////////</span>\n<span class=\"token keyword\">const</span> shortcut <span class=\"token operator\">=</span> <span class=\"token function\">buildShortcut</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write the Shortcut to a file in the current directory</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example.shortcut'</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something went wrong :('</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shortcut created!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//////////////////////////////////////////////</span></code></pre></div>\n<p>用 shortcuts js 製作一個基本的 shortcuts 非常簡單，只需要三個步驟：</p>\n<ol>\n<li>載入你想要使用的 actions。</li>\n<li>創建一個 <code class=\"language-text\">actions</code> 陣列，將你想要執行的 actions 照順序放進去，基本上每個 action 都會有 output，而每一個 output 都會自動傳給陣列中的下一個 action。可以從<a href=\"https://docs.shortcuts.fun/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>查閱目前 support 的 actions 其輸入輸出為何。不過他們文件沒有很齊全就是了...</li>\n</ol>\n<p><img src=\"/image/shortcut-js-docs.png\" alt=\"shortcut-js-docs\" title=\"shortcut-js-docs\"></p>\n<ol start=\"3\">\n<li>最後一個步驟就是透過 shortcuts js 的 <code class=\"language-text\">buildShortcut()</code> 函式來將你編排的 actions 轉化成合法的 iOS shortcuts format，並寫入檔案。</li>\n</ol>\n<p>接著你就能將這個檔案放入 icloud 上，並產生 icloud shortcuts link 來載入到你的手機裡使用了。</p>\n<p>產生 icloud shortcuts link 的方式其實我不是很確定有沒有什麼正確的方式，但我在最後會分享我所使用的方法。</p>\n<p>這邊我們先來解釋一下官方範例的 actions 做了什麼事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    operand<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> calcVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">showResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the Magic Variable</span>\n    text<span class=\"token operator\">:</span> withVariables<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>calcVar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>shortcuts js 是用 TypeScript 撰寫的，所以你載入的每個 action 你都能清楚地看到其所需要的參數與類型。</p>\n<p><code class=\"language-text\">comment</code> action 如其名，就是在 shortcuts 中下個註解，實際上沒有作用，你也只能在 shortcuts 的 action flow 中看得到它：</p>\n<p><img src=\"/image/comment-sample.png\" alt=\"comment-sample\" title=\"comment-sample\"></p>\n<p><code class=\"language-text\">number</code> 則是讓你能設定一個數字，他會將你設定的數字當作 output 傳給下一個 action，在範例中即是 <code class=\"language-text\">calculate</code> action。</p>\n<p><code class=\"language-text\">calculate</code> 除了接收上一個 action 傳入的 input 外，你需要指定與 input 操作的 <code class=\"language-text\">operand</code> 與 <code class=\"language-text\">operation</code>；最後的一個參數是一個叫做 Magic Variable 的變數，他可以用來儲存 action 所產生的結果，並在其他 action 中 reference 使用，例如範例中的 <code class=\"language-text\">showResult</code>。</p>\n<p><code class=\"language-text\">showResult</code> 就是將你傳入的 <code class=\"language-text\">text</code> 參數值輸出到手機畫面中。在這邊我們想要取得 <code class=\"language-text\">caculate</code> 所 output 的變數值，然而 <code class=\"language-text\">showResult</code> 需要的是字串，我們不能單純的傳入變數，必須要使用一個特殊的函數 <code class=\"language-text\">withVariables</code>，將變數值讀出並轉成 string 格式。</p>\n<p>這個 shortcuts 執行後就是會在你的手機上跳出一個 dialog 並顯示 14 這個數字。</p>\n<h3 id=\"了解官方範例後自己來動手做看看\" style=\"position:relative;\"><a href=\"#%E4%BA%86%E8%A7%A3%E5%AE%98%E6%96%B9%E7%AF%84%E4%BE%8B%E5%BE%8C%E8%87%AA%E5%B7%B1%E4%BE%86%E5%8B%95%E6%89%8B%E5%81%9A%E7%9C%8B%E7%9C%8B\" aria-label=\"了解官方範例後自己來動手做看看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>了解官方範例後，自己來動手做看看</h3>\n<p>如同前言提到的，我一開始想做的是事實查核的 shortcuts，也就是說讓使用者點選 shortcuts 後，可以輸入想查詢的事情，背後呼叫 Google 的 <a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a>，但是 shortcuts 雖然有提供 <code class=\"language-text\">Get URL content</code> 的 aciton，卻沒有方便的資料處理 action，必須使用 <code class=\"language-text\">dictionary</code> 之類的 action 來將回傳的 JSON format 資料轉存成辭典格式，操作上很繁瑣，可以參考 reddit 上高手的說明：<a href=\"https://www.reddit.com/r/shortcuts/comments/afbrlh/using_apis_part1_retrieving_data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">retrieving data</a>、<a href=\"https://www.reddit.com/r/shortcuts/comments/afpwo2/using_apis_part_2_parsing_complex_api_responses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parsing complex api responses</a>、<a href=\"https://www.reddit.com/r/shortcuts/comments/ae80co/quick_and_dirty_guide_to_scraping_data_from/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapign web data</a>。</p>\n<p>在花了不少時間嘗試用 shortcuts js 按照 reddits 上的做法實作後，還是不成功，正當想放棄時，我看到了一個 action 叫做 <code class=\"language-text\">runJavaScriptOnWebPage()</code>，可以讓你在網頁上插入 JavaScript 運行。</p>\n<p>看到這個心花怒放一下，覺得撿到寶，可以在網頁上運行的話更好，在想進行事實查核的網頁上啟用這個 shortcuts，然後一切流程都直接用 JavaScript 在 web page 上執行就好，就不需要透過 shortcuts action 來處理資料了！</p>\n<p>利用 <code class=\"language-text\">runJavaScriptOnWebPage()</code> 所兜出來的 shortcuts 主要程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">runJavaScriptOnWebPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      const element = document.querySelector('title');\n      const title = element.textContent;\n      const url = 'https://content-factchecktools.googleapis.com/v1alpha1/claims:search?key=GoogleAPIKey&amp;query=' + title;\n      const result;\n      fetch(url)\n        .then(function(result) {\n          return result.json();\n        })\n        .then(function(data) {\n          result = data;\n          completion(result);\n        });\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">quickLook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不是很確定其 JavaScript 執行的環境為何，我並沒有去研究，但測試後是無法使用 await 的，使用單純的 promise 則可以。</p>\n<p>運行結果如下：</p>\n<p><img src=\"/image/fact-check-demo.gif\" alt=\"fact-check-demo\" title=\"fact-check-demo\"></p>\n<p>看起來只要把 response 在美化一下就好，但是我發現 Google API 回傳的結果沒有很好，會回傳很多不相干的，就也不想繼續優化了。</p>\n<p>不過既然知道可以在網頁上運行 JavaScript，那就可以做更多事情了！</p>\n<p>像是我後來找到的這位<a href=\"https://github.com/realdennis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">高手</a>，就利用這樣的方式來 <a href=\"https://github.com/realdennis/shortcuts-mono/tree/master/packages/shortcuts/sc-background-player\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bypass Youtube video 在手機網頁上無法背景播放的問題</a>，是我目前覺得最實用的 shortcuts XD</p>\n<p>而前言中的範例，我也是利用相同方式，將 <code class=\"language-text\">vConsole</code> inject 到頁面中，程式碼非常簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// injectScript.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'head'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// hacky way to wait for script load</span>\n    <span class=\"token keyword\">const</span> script2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script2<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">'window.vConsole = new VConsole();'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>本來是想直接利用 <code class=\"language-text\">script.onload</code> 在 <code class=\"language-text\">vConsole</code> 的 script 載入後進行 initial，但是不知道為何無法順利觸發，因此只好用 setTimeot 的方式快速 hack 一下。（這種實作會造成有時得啟用兩次 shortcut 才能成功載入 vConsole ...）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> injectScript <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./injectScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token function\">runJavaScriptOnWebPage</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        const injectScript = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>injectScript<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n        const result = injectScript();\n        completion(result);</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...略</span></code></pre></div>\n<p>完整程式碼我放在 <a href=\"https://github.com/ArvinH/shortcuts-vconsole\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>。</p>\n<h3 id=\"產生-icloud-link\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F-icloud-link\" aria-label=\"產生 icloud link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生 iCloud link</h3>\n<p>前面說過從 iOS 13 開始，不能夠再隨意用 AirDrop 丟入 <code class=\"language-text\">.shortcut</code> 的檔案，必須要透過 iCloud link。</p>\n<p>但我其實找不太到該如何將我產生的 <code class=\"language-text\">.shortcut</code> 檔案轉成 iCloud link，後來在 <a href=\"https://github.com/joshfarrant/shortcuts-js/issues/217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub issue</a> 上找到有人分享他從 <a href=\"https://www.reddit.com/r/shortcuts/comments/d738kr/ios13_importing_shortcuts_as_files_is_not/f2ngi2e/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reddit</a> 找到的 shortcuts - <a href=\"https://www.icloud.com/shortcuts/f9acfff2a5e94138a6574498d22c2813\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Import Shortcut</a>。</p>\n<p>只要將你做好的 <code class=\"language-text\">.shortcut</code> 檔案放入 iCloud Drive，透過這個 <strong>Import Shortcut</strong> 就能從你的 iCloud Drive 中將檔案抓下來並產生一個 iCloud link，接著理論上 iPhone 就會自動 detect 到，你也就能直接安裝。</p>\n<p>P.S. 再提醒一下，記得要到 \"設定\" -> \"捷徑\" -> \"允許不受信任的捷徑\" 將該選項開啟，才能 import 你自己製作的 shortcuts。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>shortcuts 這個概念蠻有意思的，一些小動作其實自己一步一步做也是可以，但透過 shortcuts 將常用的動作組織起來，一鍵就能完成，每個步驟省個三、四秒，整體可能就能省掉你十秒，如果這 shortcuts 很常用的話，勢必能增加效率，至少心理層面的感覺有 XD</p>\n<p>整體來說，shortcuts js 還有很多地方可以改進，目前我覺得還缺少一些蠻重要的 Action，一些輸入的參數目前也不是太好用，debug 也不方便（必須要裝載上去才能測試），希望透過這次介紹能引起多點人的興趣，或許能更加推進這個專案。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shortcuts-js website</a></li>\n<li><a href=\"https://github.com/joshfarrant/shortcuts-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shortcuts-js github</a> </li>\n<li><a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/afbrlh/using_apis_part1_retrieving_data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">retrieving data</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/afpwo2/using_apis_part_2_parsing_complex_api_responses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parsing complex api responses</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/ae80co/quick_and_dirty_guide_to_scraping_data_from/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapign web data</a>。</li>\n</ol>","fields":{"slug":"ios-shortcuts-js"},"frontmatter":{"title":"用 JS 玩轉 iOS shortcuts","date":"04-25-2020","tags":["web","iOS","JavaScript","experiment"]},"timeToRead":11}},"pageContext":{"slug":"ios-shortcuts-js","prev":{"excerpt":"好歌分享：Monkey Majik + 吉田兄弟 - Change","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/WK1wwgMpFDg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Monkey Majik + 吉田兄弟 - Change</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/WK1wwgMpFDg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>好一陣子之前在網路上看到 <a href=\"https://stenciljs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stencil JS</a>，原以為是跟 CSS 相關的框架，沒想到是 <a href=\"https://ionicframework.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ionic 團隊</a> 製作的 Web Component 工具，在 GitHub 上有七千多顆星星，看來是深受喜愛，但當時我對於 Web Component 存有一些疑慮，所以沒有多加研究，例如，雖然主打用 Browser 原生支援的 Custom Elements 來渲染共用元件，能共用在任何前端框架上，但其實也意味著，使用這共用元件的團隊，對於這個元件的掌控力也降低了，若是想要修改元件的行為，不可避免的也得去學習如何修改 Web Component，反而徒增成本。\n不過從另一個角度想，今天若有專門的團隊利用 Web Component 來建構與維護一整套 Design System 的話，可能就會是不錯的選擇。</p>\n<p>總之，最近偶然間聽到高手學弟再度提及 Stencil 的名字，加上我在修改個人網站的時候，正好想在文章頁加入類似 Medium 的拍手元件，覺得可以利用這機會來試試看，用 Stencil 來製作一個能在 React 或其他前端框架上能運行的 Web Component，用這篇文章記錄下過程。</p>\n<p>先看看成品：</p>\n<iframe height=\"410\" style=\"width: 100%;\" scrolling=\"no\" title=\"claps-button web component\" src=\"https://codepen.io/arvin0731/embed/preview/ExjGBNq?height=410&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/ExjGBNq'>claps-button web component</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>點擊拍手 emoji 時，除了記錄點擊次數外，還會有光點由外至內被吸引到手上，最後讓拍手 emoji 的顏色由灰階轉黃再發紅光，營造出一種元氣彈吸收能量的感覺。</p>\n<p>懶得看文章的可以到 GitHub 上看原始碼：<a href=\"https://github.com/ArvinH/claps-button\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/claps-button</a></p>\n<h2 id=\"stencil-簡介\" style=\"position:relative;\"><a href=\"#stencil-%E7%B0%A1%E4%BB%8B\" aria-label=\"stencil 簡介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stencil 簡介</h2>\n<blockquote>\n<p>Stencil is a compiler that generates Web Components (more specifically, Custom Elements). Stencil combines the best concepts of the most popular frameworks into a simple build-time tool.</p>\n</blockquote>\n<p>在官網上清楚的寫到 Stencil 的定位是一個 Compiler，用了目前流行的 tech stack 來製作出完全符合標準的 Web Components。</p>\n<p>參考了 React 的 Virtual DOM、Fiber 的 Async rendering、reactive data-binding，並支援 TypeScript 和 JSX 語法。對於習慣用 React 開發的人來說，算是非常好上手的一套工具。</p>\n<p>官網上的文檔清晰明瞭，而且很好閱讀，一路從 Introduction 順著讀下去，就會默默把各種功能與 API 也都看過一遍，包含如何整合在不同的前端框架中的資訊。</p>\n<p>其中也花了一些篇幅在介紹為什麼他們要製作這套工具，以及他們的目的是什麼。對於他們的出發點與目標，我覺得蠻有意思的：</p>\n<blockquote>\n<p>Stencil aims to combine the best concepts of the most popular frontend frameworks into a compile-time tool rather than run-time tool.</p>\n</blockquote>\n<p>他們對於 Stencil 的定位是屬於 <code class=\"language-text\">compile-time tool</code>，應用各種工具最佳化開發體驗，最終編譯出符合 Web Standards 且能運行在多數瀏覽器的元件。</p>\n<p>為此，他們提供了 out-of-the-box 的按需加載，這點對於 Web Component 來說非常重要，也大大提高我的使用意願；API 部分他們是從 Web Component 標準的 lifecycle 上再做延伸，並沒有太多他們自己的客製化 API，學習曲線相對低，但還是能保有良好的開發體驗，像是在使用 Framework 開發一般。</p>\n<p>有興趣的讀者可以前往<a href=\"https://stenciljs.com/docs/goals-and-objectives\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a>閱讀，內容不算太多，很快能掃過一遍。</p>\n<h2 id=\"如何製作\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E8%A3%BD%E4%BD%9C\" aria-label=\"如何製作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何製作</h2>\n<h3 id=\"專案設定\" style=\"position:relative;\"><a href=\"#%E5%B0%88%E6%A1%88%E8%A8%AD%E5%AE%9A\" aria-label=\"專案設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>專案設定</h3>\n<p>接下來就說明如何使用 Stencil 來製作 Web Component。</p>\n<p>首先我們利用 Stencil 的 cli 開啟一個專案：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init stencil</code></pre></div>\n<p>你可以看到我們其實有三種選擇：<code class=\"language-text\">ionic-pwa</code>、<code class=\"language-text\">app</code>、<code class=\"language-text\">component</code></p>\n<p><img src=\"/image/stencil-cli.png\" alt=\"stencil-cli\" title=\"stencil-cli\"></p>\n<p>ionic-pwa 與 app 都是用來建構一個完整 Web application 的 starter kit，單純建構 Component 的話只需要選擇 component 這個 starter kit 即可。有興趣的讀者也可以裝 ionic-pwa 與 app 試試看，Stencil 提供了自己的 router \b與 redux lib，讓你能有與開發目前一般前端應用程式相似的體驗。</p>\n<p>選擇安裝好 <code class=\"language-text\">component starter kit</code> 後，可以看到下面的專案結構：</p>\n<p><img src=\"/image/stencil-starter-kit-structure.png\" alt=\"stencil-starter-kit-structure\" title=\"stencil starter kit structure\"></p>\n<p>重點只有一個，就是 <code class=\"language-text\">components</code> 資料夾，底下包含了 e2e 測試的檔案、css 檔與 component 主程式所在的 <code class=\"language-text\">my-component.tsx</code>。可以看到都是由 Typescript 為主要 stack，其中的 type file <code class=\"language-text\">components.d.ts</code> 在你 <code class=\"language-text\">build</code> 與 <code class=\"language-text\">run dev</code> 的過程中會自動幫你 codegen 出來。</p>\n<p>其中的 <code class=\"language-text\">index.html</code> 是 <code class=\"language-text\">run dev</code> 時的主要 html template，你可以在這邊測試你設計的 component 使用情境。</p>\n<p>接著來看一下 package.json 的內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-first-component\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stencil Component Starter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/index.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"es2015\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/esm/index.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"es2017\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/esm/index.mjs\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/types/index.d.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"collection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/collection/collection-manifest.json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"collection:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/collection/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"unpkg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/my-first-component/my-first-component.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"dist/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"loader/\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil build --docs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil build --dev --watch --serve\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil test --spec --e2e\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test.watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil test --spec --e2e --watchAll\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"generate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stencil generate\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@stencil/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.8.8\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本的 npm script 都幫你準備好了，當你 <code class=\"language-text\">npm run build</code> 的時候，除了基本的 main - <code class=\"language-text\">dist/index.js</code> 外，module 模式的 <code class=\"language-text\">dist/index.mjs</code> 與 <code class=\"language-text\">es2015</code>、<code class=\"language-text\">es2017</code> 的編譯版本都有，甚至準備了給 <code class=\"language-text\">unpkg</code> 使用的 destination。</p>\n<p>唯一一點要注意的是，當你準備要 publish 你的 component 到 npm 上，讓人透過 <a href=\"https://unpkg.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unpkg</a> 使用時，記得一定要先 <code class=\"language-text\">npm run build</code>，產生 production build 才會有的編譯檔案，這樣才能夠正確地被人引入使用。</p>\n<p>另外，裡面唯一比較特殊的 config 檔案 - <code class=\"language-text\">stencil.config.ts</code> 則是用來設定各種 stencil plugin 的，例如在我的範例中，我使用了 SCSS，這時就可以在此 config 檔中設定 scss plugin：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Config <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// sass plugin</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/sass'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  namespace<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button'</span><span class=\"token punctuation\">,</span>\n  outputTargets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">,</span>\n      esmLoaderPath<span class=\"token operator\">:</span> <span class=\"token string\">'../loader'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'docs-readme'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'www'</span><span class=\"token punctuation\">,</span>\n      serviceWorker<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// disable service workers</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// can setup plugins here</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"程式開發\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC\" aria-label=\"程式開發 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程式開發</h3>\n<p>利用 starter kit 把專案建立好，接著把名稱改成自己的 component 後，就能開始正式撰寫程式碼。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Prop<span class=\"token punctuation\">,</span> State<span class=\"token punctuation\">,</span> Listen<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> Host <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@stencil/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button'</span><span class=\"token punctuation\">,</span>\n  styleUrl<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button.scss'</span><span class=\"token punctuation\">,</span>\n  shadow<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">State</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Listen</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> capture<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Host<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          color<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"claps-btn-container\"</span>\n          data<span class=\"token operator\">-</span>count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          👏\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Host<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"一步步解析\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E6%AD%A5%E6%AD%A5%E8%A7%A3%E6%9E%90\" aria-label=\"一步步解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一步步解析</h3>\n<p><strong>@Component</strong> decorator 提供 Stencil compiler 關於你的元件的 Metadata。其中，<code class=\"language-text\">tag</code> 顧名思義就是你元件的 tag 名稱要叫做什麼；<code class=\"language-text\">styleUrl</code> 標示出你要引入的 css 檔案；<code class=\"language-text\">shadow</code> 代表你的元件是否要使用 shadow dom。</p>\n<p>使用 shadow dom 的差別在於你想不想要元件內的所有元素被封裝起來。不清楚何謂 shadow dom 的可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 的說明</a>。若是你有開啟 shadow dom，你的元件在 HTML Tree 中會長得像這樣：</p>\n<p><img src=\"/image/stencil-shadowdom.png\" alt=\"shadow-dom\" title=\"shadow dom\"></p>\n<p>下面實際 Component 實作的部分，則跟 React Component 類似，一樣有 <code class=\"language-text\">render</code> 函式回傳 <code class=\"language-text\">JSX</code>；ㄧ樣有 private/public method 可以宣告使用。</p>\n<p>你可以利用 <code class=\"language-text\">@State()</code> 與 <code class=\"language-text\">@Prop()</code> 兩個 decorator 來宣告元件的狀態(state) 與可接受的 Props。</p>\n<p><code class=\"language-text\">@Listen()</code> decorator 則是 Stencil 用來監聽外部 DOM Event 的，可以傳入不同的 option，像是上面範例中的 <code class=\"language-text\">{ capture: true }</code> 就是告知我們要在 Capture 階段 fire listener；也可以指定 <code class=\"language-text\">target</code>，告訴 Stencil 你要把這個 listener 綁定在誰身上，像是 scroll event，可以 target 在 window 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> target<span class=\"token operator\">:</span> <span class=\"token string\">'window'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">handleScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'the body was scrolled'</span><span class=\"token punctuation\">,</span> ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，還有個 <code class=\"language-text\">@Event()</code> decorator 可以用來 emit data 跟 event，並用 <code class=\"language-text\">@Listen()</code> decorator 捕獲。詳情可以<a href=\"https://stenciljs.com/docs/events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">參閱官網</a>。</p>\n<p>最後在 render 函式中有個特別的 Element 叫做 <code class=\"language-text\">Host</code>，在 Web component 的世界中，host environment 代表的是 <em>host</em> 你的 custom web component 的環境，通常就是一般的 DOM Tree，而這邊的 <code class=\"language-text\">Host</code> component 也雷同，代表的就是你的 Web component 本身，你傳入給 Host element 的屬性都會反映在 web component 的 tag 身上。從官網給的範例來看可能會更清楚：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>tag<span class=\"token operator\">:</span> <span class=\"token string\">'todo-list'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> open <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Host\n        aria<span class=\"token operator\">-</span>hidden<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>open <span class=\"token operator\">?</span> <span class=\"token string\">'false'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          <span class=\"token string\">'todo-list'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'is-open'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>open\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根據傳入你的 custom tag 的屬性 <code class=\"language-text\">open</code> 的狀態，會改變其 <code class=\"language-text\">aria-hidden</code> 屬性的內容。</p>\n<p>如果 <code class=\"language-text\">this.open === true</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">&lt;</span>todo<span class=\"token operator\">-</span>list <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"todo-list open\"</span> aria<span class=\"token operator\">-</span>hidden<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>todo<span class=\"token operator\">-</span>list<span class=\"token operator\">></span></code></pre></div>\n<p>此外，<code class=\"language-text\">Host</code> element 也可以單純用來取代 React 中的 <code class=\"language-text\">Fragement</code>。</p>\n<h3 id=\"其他細節與注意事項\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E7%B4%B0%E7%AF%80%E8%88%87%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"其他細節與注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他細節與注意事項</h3>\n<p>至此為止其實就已經可以產出一個 Web Component 了，接下來要做的就都只是加入元件所需的實作細節，下面程式碼我省略了一些產生動畫的細節，有興趣的可以<a href=\"https://github.com/ArvinH/claps-button\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">從 GitHub 上參考原始碼</a>，實作方式其實很簡單暴力，就是固定產生許多小光點，然後算好圓形座標的位置與位移，並利用 <code class=\"language-text\">animate API</code> 來加上 <code class=\"language-text\">keyframe</code>，在點擊拍手 emoji 的時候觸發動畫，並加上 <code class=\"language-text\">text-shadow</code> 與 <code class=\"language-text\">filter: grayscale</code> 的屬性來增加效果。</p>\n<p>這邊我著重說明一些關於 Stencil 實作 web component 上的一些細節：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tag<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button'</span><span class=\"token punctuation\">,</span>\n  styleUrl<span class=\"token operator\">:</span> <span class=\"token string\">'claps-button.scss'</span><span class=\"token punctuation\">,</span>\n  shadow<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Element</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> el<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">State</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> size<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Prop</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> preserve<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Listen</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> capture<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preserve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">claps-wc-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAnimation</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preserve<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">claps-wc-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">runAnimation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rootElm  <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.claps-btn-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ...略</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateChi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...略</span>\n      <span class=\"token comment\">// 產生圓形氣體顆粒效果</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> chiArray <span class=\"token operator\">=</span> <span class=\"token function\">generateChi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    chiArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>chi <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      root<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>chi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    rootElm<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Host<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"counter\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          color<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n          borderColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n          width<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n          height<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"claps-btn-container\"</span>\n          data<span class=\"token operator\">-</span>count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span>\n          style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            width<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n            height<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n            fontSize<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">||</span> <span class=\"token string\">'3rem'</span><span class=\"token punctuation\">,</span>\n            textShadow<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">1px 0px </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">:</span> <span class=\"token number\">20</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px red</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            filter<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">grayscale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>\n              <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">/</span> <span class=\"token number\">20</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          👏\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Host<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先是 <strong>lifecycle</strong>，Stencil 除了提供 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Component 標準的 lifecycle</a> - <code class=\"language-text\">connectedCallback()</code> 與 <code class=\"language-text\">disconnectedCallback()</code> 外，還提供了許多類似當初 React 的 component lifecycle，可以從官方的圖檔中一目瞭然：</p>\n<p><img src=\"/image/stencil-component-lifecycle.png\" alt=\"stencil-component-lifecycle\" title=\"stencil component lifecycle\"></p>\n<p>我們範例中用到的 <code class=\"language-text\">componentWillLoad</code> 會在 Component 進行第一次 render 前被呼叫，所以適合用來 initialized data，這邊的例子是從 localStorage 中取出資料。</p>\n<p>另一個執得注意的地方是取得 shadow dom 元素的方法。</p>\n<p>在 <code class=\"language-text\">runAnimation()</code> 函數中，我需要將動態產生的光點掛載到 web component 的 shadow dom 上，而要能存取 shadow dom，需要先利用 <code class=\"language-text\">@Element()</code> decorator 來宣告一個 Host element 的 reference，該 decorator 會回傳一個 <code class=\"language-text\">HTMLElement</code> 的 instance，你就能以此來存取 shadow dom：</p>\n<p><code class=\"language-text\">const rootElm  = this.el.shadowRoot.querySelector('.claps-btn-container');</code></p>\n<p>最後，還有一些這次範例中未用到的 API，像是 public method 的使用與類似 Observable 的 Watch decorator 等等，有興趣的讀者在前往官網查看即可，都寫得蠻清楚的。</p>\n<p><a href=\"https://stenciljs.com/docs/decorators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stencil API Docs</a></p>\n<h2 id=\"如何運用在不同-framework-上\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%81%8B%E7%94%A8%E5%9C%A8%E4%B8%8D%E5%90%8C-framework-%E4%B8%8A\" aria-label=\"如何運用在不同 framework 上 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何運用在不同 framework 上</h2>\n<p>使用在不同框架的方法，我試了兩種，首先是 React；</p>\n<iframe\n  src=\"https://codesandbox.io/embed/webcomponent-test-react-w7lyv?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"webcomponent-test-react\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n<p>最簡單的方式就是在 template index.html 中放入：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://unpkg.com/claps-button@1.0.7/dist/claps-button.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>然後就能在任意 component 中加入：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>claps-button</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3rem<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">preserve</span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>claps-button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>然而像 Vue 的話，就沒辦法直接這樣做，必須要以 <code class=\"language-text\">npm install ${your web component}</code> 的方式載入到你的 App 中，並在 <code class=\"language-text\">main.js</code> 中，從 stencil 提供的 loader 中去 <code class=\"language-text\">defineCustomElements</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  applyPolyfills<span class=\"token punctuation\">,</span>\n  defineCustomElements\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"claps-button/loader/index.cjs.js\"</span><span class=\"token punctuation\">;</span>\nVue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>productionTip <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Tell Vue to ignore all components defined in the claps-button</span>\n<span class=\"token comment\">// package. The regex assumes all components names are prefixed</span>\n<span class=\"token comment\">// 'claps'</span>\nVue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ignoredElements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">claps-\\w*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Bind the custom elements to the window object</span>\n<span class=\"token function\">applyPolyfills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">defineCustomElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"but\" style=\"position:relative;\"><a href=\"#but\" aria-label=\"but permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>But！</strong></h3>\n<p>這樣的做法目前似乎有許多問題，會一直出現 <code class=\"language-text\">TypeError: Cannot read property 'isProxied' of undefined</code> 的 Error，在網路上有許多討論，截至我完成這篇文章為止，尚未有結論。例如：<a href=\"https://github.com/ionic-team/stencil/issues/1661\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 上的 issue</a> 和 <a href=\"https://en.programqa.com/question/59887533/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Svelte 的例子</a></p>\n<p>所以我想目前可能還是以 script tag 的方式引入最為保險。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Web Component 的存在必要還是有很多爭議，我個人偏好將其運用在 Design System 中，由一個固定的 Team 去維護，如此以來才能發揮他目前的最大功用。</p>\n<p>用 Stencil 開發 Web Component 的體驗挺不錯的，如果你有手刻過 custom elements，你應該也會驚艷於他們將整個開發體驗包裹得很好，有時間的話值得玩玩！</p>\n<p>這次我在開發的拍手元件的同時，除了學習到 Stencil 的開發方式外，也意外練習到動畫製作的經驗，挺有趣的，大家也拿個自己想做的小 component 來試試看吧！也歡迎跟我分享心得互相指教！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://stenciljs.com/docs/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StencilJS official site</a></li>\n<li><a href=\"https://codepen.io/realdennis/pen/RwNNqbj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">emoji claps inspired by this codepen</a></li>\n</ol>","id":"0d43301a-6acf-560a-a1b6-8a606988fb21","fields":{"slug":"stenciljs-webcomponent"},"frontmatter":{"date":"2020-03-28T13:37:30.000Z","title":"利用 Stencil 建構 Web Component","tags":["web","stencil","JavaScript","Web Component"],"type":"tech","slug":"stenciljs-webcomponent"},"timeToRead":12},"next":{"excerpt":"好歌分享：San Cisco - 'On The Line'","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/jlubk5RYCAc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - 'On The Line'</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/jlubk5RYCAc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>生成藝術一直是我很想學習的主題，雖然知道大部分的人會使用 <a href=\"https://processing.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">processing</a>, <a href=\"http://paperjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper.js</a>, 或是 <a href=\"https://zimjs.com/art.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zimjs</a> 來製作 Generative art, 但在對於自己的藝術天份很有自知之明的情況下，一直都沒有去嘗試製作，再加上這些工具的學習也是有ㄧ定門檻。</p>\n<p>然而，最近在 Youtube 上看到 <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 的<a href=\"https://codepen.io/yuanchuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作者 - 袁川</a>於 <a href=\"https://www.youtube.com/watch?v=mEpocRIc3q8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSSConf CN 2019 的演講</a>，才了解到要\"開始\"似乎沒有這麼難，只要掌握一些基本觀念與技巧即可，而且他開發的 web component <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 無論是語法或是使用都算易懂好上手。</p>\n<p>今天藉由這篇文章分享該演講中我很喜歡的一些重點，並試著介紹與運用 CSS/JS 和 css-doodle 製作一些簡單的生成藝術作品。</p>\n<p>先給大家看第一個小 demo，這是參照袁川在演講中提及的一個範例實作，利用純 CSS 與 JS 所製作的簡單生成藝術:</p>\n<iframe height=\"423\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample I\" src=\"https://codepen.io/arvin0731/embed/zYvbKQJ?height=423&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/zYvbKQJ'>CSS  Generative Art - sample I</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2 id=\"簡單的事重複做就不簡單\" style=\"position:relative;\"><a href=\"#%E7%B0%A1%E5%96%AE%E7%9A%84%E4%BA%8B%E9%87%8D%E8%A4%87%E5%81%9A%E5%B0%B1%E4%B8%8D%E7%B0%A1%E5%96%AE\" aria-label=\"簡單的事重複做就不簡單 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>簡單的事重複做就不簡單</h2>\n<p>在生成藝術中，<code class=\"language-text\">Loop</code> 佔了很主要的角色，需要透過迴圈的方式去自動產生圖案。而圖案其實不需要複雜，在第一個範例中的元素就只有<strong>直線</strong>。</p>\n<p>簡單的直線，透過 <code class=\"language-text\">transform: rotate()</code>，就能夠有不一樣的變化，而透過組合，將多個擁有不同狀態的直線串接在一起，再加上時間因子作為變數去改變狀態，就可以是一個簡單的生成藝術。</p>\n<p>程式碼也很簡短：</p>\n<p>先設定一個 5x5 的表格：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">div.grid\n  div\n  div\n  // 略 ... 共 25 個 div</code></pre></div>\n<p>現在利用 CSS grid 可以很輕易控制表格的呈現，接著我們可以將之後預期要來拿隨機變化的屬性以 css variable 的方式設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--theme</span><span class=\"token punctuation\">:</span> #FF9800<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--deg</span><span class=\"token punctuation\">:</span> 45deg<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--gride-size</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grid</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--gride-size<span class=\"token punctuation\">)</span> * 5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 18px 1px <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span> inset<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--gride-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grid div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s ease-in<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JS 的部分就只需要在固定的 time interval 中間賦以隨機產生的數值到 CSS variable 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRandomBoolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">16777215</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">6</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">f</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> sign <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">randomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.grid > div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  theme <span class=\"token operator\">=</span> <span class=\"token function\">randomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  divs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getRandomBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skew(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sign<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">45deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--theme'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>theme<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以這樣的基本想法出發，就可以修改成不同的變化，像是加入 <code class=\"language-text\">clip-path</code> 來進一步操作畫面中的圖案元素：</p>\n<iframe height=\"362\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample II\" src=\"https://codepen.io/arvin0731/embed/OJyqOXZ?height=362&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/OJyqOXZ'>CSS  Generative Art - sample II</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>帶入一點數學，可以產生更多不同的 polygon：</p>\n<iframe height=\"476\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample III\" src=\"https://codepen.io/arvin0731/embed/VwvRdXe?height=476&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/VwvRdXe'>CSS  Generative Art - sample III</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>上面這範例中我是隨便用三角函數設定一個公式來跑，但在演講中，袁川有提及 <strong>lissajous curves</strong> 這個古老的數學公式，他發現非常適合用在 <code class=\"language-text\">clip-path</code> 上頭，搭配 <code class=\"language-text\">poylgon</code> 的 <code class=\"language-text\">fill-rule</code> 屬性，可以做出以下的效果，像是許多特殊的海洋生物一般：</p>\n<p><img src=\"/image/lissajous-curve-clip-path.png\" alt=\"lissajous-curve-clip-path\">\n(出處：<a href=\"https://youtu.be/mEpocRIc3q8?t=737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://youtu.be/mEpocRIc3q8?t=737</a>)</p>\n<h2 id=\"發揮更多想像力\" style=\"position:relative;\"><a href=\"#%E7%99%BC%E6%8F%AE%E6%9B%B4%E5%A4%9A%E6%83%B3%E5%83%8F%E5%8A%9B\" aria-label=\"發揮更多想像力 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>發揮更多想像力</h2>\n<p>妥善使用 <strong>迴圈</strong>、<strong>pattern</strong>、<strong>隨機性</strong>這三個要素，就可以有許多的創意組合，除了上面的線條和 <code class=\"language-text\">clip-path</code> 外，CSS 繪圖常用到的 <code class=\"language-text\">border-style</code>, <code class=\"language-text\">border-image</code>, <code class=\"language-text\">gradient</code>, <code class=\"language-text\">box-shadow</code> 等等都能拿來嘗試。</p>\n<p>附上幾個袁川在 codepen 上的作品：</p>\n<ul>\n<li>border-image: <a href=\"https://codepen.io/yuanchuan/pen/aQjKwO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/aQjKwO</a></li>\n<li>background-image + linear-gradient: <a href=\"https://codepen.io/yuanchuan/pen/NLXZLm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/NLXZLm</a></li>\n<li>radial-gradient: <a href=\"https://codepen.io/yuanchuan/pen/LXPJOW\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/LXPJOW</a></li>\n</ul>\n<p><img src=\"/image/yuanchuan-works.png\" alt=\"yuanchuan-works\"></p>\n<p>這只是其作品的冰山一角，有興趣的讀者可以到他的 <a href=\"https://codepen.io/yuanchuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen</a> 上欣賞各種絢麗的畫作。</p>\n<p>像是這個用 z-index 堆疊出的城市天際線圖，不得不佩服他的創造力：</p>\n<iframe height=\"306\" style=\"width: 100%;\" scrolling=\"no\" title=\"z-index -- City \" src=\"https://codepen.io/yuanchuan/embed/MMYmqv?height=306&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/yuanchuan/pen/MMYmqv'>z-index -- City </a> by yuanchuan\n  (<a href='https://codepen.io/yuanchuan'>@yuanchuan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>另外，在袁川的演講中，讓我特別印象深刻的是他利用 <code class=\"language-text\">text-shadow</code> 的效果，將一個括號，運用在生成藝術中，你沒看錯，就是 <code class=\"language-text\">(</code> 這個括號。</p>\n<p>我找不到袁川<a href=\"https://youtu.be/mEpocRIc3q8?t=1751\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">影片</a>中的範例，但自己依照他的介紹用純 css/js 實作了一個版本：</p>\n<iframe height=\"389\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Generative Art - sample IV\" src=\"https://codepen.io/arvin0731/embed/abvMXmX?height=389&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/abvMXmX'>CSS Generative Art - sample IV</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>除了 <code class=\"language-text\">text-shadow</code>，上面範例中也用上了 <code class=\"language-text\">filter</code>, <code class=\"language-text\">rotation</code>, <code class=\"language-text\">font-size</code> 等等的隨機屬性變化，來生成這幅圖案。</p>\n<h2 id=\"css-doodle\" style=\"position:relative;\"><a href=\"#css-doodle\" aria-label=\"css doodle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-Doodle</h2>\n<p>上面的範例都是用 pure css/js 完成的，但袁川其實製作了一個 web component，把許多製作 generative art 需要的一些功能幫你包好成多個函式，像是想要產生 grid，不用再到 html 內複製一大堆 div，也不用自己用 JS createElement，只要透過 css-doodle，一句話就能做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:doodle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@grid</span><span class=\"token punctuation\">:</span> 1x10 / 85%<span class=\"token punctuation\">;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>css-doodle 是基於 Shadow DOM v1 和 Custom Elements v1 實作的 web component，基本上目前主流瀏覽器都能支援。</p>\n<p>像上面的例子，透過設定 css-doodle web component 的 shadow-dom 屬性，可以讓他幫你產生 grid layout 的 divs。而在 component 內除了能撰寫一般的 CSS 外，也能利用他提供的 utility function 快速達到一些 random、pick one 等等的效果。</p>\n<p>我很喜歡作者在官網上很霸氣地一句話：The limit is the limit of CSS itself.</p>\n<p>從他的作品集來看，所言不假。</p>\n<p>\bcss-doodle 的官網就是一個詳細的<a href=\"https://css-doodle.com/#usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用手冊</a>，每個 function 與屬性的旁邊都有對應的實際範例幫助你理解。提供的函式說多不多，說少也不少，一個一個看完也不一定能馬上記住，還是得要在實作時邊對照查詢。</p>\n<p>所以說做中學還是最快的，今天文章最後就來解析一個袁川利用 css-doodle 製作的作品，一方面能臨摹大神的創意，另一方面也能比較深刻的了解這些函式的用法。</p>\n<h2 id=\"css-doodle-作品解析\" style=\"position:relative;\"><a href=\"#css-doodle-%E4%BD%9C%E5%93%81%E8%A7%A3%E6%9E%90\" aria-label=\"css doodle 作品解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css-doodle 作品解析</h2>\n<p>挑一個我很喜歡的作品，非常的漂亮！</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Chasing\" src=\"https://codepen.io/yuanchuan/embed/pBrMNQ?height=265&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/yuanchuan/pen/pBrMNQ'>Chasing</a> by yuanchuan\n  (<a href='https://codepen.io/yuanchuan'>@yuanchuan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>這個作品分成兩個 component，一個是背後不斷滑落的線條，另一個是類似不斷旋轉的 DNA 螺旋。</p>\n<p>我們單就 DNA 螺旋來看，程式碼非常簡短：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:doodle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@grid</span><span class=\"token punctuation\">:</span> 45x1 / 40vmin<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50%<span class=\"token punctuation\">,</span> 33vmin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:after, :before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span>\n  <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token atrule\"><span class=\"token rule\">@p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transparent 0\n  <span class=\"token punctuation\">)</span> \n  <span class=\"token atrule\"><span class=\"token rule\">@pn</span><span class=\"token punctuation\">(</span>30% 50%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 50% 60%<span class=\"token punctuation\">)</span> / \n  <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>.1vmin<span class=\"token punctuation\">,</span> 5vmin<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@lr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  no-repeat<span class=\"token punctuation\">;</span></span></span></span></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> centerr<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> r 4s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-4s / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token property\">--translate</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-66vmin / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> r</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>-1turn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>要使用 css-doodle 的話，上面這段 css 是要放在 <code class=\"language-text\">&lt;css-doodle></code> component 內的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>css-doodle</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Your css --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>css-doodle</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"doodle\" style=\"position:relative;\"><a href=\"#doodle\" aria-label=\"doodle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:doodle</h4>\n<p><code class=\"language-text\">:doodle</code> 是針對 <code class=\"language-text\">&lt;css-doodle></code> 這個元素本身的 selector，範例中設定了 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">z-index</code>，比較特別的是 <code class=\"language-text\">@grid</code> 的使用。</p>\n<h4 id=\"grid\" style=\"position:relative;\"><a href=\"#grid\" aria-label=\"grid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@grid</h4>\n<p><code class=\"language-text\">@grid</code> 是用來定義 css-doodle 的 grid layout，你也可以直接設定在 <code class=\"language-text\">&lt;css-doodle grid=\"5\"></code> 上，但是 <code class=\"language-text\">@grid</code> 的屬性設定會有比較高的優先權。</p>\n<p><code class=\"language-text\">@grid: 45x1 / 40vmin;</code> 代表的是 doodle size 為 <strong>41vmin</strong>，且其中有 <strong>45 x 1</strong> 的 grid。(<code class=\"language-text\">vmin</code> 代表的是當前 <code class=\"language-text\">vh</code> 與 <code class=\"language-text\">vw</code> 中最小的值)</p>\n<p>當你設定了 <code class=\"language-text\">grid</code> 後，<code class=\"language-text\">css-doodle</code> 的 <code class=\"language-text\">shadow-dom</code> 會長出類似如下的結構：</p>\n<p><img src=\"/image/css-doodle-shadowdom.png\" alt=\"css-doodle-shadowdom\"></p>\n<p>會產生一個 <code class=\"language-text\">&lt;div class=\"container\"></code>，並且在裡面產生對應你所設定的 <code class=\"language-text\">grid</code> 數量的 <code class=\"language-text\">&lt;div cell></code>。</p>\n<p>其中有個重點是，在 <code class=\"language-text\">&lt;css-doodle></code> 元件內設定的 CSS 會套用到每一個 <code class=\"language-text\">&lt;div cell></code>，以 <code class=\"language-text\">[cell]:nth-of-type(1)</code> 這樣的 css selector 把生成的 css style 個別應用到 DOM 上。</p>\n<h4 id=\"container\" style=\"position:relative;\"><a href=\"#container\" aria-label=\"container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:container</h4>\n<p><code class=\"language-text\">:container</code> 代表的是 <code class=\"language-text\">:doodle</code> 內 grid layout 的 container，也就是上面說到的 <code class=\"language-text\">&lt;div class=\"container\"></code>。範例中設置 <code class=\"language-text\">transform: translate(50%, 33vmin)</code> 也就只是把其偏移到畫面中間的位置。</p>\n<hr>\n<p>接下來的 <code class=\"language-text\">:after, :before</code> 是整個圖形的重點：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:after, :before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span>\n  <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token atrule\"><span class=\"token rule\">@p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transparent 0\n  <span class=\"token punctuation\">)</span> \n  <span class=\"token atrule\"><span class=\"token rule\">@pn</span><span class=\"token punctuation\">(</span>30% 50%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 50% 60%<span class=\"token punctuation\">)</span> / \n  <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>.1vmin<span class=\"token punctuation\">,</span> 5vmin<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@lr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  no-repeat<span class=\"token punctuation\">;</span></span></span></span></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"place-cell\" style=\"position:relative;\"><a href=\"#place-cell\" aria-label=\"place cell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@place-cell</h4>\n<p><code class=\"language-text\">@place-cell</code> 是用來指定 cell 相對於整個 grid layout 中的位置，在此 component 的 <code class=\"language-text\">:after, :before</code> 都設定 <code class=\"language-text\">@place-cell: center</code>，就代表 grid 中 cell 的 <code class=\"language-text\">:after</code> 與 <code class=\"language-text\">:before</code> 都置於相對於整個 grid 的中心位置。</p>\n<h4 id=\"size\" style=\"position:relative;\"><a href=\"#size\" aria-label=\"size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@size</h4>\n<p>很單純就是同時設定 <code class=\"language-text\">wdith</code> 與 <code class=\"language-text\">height</code> 的值。</p>\n<h4 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h4>\n<p>作者利用 grid 內每個 <code class=\"language-text\">&lt;div cell></code> 的 <code class=\"language-text\">:after</code> 與 <code class=\"language-text\">:before</code>，使用 <code class=\"language-text\">background</code> 與 <code class=\"language-text\">radial-gradient</code> 屬性來製造我們看到的圓點。</p>\n<p>主要使用到 <code class=\"language-text\">background-image</code>、<code class=\"language-text\">background-position-x|y</code>、<code class=\"language-text\">background-size</code>、<code class=\"language-text\">background-repeat</code> 四個屬性。</p>\n<p>如果單純取其中一個 cell 來觀察的話，會長這樣：</p>\n<p><img src=\"/image/css-doodle-cell-div-single-dot.gif\" alt=\"css-doodle-cell-div-single-dot\"></p>\n<p>若再加上 <code class=\"language-text\">css-doodle</code> 提供的一些 random (@r), pick(@p) 等 utility function，就可以造成每一個 cell div 都各自擁有兩個不同顏色、大小、位置的圓點。</p>\n<p>接下來針對 <code class=\"language-text\">background</code> 屬性所使用到的 utility function 作介紹。</p>\n<h4 id=\"p-pickv1-v2\" style=\"position:relative;\"><a href=\"#p-pickv1-v2\" aria-label=\"p pickv1 v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@p, @pick(v1, v2,...)</h4>\n<p><code class=\"language-text\">@p</code> 為 <code class=\"language-text\">@pick</code> 的 alias。它會從給定的 list 中隨機挑選數值出來：</p>\n<p><code class=\"language-text\">@p(#FFFDE1, #FB3569)</code> 就會從這兩個顏色中隨機挑選一個。</p>\n<h4 id=\"r-randstart-end\" style=\"position:relative;\"><a href=\"#r-randstart-end\" aria-label=\"r randstart end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@r, @rand(start [,end])</h4>\n<p><code class=\"language-text\">@r</code> 為 <code class=\"language-text\">@rand</code> 的 alias。接受至少一個參數，作為區間的頭與尾，它會從給定的區間中隨機挑選兩個數值。</p>\n<p>因此範例中，<code class=\"language-text\">background-image</code> 的 <code class=\"language-text\">radial-gradient</code> 屬性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span> @<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> @<span class=\"token function\">r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transparent 0 <span class=\"token punctuation\">)</span> </code></pre></div>\n<p>第一層的設定等同於隨機選取兩個顏色（紅、白），並從 0 ~ 70% 之間選取一個百分比數值作為大小。</p>\n<h4 id=\"pn-pick-nv1-v2\" style=\"position:relative;\"><a href=\"#pn-pick-nv1-v2\" aria-label=\"pn pick nv1 v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@pn, @pick-n(v1, v2,...)</h4>\n<p><code class=\"language-text\">@pn</code> 為 <code class=\"language-text\">@pick-n</code> 的 alias。會從給定的 list 中，一個一個取出，對應到 <code class=\"language-text\">grid</code> 中的 <code class=\"language-text\">cell</code>。</p>\n<p>以範例來說，就會依序設置 <code class=\"language-text\">cell</code> 的 <code class=\"language-text\">background-position</code> 值為 30% 50%，70% 50% 和 50% 60%。（依照我觀察，似乎不會保證依照列表的順序，但還是會一個一個對應設置到 <code class=\"language-text\">cell</code> 上）</p>\n<h4 id=\"lr-last-rand\" style=\"position:relative;\"><a href=\"#lr-last-rand\" aria-label=\"lr last rand permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@lr, @last-rand</h4>\n<p>至於 <code class=\"language-text\">background-size</code>，範例使用 <code class=\"language-text\">@r(.1vmin, 5vmin) @lr()</code>，其中 <code class=\"language-text\">@r(.1vmin, 5vmin)</code> 就是從 .1vim 到 5vmin 中取一個值，而 <code class=\"language-text\">@lr</code> 則代表取得最後一個 random 函式所取得的數值，也就是 <code class=\"language-text\">@r(.1vmin, 5vmin)</code> 的結果。最終的 <code class=\"language-text\">background-size</code> 就會是兩個相同的隨機值。</p>\n<p>到目前為止，設定出來的圖形會長這樣：</p>\n<p><img src=\"/image/css-doodle-no-animation.png\" alt=\"css-doodle-no-animation\"></p>\n<p>所有的點會集中在一起，因為我們的 grid 是 <code class=\"language-text\">45x1</code>，也就是只有一個 column。</p>\n<p>範例中，作者用 <code class=\"language-text\">translateY</code> 的方式來將每個點隨機向 Y 軸移動，並加上 <code class=\"language-text\">@keyframe</code> 與 <code class=\"language-text\">rotate</code> 的效果，就完成了螺旋的生成圖案：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> r 4s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-4s / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token property\">--translate</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-66vmin / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> r</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>-1turn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"i-index\" style=\"position:relative;\"><a href=\"#i-index\" aria-label=\"i index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@i, @index</h4>\n<p>唯一用到的 utility function 是 <code class=\"language-text\">@i</code>，代表當前套用到該 css 的 <code class=\"language-text\">cell</code> 的 index。</p>\n<p>螺旋的部分到此為止，而另一個滑落效果的 doodle 運用的技巧也差不多，但是效果卻完全不同，有興趣的讀者可以研究 codepen 上的原始碼。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>生成藝術除了要有創意外，擁有好的實作工具也很重要，\b<code class=\"language-text\">css-doodle</code> 算是給了想嘗試生成藝術的人一個好的開頭，像是文章一開始所製作的簡單生成藝術，也都能夠透過 <code class=\"language-text\">css-doodle</code> 來實作，程式碼會簡短很多。</p>\n<p>而透過 processing 等工具能做出更多效果，甚至能搭配音樂來做出不同變化，今天只是透過 <code class=\"language-text\">css-doodle</code> 的啟發，練習了一些簡單的生成藝術，體驗了一下，非常有趣，推薦大家一起來試試！</p>\n<p>袁川的影片後半段還有很多使用絢麗技巧的生成藝術，非常推薦大家花個四十分鐘把影片看完，相信會有不少收穫，就算不想自己嘗試，欣賞他所創作的作品也是一種享受。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=mEpocRIc3q8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS生成藝術@袁川_CSSConf CN 2019</a></li>\n<li><a href=\"https://css-doodle.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a></li>\n<li><a href=\"https://processing.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">processing</a></li>\n<li><a href=\"http://paperjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper.js</a></li>\n<li><a href=\"https://zimjs.com/art.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zimjs</a></li>\n</ol>","id":"18096a95-291e-51a8-ab74-8bb45209d2c1","fields":{"slug":"css-generative-art-css-doodle"},"frontmatter":{"date":"2020-05-23T13:37:30.000Z","title":"CSS 生成藝術初探與 css-doodle 簡介","tags":["web","css","css-doodle","generative art"],"type":"tech","slug":"css-generative-art-css-doodle"},"timeToRead":13},"type":"tech"}},"staticQueryHashes":["2123680655"]}