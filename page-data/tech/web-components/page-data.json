{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/web-components","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『我有個朋友曾經跟我說過，時間一直走，沒有盡頭，只有路口。』\n「所以我們到現在還要苦惱跨瀏覽器的問題...大家都走不同路口。」\n『...』</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>先前研究 Progressive Web App 的時候就有注意到 Web Components 這個東西，也看過公司前輩使用過，甚至在前陣子 <a href=\"https://devfest-taipei-3cbee.firebaseapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GDG DevFest Taipei 2016</a> 的官方網站內，不僅使用 PWA，也採用了 Web Components 的技術（當然應該是用 Google 的 Polymer）來搭建。但還是很少看人使用與談論，我自己也是從來沒有仔細研究過（汗..</p>\n<p>我稍微搜尋一下，大部分的介紹文章都是2013, 2014 年的，過了三年，Web Components 的 API 都從 v0 來到了 v1。除了瀏覽器的支援程度外，React 跟 Vue 等等的崛起相信也是主因之一，畢竟，React 寫起來這麼爽快，實在沒必要去專研一個支援度低，複雜度也不低的技術啊！</p>\n<p>等等，那我寫這篇要幹麻...</p>\n<p>欸不是，都已經 2017 年了，新的一年總要有些新的開始，剛剛也提到，API 版本從 v0 進化到 v1 了，加上 ES6 的支援越來越好，許多寫法都更漂亮了，是個好時機來認識一下這個強大的 web 標準！</p>\n<h2 id=\"為何需要-web-components-\" style=\"position:relative;\"><a href=\"#%E7%82%BA%E4%BD%95%E9%9C%80%E8%A6%81-web-components-\" aria-label=\"為何需要 web components  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為何需要 Web Components ?</h2>\n<p>不論是什麼樣的程式，模組化在開發上都是很重要的一個概念，前端工程也不例外，我們都會希望能夠將 Web 開發過程中的 JS, CSS, HTML 封裝起來，以便後續重複使用，而過程中就會出現一些缺點：</p>\n<ol>\n<li>js, css, html 三者的資源在最一般的網頁開發上基本上是分開管理，你如果想用別人的 library，可能還需要先載入對方需要的 JQuery，include 該套件需要的 css，最後才能在你的 HTML 內加入。</li>\n<li>Scope 問題：即便是使用 React，都有可能遭遇到自己實作的 component 因為別人設定的 CSS class name 衝突而導致 Style 變動的情況。</li>\n<li>相容性：各個 Framework 間的 components 基本上無法共用，當你的舊專案想移植到 React 上頭時，即便我們先不管 React 在狀態管理的機制，很多元件要能夠相容的話，也可能需要透過 webpack 等各種 hack 的方式才能成功。</li>\n</ol>\n<p>關於前兩點，透過 React, Webpack 與 <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modules</a> 都可以找到相對應的解法，而第三點相信透過許多 hack 也是可以解決。</p>\n<p>而 Web Components 則是希望透過規範，用更好更方便的方式，解決這些問題。</p>\n<p>Web Components 是 <a href=\"https://www.w3.org/standards/techs/components#w3c_all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 擬定的標準</a>\n由下列四大規範組成：</p>\n<ul>\n<li>HTML Templates</li>\n<li>Custom Elements</li>\n<li>Shadow DOM</li>\n<li>HTML imports</li>\n</ul>\n<p>其中除了 <code class=\"language-text\">HTML Templates</code> 外，皆尚處在 Drafts 階段。\n接下來會一一介紹。</p>\n<p>不過這邊要先提醒一下，雖然剛剛用 React 來舉例比較，但實際上 React 與 Web Comoponent 真正要解決的問題是不同的，React 主旨在於 state 與 view 的狀態管理方式，而 Web Components 主力於整體元件的封裝，包含 Scoped CSS 等等。React component 內甚至可以載入 Web Components，畢竟 Web Components 可以只是 Plain JS, HTML, CSS。</p>\n<h3 id=\"先來個-demo\" style=\"position:relative;\"><a href=\"#%E5%85%88%E4%BE%86%E5%80%8B-demo\" aria-label=\"先來個 demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先來個 Demo</h3>\n<p>在進入規範的介紹前，怕大家覺得我騙台錢，先給大家看一下一個最簡單的 Web Component 會長什麼樣子。有興趣的話再往下看！</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/sijerap/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>可以看到在 <code class=\"language-text\">&lt;body></code> 的最下方，有個 <code class=\"language-text\">&lt;gakki-div-template></code> 的 tag，這就是我 create 出來的一個簡單的 Web Components，tag 內的文字就會像 Meme 一樣顯示在圖片上方。而圖片以及標題文字與 CSS 都是封裝在裡頭，就算我在外面對一樣的 class name 設定不同 style，(即使是 !important）都不會影響到。</p>\n<p>整段 code 我只有載入一個 polyfill 的外部 js 檔案 <code class=\"language-text\">webcomponents.min.js</code>，但如果你是用 Chrome 53 以上版本，基本上不需要也能正常運作。</p>\n<p>另外，會寫 Vue.js 的讀者可能會覺得有點點眼熟，基本上 Vue.js 的寫法跟概念都跟 Web components 雷同，Vue.js 等於是自己寫了一套 Web Components，並且提供更好的瀏覽器支援，所以如果喜歡 Web Components 的朋友們，在標準真的被各家瀏覽器實作前，可以先用用 Vue.js！</p>\n<h2 id=\"html-template\" style=\"position:relative;\"><a href=\"#html-template\" aria-label=\"html template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Template</h2>\n<p>Template 的概念在許多 Web Framework 當中都有，像是 Django(python), EJS/Jade (Express/Node)，雖然用法皆有所不同，但概念都是共通的，而已經成為 HTML5 標準的 <code class=\"language-text\">&lt;template></code> 也不例外。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mytemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>great image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>以上述的 template 來說，我們在 html 裡面宣告一個 template，裡面包含一個 <code class=\"language-text\">&lt;img></code> 與 <code class=\"language-text\">&lt;div></code> 元件，在瀏覽器解析 HTML 文件時，template 的 DOM 物件並不會生效，裡頭包含的 Javascript 也不會執行，但是會產生一個 <code class=\"language-text\">cloneable</code> 的 DOM 物件，讓你在整個 web app 的生命週期都能使用。</p>\n<p>來看一個簡單的使用情境：</p>\n<p>假設我們要做一個簡單的 counter，計算 button 的點擊次數，然後每次都將次數新增到 button 下方的話，可以怎麼做？</p>\n<p>可能會用字串串接的方式：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/mumacu/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>但如果有了 template 的幫助，可以將 HTML 字串的部分與邏輯分開：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/yaxiyir/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>source: <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/template/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">html5rocks-html-template</a></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">useIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Use me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Update something in the template DOM.</span>\n    <span class=\"token keyword\">let</span> span <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Template used: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我們準備了一個 <code class=\"language-text\">template</code>，<code class=\"language-text\">id</code> 為 <code class=\"language-text\">counter-template</code>，在每次 button 被點選時，從 template 中取得目前的 <code class=\"language-text\">content</code>，將內容加一之後再 append 到 document 內。</p>\n<p>雖然這個例子看起來，使用 template 反倒還要寫比較多 code，但是如果你今天需要產生的 template 是很複雜的 HTML 結構時，<code class=\"language-text\">template</code> 絕對可以為你帶來不少幫助的。</p>\n<p>我們也可以直接複製 template 內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> copyedContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>copyedContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<h2 id=\"custom-elements\" style=\"position:relative;\"><a href=\"#custom-elements\" aria-label=\"custom elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Elements</h2>\n<p>Custom Elements API 是構成 Web Components 的基礎之一，有了它的幫助，我們可以自己用最單純的 JS/HTML/CSS 來創造新的 HTML tags，或是 extend 別人的 components，甚至是擴展原有現存的 HTML tags；而也因為可以自行定義 tag 的名稱，讓標籤能夠更加語意化。</p>\n<p>Chrome 在 version 33 時就有推出 v0 的 Custom Elements，而到了現在 version 55，已經採用 v1 的版本，雖然觀念是一樣的，但語法有許多差異，以下介紹皆為 v1 版本，並使用 ES6 的寫法。</p>\n<p>要新增一個自定義的 HTML tag 很簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GakkiTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">,</span> GakkiTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是可以用暱名函式的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>兩種方式都可以讓你產生一個 <code class=\"language-text\">&lt;gakki-div-template>&lt;/gakki-div-template></code> 的 tag。</p>\n<p>其中我們用到 ES6 的 class 語法，來繼承 <code class=\"language-text\">HTMLElement</code>，這樣做可以讓我們的 <code class=\"language-text\">GakkitTemplate</code> 擁有所有 DOM API，並且讓你自己新增 Method 到你創建的這個 element 的 DOM interface 中。</p>\n<p>拿最前面的 Demo 來舉例，宣告元素的地方我們可以修改成這樣：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/vuvoceq/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>變動有點多，沒關係我們慢慢解釋：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GakkiTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    \n  <span class=\"token keyword\">get</span> <span class=\"token function\">light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">light</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Reflect the value of the light property as an HTML attribute.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Can define constructor arguments if you wish.</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先是 get/set，這兩個 method 代表賦予 <code class=\"language-text\">light</code> 這個 property getter/setter 的功能，這個要做什麼呢？</p>\n<p>假設當別人使用我們的 custom-element 時，有可能他們會想要能透過給予 <code class=\"language-text\">light</code> 這個 property 來設定以下的 style：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">gakki-div-template[light]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當然如果他直接設定 <code class=\"language-text\">&lt;gakki-div-template light>&lt;/gakki-div-template></code> 就可以吃到 style，但多數時候我們會希望能用 JS 的方式來設置，像是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gakkiDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngakkiDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>light\n<span class=\"token comment\">// 此時會觸發 getter，return this.hasAttribute('light');</span>\n\ngakkiDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ligth <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 此時會觸發 setter，this.setAttribute('light', '');</span></code></pre></div>\n<p>此時我們的 custom-elements 就需要給予 getter/setter 的 method，並在其中設定 <code class=\"language-text\">this.setAttribute()</code> 的方式讓我們的 elements 吃得到該 property 的設定。（ Note: property 的名稱跟 get/set 的名稱要相同）</p>\n<p>再來是比較特別的兩個 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// Only called for the change attributes due to observedAttributes</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過定義 <code class=\"language-text\">static get observedAttributes()</code> 可以讓我們的 element 監聽該設定的 attributes 有沒有被 consumer 設置，如果有變動，會觸發 <code class=\"language-text\">attributeChangedCallback()</code> 來執行我們想要的動作。</p>\n<p>那當然也可以加入自定義的 method，像是這邊的 <code class=\"language-text\">addImg()</code>；也可以在 constructor 的時候加入 EventListener，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Setup a click listener on &lt;gakki-div-template> itself.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"custom-elements---life-cycle\" style=\"position:relative;\"><a href=\"#custom-elements---life-cycle\" aria-label=\"custom elements   life cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Elements - Life Cycle:</h3>\n<p>Custom Elements 有自己的生命週期，前述的 <code class=\"language-text\">attributeChangedCallback()</code> 也是其中之一：</p>\n<ul>\n<li>constructor：Custom Elements 建構式，通常會在這邊 create Shadow DOM。</li>\n<li>connectedCallback：當你插入元件到 DOM 時會被呼叫。</li>\n<li>disconnectedCallback：當你從 DOM 中移除元素時會被呼叫，可以在這邊 remove Event listener 之類的。</li>\n<li>attributeChangedCallback(attrName, oldVal, newVal)：監聽的屬性有變動時會被呼叫。</li>\n<li>adoptedCallback：整個 custom element 被人用 <code class=\"language-text\">document.adoptNode(el)</code> 呼叫時觸發。</li>\n</ul>\n<p>可以玩玩看上述範例，看看我做了什麼無聊的功能 (畢竟只是範例麻 XD)。</p>\n<p>除了 <code class=\"language-text\">HTMLElement</code> 外，你也可以繼承別人或是你自己的 Custom-Elements：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyDrawer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppDrawer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always call super() first in the ctor. This also calls the extended class' ctor.</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fancy-app-drawer'</span><span class=\"token punctuation\">,</span> FancyDrawer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是繼承 Native Element：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// See https://html.spec.whatwg.org/multipage/indices.html#element-interfaces</span>\n<span class=\"token comment\">// for the list of other DOM interfaces.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always call super() first in the ctor.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawRipple</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>offsetX<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>offsetY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Material design ripple animation.</span>\n  <span class=\"token function\">drawRipple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ripple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fancy-button'</span><span class=\"token punctuation\">,</span> FancyButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊要注意的是，定義繼承 Native element 的元件時，需要傳入第三個參數 {extendds: '{native element you extend}'}\n表明你要繼承的元素是什麼，因為不同的 HTML tags 可能共享相同的 DOM interface，像是 <code class=\"language-text\">&lt;q></code> 與 <code class=\"language-text\">&lt;blockquote></code> 都是 <code class=\"language-text\">HTMLQuoteElement</code>。</p>\n<p>而繼承 Native Element 的 Custom-Element 可以有另一種特殊使用方式（不過支援度更低 XD）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> This <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span> is a fancy button<span class=\"token punctuation\">.</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>button is<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-button\"</span> disabled<span class=\"token operator\">></span>Fancy button<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"shadow-dom\" style=\"position:relative;\"><a href=\"#shadow-dom\" aria-label=\"shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadow DOM</h2>\n<p>Shadow DOM 算是 Web Components 中的靈魂角色，主要就是設計來建構 Component-based 的 web app，它所帶來的好處有下列幾項：</p>\n<ul>\n<li>Isolated DOM：在 Shadow DOM 裡面的任何 nodes 都不會被外面的 <code class=\"language-text\">document.querySelector()</code> 給取得，不會被汙染也不會去污染別人。</li>\n<li>Scoped CSS：定義在 Shadow DOM 內的 CSS 其作用域就只在 Shadow DOM 當中，不會作用於 Shadow DOM 外的 elements，而其他 Page 的 style 也不會影響到 Shadow DOM 內的定義。</li>\n<li>Composition：可以透過 Shodow DOM 賦予你的 component 擁有 Declarative, markup-based 的 API 可操作。</li>\n<li>Productivity：既然有 Isolated DOM 跟 Scoped CSS，就可以將你的 web app 切割成多個 DOM object 組成，完成模組化的使命！</li>\n</ul>\n<h3 id=\"名詞介紹\" style=\"position:relative;\"><a href=\"#%E5%90%8D%E8%A9%9E%E4%BB%8B%E7%B4%B9\" aria-label=\"名詞介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>名詞介紹</h3>\n<p>Shadow DOM：跟一般的 DOM 差異在於其產生的方式，以及他與頁面其他物件的互動方式。</p>\n<p>shadow tree：一般來說你可以利用 <code class=\"language-text\">document.createElement()</code> 來創建 DOM，並 <code class=\"language-text\">appendChild()</code> 到其他 element 上，而 shadow dom 則是依附在某個 normal DOM 底下，產生一個 scoped subtree，稱作 <code class=\"language-text\">shadow tree</code>。</p>\n<p>shadow host：掛載 shadow tree 的元素即為該 Shadow DOM 的 <code class=\"language-text\">shadow host</code>。</p>\n<h3 id=\"create-shadow-dom\" style=\"position:relative;\"><a href=\"#create-shadow-dom\" aria-label=\"create shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Shadow DOM</h3>\n<p>其實 Shadow DOM 不一定要用在建構 Web components，要創建 Shadow DOM 只要用下列方式即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>#menu { ... }&lt;/style> &lt;!-- styles are scoped to fancy-menu! -->\n      &lt;div id=\"menu\">...&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Could also use appendChild().</span>\n\n<span class=\"token comment\">// header.shadowRoot === shadowRoot</span>\n<span class=\"token comment\">// shadowRoot.host === header</span></code></pre></div>\n<p>這樣一來，你就有一個 header 底下的 Shadow DOM 了，裡面定義的 #menu style，不會向內外影響。</p>\n<p>但並非所有 DOM 都可以掛載 Shadow DOM，有些事已經有自己的 Shadow DOM （像是 <code class=\"language-text\">&lt;textarea></code>, <code class=\"language-text\">&lt;input></code>），有些是沒什麼必要（像是 <code class=\"language-text\">&lt;img></code>）。</p>\n<h3 id=\"create-shadow-dom-for-custom-element\" style=\"position:relative;\"><a href=\"#create-shadow-dom-for-custom-element\" aria-label=\"create shadow dom for custom element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Shadow DOM for Custom Element</h3>\n<p>在 Web Components 中，Shadow DOM 都會搭配 Custom Element 出現，如果說 Custom Element 提供 Web Component 骨幹 (HTML, DOM interface)，Shadow DOM 就是提供血和肉 (JS, Scoped CSS)。</p>\n<p>一樣以我們剛剛的範例來看，在 Custom Element 中創建 Shadow DOM：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#gakki-div-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM <span class=\"token operator\">=</span> shadowRoot<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Setup a click listener on &lt;gakki-div-template> itself.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊有幾點要說明：</p>\n<ol>\n<li>利用 <code class=\"language-text\">this.attachShadow({mode: 'open'})</code> 來綁定 Shadow DOM 到目前的 Custom Element，其中的 <code class=\"language-text\">{mode: 'open'}</code> 是代表這是個 open mode 的 Shadow DOM，host 這個 Shadow DOM 的 Element (以這邊的例子就是我們的 Custom Element）可以透過 JS 取得 Shadow DOM 內部的 DOM 元件，反之，如果設置為 close，即無法取得，官方不建議我們設定為 close，詳情可以參考 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a></li>\n<li>透過 <code class=\"language-text\">const t = document.querySelector('#gakki-div-template');</code> 我們取出 template，並利用 <code class=\"language-text\">t.content.cloneNode()</code> 複製一份 template，接著將此 template appendChild 到我們的 shadow tree 中。</li>\n</ol>\n<p>透過這樣的方式，我們就擁有一個擁有 Scoped template 的 Custom Element，因為整個 Element 的內容都是透過 template 與 Shadow DOM 產生的，別人可以自由拿去使用，也不用擔心他們會污染到這個元件！</p>\n<h3 id=\"slot-element\" style=\"position:relative;\"><a href=\"#slot-element\" aria-label=\"slot element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slot element</h3>\n<p>在我們範例的 template 中有個奇妙的元素 <code class=\"language-text\">slot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gakki-div-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    ...\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Gakki Meme<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://static.ettoday.net/images/2083/d2083850.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>它的用途很簡單，就是一個 placeholders，讓元件的 consumer 可以安插自己的 DOM 進去，而你透過 slot 的位置來決定這些 user 的 DOM 該放在哪些位置。</p>\n<p>在範例中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我們將文字 '你好，我是森山'，放入 custom element，他就會被我們安插到 <code class=\"language-text\">&lt;slot>&lt;/slot></code> 的位置</p>\n<p>如果有兩個以上的元素要插入的話，就需要用 <code class=\"language-text\">name</code> 來綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>嗨..妳好>//&lt; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Gakki Meme<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://static.ettoday.net/images/2083/d2083850.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/jezepof/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>你們也可以打開 DevTool 來看一下 Shadow DOM 的元件展開會是長什麼樣子，這邊就不再贅述。</p>\n<h3 id=\"shadow-dom-styling\" style=\"position:relative;\"><a href=\"#shadow-dom-styling\" aria-label=\"shadow dom styling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadow DOM Styling</h3>\n<p>接下來介紹如何在 Shadow DOM 中設定 CSS。</p>\n<p>在 Shadow DOM 中的 CSS 其實跟一般使用上沒有太大差異，你所設定的 CSS selector 都是 local 的，也就是只能設定到 Shadow DOM 裡頭的 element，不會受外部影響，也不會影響到外部。</p>\n<p>比較需要說明的有三個部分：</p>\n<ol>\n<li><code class=\"language-text\">:host</code>：</li>\n</ol>\n<p>你可以用 <code class=\"language-text\">:host</code> 這個 selector 來設定你的 component 的 style，但要注意的是，<code class=\"language-text\">:host</code> 所設定的值，是可以被外部 component 的使用者蓋過去的。</p>\n<p>像範例中為了讓 slot 的字能絕對定位，我需要把 <code class=\"language-text\">&lt;gakki-div-template></code> 本身設定為 <code class=\"language-text\">relative</code></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:host</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">:host-context</code>：\n讓你根據 Component 的 Context 來設定 style，像是：</li>\n</ol>\n<p>當處於 darktheme class 下時，顏色要變成白色。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>darktheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fancy-tabs</span><span class=\"token punctuation\">></span></span>\n    ...\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fancy-tabs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">:host-context(.darktheme)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">::slotted</code>：\n最後則是透過 <code class=\"language-text\">::slotted</code>，來控制傳入的 slot 元件的 style。</li>\n</ol>\n<p>像範例中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n            <span class=\"token selector\">...\n            ::slotted(#me)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ...\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n        ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>me<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>嗨..妳好>//&lt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"event-handle-in-shadow-dom\" style=\"position:relative;\"><a href=\"#event-handle-in-shadow-dom\" aria-label=\"event handle in shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Handle in Shadow DOM</h3>\n<p>Shadow DOM 還有許多 Event 處理，包含 Slot 的 event 處理等等 issue 可以探討，這邊只簡單講個主要觀念。</p>\n<p>在 Shadow DOM 中對於事件處理，是透過在 Event Bubble 的過程中，來重新定位 event target 的位置，讓該事件像是從 Host 的元件觸發，並且會擋掉可能影響到外部頁面的事件處理。</p>\n<p>詳細可以看 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這邊</a> 與 <a href=\"http://www.jianshu.com/p/e8994b92bb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這邊</a></p>\n<h2 id=\"html-import\" style=\"position:relative;\"><a href=\"#html-import\" aria-label=\"html import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Import</h2>\n<p>Web Component 的最後一哩路，當我們製作好我們的 Component 後，當然會希望能很方便地給他人使用，HTML Import 就是要處理這樣的問題。</p>\n<p>他讓我們可以直接 link 一份 HTML 檔案，不管他是 template 也好，用 shadow dom 創建的 custom-element 也好，都可以直接 inlcude。</p>\n<p>使用方法很簡單，假設我們範例中的 HTML 叫做 <code class=\"language-text\">GakkiMeme.html</code>，別人想要 include 的話，只要在他的 index.html 中加入 <code class=\"language-text\">&lt;link rel=\"import\" href=\"GakkiMeme.html\"></code> 即可使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;head&gt;\n  &lt;link rel=&quot;import&quot; href=&quot;GakkiMeme.html&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;gakki-div-template&gt;\n    &lt;span slot=&#39;title&#39;&gt; 嗨嗨嗨 &lt;/span&gt;\n    &lt;div id=&quot;me&quot;&gt; 嘿嘿嘿 &lt;/div&gt;\n  &lt;/gakki-div-template&gt;\n&lt;/body&gt;</code></pre></div>\n<p>當然 Import 的部分還有很多可以玩，有興趣的可以到 <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML5rocks</a> 研究。</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Web Components 提供我們一種方式來建構 reusable components，能支援 Cross-browser (當然要等標準全通過，瀏覽器全支援，但相信那天會到來的！)；不需要任何 framework 支援；也不需要學特殊語法，就是 DOM/CSS/HTML/JS；可以跟現有 Framework 共存使用。</p>\n<p>相信在未來我們會有更美好的 Web 可以使用！</p>\n<p>最後附上 Browser Support 的 Information 給各位：</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">custom-elementv1</a>\n<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shadow-dom</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/w3c/webcomponents\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Web Components</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom Elements v1</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shadow DOM v1</a></li>\n<li><a href=\"http://www.jianshu.com/p/e8994b92bb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components整理及分享</a></li>\n<li><a href=\"https://blog.hinablue.me/web-components-first-look/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components 初探</a></li>\n<li><a href=\"https://github.com/basic-web-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">basic-web-components</a></li>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML Imports</a></li>\n</ol>","fields":{"slug":"web-components"},"frontmatter":{"title":"2017，讓我們再來看看 Web Components 吧！","date":"01-06-2017","tags":["web components","javascript"]},"timeToRead":17}},"pageContext":{"slug":"web-components","prev":{"excerpt":"『欸你看！Pebble watch 可以自己做錶面耶，超酷！』\n「Apple watch 也可以啊」\n『你這樣我怎麼教育下一代！』\n「...」","html":"<blockquote>\n<p>『欸你看！Pebble watch 可以自己做錶面耶，超酷！』\n「Apple watch 也可以啊」\n『你這樣我怎麼教育下一代！』\n「...」</p>\n</blockquote>\n<!-- more -->\n<p>是的，我「最近」買了一隻 Pebble 2，大概是半年多前的事情...當初看上他便宜信譽好，又可以用 javascript 撰寫自己的 watch face，所以就刷下去了，算是第一次在 kickstarter 上面贊助產品，等待的時間久到我都快忘了....才怪，我大概每個月都會想起來一次 XD</p>\n<p>總之，經過幾個月漫長等待，以及網站上跟我一樣想趕快拿到產品的 baker 們不斷地詢問下，終於還是送到我手上了！</p>\n<p>Tada ~!\n<img alt=\"Pebble 2\" style=\"width: 500px; height: 500px; object-fit: cover\" src=\"/image/pebble.jpg\" /></p>\n<p>...不對這篇不是開箱文</p>\n<p>我今天要來簡介一下如何用 Pebble 提供的 Rocky.js Javascript API 來開發 Pebble watchface，讓你可以安裝到自己的手錶上！</p>\n<h1 id=\"build-your-very-first-pebble-watchface\" style=\"position:relative;\"><a href=\"#build-your-very-first-pebble-watchface\" aria-label=\"build your very first pebble watchface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build your very first pebble watchface</h1>\n<p><a href=\"https://developer.pebble.com/tutorials/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pebble 的官網</a>內容蠻豐富的，從簡單的教學、API Doc 到使用者論壇與 blog 都有。</p>\n<img alt=\"Pebble developer site\" style=\"object-fit: cover\" src=\"/image/pebble-officialsite.png\" />\n<p>Pebble 上頭的 app 基本上都是以 C 語言撰寫為主，而距離我上次寫 C 大約是臉書還沒在台灣出現的時代...不過沒關係，Pebble 沒有捨棄 Javascript 這個強大的語言，我們還能利用 Javascript API 與 官方出的 Rocky.js 來撰寫 Pebble watchface！\n(只是目前不支援 ES6)</p>\n<p>然而，工欲善其事，必先利其器，開發 iOS 我們會想到 Xcode，開發 Android 我們有 Andriod studio，開發 Pebble 呢？</p>\n<h2 id=\"ide---cloudpebble\" style=\"position:relative;\"><a href=\"#ide---cloudpebble\" aria-label=\"ide   cloudpebble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IDE - <a href=\"https://cloudpebble.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloudpebble</a></h2>\n<img alt=\"Pebble Cloud IDE\" style=\"object-fit: cover\" src=\"/image/cloudpebble-index.png\" />\n<p>雖然你也可以透過 command line 去編譯 Pebble 的程式，但我還是要推薦跟介紹他們的雲端 IDE，因為整合得蠻好的，只要以 Pebble 的帳號登入（一開始設定你的手錶時就會要求你註冊），就可以無痛連接你的手機與 Pebble watch。即便開發體驗上面還有許多可以加強的部分，但是已經是非常方便的工具了，而且還有中文！</p>\n<h2 id=\"start-a-new-project\" style=\"position:relative;\"><a href=\"#start-a-new-project\" aria-label=\"start a new project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start a new project</h2>\n<img alt=\"login\" style=\"object-fit: cover\" src=\"/image/cloudpebble-buildproject.png\" />\n<p>當你登入後可以看到很簡單的介面，列出目前擁有的專案，按下建立按鈕來新增。</p>\n<img alt=\"Create New Project\" style=\"object-fit: cover\" src=\"/image/cloudpebble-create.png\" />\n<p>這邊你會看到好幾種選項，<code class=\"language-text\">Pebble C SDK</code> 應該可以算是最主要的開發工具，可以寫 watchface 也可以寫 app，而 <code class=\"language-text\">Pebble.js</code> 似乎是較為舊版的 javascript SDK，我們今天要介紹的 <code class=\"language-text\">Rocky.js</code>也還在持續更新中。</p>\n<p>選了 <code class=\"language-text\">Rocky.js</code> 後，就可以開始進行我們今天的開發了！</p>\n<p>先給大家看一下開發完成後，從 IDE 上的模擬器看起來會長什麼樣子。</p>\n<img alt=\"Final result\" style=\"object-fit: cover\" src=\"/image/cloudpebble-result.png\" />\n<p>左邊大大秀出時間，右上角顯示星期幾，右下角則是股票資訊。</p>\n<h2 id=\"something-you-should-know-before-you-start-to-code\" style=\"position:relative;\"><a href=\"#something-you-should-know-before-you-start-to-code\" aria-label=\"something you should know before you start to code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Something you should know before you start to code</h2>\n<p>Pebble watchface 的 js 開發大致上分為兩塊：Rocky JS 與 PebbleKit JS</p>\n<p>Rocky JS 負責<strong>手錶端</strong>的程式，包含 UI 繪製以及與手機端的溝通。</p>\n<p>PebbleKit JS 我們先前並沒有提到，他是運行在<strong>手機端</strong>的程式，會安裝在你手機的 Pebble app 內，主要負責與其他 Web Service 溝通，並將訊息傳給手錶作畫面上的顯示與更新。</p>\n<p>基本上兩者都是 Javascript，只是多了 Pebble 提供的 API。</p>\n<h2 id=\"coding-time\" style=\"position:relative;\"><a href=\"#coding-time\" aria-label=\"coding time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coding Time!</h2>\n<p>IDE 左邊的列表中有許多選項，我們會先需要新增一個 index.js，按下 <code class=\"language-text\">ADD NEW</code> button</p>\n<img alt=\"Add new resource\" style=\"object-fit: cover\" src=\"/image/cloudpebble-addnew.png\" />\n<p>有三種類型的 javascript 檔案可以選擇，我們先開發 Rocky.js，繪製基本的時間出來。</p>\n<p>先 include <code class=\"language-text\">rocky.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> rocky <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rocky'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>RockyJS 的 API 很簡單，主要是一種 Event-based 的感覺，我們可以透過註冊一個 <code class=\"language-text\">minutechange</code> 的 event 來監聽 <strong>分鐘</strong> 的變化。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minutechange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Request the screen to be redrawn on next pass</span>\n  rocky<span class=\"token punctuation\">.</span><span class=\"token function\">requestDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>每分鐘我們都呼叫一次 <code class=\"language-text\">rocky.requestDraw()</code>，透過這個 function 我們可以發出一個 <code class=\"language-text\">Draw</code> 的 event，而該 event 會帶著一個包含 <code class=\"language-text\">CanvasRenderingContext2D</code> 物件的參數，根據這個參數我們可以有許多 Canvas 相關的 API 可以使用，來繪製我們想要的畫面。</p>\n<p>既然是觸發事件，理所當然就是註冊一個 Listener 來處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'draw'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Clear the screen</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Determine the width and height of the display</span>\n  <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>unobstructedWidth<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>unobstructedHeight<span class=\"token punctuation\">;</span>\n\n  drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawDigital</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'49px Roboto-subset'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawDay</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span>  w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Draw Stock on the bottom of the screen, if available</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stockData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawStock</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> stockData<span class=\"token punctuation\">,</span> w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在這段 Listener 中，我做了幾件事情：</p>\n<ol>\n<li>從 <code class=\"language-text\">event</code> 中將 <code class=\"language-text\">context</code> 取出來，也就是先前提到的 <code class=\"language-text\">CanvasRenderingContext2D</code>，並且先透過 <code class=\"language-text\">clearRect()</code> 將螢幕清乾淨，因為每次被呼叫到的時候，都代表我們要重新繪製畫面。</li>\n<li>將螢幕畫布的寬高暫存起來，用於之後繪製其他圖形時計算各自要擺放的座標位置。</li>\n<li>呼叫 <code class=\"language-text\">drawAPI</code> 來繪製需要的內容。<code class=\"language-text\">drawAPI</code> 是我另外寫的一個 js file，將繪圖邏輯與主要 API 做個分離。在這邊我們一樣能夠透過 <code class=\"language-text\">require()</code>將我們自己寫的 js 檔案匯入。</li>\n<li>最後是當有股票資料存在的時候，繪製股票資訊，這部分稍後講到 <code class=\"language-text\">PebbleKit.js</code> 的時候會再提到。</li>\n</ol>\n<p>主要的邏輯就這麼簡單，註冊 listener，分發 <code class=\"language-text\">requestDraw</code> 事件，然後重繪畫面！</p>\n<h3 id=\"how-to-draw\" style=\"position:relative;\"><a href=\"#how-to-draw\" aria-label=\"how to draw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to draw?</h3>\n<p>接著就是要發揮你們藝術家天份的時刻了，利用 <code class=\"language-text\">CanvasRenderingContext2D</code> 提供的介面，我們可以輕易地畫出長方體、圓形、路徑與文字，並且設定顏色與字型大小等等，詳細的 API 參數可以直接參考官網，因為能用的 API 其實不多，所以看起來也很清楚。</p>\n<p><a href=\"https://developer.pebble.com/docs/rockyjs/CanvasRenderingContext2D/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CanvasRenderingContext2D API Doc</a></p>\n<p>這邊講解我用到的部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawDigital</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> w <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'49px Roboto-subset'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> <code class=\"language-text\">drawDigital</code> 是用來繪製畫面上的數位時間，也就是螢幕左邊大大的數字，參數很簡單，就是 context object、x, y 的座標位置、顏色與字型大小。</p>\n<p> 這邊有兩點要注意，座標位置跟一般 web 上的標準一樣，螢幕左上角為 (0, 0)，計算每個圖形的位置會是初期開發簡單的 watchface 中較為麻煩的地方，因為畫面很小，你要好好調整才行。</p>\n<p>另外一個要小心的是，雖然你看這邊的字型大小寫法，似乎跟一般 CSS 的格式一樣，但你可不能自己隨意亂加大小或是 font-family，需要使用它們定義好的才能生效。\n<a href=\"https://developer.pebble.com/docs/rockyjs/CanvasRenderingContext2D/#font\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">可用字型列表-link</a></p>\n<p>實際的 drawDigital function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> hourAndMin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hourText <span class=\"token operator\">=</span> hourAndMin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> minutesText <span class=\"token operator\">=</span> hourAndMin<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>textAlign <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> font<span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>hourText<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">-</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>minutesText<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">+</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">ctx</code> 可以設定 fillStyle、textAlign、font style，並使用 <code class=\"language-text\">fillText()</code> 來將文字繪製在畫面，參數分別是：文字內容, x 座標, y 座標, 最大寬度(option)，若你有設定<strong>最大寬度</strong>，當你的文字大於這寬度時，會自動使用較小的字體。</p>\n<p>繪製星期的部分其實與時間大同小異，直接看程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> day <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"SUN\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"MON\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"TUE\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"WED\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"THU\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"FRI\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n      day <span class=\"token operator\">=</span> <span class=\"token string\">\"SAT\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'lightgray'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>textAlign <span class=\"token operator\">=</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">;</span>\n  ctx<span class=\"token punctuation\">.</span>font <span class=\"token operator\">=</span> <span class=\"token string\">'24px bold Gothic'</span><span class=\"token punctuation\">;</span>\n\n  ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillText</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>當你寫完這些後，你就可以先試著執行看看。</p>\n<p>點擊右邊選項中的播放鍵，就會自動編譯並啟動模擬器。若是沒有問題，你會看到模擬器開啟，並出現一條 progress bar 顯示正在安裝，第一次會比較久一點。</p>\n<p>成功後就會出現畫面，並有個彈跳視窗出來，這邊可能是翻譯問題，所謂的 <strong>解除</strong> 其實就只是取消這個彈跳視窗罷了，我一開始還不太敢按，怕他把我的 App 解除安裝 XD</p>\n<img alt=\"run project\" style=\"width: 800px;\" src=\"/image/cloudpebble-run.gif\">\n<h2 id=\"fetch-stock-data\" style=\"position:relative;\"><a href=\"#fetch-stock-data\" aria-label=\"fetch stock data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch Stock Data</h2>\n<p>既然是智慧手錶，當然不能只有單純的顯示時間，接下來說明怎麼樣搭配 <code class=\"language-text\">PebbleKitJS</code> 透過你的手機來獲取 Web 資料，並傳送給手機顯示。</p>\n<p>PebbleKit JS 是運行在你手機端的 Pebble app 裡面，一樣也是 Event-based 的方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Pebble<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因為是運行在 Pebble 自己的環境下，所以我們這邊不需要 require 什麼 library，\n直接註冊 <code class=\"language-text\">message</code> event 的 listener 即可。</p>\n<p>手錶端的 RockyJS 可以透過 <code class=\"language-text\">postMessage()</code> 傳送訊息給 PebbleKit，當 PebbleKit 的 listener 監聽到傳送過來的 <code class=\"language-text\">message</code> 事件後，就可以採取相對應的措施，像是發送 Ajax 抓取 web 資料，並同樣透過 <code class=\"language-text\">postMessage()</code> 將資料傳回給手錶端的 RockyJS。</p>\n<p>完整的手機端 PebbleKit JS </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Get the message that was passed</span>\n<span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// we random pick one of these stock symbol to show</span>\n<span class=\"token keyword\">var</span> stockSymbols <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'YHOO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GOOGL'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'AAPL'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> randStockSymbol <span class=\"token operator\">=</span> stockSymbols<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> stockSymbols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// use yql to fetch data (don't use in productin or sell)</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://query.yahooapis.com/v1/public/yql'</span> <span class=\"token operator\">+</span> \n    <span class=\"token string\">'?q=select * from yahoo.finance.quotes where symbol in '</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">'(\"'</span><span class=\"token operator\">+</span>randStockSymbol<span class=\"token operator\">+</span><span class=\"token string\">'\")&amp;format=json&amp;env=store://datatables.org/alltableswithkeys&amp;callback='</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">respText</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> stockData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>respText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Pebble<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'stockData'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'symbol'</span><span class=\"token operator\">:</span> stockData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">.</span>symbol<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Ask'</span><span class=\"token operator\">:</span> stockData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">.</span>Ask<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Bid'</span><span class=\"token operator\">:</span> stockData<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">.</span>Bid\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>註1: 因為不能用 es6 來寫，所以也沒有 <code class=\"language-text\">fetch</code> 可以用，所以這邊的 request 是自己寫的 XMLHttpRequest function。\n註2: 記得 encodeURI 一下 url，否則有可能會出現 invalid url error</p>\n<p>接著我們回到手錶端的 RockyJS，在原本的程式下加入這兩段：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hourchange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Send a message to fetch the weather information (on startup and every hour)</span>\n  rocky<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'fetch'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nrocky<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Receive a message from the mobile device (pkjs)</span>\n  <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>stockData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Save the stockData data</span>\n    stockData <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span>stockData<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Request a redraw so we see the information</span>\n    rocky<span class=\"token punctuation\">.</span><span class=\"token function\">requestDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">hourchange</code> 事件發生時，我們 <code class=\"language-text\">postMessage()</code> 告訴 PebbleKitJS 需要去抓取新資料，並且註冊 <code class=\"language-text\">message</code> 的 event listener，當資料傳送回來時，我們重繪製畫面。\n（這邊直接把資料存在全域變數，方便讀取）</p>\n<h2 id=\"final-result\" style=\"position:relative;\"><a href=\"#final-result\" aria-label=\"final result permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final Result!</h2>\n<p>Tada~ 股票資訊就出現了！</p>\n<img alt=\"run project\" style=\"width: 800px;\" src=\"/image/cloudpebble-run-stock.gif\">\n<p>當然不能一直在模擬器上跑，我們要安裝到手錶上！</p>\n<img alt=\"install to watch\" style=\"width: 800px;\" src=\"/image/cloudpebble-build-phone.gif\">\n<p>點選左邊選項列表的 <strong>編製</strong>，選擇 <strong>PHONE</strong>，並安裝執行即可！</p>\n<p>記得打開手機上 Pebble app 內的 developer mode</p>\n<img alt=\"open developer mode\" style=\"width: 300px;\" src=\"/image/cloudpebble-developmode.jpg\" />\n<p>編譯成功的話就可以在手錶上看到畫面，若失敗有問題，可以檢視編譯結果，從 log 中去找問題，像我一開始就忘記 encodeURI，導致 ajax 出問題。</p>\n<img alt=\"check build result\" style=\"width: 800px;\" src=\"/image/cloudpebble-log.png\" />\n<p>上圖內的 PBW，是可以讓你下載下來，之後要 publish 到 store 的時候所使用的，至於怎麼 publish？\n這邊再講下去篇幅有點長，會另外寫一篇來介紹。</p>\n<p>手錶上看起來長這樣~</p>\n<img alt=\"watch\" style=\"width: 300px;\" src=\"/image/cloudpebble-watch.jpg\" />\n<p>本文中介紹的程式碼在此：\n<a href=\"https://github.com/ArvinH/clean-stock-pebble-wf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/clean-stock-pebble-wf</a></p>\n<p>若想看官網上指針時鐘與天氣的範例，我也有個修改版本的：\n<a href=\"https://github.com/ArvinH/pebble-watchface-starterkit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/pebble-watchface-starterkit</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.pebble.com/tutorials/js-watchface-tutorial/part1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pebble build with JS</a></li>\n<li><a href=\"https://forums.pebble.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pebble forum</a></li>\n</ol>","id":"14b803d7-e940-5899-8965-0d37eafbfc0a","fields":{"slug":"pebble-rocky-watchface"},"frontmatter":{"date":"2016-11-19T13:36:01.000Z","title":"一小時內製作自己的 Pebble 錶面","tags":["pebble","javascript"],"type":"tech","slug":"pebble-rocky-watchface"},"timeToRead":9},"next":{"excerpt":"好歌分享：Ruby duby feat.Ruby","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/o5S-K5G9VO8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby duby feat.Ruby</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/o5S-K5G9VO8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>建構網頁佈局是製作網站的基本動作之一，隨著設計多樣性與功能複雜度的提升，開發者必須利用 <code class=\"language-text\">table</code>, <code class=\"language-text\">inline</code>, <code class=\"language-text\">float</code>, <code class=\"language-text\">clear</code>, 或是 <code class=\"language-text\">positioning</code> 等方式來 hack 頁面配置，但不管是哪種方式都各自有其缺乏的功能，也因此催生出許多 CSS Framework 提供的 Grid System 來加速佈局開發。</p>\n<p>幾年前出現的 <code class=\"language-text\">FlexBox</code> 宛如神兵利器，讓我們可以擺脫這些困擾，快速進行排版，而隨著 <code class=\"language-text\">CSS Grid</code> 規範的出現，我們即將有更好的武器了！</p>\n<p><code class=\"language-text\">CSS Grid</code> 不是要來取代 <code class=\"language-text\">Flexbox</code>，他們是相輔相成的角色，<code class=\"language-text\">flex</code> 可以看作是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 則是 <code class=\"language-text\">two-dimentional layout solution</code>，用來解決我們所有先前需要各種 hack 才能完成的頁面佈局。</p>\n<p>不過可惜的是，<code class=\"language-text\">CSS Grid</code> 還在 <a href=\"https://www.w3.org/TR/css-grid-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C working draft</a> 中，並且直到 2017 的今天，還是有些人使用不支援 <code class=\"language-text\">flex</code> 的舊瀏覽器...</p>\n<img src=\"/image/caniuse-grid.png\" alt=\"Can I use Css grid\" style=\"width: 500px;\"/>\n<p>從<a href=\"http://caniuse.com/#search=grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上圖</a>可以得知，Chrome 跟 Firefox 的下一個版本都會預設支援 <code class=\"language-text\">CSS Grid</code>，而 IE/Edge 目前則是支援舊版本的規格實作的。如果想要先嚐鮮，可以直接下載 <a href=\"https://www.google.com/chrome/browser/canary.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chrome Canary</a>, <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox Nightly</a> 來使用，或是開啟目前版本的實驗功能：</p>\n<ul>\n<li>Chrome: <code class=\"language-text\">chrome://flags</code> -> 啟用 <code class=\"language-text\">experimental Web Platform features</code></li>\n<li>Firefox: <code class=\"language-text\">about:config</code> -> 啟用 <code class=\"language-text\">layout.css.grid.enabled</code></li>\n</ul>\n<p>當然也有 <a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polyfill</a> 可以使用。</p>\n<p>雖然生不逢時，但這一切都是過程，活著不難，最難的是做人...啊啊蛋堡的歌真好聽</p>\n<p>這篇文章主要是介紹 <code class=\"language-text\">CSS Grid</code> 的用法，並為我自己做個學習紀錄，畢竟網路上已經有許多關於 <code class=\"language-text\">CSS Grid</code> 的資源，我也條列了一些在文章最下方，懶得看我廢言的讀者可以自行參考！</p>\n<h2 id=\"css-grid-layout\" style=\"position:relative;\"><a href=\"#css-grid-layout\" aria-label=\"css grid layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid Layout</h2>\n<p>以往我們在進行頁面切版佈局的時候，即便是使用 <code class=\"language-text\">flexbox</code>，由於他是 <code class=\"language-text\">one-dimensional layout</code>，我們排版的方式無非就是從上往下排，或是由左到右等方向性來把各種 <code class=\"language-text\">one-dimensional layout</code> 組合成我們要的 <code class=\"language-text\">two-dimensional layout</code>。</p>\n<p>而 <code class=\"language-text\">CSS Grid</code> 不同的地方就在於，他讓我們先定義好一個 <code class=\"language-text\">container</code> 就夠了，一個 <code class=\"language-text\">container</code> 來設定好所有底下元件<strong>可以擺放的位置</strong>。</p>\n<p>什麼是<strong>“可以擺放的位置“</strong>呢？先跳過實作過程與這些屬性值的意思，以下面這張結果圖來解釋一下，你設定好 <code class=\"language-text\">CSS Grid</code> 的 container 後，該 container 會長成這副德性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 10px 0.3fr 0.7fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 25% 100px auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"/image/grid-container.png\" alt=\"Grid Container\" style=\"width: 300px;\"/>\n<p>然後你就只要把 <code class=\"language-text\">container</code> 內的元素，一一定義好各自的 CSS 屬性，來決定他們要擺在這圖中的哪個空格內即可。\n只要兩行 css，一個 div 就排好了，是不是很讓人興奮啊啊啊！</p>\n<p>好的，接下來認真說明 CSS Grid 的其他基本用法。</p>\n<h2 id=\"css-grid-terminology\" style=\"position:relative;\"><a href=\"#css-grid-terminology\" aria-label=\"css grid terminology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid Terminology</h2>\n<p>再開始嘗試實作之前，我們先來了解並記憶一下相關的術語。</p>\n<ul>\n<li>Grid Line: 分隔元素的線，可以是垂直與水平，如下圖的紅色線</li>\n<li>Grid Track: 兩條分隔線中間的區域，簡單想就是 Grid 中的 Columns 或 Rows，如下圖的綠色區塊</li>\n<li>Grid Cell: Grid 中的基本單位，四條線組成的區域，如下圖的藍色區塊。</li>\n<li>Grid Area: 由數個 Cell 組成的區域，如下圖的紅色區塊。</li>\n<li>fr: track-size 的單位，通常用於分配 row 或 column 的非彈性尺寸設定完後之剩餘空間。以下圖的 column為例，意思即：將去掉 100px 與 10px 後的剩餘空間，分配為 30% 與 70%。</li>\n</ul>\n<img src=\"/image/grid-term.png\" alt=\"Grid Terminology\" style=\"width: 300px;\"/>\n<h2 id=\"simple-css-grid-example\" style=\"position:relative;\"><a href=\"#simple-css-grid-example\" aria-label=\"simple css grid example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple CSS Grid Example</h2>\n<p>接著我們把上面的圖片，用 CSS Grid 來 layout 出來。</p>\n<p>CSS Grid 的 properties 可以切成兩大塊，一塊是給 Parent 的，也就是 <code class=\"language-text\">Grid Container</code>，另一塊給 Children，<code class=\"language-text\">Grid items</code>。</p>\n<p>詳細的 properties 介紹可以看這篇 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete Guide Grid</a>\n（ 強力推薦閱讀，各種圖片文字輔以 css 說明，完全可以直接左轉出去看這篇就好 XD ）</p>\n<p>要使用 CSS Grid 就必須先定義好 Grid Container：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Tack<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cell<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Area<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 grid container 底下的 children 是沒有順序差別的，我們都可以透過定義 grid items 的 properties 來設定他的擺放位置。當然，如果你沒有設定的話，就會照順序放置，如果該列放不下就會自動放到下一行。</p>\n<p>但基本上不會這麼做，畢竟我們就是想要能好好掌控位置啊！</p>\n<p>Grid Container 的 css 可以用下面兩種方式來寫，<code class=\"language-text\">grid-template-columns</code> 用來定義這個 Grid 有幾個 columns，每個 column 可以有多少寬度；換而言之，<code class=\"language-text\">grid-template-rows</code> 就是用來定義 row 的屬性。</p>\n<p><code class=\"language-text\">grid-template-columns</code> 和 <code class=\"language-text\">grid-template-rows</code> 有兩個主要 Values 可以設定：</p>\n<ul>\n<li>track-size：可以是任何長度(px)、百分比(%)或是先前提到的 <code class=\"language-text\">fr</code></li>\n<li>line-name：組成 column 與 row 的線的名字</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> &lt;track-size> ... | &lt;line-name> &lt;track-size> ...<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> &lt;track-size> ... | &lt;line-name> &lt;track-size> ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是說，你可以用純數字的方式來給予屬性質：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 10px 0.3fr 0.7fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 25% 100px auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也可以安插 <code class=\"language-text\">Grid Line</code> 的名字在屬性值的設定中，這個名字在後續我們要安置 children 時可以用到！\n[Note] 要注意，因為是定義 <strong>線</strong> 的名字，所以最後一個數字的後面也可以定義名字喔！</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> [line1] 100px [line2] 10px [line3] 0.3fr [line4] 0.7fr [end]<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> [row-1-start] 25% [row-2-start] 100px [row-3-start] auto [row-end]<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就定義好需要的 Grid Container 了。</p>\n<p>接著，我們說明一下如何將前面的圖片中的 ** Area ** 這個 <code class=\"language-text\">Grid Item</code> 放到我們剛剛定義好的 Grid Container 中，因為他的位置比較特殊，在右下角的位置，較好展現 CSS Grid 方便之處。</p>\n<p><code class=\"language-text\">Grid Item</code> 的屬性基本上就是四個：<code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-column-end</code>, <code class=\"language-text\">grid-row-start</code> 和 <code class=\"language-text\">grid-row-end</code>，你也可以簡化成兩個：<code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code>。</p>\n<p><code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-column-end</code>, <code class=\"language-text\">grid-row-start</code> 和 <code class=\"language-text\">grid-row-end</code> 可以有四種 Values 設定：</p>\n<ul>\n<li>line： 對照到 Grid Container 中定義的線，可以是數字或名字。</li>\n<li>span [number]：該 item 會橫跨 [number] 個 tracks。</li>\n<li>span [name]：該 item 會橫跨到名字是 [name] 的線為止。</li>\n<li>auto：自動放置，類等於 span 1。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item-area</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-start</span><span class=\"token punctuation\">:</span> line2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-end</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-start</span><span class=\"token punctuation\">:</span> row-3-start<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-end</span><span class=\"token punctuation\">:</span> row-end<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>若只用兩個屬性，中間以 / 隔開：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item-area</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> line2 / end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> row-3-start / row-end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以此類推，完成的範例如下：</p>\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ZLodmz\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZLodmz/\">CSS-Grid-Sample</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"another-css-grid-example\" style=\"position:relative;\"><a href=\"#another-css-grid-example\" aria-label=\"another css grid example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Another CSS Grid Example</h2>\n<p>Container 不只有上面的寫法，還有一個叫做 <code class=\"language-text\">grid-template-areas</code> 的東西，搭配 Grid-Item 的 <code class=\"language-text\">grid-area</code> 可以有更簡單的寫法來進行排版。</p>\n<p>我們這邊換個例子，以一般網頁較常見的配置來說明：</p>\n<p data-height=\"423\" data-theme-id=\"0\" data-slug-hash=\"xgjvRr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample-Area\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/xgjvRr/\">CSS-Grid-Sample-Area</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>用了 <code class=\"language-text\">grid-template-areas</code> 後，在 container 的 css 中，我們可以直接定義每個元素的位置：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 0.25fr 0.25fr 0.25fr 0.25fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"header header header header\"</span>\n                       <span class=\"token string\">\"main main . sidebar\"</span>\n                       <span class=\"token string\">\"footer footer footer footer\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-gap</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>裡面的 <code class=\"language-text\">header</code>, <code class=\"language-text\">main</code>, <code class=\"language-text\">sidebar</code> 與 <code class=\"language-text\">footer</code> 就是在 Grid-Item 中我們要指定的名稱：</p>\n<p><code class=\"language-text\">grid-template-areas</code> 的每一行定義了 Grid-Item 內容：</p>\n<ul>\n<li>第一行代表：header 要佔據四行。</li>\n<li>第二行代表：main 佔兩行，而 sidebar 佔一行，其中 <code class=\"language-text\">·</code> 類似 placeholder 的作用。</li>\n<li>第三行代表：footer 佔四行。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #8BC574<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> header<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #748CC5<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> main<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> sidebar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.footer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FCE052<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> footer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，<code class=\"language-text\">grid-column-gap</code> 與 <code class=\"language-text\">grid-row-gap</code> 可用來設定行距。</p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>除了上述的基本屬性運用外，最前面有說過 CSS Grid 跟 Flex 是相輔相成，而實際上他們可以調配的屬性也有類似的地方。</p>\n<p>Grid Container 可以用 <code class=\"language-text\">justify-items</code> 與 <code class=\"language-text\">align-items</code> 來控制每個 Grid-item 的 <strong>垂直</strong> 與 <strong>水平</strong> 位置。</p>\n<p>Grid Item 則是可以用 <code class=\"language-text\">justify-self</code> 與 <code class=\"language-text\">align-self</code> 來控制自己在網格中的位置。</p>\n<p>像這個範例中的 Sidebar</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdMQXK\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/NdMQXK/\">CSS-Grid-Sample-align</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>歡迎大家參考這幾個個超詳細圖解說明：</p>\n<p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-items\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - justify-items</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-items\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - align-items</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - justify-self</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - align-self</a></p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>用幾個簡單的範例來學習並介紹 CSS Grid，但還是希望大家都能直接去 Codepen 上玩玩看 CSS Grid，一定都會被其方便性給驚豔到！\n前端發展雖然百家爭鳴，但是很多基本的規範如果能越來越統一越來越強大，開發者就更能省去各種 hacking 的時間，用來創造更多有創意又有美感的作品！</p>\n<p>最後再推薦一個網站 <a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a>，裡面用許多範例來進行教學，頁面也很清楚乾淨。\n有任何問題都歡迎大家指教！\t</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"http://chris.house/blog/a-complete-guide-css-grid-layout/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chris House Guide to Grid</a></li>\n<li><a href=\"http://andyyou.github.io/2016/05/04/css-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Grid 介紹</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","id":"3b87b3f0-ee42-5e87-b24d-7d0f2e207bb8","fields":{"slug":"css-grid"},"frontmatter":{"date":"2017-02-03T23:44:37.000Z","title":"與 CSS Grid 的第一次接觸","tags":["css","css-grid"],"type":"tech","slug":"css-grid"},"timeToRead":9},"type":"tech"}},"staticQueryHashes":["2123680655"]}