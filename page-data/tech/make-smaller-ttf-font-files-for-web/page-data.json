{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/make-smaller-ttf-font-files-for-web","result":{"data":{"markdownRemark":{"html":"<p>最近很迷 Netflix 上的 Formula 1: Drive to Survive，看各家車廠與車手為了爭奪那幾秒的速度而拼盡全力，非常熱血勵志，把這精神延伸到網頁製作上，大概就是要將網頁效能調整到極致，各種能減少 Loading 時間的技巧都得用上。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近公司有個行銷活動需要做一個簡單的 SPA，基本上只有簡單的三個頁面，完全可以利用 Gatsby 或 Nextjs 來製作靜態頁面，然後部署到 CDN 上頭，效能上來說理應足夠好了，但是我們的設計師在頁面上混用了多種的字體，尤其是日文部分，除了一般瀏覽器內建的字體外，某些元件採用額外的免費字體，例如 <a href=\"https://www.freejapanesefont.com/corporate-logo-font-download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Corporate Logo Font</a>，這代表我們需要額外去下載這些字型，但為了頁面上的幾個字，去下載一整個字型檔案（ttf, 2.6MB）實在很浪費，因此只好來研究一下如何客製化字型檔案，只載入我們需要的字。</p>\n<p>雖然這感覺是個很容易遇到的需求，但我還真的是第一次實際需要處理，感謝同事 Carlos 提供解法，透過這篇文章筆記一下，希望對他人也有點幫助。</p>\n<h3 id=\"開始前先稍稍複習一下什麼是-ttf還有什麼其他字型格式呢\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%89%8D%E5%85%88%E7%A8%8D%E7%A8%8D%E8%A4%87%E7%BF%92%E4%B8%80%E4%B8%8B%E4%BB%80%E9%BA%BC%E6%98%AF-ttf%E9%82%84%E6%9C%89%E4%BB%80%E9%BA%BC%E5%85%B6%E4%BB%96%E5%AD%97%E5%9E%8B%E6%A0%BC%E5%BC%8F%E5%91%A2\" aria-label=\"開始前先稍稍複習一下什麼是 ttf還有什麼其他字型格式呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始前先稍稍複習一下，什麼是 ttf？還有什麼其他字型格式呢？</h3>\n<p><a href=\"https://zh.wikipedia.org/zh-tw/TrueType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TTF（TrueType Font）</a>是由蘋果和微軟共同開發的一種電腦輪廓字型類型標準，是 Mac 與 Windows 上最常見的格式，基本上所有主流瀏覽器都支援，也是免費或便宜的第三方字體最常提供的格式。缺點是檔案未經過壓縮，文件大小較大。</p>\n<p>另一個主流格式為 <a href=\"https://zh.wikipedia.org/zh-hant/OpenType\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OTF（OpenType Font）</a>，是一種可縮放字型（scalable font）電腦字型類型，由 TrueType 延伸而來，採用 PostScript 格式，是微軟與 Adobe 聯合開發，用來替代 TrueType 字型的新字型。</p>\n<p><a href=\"https://zh.wikipedia.org/wiki/Web%E9%96%8B%E6%94%BE%E5%AD%97%E5%9E%8B%E6%A0%BC%E5%BC%8F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WOFF（Web Open Font Format）</a> 則是完全為了 Web 而設計的格式，由 Mozilla、Microsoft 與 Opera 合作推出。WOFF 的字型都經由 WOFF 的編碼工具壓縮，體積能比 tff 小 40%，現在已經是網頁字體的推薦標準。WOFF2 則是 WOFF 的升級版，體積可以壓得更小。</p>\n<p>最後，當然大家熟悉的 SVG 也可以算是一種。</p>\n<p>在主流的作業系統與瀏覽器上，這幾種格式的支援度都很高，而其主要的細節差異，因為非本篇重點，就不多著墨，有興趣的讀者可以到 wiki 上查看。</p>\n<p>今天要減少的字型檔案為最常見的 tff 格式。</p>\n<p>順帶一提，當我在撰寫文章的時候，對於字型、字體等名詞的差異很模糊，好在 JustFont 在<a href=\"https://blog.justfont.com/2013/02/some_nouns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">多年前的一篇文章</a>解釋得蠻清楚的，推薦大家理解一下！</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>要針對字型進行處理的話，首先我們需要下載 FontForge，FontForge 是一個很有名的軟體，可以用來設計、創建字體，或是進行各種字型相關的操作，可以從 <a href=\"https://fontforge.org/en-US/downloads/mac-dl/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://fontforge.org/en-US/downloads/mac-dl/</a> 下載 Mac 版本（也有 Linux 與 Windows 的版本）。</p>\n<p>在官網上你可以找到許多文件，甚至是一整個 <a href=\"http://designwithfontforge.com/en-US/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ebook</a> 來教你如何用 FontForge 來設計字體。</p>\n<h3 id=\"用-fontforge-開啟原始字型檔\" style=\"position:relative;\"><a href=\"#%E7%94%A8-fontforge-%E9%96%8B%E5%95%9F%E5%8E%9F%E5%A7%8B%E5%AD%97%E5%9E%8B%E6%AA%94\" aria-label=\"用 fontforge 開啟原始字型檔 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用 FontForge 開啟原始字型檔</h3>\n<p>載好 FontForge 後，我們先打開原始的字型檔，這邊以前面提到的 Corporate Logo Font 為例（註： 在 MacOS Catalina 或 Big Sur，直接點選載好在 Apps 內的 FontForge app 可能會被 OS 擋下來，快一點的方式是<code class=\"language-text\">按右鍵 -> \"Show Package Contents\" -> \"Contents\" -> \"MacOS\"</code>，然後點選 FontForg.app，接者就會打開 terminal 並執行 FontForge。）：</p>\n<p><img src=\"/image/fontforge-corporatelogo-original.png\" alt=\"original-font-file-in-fontforge\"></p>\n<p>開啟後可以看到所有的字圖，接著其實你就可以選取你不要的字圖，然後 <code class=\"language-text\">clear</code> 掉它們：</p>\n<p><img src=\"/image/clear-font.png\" alt=\"clear-font\"></p>\n<p>但照這樣處理，弄到天荒地老六親不認都弄不完。工程師要用更聰明的解法。</p>\n<h2 id=\"正確的姿勢\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E7%A2%BA%E7%9A%84%E5%A7%BF%E5%8B%A2\" aria-label=\"正確的姿勢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正確的姿勢</h2>\n<p>打從一開始，我們就是因為原始字檔裡面太多我們不要的東西，我們需要的很少，才想要從原始檔案中擷取需要的部分，既然如此，就應該從我們<strong>想要的字圖</strong>下手，而不是慢慢刪掉我們不要的字圖。</p>\n<p>FontForge 其實有提供一個很方便的功能，叫做 <code class=\"language-text\">Invert Selection</code>，能夠選取所有<em>你沒有選取到的東西</em>，直接看個動圖範例：</p>\n<p><img src=\"/image/fontforge-invert-select.gif\" alt=\"fontforge-invert-select\"></p>\n<p>這樣一來，就很簡單了，只要選取住你想要的字圖，然後點選 <code class=\"language-text\">Edit -> Select -> Invert Selection</code>，就完成了，接著就把 Fontforge 自動幫你選取的字圖 <code class=\"language-text\">clear</code> 掉即可。</p>\n<p>但這樣還是有個問題。</p>\n<p>字型檔內容這麼多，我要手動在 FontForge 中找到自己想要的字圖不也是找到山窮水盡嗎？</p>\n<h3 id=\"正確姿勢二\" style=\"position:relative;\"><a href=\"#%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2%E4%BA%8C\" aria-label=\"正確姿勢二 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正確姿勢二</h3>\n<p>FontForge 是個蠻強大的工具，除了 GUI 以外，也提供 interpreters，讓你能撰寫 scripts 來修改字型檔。</p>\n<p>一個 interpreter 是 Python，另一個則是其內建的 scripting language。<a href=\"https://fontforge.org/docs/scripting/scripting.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細的範例、語法等可以從官網查看，文件很完整</a>。</p>\n<p>有了 scripting 的功能，我們就不用自己手動選取字圖啦。</p>\n<p>在 FontForge UI 上，你可以點選 <code class=\"language-text\">File -> Execute Script</code> 叫出 Dialog，可以選擇直接貼上 Python 程式碼，也可以選擇 <code class=\"language-text\">FF -> Call</code>，來載入使用另一個內建 interpreter 的 script file。</p>\n<p><img src=\"/image/fontforge-exec-scripts.gif\" alt=\"fontforge-exec-scripts\"></p>\n<p>因為我們要處理的動作很簡單，只有三個動作（選取字型、反轉選取、刪除），所以直接用內建的 script language 其實比較簡單，可以利用 NodeJS 來產生執行檔。</p>\n<h3 id=\"需要的-api\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E8%A6%81%E7%9A%84-api\" aria-label=\"需要的 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需要的 API</h3>\n<p>三個動作，選取字圖、反轉選取、刪除，分別對應的 API 為 <code class=\"language-text\">SelectMore()</code>、<code class=\"language-text\">SelectInvert()</code>、<code class=\"language-text\">DetachAndRemoveGlyphs()</code>。</p>\n<p>我們要匯入進 FontForge 的執行檔，就只需要這三個 API 即可。</p>\n<p><code class=\"language-text\">SelectMore()</code> 用法是傳入字型的 unicode 作為參數，即可選取該字圖，不過執行一次只能選取一個字圖。<code class=\"language-text\">SelectInvert()</code> 與 <code class=\"language-text\">DetachAndRemoveGlyphs()</code> 則不需要參數。</p>\n<h3 id=\"範例程式\" style=\"position:relative;\"><a href=\"#%E7%AF%84%E4%BE%8B%E7%A8%8B%E5%BC%8F\" aria-label=\"範例程式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>範例程式</h3>\n<p>知道了需要的 API，我們就可以來寫程式產生執行檔 <code class=\"language-text\">subset-font.pe</code>，<code class=\"language-text\">.pe</code> 是 FontForge 可以接受的格式，<code class=\"language-text\">.ff</code> 也行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 挑選出你頁面上需要用到的字</span>\n<span class=\"token keyword\">const</span> characters <span class=\"token operator\">=</span> <span class=\"token string\">'123招待コード'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./subset-font.pe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  characters<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 轉換成 16 進位</span>\n    <span class=\"token keyword\">let</span> hex <span class=\"token operator\">=</span> char<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 補零，以符合 \\u 格式</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      hex <span class=\"token operator\">=</span> hex<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 然後執行檔內寫入 SelectMore</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SelectMore(\"u</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hex<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\")\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 反轉選擇，選取所有其他不要的字</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SelectInvert()\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 最後移除字型</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DetachAndRemoveGlyphs()\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用 FontForge API 搭配上面程式後，會產生以下內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"shsubset-font.pe\"><pre class=\"language-shsubset-font.pe\"><code class=\"language-shsubset-font.pe\">SelectMore(&quot;u0031&quot;)\nSelectMore(&quot;u0032&quot;)\nSelectMore(&quot;u0033&quot;)\nSelectMore(&quot;u62db&quot;)\nSelectMore(&quot;u5f85&quot;)\nSelectMore(&quot;u30b3&quot;)\nSelectMore(&quot;u30fc&quot;)\nSelectMore(&quot;u30c9&quot;)\nSelectInvert()\nDetachAndRemoveGlyphs()</code></pre></div>\n<p>接著依照<a href=\"#%E6%AD%A3%E7%A2%BA%E5%A7%BF%E5%8B%A2%E4%BA%8C\">正確姿勢二</a>的方式，匯入此執行檔，FontForge 就會產生只包含我們想要的字圖的字型檔了！：</p>\n<p><img src=\"/image/fontforge-script-subset-font.gif\" alt=\"fontforge-script-subset-font.gif\"></p>\n<p>不過因為刪掉的字圖很多，我們可以進一步透過 FontForge 的壓縮功能來輔助我們檢視成品：</p>\n<p>剛執行完 script 後，畫面會停留在 select 所有其他你不要的字圖的狀態，你可以先隨便點選空白處 deselect 所有字圖，然後選擇 <code class=\"language-text\">Encoding -> Compact</code>：</p>\n<p><img src=\"/image/fontforge-compact.gif\" alt=\"fontforge-compact\"></p>\n<p>就能清楚看到整個檔案的確只剩下我們所選的字圖（以上面範例 script 來說就是 <code class=\"language-text\">123招待コード</code>）。</p>\n<p>最後步驟就是產生字型檔案，點選 <code class=\"language-text\">File -> Generate Fonts...</code>，然後看你要 export 成什麼格式，如果是網頁上要用，當然就推薦使用 <code class=\"language-text\">woff</code>：</p>\n<p><img src=\"/image/fontforge-subset-font-generate-file.png\" alt=\"fontforge-subset-font-generate-file\"></p>\n<p>按下 <code class=\"language-text\">Generate</code> 後可能會出現 Error，可以不用理他，繼續 generate：</p>\n<p><img src=\"/image/fontforge-generate-error.png\" alt=\"fontforge-generate-error\"></p>\n<p>這樣就大功告成了！</p>\n<p>（註：關掉 FontForge 時，記得選 <code class=\"language-text\">Don't Save</code>，不然會蓋掉原始的檔案喔！）</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>這個方式可以用在各種字體檔案，非常方便，對於靜態頁面上內容文字不太會變動的狀況下，利用這個技巧可以大幅降低需要載入的檔案大小，以我公司專案的例子來說，從原本 2.6MB 的 tff 檔案，最後可以變成 8KB 的 woff 檔案，省下的大小很可觀的。</p>\n<p>簡單的筆記，希望對大家有幫助！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28179203\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web 字體簡介: TTF, OTF, WOFF, EOT &#x26; SVG</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35555816/delete-all-unused-characters-from-a-ttf-font-with-fontforge/35754448#35754448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Delete all unused characters from a TTF-font with Fontforge</a></li>\n<li><a href=\"https://fontforge.org/docs/scripting/scripting.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fontforge docs</a></li>\n<li><a href=\"https://blog.justfont.com/2013/02/some_nouns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[but] 雜談 ─ 常常搞混的一些詞</a></li>\n</ol>","fields":{"slug":"make-smaller-ttf-font-files-for-web"},"frontmatter":{"title":"透過減少 ttf 字體檔案大小來增進網頁效能","date":"04-23-2021","tags":["web","font","performance"]},"timeToRead":8}},"pageContext":{"slug":"make-smaller-ttf-font-files-for-web","prev":{"excerpt":"source map 就是那種你每天都會看到、用到，但可能從來不曉得他怎麼運作的東西，這篇文章帶你一探究竟。","html":"<p>source map 就是那種你每天都會看到、用到，但可能從來不曉得他怎麼運作的東西，這篇文章帶你一探究竟。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>只要你是個前端工程師，或是曾經開發過前端專案，相信對 source map 都不陌生，不管你常用的 bundler/generator 工具是什麼，幾乎都有完整的 source map 支援，甚至有各種選項可以配置，但是你知道 source map 的原理嗎？它是怎麼產生的？它又是怎麼幫助我們從 bundler/generator 產生的程式碼中找出對應的原始碼，讓我們方便除錯呢？</p>\n<p>這些問題我也不太清楚，雖然大致上的原理稍微思考一下都能夠猜個八九不離十，但對於實際運作細節從來沒有探討過，因此這週末利用了點時間稍微研究一下，記錄在這篇文章跟大家分享。</p>\n<h2 id=\"source-map-是什麼\" style=\"position:relative;\"><a href=\"#source-map-%E6%98%AF%E4%BB%80%E9%BA%BC\" aria-label=\"source map 是什麼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Map 是什麼</h2>\n<p>簡單來說，source map 就是儲存了原始碼與編譯後程式碼的對應關係之檔案，讓你在開啟 Devtool 時，能讓瀏覽器透過載入 source map 的方式幫助你定位原始碼位置，方便下中斷點除錯。</p>\n<p>以目前的瀏覽器實作來看，都是只有在打開 Devtool 的時候，才會根據它獲取的 source map url 資訊來載入 source map，不會影響網站載入速度與一般使用者的體驗。</p>\n<p>提供瀏覽器 source map url 的方式有兩種，一個是將其寫在編譯後程式碼檔案中，也是大多數現在 bundler/generator 的做法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">parcelRequire</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>o<span class=\"token operator\">=</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeof</span> parcelRequire<span class=\"token operator\">&amp;&amp;</span>parcelRequire<span class=\"token punctuation\">,</span>u<span class=\"token operator\">=</span><span class=\"token string\">\"function\"</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeof</span> require<span class=\"token operator\">&amp;&amp;</span>require<span class=\"token punctuation\">;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">//# sourceMappingURL=file.map.js</span></code></pre></div>\n<p>另一種則是透過特殊的 http header，讓瀏覽器在 request 你的 javascript 檔案時，能夠從 header 欄位中找到 source map url 資訊：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">X-SourceMap: /path/to/file.js.map</code></pre></div>\n<p>順帶一提，Devtool 載入 source map 的 request 並不會出現在 Network panel，所以基本上是看不到的。</p>\n<p>這在一般使用情境上是沒什麼影響，但我前陣子有個專案部署到測試環境後，卻發現 source map 載入失敗，這時想要確認原因就麻煩了，翻了翻 chrome devtool 的<a href=\"https://github.com/ChromeDevTools/devtools-frontend/blob/ce4865088d055b3997b62f397d220babc5c294d0/front_end/sdk/PageResourceLoader.js#L286\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>，才勉勉強強猜測出是因為 devtool 載入 source map 時，不會因為你在瀏覽器中 simulate mobile mode，而跟著送出 mobile 的 user agent，而該專案的 CDN 有設定會將來自 desktop 的 request 轉到特殊的頁面，因此才導致 dev tool 的 source map 載入失敗。如果能看到載入 source map 的 request，這個問題就能更好的確認與解決了。</p>\n<h2 id=\"souce-map-的內容\" style=\"position:relative;\"><a href=\"#souce-map-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"souce map 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Souce Map 的內容</h2>\n<p>Source Map 是有規格的，主要由 Mozilla 與 Google 工程師撰寫，目前最新版本是 version 3，可以在<a href=\"https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a>找到。</p>\n<p>一個 source map 檔案大概長這樣（這是經過 beatify 後的樣子，通常會是壓縮成一行而已）：</p>\n<div class=\"gatsby-highlight\" data-language=\".js\"><pre class=\"language-.js\"><code class=\"language-.js\">{\n    &quot;version&quot;: 3,\n    &quot;sources&quot;: [&quot;logger.ts&quot;],\n    &quot;names&quot;: [],\n    &quot;mappings&quot;: &quot;gBAAgB,EAAE;AA0BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvBA,MAAM,...&quot;,\n    &quot;file&quot;: &quot;logger.js&quot;,\n    &quot;sourceRoot&quot;: &quot;../src&quot;,\n    &quot;sourcesContent&quot;: [&quot;/* eslint-disable no-console */\\nimport { test } from &#39;...&#39;&quot;]\n}</code></pre></div>\n<p>大多數的 bundler/generator 都是使用 Mozilla 的 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件，或是利用該套件的 API 自己去做一些客製化，像是 <a href=\"https://github.com/webpack/webpack-sources/blob/master/lib/SourceMapSource.js#L8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack 就是如此</a>。但也有像是 <a href=\"https://v2.parceljs.org/plugin-system/source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v2 版本的 Parcel，就使用了 C++ 從頭撰寫</a>，號稱效率更高。</p>\n<p>實際檔案內容可能根據你所使用的 bundler/generator 會有些許不同，但都會遵照這個規格。</p>\n<ul>\n<li>version：source map 的版本，目前為 3。</li>\n<li>source：編譯前的文件名稱，是一個 array，因為很多時候你會將多個檔案編譯到一個。</li>\n<li>names：編譯前的變數。可能不是必要欄位，所以大多都是空的。</li>\n<li>mappings：source map 的主要資訊，是一連串編碼，用來表示原始碼與編譯後程式碼的對應訊息。</li>\n<li>file：編譯後的文件名稱。</li>\n<li>sourceRoot：編譯前的檔案之所在位置。</li>\n<li>sourcesContent: 原始碼內容，也是個 array，對應每個檔案的原始碼。</li>\n</ul>\n<p>其中最重要的就是 <code class=\"language-text\">mappings</code> 這個欄位，記錄了編譯前後兩個文件怎麼做對應的資訊。以上面的例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gBAAgB,EAAE;AA0BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvBA,MAAM,...\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>mappings 這個字串裡面有三層資訊：</p>\n<ol>\n<li>用分號 <code class=\"language-text\">;</code> 區隔<strong>編譯後程式碼</strong>的<strong>行</strong>，所以第一個分號前的編碼，對應<strong>編譯後程式碼</strong>的第一行。以上面例子來看，<code class=\"language-text\">gBAAgB,EAAE</code> 就是對應<strong>編譯後程式碼</strong>第一行的編碼。</li>\n<li>用逗號 <code class=\"language-text\">,</code> 隔開的是<strong>編譯後程式碼</strong>某一行內的某個<strong>位置</strong>。以上面例子來看，第一行紀錄了兩個位置的對應編碼，<code class=\"language-text\">gBAAgB</code> 與 <code class=\"language-text\">EAAE</code>。 ---（感謝網友 <a href=\"https://www.coderbridge.com/@davidhcefx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">davidhcefx</a> 指正！）</li>\n<li>最後是一個 Base64 <a href=\"https://en.wikipedia.org/wiki/Variable-length_quantity\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VLQ</a> 的編碼，解碼後可以得到<strong>編譯前原始碼</strong>的位置。</li>\n</ol>\n<h3 id=\"何謂-base64-vlq\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-base64-vlq\" aria-label=\"何謂 base64 vlq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 Base64 VLQ</h3>\n<p><strong>VLQ (variable-length quantity)</strong></p>\n<p>VLQ 是一種壓縮 large integers 的編碼方式，同樣一個整數，用數字表示一定會消耗比 VLQ 更多的空間。用 Base64 來表達則可以將 VLQ 表示限縮在 ASCII 的子集中，解決一些語言問題。</p>\n<p>有興趣深入了解的人可以看看 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">svelte</a> 的作者 <a href=\"https://github.com/Rich-Harris\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rich-Harris</a> 的<a href=\"https://github.com/Rich-Harris/vlq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實作</a>，下表範例也是取自其 Readme：</p>\n<table>\n<thead>\n<tr>\n<th>Integer</th>\n<th>Base64 VLQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>C</td>\n</tr>\n<tr>\n<td>123</td>\n<td>2H</td>\n</tr>\n<tr>\n<td>123456789</td>\n<td>qxmvrH</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到以 Base64 VLQ 來表示數字能夠縮減需要的儲存空間。</p>\n<h2 id=\"source-map-如何用-base64-vlq-記錄位置資訊\" style=\"position:relative;\"><a href=\"#source-map-%E5%A6%82%E4%BD%95%E7%94%A8-base64-vlq-%E8%A8%98%E9%8C%84%E4%BD%8D%E7%BD%AE%E8%B3%87%E8%A8%8A\" aria-label=\"source map 如何用 base64 vlq 記錄位置資訊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Source Map 如何用 Base64 VLQ 記錄位置資訊</h2>\n<p>知道了 source map 是利用 mappings 裡面的 Base64 VLQ 編碼來記錄兩邊程式碼的對應位置關係，我們可以來仔細解析一下 VLQ 的內容，以上面範例中的編碼 <code class=\"language-text\">EAAE</code> 來看，共有四位數，每一個位數都是一個 Base64 VLQ 編碼，各自代表一個資訊：</p>\n<p><img src=\"/image/source-map-base64vlq.svg\" alt=\"source-map-base64vlq\"></p>\n<p>四個欄位裡面：</p>\n<ul>\n<li>第一個欄位：標記在編譯後程式碼的第幾列（column）</li>\n<li>第二個欄位：標記屬於 source 欄位中的哪個檔案</li>\n<li>第三個欄位：標記在編譯前程式碼的第幾行（line number）</li>\n<li>第四個欄位：標記在編譯前程式碼的第幾列（column）</li>\n</ul>\n<p>其實還有第五個欄位，代表屬於 source map 檔案中 <code class=\"language-text\">names</code> 屬性所列的變數中的哪一個，如果 <code class=\"language-text\">names</code> 為空，這邊就不會產生第五個欄位。</p>\n<p>瀏覽器就是透過這些資訊來定位編譯前後程式碼的位置，讓你能輕鬆的除錯。至於瀏覽器怎麼解析跟實際顯示在 devtool 中，就不在今天討論範圍，還得去爬他們的程式碼才行，但我估計也是用到 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件。</p>\n<h2 id=\"原始碼的編譯過程中如何產生-source-map\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%A7%8B%E7%A2%BC%E7%9A%84%E7%B7%A8%E8%AD%AF%E9%81%8E%E7%A8%8B%E4%B8%AD%E5%A6%82%E4%BD%95%E7%94%A2%E7%94%9F-source-map\" aria-label=\"原始碼的編譯過程中如何產生 source map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原始碼的編譯過程中如何產生 Source Map</h2>\n<p>知道了 source map 的內容後，下個問題來了，編譯過程中，是怎麼產生這些資訊，並儲存在 source map file 中的呢？</p>\n<p>如果有寫過 babel/eslint plugin 或是讀過 <a href=\"https://blog.techbridge.cc/2018/09/22/visit-ast-with-babel-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">透過製作 Babel-plugin 初訪 AST</a> 與 <a href=\"https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">寫一個簡單堪用的 ESLint plugin</a>的讀者應該對於 AST 有些了解，知道程式碼在轉換的過程中，都會經歷如下的歷程：</p>\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"what-ast-play-in-babel\"></p>\n<p>AST（Abstract Syntax Tree）中每個 Node 其實都會記載其位置（<em>start</em> 與 <em>end</em>）：</p>\n<p><img src=\"/image/ast-location-sample.png\" alt=\"ast-location-sample\"></p>\n<p>基本上就提供了我們 source map 所需的資訊，因此 generate 步驟後，除了產生編譯後的程式碼外，也能順帶產生 source map：</p>\n<p><img src=\"/image/source-map-ast-process.png\" alt=\"source-map-ast-process\"></p>\n<p>而如同文章前半段所提，大多數 bundler/generator 會用到 mozilla 的 <a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 套件來幫忙在 generate 階段產生 source map，使用方法在其官方 readme 中可以找到，大致上分為兩種：</p>\n<p>第一種是 low level API（官方範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceMapGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  file<span class=\"token operator\">:</span> <span class=\"token string\">\"source-mapped.js\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  generated<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">35</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  source<span class=\"token operator\">:</span> <span class=\"token string\">\"foo.js\"</span><span class=\"token punctuation\">,</span>\n  original<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    line<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n    column<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"christopher\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}'</span></code></pre></div>\n<p>透過 <code class=\"language-text\">SourceMapGenerator</code> 告知其編譯後檔案位置，然後手動加入對照的程式碼行與列資訊，<a href=\"https://github.com/mozilla/source-map\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source-map</a> 就能幫忙算出 Based64 VLQ 並產生 source map 檔案。這種作法就是要自己額外維護 AST node 中提供的行列資訊，以及原始碼的行列資訊。</p>\n<p>第二種是 high level API（官方範例）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"BinaryExpression\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\" + \"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"Literal\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SourceNode</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>column<span class=\"token punctuation\">,</span> ast<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad AST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ast <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"40 + 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringWithSourceMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    file<span class=\"token operator\">:</span> <span class=\"token string\">\"add.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { code: '40 + 2',</span>\n<span class=\"token comment\">//   map: [object SourceMapGenerator] }</span></code></pre></div>\n<p>high level API 則是直接應用在 AST 中，透過 <code class=\"language-text\">SourceNode</code> 來包裹原有的 AST node，將對應編譯前原始碼的資訊附加上去，最後使用 source-map 提供的 <code class=\"language-text\">toStringWithSourceMap</code> 來輸出原始碼與 source map 檔。</p>\n<p>如果你去看 <code class=\"language-text\">SourceNode</code> 的<a href=\"https://github.com/mozilla/source-map/blob/master/lib/source-node.js#L367-L378\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>，你會發現 <code class=\"language-text\">toStringWithSourceMap</code> 底層也是呼叫了 low levle API，將整個樹的資訊 concat 起來:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  generated<span class=\"token punctuation\">.</span>code <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    original<span class=\"token punctuation\">.</span>source <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    original<span class=\"token punctuation\">.</span>line <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n    original<span class=\"token punctuation\">.</span>column <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      lastOriginalSource <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>source <span class=\"token operator\">||</span>\n      lastOriginalLine <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>line <span class=\"token operator\">||</span>\n      lastOriginalColumn <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>column <span class=\"token operator\">||</span>\n      lastOriginalName <span class=\"token operator\">!==</span> original<span class=\"token punctuation\">.</span>name\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      map<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        source<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span>\n        original<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          line<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span>\n          column<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>column\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        generated<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          line<span class=\"token operator\">:</span> generated<span class=\"token punctuation\">.</span>line<span class=\"token punctuation\">,</span>\n          column<span class=\"token operator\">:</span> generated<span class=\"token punctuation\">.</span>column\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> original<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 略...</span></code></pre></div>\n<p>兩種 API 都有人使用，<a href=\"https://github.com/babel/babel/blob/main/packages/babel-generator/src/source-map.ts#L28\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 是使用 low level API</a>，而 <a href=\"https://github.com/webpack/webpack-sources/blob/master/lib/SourceMapSource.js#L8-L9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpack 則用到了 high level API</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>至此我們大致上解析了 source map 的內容，並初步了解他是怎麼生成的，如果想要再繼續研究的話，可以往 source-map 的<a href=\"https://github.com/mozilla/source-map/tree/master/lib\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>鑽研，包含 VLQ 的實作也有，或是 webpack、bable 或 parcel 的原始碼也值得一看。</p>\n<p>雖然理解這些原理與否並不影響你開發網站與產品，也不一定能增加你的效率或薪水，但是純粹的學習知識其實也是很快樂的，希望大家看到這邊都能有所收穫！有任何問題歡迎留言指教。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://indepth.dev/posts/1230/source-maps-from-top-to-bottom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Source Maps from top to bottom</a></li>\n<li><a href=\"https://kknews.cc/code/3qyaz5g.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳解前端代碼的sourceMap原理——讓你不再為調試代碼發愁</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Source Map 詳解</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000020808317\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">探究 source map 在編譯過程中的生成原理</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1598223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前端面试官: 你知道source-map的原理是什么吗？</a></li>\n<li><a href=\"https://hacks.mozilla.org/2013/05/compiling-to-javascript-and-debugging-with-source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compiling to JavaScript, and Debugging with Source Maps</a></li>\n</ol>","id":"f4ec7f68-940c-50f4-b29d-38db4b01a4bb","fields":{"slug":"how-source-map-works"},"frontmatter":{"date":"2021-03-27T13:41:40.000Z","title":"Source map 運作原理","tags":["source map","javascript","bundler"],"type":"tech","slug":"how-source-map-works"},"timeToRead":10},"next":{"excerpt":"製作動畫，人人有責。","html":"<p>製作動畫，人人有責。</p>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>疫情升溫，待在家裡救人救己，除了打電動玩健身環外，也是個好機會來培養培養自己的美術能力，然而平常工作沒什麼機會製作動畫的我，即便有了時間，也不知道要從何下手，上了 Dribbble、CodePen 找靈感，的確看到很多有趣的作品，但是大多都很複雜，不像是一個週末午後的休閒良品，例如，<a href=\"https://www.tinydesign.co.uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ben Evans</a> 的這個作品：</p>\n<p class=\"codepen\" data-height=\"379\" data-theme-id=\"dark\" data-default-tab=\"result\" data-user=\"ivorjetski\" data-slug-hash=\"xxGYWQG\" data-preview=\"true\" style=\"height: 379px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Pure CSS Landscape - An Evening in Southwold\">\n  <span>See the Pen <a href=\"https://codepen.io/ivorjetski/pen/xxGYWQG\">\n  Pure CSS Landscape - An Evening in Southwold</a> by Ben Evans (<a href=\"https://codepen.io/ivorjetski\">@ivorjetski</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>這張像是照片一樣的圖片，你能想像是單純用 CSS 製作的嗎？作者有放上他製作這作品的<a href=\"https://youtu.be/rUCVBNNyjC4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">縮時影片</a>（影片的音樂還是他自己做的，真有才華），雖然不知道總共花了多少時間，但以他的另一個同樣驚人且至少花費一百小時的<a href=\"https://codepen.io/ivorjetski/pen/dBYWWZ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a>推斷，時數少不到哪去的。</p>\n<p>我知道很多人會覺得，『對呀很酷，但為什麼？』。</p>\n<p>我也不懂為什麼，但知道能利用 CSS 做出這種極限真的很令人感到興奮。光是觀察他的程式碼就可以學到不少技巧，像是：</p>\n<ol>\n<li>Custom HTML tag</li>\n</ol>\n<p>即便是用 CSS 繪圖，相信大部分的人也都是用普通的 <code class=\"language-text\">div</code>、<code class=\"language-text\">span</code> 來組裝圖案，但如果你打開剛剛那範例的 HTML，會看到這樣的結構：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>landscape</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sky</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span><span class=\"token punctuation\">></span></span>\n      ...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x</span>\n    <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sky</span>\n  <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>landscape</span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<p>全都是 custom element，以為是他自製的 web component 但他又沒有對應的 Javascript？🤔</p>\n<p>其實現今瀏覽器對這種 invalid 的 HTML tag 容忍度很高，只要有給定 CSS，瀏覽器還是能正常渲染出來。實際專案上當然不建議這樣做，但在製作 CSS 繪圖或藝術動畫這類通常擁有複雜 HTML 結構的作品上時，就能讓程式碼看起來簡潔許多，等同於讓 tag name 取代 class name。</p>\n<ol start=\"2\">\n<li>Responsive rem</li>\n</ol>\n<p>我們都知道 <code class=\"language-text\">rem</code> 會隨著 root element 的 font-size 自動調整大小，所以若是我們也能動態調整 root element 的大小，並用 <code class=\"language-text\">rem</code> 來設定所有元素的 size，那就能讓頁面輕鬆 responsive。要做到這點可以利用 <code class=\"language-text\">vmin</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1vmin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">vmin</code> 對應 viewport 的短邊，意即螢幕縮小時，該值也會隨之變小，這樣就能達到我們要的效果。</p>\n<p>其實還有其他技巧，但已經扯夠遠了😅。</p>\n<p>雖然試著理解高手如何做到是能吸收不少經驗，但還是會想要自己動手做點什麼，好在我又發現了另一個稍微平易近人的高手 - <a href=\"https://dribbble.com/ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aaron Iker</a>，他大多的作品都圍繞在一個網頁上不可缺乏，但鮮少被人拿來做文章的元件 - <strong>\"按鈕\"</strong>上。</p>\n<p>按鈕，幾乎所有網頁都會用到它，但就是拿來觸發一些動作，被觸發的動作才是我們在意的，很少會在上頭多作著墨，頂多加個 Hover 變色或位移就很差不多了。</p>\n<p>但看看下面這個<a href=\"https://dribbble.com/shots/14524315-Download-Button\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實例</a>：</p>\n<p><video width=\"100%\" height=\"315\" controls src=\"https://cdn.dribbble.com/users/414694/screenshots/14524315/media/d4970a372ae0c6b9a4bf8d60c4d5d82f.mp4\"></video></p>\n<p>一點小巧思，瞬間就讓按鈕活了起來。</p>\n<p>而且因為範圍限縮在了按鈕的大小，就算動畫稍微華麗一些也不會對整體頁面造成太多干擾。</p>\n<p>受到 Aaron 啟發，趁著空閒時間我也試著做了一個<a href=\"https://codepen.io/arvin0731/full/dyvvrBb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">按鈕動畫</a>，今天這篇文章就分享一下過程中使用到的工具與眉角！</p>\n<p><video width=\"100%\" height=\"315\" controls src=\"https://i.imgur.com/I27O5GT.mp4\"></video></p>\n<h2 id=\"靈感來源\" style=\"position:relative;\"><a href=\"#%E9%9D%88%E6%84%9F%E4%BE%86%E6%BA%90\" aria-label=\"靈感來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>靈感來源</h2>\n<p>這次的按鈕動畫主要修改自 Dribbble 上 <a href=\"https://dribbble.com/yorkun\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YorKun</a> 的作品 - <a href=\"https://dribbble.com/shots/15522609-Button-Lock-Animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Button Lock Animation</a>，感謝作者還有附上 Figma 檔案，讓我能更輕鬆的參照 Style。</p>\n<p>不過我並沒有完全照著原作的動畫製作，主要是想多試試一些不同的動畫組合，接下來我會一一介紹。</p>\n<h2 id=\"動畫實作\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E7%95%AB%E5%AF%A6%E4%BD%9C\" aria-label=\"動畫實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動畫實作</h2>\n<p>我一開始想達到的動畫有四項：</p>\n<ol>\n<li>滑動解鎖</li>\n<li>鎖頭開啟與掉落</li>\n<li>對應開鎖狀態的動畫</li>\n<li>鎖頭拖拉時的 2D 物理效果</li>\n</ol>\n<p>理論上應該是很快就能完成，但因為對 GSAP 不熟，花了些冤枉路，導致最後只完成了前三項的效果，算是差強人意。</p>\n<p>用到的工具主要是 <a href=\"https://greensock.com/docs/v3/GSAP/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GSAP</a> 與 GSAP 的 <a href=\"https://greensock.com/draggable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draggable plugin</a></p>\n<h3 id=\"滑動解鎖\" style=\"position:relative;\"><a href=\"#%E6%BB%91%E5%8B%95%E8%A7%A3%E9%8E%96\" aria-label=\"滑動解鎖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>滑動解鎖</h3>\n<p>GSAP 的 <a href=\"https://greensock.com/draggable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draggable plugin</a> 真的有夠簡單好用，只要給定想要啟動 Draggable 的 DOM 物件，並指定要拖拉的方向（type）與範圍（bounds），就能瞬間完成這樣的效果（<a href=\"https://codepen.io/arvin0731/pen/JjWWyZG?editors=1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo 由此去</a>）：</p>\n<p><video width=\"100%\" height=\"315\" controls src=\"https://i.imgur.com/1aL8FNc.mp4\"></video></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 註冊 gsap 的 draggable plugin</span>\ngsap<span class=\"token punctuation\">.</span><span class=\"token function\">registerPlugin</span><span class=\"token punctuation\">(</span>Draggable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 把需要互動的 DOM 用 querySelector 選出來</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".unlock-btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lockerArea <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".locker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dropArea <span class=\"token operator\">=</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".drop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 主要的 Draggable instance</span>\nDraggable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span>\n  bounds<span class=\"token operator\">:</span> button<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onRelease</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hitTest</span><span class=\"token punctuation\">(</span>dropArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      gsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n        ease<span class=\"token operator\">:</span> <span class=\"token string\">\"elastic.out(1, .75)\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this.disable();</span>\n      gsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> dropArea<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">-</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n        ease<span class=\"token operator\">:</span> <span class=\"token string\">\"elastic.out(1, .8)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          tl<span class=\"token punctuation\">.</span><span class=\"token function\">restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>中間可以看到，我們指定 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">x</code>，表示移動方向為 x 軸，而 <code class=\"language-text\">bounds</code> 為 <code class=\"language-text\">button</code> DOM 物件，所以最多不會拖移超過 butotn 的範圍。</p>\n<p>另外，影片中有一個效果是當你拖拉到前後兩端點的時候，會有一個吸力把拖移中的物件吸過去，這段其實是需要靠額外的兩個動畫效果來達成。</p>\n<p><code class=\"language-text\">Draggable.create()</code> 可以傳入的 Option 中，能指定 <code class=\"language-text\">onDrag</code> 與 <code class=\"language-text\">onRelease</code> handler，在 <code class=\"language-text\">onRelease</code> 的時候我們可以透過 <code class=\"language-text\">this.hitTest(dropArea)</code> 這個 Draggable 內建的函式判斷拖拉中的物件是否觸碰到另一個指定的 DOM 物件，若還沒碰到，我們就拉回到起點，也就是這段所做的事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">gsap<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  duration<span class=\"token operator\">:</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span>\n  ease<span class=\"token operator\">:</span> <span class=\"token string\">\"elastic.out(1, .75)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">gsap.to</code> 可以讓指定的 DOM 物件變換到我們傳入的 property 狀態，以此例子來說就是位移到原點，等同於 apply  <code class=\"language-text\">transform:translateX(0)</code>。</p>\n<p>而若觸碰到指定物件，則可以調整 <code class=\"language-text\">x</code> 來將拖移物件直接拉到指定物件，這樣就能製造出<em>吸力</em>的效果。</p>\n<p>此外，在觸碰到物件後的 <code class=\"language-text\">gsap.to</code> 函式中，我們也傳入了 <code class=\"language-text\">onUpdate</code> handler，該 handler 會在動畫完成後被觸發，剛好讓我們能接著下一階段的動畫 - <strong>鎖頭開啟與掉落</strong>。</p>\n<h3 id=\"鎖頭開啟與掉落\" style=\"position:relative;\"><a href=\"#%E9%8E%96%E9%A0%AD%E9%96%8B%E5%95%9F%E8%88%87%E6%8E%89%E8%90%BD\" aria-label=\"鎖頭開啟與掉落 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>鎖頭開啟與掉落</h3>\n<p>當拖移物件觸碰到指定物件時，<code class=\"language-text\">onUpdate</code> 會被觸發：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  tl<span class=\"token punctuation\">.</span><span class=\"token function\">restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">onUpdate</code> 中我們放的是一個 <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Timeline</code> 物件</a>，它能讓我們進行序列動畫，一步步指定各個物件該如何依序執行動畫。</p>\n<p>由於我是將整個 timeline 動畫定義在別處，所以當 <code class=\"language-text\">onUpdate</code> 被觸發時是呼叫 <code class=\"language-text\">tl.restart()</code>，你也可以直接定義在 handler 裡面。</p>\n<p>Timeline 使用方法一樣簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> tl <span class=\"token operator\">=</span> gsap<span class=\"token punctuation\">.</span><span class=\"token function\">timeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> paused<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//create the timeline</span></code></pre></div>\n<p>先創建一個 timeline 物件，這邊傳入 <code class=\"language-text\">{ paused: true }</code> 是因為我希望在之後才觸發他（上述所說，在拖移物件移動到指定區域後才觸發)，所以先預設讓他暫停，這樣我們在 <code class=\"language-text\">onUpdate</code> 時再呼叫 <code class=\"language-text\">restart()</code> 即可。</p>\n<p>題外話，一開始我並不是用 <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timeline</a> 而是在每個 <code class=\"language-text\">gsap.to</code> 的 <code class=\"language-text\">onUpdate</code> 中去呼叫另一個 <code class=\"language-text\">gsap.to</code>，這樣雖然也是可行，但讓程式碼可讀性降低很多，最終我才改成用 <a href=\"https://greensock.com/docs/v3/GSAP/Timeline\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timeline</a> 來串接序列動畫。</p>\n<p>接著就是針對每個我們想要觸發動畫的 DOM 物件設定欲變化的值：</p>\n<p>先讓整個鎖頭的身體部分往下位移，讓上面鐵環部分保持原地，造出開鎖的效果。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  y<span class=\"token operator\">:</span> <span class=\"token string\">\"120%\"</span><span class=\"token punctuation\">,</span>\n  duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/image/button-animation-open-lock.gif\" alt=\"demo\"></p>\n<p>接著利用 <code class=\"language-text\">keyframes</code> 針對單一物件進行一連串較為細緻的動畫，這邊主要是要將整個鎖頭（包含身體與鐵環部分）進行位移與旋轉，營造出鎖頭打開並從鎖上拿掉的動畫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...略*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    keyframes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        rotation<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span>\n        x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        transformOrigin<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n        y<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        y<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"/image/button-animation-drop-locker.gif\" alt=\"demo\"></p>\n<p>接著也是差不多的步驟，一步步對其他的 DOM 物件加上最後的 - <strong>對應開鎖狀態的動畫</strong>，替換掉 <em>UNLOCK</em> 字樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">tl<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerBody<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...略*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>locker<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...略*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>lockerArea<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    rotation<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token number\">0.3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".message,.drop,.locker-area\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    y<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token number\">0.1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">fromTo</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\".read-ok, .unlock-msg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n      opacity<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      opacity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      duration<span class=\"token operator\">:</span> <span class=\"token number\">0.2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意到的是我們除了傳入 DOM object 給 <code class=\"language-text\">gsap.to</code> 與 <code class=\"language-text\">gsap.fromTo</code> 外，也能直接指定 class name，非常方便。</p>\n<p>就這樣簡單幾行程式碼，就做好了一個套用在按鈕上的動畫，應該還算是不錯吧！</p>\n<p class=\"codepen\" data-height=\"369\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"arvin0731\" data-slug-hash=\"dyvvrBb\" style=\"height: 369px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Drag to unlock button with locker (final ver.)\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/dyvvrBb\">\n  Drag to unlock button with locker (final ver.)</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>今天簡單練習了一下從 Dribbble 上找靈感然後用前端技術將動畫實作出來的過程，或許沒有什麼新的東西，但希望能給大家帶來點啟發，防疫期間不妨在家做點有趣的動畫或 CSS art，自娛娛人一下！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.tinydesign.co.uk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ben Evans</a> </li>\n<li><a href=\"https://dribbble.com/ai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aaron Iker</a></li>\n<li><a href=\"https://greensock.com/docs/v3/GSAP/gsap.to()\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GSAP</a></li>\n<li><a href=\"https://frontend.horse/articles/realistic-art-with-css/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">frontend.horse</a></li>\n</ol>","id":"e7b1f0f4-81d4-5ddc-9c87-245af6ede978","fields":{"slug":"practice-animation-on-button"},"frontmatter":{"date":"2021-05-22T13:37:30.000Z","title":"練習動畫的好選擇 - 按鈕","tags":["css","gsap","web"],"type":"tech","slug":"practice-animation-on-button"},"timeToRead":9},"type":"tech"}},"staticQueryHashes":["2123680655"]}