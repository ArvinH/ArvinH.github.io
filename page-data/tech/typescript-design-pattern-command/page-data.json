{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/typescript-design-pattern-command","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Focus on what matter and live life at your own pace.</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>雖然直到最近才實際在工作上使用 TypeScript 進行開發，但是早在去年就有斷斷續續在自己的 side project 上玩玩 TypeScript，剛好後來公司讀書會在研讀<a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">經典的 Design Pattern 書籍</a>，就索性使用 TypeScript 來製作範例，意外發現 TypeScript 在講解一些 Design Pattern 的時候非常適合，不僅能夠有類別、物件等清楚的表示，也能夠直接在網頁上做出會動的範例。</p>\n<p>雖然這是蠻久之前製作的，但最近想想還是可以分享一下！所以今天就以 TypeScript 來製作範例，為大家講解 <strong>Command Pattern</strong>！</p>\n<h2 id=\"command-pattern\" style=\"position:relative;\"><a href=\"#command-pattern\" aria-label=\"command pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command Pattern</h2>\n<p>在 GoF Design Patterns（也就是 Design Patterns: Elements of Reusable Object-Oriented Software 這本書）中 <strong>Command Pattern</strong> 屬於 <strong>Behavioural Patterns</strong> 的一種，主要是定義類別與物件之間的溝通與互動方法。</p>\n<p>Command Pattern 的初衷，是希望能將各種對物件的操作（request）也都獨立包裝成物件，如此一來，這個 request，就能夠在各個物件對象之間傳遞，甚至提供 undoable 的 operation。</p>\n<p>我們可以從 UML 圖來理解：</p>\n<p><img src=\"/image/Command_pattern.png\" alt=\"UML - Command Pattern\"></p>\n<p>By <a href=\"//commons.wikimedia.org/wiki/User:Sae1962\" title=\"User:Sae1962\">Sae1962</a> - <span class=\"int-own-work\" lang=\"en\">Own work</span>, <a href=\"https://creativecommons.org/licenses/by-sa/4.0\" title=\"Creative Commons Attribution-Share Alike 4.0\">CC BY-SA 4.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=55066657\">Link</a></p>\n<ul>\n<li>\n<p>Command</p>\n<ul>\n<li>定義出一個 Command 介面，用來執行操作，該介面只需要定義一個 <code class=\"language-text\">Execute()</code> 這個抽象 method。</li>\n</ul>\n</li>\n<li>\n<p>Concrete Command</p>\n<ul>\n<li>從抽象的 Command 介面所實作的 Concrete Command，會實作該 Command 實際上要執行的動作內容，也就是實作 <code class=\"language-text\">Execute()</code>，此外，他還需要負責將 <em>接收操作的物件</em>（receiver） 與 動作（Action）本身連結起來。簡單來說，就是他會被傳遞進一個物件，並且在 <code class=\"language-text\">Execute()</code> 函數中，trigger receiver 執行相對的動作。這邊值得注意的是，Concrete Command 本身並不管也不知道 receiver 會怎麼實作他們的 action，他只需要告訴 receiver 他想要完成的是什麼命令即可。</li>\n</ul>\n</li>\n<li>\n<p>Client</p>\n<ul>\n<li>負責創建 Concrete Command，並指定其 receiver。</li>\n</ul>\n</li>\n<li>\n<p>Invoker</p>\n<ul>\n<li>就是下達指令的人，負責呼叫 Command。</li>\n</ul>\n</li>\n<li>\n<p>Receiver</p>\n<ul>\n<li>知道接受到 Command 時，要執行什麼動作（Action）的人。</li>\n</ul>\n</li>\n</ul>\n<p>光看 UML，一定還不太清楚，接著我們從 sequence diagram 來看看這幾個對象彼此之間如何互動：</p>\n<p><img src=\"/image/Command-sequence-diagram.png\" alt=\"Sequence diagram\"></p>\n<p>可以想像，Receiver 就是餐廳服務生，而 Client 就是顧客，顧客會知道要對服務生下達指令，所以會產生 <code class=\"language-text\">new Command(Receiver)</code>；但他可能需要透過服務鈴（Invoker)，才能讓服務生真正去執行他的指令。</p>\n<p>接著我們先來看看實際的範例。</p>\n<h2 id=\"typescript-實作範例\" style=\"position:relative;\"><a href=\"#typescript-%E5%AF%A6%E4%BD%9C%E7%AF%84%E4%BE%8B\" aria-label=\"typescript 實作範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript 實作範例</h2>\n<iframe src=\"https://codesandbox.io/embed/5k2nyp66q4?fontsize=14\" title=\"Tyscript-CommandPattern-II\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>當顧客點選 \"Give me food\" 按鈕時，服務生就會接收到指令，並趕緊去找廚師；而當顧客想更改餐點時，可以透過 \"Hey get back\"，下達指令來回復服務生的上一個動作。</p>\n<p>很簡單暴力的範例吧XD</p>\n<p>實際上的程式怎麼寫呢？</p>\n<p>首先我們先從定義 <code class=\"language-text\">Command</code> 介面開始：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Abstract method!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">unexecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Abstract method!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如同先前 UML 圖所描述，我們只定義抽象的 <code class=\"language-text\">execute()</code> method，在 TypeScript 中要模擬抽象方法的最簡單做法就是讓他 <code class=\"language-text\">throw</code> Error。\n另外我們同時也定義一個 <code class=\"language-text\">unexecute()</code>，作為回復的操作。</p>\n<hr>\n<p><strong>[2019/04/22 - Update]</strong></p>\n<p>感謝 @pilagod 的補充，TypeScript 有提供 <code class=\"language-text\">Abstract</code> 類別，可以強迫繼承者去實作其抽象函數，所以我們的 Command class 可以寫成：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n  abstract <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  abstract <span class=\"token function\">unexecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Waiter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Waiter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteOrderCommand</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> receiver<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>Waiter<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> position<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">receiver<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>Waiter<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`execute` method of ConcreteOrderCommand is being called!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">unexecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"`execut` method of ConcreteOrderCommand is being called!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">backAction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再來實作 <code class=\"language-text\">ConcreteCommand</code>，我們 <code class=\"language-text\">extend</code> 抽象的 <code class=\"language-text\">Command</code> 類別，指定兩個私有變數：<code class=\"language-text\">receiver</code> 與 <code class=\"language-text\">position</code>。</p>\n<p><code class=\"language-text\">receiver</code> 可以從其宣告的類別看出，就是 <code class=\"language-text\">Waiter</code>，這就是 TypeScript 適合說明 Design Pattern 的優點之一，可以很明確看到關聯性，我們待會會看到 <code class=\"language-text\">Waiter</code> 的實作。而 <code class=\"language-text\">position</code> 則是範例中我們用在 <code class=\"language-text\">execute()</code> 中，告訴 <code class=\"language-text\">receiver</code> 該如何 <code class=\"language-text\">action</code> 的工具，在範例中就是改變 Waiter 的位置。</p>\n<p>在 <code class=\"language-text\">ConcreteCommand</code> 的 <code class=\"language-text\">execute()</code> 實作中，我們定義出 \"這個 Command\" 要讓 \"其受指定的 receiver\" 進行怎樣的 \"action\"，也就是這行：</p>\n<p><code class=\"language-text\">this.receiver.current.action(this.position);</code></p>\n<p>我們告訴 <code class=\"language-text\">receiver</code> 說，請依照 <code class=\"language-text\">this.position</code> 這個參數去執行你的 <code class=\"language-text\">action</code>，但記住，你的 <code class=\"language-text\">action</code> 到底是怎麼實作的我並不管你。</p>\n<p>（這邊跟 React 相關的不做太多解釋，基本上因為我們需要在 <code class=\"language-text\">ConcreteCommand</code> 中去呼叫 <code class=\"language-text\">receiver</code> 的 <code class=\"language-text\">action</code> method，所以採用 <code class=\"language-text\">React.RefObject&lt;T></code> 作為 <code class=\"language-text\">receiver</code> 的類型，這樣我們能透過 <code class=\"language-text\">.current</code> 的 API 去取得 React 實體。）</p>\n<p>看到這邊可以發現，由於我們並不需要知道 receiver 本身怎麼實作 action，所以關注點可以分離，只要管好自己這邊如何呼叫 receiver 即可。</p>\n<p>到這邊為止，我們已經實作完 UML 中的 Command 介面與 ConcreteCommand 了，接著輪到 <code class=\"language-text\">Receiver</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> waiterStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  display<span class=\"token operator\">:</span> <span class=\"token string\">\"flex\"</span><span class=\"token punctuation\">,</span>\n  flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">\"column\"</span><span class=\"token punctuation\">,</span>\n  alignItems<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">,</span>\n  transition<span class=\"token operator\">:</span> <span class=\"token string\">\"all 1s ease-in-out\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntype WaiterProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>Waiter<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntype WaiterState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  position<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Waiter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>WaiterProps<span class=\"token punctuation\">,</span> WaiterState<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">action</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">position<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"command action!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      position\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">backAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">position<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"command back action!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      position\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> position <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>waiterStyle<span class=\"token punctuation\">,</span> transform<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>position<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img\n          width<span class=\"token operator\">=</span><span class=\"token string\">\"100px\"</span>\n          src<span class=\"token operator\">=</span><span class=\"token string\">\"https://image.flaticon.com/icons/svg/816/816577.svg\"</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Receiver 也很簡單，重點在於實作 <code class=\"language-text\">action</code>。以範例來說，我們會從 <code class=\"language-text\">ConcreteCommand</code> 接收到新的 position state，所以我們要執行的動作就是 <code class=\"language-text\">this.setState({ position })</code>，將自身的狀態改變。透過 TypeScript，可以清楚定義 state 與 props 的型別。</p>\n<p><code class=\"language-text\">Waiter</code> 需要接收一個 <code class=\"language-text\">ref: React.RefObject&lt;Waiter>;</code> 的 Props，則是與 React 實作相關，因為我是利用 <code class=\"language-text\">const WaiterRef = React.createRef&lt;Waiter>();</code> 將 Waiter 的 ref 傳遞給 ConcreteCommand。（可參考 Codesandbox 內的完整程式碼）</p>\n<p>最後，有了指令（ConcreteCommand），有了接收指令的人（Waiter），我們來看看 Customer 要如何使用指令來呼叫 Waiter 吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 有刪除一些不重要的 code，i.e. style, etc.</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Waiter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Waiter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Command<span class=\"token punctuation\">,</span> ConcreteOrderCommand <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./CommandPattern\"</span><span class=\"token punctuation\">;</span>\ntype CustomerProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  WaiterRef<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>RefObject<span class=\"token operator\">&lt;</span>Waiter<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntype CustomerState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  orderCommand<span class=\"token operator\">:</span> Command<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>CustomerProps<span class=\"token punctuation\">,</span> CustomerState<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> WaiterRef <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      orderCommand<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteOrderCommand</span><span class=\"token punctuation\">(</span>WaiterRef<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>CustomerStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> btn1OnHover<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> btn1OnHover<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>orderCommand<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          Give me food<span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div\n          onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> btn2OnHover<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> btn2OnHover<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>orderCommand<span class=\"token punctuation\">.</span><span class=\"token function\">unexecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          Hey <span class=\"token keyword\">get</span> back<span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本上 Customer 就是會保有 <code class=\"language-text\">ConcreteCommand</code> 在 state 當中，這樣才能合理的不斷下達指令。</p>\n<p>另外也需要取得 <code class=\"language-text\">WaiterRef</code> 這個 props，才能在初始 <code class=\"language-text\">ConcreteCommand</code> 時指定其 <code class=\"language-text\">receiver</code>。</p>\n<p>接著我們只要在不同功能的 button 上綁定 <code class=\"language-text\">command</code> 即可，分別呼叫 <code class=\"language-text\">this.state.orderCommand.execute();</code> 與 <code class=\"language-text\">this.state.orderCommand.unexecute();</code>。</p>\n<p>如此一來，我們就成功用 TypeScript 實作一個完整的 Command Pattern 範例啦！（完整的程式碼請看上方 CodeSandbox 連結）</p>\n<h2 id=\"command-pattern-的-consequences\" style=\"position:relative;\"><a href=\"#command-pattern-%E7%9A%84-consequences\" aria-label=\"command pattern 的 consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command Pattern 的 Consequences</h2>\n<ul>\n<li>Command Pattern 將呼叫指令的物件與執行指令的物件切割開來，降低彼此之間耦合度。</li>\n<li>Command 是 first-class objects，可以被傳遞、操作與繼承。</li>\n<li>可以 composite 多個 Command 到一個 Command 中，類似巨集概念。</li>\n<li>增加 Command 很容易，因為你不需要更改其他的現有 Class。</li>\n</ul>\n<h2 id=\"實作-command-pattern-上所需要注意的細節\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C-command-pattern-%E4%B8%8A%E6%89%80%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%B4%B0%E7%AF%80\" aria-label=\"實作 command pattern 上所需要注意的細節 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作 Command Pattern 上所需要注意的細節</h2>\n<ul>\n<li>需要思考一個 Command 該擁有多少能力，是要單純作 receiver 與 action 之間的 binding，大部分實作擺在 receiver；抑或是將大多實作自己處理掉，receiver 只是一個命令的受體？</li>\n<li>是否需要支援 undo 功能，Command Pattern 設計上天生支援 undo，但實際實作上你可能會需要額外的儲存 state 來達成，會增加開發複雜度。</li>\n<li>若是支援 undo，還得注意發生 error 時，會不會不斷累積，難以 debug。</li>\n</ul>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>TypeScript 現在非常熱門，Design Pattern 則是萬年不敗，兩者搭配起來一起學習可說是天作之合！尤其是平常工作沒有機會碰觸到的話，透過這種方式學習不僅兩者皆能吸收，還能累積點小玩具。</p>\n<p>但說起來，TypeScript 的<a href=\"https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">爭議</a>也不少，最近參加了優秀新同事們主辦的幾場 Meetup，再次燃起我對 Elm 的興趣，可惜剛到新環境，瑣事太多，還來不及有個成果分享，不過也算是有點心得，希望之後能夠分享一下。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki - Design_Patterns</a></li>\n<li><a href=\"https://github.com/Microsoft/TypeScript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript Design Pattern</a></li>\n</ol>","fields":{"slug":"typescript-design-pattern-command"},"frontmatter":{"title":"用 TypeScript 輕鬆學 Design pattern - Command Pattern","date":"03-31-2019","tags":["Design pattern","Command","react","TypeScript"]},"timeToRead":8}},"pageContext":{"slug":"typescript-design-pattern-command","prev":{"excerpt":"『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』","html":"<blockquote>\n<p>『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>過年除舊佈新，剛好趁這個機會來複習一下已經是老觀念的 Virtual DOM。很多人在講到 React 的時候都一定會提到 Virtual DOM，而問到 Virtual DOM 的好處時，就會說到實際 DOM 的操作成本很貴，所以透過 Virtual DOM 可以降低成本。</p>\n<p>你在除夕餐桌上這樣講可能沒問題，面試只講這樣應該不太好。</p>\n<p>畢竟你最後還是會操作實體 DOM 啊，這樣說明太簡化了。</p>\n<p>Virtual DOM 的由來可以從 MVC 和 MVVM 的架構追溯起，主要都是為了解決前端頁面呈現、資料更動、使用者操作這三種狀態交互作用產生的複雜性，MVC 提供了一個解法，MVVM 提出的 View Model 有了優化的方案，還有 data 與 view 雙向綁定的方式等等，而 React 提出了另一種思路，但那不是我今天的重點，有興趣且還不知道這些名詞是什麼的讀者可以去搜尋看看，有很多文章在說明這些資訊與歷史。</p>\n<p>React 的 Virtual DOM 是因應其數據與 UI 更新繪製的特殊思路而提出的效能解決方案。</p>\n<p>React 希望在資料更新時，能夠直接重新渲染頁面，不用主動去探究是數據的哪部份發生變化，要對應去更新頁面哪一部分的 DOM。但頁面重新渲染的成本可是更高，所以才需要 Virtual DOM 作為緩衝，透過資料更新後，重新繪製 Virtual DOM，與實體 DOM 進行 Diff，最後再把差異部分 Patch 上去，這不僅修正了重新渲染的成本問題，也降低了 data 與 view 交互更新的複雜度，提高了 developer 的開發體驗。</p>\n<p>說了這麼多，其實今天就只是單純想自己手刻一個 Virtual DOM 來理解一下該怎麼實現這樣的功能，畢竟知道了概念，總覺得手刻應該不難。\n手刻 Virtual DOM 其實也沒什麼太大意義，但很多時候就是 for fun，然後做個記錄。</p>\n<p>主要參考至 <a href=\"https://twitter.com/ycmjason\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ycmjason</a> 的 <a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">talk</a> 與 <a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a>，非常推薦欣賞，講者的熱情完全掩蓋掉音訊不佳的缺點，又很清楚地介紹了 VDOM 實作。</p>\n<h2 id=\"所以virtual-dom-到底長什麼樣子\" style=\"position:relative;\"><a href=\"#%E6%89%80%E4%BB%A5virtual-dom-%E5%88%B0%E5%BA%95%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"所以virtual dom 到底長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以，Virtual DOM 到底長什麼樣子？</h2>\n<p>Virtual DOM 就只是個 javascript plain object，並且模仿 Actual DOM 的結構（但當然簡化很多）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'v-element'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>一個基本的 VDOM，我們只需要元素名稱（tagName）、元素屬性（attrs）與其 Children list（既然是虛擬 DOM，這個 plain object 裡面的屬性其實隨便你取名，只要對應得到實際 DOM 即可）。</p>\n<p>根據這個想法，我們可以模仿現存的 VDOM lib，提供一個 <code class=\"language-text\">createElement</code> 的 function：</p>\n<div class=\"gatsby-highlight\" data-language=\"jscreateelement.js\"><pre class=\"language-jscreateelement.js\"><code class=\"language-jscreateelement.js\">export default (tagName, { attrs = {}, children = [] }) =&gt; {\n  const vElement = Object.create(null);\n\n  Object.assign(vElement, {\n    tagName,\n    attrs,\n    children,\n  });\n\n  return vElement;\n};</code></pre></div>\n<blockquote>\n<p>Note: 利用 <code class=\"language-text\">Object.create(null)</code> 與 <code class=\"language-text\">Object.assign</code> 的方式產生物件，可以避免直接採用 Object literals 的方式會繼承到 object prototype 的屬性。</p>\n</blockquote>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\nconsole.log(vRootApp);</code></pre></div>\n<p>結果：</p>\n<p><img src=\"/image/vdom-createElement.png\" alt=\"vdom-createElement\"></p>\n<h2 id=\"從-virtual-dom-到-real-dom\" style=\"position:relative;\"><a href=\"#%E5%BE%9E-virtual-dom-%E5%88%B0-real-dom\" aria-label=\"從 virtual dom 到 real dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>從 Virtual DOM 到 Real DOM</h2>\n<p>有了 Virtual DOM，我們還需要一個 <code class=\"language-text\">render</code> 函數來將其繪製到頁面上。方法很簡單，我們只需要 <code class=\"language-text\">document.createElement</code>、<code class=\"language-text\">setAttribute</code> 與 <code class=\"language-text\">appendChild</code> 三個 web api 即可完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(renderElem(child));\n  }\n  return elem;\n};\nexport default renderElem;</code></pre></div>\n<p>根據 <code class=\"language-text\">tagName</code> 使用 <code class=\"language-text\">document.createElement</code> 來建立實際的 DOM 物件，並且將 <code class=\"language-text\">attrs</code> 一個一個 <code class=\"language-text\">setAttribute</code> 到實際的 DOM 元素上；最後再將 <code class=\"language-text\">children</code> 遞迴丟入 <code class=\"language-text\">renderElem</code> 函數中，將所有小孩的實際 DOM object 都建立好並 <code class=\"language-text\">appendChild</code> 到上層的實際 DOM 物件上，最後將完整的 real DOM object 回傳出去。</p>\n<p>以概念來說基本上這樣就完成了，但可以讓他在完整一點，提供 <code class=\"language-text\">textNode</code> 的支援，利用 <code class=\"language-text\">document.createTextNode</code> 來產生純 string 的元素，稍微修改 <code class=\"language-text\">render.js</code> 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(render(child));\n  }\n  return elem;\n};\nconst render = (vNode) =&gt; {\n  if (typeof vNode === &#39;string&#39;) {\n    return document.createTextNode(vNode);\n  }\n  return renderElem(vNode);\n};\nexport default render;</code></pre></div>\n<p>從 <code class=\"language-text\">render</code> 函數回傳的基本上就會是一顆完整的 Virtual DOM Tree 了，舉個例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vRootApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello VDOM'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'http://placekitten.com/200/300'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootApp <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vRootApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>結果如下，Virtual DOM 就是個 Javascript plain object，而經由 <code class=\"language-text\">render</code> 函數回傳的即是包含實際 DOM 屬性的 Real DOM：</p>\n<p><img src=\"/image/vDom-render-actualDOM.png\" alt=\"Render to real dom\"></p>\n<h3 id=\"掛到頁面上吧\" style=\"position:relative;\"><a href=\"#%E6%8E%9B%E5%88%B0%E9%A0%81%E9%9D%A2%E4%B8%8A%E5%90%A7\" aria-label=\"掛到頁面上吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>掛到頁面上吧！</h3>\n<p>透過 <code class=\"language-text\">render</code> 我們有了實體 DOM，但這樣還沒辦法在頁面上顯示，需要有個類似 <code class=\"language-text\">ReactDOM.render</code> 的方法來幫助我們實現：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmount.js\"><pre class=\"language-jsmount.js\"><code class=\"language-jsmount.js\">export default (element, targetNode) =&gt; {\n  targetNode.appendChild(element);\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\nimport render from &#39;./render&#39;;\nimport mount from &#39;./mount&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    &#39;Hello VDOM&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\n\nconst rootApp = render(vRootApp);\nmount(rootApp, document.getElementById(&#39;rootApp&#39;));</code></pre></div>\n<p>很簡單，就把我們產生的 Real DOM <code class=\"language-text\">appendChild</code> 到 targetNode 下就好。</p>\n<p>或是也能用 <code class=\"language-text\">targetNode.replaceWith(element);</code> 的方式直接取代掉 targetNode。（不過要注意一下 IE 是無法使用的喔！）</p>\n<p><img src=\"/image/mount-to-html.png\" alt=\"Mounted DOM\"></p>\n<h1 id=\"diff-virtual-dom---reconciliation\" style=\"position:relative;\"><a href=\"#diff-virtual-dom---reconciliation\" aria-label=\"diff virtual dom   reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diff Virtual DOM - Reconciliation</h1>\n<p>知道怎麼產生 Virtual DOM 並繪製到頁面上後，也是時候進入重頭戲了！</p>\n<p>如前言所說，Virtual DOM 作為我們操作 Real DOM 的一層緩衝，我們比較經過狀態變化後產生的新舊 Virtual DOM 來找出實際需要更新的 Real DOM 位置，如此一來，儘管每次都重新 Render，實際更新的 DOM 也不會是全部，可以大幅改善直接重新渲染的效能問題。</p>\n<p>而 tree diff 的演算法其實很複雜，如果用 <a href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tree Edit Distance</a> 的方式遞迴檢查每個節點，複雜度將可達到 O(n^3)，是非常驚人的數字，幾乎無法在短時間處理完，因此 React 所提出的 reconciliation 制定了一些策略，來將複雜度從 O(n^3) 降至 O(n)。<a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官方文檔其實說明得很清楚</a>。</p>\n<p>主要有兩個假設：</p>\n<ol>\n<li>只需要比較同一層的節點，同一層內的元素若擁有不同的 type，往下長出的樹就會不同。</li>\n<li>同樣 type 的元件，開發者可以使用 <code class=\"language-text\">key</code> 這個 props 來決定其子樹是否需要重新 render。</li>\n</ol>\n<p>如假設一提及，我們只比較新舊兩棵 Virtual DOM Tree 中，同個父節點下的所有子節點，若發現某個節點不存在了，那就整個子樹都會刪除不去進一步比較。</p>\n<p><img src=\"/image/vdom-level-comparison.png\" alt=\"只比同 level 的 node\"></p>\n<p>這樣做的意思就是說，如果今天發生了一些跨層級的操作，像是整顆子樹被搬移到另一個節點上，對 React 來說，會是刪掉原有的子樹，然後重新在新的位置建立一模一樣的子樹出來：</p>\n<p><img src=\"/image/vdom-cross-level-modify.png\" alt=\"刪掉原子樹，在新位置重建\"></p>\n<blockquote>\n<p>Note: 實際上 React 在這兩個假設下，還做了許多更細節的事情（component diff、element diff），可以先去參考這篇很久之前的<a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，再去閱讀 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React fiber 的介紹</a>。</p>\n</blockquote>\n<p>基於這兩個假設我們可以開始實作簡單版的 Virtual DOM Diffing 演算法，基本上有四個 cases 處理：</p>\n<ol>\n<li>newTreeRoot 為 undefined，也就是某個節點被刪除了。</li>\n<li>兩個 Node 都是純字串。</li>\n<li>一個 Node 為純字串，一個 Node 為 Virtual Element。</li>\n<li>新舊 TreeRoot 的 TagName 不同。</li>\n</ol>\n<p>根據這四種 cases 我們個別處理，並且回傳一個 <code class=\"language-text\">patch</code> 函數，供之後來將 diff 完的結果 attach 到 Real DOM 上 （Note: r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  // 假設 oldVTreeRoot 一定都存在，只有 newVTreeRoot 有機會被刪除，也就是 undefined\n  if (newVTreeRoot === undefined) {\n    // 回傳 patch 函數，會接收 Real DOM，這邊 r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM\n    return rNode =&gt; {\n      // 因為新的 Virtual DOM Tree 是空的，所以回傳的 Patch 函式就是直接把 Real DOM 刪除。\n      rNode.remove();\n      return undefined;\n    }\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // 這邊包含兩種 cases：\n      // Case 1：新舊 Virtual DOM Tree 其中一個為 string，一個為 Virtual Node，所以當然會 !==\n      // Case 2：是兩者都為 string，但 !==\n      // 我們直接根據新的 Virtual Tree render 新的 Real Tree，並 replace 掉原本的 Real Tree\n      return rNode =&gt; {\n          // 回傳 patch 函數\n          const rNewNode = render(newVTreeRoot);\n          rNode.replaceWith(rNewNode);\n          return rNewNode;\n       };\n    } else {\n      // 若都為 string 且值相同，那就不用改。\n      return rNode =&gt; rNode; // 回傳 patch 函數\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n    // 根據優化 Tree diffing 演算法的假設一，只要 tagName 不同，我們就直接重新 render。\n    return rNode =&gt; {\n      // 回傳 patch 函數\n      const rNewNode = render(newVTreeRoot);\n      rNode.replaceWith(rNewNode);\n      return rNewNode;\n    };\n  }\n  // ...\n};\nexport default diff;</code></pre></div>\n<p>聰明的你看到這邊就會發問了：tag name 相同的 case 沒有處理到啊？</p>\n<p>沒錯，如果新舊兩棵 Virtual Tree 的 tag name 都一樣，那我們還得比 attributes，而要比較兩個節點的所有 attributes，不如直接 replace 上新的就好。但要注意，因為 attributes 很多，所以會產生多個 patch 函數需要被 apply 到 Real DOM 上，我們額外用一個陣列暫存，最後回傳一個 wrapper patch 函數，把所有暫存的 patch 函數都 apply 到傳進來的 Real DOM ：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffattrs.js\"><pre class=\"language-jsdiffattrs.js\"><code class=\"language-jsdiffattrs.js\">const diffAttrs = (oldAttrs, newAttrs) =&gt; {\n  // 因為 attributes 很多，需要一個 array 來存所有需要的 patch 函數\n  const patches = [];\n  // 放上新的 attributes\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push(rNode =&gt; {\n      // 暫存 patch 函數\n      rNode.setAttribute(k, v);\n      return rNode;\n    });\n  }\n  // 移除舊的 attributes\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push(rNode =&gt; {\n        // 暫存 patch 函數\n        rNode.removeAttribute(k);\n        return rNode;\n      });\n    }\n  }\n  // 最後傳出去的外層 patch 函數\n  return rNode =&gt; {\n    for (const patch of patches) {\n      // 把每個暫存的 patch 函數都 apply 到 Real DOM 上\n      patch(rNode);\n    }\n    return rNode;\n  };\n};\nexport default diffAttrs;</code></pre></div>\n<p>處理完 attributes 後，我們還得考慮 children，diff children 的方式其實跟 diff 整棵樹一樣，但我們要考慮到子樹的長度：</p>\n<ol>\n<li><code class=\"language-text\">oldVChildren.length === newVChildren.length</code>，那就直接 <code class=\"language-text\">diff(oldVChildren[i], newVchildren[i])</code>，i 從 0 到 <code class=\"language-text\">oldVChildren.length</code>。</li>\n<li><code class=\"language-text\">oldVChildren.length > newVChildren.length</code>，跟 case 1 其實一樣，因為新子樹比較少，就代表有 Node 被刪除，在我們原本的 diff 函式中有處理了。</li>\n<li><code class=\"language-text\">oldVChildren.length &lt; newVChildren.length</code>，新子樹比較長，那就先把舊子樹的所有點先 update 好，再把剩餘的新子樹 patch 上去。</li>\n</ol>\n<p>從上述三個 cases 來看，我們橫豎都需要 loop oldVChildren 一次，最後若有多餘的 newVChildren 再想辦法 update 上去。另外，這邊一樣需要暫存多個 patch 函數，實作細節我註解在 code 裡比較清楚，最後回傳的 patch 函數比較特別：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffchildren.js\"><pre class=\"language-jsdiffchildren.js\"><code class=\"language-jsdiffchildren.js\">const diffChildren = (oldVChildren, newVChildren) =&gt; {\n  // 無論如何都 loop 過 oldVChildren 一次，把所有 diff 回傳的 patch 函數暫存在 childrenPatches 內\n  // 這是一定會 apply 到 old tree 的部分。\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) =&gt; {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n  // 接著我們看看 `newVChildren` 是否有多餘的子樹需要處理\n  // 若有，我們產生的 patch 函數就是單純 `render` 出 Real Node 並且\n  // appendChild 到 patch 傳進的 Real Node 上（實際要被 patch 的 parent 節點）\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push(rNode =&gt; {\n      rNode.appendChild(render(additionalVChild));\n      return rNode;\n    });\n  }\n  return rParent =&gt; {\n    // 由於這是 children 的 patch，吃進來的會是 parent 的 Real DOM\n    // 我們要抓出 `rParent.childNodes` 來針對 old tree 做 patch\n    // zip 函數其實就是 lodash 的 zip，成對將 childPatches, rParent.childNodes 的元素並排傳出，這樣比較簡潔\n    for (const [patch, rChild] of zip(childPatches, rParent.childNodes)) {\n      patch(rChild);\n    }\n    // 最後把 new tree 多餘的 patches 直接 patch 到 parent 的 Real DOM 下即可（因為我們是 appendChild）\n    for (const patch of additionalPatches) {\n      patch(rParent);\n    }\n    return rParent;\n  };\n};</code></pre></div>\n<p>最後在我們原本的 <code class=\"language-text\">diff.js</code> 中的最後面加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  if (newVTreeRoot === undefined) {\n    // ....\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // ....\n    } else {\n      // ....\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n      // ....\n  }\n  const patchAttrs = diffAttrs(oldVTreeRoot.attrs, newVTreeRoot.attrs);\n  const patchChildren = diffChildren(oldVTreeRoot.children, newVTreeRoot.children);\n\n  return rNode =&gt; {\n    patchAttrs(rNode);\n    patchChildren(rNode);\n    return rNode;\n  };\n};\nexport default diff;</code></pre></div>\n<p>完整的 diff code 可以看這邊 <a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<p>到這邊為止，Virtual DOM 算是告一段落了！</p>\n<h2 id=\"最後修改下-mainjs做點變化讓大家看製作出的-vdom-效果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BF%AE%E6%94%B9%E4%B8%8B-mainjs%E5%81%9A%E9%BB%9E%E8%AE%8A%E5%8C%96%E8%AE%93%E5%A4%A7%E5%AE%B6%E7%9C%8B%E8%A3%BD%E4%BD%9C%E5%87%BA%E7%9A%84-vdom-%E6%95%88%E6%9E%9C\" aria-label=\"最後修改下 mainjs做點變化讓大家看製作出的 vdom 效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後修改下 main.js，做點變化讓大家看製作出的 VDOM 效果</h2>\n<p>我們讓 <code class=\"language-text\">createVApp</code> 柯里化，多傳一個參數 <code class=\"language-text\">count</code> 進去改變 attributes 跟圖片尺寸，接著 <code class=\"language-text\">setInterval</code> 讓每兩秒產生一個隨機數字當作 <code class=\"language-text\">count</code> 值，用來 update 我們的節點：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">const createVApp = count =&gt; createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n    dataCount: count, // we use the count here\n  },\n  children: [\n    &#39;Hello Kitty&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: `http://placekitten.com/${count}00/${count}00`,\n      },\n    }),\n  ],\n});\n\nlet vApp = createVApp(0);\nconst rApp = render(vApp);\nlet rRootEl = mount(rApp, document.getElementById(&#39;rootApp&#39;));\nsetInterval(() =&gt; {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n  // 每次 patch 完就 assgin 回原有變數，這樣下個 interval 才會抓到更新的樹\n  rRootEl = patch(rRootEl);\n  vApp = vNewApp;\n}, 2000);</code></pre></div>\n<p>效果如下，可以看到圖片一直變動，但是我們真的只改到了需要改的節點與 attributes，並不會整個頁面重新刷新：</p>\n<p><img src=\"/image/vdom-demo.gif\" alt=\"demo\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然沒辦法跟市面上實際的 VDOM 相提並論，但是從這簡單的實作可以很清楚的知道整個概念與要解決的問題，我覺得是蠻不錯的小練習，接下來再去看 React 或是 Vue 在這方面的實作應該會比較有頭緒一些！\n最後再附上一次 codesandbox 連結讓想玩的人直接試試：<a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 源碼剖析系列 － 不可思議的 react diff</a></li>\n<li><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深度剖析：如何实现一个 Virtual DOM 算法</a></li>\n</ol>","id":"17b2e615-d357-52dc-8e0a-2cd83e9dfcbb","fields":{"slug":"vdom-from-scratch"},"frontmatter":{"date":"2019-02-04T11:19:30.000Z","title":"從頭打造一個簡單的 Virtual DOM","tags":["virtual dom","react","javascript","web"],"type":"tech","slug":"vdom-from-scratch"},"timeToRead":13},"next":{"excerpt":"『You would never make something great if you are afraid that it's going to suck』\n『It's not a thing if it leads you to your success』\n--- Justin Timberlake","html":"<blockquote>\n<p>『You would never make something great if you are afraid that it's going to suck』\n『It's not a thing if it leads you to your success』\n--- Justin Timberlake</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>直接先來個成果圖：</p>\n<p><img src=\"/image/elm-extension.gif\" alt=\"result\"></p>\n<p>今年二月移轉陣地到日本來工作，搬到一個人生地不熟的地方，初始開銷少不了，除了交通、伙食、房租外，還需要添購許多傢俱。而當然，所有東西都是以日幣標價，就算 Amazon JP 已經非常方便的有簡體版的語系可以切換，價格上還是得以日幣顯示。</p>\n<p>對我來說，還沒有辦法習慣以日幣來衡量物品的價值，像是我能很快知道一千日幣大約三百台幣，但看到一個東西標價兩萬九日幣，我沒辦法很快速的理解這東西是多貴或多便宜，腦袋還是會想把它轉成台幣來衡量。</p>\n<p>所以就造成我在 Amazon JP 或是 Nitori 的網站挑選商品時，常常要複製價格，然後開啟另一個 tab 來搜尋日幣轉換台幣的網站，再填入轉換。</p>\n<p>一次兩次還好，第三次就無法忍受了，引用 \"Refactoring — Improving the Design of Existing Code\" 這本書中的一句話：<em>\"Three strikes, then you refactor.\"</em></p>\n<p>稍微找了一下 Chrome web store，並沒有看到適合的 extension，所以決定自己打造一個。</p>\n<p>而剛好在前幾週參加了同事主辦的 Meetup，其中有個 Topic 是介紹 Elm 這個語言，以前雖然也聽過介紹，但這次聽到實際用在 Production 的案例後，提高我不少興趣，加上適逢公司的 hackday，索性就利用這機會來練習一下，用 Elm 來製作我想要的 Chrome Extension！</p>\n<p>今天就用這篇文章記錄一下使用 Elm 製作 Chrome Extension 的方法與心得，不過畢竟是 hackday 作品，功能尚需完善就是。</p>\n<h2 id=\"什麼是-elm\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-elm\" aria-label=\"什麼是 elm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Elm？</h2>\n<p><img src=\"/image/elm-official-site.png\" alt=\"Elm Website\"></p>\n<p>不知道有沒有人跟我一樣，之所以知道 Elm，是因為 Redux 的作者說他受其啟發？</p>\n<p>跟 Redux 作者一樣，Elm 的作者 - Evan Czaplicki 也是個年輕奇才，Elm 是他在哈佛的論文，推薦大家看一下他 <a href=\"https://www.infoq.com/presentations/Elm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2012 年的演講影片</a>，可以了解他為何創造這門語言，聽聽作者本人親口介紹。</p>\n<p>Elm 是一個強型態的函數式語言，透過編譯，將最終程式碼轉化為 JavaScript，因此執行在任何 Web 平台。主要有以下特點：</p>\n<ul>\n<li>\n<p>No Runtime Exceptions</p>\n<ul>\n<li>在編譯期間，Elm 會利用 Type inference 偵測各種狀態，有任何型別上的錯誤都會被抓出來，更棒的是，Elm 提供的 hint 很人性化，例如：\n<img src=\"/image/elm-error-hint.png\" alt=\"error hint\"></li>\n</ul>\n</li>\n<li>\n<p>Great Performance</p>\n<ul>\n<li>如同 React 一般，Elm 也有自己的 Virtual DOM 實作，根據官網所說，由於 Elm 的所有值都是 immutable，有助於他們能編譯出最佳化的 JavaScript，讓 runtime 變快。\n<img src=\"/image/elm-benchmark.png\" alt=\"benchmark\"> <em>source: <a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-lang.org</a></em></li>\n</ul>\n</li>\n<li>\n<p>Enforced Semantic Versioning</p>\n<ul>\n<li>Elm 強大的 type system 讓他能自動偵測是否有 API 的更動，並根據你 release 時與上一版本的差異，進行 Semantic Versioning，讓你不會不小心因為錯誤的 PATCH release 造成別人的困擾！</li>\n</ul>\n</li>\n<li>\n<p>Small Assets</p>\n<ul>\n<li>Elm 宣稱其 Optimize 的編譯，能產生比 React 16.4 更小的 Assets。<em>source: <a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-lang.org</a></em></li>\n</ul>\n</li>\n<li>\n<p>JavaScript Interop</p>\n<ul>\n<li>如同 React 一樣，你也可以只在一個小小的 div 上掛載 Elm application，藉此來測試 project 中的某一個小部分，採用上可以循序漸進，不會有太大風險，並且由於編譯成 JavaScript，Elm 能方便的與一般的 JavaScript 溝通。（基本上我也是看到這點才有信心 Elm 能拿來製作 Chrome extension 的）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"先偷看一下-elm-的程式碼到底長怎樣\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%81%B7%E7%9C%8B%E4%B8%80%E4%B8%8B-elm-%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%88%B0%E5%BA%95%E9%95%B7%E6%80%8E%E6%A8%A3\" aria-label=\"先偷看一下 elm 的程式碼到底長怎樣 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先偷看一下 Elm 的程式碼到底長怎樣</h2>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">view</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">view</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Html.div</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"Content\"</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Elm!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span></code></pre></div>\n<p>這是一個簡單的 Elm view，第一行是描述這個 View 所接收的參數型別，以及回傳的參數型別，第二行後才是實際的程式碼。</p>\n<p>看起來非常畸形。</p>\n<p>一開始很難理解，沒關係，我寫完這個 extension 以後也還是覺得很難理解。</p>\n<p>畢竟會需要花不少時間習慣連 HTML 都是函數的概念，裡面的 <code class=\"language-text\">HTML.div</code> 就是一個函數，他接受兩個陣列，一個用來定義 div 的 attribute，一個用來描述其 child。在後面的實作範例內，我們會看到更多類似的語法。</p>\n<h2 id=\"elm-基本安裝使用\" style=\"position:relative;\"><a href=\"#elm-%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%9D%E4%BD%BF%E7%94%A8\" aria-label=\"elm 基本安裝使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elm 基本安裝使用</h2>\n<p>Elm 的安裝很簡單，官網提供各平台的 <a href=\"https://guide.elm-lang.org/install.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">installer</a>，安裝完後就能在你的 Terminal 中使用以下幾個指令：</p>\n<p><strong><code class=\"language-text\">elm repl</code></strong> - 顧名思義， Elm 的 repl：</p>\n<p><img src=\"/image/elm-repl.png\" alt=\"elm-repl\"></p>\n<p><strong><code class=\"language-text\">elm reactor</code></strong> - 類似 react 的 create-react-app，會快速幫你建立一個基礎的 Elm Architecture。</p>\n<p><strong><code class=\"language-text\">elm make</code></strong> - elm 的 compile 指令，將你的 Elm code 編譯成 HTML 或是 JavaScript：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">elm <span class=\"token function\">make</span> Main.elm --output<span class=\"token operator\">=</span>main.js</code></pre></div>\n<p><strong><code class=\"language-text\">elm install</code></strong> - 類似 <code class=\"language-text\">npm install</code>，幫你下載所需的套件。所有的 Elm packages 都在 <a href=\"https://package.elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package.elm-lang.org</a> 中。而你專案中 packages 的 dependencies 會在自動紀錄在 <code class=\"language-text\">elm.json</code> 中。</p>\n<h2 id=\"elm-architecture\" style=\"position:relative;\"><a href=\"#elm-architecture\" aria-label=\"elm architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elm Architecture</h2>\n<p>現在的前端開發者對於 Elm 的架構應該都會覺得不陌生，因為就很清楚的分為 Model、View、Update：</p>\n<ul>\n<li><strong>Model</strong> - 你的 application 的 state</li>\n<li><strong>Update</strong> - 更新 state 邏輯的部分</li>\n<li><strong>View</strong> - 綁定 State 更新 HTML</li>\n</ul>\n<p>一個基本的 Elm 程式大概就是包含這三大區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token import-statement\"><span class=\"token keyword\">import</span> Html <span class=\"token keyword\">exposing</span> </span><span class=\"token punctuation\">(</span><span class=\"token operator\">..</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- MODEL</span>\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">-- UPDATE</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Reset</span> <span class=\"token operator\">|</span> <span class=\"token operator\">...</span>\n<span class=\"token hvariable\">update</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span>\n<span class=\"token hvariable\">update</span> <span class=\"token hvariable\">msg</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">case</span> <span class=\"token hvariable\">msg</span> <span class=\"token keyword\">of</span>\n    <span class=\"token constant\">Reset</span> <span class=\"token operator\">-></span> <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token comment\">-- VIEW</span>\n<span class=\"token hvariable\">view</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">view</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<p>在接下來的範例內，也是遵循這樣的方式撰寫。</p>\n<h2 id=\"學習資源\" style=\"position:relative;\"><a href=\"#%E5%AD%B8%E7%BF%92%E8%B3%87%E6%BA%90\" aria-label=\"學習資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>學習資源</h2>\n<p>既然語法這麼困難，要學習的話，勢必要有完善的 Docs 或是範例參考，但可惜的是，雖然 Elm 從 2012 出來到現在也將近七年了，使用人數還是小眾，要找尋範例或是教學都蠻困難的，推薦的方式是先去<a href=\"https://guide.elm-lang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網閱讀 guide line</a>，理解基本概念與最新版本的 API，並大致瀏覽一下語法，接著到 <a href=\"https://elmprogramming.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a> 釐清一下不懂的部分，因為這網站將蠻多觀念以圖像化的方式說明，我覺得會比官方網站的 guide 好懂。</p>\n<p>不過要注意的一點是，<a href=\"https://elmprogramming.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a> 的內容基本上是 Elm 0.18 的版本，並非現在最新的 0.19，所以在語法與一些 core lib 的用法上會不一樣，但觀念的理解還是共通的，所以能交互參照。</p>\n<p>這也是我在實作 Elm 遇到的一個阻礙，網路上大多的教學集中在 2017，當時還是 0.18 版本，因此許多範例現在都沒辦法正常運作，除非你降版。</p>\n<h2 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作！</h2>\n<p>無論如何，頭洗下去了還是得繼續實作。</p>\n<p>有實作過 Chrome extension 的人應該都知道，基本的三大元素就是：<code class=\"language-text\">background.js</code>、<code class=\"language-text\">content.js</code> 與 <code class=\"language-text\">popup.html</code>，其彼此之間環境互相獨立，透過 <code class=\"language-text\">postMessage</code> 來溝通。</p>\n<p>而既然 Elm 能編譯成 JavaScript，我就想我應該可以分別撰寫 Elm application 然後 compile 成 <code class=\"language-text\">background.js</code>，<code class=\"language-text\">content.js</code>，這做法可能會有點奇怪，既然要用 Elm，你又寫 JavaScript？</p>\n<p>但我覺得這樣反而比較能在漸進式的學習 Elm，一些較困難理解的部分就還是交由 JavaScript 處理。</p>\n<p>有了想法後開始搜尋範例，雖然新版的範例不多，但好在還是能從舊版中找到符合我心中所想的範例，只是得花點時間 upgrade 成新版。</p>\n<p><a href=\"https://github.com/danneu/elm-chrome-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-chrome-extension</a> 是我找到最符合我預期的範例。</p>\n<p>而這是我翻新成 0.19 後的版本 <a href=\"https://github.com/ArvinH/elm-chrome-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-chrome-extension 0.19 版</a>。</p>\n<h3 id=\"基本架構\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%A7%8B\" aria-label=\"基本架構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本架構</h3>\n<p><img src=\"/image/elm-ext-structure.png\" alt=\"structure\"></p>\n<p>我們這邊將 <code class=\"language-text\">background.js</code> 與 <code class=\"language-text\">content.js</code> 當作不同的 Elm application 來撰寫，彼此之間再透過 Elm 特殊的 JavaScript Interop 來溝通（後面會講到）。</p>\n<p>由於個別當作一個 application，就用各自的 webpack 來幫忙 compile 跟打包。</p>\n<p><code class=\"language-text\">Model.elm</code> 則是單純用來定義我們整個 Extension 的 <strong>State</strong>。</p>\n<p>最後三個 Elm application 編億完的結果都會放入 <code class=\"language-text\">dist</code> 中，也就是我們最後的成品。</p>\n<p>另外前面沒有提到的一個資料夾 <code class=\"language-text\">elm-stuff</code>，其功用就像 <code class=\"language-text\">node_modules</code> 一樣，當你 <code class=\"language-text\">elm install</code> 完後，Elm 會將 packages 放入其中。</p>\n<p>而 <code class=\"language-text\">elm.json</code> 則是類似 <code class=\"language-text\">package.json</code> 加上 <code class=\"language-text\">package-lock.json</code> 的存在：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"source-directories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"./background\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"./content\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"./common\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"elm-version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.19.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"direct\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"elm/browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/html\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/json\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.1.3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"myrho/elm-round\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.4\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"indirect\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"elm/time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/virtual-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.2\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test-dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"direct\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"indirect\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 Elm 是用 exact versions，可以保證 reliable builds。而 dependencies 中的 direct 就是所有你能直接在 Elm code 中 import 的 package，而那些 package 所各自引用的其他 lib 則會自動被載入到 indirect 中。</p>\n<p>值得注意的是，雖然我們整個 project 用了三個 Elm application，但我們是共用同一個 elm.json 來管理 packages，因此在 <code class=\"language-text\">source-directories</code> 的地方我們羅列三個 source 來源。</p>\n<h3 id=\"專案實作方式概略\" style=\"position:relative;\"><a href=\"#%E5%B0%88%E6%A1%88%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%E6%A6%82%E7%95%A5\" aria-label=\"專案實作方式概略 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>專案實作方式概略</h3>\n<p>這個 Extension 的功能很單純，流程如下：</p>\n<p>使用者 Select 了某段數字後，就會由 <code class=\"language-text\">Content.js</code> 將選取的數字傳遞給 <code class=\"language-text\">Background.js</code> 去處理，而 <code class=\"language-text\">Background.js</code> 就會負責拉取匯率 API，並將使用者選取的數字進行換算，接著將結果更新到 <code class=\"language-text\">Model</code> 上，再經由 <code class=\"language-text\">Model</code> 的變動去觸發 <code class=\"language-text\">Content.js</code> 進行 <code class=\"language-text\">View</code> 的更新。</p>\n<p>我們一步一步來看，主要會 Focus 在如何更新 Model，以及如何讓 Elm(計算邏輯) 與 JavaScript(頁面 Dom 與 Chrome API) 互相溝通。</p>\n<h4 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h4>\n<p>首先，我們先從最簡單的 Model 看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Model</span> <span class=\"token keyword\">exposing</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- This is the model in common among all of our apps</span>\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">result</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">selectedContent</span><span class=\"token operator\">:</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">exrateTWD</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">exrateJPY</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>line 1 就是 Elm 中載入 package 的方式，而在我們的 application 中，Model 內容很單純，主要是記錄型別為 Float 的結果（result)、Int 的 selectContent、Float 的 exrateTWD 與 exrateJPY。</p>\n<p>然後透過 webpack loader 來幫忙編譯：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.elm$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">elm-stuff</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'elm-hot-webpack-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'elm-webpack-loader?verbose=true'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"mainelm-in-backgroundjs\" style=\"position:relative;\"><a href=\"#mainelm-in-backgroundjs\" aria-label=\"mainelm in backgroundjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main.elm in Background.js</h3>\n<p>在 Background 資料夾中，我們有一個 <code class=\"language-text\">index.js</code> 與 <code class=\"language-text\">Main.elm</code>，<code class=\"language-text\">index.js</code> 負責與 <code class=\"language-text\">content.js</code> 溝通和處理 chrome api 相關的 JavaScript；<code class=\"language-text\">Main.elm</code> 則是負責計算匯率以及更新 Model。</p>\n<p>index.js 會與 Main.elm 互相溝通，Webpack 會將兩者打包成 <code class=\"language-text\">background.js</code>。</p>\n<p>但 JavaScript 怎麼與 Elm 溝通呢？容許我從 <a href=\"https://elmprogramming.com/sending-data-to-javascript.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a> 中借張圖：</p>\n<p><img src=\"/image/elm-js-interpo.png\" alt=\"How JS interact with Elm\"></p>\n<p>從這張圖可以很清楚看到 Elm runtime 是怎麼跟外部溝通，又是怎麼與我們程式邏輯互動。</p>\n<p>透過 <code class=\"language-text\">Command</code> 我們可以對 Elm runtime 下達指令去執行 side effect，像是 HTTP request 等等；Elm runtime 則藉由 <code class=\"language-text\">Subscription</code> 與 <code class=\"language-text\">Message</code> 將 side effect 結果傳遞回 application 本身。</p>\n<p>透過 <code class=\"language-text\">Message</code>，Elm runtime 與我們的 application 可以知道要執行甚麼動作，包含 Update State（Model）或是更新 View。</p>\n<p>而若是需要與外部 JavaScript 溝通，則有 <code class=\"language-text\">Ports</code> 提供橋樑，在 JavaScript 中，能使用類似 <code class=\"language-text\">postMessage</code> 的方式傳遞資料。</p>\n<p>來看看 background 中的 Main.elm：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- ... 省略 import packages</span>\n<span class=\"token comment\">-- PORTS FROM JAVASCRIPT</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">selected</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token comment\">-- PORTS TO JAVASCRIPT</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">broadcast</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Cmd</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token comment\">-- MODEL</span>\n<span class=\"token hvariable\">init</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Flags</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">init</span> <span class=\"token hvariable\">flags</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token hvariable\">selectedContent</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">selectedContent</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">exrateTWD</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateTWD</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">exrateJPY</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateJPY</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">result</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">result</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Msg</span>\n    <span class=\"token operator\">=</span> <span class=\"token constant\">NoOp</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">Select</span> <span class=\"token constant\">Model</span>\n<span class=\"token hvariable\">update</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">update</span> <span class=\"token hvariable\">msg</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">msg</span> <span class=\"token keyword\">of</span>\n        <span class=\"token constant\">NoOp</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token constant\">Select</span> <span class=\"token hvariable\">data</span> <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">let</span>\n                <span class=\"token hvariable\">nextModel</span> <span class=\"token operator\">=</span>\n                    <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">toFloat</span> <span class=\"token hvariable\">data</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">selectedContent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">data</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateTWD</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">data</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateJPY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">in</span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">nextModel</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">broadcast</span> <span class=\"token hvariable\">nextModel</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">selected</span> <span class=\"token punctuation\">(</span>\\<span class=\"token hvariable\">newModels</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Select</span> <span class=\"token hvariable\">newModels</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Flags</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token hvariable\">selectedContent</span><span class=\"token operator\">:</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span>\n      <span class=\"token hvariable\">exrateTWD</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span>\n      <span class=\"token hvariable\">exrateJPY</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span>\n      <span class=\"token hvariable\">result</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Program</span> <span class=\"token constant\">Flags</span> <span class=\"token constant\">Model</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Platform.worker</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">init</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">init</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">update</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">update</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">subscriptions</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>background 的 Main.elm 中，主要有幾個區塊：</p>\n<ul>\n<li><code class=\"language-text\">port</code> keyword：定義用來給外部 JavaScript 呼叫的函數，以及 Elm 要傳遞資料給 JavaScript 時呼叫的函數</li>\n<li><code class=\"language-text\">init</code> 函數：我們定義 init 函數，初始化 application 的 Model (State），<code class=\"language-text\">Flags</code> 是 Elm 中特殊的型別，外部 JavaScript 可以透過 Flags 在 Elm 的 init 階段傳遞初始 State 資料。如同上面範例中，init 函數接收一個 <code class=\"language-text\">Flags</code> 參數，並將其 assign 到新的物件當中，並且回傳，而這物件就是（也必須是）Model。</li>\n<li><code class=\"language-text\">subscriptions</code>：當外部 JavaScript 呼叫我們在 port 中定義的函數時，Elm 會透過 subscriptions 來處理回應，基本上都會是呼叫一個函數，而該函數會 Trigger <code class=\"language-text\">update</code>，丟入 一個 Message 去更新 Model，以上面例子來說，JavaScript 會傳進新的 Model，而 Elm subscriptions 將新的 Model 以及我們指定的 Message 傳遞給 <code class=\"language-text\">update</code> 去真正的將 Model 更新。</li>\n<li><code class=\"language-text\">update</code>：update 相對單純一點，接收 Message 與 Model 型別的物件，根據 Message 的內容去判斷要進行什麼更新。在上面例子中，我們接收到 <code class=\"language-text\">Select</code> 這個 message，代表收到 JavaScript 傳來的新 Model（也就是使用者選取的數字），而 Model 中有要轉換的金額，以及台日幣的匯率差，我們在這邊進行主要的邏輯運算，將結果產生成新的 Model，透過呼叫 <code class=\"language-text\">broadcast</code> 這個 定義在 port 中的 Command，將其回傳回 JavaScript。</li>\n<li><code class=\"language-text\">main</code>：是 Main.elm 這個程式的主要進入點，這隻 Elm 程式並沒有參與到 View 的部分，因此我們使用 <code class=\"language-text\">Platform.worker</code> 函數實作，將定義好的 <code class=\"language-text\">init</code>, <code class=\"language-text\">update</code> 與 <code class=\"language-text\">subscriptions</code> 傳入。</li>\n</ul>\n<p>篇幅有限實在無法將每個 API 都詳細介紹，建議參照<a href=\"https://guide.elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網 Guide</a> 了解其詳細內容。</p>\n<h3 id=\"indexjs-in-backgroundjs\" style=\"position:relative;\"><a href=\"#indexjs-in-backgroundjs\" aria-label=\"indexjs in backgroundjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js in Background.js</h3>\n<p>JavaScript 的部分就簡單一些，重點在於初始化 State：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Main.elm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  selectedContent<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  exrateTWD<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  exrateJPY<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> Elm<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  flags<span class=\"token operator\">:</span> currState\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">index.js</code> 我們載入 <code class=\"language-text\">Main.elm</code>，並呼叫其 <code class=\"language-text\">Main.init</code> 函數，傳入 flags 物件來初始化 state。</p>\n<p>接著，subscribe Elm 的 ports <code class=\"language-text\">broadcast</code>，當 Elm 傳遞訊息過來時，我們透過 chrome 的 <code class=\"language-text\">postMessage</code> 傳遞給 <code class=\"language-text\">content.js</code>。（這邊的 port 是 <code class=\"language-text\">chrome.runtime.onConnect</code> 的 port，細節請看 <a href=\"https://github.com/ArvinH/Elm-ChromeExt/blob/master/background/src/index.js#L15-L41\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> ）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  currState <span class=\"token operator\">=</span> state\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> port <span class=\"token keyword\">of</span> listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\napp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>最後這邊我有點偷吃步，由於透過 Elm 發送 HTTP request 後的結果與我目前的 model 之間要如何整合，我在一天的 hackday 中實在沒有研究出來，所以省去那段，讓 fetch 匯率資料的部分由 JS 完成，最後再透過 <code class=\"language-text\">port</code> 的 <code class=\"language-text\">selected</code> 將 API result <code class=\"language-text\">send</code> 給 Elm：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chrome<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>onMessage<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> sender</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'selected'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> selectNum <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>selectedContent<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://tw.rter.info/capi.php'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token constant\">USDJPY</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Exrate<span class=\"token operator\">:</span> ExrateJPY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">USDTWD</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Exrate<span class=\"token operator\">:</span> ExrateTWD <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> myJson\n        app<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> exrateTWD<span class=\"token operator\">:</span> ExrateTWD<span class=\"token punctuation\">,</span> exrateJPY<span class=\"token operator\">:</span> ExrateJPY<span class=\"token punctuation\">,</span> selectedContent<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>selectNum<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"mainelm-in-contentjs\" style=\"position:relative;\"><a href=\"#mainelm-in-contentjs\" aria-label=\"mainelm in contentjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main.elm in Content.js</h3>\n<p>處理好 Background.js，接著就是 Content.js。</p>\n<p>Content 中的 <code class=\"language-text\">Main.elm</code> 主要負責接收到更新的 Model，然後將其更新到 DOM 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- 省略 import packages</span>\n<span class=\"token comment\">-- PORTS FROM JAVASCRIPT</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">onState</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token hvariable\">init</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">init</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Msg</span>\n    <span class=\"token operator\">=</span> <span class=\"token constant\">NoOp</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">NewState</span> <span class=\"token constant\">Model</span>\n<span class=\"token hvariable\">update</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">update</span> <span class=\"token hvariable\">msg</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">msg</span> <span class=\"token keyword\">of</span>\n        <span class=\"token constant\">NoOp</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token constant\">NewState</span> <span class=\"token hvariable\">newModel</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">newModel</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">view</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">view</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Html.div</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"Content\"</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"It's \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token hvariable\">Html.div</span>\n            <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"InnerContent\"</span>\n            <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token hvariable\">Html.div</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>\n                    <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span> <span class=\"token number\">2</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">result</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token hvariable\">Html.div</span>\n                    <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"units\"</span>\n                    <span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">[</span>\n                        <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" TWD\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">onState</span> <span class=\"token constant\">NewState</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Program</span> <span class=\"token constant\">Model</span> <span class=\"token constant\">Model</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Browser.element</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">init</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">init</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">update</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">update</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">view</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">view</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">subscriptions</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>聰明的讀者看到這段 code 應該會發現，這邊的 <code class=\"language-text\">port</code>, <code class=\"language-text\">init</code> 與 <code class=\"language-text\">subscriptions</code> 基本上形式與 Background 的一樣，只是更簡單一點，當 subscription 收到 JavaScript 呼叫的 <code class=\"language-text\">onState</code> 函數時，我們傳遞 <code class=\"language-text\">NewState</code> Message 給 <code class=\"language-text\">update</code>，而 <code class=\"language-text\">update</code> 就只是單純的回傳新的 Model。</p>\n<p>唯一差別在於 <code class=\"language-text\">view</code> 與 <code class=\"language-text\">main</code>。</p>\n<p>在 Elm 中，view 會接受 Model 為參數，並回傳 HTML DOM，在範例中，我們產生了三層的 div，第三層有兩個 div 並行，分別呈現轉換後的匯率數字，以及單位，這邊我還用了一個 elm 的 package 來 <code class=\"language-text\">round</code> 數字到小數點後兩位。</p>\n<p>而由於 Content 的 <code class=\"language-text\">Main.elm</code> 有跟 Browser 互動（產生 HTML），所以需要的不是 <code class=\"language-text\">Platform.worker</code> 而是 <code class=\"language-text\">Browser.element</code>，他會將 View 也綁定進去。（一樣，詳情請參照<a href=\"https://guide.elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網 Guide</a> ）</p>\n<h3 id=\"indexjs-in-contentjs\" style=\"position:relative;\"><a href=\"#indexjs-in-contentjs\" aria-label=\"indexjs in contentjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js in Content.js</h3>\n<p>Content 中的 JavaScript 就更單純了，基本上就是 <code class=\"language-text\">createElement</code> 出一個 div，並且設定 <code class=\"language-text\">mouseup</code> listener，讓使用者選取文字後，能夠 <code class=\"language-text\">sendMessage</code> 給 background.js，並且設定好 Elm DOM 要掛載的 Real Dom 位置與 style (index.css)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> mountNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Main.elm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> app<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 利用 window.getSelection() 抓取使用者選取的數字</span>\n  <span class=\"token keyword\">const</span> selectedObj <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> selectedContent <span class=\"token operator\">=</span> selectedObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token comment\">// 這邊忽略的 code 主要在是：</span>\n  <span class=\"token comment\">// 計算 Elm 產生的 DOM 該插入到頁面中的哪個位置</span>\n  <span class=\"token comment\">// 判斷何時該讓 DOM 消失</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selectedContent <span class=\"token operator\">&amp;&amp;</span> selectedContent<span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chrome<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'selected'</span><span class=\"token punctuation\">,</span> selectedContent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> chrome<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'broadcast'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nport<span class=\"token punctuation\">.</span>onMessage<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app <span class=\"token operator\">=</span> Elm<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node<span class=\"token operator\">:</span> mountNode<span class=\"token punctuation\">,</span>\n      flags<span class=\"token operator\">:</span> state\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  app<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>onState<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">port.onMessage</code> 的 listener 中，我們會監聽到由 Background.js 傳遞來的初始 State，然後才 init Content 這邊的 Elm application，並將 Background.js 傳來的 state 一起傳入，若後續有更新 state，則透過 <code class=\"language-text\">port</code> 的 <code class=\"language-text\">onState</code> 來更新。</p>\n<p>基本上這樣一來，整個 Extension 的工作就完成了，但省略了不少細節，完整程式碼與其他細節只好請大家直接看原始碼會更清楚一點： <a href=\"https://github.com/ArvinH/Elm-ChromeExt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<h3 id=\"如何-debug\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95-debug\" aria-label=\"如何 debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何 Debug</h3>\n<p>在用 Elm 製作 Chrome extension 的過程中，Debug 的方式其實跟一般用 JS 開發一樣，都是透過 inspect 從 browser 中到 <code class=\"language-text\">background.js</code> 與 <code class=\"language-text\">content.js</code> 下中斷點，但是麻煩的是，在這邊的 <code class=\"language-text\">background.js</code> 與 <code class=\"language-text\">content.js</code> 都有一大部分是 Elm compile 出來的 JS，是沒有類似 source map 的東西能讓你直接在 Elm code 內 Debug 的，所以除錯起來真的不是很方便，之後若有研究到方法再來更新。也歡迎大家給予指導！</p>\n<h2 id=\"結論與心得\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96%E8%88%87%E5%BF%83%E5%BE%97\" aria-label=\"結論與心得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論與心得</h2>\n<p>Elm 的確是蠻優雅的語言，但不是能在短時間內完美駕馭的...尤其是 Debug 的難度以及文件範例的相對稀少，都讓人容易退卻，但我還是蠻開心能利用這次機會親手玩玩 Elm，並且製作了一個我用得上的工具，當然還有一些需要改善的部分，但已經堪用了。希望之後還能有時間繼續研究！有興趣的讀者或許能一起加入他們的 <a href=\"https://elm-lang.org/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Community</a> 討論！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://elm-lang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-lang</a></li>\n<li><a href=\"https://elmprogramming.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a></li>\n<li><a href=\"https://github.com/elm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm github</a></li>\n<li><a href=\"https://www.infoq.com/presentations/Elm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elm 作者 ｀2012 年的演講影片</a></li>\n<li><a href=\"https://shenlvmeng.github.io/blog/2017/06/19/elm-introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elm——函数式前端框架介绍</a></li>\n</ol>","id":"d17a9878-80d5-5b4f-aa9b-6db7801abf38","fields":{"slug":"elm-chrome-extension"},"frontmatter":{"date":"2019-04-22T22:47:05.000Z","title":"利用 Elm 製作 Chrome Extension","tags":["Elm","Chrome extension"],"type":"tech","slug":"elm-chrome-extension"},"timeToRead":17},"type":"tech"}},"staticQueryHashes":["2123680655"]}