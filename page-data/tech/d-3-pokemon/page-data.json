{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/d-3-pokemon","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>（最近的辦公室日常...）\n\"欸欸欸！ 有乾爹撒花！！\"\n\"有傑尼龜！\"\n\"Gotcha!! 偉哉乾爹！感恩乾爹！\"</p>\n</blockquote>\n<!-- more -->\n<p>自從 Pokemon Go 在台灣可以玩後，勾起了我許多兒時回憶，因此除了跟著大家一起抓神奇寶貝以外（對我就是不想講寶可夢啊啊啊），我也稍微去追了一下最新版的神奇寶貝動畫，似乎是在打什麼卡洛斯聯盟，也出現了好奇怪的 Mega 進化，會讓神奇寶貝在戰鬥中轉屬性...</p>\n<p>咳咳，等等，再講下去這整篇都是神奇寶貝了...</p>\n<p>總之，看到會轉屬性這件事情就讓我想到，我小時候從來都沒有認真研究過哪種屬性剋哪種屬性，只知道基本的水剋火之類的，於是乎決定來好好研究一下，順便練習已經出來一陣子的 D3 v4，看看差異性在哪。</p>\n<p>幸運的是，當我在搜尋 Pokemon 的 API 時，發現 <a href=\"http://filipekiss.github.io/pokemon-type-chart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://filipekiss.github.io/pokemon-type-chart/</a> 這個人已經把我想做的做完了 XD 也做得不錯。不過是兩三年前的專案，用的是 D3 v3。雖然點子已經被做完了，但臨摹也是一種學習，所以我們就來把它 Migrate 到 D3 v4，順便看看有哪些值得注意的地方吧！</p>\n<p>想直接看 code 的在這邊... <a href=\"http://bl.ocks.org/arvinh/b30ed888914a2794830ceb023c911a5b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span style=\"color: #c40522;\">成果 與 程式碼</span></a></p>\n<h2 id=\"介紹\" style=\"position:relative;\"><a href=\"#%E4%BB%8B%E7%B4%B9\" aria-label=\"介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>介紹</h2>\n<img src=\"/image/pokemontype.png\" alt=\"pokemon type\" style=\"width: 500px;\"/>\n<p>這張圖乍看之下我原本以為是修改自 Chord Diagram，但其實是來自於 Cluster。想想也對，屬性間的關係的確類似於階層樹狀，也不需要有比例分佈對應。\n( 從程式碼看來，原作者應該是修改自 <a href=\"https://bl.ocks.org/mbostock/7607999\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bl.ocks.org/mbostock/7607999</a> )</p>\n<p>使用方法很簡單，只要點擊某個屬性，就會列出該屬性對哪些屬性較為強勢 (Strong)、弱勢 (Weak) 或是 免疫 (Immune)，同時點擊兩種屬性的話，就會秀出擁有雙重屬性的結果為何。</p>\n<h2 id=\"解析\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%9E%90\" aria-label=\"解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析</h2>\n<p>由於 D3 v4 的變動幅度很大，為了模組化，將很多 packages 都拆出來，替代以往使用 namespace 的方式，因此最單純的 Migration 方式就是直接重刻並設法 re-use 原來的 code。</p>\n<p>首先，基本的 <code class=\"language-text\">index.html</code> 內定義好圖要畫在哪裡，並加上一個 reset button 來還原圖表狀態：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>typeChart<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>graph<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button reset<span class=\"token punctuation\">\"</span></span><span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>reset<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接著，我們需要先定義 <code class=\"language-text\">layout</code>，這邊使用 Cluster Layout，在原本的 D3 v3 版本中，使用的方式為：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsv3.js\"><pre class=\"language-jsv3.js\"><code class=\"language-jsv3.js\">  var diameter = 750,\n      radius = diameter / 2,\n      innerRadius = radius - 120;\n  var cluster = d3.layout.cluster()\n      .size([360, innerRadius])\n      .sort(null)\n      .value(function(d) { return d.size; });</code></pre></div>\n<p>然而，v4 模組化後，原本的 namespace 都不需要了，因為實際上是個別存放在一個 lib 底下，以 Layout 來說 會放在 <code class=\"language-text\">d3-hierarchy</code>，而使用方式則變成直接呼叫 <code class=\"language-text\">d3.cluster()</code> 即可，原有的 <code class=\"language-text\">sort()</code>, <code class=\"language-text\">value()</code>等 method 也都移到 <code class=\"language-text\">node</code> 這個層級底下了（後面會在講到 node）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsv4.js\"><pre class=\"language-jsv4.js\"><code class=\"language-jsv4.js\">  // 定義圖形的基本設定值\n  var diameter = 750,\n      radius = diameter / 2,\n      innerRadius = radius - 120;\n\n  var cluster = d3.cluster()\n      .size([360, innerRadius]);</code></pre></div>\n<p>寫好圖形的基本設定值後，先把我們已知的 svg 放上去吧！\n我們先把剛剛定義好的 <code class=\"language-text\">diameter</code>, <code class=\"language-text\">radius</code> 的值 append 到最外層的 graph div 上，\n接著先把待會會用到的四種 svg group 先記錄起來，分別有 immune (免疫)、weak (弱勢)、strong (強勢)、node (屬性)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsweaknesses-graph.js\"><pre class=\"language-jsweaknesses-graph.js\"><code class=\"language-jsweaknesses-graph.js\">var svg = d3.select(&quot;#typeChart &gt; #graph&quot;).append(&quot;svg&quot;)\n    .attr(&quot;width&quot;, diameter)\n    .attr(&quot;height&quot;, diameter)\n    .append(&quot;g&quot;)\n    .attr(&quot;transform&quot;, &quot;translate(&quot; + radius + &quot;,&quot; + radius + &quot;)&quot;);\n\nvar immune = svg.append(&quot;g&quot;).selectAll(&quot;.immune&quot;),\n    weak = svg.append(&quot;g&quot;).selectAll(&quot;.weak&quot;),\n    strong = svg.append(&quot;g&quot;).selectAll(&quot;.strong&quot;),\n    node = svg.append(&quot;g&quot;).selectAll(&quot;.node&quot;);</code></pre></div>\n<p>我蠻喜歡這樣的寫法，將與資料繪製較無關（相對較固定）的程式碼先寫好，接著再利用 <code class=\"language-text\">d3.json</code> 將資料讀入後去繪製。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdraw-graph\"><pre class=\"language-jsdraw-graph\"><code class=\"language-jsdraw-graph\">d3.json(&quot;types.json&quot;, function(error, classes) {\n    var nodes = cluster(d3.hierarchy(packageHierarchy(classes))).children;\n    var immunes = typeImmune(nodes);\n    var strengths = typeStrong(nodes);\n    var weaknesses = typeWeak(nodes);\n\n    // draw path\n\n    ......\n    ....\n    ..\n\n    //Make the immune links\n    function typeImmune(nodes) {\n    var map = {},\n        immunes = [];\n\n    nodes.forEach(function(d) {\n        map[d.data.name] = d;\n    });\n\n    nodes.forEach(function(d) {\n        if (d.data.immunes) d.data.immunes.forEach(function(i) {\n            immunes.push({\n                source: map[d.data.name],\n                target: map[i]\n            });\n        });\n    });\n\n        return immunes;\n    }\n    // 以下先省略\n});</code></pre></div>\n<p>解釋一下上面這段程式碼，我們的資料存放在 types.json 中，利用 d3.json 將資料讀出後，\n會先做兩件事情：</p>\n<ol>\n<li>將資料轉化成 hierarchy 格式，並初始化 cluster</li>\n<li>將產生的 nodes 轉化並分類成 immunes, strengths, weaknesses。</li>\n</ol>\n<p>這邊的 <code class=\"language-text\">packageHierarchy</code> 主要是將 raw data 整理成有父子關係的 structure，並且給予每筆資料自己的 <code class=\"language-text\">key</code> 與 <code class=\"language-text\">name</code>。（詳細程式碼可以到最後的連結看，這部分比較跟資料格式相關，就不放在這裡佔版面了）</p>\n<p>在原本 v3 的做法裡，如果我們要把資料轉化成 hierarchy 的格式，可以直接利用 <code class=\"language-text\">cluster.nodes()</code> ，即可一次初始化 cluster 並且得到擁有 x, y 值 的 nodes，但在 v4 中，我們必須先利用 <code class=\"language-text\">d3.hierarchy()</code> 將資料轉化成 hierarchy 格式，建立好父子關係與每個 node 的深度，接著才能丟入 <code class=\"language-text\">cluster</code> 中初始，其回傳值才會是擁有對應 cluster 內 x, y 值的 nodes。</p>\n<p><code class=\"language-text\">window.nodes = cluster(d3.hierarchy(packageHierarchy(classes))).children;</code>\n(這邊取 children 也只是資料格式的關係)</p>\n<p>由於繪製 <code class=\"language-text\">svg path</code> 需要給訂 data 的 source 與 target，因此這邊利用 <code class=\"language-text\">typeImmune</code>, <code class=\"language-text\">typeStrong</code>, <code class=\"language-text\">typeWeak</code> 來作轉換，也將資料分為這三種關係的 path 來繪製。</p>\n<p>接著，轉換好後就能根據 node 的 <code class=\"language-text\">source</code> 與 <code class=\"language-text\">target</code> 繪製 path。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdraw-path\"><pre class=\"language-jsdraw-path\"><code class=\"language-jsdraw-path\">// 這邊只列出一種\nwindow.immune = immune\n        .data(immunes.map(function(node){\n            return node.source.path(node.target);\n        }))\n        .enter().append(&quot;path&quot;)\n        .each(function(d) {\n            d.source = d[0], d.target = d[d.length - 1];\n        })\n        .attr(&quot;class&quot;, &quot;immune&quot;)\n        .attr(&quot;d&quot;, line);</code></pre></div>\n<p>以往在 v3，我們可以事先定義 <code class=\"language-text\">var bundle = d3.layout.bundle();</code>，然後在上面這段程式碼中的 <code class=\"language-text\">data()</code> 中呼叫 <code class=\"language-text\">bundle(immunes)</code>，他就會幫我們把 source 跟 target 做連接。</p>\n<p>但是在 v4 裡，<code class=\"language-text\">bundle</code> 被 <code class=\"language-text\">node.path()</code> 給取代了。</p>\n<p>注意喔！是 <code class=\"language-text\">node.path()</code>，層級是在 node，因此我們要從剛才分類好的 immunes 中將 node 一個一個抓出來呼叫。</p>\n<p>另外在這邊我們有用一個 <code class=\"language-text\">each()</code> 來將每筆 node 資料都加上 <code class=\"language-text\">d.source = d[0], d.target = d[d.length - 1];</code>\n原因是為了之後我們點擊每個類別的時候，要利用這個來找出對應的點來上色。</p>\n<div class=\"gatsby-highlight\" data-language=\"jscolorpath.js\"><pre class=\"language-jscolorpath.js\"><code class=\"language-jscolorpath.js\">window.colorPath = function(d, l, type) {\n      var type = type || &#39;strong&#39;;\n      if (type == &#39;strong&#39;) {\n        if (l.target === d) return l.source.target = true;\n      }\n      if (type == &#39;weak&#39;) {\n        for (type in d) {\n          if(type !== &quot;size&quot;) {\n            if (l.target === d[type]) return l.source.target = true;\n          }\n        }\n      }\n    }</code></pre></div>\n<p>到目前為止，已經把原本 v3 的 cluster layout 轉移到 v4 了，其餘繪製部分就與版本沒有什麼關聯性，需要注意的是資料格式的變動，像是在原本作者的程式碼內，點擊類別的 <code class=\"language-text\">activate()</code> 函數中，根據 <code class=\"language-text\">d.name</code> 來判斷位置的部分，由於資料格式的變動，要改為 <code class=\"language-text\">d.data.name</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsactivate(d).js\"><pre class=\"language-jsactivate(d).js\"><code class=\"language-jsactivate(d).js\">    window.node\n        .classed(&quot;node--active&quot;, function(target) {\n            return (target === d) || this.classList.contains(&quot;node--active&quot;);\n        })\n        .classed(&quot;node--target&quot;, function(n) {\n            return n.target;\n        })\n        .classed(&quot;immune-node&quot;, function(target, l) {\n            return (this.classList.contains(&#39;immune-node&#39;) || target.data.immunes.indexOf(d.data.name) != -1);\n        })\n        ....\n        ...\n        ..</code></pre></div>\n<p>其餘繪製部分，包含點擊後的上色邏輯（ activate() 函數中），有興趣的讀者就直接看 code 吧，相信會更清楚！</p>\n<p><a href=\"http://bl.ocks.org/arvinh/b30ed888914a2794830ceb023c911a5b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><span style=\"font-size: 20px; color: #c40522;\">成果 與 程式碼</span></a></p>\n<p>不過實際上我並沒有完整 Migration 完成，在原本 v3 的 <code class=\"language-text\">d3.svg.line.radial()</code> 這裡，v4 的寫法應該是 <code class=\"language-text\">d3.radialLine()</code>，並搭配上 <code class=\"language-text\">curve()</code> 函數，只是我並沒有嘗試成功，還請高手指教！</p>\n<p>最後，送給大家一隻純 CSS 卡比獸，祝大家早日成為神奇寶貝大師！\n（好啦其實不像XD...畢竟我對 css 的掌控度大概跟我對腰間肥肉的掌控度一樣低落...）</p>\n<p data-height=\"448\" data-theme-id=\"dark\" data-slug-hash=\"dXLvVm\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/dXLvVm/\">Snorlax-pokemon</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","fields":{"slug":"d-3-pokemon"},"frontmatter":{"title":"用 D3.js v4 看 Pokemon 屬性表","date":"08-19-2016","tags":["d3","pokemon","d3v4","data visualization"]},"timeToRead":7}},"pageContext":{"slug":"d-3-pokemon","prev":{"excerpt":"如果程式碼也會自己出現就好了...","html":"<blockquote>\n<p>如果程式碼也會自己出現就好了...</p>\n</blockquote>\n<!-- more -->\n<p>今天來點輕鬆的。</p>\n<p>前陣子看了某個面試者的履歷網站，封面有個打字的動畫效果，雖然以前也很常看到，但沒有實際用 CSS 來實作過，只有在 CSS SECRETS 上看過做法，趁著心血來潮就來玩玩吧！</p>\n<h2 id=\"主要概念\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5\" aria-label=\"主要概念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主要概念</h2>\n<p>要有打字效果的動畫，主要就是必須讓文字一個一個出現，因此我們可以利用 <code class=\"language-text\">overflow</code> 與調整包含文字的元素寬度，來達到這個效果。</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;h1&gt; 我要成為神奇寶貝大師！ &lt;/h1&gt;</code></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"csstyping.css\"><pre class=\"language-csstyping.css\"><code class=\"language-csstyping.css\">@keyframes typing {\n  from { width: 0 }\n}\n\nh1 {\n  width: 11em;\n  overflow: hidden;\n  animation: typing 6s;\n}</code></pre></div>\n<p>這邊的文字寬度，要去算你包含文字的那個元素所設定的 <code class=\"language-text\">font-size</code>，並乘上你的字數。</p>\n<p>出來的結果如下：</p>\n<p><img src=\"/image/typing1.gif\" alt=\"Typing1\" title=\"Typing1\"></p>\n<p>搞啥啊！這什麼鬼 XD</p>\n<p>兩個問題：</p>\n<ol>\n<li>寬度會影響行數，就算 <code class=\"language-text\">overflow: hidden</code>，文字會折行這件事情並不會消失。</li>\n<li>文字並沒有真正的逐格出現</li>\n</ol>\n<h2 id=\"solution\" style=\"position:relative;\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p>第一個問題好解決，我們可以加上 <code class=\"language-text\">white-space: nowrap</code>。\n第二個問題就必須借助 CSS 中 animation 的一個屬性值：<code class=\"language-text\">steps()</code></p>\n<p>通常我們在用 CSS 的 animatin 時，多數會使用 linear, ease-in-out, cubic-bezier 等等的 Speed Curve，這些依照貝茲曲線為主的函式會在關鍵影格中間插入<strong>過渡動畫</strong>，在一般的使用場景中非常適用，畢竟沒人想要讓動畫看起來卡卡的。</p>\n<p>但是在打字動畫中，我們就是需要讓動畫看起來卡卡的 XD</p>\n<p>所以我們可以利用這個較少人討論的 <code class=\"language-text\">steps()</code> 函式來實作。</p>\n<p><code class=\"language-text\">steps()</code> 會根據你輸入的步驟數，用影格切割動畫，不補入過渡動畫。</p>\n<p>我們調整剛剛的 CSS 如下：</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"csstyping.css\"><pre class=\"language-csstyping.css\"><code class=\"language-csstyping.css\">@keyframes typing {\n  from { width: 0 }\n}\n\nh1 {\n  width: 11em;\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(11)\n}</code></pre></div>\n<p><img src=\"/image/typing2.gif\" alt=\"沒有換行，且一格一格出現文字\" title=\"沒有換行，且一格一格出現文字\"></p>\n<h2 id=\"enhancement\" style=\"position:relative;\"><a href=\"#enhancement\" aria-label=\"enhancement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enhancement</h2>\n<p>但既然是打字，沒有游標怎麼可以。來加強一下。</p>\n<p>閃爍游標的做法很多種，這邊我們採取最簡單的方式，由於我們是利用<strong>調整</strong>元素寬度去控制文字出現，因此可以直接加入一個右邊框，並調整其 transparent。</p>\n<div class=\"gatsby-highlight\" data-language=\"csstyping.css\"><pre class=\"language-csstyping.css\"><code class=\"language-csstyping.css\">@keyframes caret {\n  50% { border-color: transparent; }\n}\n\nh1 {\n  width: 11em;\n  border-right: .05em solid;\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(11),\n    caret 1s steps(1) infinite;\n}</code></pre></div>\n<p><img src=\"/image/typing3.gif\" alt=\"加入閃爍游標\" title=\"最終結果\"></p>\n<p>短短五分鐘，純 CSS 的打字效果動畫就出來囉！</p>\n<p>Live 範例：</p>\n<div class=\"inputField\">\n  <h3>皮卡丘！就決定是你了！</h3>\n</div>\n<style>\n@keyframes caret {\n  50% { border-color: transparent; }\n}\n@keyframes typing {\n  from { width: 0 }\n}\n<p>.inputField {\npadding: 20px;\nborder: 1px solid black;\n}</p>\n<p>h3 {\nwidth: 11em;\nborder-right: .05em solid;\noverflow: hidden;\nwhite-space: nowrap;\nanimation: typing 3s steps(11) infinite,\ncaret 1s steps(1) infinite;\n}\n</style></p>","id":"90b15bf1-d55e-5041-a899-15868a4dad47","fields":{"slug":"css-typing-animation"},"frontmatter":{"date":"2016-08-06T11:47:27.000Z","title":"快速實作 CSS3 打字動畫","tags":["css","javascript"],"type":"tech","slug":"css-typing-animation"},"timeToRead":2},"next":{"excerpt":"好歌分享：San Cisco - Messages","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/yO5fOGKU-kM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - Messages</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/yO5fOGKU-kM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<!-- 流程介紹 -->\n<p>先前介紹過 Progressive Web App，我們利用 vanilla js 與 css 刻出一個支援 PWA 的天氣 web app，\n但現在應該很少人這麼有風格的用純 JS 寫 web app，世俗如我還是會想用 React 來支援前端框架，但 React 的 configuration 就已經頗複雜，要再加上 service-worker 的設定，想想就覺得累。</p>\n<p>好在 facebook 先前推出 <a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-app</a> 這個工具，幫你預先設定好一些 config，並且隱藏起來（還是想要自己設定的話，可以透過 <code class=\"language-text\">npm run eject</code> 這個指令），如果是中小型專案應該很適合。</p>\n<p>因此，問題就剩下加上 service worker 這段了。</p>\n<p>幸運的是，Google chrome 的開發成員有一個 open source 的 repository - <a href=\"https://github.com/jeffposnick/create-react-pwa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-pwa</a>，是基於 create-react-app 的架構去支援 PWA。</p>\n<p>不過實際上我使用起來還是有些地方需要微調與注意的，所以今天就是來帶著大家一步一步把你從 <code class=\"language-text\">create-react-app</code> 中所創建的 React Web App 加入 PWA 的支援。</p>\n<h2 id=\"add-pwa-support-in-your-create-react-app\" style=\"position:relative;\"><a href=\"#add-pwa-support-in-your-create-react-app\" aria-label=\"add pwa support in your create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add PWA support in your create-react-app</h2>\n<!-- 講解如何加入 pwa support -->\n<p>以防大家沒用過 <code class=\"language-text\">create-react-app</code>，這邊稍稍介紹一下。首先你要先透過 <code class=\"language-text\">create-react-app</code> 來產生你的 web app:</p>\n<p><code class=\"language-text\">npm install -g create-react-app</code></p>\n<p><code class=\"language-text\">create-react-app react-pwa-boilerplate</code></p>\n<p>接著就會產生以下結構的資料夾：</p>\n<img src=\"/image/create-react-app-structure.png\" alt=\"create-react-app-structure\" style=\"width: 200px;\">\n<p>當然 <code class=\"language-text\">src</code> 內的結構你可以依照你自己需求調整。</p>\n<p>接著 <code class=\"language-text\">npm start</code> 即可在 <code class=\"language-text\">localhost:3000</code> 看到頁面了。</p>\n<p>而在有了一個 react web app 的雛形後，我們就可以來加上 PWA 的支援了！</p>\n<h3 id=\"step-i---sw-precache\" style=\"position:relative;\"><a href=\"#step-i---sw-precache\" aria-label=\"step i   sw precache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step I - sw-precache</h3>\n<p>要能夠擁有 <code class=\"language-text\">Progressive Web App</code> 的能力，需要 <code class=\"language-text\">Service Worker</code> 的幫助，除了自己撰寫 service-worker 以外，我們可以利用 Google 出的 <a href=\"https://github.com/GoogleChrome/sw-precache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">sw-precache</code> </a>來幫我們產生需要的 <code class=\"language-text\">service-worker.js</code>。</p>\n<p>在 <code class=\"language-text\">package.json</code> 中的 <code class=\"language-text\">devDependencies</code> 加入 <code class=\"language-text\">sw-precache</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspackage.json\"><pre class=\"language-jspackage.json\"><code class=\"language-jspackage.json\">  &quot;devDependencies&quot;: {\n    &quot;react-scripts&quot;: &quot;0.4.1&quot;,\n    &quot;sw-precache&quot;: &quot;^4.0.0&quot;\n  },</code></pre></div>\n<p>or <code class=\"language-text\">npm install sw-precache --save</code></p>\n<p>接著，在 <code class=\"language-text\">package.json</code> 中的 <code class=\"language-text\">script</code> 內，我們要修改一下 <code class=\"language-text\">build</code> 的指令：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspackage.json\"><pre class=\"language-jspackage.json\"><code class=\"language-jspackage.json\">&quot;scripts&quot;: {\n  &quot;build&quot;: &quot;react-scripts build &amp;&amp; cp manifest.json favicon.ico build/ &amp;&amp; sw-precache --navigate-fallback=&#39;index.html&#39; --root=&#39;build/&#39; --static-file-globs=&#39;build/**/!(*map*)&#39;&quot;,\n}</code></pre></div>\n<p>這個指令做了幾件事情：</p>\n<ol>\n<li><code class=\"language-text\">react-scripts build</code> 是原本 <code class=\"language-text\">create-react-app</code> 的指令，將相關的 react component 等等透過 webpack 幫你編譯轉譯後放到 <code class=\"language-text\">build</code> folder 底下。</li>\n<li><code class=\"language-text\">cp manifest.json favicon.ico build/</code> ： manifest.json 與 favicon.ico 都是 PWA 需要的東西，待會會在說明內容。因為原本的 react-scripts build 中並不會產生這樣的東西，自然也不會幫你 build 進去，但我們需要讓 <code class=\"language-text\">service worker</code> 能儲存它們，所以這邊就手動把他放入 <code class=\"language-text\">build</code> 底下。</li>\n<li><code class=\"language-text\">sw-precache --navigate-fallback='index.html' --root='build/' --static-file-globs='build/**/!(*map*)'</code> ：</li>\n</ol>\n<p>這個指令透過 sw-precache，產生一個 service-worker.js 的檔案，他會自動幫你把 build folder 底下的 static 檔案都暫存起來！</p>\n<p><code class=\"language-text\">--navigate-fallback='index.html'</code> 這個 flag 是為了讓你使用 React Router 而放入的。如果你是根據 facebooke 的 <a href=\"https://github.com/facebookincubator/create-react-app/blob/master/template/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">doc</a> 加入 react-router，並且 deploy 到 github page，那你必須加入這個 flag，這樣一來，當 user 在切換動作而改變 url 時，任何的 random url 都會 fallback 到 index.html，其實也就是你 single page 的那個 entry 點，<code class=\"language-text\">service-worker</code> 才能夠找得到 cache。</p>\n<p><code class=\"language-text\">--static-file-globs</code>：這個 flag 讓 sw-precache 存 source map 外的所有 static files。</p>\n<h3 id=\"step-ii---manifestjson\" style=\"position:relative;\"><a href=\"#step-ii---manifestjson\" aria-label=\"step ii   manifestjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step II - manifest.json</h3>\n<p>再來是 PWA 中很重要的 manifest.json，能不能順利在 mobile 上 Add to homescreen 就要靠這份檔案：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmanifest.json\"><pre class=\"language-jsmanifest.json\"><code class=\"language-jsmanifest.json\">{\n    &quot;short_name&quot;: &quot;react-pwa-boilerplate&quot;,\n    &quot;name&quot;: &quot;react-pwa-boilerplate&quot;,\n    &quot;icons&quot;: [\n        {\n            &quot;src&quot;: &quot;favicon.ico&quot;,\n            &quot;sizes&quot;: &quot;144x144&quot;,\n            &quot;type&quot;: &quot;image/png&quot;\n        }\n    ],\n    &quot;start_url&quot;: &quot;./&quot;,\n    &quot;display&quot;: &quot;standalone&quot;\n}</code></pre></div>\n<p>要注意的是，這邊的 icons，size 一定要給正確的值，否則會造成 manifest 的解析錯誤，另外，如果要能讓 iOS 內的 safari 也能夠跑，需要有額外的設定，待會還會提及，也可以先參考之前的 <a href=\"blog.arvinh.info/2016/07/18/progressive-web-app/\">文章</a></p>\n<h3 id=\"step-iii---indexhtml\" style=\"position:relative;\"><a href=\"#step-iii---indexhtml\" aria-label=\"step iii   indexhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step III - index.html</h3>\n<p>上述設定都做完後，要將 <code class=\"language-text\">manifest.json</code> 放入 <code class=\"language-text\">index.html</code> 內，並註冊 <code class=\"language-text\">service-worker.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n    &lt;link rel=&quot;shortcut icon&quot; href=&quot;./src/favicon.ico&quot;&gt;\n    &lt;!-- manifest 加入這邊～ --&gt;\n    &lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;\n    &lt;title&gt;React App&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n    &lt;!-- service worker 在這邊註冊~ --&gt;\n    &lt;script&gt;\n        if (&#39;serviceWorker&#39; in navigator) {\n            navigator.serviceWorker.register(&#39;service-worker.js&#39;).catch(function(ex) {\n                console.warn(ex);\n                console.warn(&#39;(This warning can be safely ignored outside of the production build.)&#39;);\n            });\n        }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<h3 id=\"step-iv---deploy-to-github-page\" style=\"position:relative;\"><a href=\"#step-iv---deploy-to-github-page\" aria-label=\"step iv   deploy to github page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step IV - Deploy to github page</h3>\n<p>搭配 github page 可以快速將你的 web app 部署上去，<code class=\"language-text\">create-react-app</code> 在你執行完 build 以後，提供了 deploy to github 的指令，我們可以把它先加入 package.json 當中。另外也一並加入 <code class=\"language-text\">homepage</code> 的欄位。</p>\n<div class=\"gatsby-highlight\" data-language=\"jspackage.json\"><pre class=\"language-jspackage.json\"><code class=\"language-jspackage.json\">&quot;scripts&quot;: {\n    &quot;deploy&quot;: &quot;git commit -am \\&quot;Save local changes\\&quot;; git checkout -B gh-pages; git add -f build; git commit -am \\&quot;Rebuild website\\&quot;; git filter-branch -f --prune-empty --subdirectory-filter build; git push -f origin gh-pages; git checkout -&quot;,\n    &quot;start&quot;: &quot;react-scripts start&quot;,\n    &quot;build&quot;: &quot;react-scripts build &amp;&amp; cp manifest.json favicon.ico build/ &amp;&amp; sw-precache --navigate-fallback=&#39;index.html&#39; --root=&#39;build/&#39; --static-file-globs=&#39;build/**/!(*map*)&#39;&quot;,\n    &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,\n    &quot;eject&quot;: &quot;react-scripts eject&quot;\n  },\n  &quot;homepage&quot;: &quot;https://blog.arvinh.info/react-pwa-boilerplate&quot;</code></pre></div>\n<h3 id=\"step-v---build--deploy--run-and--debug\" style=\"position:relative;\"><a href=\"#step-v---build--deploy--run-and--debug\" aria-label=\"step v   build  deploy  run and  debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step V - build &#x26; deploy &#x26; run and ... debug?!</h3>\n<p>如果你一步一步跟著做到這裡，理論上就可以 <code class=\"language-text\">npm run build</code> 來 build 看看，接著再 <code class=\"language-text\">npm run deploy</code> 來部署到 github page 上。</p>\n<p>不過當你執行完，console 也沒有噴任何 error，將你的 web app 用手機開啟並加入主畫面後，重新開啟還是一樣進入瀏覽器的畫面？！</p>\n<h4 id=\"manifest-path-error\" style=\"position:relative;\"><a href=\"#manifest-path-error\" aria-label=\"manifest path error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest path error</h4>\n<p>仔細檢查一下瀏覽器 error 會發現在我們 build 出來的 index.html 內，manifest.json 的路徑被 parse 錯誤了！</p>\n<p><img src=\"/image/manifestError.png\" alt=\"manifest error\"></p>\n<p>這其實是因為目前 <code class=\"language-text\">create-react-app</code> 內部的 webpack loader 的 issue，在這個 <a href=\"https://github.com/jeffposnick/create-react-pwa/issues/3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">issue</a> 裡面有提到，目前我的解法是：</p>\n<ol>\n<li>將一開始的 index.html 修改為 <code class=\"language-text\">&lt;link rel=\"manifest\" href=\"/manifest.json\"></code></li>\n<li>build 完以後，到 build/index.html 內將其修正為 <code class=\"language-text\">&lt;link rel=\"manifest\" href=\"./manifest.json\"></code></li>\n</ol>\n<p>除了上面這個錯誤以外，以上步驟還少了一些東西。</p>\n<h4 id=\"ios-support\" style=\"position:relative;\"><a href=\"#ios-support\" aria-label=\"ios support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iOS support</h4>\n<p>如果你想要你的 web app 能夠在 iOS 上的 safari 運作，在 index.html 中還得要加入以下幾行：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;!-- Add to home screen for Safari on iOS --&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;\n    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;React-PWA&quot;&gt;\n    &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;./src/images/favicon-144x144.png&quot;&gt;</code></pre></div>\n<p>其中的 icon 路徑記得要填寫正確，也一樣要確認好 image 的 size。</p>\n<h4 id=\"cache-polyfill\" style=\"position:relative;\"><a href=\"#cache-polyfill\" aria-label=\"cache polyfill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache polyfill</h4>\n<p>現在 service worker 的支援度還很低，有些 polyfill 可能需要加一下，但我還不確定到底需要哪些...</p>\n<p>這個 Cache polyfill 用來增加 Cache api 的支援：</p>\n<p><a href=\"https://github.com/dominiccooney/cache-polyfill\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/dominiccooney/cache-polyfill</a></p>\n<p>修改你 pacakage.json 中的 build script，加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jspacakage.json\"><pre class=\"language-jspacakage.json\"><code class=\"language-jspacakage.json\">&quot;build&quot;: &quot;react-scripts build &amp;&amp; cp manifest.json cache-polyfill.js favicon.ico build/ &amp;&amp; sw-precache --navigate-fallback=&#39;index.html&#39; --root=&#39;build/&#39; --static-file-globs=&#39;build/**/!(*map*)&#39;&quot;,</code></pre></div>\n<p>並在你 build folder 內的 service-worker.js 內加上：</p>\n<p><code class=\"language-text\">importScripts('cache-polyfill.js');</code></p>\n<h4 id=\"run\" style=\"position:relative;\"><a href=\"#run\" aria-label=\"run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run</h4>\n<p>修正完上述錯誤後，執行 <code class=\"language-text\">npm run deploy</code>，應該就會自動幫你把 build folder 底下的內容部署到 gh-pages 這個 branch 上，你就能在 <a href=\"https://%5Byour_github_acount%5D.github.io/%5Bproject_name%5D/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://[your_github_acount].github.io/[project_name]/</a> 看到你的 web app。</p>\n<p>試著加入主畫面看看，如果沒問題的話，當你再次從主畫面點選 icon 開啟時，應該就可以看到你的網站像 app 一般的呈現在手機上了！</p>\n<p>你可以先從 chrome devtool 確認 service worker 的運作情況，打開在 devtool 中的 <strong>Application tab</strong> (以前叫做 resources tab)</p>\n<p>online:\n<img src=\"/image/pwa-network.png\" alt=\"pwa-network\"></p>\n<p>offline:\n<img src=\"/image/pwa-nonetwork.png\" alt=\"pwa-nonetwork\"></p>\n<p>可以看到 resource 在 offline 時是從 service worker 來。</p>\n<p>手機上的狀況像是:</p>\n<img src=\"/image/pwa-sample.gif\" alt=\"pwa-sample\" style=\"width: 200px;\">\n<img src=\"/image/pwa-sample2.gif\" alt=\"pwa-sample2\" style=\"width: 200px;\">\n<h3 id=\"補充說明\" style=\"position:relative;\"><a href=\"#%E8%A3%9C%E5%85%85%E8%AA%AA%E6%98%8E\" aria-label=\"補充說明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>補充說明</h3>\n<p>這篇文章講述到的 PWA support 實際上只能讓你的 web app 能跳脫瀏覽器，運作起來像個 Native App，但是並沒有考量其他實作 PWA 時需要注意的細節，像是 PWA 內的 App shell 等等。</p>\n<p>另外，你的 web app 一定不可能只有 static files，勢必會需要有跟 API 溝通的部分，這邊就需要額外使用 <a href=\"https://github.com/GoogleChrome/sw-toolbox\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sw-toolbox</a> 來負責 runtime caching strategies，你也可以透過 sw-precache 的設定檔來處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsprecache-config.json\"><pre class=\"language-jsprecache-config.json\"><code class=\"language-jsprecache-config.json\">{\ndynamicUrlToDependencies: {\n  dynamic/page1: [\n    &quot;app/views/layout.jade&quot;,\n    &quot;app/views/page1.jade&quot;\n  ],\n  dynamic/page2: [\n    &quot;app/views/layout.jade&quot;,\n    &quot;app/views/page2.jade&quot;\n  ]\n  },\n  staticFileGlobs: [\n    &quot;app/css/**.css&quot;,\n    &quot;app/**.html&quot;,\n    &quot;app/images/**.*&quot;,\n    &quot;app/js/**.js&quot;\n  ],\n  stripPrefix: &quot;app/&quot;,\n  verbose: true,\n  runtimeCaching: [\n    {\n      urlPattern: &quot;/this\\.is\\.a\\.regex/&quot;,\n      handler: &quot;networkFirst&quot;\n    }\n  ]\n}</code></pre></div>\n<p>只要在 sw-precache 的指令後加上 <code class=\"language-text\">--config=sw-precache-config.json</code> 這個 flag 來指定 config 檔即可。</p>\n<h3 id=\"程式碼\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BC%8F%E7%A2%BC\" aria-label=\"程式碼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程式碼</h3>\n<p>上述完整程式碼可以在這裡取得：\n<a href=\"https://github.com/ArvinH/react-pwa-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ArvinH/react-pwa-boilerplate</a></p>\n<p>測試頁面：<a href=\"https://blog.arvinh.info/react-pwa-boilerplate/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.arvinh.info/react-pwa-boilerplate/</a></p>\n<p>目前測試似乎 offline 會有問題，會持續修正更新！並加入 react-router、redux 等常用 lib。</p>\n<h3 id=\"工商服務時間\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%95%86%E6%9C%8D%E5%8B%99%E6%99%82%E9%96%93\" aria-label=\"工商服務時間 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工商服務時間</h3>\n<p>前陣子強者我朋友寫了一個神奇寶貝屬性對戰的遊戲，可以幫助你瞭解神奇寶貝之間各種屬性的相剋狀況，剛好是使用 <code class=\"language-text\">create-react-app</code> 與 <code class=\"language-text\">Redux</code> 實作，我也加入了 pwa 的版本，只是目前 offline 似乎有點問題...</p>\n<p>歡迎大家幫忙修~</p>\n<p>大家可以先到原本網站玩玩!</p>\n<p>原版：\n<a href=\"https://kaddopur.github.io/type_instructor/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kaddopur.github.io/type_instructor/</a></p>\n<p>PWA：\n<a href=\"https://blog.arvinh.info/type_instructor/#/?_k=usu9f3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.arvinh.info/type_instructor/#/?_k=usu9f3</a></p>\n<p><img src=\"/image/pwa-react.gif\" alt=\"type_instructor\"></p>\n<h2 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h2>\n<ul>\n<li><a href=\"https://github.com/jeffposnick/create-react-pwa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Create-react-pwa</a></li>\n<li><a href=\"https://github.com/GoogleChrome/sw-precache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google sw-precache</a></li>\n<li><a href=\"https://github.com/dominiccooney/cache-polyfill\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-polyfill</a></li>\n</ul>","id":"32d0817d-e222-5abb-97f2-a1ccd4b8894e","fields":{"slug":"create-react-pwa-serviceworker"},"frontmatter":{"date":"2016-09-17T12:37:22.000Z","title":"當 React web app 遇上 Progressive web app","tags":["react","pwa","web app"],"type":"tech","slug":"create-react-pwa-serviceworker"},"timeToRead":9},"type":"tech"}},"staticQueryHashes":["2123680655"]}