{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/use-context-selector-src-analysis","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/LN4rYKaNV1g\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LINION - Mountain Dude feat.雷擎L8CHING</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/LN4rYKaNV1g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>最近經手的一個專案採用 React Hooks 與 Context API 實作類似 Redux 的狀態管理，也就是利用 <code class=\"language-text\">useReducer</code>、<code class=\"language-text\">createContext</code> 等 API 來實作全域的 Store 與 Dispatch Actions。</p>\n<p>這樣做其實挺方便的，在狀態管理的流程上跟 Redux 的思維一樣，但設置上更為簡單。</p>\n<p>不過有個問題是，<strong>ㄧ但任何 context 的值更新，所有使用 <code class=\"language-text\">useContext</code> 的 component 都會被通知到，並且進行 render，即便該 component 需要的 state 可能根本沒有變動\u001d。</strong></p>\n<p>簡單看個範例(modified from <a href=\"https://github.com/dai-shi/use-context-selector/tree/master/examples/01_minimal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>)：</p>\n<p><img src=\"/image/context-perf-issue-sample-flamegraph.gif\" alt=\"demo\"></p>\n<p>從上圖中 devtool 中的 flamegraph 可以明顯看出當點選 Counter 時，TextBox 也會觸發 render，因為他們共享同一個 Context。</p>\n<p>附上 codesandbox 供參考（另外，這邊提到的 render 主要是 VDOM 的 render，範例中為了凸顯效果，在其中放了 Math.random() 讓 DOM 一定會更新，否則實際上 TextBox 在值都不變的狀態下，DOM 是不會更新的）：</p>\n<iframe src=\"https://codesandbox.io/embed/context-api-perf-issue-14v1r?autoresize=1&fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"context-api-perf-issue\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>先不論頁面複雜時可能會有的潛在效能問題，光是想到會有這種無謂的 render，應該很多人就會覺得不舒服。</p>\n<p>而實際上，<strong>Context API 一開始就不是拿來給你作用在更新頻率高的狀態上的。</strong></p>\n<p><a href=\"https://reactjs.org/docs/context.html#when-to-use-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>雖然沒有明講這件事，但從他們給的範例圍繞在 <code class=\"language-text\">theme</code> 與 <code class=\"language-text\">user data</code> 就可略知一二，另外在 react-redux v6 版本推出時的<a href=\"https://github.com/reduxjs/react-redux/issues/1177#issue-406051556\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">討論</a>中也有提到。</p>\n<p>所以我們應該要就此打住，改回用 react-redux 嗎？</p>\n<p>也不一定，創造出問題然後解決，就是工程師的職責啊，怎麼能逃避！</p>\n<p>玩笑話，實務上當然自己斟酌，如果是公司內部專案或是你自己的 side project，當然是能多嘗試就嘗試，我並不覺得一昧遵守 best practice 是好的。</p>\n<p>另外，官方團隊也是有<a href=\"https://twitter.com/acdlite/status/1250097231568334848\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">意識到這件事情</a></p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">We indeed have observed performance problems when propagating context to large trees. <a href=\"https://twitter.com/joshcstory?ref_src=twsrc%5Etfw\">@joshcstory</a> is doing some great research on how to make it better. We do have a plan, but it will require a significant refactor so it might take a while to land. <a href=\"https://t.co/gtpLEyfgU9\">https://t.co/gtpLEyfgU9</a></p>&mdash; Andrew Clark (@acdlite) <a href=\"https://twitter.com/acdlite/status/1250097231568334848?ref_src=twsrc%5Etfw\">April 14, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>並且在 <a href=\"https://github.com/reactjs/rfcs/pull/119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC: Context selectors</a> 中曾有蠻熱絡的討論，雖然依照現況來說沒有明確的計劃針對這個問題去做改善，但 RFCs 提出的概念已經有類似實作了，而今天我就是想要來解析ㄧ下到底是怎麼在不更動架構，利用現有 API 下去解決這個問題。</p>\n<h2 id=\"解決方法---usecontextselector\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95---usecontextselector\" aria-label=\"解決方法   usecontextselector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方法 - useContextSelector</h2>\n<p>除了在頁面不複雜的狀態下可以透過組合<a href=\"https://github.com/reactjs/rfcs/pull/119#issuecomment-649848439\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">多個 context</a> 來解決，同事找到的這套 lib - <a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a> 實作了 RFCs 中的概念，提供了 <code class=\"language-text\">selector</code> 給 Context 使用。</p>\n<p>以先前同樣的範例來看看使用後的效果：</p>\n<p><img src=\"/image/context-perf-issue-sample-flamegraph-useContextSelector.gif\" alt=\"Demo with context selector\"></p>\n<a href=\"https://codesandbox.io/s/context-api-perf-issue-usecontextselector-nk0ho?fontsize=14&amp;hidenavigation=1&amp;theme=dark\">\n  <img alt=\"Edit context-api-perf-issue (useContextSelector)\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>\n<p>從圖中的 flamegraph 可以看到，在一樣的操作下，TextBox 在所有的 commits 中都沒有被觸發 render，只有 Counter 有執行 render。</p>\n<p>若是再仔細看一點，你也會發現，跟原本的版本比起來，Commits 數量多了一倍，並多了一個 Anonymous (memo) 的 component。</p>\n<p>而這多出來的部分就是 <a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a> 能 <strong>bail out of rendering</strong> 的原因，接下來我們就從程式碼來理解實作原理！</p>\n<p>（題外話，<code class=\"language-text\">bail out of rendering</code> 是我在查詢相關資訊時，常常看到的句子，覺得是很貼切的描述，所以保留原文，加上我也找不到合適的中文翻譯...）</p>\n<h2 id=\"程式碼解析\" style=\"position:relative;\"><a href=\"#%E7%A8%8B%E5%BC%8F%E7%A2%BC%E8%A7%A3%E6%9E%90\" aria-label=\"程式碼解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>程式碼解析</h2>\n<p><code class=\"language-text\">use-context-selector</code> 的<a href=\"(https://github.com/dai-shi/use-context-selector/blob/master/src/index.js)\">程式碼</a>很短，就 100 多行而已，所以要直接看也是 ok，但我一般都習慣先從 lib 的使用方式下手，觀察出我們應該先閱讀哪部分的程式碼。</p>\n<p>我們只取上面範例中的 Counter 來觀察：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createContext<span class=\"token punctuation\">,</span>\n  useContextSelector<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./use-context-selector'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useContextSelector</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useContextSelector</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Provider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>context<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>context<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Counter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StrictMode<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>跟我們一般使用 Context API 的方式相同，需要用 <code class=\"language-text\">createContext</code> 來創建 context，只不過這邊用到的並不是 React 原生的 createContext，而是 <code class=\"language-text\">use-context-selector</code> 提供的。</p>\n<p>另外就是與一般 <code class=\"language-text\">useContext</code> 不同，在 Component 中使用 <code class=\"language-text\">useContextSelector</code> 來取得 context 中的 state 與 dispatch 函式（React.useReducer() 產生的）。</p>\n<p><code class=\"language-text\">useContextSelector</code> 很好理解，就是多傳一個 selector 參數進去選取我們需要的 context value，但為什麼這邊他要我們使用它提供的 <code class=\"language-text\">createContext</code> 呢？</p>\n<p>看來關鍵就在這邊，所以我們直接先從 <a href=\"https://github.com/dai-shi/use-context-selector/blob/master/src/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a> 中的 <code class=\"language-text\">createContext</code> 函式看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createContext</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make changedBits always zero</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// shared listeners (not ideal)</span>\n  context<span class=\"token punctuation\">[</span><span class=\"token constant\">CONTEXT_LISTENERS</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hacked provider</span>\n  context<span class=\"token punctuation\">.</span>Provider <span class=\"token operator\">=</span> <span class=\"token function\">createProvider</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">[</span><span class=\"token constant\">CONTEXT_LISTENERS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// no support for consumer</span>\n  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看出他其實也是使用 <code class=\"language-text\">React.createContext</code> 來創建 Context，只是他多傳了一個參數進去。</p>\n<p>🤔 什麼時候 <code class=\"language-text\">React.createContext</code> 有第二個參數選項了？</p>\n<p>從上面的註解來看，傳入的第二個參數會回傳一個叫做 <code class=\"language-text\">changedBits</code> 的值，Google 一下後發現原來是沒有寫在文件上的 API，而且兩年前新的 Context API 出來時就已經有不少人在討論了（原來只是自己學識淺薄😅）</p>\n<p>在先前提到的 <a href=\"https://github.com/reactjs/rfcs/pull/119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC: Context selectors</a> 中也是想要利用這個 API。</p>\n<p>這第二個參數叫做 <code class=\"language-text\">calculateChangedBits</code>，他會接受 Context 的新值與舊值作為 input，最後 return <code class=\"language-text\">changedBits</code>，如果 <code class=\"language-text\">changedBits</code> 為 0，Context Provider 就不會觸發更新；而Context Consumer 中也能傳入一個叫做 <code class=\"language-text\">unstable_observedBits</code> 的 props，若是 <code class=\"language-text\">unstable_observedBits &amp; changedBits !== 0</code>，Consumer 也不會更新。</p>\n<p>雖然 <code class=\"language-text\">observedBits</code> 是 unstable 的，但在 <a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/__tests__/ReactNewContext-test.js#L65\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-reconciler 的 NewContext test</a> 中，他們就是利用 <code class=\"language-text\">changedBits</code> 與 <code class=\"language-text\">observedBits</code> 來做更新的測試。</p>\n<p>這邊再羅列幾篇講解得比較詳細的文章供大家參考：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/42654080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不一樣的 React context</a></li>\n<li><a href=\"https://medium.com/@koba04/a-secret-parts-of-react-new-context-api-e9506a4578aa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Secret parts of React New Context API</a></li>\n<li><a href=\"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React tips — Context API (performance considerations)</a></li>\n</ul>\n<p>總而言之，我們是可以客製化一個函式來決定 Context 的值更動時，需不需要觸發更新。</p>\n<p>但這個函式是在 <code class=\"language-text\">createContext</code> 時就得傳入的，而不是 <code class=\"language-text\">useContext</code>，我們的 Component 沒辦法動態去傳各自的 Selector。</p>\n<p>也正是如此，<code class=\"language-text\">use-context-selector</code> 就直接以 <code class=\"language-text\">() => 0</code> 作為 <code class=\"language-text\">calculateChangedBits</code> 函式，讓 React Context Provider 拿到的 <code class=\"language-text\">changedBits</code> 永遠為 0。</p>\n<p>這樣做會讓 Provider 永遠不會跟隨著 Context 變動而觸發 render，而是由我們自己來判斷何時要做更新，為此，<code class=\"language-text\">use-context-selector</code> 實作了另一個 <code class=\"language-text\">context.Provider</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">OrigProvider<span class=\"token punctuation\">,</span> listeners</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we use layout effect to eliminate warnings.</span>\n    <span class=\"token comment\">// but, this leads tearing with startTransition.</span>\n    <span class=\"token comment\">// eslint-disable-next-line react-hooks/rules-of-hooks</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we call listeners in render for optimization.</span>\n    <span class=\"token comment\">// although this is not a recommended pattern,</span>\n    <span class=\"token comment\">// so far this is only the way to make it as expected.</span>\n    <span class=\"token comment\">// we are looking for better solutions.</span>\n    <span class=\"token comment\">// https://github.com/dai-shi/use-context-selector/pull/12</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>OrigProvider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">createProvider</code> 除了包裹 React 原生的 Context Provide 外，額外接收一個 <code class=\"language-text\">listeners</code> 參數，而這就是 Custom Provider 的主要目的。</p>\n<p>剛剛提到由於 <code class=\"language-text\">changedBits</code> 都會是零，所以需要我們主動觸發更新，而觸發的方式就是直接將 listener 註冊到 Customer Provder 中，而 listener 就是每個 Component 用來<strong>針對目前最新的 context value 做 select 以決定要不要更新的函式</strong>，詳細實作等等就會說明。</p>\n<p>現在重新拿範例程式碼來檢視一下目前為止的邏輯：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Provider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>context<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>context<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StrictMode<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Counter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StrictMode<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>將 <code class=\"language-text\">useReducer</code> 回傳的 <code class=\"language-text\">state</code> 與 <code class=\"language-text\">dispatch</code> 當作 Context Value 傳入 Provider，當 <code class=\"language-text\">Counter</code> 裡面透過 <code class=\"language-text\">dispatch</code> 去更新 Context 內的 <code class=\"language-text\">state</code> 時，由於此時的 Provider 是客製化後的 Provider，他會進行 render，並在 render 的過程中，呼叫所有與他直接 subscribe 的 listener，由 listener 來判斷與執行 component 的 re-render 與否。</p>\n<p>這層客製化的 Provider 也就是我們先前在 flamegraph 中看到多出來的一層 Anonymous (memo) component，也解釋了為什麼 commits 數量會多了一倍，就是因為這個 Anonymous component 所進行的 render。</p>\n<p>最後我們來看看 listener 是怎麼產生與運作的，我們拆三個部分來說明：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useContextSelector</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> context<span class=\"token punctuation\">[</span><span class=\"token constant\">CONTEXT_LISTENERS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useContextSelector requires special context'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在一開始 <code class=\"language-text\">createContext</code> 時，其實有在 context 中塞一個 <code class=\"language-text\">Set()</code>：</p>\n<p><code class=\"language-text\">context[CONTEXT_LISTENERS] = new Set();</code></p>\n<p>而在 <code class=\"language-text\">useContextSelector</code> 中的一開始，我們就會取出這個 set，目的在於<strong>要放入呼叫 <code class=\"language-text\">useContextSelector</code> 的 component 的 listener。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> forceUpdate<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> selected <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token operator\">:</span> selector<span class=\"token punctuation\">,</span> <span class=\"token comment\">// last selector \"f\"unction</span>\n    v<span class=\"token operator\">:</span> value<span class=\"token punctuation\">,</span> <span class=\"token comment\">// last \"v\"alue</span>\n    s<span class=\"token operator\">:</span> selected<span class=\"token punctuation\">,</span> <span class=\"token comment\">// last \"s\"elected value</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>接著準備一些 listener 需要的東西：</p>\n<ol>\n<li>當執行完 Selector，確認 Component 需要更新後，我們得有個 <code class=\"language-text\">forceUpdate</code> 函式來觸發 render，這邊的實作方式是額外使用 <code class=\"language-text\">React.useReducer</code> 產生一個不斷 +1 的 reducer，來達到效果。</li>\n<li>我們還是需要一個真正的 <code class=\"language-text\">React.context</code> 來紀錄 Globle state。</li>\n<li>透過 <code class=\"language-text\">React.useRef</code> 紀錄當下的 selector function、context value 與 selector 選出的值。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\nReact<span class=\"token punctuation\">.</span><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nextValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>v <span class=\"token operator\">===</span> nextValue\n        <span class=\"token operator\">||</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>nextValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ignored (stale props or some other reason)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  listeners<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    listeners<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>listeners<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> selected<span class=\"token punctuation\">;</span></code></pre></div>\n<p>再來實作 listener，listener function 接受的 <code class=\"language-text\">nextValue</code> 就是 Custom Provider 取得的最新的 Context value，listener function 就能夠利用這個 <code class=\"language-text\">nextValue</code> 與我們先前存放在 <code class=\"language-text\">ref</code> 中的值做比較，若是 Context Value 完全相等，或是 Selected 的值也沒有變動（用 <code class=\"language-text\">ref</code> 中存好的 selector function 對 <code class=\"language-text\">nextValue</code> 做選取），那就不用 render。</p>\n<p>反之，若發現值不同，需要更新，就會呼叫 <code class=\"language-text\">forceUpdate()</code> 強制讓這個 <code class=\"language-text\">useContextSelector</code> 進行 render，也就會跟著觸發使用 <code class=\"language-text\">useContextSelector</code> 的 Component 進行 render，更新 <code class=\"language-text\">ref</code> 內的值，並回傳最新的 <code class=\"language-text\">selected value</code>。</p>\n<p>而這邊建立的 listener 會放入一開始從 Context 取出的 <code class=\"language-text\">Set()</code> 中，Custom Provider 在 render 時，就能取出運行。</p>\n<h3 id=\"總結一遍流程\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90%E4%B8%80%E9%81%8D%E6%B5%81%E7%A8%8B\" aria-label=\"總結一遍流程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結一遍流程</h3>\n<p><code class=\"language-text\">use-context-selector</code> 替 Context API 的效能問題所找到的 escape hatch 流程如下：</p>\n<ol>\n<li>利用 <strong>Custom Provider</strong> 與 <strong>Custome createContext</strong> 迫使 changedBits 總是回傳 0，停止所有 Context 使用者的自動更新。</li>\n<li>建立一個 global listeners 的 Set 在 Context 中，讓 Components 直接 subscribe 到 <Provider> (<em>Custom Provider</em>)</li>\n<li>有使用 <code class=\"language-text\">useContextSelector</code> 的 components 會建立 listener，放入 Context Set 中進行 subscribe。</li>\n<li>當 <Provider> re-renders 時， 觸發所有 subscribers。</li>\n<li>listener 執行，檢查 Selector，檢查 Context Value，只針對有需要更新的 Component 做 forceUpdate。</li>\n</ol>\n<p>這就是 <code class=\"language-text\">use-context-selector</code> 所找到的出路，讓你在 global context update 時，<code class=\"language-text\">bail out of rendering</code>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p><code class=\"language-text\">use-context-selector</code> 的作者自己也說了這個套件有很多<a href=\"https://github.com/dai-shi/use-context-selector#limitations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">限制</a>與<a href=\"https://github.com/dai-shi/reactive-react-redux/issues/29#issuecomment-512785639\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不足</a></p>\n<p>即便他有 <a href=\"https://github.com/dai-shi/use-context-selector/pull/12\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v2</a> 版本的實作，是建立在比較有機會實作的 RFC 上，但整體來說還是不能算一個穩定的解決方案。</p>\n<p>但是作為使用在內部或是個人專案上來說，是個還不錯的選擇。尤其是簡單易懂的實作，就算是出了什麼問題，只要理解他的原理，也是能找得出問題所在。</p>\n<p>這次也是透過閱讀其程式碼，才對 Context API 有更多了解，從中延伸閱讀了很多包含 react-redux v6 當初的效能 issue、RFCs 上的討論、關於 <code class=\"language-text\">calculateChangedBits</code> 的知識，或甚至是 react scheduling 的一些內部實作。</p>\n<p>這也回應到我最開始所說的，有時候太過於遵循 best practice，會讓你失去研究一些有趣問題或是學習的機會，甚至透過走這些旁門走道，會讓你對於 best practice 之所以為 best practice 的原因更加深刻。</p>\n<p>分析程式碼的文章有點冗長鬆散，如果你有看到這邊，感謝你的閱讀，若有任何問題也歡迎指教討論！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-context-selector</a></li>\n<li><a href=\"https://reactjs.org/docs/context.html#when-to-use-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">When to use Context</a></li>\n<li><a href=\"https://github.com/reduxjs/react-redux/issues/1177#issue-406051556\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React-Redux Roadmap: v6, Context, Subscriptions, and Hooks</a></li>\n<li><a href=\"https://github.com/reactjs/rfcs/pull/119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC: Context selectors</a></li>\n<li><a href=\"https://github.com/dai-shi/reactive-react-redux/issues/29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why calculateChangedBits = () => 0</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/42654080\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">不一樣的 React context</a></li>\n<li><a href=\"https://medium.com/@koba04/a-secret-parts-of-react-new-context-api-e9506a4578aa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Secret parts of React New Context API</a></li>\n<li><a href=\"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React tips — Context API (performance considerations)</a></li>\n</ol>","fields":{"slug":"use-context-selector-src-analysis"},"frontmatter":{"title":"Context API 效能問題 - use-context-selector 解析","date":"09-12-2020","tags":["react","context api","selector","state management"]},"timeToRead":13}},"pageContext":{"slug":"use-context-selector-src-analysis","prev":{"excerpt":"『Gotta remember we live what we choose; It's not what you say, it's what you do; And the life you want is the life you have to make.』- Life is so cool (一首我心愛的人推薦的歌 :) )","html":"<blockquote>\n<p>『Gotta remember we live what we choose; It's not what you say, it's what you do; And the life you want is the life you have to make.』- Life is so cool (一首我心愛的人推薦的歌 :) )</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>稍微取樣了胡立先前<a href=\"https://blog.techbridge.cc/2020/07/11/an-interesting-styled-component-bug/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>的標題，但實際上這篇文章想分享的面向不太ㄧ樣，並不是 styled-components 本身的 issue 或是其所引用的底層套件的 bug，比較像是特定的使用情境，以及對 styled-components 實際運作原理不熟悉等因素，所導致的 bug。這個 bug 不是很容易被發現，解決的方法也算是有點 hack（運用到與官方文檔描述不符合的 API），我覺得蠻有趣的，加上主要的解法實作是由我<a href=\"https://github.com/whatasod\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同事</a>處理，所以想寫下來給自己做一個紀錄，給自己留點印象，對大家可能沒有直接幫助，可以當故事看看做個參考。</p>\n<p>TL;DR</p>\n<p>下面的篇幅大部分在講解發現問題的流程，也可以直接跳到<a href=\"#%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E5%95%8F%E9%A1%8C%E8%88%87%E8%A7%A3%E6%B3%95\">最後</a>看重點。</p>\n<h2 id=\"一切的開端\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E5%88%87%E7%9A%84%E9%96%8B%E7%AB%AF\" aria-label=\"一切的開端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一切的開端</h2>\n<p>團隊內有個專案是專門提供給行銷人員製作行銷頁面的內部工具，tech stack 中有使用 React 與 styled-components。原本最早的實作方式是簡單的 Single Page Application，透過 API 拉取內容進行 render，而由於頁面大多是在 App 內的 WebView 開啟，為了提高使用者經驗，我們決定將頁面先行在 server 端進行 prerender，將 HTML 放置 CDN，client 端載入所需資源後，JS 再透過 <code class=\"language-text\">ReactDOM.hydrate</code> 進行 hydration，讓有互動功能的 react component 可以運作。</p>\n<p>prerender 的做法，非常直接，我們使用 puppeteer 開啟 Headless server 直接 render 原本的 SPA 頁面，把 <code class=\"language-text\">page.content()</code> 給存起來。</p>\n<p>會採用這種做法的一個原因是因為原本用在 SPA 上的 component 其實也同時共用在內部工具中，而整個 SPA 頁面也還保留著作為預覽，讓使用者在編輯製作行銷頁面的時候能夠即時看到頁面外觀，因此與其修改成 <code class=\"language-text\">ReactDOM.renderToString()</code>，直接將 SPA 渲染完的結果存下來，直覺上簡單很多，程式碼的更動也少。</p>\n<p>prerender 完後，接著會把不需要在前端 rehydrate 的 component 從 JS bundle 中移除，inject 需要的 style tag，最後連同 HTML 一起放到 CDN 上。</p>\n<p>要 inject style tag 的原因是因為 styled-components 如同多數 CSS-in-JS 解決方案，是使用 CSSOM 去 insertRule，而這樣的做法在 Chrome 85 以前是無法透過 devtool 來調整 style，在開發階段除錯上稍嫌麻煩，所以我們利用 prerender 完的優化階段來把 styled-components 放在 CSSOM 中的 sheet 抓出來塞到 style tag 中（註：當時使用的還不是 styled-components v5+ 因此沒有 <code class=\"language-text\">disableCSSOMInjection</code> option 可用。）</p>\n<p>簡單的架構圖：</p>\n<p><img src=\"/image/mock-structure.png\" alt=\"simple structure\"></p>\n<p>基本上這樣一切都很順利，實際測試上線也都沒什麼太大問題。</p>\n<p>但是有個隱藏的 bug 我們一直都沒有發現，就是 <strong>prerender 完的頁面存有樣式跑版的機會。</strong></p>\n<p>而且這個情況並不是很容易發生，實際上在我們意識到之前，PM 早已回報過一兩次，但基於慣性，發現頁面有點奇怪時，自然反應是重新整理、重新執行，看看能否重現 issue，而這個 bug 在重新 prerender 後有蠻大的機率會再次隱藏起來，也因此沒有獲得足夠的注意力讓我們持續專研下去。</p>\n<p>直到某個同事在實作一個頁面載入後會有較多狀態變化的 component 時，他發現到，在沒有更動程式碼的情況下，在 client 端才動態出現的 component 樣式卻跑掉了，但瀏覽器 first load HTML 時卻是正常的。</p>\n<h2 id=\"到底是什麼問題\" style=\"position:relative;\"><a href=\"#%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C\" aria-label=\"到底是什麼問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>到底是什麼問題</h2>\n<p>為了除錯，我利用 Devtool 插入中斷點，發現到第一次 HTML 載入時，一切的 Style 都是正常的，包含 styled-components 所產生的 class name 以及我們 inject 到 html 內的 style tag；然而當 JS bundle 載入，前端 react component 重新 render 後，HTML DOM 上的 styled-components class name 與原先的不同，class name 所對應的 css style rule 也不一樣。</p>\n<p>接著再細看最終瀏覽器渲染的 HTML，發現到 <code class=\"language-text\">&lt;head></code> 內有兩個屬於 styled-components 的 style tag。</p>\n<p><img src=\"/image/two-style-tag.png\" alt=\"two style tag\"></p>\n<p>到這邊問題就比較清楚了。</p>\n<p><strong>我們塞了兩次 styled-components 產生的 style tag，所以導致 class name 的 style 有衝突。</strong></p>\n<p>上面紅線括弧的部分是我們在 server-side inject 進去，含有 css text 的 style tag；下方黃線標記的則是 client 端 hydrate 後，所產生的新的 style tag。</p>\n<p>造成的後果就是兩個毫無相干的 component 有機會共享了同樣的 class name，其中一個 component 的 style 就跑掉了：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--Call to action component--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-AxiKw iOTgPf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--FQA component--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-AxhUy iOTgPf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>另外值得一提的是，在我們的 case 中，由於我們還會把不需要在前端 rehydrate 的 react component code 從 JS bundle 裡拿掉，所以那些我們所謂 <em>靜態的 component</em> 樣式基本上不太會受影響，才讓這個 bug 比較難發現。</p>\n<h2 id=\"解決方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\" aria-label=\"解決方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方案</h2>\n<p>既然發現多了一個 style tag，那我們把後來蓋上去的那個 tag 拿掉不就得了嗎？</p>\n<p>但事情果然不是憨人想得這麼簡單。</p>\n<p>拿掉在 client-side 重新產生的 style tag 是可以確保整個 application 只吃到我們原先在 server 端 inject 的 CSS 樣式，但在 rehydrate 的過程中，component 的 class name 也變了，所以單純拿掉 client side style tag 反而讓整個頁面的樣式更加慘烈。</p>\n<p>還是得從根本解決問題。</p>\n<p>之所以會產生兩個 style tag，原因在於我們在 client 端進行 hydration 時，並<strong>沒有正確處理 styled-components 的 hydration</strong>，只顧慮到了 react component 本身的 hydration，對於 styled-compponent 來說，我們在 server-side inject 的 style tag <strong>不足以讓他進行 rehydrate（原因後面會說明）</strong>，所以他實際上只能重新 render 所有 component 的 style，重新產生 class name 與 style tag。</p>\n<p>而在了解到我們自己 inject 的 style tag 無法讓 styled-components 進行 rehydrate 後，我試著用前面提到過的 <code class=\"language-text\">disableCSSOMInjection</code>，根據<a href=\"https://styled-components.com/docs/api#stylesheetmanager\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a>，可以搭配 <code class=\"language-text\">StyleSheetManager</code>，讓 styled-components 自己 export 出含有 css text 的 style tag，但結果還是一樣有問題（後面會解釋原因）。</p>\n<p>因此，還是得仔細了解該如何讓 styled component 能正確 rehydrate，讀取我們在 prerender 時就已經處理過的 style，才不會造成 class name 衝突，以及有多餘的 style tag 產生。</p>\n<h3 id=\"styled-components-的-hydration\" style=\"position:relative;\"><a href=\"#styled-components-%E7%9A%84-hydration\" aria-label=\"styled components 的 hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-components 的 hydration</h3>\n<p>知道 solution 的方向後，開始到官網查閱關於 server side hydration 的資料，發現有針對 server-side rendering 所提出的<a href=\"https://styled-components.com/docs/advanced#server-side-rendering\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解決方案</a>：利用 <code class=\"language-text\">ServerStyleSheet</code> 可以搭配 <code class=\"language-text\">StyleSheetManager</code> provider，讓 styled-components 在 server-side 能夠產生 css style，並且提供機制讓該 style 能在 client-side 被 rehydrate：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyleSheetManager</span></span> <span class=\"token attr-name\">sheet</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">YourApp</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyleSheetManager</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> styleTags <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// or sheet.getStyleElement();</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handle error</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看起來就是該這樣做，不過呢，光從名字就跟你說了他是給你在 Server 用的，甚至還在文檔中寫上：<em>Just make sure not to use it on the client-side.</em></p>\n<p>但我們的 prerender 實際上是跑在 client 端，這樣肯定不行吧？</p>\n<p>我原本也是這樣想，打算放棄的時候，我優秀的<a href=\"https://github.com/whatasoda\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同事</a>跑去讀了讀 styled-components 的原始碼，發現 <code class=\"language-text\">ServerStyleSheet</code> 內其實沒有用到任何 NodeJS 獨有的 API，也就是說實際上 <code class=\"language-text\">ServerStyleSheet</code> 跑在 client 端也是沒問題的！</p>\n<p><code class=\"language-text\">ServerStyleSheet</code> 跟一般 styled-components 在 client 端使用的 <code class=\"language-text\">StyleSheet</code>（styled-components 自己<a href=\"https://github.com/styled-components/styled-components/blob/b19d17f1d6739d0cc6da826cf701a9ee3c075525/packages/styled-components/src/sheet/Sheet.js#L26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實作的版本</a>，並非 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Browser 內建的 StyleSheet</a>）差別在於，<code class=\"language-text\">ServerStyleSheet</code> 多傳了一個 <a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/models/ServerStyleSheet.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">isServer = true</code> 的 option</a> 給 <code class=\"language-text\">StyleSheet</code>，而這會使得 styled-components 的 <code class=\"language-text\">StyleSheet</code> 在 <code class=\"language-text\">makeTag</code> 的時候，不是去生成一個實際的 style tag，而是產生一個 <code class=\"language-text\">VirtualTag</code>：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Tag.js#L7-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/** Create a CSSStyleSheet-like tag depending on the environment */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> makeTag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isServer<span class=\"token punctuation\">,</span> useCSSOMInjection<span class=\"token punctuation\">,</span> target <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SheetOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tag <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isServer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VirtualTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useCSSOMInjection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSOMTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這個 <code class=\"language-text\">VirtualTag</code> 包含所有 style 的資訊，但不需要操作到實際的 DOM，這就是讓 styled-components 能支援 SSR 的原因。</p>\n<p>而 <code class=\"language-text\">StyleSheet</code> 的 <code class=\"language-text\">toString</code> <a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Sheet.js#L122\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">函式</a>，能夠 serialize <code class=\"language-text\">makeTag</code> 產生的 tag 的內容：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L10-L39\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">outputSheet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> css <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> group <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> group <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> group<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getIdForGroup</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rules <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> rules<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> selector <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SC_ATTR</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.g</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      names<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          content <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// NOTE: It's easier to collect rules and have the marker</span>\n    <span class=\"token comment\">// after the actual rules to simplify the rehydration</span>\n    css <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>selector<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{content:\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLITTER</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> css<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再搭配 <code class=\"language-text\">ServerStyleSheet</code> 提供的 <code class=\"language-text\">getStyleTags</code> 方法，能夠 output 出正確的 style tag 來 inject 到你 SSR 產生的 HTML 內，讓 styled-components 可以順利 Rehydrate。</p>\n<p>而何謂 “正確” 的 style tag 呢？</p>\n<p>在我們最一開始的實作中，我們自己是透過下面這般方式產生出要 inject 到 HTML 中的 style tag：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// styled-components 預設產生的 tag 會是空的，因為採用 CSSOM API insertRule</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>sheet <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CSSStyleSheet</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\t\n  elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>sheet<span class=\"token punctuation\">.</span>cssRules <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rule</span> <span class=\"token operator\">=></span> rule<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">)</span>\t\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也就是說我們是取出 styled-components 預設產出的 style tag，把其中的 cssRules 讀出來後塞回去。</p>\n<p>這樣的做法錯在會保留 style tag 上的其他屬性，像是 <code class=\"language-text\">data-styled=active</code>。</p>\n<p>當 styled-components 在進行 Rehydrate 時，他會去抓取 <code class=\"language-text\">data-styled</code> 不為 <code class=\"language-text\">active</code> 的 style tag 來 parse，並進行 rehydrate：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rehydrateSheet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SELECTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SC_ATTR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant\">SC_ATTR_ACTIVE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">rehydrateSheetFromTag</span><span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這也說明了為什麼一開始我使用 <code class=\"language-text\">disableCSSOMInjection</code> 讓 styled-components 幫我產生 text node-based 的 css style tag 也沒有用，因為那樣產生的 style tag ㄧ樣會是帶有 <code class=\"language-text\">data-style=active</code> 的屬性，並不會被 styled-components 拿去 rehydrate。</p>\n<p>這時我們更加釐清了問題。</p>\n<p>首先，有兩個 styled-components 的 style tag 的確不對，但<strong>重點是這兩個 style tag 同時都擁有 <code class=\"language-text\">data-styled</code> 為 <code class=\"language-text\">true</code> 的屬性，以致於 styled-components 在 rehydrate 的時候抓不到可用的 style tag。</strong></p>\n<p>另外，也不是單純 <code class=\"language-text\">data-styled</code> 不為 <code class=\"language-text\">true</code> 的 style tag 就可以被 rehydrate，前面提到 <code class=\"language-text\">StyleSheet</code> 的 <code class=\"language-text\">toString</code> 能夠 serialize <code class=\"language-text\">VirtualTag</code> 的內容，其中有一段程式碼與註解：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// NOTE: It's easier to collect rules and have the marker</span>\n<span class=\"token comment\">// after the actual rules to simplify the rehydration</span>\ncss <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>selector<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{content:\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLITTER</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊指示出，要能夠被 rehydrate 的 text node-based 的 css style tag，需要有特定的 <code class=\"language-text\">SPLITTER</code>：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SPLITTER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/*!sc*/\\n'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L55\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rehydrateSheetFromTag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLITTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rules<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h2 id=\"重新梳理一下問題與解法\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E5%95%8F%E9%A1%8C%E8%88%87%E8%A7%A3%E6%B3%95\" aria-label=\"重新梳理一下問題與解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重新梳理一下問題與解法</h2>\n<h3 id=\"問題\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C\" aria-label=\"問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題</h3>\n<p>我們頁面 prerender 完的結果，在 client 端 first load 與 JS bundle rehydrate 後的樣式不同，原因是利用 client side render 製作 prerender 時，產生兩個同樣擁有 <code class=\"language-text\">data-styled=true</code> 屬性的 styled-components style tag，造成 styled-components 無法 rehydrate，只好重新產生新的 style tag，因而破壞了頁面樣式。</p>\n<h3 id=\"解法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95\" aria-label=\"解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法</h3>\n<p>使用 <code class=\"language-text\">ServerStyleSheet</code> 搭配 <code class=\"language-text\">StyleSheetManager</code> 在 prerender 階段生成 <code class=\"language-text\">VirtualTag</code>（這邊的使用方法稍微 hack 了一點，因為我們的 prerender 是 client-side render，而官方不建議將 <code class=\"language-text\">ServerStyleSheet</code> 使用在 client side），接著再透過 <code class=\"language-text\">ServerStyleSheet</code> 的 <code class=\"language-text\">getStyleTags</code> 取得可被 styled-components 存取進行 rehydration 的 style tag，並 inject 到 prerendered HTML 中。</p>\n<p>主要的程式碼片段如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 放在整個 Application 的最上層</span>\n<span class=\"token keyword\">const</span> StyleSheetProvider<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StyleSheetManager sheet<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 prerender 結束，產生 HTML 後執行</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">injectStyleElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  style<span class=\"token punctuation\">.</span>outerHTML <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到這邊為止就算是將問題解決了，但會發現還是有問題，雖然 style tag 成功只剩下一個，看起來 rehydrate 也有成功，但樣式還是跑掉了。</p>\n<p>還好這個原因很好找，官網就有<a href=\"https://styled-components.com/docs/advanced#tooling-setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解答</a> ：</p>\n<blockquote>\n<p>In order to reliably perform server side rendering and have the client side bundle pick up without issues, you'll need to use our babel plugin. It prevents checksum mismatches by adding a deterministic ID to each styled component.</p>\n</blockquote>\n<p>就是 SSR 最常見的 checksum issue，我們需要給每一個 styled-component 一個在前後端一致的 ID，這樣才可以確保 rehydrate 後能夠擁有相同的 class。</p>\n<p>加上 <a href=\"https://styled-components.com/docs/tooling#babel-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin</a> 後問題就成功解決了！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>經過這次的除錯過程，我才發現自己對於 styled-component 這類 React 生態系的套件了解度不夠深，才導致在一開始設計實作 prerender 時沒有注意到這件事情，另外也透過這次的紀錄發現要將一個 bug 的原因與解法從頭到尾書寫出來有多困難，畢竟整個除錯過程你可能是跳耀性的在思考各種可能，文章中的每個步驟其實也絕對不是這樣一步步找出解法的，要有條理的將其梳理出一個流暢的 flow 真的需要一點功力，看來我還有很大的進步空間！</p>\n<p>雖然這次的問題實際上的解法不需要更動多少程式碼，原理也很簡單，但若是沒有像我同事那樣鑽入程式碼去查看，光是憑靠自己的邏輯是很難思考出來的。整個過程學習到很多，遇到這個 bug 真是太好了！（好像怪怪的...）</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://styled-components.com/docs/advanced\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-component website</a></li>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-component source code</a></li>\n</ol>","id":"342141e0-0a2e-53ff-8ba8-a915956520a3","fields":{"slug":"styld-component-prerendering-issue"},"frontmatter":{"date":"2020-08-15T13:37:30.000Z","title":"另一個與 styled-components 相關的 debug 紀錄","tags":["web","styled-components","server-side generated page","react"],"type":"tech","slug":"styld-component-prerendering-issue"},"timeToRead":13},"next":{"excerpt":"好歌分享：Sunset Rollercoaster - Candlelight feat. OHHYUK","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/kb0whVogBkI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sunset Rollercoaster - Candlelight feat. OHHYUK</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/kb0whVogBkI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Airbnb 一向在前端與設計上有深刻著墨，總能推出質感很好的工具給相關人員使用，而在上個月他們釋出了 v1.0 版本的資料視覺化套件 - <a href=\"https://github.com/airbnb/visx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visx</a>，強調特色是架構在 React 上，提供與類似 D3 的底層 API 來製作圖表。然而結合 React 與 D3 的套件何其多，Airbnb 出品的 visx 與其它產品的差異是什麼，使用起來的感覺又是如何，今天趁著雙十連假，嘗試實際寫寫看，並跟大家分享。</p>\n<p>照例先展示個最終範例：</p>\n<p><img src=\"/image/visx-final-demo.gif\" alt=\"final demo\"></p>\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview\">\n  <img alt=\"Edit SimpleRadar-AQI (with Tooltip + select data)  (react-spring)\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>\n<h2 id=\"visx-簡介\" style=\"position:relative;\"><a href=\"#visx-%E7%B0%A1%E4%BB%8B\" aria-label=\"visx 簡介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>visx 簡介</h2>\n<p>visx 在三年前就已經開源了，當時叫做 vx，一直處於 beta 的狀態，而實際上在 Airbnb 內部已經應用在各種正式環境的專案上兩年多，中間經過許多更新並以 TypeScript 重寫過，才在上個月以 1.0 的版本再次問世。</p>\n<p>如同前言提到的，市面上不乏整合 React 與 D3 的套件可以使用，而且大多數都盡量設計得簡單易用，資料傳進去，一組 Bar Chart 就出來了，為什麼 Airbnb 要在自己打造一套工具呢？</p>\n<p>在官方的 <a href=\"https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> 中他們繪製了一張圖精簡的解釋了這個工具存在的意義：</p>\n<p><img src=\"https://miro.medium.com/max/700/1*K7IJg1Gd_grQEhnos0XiqQ.png\" alt=\"why visx\">\n（偷偷吐槽一下，他們的 logo 放在這圖裡感覺像是在那欄畫了一的大叉叉...)</p>\n<p>那些隨插即用的 Chart library 之所以無法撼動 D3 地位的原因在於缺乏足夠的 Expressive，也就是不夠底層，能夠操控的範圍受限，相對的，D3 則提供了非常多的底層介面讓你能細緻的操作資料與畫面的整合互動。</p>\n<p>然而 D3 對於前端工程師來說，最讓人畏懼的就是其陡峭的學習曲線，尤其當你嘗試將 D3 直接運用在你的 React 專案內時，兩種截然不同的 mental model 與操作 DOM 的方式，相信一定會在你心裡留有芥蒂，當然也容易產生 Bug。</p>\n<p>因此 visx 針對這幾個問題做了解決，提供以下主要特色：</p>\n<ol>\n<li>\n<p>以 Typescript 與 React 實作</p>\n<ul>\n<li>這個 tech stack 組合應該是目前前端主流之一，Airbnb 的官方前端語言就是 Typescript，網站也是以 React 為主，以此組合實作能降低前端工程師踏入資訊視覺化專案的門檻，熟悉的感覺最對味。</li>\n</ul>\n</li>\n<li>\n<p>以模組化的方式提供豐富的底層「畫面操作」元件和少許的 Layout, interaction, svg, data utilities</p>\n<ul>\n<li>前端在乎的不外乎美觀、效率與安全，在操作資訊視覺專案時，面對大量資料，降低 Bundle size 以增加效能就很重要了，比起其他 Chart library，visx 提供各種底層元件讓你自己選擇組裝，要使用的在載入即可，不需要整包裝進去你的 Bundle 內。e.g. <code class=\"language-text\">import { Bar } from '@vx/shape';</code></li>\n</ul>\n</li>\n<li>\n<p>Un-opinionated on purpose</p>\n<ul>\n<li>visx 很大的一個特點是，所提供的模組與元件都是以 React 為基礎實作的，因此無論是狀態管理、動畫操作、CSS solution 等等，你都不需要特別為了 visx 去做處理或是額外的整合，就當作一般寫 React project 即可，你原本如何做動畫、如何 theming, styling，都可以沿用。</li>\n</ul>\n</li>\n<li>\n<p>與 D3 能互相搭配使用</p>\n<ul>\n<li>visx 主要提供底層操作 DOM 的元件，讓前端工程師能用一套 mental modal 處理畫面，而關於 data operation 或 scale function 等運算，visx 設計上就是希望能繼續利用 D3 所提供的強大函式庫來處理。</li>\n</ul>\n</li>\n</ol>\n<p>綜合以上特色，使用 visx 與使用 D3 的最大差異在於，<strong>你不再需要了解 <code class=\"language-text\">d3.select</code>, data join, enter/exit status 等等屬於 D3 根據 data 更新 DOM 的邏輯思路，但又能保有相對 primitives 的元件可使用，而且在進行一些單純的資料運算、scale 函式上，你也還是能使用 D3 提供的 utils。</strong> 其餘的一切都是 React，包含 Layout responsive 等等都是由 React component 來負責。</p>\n<p><img src=\"/image/airbnb-visx-doc.png\" alt=\"visx doc\"></p>\n<h2 id=\"實際演練---台灣六都即時空氣品質指標\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E6%BC%94%E7%B7%B4---%E5%8F%B0%E7%81%A3%E5%85%AD%E9%83%BD%E5%8D%B3%E6%99%82%E7%A9%BA%E6%B0%A3%E5%93%81%E8%B3%AA%E6%8C%87%E6%A8%99\" aria-label=\"實際演練   台灣六都即時空氣品質指標 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際演練 - 台灣六都即時空氣品質指標</h2>\n<p>簡單介紹完 visx 的特色，接著就來實際把玩看看！官方 github 附有一個簡單的 bar chart 圖表，但每次都使用 bar chart 做範例太無趣，因此挑個稍微複雜一點的 Radar chart（雷達圖） 來做範例。</p>\n<p><a href=\"https://vis.baidu.com/chartusage/radar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">雷達圖</a>適合用來呈現多維度的資料，用來展示臺灣六都的幾個重要空氣品質指標項目感覺蠻適合的，加上其 API 在 政府 open data 中又算是比較方便取用的一個...</p>\n<p>API 取自 <a href=\"https://opendata.epa.gov.tw/Data/Details/AQI/?show=all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">行政院環境保護署。環境資源資料開放平臺</a>，每小時會更新一次。</p>\n<p>為了體驗 visx 的特色，這次範例的製作流程大致如下：</p>\n<ol>\n<li>根據 API 資料，利用 visx 元件製作出基本畫面（了解基本使用方法）</li>\n<li>增加資料切換與 tooltip 使用（加一點變化）</li>\n<li>採用 react-spring 增加切換資料時的動畫（確認是否 Un-opinionated on animation）</li>\n<li>採用 d3-scale 來處理顏色變換（了解如何一起運用 D3）</li>\n</ol>\n<p>完整程式碼可以從 <a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?file=/Radar.tsx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeSandbox</a> 上取得，這邊只會擷取重要部分。</p>\n<p>那麼就開始吧！</p>\n<h3 id=\"第一步使用-visx-元件堆疊出基本畫面\" style=\"position:relative;\"><a href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%BD%BF%E7%94%A8-visx-%E5%85%83%E4%BB%B6%E5%A0%86%E7%96%8A%E5%87%BA%E5%9F%BA%E6%9C%AC%E7%95%AB%E9%9D%A2\" aria-label=\"第一步使用 visx 元件堆疊出基本畫面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一步，使用 visx 元件堆疊出基本畫面</h3>\n<p>老實說 visx 官網其實沒什麼文件，都是很基本的 props 類型與介紹，範例就直接丟程式碼給你，唯一一篇手把手教你建立出一個 bar chart 的教學也是<a href=\"https://medium.com/vx-code/getting-started-with-vx-1756bb661410\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三年前</a>寫的。</p>\n<p>在這條件下，最好的學習方式也只有從範例開始，剛好在 visx 官網的 Gallery 已經有個雷達圖的<a href=\"https://airbnb.io/visx/radar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>，可以根據範例進行修改。</p>\n<p>本步驟的結果可以從這個 CodeSandbox 取得：\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-t1qjl?fontsize=14&hidenavigation=1&theme=dark&view=preview\">\n<img alt=\"Edit SimpleRadar-AQI\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a></p>\n<p>首先，資料視覺化的第一步就是準備好資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDataFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">URI</span> <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"https://opendata.epa.gov.tw/api/v1/AQI?%24skip=0&amp;%24top=1000&amp;%24format=json\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> fallbackData<span class=\"token punctuation\">;</span> <span class=\"token comment\">// await (await fetch(URI)).json();</span>\n        <span class=\"token keyword\">const</span> fileterdData <span class=\"token operator\">=</span> data\n          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* data process */</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* data process */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>fileterdData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useDataFetch<span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用先前提到的保護署開放資料 API 來取得即時的六都空氣品質資訊。不過 API response time 很久，一次 request 可能要等個十幾二十秒...所以開發上我多放個 fallback data 擋著，才部會一直沒有畫面出現。</p>\n<p>題外話，visx 也提供一些 mockdata 供你使用，像是 apple stock <code class=\"language-text\">import { appleStock } from '@vx/mock-data';</code>。</p>\n<p>接著我們需要定義一下整個圖表的大小，也就是長寬，你可以定義固定大小的圖表，或是使用 visx 中一個叫做 <code class=\"language-text\">@visx/responsive</code> 的 package，裡面有三種控制元素大小的 HOC 可以使用：<code class=\"language-text\">ParentSize</code>, <code class=\"language-text\">ScaleSVG</code> 和 <code class=\"language-text\">withScreenSize</code>。從名稱很簡單可以看出功能，這邊我採用 <code class=\"language-text\">ParentSize</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParentSize</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Radar</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ParentSize</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">index.tsx</code> 中，直接用 <code class=\"language-text\">ParentSize</code> 包住我的 <code class=\"language-text\">Radar</code> component，將其長寬傳入，如此一來，只要 Parent container size 改變了，我的 Radar component 就會根據新傳入的長寬去進行調整。</p>\n<p>有了 Container 的大小後，接著定義雷達圖的半徑、大小：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> xMax <span class=\"token operator\">=</span> width <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> yMax <span class=\"token operator\">=</span> height <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>xMax<span class=\"token punctuation\">,</span> yMax<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> radialScale <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">scaleLinear</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  range<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>degrees<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> yScale <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">scaleLinear</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  range<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webs <span class=\"token operator\">=</span> <span class=\"token function\">genAngles</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token function\">genPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonPoints <span class=\"token operator\">=</span> <span class=\"token function\">genPolygonPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">yScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊基本上只要用過 D3 的人都會覺得熟悉，在真正渲染圖表前，會需要依照資料內容、長度等等製作適當的 scale 函式，來映射適當的元素大小到圖表上。</p>\n<p>雷達圖需要知道的不外乎是資料所在的角度（radialScale）與半徑位置（yScale），visx 的 <code class=\"language-text\">@visx/scale</code> 提供幾種 scale 函式供你使用，基本上他就是在 <a href=\"https://github.com/d3/d3-scale\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-scale</a> 上外加一層 wrapper。</p>\n<p>而雷達本身的點與線段（<code class=\"language-text\">genAngles</code>, <code class=\"language-text\">genPoints</code>, <code class=\"language-text\">genPolygonPoints</code>），基本上都是基本的數學運算，跟 visx 本身關係不大，這邊不詳述細節，可以到<a href=\"https://codesandbox.io/s/simpleradar-aqi-t1qjl?fontsize=14&hidenavigation=1&theme=dark&view=preview\">\n<img alt=\"Edit SimpleRadar-AQI\" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a>查看實際程式碼。</p>\n<p>scale 函式也準備就緒後，就可以來創建雷達圖表本身了：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> Radar <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>visx 的元件基本上都預期你將其 render 在 <code class=\"language-text\">svg</code> 元素內。</p>\n<p>接著載入幾個建立雷達圖需要的 packages：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Group <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/group\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Line<span class=\"token punctuation\">,</span> LineRadial <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/shape\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@visx/text\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Group</code>, <code class=\"language-text\">Line</code> 與 <code class=\"language-text\">Text</code> 基本對應 svg 內的 <code class=\"language-text\">g</code>, <code class=\"language-text\">line</code> 和 <code class=\"language-text\">text</code>；<code class=\"language-text\">LineRadial</code> 則是 visx 提供的 <a href=\"https://airbnb.io/visx/docs/shape\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shape</code> 元件</a>。</p>\n<p>組合起來的 render function：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>background<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">height</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">rx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">14</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Group</span></span> <span class=\"token attr-name\">top</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> margin<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>levels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LineRadial</span></span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">web-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">data</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>webs<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">angle</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">radialScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">radius</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> levels<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>silver<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">strokeLinecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Line</span></span>\n          <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">radar-line-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">from</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>zeroPoint<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">to</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>silver<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span>\n          <span class=\"token attr-name\">textAnchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">verticalAnchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">dx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">dy</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>polygon</span>\n      <span class=\"token attr-name\">points</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonPoints<span class=\"token punctuation\">.</span>pointString<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>orange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">fillOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>orange<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>polygonPoints<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n        <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">radar-point-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">cx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">cy</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">r</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>pumpkin<span class=\"token punctuation\">}</span></span>\n      <span class=\"token punctuation\">/></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Group</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>到這邊可以發現，你就是在寫 React 而已，把 visx 提供的 component 堆疊到 <code class=\"language-text\">svg</code> 元素中，然後把 data 當作 props 傳入即可，不用再去思考什麼 <code class=\"language-text\">d3.select</code>，更不用理解 D3 中 <code class=\"language-text\">enter/exit</code> 等資料更新狀態。</p>\n<p>到這邊為止就能繪製出這樣的圖表：</p>\n<p><img src=\"/image/simple-AQI.png\" alt=\"simple-AQI\"></p>\n<h3 id=\"增加資料切換與-tooltip-使用\" style=\"position:relative;\"><a href=\"#%E5%A2%9E%E5%8A%A0%E8%B3%87%E6%96%99%E5%88%87%E6%8F%9B%E8%88%87-tooltip-%E4%BD%BF%E7%94%A8\" aria-label=\"增加資料切換與 tooltip 使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>增加資料切換與 tooltip 使用</h3>\n<p>在上一步中，只有繪製一份資料的圖表，現在是時候把六個直轄市的資料都放進來，並且加上 tooltip 來呈現詳細資訊，這樣才是一個合格的資訊圖表。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDataFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">,</span> setSelectedIdx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">[</span>selectedIdx<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>info <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更新資料的部分，直接用 <code class=\"language-text\">useState</code> 去更改要傳入給 component 的 props 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Selector</span></span> <span class=\"token attr-name\">setSelectedIdx</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>setSelectedIdx<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">apiData</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>apiData<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>可以與其他 react component 結合，這邊我額外實作一個 selector component 來切換六都資料。</p>\n<p>當資料切換，<code class=\"language-text\">setSelectedIdx</code> 被呼叫，component 重新 render，所有 <code class=\"language-text\">svg</code> 內我們堆疊的 component 也都會進行更新，就是 React 的邏輯。</p>\n<p>而 tooltip 的部分，可以利用 <a href=\"https://airbnb.io/visx/docs/tooltip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">@visx/tooltip</code></a> 來完成，<code class=\"language-text\">@visx/tooltip</code> 跟目前主流的 react 套件一樣，提供 hook 與 HOC 兩種方法可供使用：</p>\n<p>Hooks: <code class=\"language-text\">useTooltip()</code>, HOC: <code class=\"language-text\">withTooltip()</code></p>\n<p>這次的範例我採用 Hooks：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    tooltipData<span class=\"token punctuation\">,</span>\n    tooltipLeft<span class=\"token punctuation\">,</span>\n    tooltipTop<span class=\"token punctuation\">,</span>\n    tooltipOpen<span class=\"token punctuation\">,</span>\n    showTooltip<span class=\"token punctuation\">,</span>\n    hideTooltip\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleMouseOver <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">coords<span class=\"token punctuation\">,</span> datum</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">showTooltip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        tooltipLeft<span class=\"token operator\">:</span> coords<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n        tooltipTop<span class=\"token operator\">:</span> coords<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n        tooltipData<span class=\"token operator\">:</span> datum\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>showTooltip<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useTooltip()</code> 回傳 tooltip 內的資料、位置、現在開啟與否，以及控制顯示與隱藏 tooltip 的函式。搭配一些 event handler 就能輕鬆達成 tooltip 功能。</p>\n<p>至於 tooltip 本身的元件，並不是由 Hooks 回傳，得從 <code class=\"language-text\">@visx/tooltip</code> 中載入 <code class=\"language-text\">Tooltip</code>。此外，這個 <code class=\"language-text\">Tooltip</code> 元件其實蠻雷的，他跟其他的 visx component 不同，不是讓你繪製在 <code class=\"language-text\">svg</code> 內，而是 render 出一個 <code class=\"language-text\">div</code>，要小心不要跟其他 component 一起放到 <code class=\"language-text\">svg</code> 內了。</p>\n<p>另外，<code class=\"language-text\">Tooltip</code> 使用 <code class=\"language-text\">position: absolute</code> 來控制位置，這代表著你必須需要提供他一個 Wrapper 是 <code class=\"language-text\">position: relatieve</code>，才能正確地顯示相對位置，這並不是這麼好調整，算是 visx 我使用起來覺得有待改善的部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> position<span class=\"token operator\">:</span> <span class=\"token string\">'relative'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* other components */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span>tooltipOpen <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span>\n      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">top</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipTop <span class=\"token operator\">+</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">left</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipLeft <span class=\"token operator\">+</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>tooltipStyles<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>tooltipData<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Tooltip</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>此步驟成果如下：</p>\n<p><img src=\"/image/select-tooltip.png\" alt=\"selector-tooltip\">\n<a href=\"https://codesandbox.io/s/simpleradar-aqi-with-tooltip-select-data-jjb8v?fontsize=14&hidenavigation=1&theme=dark\">\n<img alt=\"Edit SimpleRadar-AQI (with Tooltip + select data) \" src=\"https://codesandbox.io/static/img/play-codesandbox.svg\">\n</a></p>\n<h3 id=\"使用-react-spring-讓畫面動起來\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-react-spring-%E8%AE%93%E7%95%AB%E9%9D%A2%E5%8B%95%E8%B5%B7%E4%BE%86\" aria-label=\"使用 react spring 讓畫面動起來 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 react-spring 讓畫面動起來</h3>\n<p>基本功能都完成後，就得來加上點動畫，順便體驗看看 visx 所謂的 <strong>un-opinionated on purpose</strong> 是什麼感覺。</p>\n<p>如果是用 D3 繪製圖表，當你要製作動畫時，必須得注意資料的 join 狀態，在沒有了解 <code class=\"language-text\">enter/exit</code> 的概念前，要讓 d3 圖表動起來，會感覺是盲人摸象看不清。</p>\n<p>而使用 visx 的話，基本上你要操控的就是將資料當作 props 傳入的 component，要套上哪一套 react animation library 都可以，我採用 <a href=\"https://www.react-spring.io/docs/hooks/basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a> 來將 polygon 在資料切換時做位移的 transform：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSpring<span class=\"token punctuation\">,</span> animated <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-spring\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>react-spring 的用法也算簡單，提供一個 <code class=\"language-text\">useSpring</code> Hooks 來產生一個 spring（moves data from a -> b）：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> polygonPoints <span class=\"token operator\">=</span> <span class=\"token function\">genPolygonPoints</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">yScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonProps <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> points<span class=\"token operator\">:</span> polygonPoints<span class=\"token punctuation\">.</span>pointString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們想要讓 polygon points 變動時有動畫效果，方法就是透過 <code class=\"language-text\">useSpring</code> 針對 polygon points 生成一個 spring，然後將該 spring 傳入以 <code class=\"language-text\">animated.polygon</code> 取代的 polygon 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>&lt;animated.polygon\n<span class=\"token prefix inserted\">+</span> points={polygonProps.points}\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>&lt;polygon\n<span class=\"token prefix deleted\">-</span> points={polygonPoints.pointString}\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> fill={polygonColor}\n<span class=\"token prefix unchanged\"> </span> fillOpacity={0.3}\n<span class=\"token prefix unchanged\"> </span> stroke={polygonColor}\n<span class=\"token prefix unchanged\"> </span> strokeWidth={1}\n</span>/></code></pre></div>\n<p>每當資料切換，component 重新 render 時，新產生的 spring 就會被傳給 <code class=\"language-text\">animated.polygon</code>，<code class=\"language-text\">react-spring</code> 就會幫我們進行其中的補間動畫。完全不需要思考什麼 data enter, data exit，就是單純的 react component animation：</p>\n<p><img src=\"/image/visx-final-demo.gif\" alt=\"final demo\"></p>\n<h3 id=\"搭配-d3-scale-進行資料與顏色運算\" style=\"position:relative;\"><a href=\"#%E6%90%AD%E9%85%8D-d3-scale-%E9%80%B2%E8%A1%8C%E8%B3%87%E6%96%99%E8%88%87%E9%A1%8F%E8%89%B2%E9%81%8B%E7%AE%97\" aria-label=\"搭配 d3 scale 進行資料與顏色運算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭配 d3-scale 進行資料與顏色運算</h3>\n<p>最後再加上一點顏色變化，也試試看 D3 與 visx 的搭配。</p>\n<p>以 d3-scale 來負責顏色的運算，讓 visx 負責圖表元件的渲染：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> scaleSequential <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-scale\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> max <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-array\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> interpolateOrRd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-scale-chromatic\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 <code class=\"language-text\">scaleSequential</code> 搭配 <code class=\"language-text\">interpolateOrRd</code> 來對應不同 AQI 的數值顏色。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> AQIvalue <span class=\"token operator\">=</span> apiData<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> prev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  acc<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> colorScale <span class=\"token operator\">=</span> <span class=\"token function\">scaleSequential</span><span class=\"token punctuation\">(</span>interpolateOrRd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>AQIvalue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> polygonColor <span class=\"token operator\">=</span> <span class=\"token function\">colorScale</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的程式碼可以看出，這邊我們單純的運用資料與 d3 packages 進行運算，產出的顏色直接當作 props 傳入 visx 元件即可完成我們想要的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animated.polygon</span>\n  <span class=\"token attr-name\">points</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonProps<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">fill</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonColor<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">fillOpacity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">stroke</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>polygonColor<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">strokeWidth</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>如此一來就大功告成啦！完整版程式碼請參考：</p>\n<iframe src=\"https://codesandbox.io/embed/simpleradar-aqi-with-tooltip-select-data-react-spring-item3?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"SimpleRadar-AQI (with Tooltip + select data)  (react-spring)\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>visx 的使用體驗蠻好的，提供底層的元件讓你自己組裝，搭配上 d3 方便的資料處理套件，基本上可以用來建造屬於你們自己 team 內的 chart library。</p>\n<p>雖然已經開發三年，但感覺得出來還是有不少功能需要加入或改善，他們的 maintainer 目前還算蠻積極在回應 issue，若是看到這邊的讀者有興趣，歡迎去玩玩看，翻翻他們的程式碼，說不定也有你能貢獻的地方！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/airbnb/visx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">visx</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introducing visx from Airbnb</a></li>\n<li><a href=\"https://vis.baidu.com/chartusage/radar/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECharts 數據可視化實驗室</a></li>\n</ol>","id":"c53702ba-6ae8-5070-be74-c3f9a8386736","fields":{"slug":"datavis-visx"},"frontmatter":{"date":"2020-10-10T13:41:40.000Z","title":"使用 visx 製作資料圖表-台灣六都即時空氣品質指標","tags":["data visualization","visx","Airbnb","javascript","AQI"],"type":"tech","slug":"datavis-visx"},"timeToRead":14},"type":"tech"}},"staticQueryHashes":["2123680655"]}