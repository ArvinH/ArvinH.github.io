{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/webvr-d-3","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/JDqrw7b5knk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">教練 傑利 - 下雨的午後</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/JDqrw7b5knk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Q2 的時候稍微玩了一下 WebVR，主要是瞭解了 Mozilla 主導推出的 A-Frame，驚訝於其簡單方便的 API 設計外，也一直在想還能做什麼有趣的應用，直到最近在構思 D3 的一些範例時，\n才突然又再想起 WebVR：既然 A-Frame 提供了一系列的 VR DOM object，而 D3.js 又能操作 DOM，那理論上一起使用是沒有問題的。</p>\n<p>果不其然，稍稍在網路搜尋一下就看到 WSJ 的這篇 <a href=\"http://graphics.wsj.com/3d-nasdaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Is the Nasdaq in Another Bubble?</a></p>\n<p>超酷的呀，視覺化股票歷史資料，做成雲霄飛車般的閱讀體驗，雖然我個人覺得資料視覺化應該要以宏觀角度來讓他人清楚了解整個脈絡，VR 的「個人」視角，限制了這部分的特性，但若以 Story telling 的角度來看，VR 加上數據視覺化反倒為使用者帶來更豐富生動的閱讀經驗，不僅僅是瞭解內容，過程有趣才能在碎片資訊爆炸的時代抓住人們的眼球！</p>\n<p>在這個想法下就決定來嘗試看看用 A-Frame 與 D3 來製作資料視覺化，雖然還沒辦法做出太絢麗的互動體驗，但出發總要有個開始，就先試試最簡單的 Bar Chart 吧！</p>\n<p>最後會長這樣：</p>\n<p><img src=\"/image/webvr-datavis.png\" alt=\"Demo\"></p>\n<h2 id=\"前置作業\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\" aria-label=\"前置作業 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前置作業</h2>\n<p>有摸過 A-Frame 的讀者應該很清楚要建立出一個 VR 場景有多簡單：\n沒摸過的也歡迎回去看這篇 <a href=\"https://blog.arvinh.info/2017/04/01/web-vr-101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebVR 101</a></p>\n<p data-height=\"414\" data-theme-id=\"29194\" data-slug-hash=\"RLGmvp\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-I\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/RLGmvp/\">WebVR-D3-I</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"加入-d3\" style=\"position:relative;\"><a href=\"#%E5%8A%A0%E5%85%A5-d3\" aria-label=\"加入 d3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加入 D3</h2>\n<p>回想一下，一般在使用 D3 的時候，就是選取出你要操作的 svg 元件，接著將進入 <code class=\"language-text\">enter()</code> 狀態的資料 append 上去，然後調整 Style 與 attributes。</p>\n<p>那在 A-Frame 當中我們也可以如法泡製：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 就像是以前選取 svg 一樣，只是在 VR 中我們要選取 a-scene</span>\n<span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-scene'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 處理資料與 DOM 元素的方式與平時操作 d3 相同，一樣的 enter/update/exit 狀態</span>\n<span class=\"token keyword\">const</span> bars <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-box.bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 真正 append 資料並設定屬性</span>\nbars<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">classed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span>  i <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> z   \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'depth'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// hscale 就只是個 d3 的 scaleLinear 映射函數</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>首先我們 select 出 <code class=\"language-text\">a-scene</code>，接著在其下面預先將資料 binding 到擁有 <code class=\"language-text\">bar</code> 這個 classname 的 <code class=\"language-text\">a-box</code> entity 內（此時還是虛擬的 DOM 物件），最後再呼叫 <code class=\"language-text\">enter()</code> 來真正的將資料 append 到 DOM 上面。</p>\n<p>這邊有兩個小地方需要注意：</p>\n<ol>\n<li>除了寬（width）與高（height）外，還有深度（depth）需要設定，畢竟現在是在 3D 的世界中。</li>\n<li>數值的設定：在 WebVR API 中，回傳的距離資料以 Meter 為單位，因此在 A-frame 中的距離單位也是 Meter，並非一般頁面的 pixel，因此我們的 x, y, z 值記得不能設定太大。</li>\n</ol>\n<p>結果如下：</p>\n<p data-height=\"301\" data-theme-id=\"29194\" data-slug-hash=\"aLmgNd\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-II\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/aLmgNd/\">WebVR-D3-II</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>簡單幾行 code 就能夠在 VR 的世界內呈現資料圖表囉！</p>\n<h2 id=\"互動元素\" style=\"position:relative;\"><a href=\"#%E4%BA%92%E5%8B%95%E5%85%83%E7%B4%A0\" aria-label=\"互動元素 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>互動元素</h2>\n<p>平面的 D3 能夠互動，VR 版當然也要。</p>\n<p>在 VR 裡面的 Cursor 基本上是跟著你的攝影機（camera），你可以直接用 A-Frame 提供的 entity，就可以有基本的 gaze-based cursor（凝視型），顧名思義，也就是以你的視線為中心的 cursor，並且可以觸發 mouseenter, mouseleave 等事件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>camera<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>cursor<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>cursor<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>camera<span class=\"token operator\">></span></code></pre></div>\n<p>或是自己 create 一個 cursor entity：<a href=\"https://aframe.io/docs/0.7.0/components/cursor.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity position<span class=\"token operator\">=</span><span class=\"token string\">\"0 1 0\"</span> rotation<span class=\"token operator\">=</span><span class=\"token string\">\"0 0 0\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity camera look<span class=\"token operator\">-</span>controls wasd<span class=\"token operator\">-</span>controls<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity cursor<span class=\"token operator\">=</span><span class=\"token string\">\"fuse: true; fuseTimeout: 500\"</span>\n                position<span class=\"token operator\">=</span><span class=\"token string\">\"0 0 -2\"</span>\n                geometry<span class=\"token operator\">=</span><span class=\"token string\">\"primitive: ring; radiusInner: 0.02; radiusOuter: 0.027\"</span>\n                material<span class=\"token operator\">=</span><span class=\"token string\">\"color: black; shader: flat\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span></code></pre></div>\n<p>要注意的是，由於我們需要設定 cursor 與 camera 的位置，所以將這兩個 entity 都包在另一個 entity 下，並由最上層的 entity 來設定初始 position 會較為方便。</p>\n<p>而在 cursor 這個 entity 上我們設定了幾個屬性：</p>\n<ul>\n<li>cursor：設定為 fuse: true，即代表 gaze-based cursor，會跟著你視線移動，並且當你「盯著」某個點一段時間（fuseTimeout）後，會觸發 <code class=\"language-text\">Click</code> event。</li>\n<li>material：可以設定其顏色材質。</li>\n<li>geometry：設定其物理形狀。</li>\n</ul>\n<p>當然如果你是用 Vive, daydream 的 controller，也已有其相對應的 entity 可以使用，可以參考這份文件 (laser-controls)[https://aframe.io/docs/0.7.0/components/laser-controls.html]</p>\n<p>設定好 cursor 後，接著就是在我們的 bar 上面設置 event listener 了。</p>\n<p>在剛剛的 attr 後面再接著利用 <code class=\"language-text\">on</code> 來設定 listener：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">bars<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">classed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span>  i <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'depth'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseenter\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-text\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'align'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">0 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token function\">hscale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scale'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1 1 1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dataText<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>d<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseleave\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a-text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面做的事情很簡單，在 <code class=\"language-text\">mouseenter</code> 時，我們 append 上一個 <code class=\"language-text\">&lt;a-text></code>，並設定顏色位置等等，然後套用一個 <code class=\"language-text\">transition</code> 動畫來改變 bar 的顏色，<code class=\"language-text\">mouseleave</code> 時把 style 還原。</p>\n<p>如此一來你就有了一個可以互動的 VR bar chart 了！</p>\n<p data-height=\"341\" data-theme-id=\"29194\" data-slug-hash=\"eGdwxz\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-II\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/eGdwxz/\">WebVR-D3-II</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"component-化\" style=\"position:relative;\"><a href=\"#component-%E5%8C%96\" aria-label=\"component 化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component 化</h2>\n<p>我做到這邊的時候突然有個想法，既然 A-frame 可以讓我們自己客製化 Entity 內要放的 component，那我們能不能將剛剛的 code 全部塞進 component 內呢？</p>\n<p>還記得在 <a href=\"https://blog.arvinh.info/2017/04/01/web-vr-101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebVR 101</a> 中有記錄到我們可以透過 AFRAME 這個全域變數來註冊 component，並放入 <code class=\"language-text\">&lt;a-entity></code> 中：\n<a href=\"https://aframe.io/docs/0.7.0/core/component.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reference</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsbarchart.js\"><pre class=\"language-jsbarchart.js\"><code class=\"language-jsbarchart.js\">AFRAME.registerComponent(&#39;barchart&#39;, {\n    schema: {\n        json: {\n            default: {\n                    key: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;],\n                    value: [19, 80, 30, 15, 55]\n                }\n            }\n    },\n    init: function () {\n        this.generate();\n    },\n\n    generate: function () {\n        const json = this.data.json;\n        const el = this.el;\n        // default alpha for bars\n        const alpha = 0.6;\n        const data = json.value;\n        const dataText = json.key;\n        // Select the current enity object just like an svg\n        const currentEntity = d3.select(el);\n\n        // we use d3&#39;s enter/update/exit pattern to draw and bind our dom elements\n        const bars = currentEntity.selectAll(&#39;a-box.bar&#39;).data(data);\n        /*\n        ... \n        這邊放入上面所撰寫的 D3 相關的程式碼\n        */\n    }\n    });</code></pre></div>\n<ul>\n<li>schema: 這邊是用來設定此 entity 的 properties，像是能透過設置 json 屬性來傳入資料 <code class=\"language-text\">&lt;a-entity barchart=\"json: data.json\">&lt;/a-entity></code>。同時你也可以在這邊設定 default 的屬性值。</li>\n<li>init: Component 在初始階段會呼叫此函數一次，用來初始變數或是 component 的狀態，以我們這邊的例子就是用來呼叫 d3 繪製圖表。\n（Component 還有許多 lifecycle：update, remove, tick, play, pause, updateSchema，可以參考<a href=\"https://aframe.io/docs/0.7.0/core/component.html#overview-of-methods\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>）</li>\n<li>generate: 這邊就是我們用來處理 D3 圖表的函式。</li>\n</ul>\n<p>在這邊比較需要了解的是 schema property 與 Component 本身的 HTML Element 的存取方式：\n我們在 schema 中定義的屬性都會存在於 <code class=\"language-text\">this.data</code> 中，因此我們可以透過 <code class=\"language-text\">this.data.json</code> 來取得 json 屬性的資料；而 <code class=\"language-text\">this.el</code> 則是回傳 Component 本身的 HTML Element，我們要用來給 D3 進行 DOM object 操作的。</p>\n<p>當你註冊好 component 後，在我們的 HTML 中就只需要放置 <code class=\"language-text\">&lt;a-entity barchart>&lt;/a-entity></code> 就可以產生圖表了！</p>\n<p><span style=\"color:red;\">（唯一要注意的是，你的 component 一定要在 <code class=\"language-text\">&lt;a-sene></code> render 之前就處理好，最好是放在 <code class=\"language-text\">&lt;head></code> 的位置。</span></p>\n<p>你之後只要將剛剛創建的 component export 出去，就可以讓任何人透過 <code class=\"language-text\">&lt;a-entity barchart>&lt;/a-entity></code> 的方式來使用。\n而且透過 property 的設定，我們可以傳入不同資料，甚至是顏色設定等等的屬性，來進行客製化的圖表！</p>\n<p>像是可以產生一個 104 年台灣年齡人口數統計長條圖：</p>\n<p>只要在 html 中加入\n<code class=\"language-text\">&lt;a-entity barchart=\"json: https://cdn.rawgit.com/ArvinH/f47671a9ff33b6719b043945d36054ac/raw/09a6ea23ee40d4a83205eef6d4fd4e5efa072c2b/104life.json\">&lt;/a-entity></code></p>\n<p>稍微修改一下 component 內的 <code class=\"language-text\">init</code> 函數，因為從 entity 傳來的 property 預設會是 string 的 type：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">init</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>json <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parsedJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            self<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>parsedJson <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fallback to default</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parsing failed'</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>順便加入一些 color 的處理，成果如下：</p>\n<p data-height=\"346\" data-theme-id=\"29194\" data-slug-hash=\"oGYvbK\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"WebVR-D3-IV\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/oGYvbK/\">WebVR-D3-IV</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然只是簡單的實作一個 Barchart，但透過這次的小嘗試，大概了解該怎麼樣用 D3 與 A-Frame 寫出一個 WebVR Data visulization Component 後，就可以有許多東西可以玩了！或許可以結合現有的 3D modal，並將開放資料用不同的模型呈現，製作出一個 3D VR 版的城市圖表，應該會很有趣！加上他包裹成 Component 的方式非常方便，在社群的努力下，實作上勢必會更加輕鬆（github 上已經有許多人釋出的 component 可以使用）。</p>\n<p>預計下一篇會再來做個有趣並複雜一點的 VR 資訊圖表！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://aframe.io/docs/0.7.0/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-Frame doc</a></li>\n<li><a href=\"https://github.com/ngokevin/kframe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kframe</a></li>\n<li><a href=\"https://bl.ocks.org/enjalot/8be32e6f1f32920ba841\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe + d3 test</a></li>\n<li><a href=\"https://blog.arvinh.info/2017/04/01/web-vr-101/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebVR 101</a></li>\n<li><a href=\"http://graphics.wsj.com/3d-nasdaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Is the Nasdaq in Another Bubble?</a></li>\n</ol>","fields":{"slug":"webvr-d-3"},"frontmatter":{"title":"D3v4 工作坊 - WebVR 與資料視覺化","date":"09-23-2017","tags":["web vr","d3","d3v4","data visualization"]},"timeToRead":9}},"pageContext":{"slug":"webvr-d-3","prev":{"excerpt":"『In theory, there is no difference between theory and practice. But, in practice, there is.』- Jan LA van de Snepscheut","html":"<blockquote>\n<p>『In theory, there is no difference between theory and practice. But, in practice, there is.』- Jan LA van de Snepscheut</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>HTML 5 的 Canvas 是許多人做動畫、做遊戲常常會用到的工具，此外，如果是進行資料視覺化，在繪製大量的圖形與動畫時，Canvas 可以為你的 performance 帶來很大的改善，從 <a href=\"http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3.js 實戰 － Canvas 把我的視覺化變「快」了！</a> 中最後的範例就可以看得出來差異。</p>\n<p>總之，身為前端工程師的我卻沒有實作做過 Canvas 相關應用，在羞愧之餘也得奮發向上扳回劣勢才可以，所以決定把上次用 d3 與 svg 繪製的颱風路徑圖重新用 Canvas 重寫一遍，也透過這篇文章做個紀錄。</p>\n<h2 id=\"canvas-基礎概念---繪圖\" style=\"position:relative;\"><a href=\"#canvas-%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5---%E7%B9%AA%E5%9C%96\" aria-label=\"canvas 基礎概念   繪圖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canvas 基礎概念 - 繪圖</h2>\n<p>Canvas 顧名思義就是一塊畫布，只不過是生存在你的 HTML DOM tree 中，讓你透過 Javascript 在上面揮灑創意。</p>\n<p>Canvas 就像一般的 DOM 元素一樣，有 <code class=\"language-text\">width</code> 與 <code class=\"language-text\">height</code> 等屬性可以設定，也能透過 CSS 來操作他的樣式，而這些樣式並不會影響到你在上面所進行的任何繪製功能。\n不過要注意一下，如果你是透過 CSS 去更改寬度與高度，他會放大 Canvas 元素本身，而不會放大 Canvas 內的像素，因此你在 Canvas 內繪製的圖形可能會變形。</p>\n<p><code class=\"language-text\">&lt;canvas id=\"worldMapCanvas\" width=\"1000\" height=\"600\"> Your browser is too old... &lt;/canvas></code></p>\n<p>有了 Canvas 元素後，我們要取得他的 <strong>渲染環境（rendering context）</strong>，之後必須要透過這個 Context 才能進行繪圖：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worldMapCanvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接下來的一切繪圖操作就會跟著你取得的 context 進行，透過一連串 Canvas API，你可以繪製出如下的圖案：</p>\n<p data-height=\"374\" data-theme-id=\"29194\" data-slug-hash=\"brLmqX\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo - define graph\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/brLmqX/\">First demo - define graph</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>在 <code class=\"language-text\">ball.draw()</code> 這個函數當中，我用了五個最基本的 Canvas API 來進行繪製：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">ctx.beginPath()</code>:\n<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 上的說明是：產生一個新路徑，產生後再使用繪圖指令來設定路徑。\n白話一點就是告訴 Canvas 說你現在要開始繪製線段了喔！請幫我開啟一個新的次路徑清單（sub-path），幫忙紀錄接下來我繪製的路線。\n基本上在你每次繪製新的圖形或線段的時候，都需要呼叫一次 <code class=\"language-text\">beginPath()</code>，否則 Canvas 會將你先前的繪製的部分與後續你想繪製的新圖型當作同一個連續的圖。\n來個範例（沒有使用 beginPath() 就直接想繪製新圖形時）：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"LjQgqg\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo - beginPath\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/LjQgqg/\">First demo - beginPath</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>可以發現我明明在 <code class=\"language-text\">lineTo()</code> 後有設定不同的 <code class=\"language-text\">strokeStyle</code>，但最後都被 <span style=\"color:#B90CB3\">#B90CB3</span> 給取代了，這就是因為沒有呼叫 beginPath 來對線段做區隔。</p>\n<p>加上 <code class=\"language-text\">beginPath()</code> 後，結果就會是我們想要的了：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"ayqRMG\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo - addBeginPath\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/ayqRMG/\">First demo - addBeginPath</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n</li>\n<li>\n<p><code class=\"language-text\">ctx.arc(x,y,raidus,startAngle,endAngle,counterclockwise)</code>:\n就是畫出一個弧線，前兩個參數設定中心點的位置，接著設定半徑、起始點（起始角度）、結束點（結束角度）與方向（順時針或逆時針：</p>\n<p><img src=\"/image/canvasarc.png\" alt=\"Canvas arc\"></p>\n</li>\n<li>\n<p><code class=\"language-text\">ctx.beginPath()</code> 的範例中還有用到 <code class=\"language-text\">moveTo()</code>, <code class=\"language-text\">lineTo()</code> 與 <code class=\"language-text\">stroke()</code>，也都是很常用的 API，但從字面上就很好理解:</p>\n<ul>\n<li>moveTo(x, y): 移動畫筆到 point x,y</li>\n<li>lineTo(x, y): 從現在畫筆位置畫一條直線到 point x,y（但光呼叫 <code class=\"language-text\">lineTo()</code> 還不會畫出線段，需透過 <code class=\"language-text\">stroke()</code> 等相似 API）</li>\n<li>stroke(): 實際下筆繪畫的 API</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ctx.closePath()</code>:\nclosePath 其實在這邊不需要，他主要用途是在於幫你把你在 beginPath 後創建的 sub-path 做連接的動作，像是把第一條 path 的頭與最後一條 path 的尾巴接起來，但你也可以自己再多畫一條線將區域圍起來，只是稍嫌麻煩。\n從字面上來看，<code class=\"language-text\">closePath()</code> 很像是呼叫後就能幫你斷開路徑的連續性，保持後續繪製圖型的獨立性，但實際上沒有這個功用，你需要透過 <code class=\"language-text\">beginPath()</code> 來完成。</li>\n</ul>\n<p>還有很多 canvas API 的介紹都可以在 MDN 上查詢到，有的教學附有中文呦！<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Canvas tutorial</a></p>\n<h2 id=\"canvas-基礎概念---動畫\" style=\"position:relative;\"><a href=\"#canvas-%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5---%E5%8B%95%E7%95%AB\" aria-label=\"canvas 基礎概念   動畫 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Canvas 基礎概念 - 動畫</h2>\n<p>先前利用 D3 與 svg 做動畫時，是使用 <code class=\"language-text\">d3.timer</code> 來控制時間，並且更改 svg 元素的 attribute 來移動物件，進而達到動畫效果，但是在 Canvas 的世界中，沒有移動的這種概念，你如果想要讓一個在 Canvas 上的物件移動，你需要的是重新繪製在不同位置的物件，在快速的 frame update 下，人眼看到的就會是一連串動畫了。這原理就跟一般的影片與動畫相同，都是透過每一次 frame 的更新，來呈現出連續畫面。</p>\n<p>那要如何不斷地去更新 Canvas 呢？你可以透過 <code class=\"language-text\">setInterval</code> 也能夠用現在較為人知的 <code class=\"language-text\">requestAnimationFrame</code> 來處理，使用 <code class=\"language-text\">setInterval</code> 你可以直接控制動畫的更新速率，然而在效能上還是採用 <code class=\"language-text\">requestAnimationFrame</code> 較好，是以網頁頁面的更新速度為基準。</p>\n<p>一個採用 <code class=\"language-text\">requestAnimationFrame</code> 的簡單動畫如下：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"yoovpx\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"First demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/yoovpx/\">First demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<div class=\"gatsby-highlight\" data-language=\"jsdraw\"><pre class=\"language-jsdraw\"><code class=\"language-jsdraw\">    ctx.clearRect(0,0, canvas.width, canvas.height);\n    ball.draw();\n    // ... calculate position\n\n    raf = window.requestAnimationFrame(draw);</code></pre></div>\n<p>關鍵只有兩個地方：</p>\n<ul>\n<li>在每次 requestAnimationFrame 執行時，你都要清空現在的 Canvas 畫面重新繪製 <code class=\"language-text\">ctx.clearRect(0,0, canvas.width, canvas.height);</code>。</li>\n<li>requestAnimationFrame 是必須自己去呼叫的，所以在我們的 <code class=\"language-text\">draw()</code> 函式中，最後要自己呼叫 raf 來重新 trigger 自己的 draw function。\n你可以像一般的 setInterval 一樣記錄他回傳的 reference，並在適當時間 <code class=\"language-text\">cancelAnimationFrame</code>。</li>\n</ul>\n<h2 id=\"瞭解了-canvas-的基礎知識後可以開始動手今天的主題了\" style=\"position:relative;\"><a href=\"#%E7%9E%AD%E8%A7%A3%E4%BA%86-canvas-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98%E5%BE%8C%E5%8F%AF%E4%BB%A5%E9%96%8B%E5%A7%8B%E5%8B%95%E6%89%8B%E4%BB%8A%E5%A4%A9%E7%9A%84%E4%B8%BB%E9%A1%8C%E4%BA%86\" aria-label=\"瞭解了 canvas 的基礎知識後可以開始動手今天的主題了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>瞭解了 Canvas 的基礎知識後，可以開始動手今天的主題了！</h2>\n<p>由於範例是修改自 <a href=\"https://blog.arvinh.info/2017/07/21/d3-workshop-map/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3v4 工作坊 - React + D3 繪製 svg 動態路線地圖</a>，所以關於資料的取得與格式請參考該篇或是下面 Demo 的程式碼。</p>\n<h2 id=\"地圖\" style=\"position:relative;\"><a href=\"#%E5%9C%B0%E5%9C%96\" aria-label=\"地圖 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>地圖</h2>\n<p>在上一篇 <a href=\"https://blog.arvinh.info/2017/07/21/d3-workshop-map/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3v4 工作坊 - React + D3 繪製 svg 動態路線地圖</a> 中，我們利用 svg path 元素搭配 <code class=\"language-text\">d3.geoPath()</code> 與 <code class=\"language-text\">d3.geo</code> 中的 <code class=\"language-text\">geoMercator()</code> 來繪製世界地圖，那 d3 有辦法幫助我們在 Canvas 上繪製世界圖嗎?</p>\n<p>當然可以！</p>\n<p><code class=\"language-text\">d3.geoPath()</code> 有提供一個 <code class=\"language-text\">context()</code> API，讓你綁定 Canvas 的 context，然後就能傳入路徑資料繪製到 Canvas 上頭：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrendermap\"><pre class=\"language-jsrendermap\"><code class=\"language-jsrendermap\">function renderMap() {\n  const self = this;\n  const canvasNode = d3Select(&#39;#mapCanvas&#39;).node();\n  const context = canvasNode.getContext(&#39;2d&#39;);\n  // 傳入 canvas context 給 geoPath()\n  const path = geoPath().context(context);\n  context.beginPath();\n  // 記得一樣要放入你的映射函數\n  path.projection(this.projection());\n  this.state.worlddata.features.forEach((d, i) =&gt; {\n      context.fillStyle = \n        &#39;rgba(38,50,56,&#39;+ 1 / this.state.worlddata.features.length * i + &#39;)&#39;\n      context.beginPath();\n      // 綁定 Canvas context 的 path 就能將傳入的資料繪製在 Canvas 上頭\n      path(d);\n      context.fill();\n  });\n\n  // add graticules path\n  context.beginPath();\n  path.projection(this.projection());\n  path(this.state.graticule);\n  context.fillStyle = &#39;none&#39;;\n  context.strokeStyle = &#39;#79A09E&#39;;\n  context.stroke();\n  }</code></pre></div>\n<p>Demo: （可以切換模式看 code，或是到<a href=\"https://blog.arvinh.info/2017/07/21/d3-workshop-map/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上一篇</a>看，有許多重複的運算函式）</p>\n<iframe src=\"https://codesandbox.io/embed/w2lp7ml9vw?autoresize=1&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"路徑\" style=\"position:relative;\"><a href=\"#%E8%B7%AF%E5%BE%91\" aria-label=\"路徑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>路徑</h2>\n<p>接著重頭戲是要畫上路徑，這邊會複雜許多，我盡力說明，但直接看 code 會清楚一點。</p>\n<p>這邊說明在 Canvas 上繪製動態路線的原理與步驟：</p>\n<h3 id=\"線段動畫原理\" style=\"position:relative;\"><a href=\"#%E7%B7%9A%E6%AE%B5%E5%8B%95%E7%95%AB%E5%8E%9F%E7%90%86\" aria-label=\"線段動畫原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>線段動畫原理：</h3>\n<span style=\"color: red\">\n跟 svg 要製作動態路線一樣的原理，我們都是先將線畫好後，利用線段的 **line dash** 與 **dash offset** 來製作出路徑的動畫效果。（可參考 [上一篇](https://blog.arvinh.info/2017/07/21/d3-workshop-map/)）\n</span>\n<p>因此在繪製上的步驟也差不多，只是實作的細節不同罷了：</p>\n<ul>\n<li>Step 1. 繪製線段的入口點：</li>\n</ul>\n<p>既然一樣是利用 <strong>line dash</strong> 與 <strong>dash offset</strong>，那我們也就需要取得路徑的長度，才能夠設定 <code class=\"language-text\">lineDash</code> 麻，但是你如果在前面的範例中有打開過 devTool，就知道根本看不到 Canvas 上面你繪製的物件，每個線段也都是用各點的 x, y 值去連接，這樣要怎麼知道整個線段長呢？！</p>\n<p>難道要每一段每一段的線長度加總起來嗎？或許是個方法，但太麻煩了！</p>\n<p>我們可以直接利用 D3 創建一個 <code class=\"language-text\">invisiablePath</code>，然後透過 <code class=\"language-text\">getTotalLength()</code> 來取得線段長度，並利用在 Canvas 上頭！</p>\n<p><code class=\"language-text\">renderLine()</code> 是一切的起點，我們在這邊創建隱藏的 svg path 好計算長度，並呼叫 <code class=\"language-text\">requestAnimationFrame</code> 進行 loop，傳入 <code class=\"language-text\">updateLine</code> 函式來產生動畫。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">renderLine</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvasCtx<span class=\"token punctuation\">,</span> typhoonPath<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> typhoonId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pathCoordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    typhoonPath<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        pathCoordinates<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            x<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            y<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> lineFunction <span class=\"token operator\">=</span> <span class=\"token function\">d3Line</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">curve</span><span class=\"token punctuation\">(</span>curveCatmullRom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// use svg path to get length</span>\n    <span class=\"token keyword\">const</span> invisiblePath <span class=\"token operator\">=</span> <span class=\"token function\">d3Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'svg'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">lineFunction</span><span class=\"token punctuation\">(</span>pathCoordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fill'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stroke'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'invisiblePath'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invisibleSVGPath<span class=\"token punctuation\">[</span>typhoonId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> invisiblePath<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>invisibleSVGPath<span class=\"token punctuation\">[</span>typhoonId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTotalLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// this clears itself once the line is drawn</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lineInterval<span class=\"token punctuation\">[</span>typhoonId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateLine</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> canvasCtx<span class=\"token punctuation\">,</span> typhoonPath<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> marker<span class=\"token punctuation\">,</span> typhoonId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Step 3. 更新線段的函式：</li>\n</ul>\n<p>在每一次 requestAnimationFrame trigger 的時候，我們都會呼叫 <code class=\"language-text\">updateLine()</code> 來重新 render canvas，主要進行幾個步驟：</p>\n<ol>\n<li><code class=\"language-text\">defineLine()</code>，定義線段，每一次的 loop 都需要重新繪製線段。<a href=\"#step4\"> 跳至 Step 4 看詳細實作</a></li>\n<li>計算目前 <code class=\"language-text\">progress</code>，也就是目前 line offset 要調整到何處，我們是定義一個變數 <code class=\"language-text\">this.speed</code> 與 <code class=\"language-text\">this.dir</code> 來控制線段繪製的方向與速度。每一次的 loop 都會增加 <code class=\"language-text\">this.progress</code> 的值，然後丟入 <code class=\"language-text\">this.moveDash()</code> 中來繪製線段的 line dash 與 line dash offset。<a href=\"#step5\"> 跳至 Step 5 看詳細實作</a></li>\n<li>最後，每一次呼叫 <code class=\"language-text\">updateLine</code> 時，我們都會檢查 <code class=\"language-text\">this.progress</code> 是否已經與線段長度相同，代表已經走完一次路線，需要重新開始，這時候我們就需要先將 canvas 清空：<code class=\"language-text\">canvasCtx.clearRect(0,0,1000,600)</code>，表示將 canvasCtx 所持有的渲染環境從位置 (0,0) 開始對寬 1000 與高 600 的 canvas 清空。最後可以利用 <code class=\"language-text\">setTimoue()</code> 來延長一下路徑走完後的時間，讓他不要馬上就清空 canvas 重繪。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsupdateline\"><pre class=\"language-jsupdateline\"><code class=\"language-jsupdateline\">updateLine(canvasCtx, typhoonPath, length, marker, typhoonId) {\n    // define the line\n    this.defineLine(canvasCtx, typhoonPath, marker, typhoonId);\n    this.progress[typhoonId] = this.progress[typhoonId] || 0;\n    if (this.progress[typhoonId] &lt; length) {\n      this.progress[typhoonId] += this.speed;\n      this.moveDash(canvasCtx, typhoonId, typhoonPath, length, marker, this.progress[typhoonId], this.dir);\n      requestAnimationFrame(this.updateLine.bind(this, canvasCtx, typhoonPath, length, marker, typhoonId));\n    } else {\n    \n      canvasCtx.clearRect(0, 0, 1000, 600);\n      this.progress[typhoonId] = 0;\n      setTimeout(() =&gt; requestAnimationFrame(this.updateLine.bind(this, canvasCtx, typhoonPath, 500, marker, typhoonId)), 1000);\n    }\n  }</code></pre></div>\n<ul>\n<li><span id=\"step4\" style=\"\">Step 4. 定義線段的函式：</span></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsdefineline\"><pre class=\"language-jsdefineline\"><code class=\"language-jsdefineline\">defineLine(canvasCtx, typhoonPath, marker, typhoonId) {\n  // define path\n  canvasCtx.beginPath();\n  // start point\n  const startPoint = {\n    x: this.projection()(marker.coordinates)[0],\n    y: this.projection()(marker.coordinates)[1],\n  };\n  // 移動畫筆到起始點\n  canvasCtx.moveTo(startPoint.x, startPoint.y);\n\n  // 將路徑中的每個點與點之間用 lineTo() 連接起來\n  typhoonPath.forEach((path) =&gt; {\n      const x = this.projection()(path.coordinates)[0];\n      const y = this.projection()(path.coordinates)[1];\n      canvasCtx.lineTo(x, y);\n  });\n  // 設定 style\n  canvasCtx.lineWidth = 2;\n  canvasCtx.strokeStyle = &#39;rgba(53, 247, 14,0.7)&#39;;\n}</code></pre></div>\n<ul>\n<li><span id=\"step5\" style=\"\">Step 5. 實作更新 LineDash 的函式：</span></li>\n</ul>\n<p>單純的 moveDash 很簡單，只要透過 <code class=\"language-text\">setLineDash()</code>，將線段長度傳入，定義好你的 line dash 要多長，接著我們利用 Step 3 中提到的 <code class=\"language-text\">this.speed</code> 與 <code class=\"language-text\">this.dir</code> 來計算出現在要將 <code class=\"language-text\">lineDashOffset</code> 設為多少。</p>\n<p>這邊有個有趣的 API，<code class=\"language-text\">globalCompositeOperation</code>，它可以用來決定你目前的 canvas context 渲染環境中，每個新繪製的物件與其他舊有的物件之間的階層關係，像是我這邊設置的 <code class=\"language-text\">destination-over</code> 就代表 <strong>新繪製的圖形會被壓在舊的圖形下方</strong>，至於為什麼我這邊要設置這個參數呢？待會介紹颱風圈實作時你就知道了！更多關於 <code class=\"language-text\">globalCompositionOperation</code> 的介紹可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN globalCompositeOperation</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsmovedash\"><pre class=\"language-jsmovedash\"><code class=\"language-jsmovedash\">moveDash = (canvasCtx, typhoonId, typhoonPath, length, marker, frac, dir = -1) =&gt; {\n  // default direction right-&gt;left\n  // 設定 line dash 為線段長\n  canvasCtx.setLineDash([length]);\n  // 利用 `this.progress (frac)` 來慢慢增加 line-dash offset，製作出線段動態\n  canvasCtx.lineDashOffset = dir * (frac + length);\n  canvasCtx.globalCompositeOperation = &#39;destination-over&#39;;\n  canvasCtx.stroke();\n}</code></pre></div>\n<p>到這裡為止，你已經創建出與上次相同的動態路線地圖，只是是採用 Canvas 實作，Demo：</p>\n<iframe src=\"https://codesandbox.io/embed/4j3r5yv74w?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"暴風圈\" style=\"position:relative;\"><a href=\"#%E6%9A%B4%E9%A2%A8%E5%9C%88\" aria-label=\"暴風圈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>暴風圈</h2>\n<p>當然不能單純只有線段，還是需要有個跟著線段跑的颱風才比較有 fu。</p>\n<p>你可以會想說，那就每次 <code class=\"language-text\">moveDash()</code> 執行的時候，順便也繪製上一個圓形的暴風圈不就好了嗎？</p>\n<p>接著就這麼做了：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmovedash\"><pre class=\"language-jsmovedash\"><code class=\"language-jsmovedash\">moveDash = (canvasCtx, typhoonId, typhoonPath, length, marker, frac, dir = -1) =&gt; {\n  // default direction right-&gt;left\n  /* 原本繪製線段的部分 ... */\n  // ...\n  // ..\n  // Move typhoon marker\n  canvasCtx.beginPath();\n  canvasCtx.setLineDash([0]);\n  canvasCtx.lineDashOffset = 0;\n  canvasCtx.lineWidth = 1;\n  canvasCtx.strokeStyle = &#39;rgba(53, 247, 14,0.8)&#39;;\n  canvasCtx.arc(p.x, p.y, 10, 0, Math.PI * 2, true);\n  canvasCtx.closePath();\n  canvasCtx.stroke();\n}</code></pre></div>\n<p>然後就看到下面這個悲劇：</p>\n<iframe src=\"https://codesandbox.io/embed/xjz4n92yq4?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>其實也沒有錯，你的確是畫上圈圈了，但是每一次的 moveDash() 都會畫上一個圈圈，並且會持續留在 Canvas 上，而實際上我們應該每一步都要將前一個圈圈刪除。</p>\n<p>但如果你在這邊加上 <code class=\"language-text\">canvasCtx.clearRect(0, 0, 1000, 600);</code>，就會發現圈圈會正常移動了，但線段不見了...因為 <code class=\"language-text\">moveDash()</code> 並沒有重新繪製線段，只有更改 context 的 line dash。</p>\n<p><img src=\"/image/typhooncircleonly.gif\" alt=\"只剩下圈圈了...\"></p>\n<h3 id=\"解法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95\" aria-label=\"解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法</h3>\n<p>那就多畫一層 Canvas 吧！</p>\n<p>沒有人說過 Canvas 只能有一層，你可以疊加一層 Canvas 上去，讓跟著線段移動的暴風圈獨自一個圖層，這樣一來就不會互相影響了！</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmovedash-multilayer\"><pre class=\"language-jsmovedash-multilayer\"><code class=\"language-jsmovedash-multilayer\">moveDash = (canvasCtx, canvasTyphoonMarkerCtx, typhoonId, typhoonPath, length, marker, frac, dir = -1) =&gt; {\n  // default direction right-&gt;left\n  canvasCtx.setLineDash([length]);\n  canvasCtx.lineDashOffset = dir * (frac + length);\n  canvasCtx.globalCompositeOperation = &#39;destination-over&#39;;\n  canvasCtx.stroke();\n  const p = this.invisibleSVGPath[typhoonId].getPointAtLength(frac);\n  canvasCtx.save();\n  // Move typhoon marker\n  canvasTyphoonMarkerCtx.clearRect(0, 0, 1000, 600);\n  canvasTyphoonMarkerCtx.beginPath();\n  canvasTyphoonMarkerCtx.setLineDash([0]);\n  canvasTyphoonMarkerCtx.lineDashOffset = 0;\n  canvasTyphoonMarkerCtx.lineWidth = 1;\n  canvasTyphoonMarkerCtx.strokeStyle = &#39;rgba(53, 247, 14,0.8)&#39;;\n  canvasTyphoonMarkerCtx.arc(p.x, p.y, 10, 0, Math.PI * 2, true);\n  canvasTyphoonMarkerCtx.closePath();\n  canvasTyphoonMarkerCtx.stroke();\n}</code></pre></div>\n<p><code class=\"language-text\">const p = this.invisibleSVGPath[typhoonId].getPointAtLength(frac);</code> 這邊我們先前創立的 <code class=\"language-text\">invisibleSVGPath</code> 又登場了，用來取得目前的線段點資料。</p>\n<p>Demo: 利用兩層 Canvas 來實作跟著線段移動的暴風圈：</p>\n<iframe src=\"https://codesandbox.io/embed/0xoy5yn4rp?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"最後-demo---加上時間判斷顏色區別多個颱風的情況\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C-demo---%E5%8A%A0%E4%B8%8A%E6%99%82%E9%96%93%E5%88%A4%E6%96%B7%E9%A1%8F%E8%89%B2%E5%8D%80%E5%88%A5%E5%A4%9A%E5%80%8B%E9%A2%B1%E9%A2%A8%E7%9A%84%E6%83%85%E6%B3%81\" aria-label=\"最後 demo   加上時間判斷顏色區別多個颱風的情況 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後 Demo - 加上時間判斷、顏色區別、多個颱風的情況：</h2>\n<iframe src=\"https://codesandbox.io/embed/98816jkovr?view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>這邊還要注意一下，稍早提到的 <code class=\"language-text\">globalCompositeOperation</code>，如果你設為 <code class=\"language-text\">source-over</code>，也就是新繪製出的物件蓋在舊的上面的話，你就會發現颱風圈都被壓在線段下了！</p>\n<p><img src=\"/image/circleunderline.png\" alt=\"source-over\"></p>\n<p>因為在 moveDash 中，線段是一直在重新繪製的，而你留下的颱風圈相對就是舊的物件，所以記得要改成 <code class=\"language-text\">destinatioin-over</code> 才能有比較好的效果！</p>\n<h2 id=\"根據時間留下暴風圈\" style=\"position:relative;\"><a href=\"#%E6%A0%B9%E6%93%9A%E6%99%82%E9%96%93%E7%95%99%E4%B8%8B%E6%9A%B4%E9%A2%A8%E5%9C%88\" aria-label=\"根據時間留下暴風圈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>根據時間留下暴風圈</h2>\n<p>這實作方法很簡單，就是在 moveDash 中判斷該點的時間，若符合要求就繪製上一個圖案即可，有興趣的讀者可以直接從 code 中看到。</p>\n<h2 id=\"如何讓所有動畫都結束後才一起重播\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E8%AE%93%E6%89%80%E6%9C%89%E5%8B%95%E7%95%AB%E9%83%BD%E7%B5%90%E6%9D%9F%E5%BE%8C%E6%89%8D%E4%B8%80%E8%B5%B7%E9%87%8D%E6%92%AD\" aria-label=\"如何讓所有動畫都結束後才一起重播 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何讓所有動畫都結束後才一起重播？</h2>\n<p>在我最後一個 Demo 中，一個颱風的路徑較短，一個較長，但卻能同時重播，我採用的方法其實蠻愚蠢的，暫時還沒想到更好的解法，歡迎大家提供。</p>\n<p>我的方法是，用一個共有變數 <code class=\"language-text\">this.allDone</code> 來記錄每條路徑是否已經播完動畫（走完整條 path），接著在 <code class=\"language-text\">updateLine()</code> 中，當自己跑完 path 時，就會多檢查一下 <code class=\"language-text\">this.allDone</code> 中的結果，如果還有人在跑，那自己就繼續呼叫 requestAnimationFrame，但不將 Canvas 清空，所以會一直 loop 檢查 <code class=\"language-text\">this.allDone</code>，直到大家都跑完才清空 Canvas 並重新 loop。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsupdateline-multiple\"><pre class=\"language-jsupdateline-multiple\"><code class=\"language-jsupdateline-multiple\">if (this.progress[typhoonId] &lt; length) {\n   // 正常執行 defineLine 與 moveDash\n} else {\n  // 不斷檢查是否每條 path 都跑完了\n  this.allDone[typhoonId] = true;\n  let keepWaiting;\n  Object.keys(this.allDone).forEach((allDoneTyphoonId) =&gt; {\n    if (!this.allDone[allDoneTyphoonId]) {\n        keepWaiting = true;\n    }\n    return keepWaiting;\n  });\n  if (keepWaiting) {\n    requestAnimationFrame(this.updateLine.bind(this, canvasCtx, canvasTyphoonMarkerCtx, typhoonPath, 500, marker, typhoonId));\n  } else {\n    // 清空 canvas 並重新 loop\n  }\n}</code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>利用 Canvas 繪製動畫實際上比用 D3 + svg 煩瑣多了，但是當你的動畫有大量的物件時，Canvas 能為你帶來大幅的 performance 改進，畢竟 svg 的操作會直接影響到 DOM tree。\n另外，實際上要將這些東西應用到 Production 的話，其實還有非常多細節要調整，包含各種 Browser 與 Device 的呈現、Map Scale 的彈性等等，還有很長的路要走啊...\n這篇文章算是我的一個筆記，寫得有點雜亂，歡迎（有看完的或是看不下去的）讀者給予任何建議！\n(PS. 我本來路徑跟暴風圈的顏色是想弄得像 EVA 風格，結果有點慘XD  但我懶得修了就給大家笑笑～)</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/svg-line-animation-works/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How SVG Line Animation Works</a></li>\n<li><a href=\"http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3.js 實戰 － Canvas 把我的視覺化變「快」了！</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Canvas tutorial</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN globalCompositeOperation</a></li>\n<li><a href=\"https://bl.ocks.org/mbostock/3783604\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mbostock d3.geoPath + Canvas</a></li>\n</ol>","id":"1b0e7d88-3ed4-5c1e-8c8d-f1857d0cfea8","fields":{"slug":"canvas-path-map"},"frontmatter":{"date":"2017-08-18T00:04:21.000Z","title":"D3v4 & Canvas 工作坊 - D3 + Canvas 繪製動態路線圖","tags":["javascript","d3","d3v4","canvas"],"type":"tech","slug":"canvas-path-map"},"timeToRead":17},"next":{"excerpt":"『怎樣都行』\n『只要別讓任何人打敗你』\n--- Daigo Umehara","html":"<blockquote>\n<p>『怎樣都行』\n『只要別讓任何人打敗你』\n--- Daigo Umehara</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前陣子 Mozilla 如火如荼地推出他們的量子專案，而其中在介紹 Quantum CSS 架構的時候，用了許多 [可愛的草圖]((<a href=\"https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hacks.mozilla.org/2017/08/inside-a-super-fast-css-engine-quantum-css-aka-stylo/</a>) 來解說，讓我突然想到如果能夠將這種手繪風格套用到資料圖表上面，應該會蠻有趣的，也才因此有了這篇文章。</p>\n<p>一般來說，我們不管是用 D3.js 或是 Highcharts 等工具來製作圖表，都是朝向專業、有質感、表達清晰的方向去實作，利用各種顏色搭配與互動操作來讓圖表更漂亮更吸引人。</p>\n<p><img src=\"/image/highchart_demo.png\" alt=\"source: highchart offical site\">\n（來源：highchart offical site）</p>\n<p>但看久了以後總會有點疲乏，加上現代人專注力越來越短暫，利用一些漫畫、草圖的方式來呈現要說明的東西，反而夠容易抓住大家的注意力，像是上述文章的作者 Lin Clark 在 medium 上就有一系列的 <a href=\"https://code-cartoons.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cartoon Intro</a> 的文章。</p>\n<p>但身為前端工程師，手上的工具只有 Javascript、CSS 與 HTML，要怎麼樣 \"手繪\" 圖表呢？</p>\n<p>其實很簡單，利用 D3.js 我們就能做得到！</p>\n<h2 id=\"d3-sketchy\" style=\"position:relative;\"><a href=\"#d3-sketchy\" aria-label=\"d3 sketchy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>d3 sketchy</h2>\n<blockquote>\n<p>“開玩笑的吧？我知道 D3 可以在 Canvas 上繪圖，但 Canvas 用起來還是沒有操作 svg 來得方便，而 svg 畫的長條圖就是四四方方的啊！\"</p>\n</blockquote>\n<p>沒錯我一開始也是這麼想的，但就在某次偶然機會下，拜讀到 <a href=\"https://www.manning.com/books/d3js-in-action-second-edition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">D3 in Action</a> 這本書的作者在 <a href=\"https://github.com/emeeks/d3-sketchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github 上的 code</a> 後讓我改觀了。</p>\n<p>這篇文章的範例就是修改自他三年前的 code，當時還是 v3 的版本，似乎也沒有將它推上 npm。</p>\n<p>所以順便利用這篇文章記錄並分享一下如何製作出 Sketchy 效果的長條圖，並且包裝成 d3 plugin 來使用！</p>\n<p>先給大家看一下比較圖：</p>\n<p><img src=\"/image/normal_barchart.png\" alt=\"一般的長條圖\"></p>\n<p><img src=\"/image/sketchy_barchart.png\" alt=\"套用 sketchy 效果的長條圖\"></p>\n<p>是不是瞬間活潑很多呢？</p>\n<p>雖然你可能會說這樣喪失了圖表的精準度，但很多時候我們只需要用來強調比較性的結果，這種情況就很適合了。</p>\n<h2 id=\"那到底是如何做到的呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%88%B0%E5%BA%95%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E7%9A%84%E5%91%A2\" aria-label=\"那到底是如何做到的呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那到底是如何做到的呢？</h2>\n<p>稍微仔細觀察上面的兩張圖，你可能會發現，擁有 Sketchy 效果的長條圖，好像少了間距，多了黑色的手繪編框。</p>\n<p>發現到這點以後，答案就呼之欲出了！</p>\n<p>其實所謂 Sketchy 的效果，就只是在原本的長條圖上加入了不規則的黑色邊框線條！</p>\n<p>而這些黑色的邊框其實是利用 <code class=\"language-text\">svg</code> 的 <code class=\"language-text\">path</code> 來繪製的，我們把它拆開來看就很清楚：</p>\n<p data-height=\"419\" data-theme-id=\"29194\" data-slug-hash=\"XeQbPP\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"sketchy-split\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/XeQbPP/\">sketchy-split</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>黑色的手繪風格邊框其實是利用至少九條 <code class=\"language-text\">L</code> 線段繪製出來的，等於是將原本的長方圖用線段包起來，實作上我們只要在原本長條圖的 x, y 位置與寬高上加上一些隨機變動的 offset，就可以做出這樣的效果！原理其實就這麼簡單！</p>\n<p><img src=\"/image/path-d-order.png\" alt=\"pathd\"></p>\n<h2 id=\"知道原理以後來看點-code-吧\" style=\"position:relative;\"><a href=\"#%E7%9F%A5%E9%81%93%E5%8E%9F%E7%90%86%E4%BB%A5%E5%BE%8C%E4%BE%86%E7%9C%8B%E9%BB%9E-code-%E5%90%A7\" aria-label=\"知道原理以後來看點 code 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知道原理以後來看點 code 吧！</h2>\n<p>既然他的實作原理很簡單，我們理當可以將它變成一個 d3 的 plugin，像是其他 d3 v4 的模組一樣，讓其他使用者都能夠透過 npm 或是 script 的方式載入使用。</p>\n<p>而要做成 d3-plugin 的話，在 code 的架構上我們就要稍微注意一下。</p>\n<p>基本上我們希望能沿用一般使用 d3 lib 的語法習慣：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdemo\"><pre class=\"language-jsdemo\"><code class=\"language-jsdemo\">d3.select(&#39;#svgParent&#39;).selectAll(&quot;g&quot;).data(data)\n    .enter()\n    .append(&quot;g&quot;)\n    .attr(&quot;class&quot;, &quot;bar&quot;);\n\nd3.select(&quot;#svgParent&quot;)\n    .selectAll(&quot;g.bar&quot;)\n    .each(function (d, i) {\n        var x = i * 100 + 20;\n        var y = 500 - hscale(d) / 2;\n        var rw = 100;\n        var rh = hscale(d) / 2;\n        // 1. 我們想將此 plugin 放到 d3 的 global object 內\n        // d3.sketchy 就是我們的 plugin\n        var sketchyBar = d3.sketchy.rect();\n\n        // 2. 我們要能 chaining 函數\n        sketchyBar\n            .height(rh)\n            .width(rw)\n            .x(x)\n            .y(y)\n            .fill(color)\n            .stroke(&quot;black&quot;)\n            .strokeWidth(10)\n            .jostle(5)\n        // 3. 最後我們利用 d3-selection 來幫我們選取 d3 DOM 傳入\n        d3.select(this).call(sketchyBar);\n    })</code></pre></div>\n<p>要達到這種效果，對 Javascript 熟悉的你應該都不困難，我們只要 <code class=\"language-text\">export</code> 一個物件，在其內設定一個會回傳函式的 function，製作出 closure，再實作相對應的 <code class=\"language-text\">setter</code>，並且每一個 <code class=\"language-text\">setter</code> 都回傳 <code class=\"language-text\">this</code> 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptd3-sketchy\"><pre class=\"language-javascriptd3-sketchy\"><code class=\"language-javascriptd3-sketchy\">import { select as d3Select, selectAll as d3SelectAll } from &quot;d3-selection&quot;;\nimport { scaleLinear as d3ScaleLinear } from &quot;d3-scale&quot;;\nimport { line as d3Line, curveLinear as d3CurveLinear } from &quot;d3-shape&quot;;\nlet d3sketchy = {};\n\nd3sketchy.rect = function(selection) {\n\n  let rh = 50, rw = 10, w = 2, c = [0, 0],\n    fillColor = &quot;red&quot;, strokeColor = &quot;black&quot;, jostle = 0;\n\n  function d3_sketchyRect(selection) {\n      // 繪製 sketchy 長條圖的主要函式\n  }\n\n  // 實作各個屬性的 setter\n  d3_sketchyRect.height = function(data) {\n    if (!arguments.length) return rh;\n    rh = data;\n    return this;\n  }\n\n  d3_sketchyRect.width = function(data) {\n    // ... 作法與 height 相同\n  }\n\n  d3_sketchyRect.x = function(data) { /* ... */ }\n\n  d3_sketchyRect.y = function(data) { /* ... */ }\n\n  d3_sketchyRect.fill = function(data) { /* ... */ }\n\n  d3_sketchyRect.jostle = function(data) { /* ... */ }\n\n  // ... 可以再繼續設置你要的函數\n\n  return d3_sketchyRect;\n}\nexport default d3sketchy;</code></pre></div>\n<p>而 export 出去的物件函式執行後所回傳的 function 就是用來接收 d3-selection 傳遞給我們的 d3 DOM，並且繪製 sketchy bar 的函式，相關的 code 大家可以從下面的 codepen 看到，或是到我的 <a href=\"https://github.com/ArvinH/d3-sketchy/blob/master/src/sketchy.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 上去看也可以：</p>\n<p data-height=\"360\" data-theme-id=\"29194\" data-slug-hash=\"QqPbEK\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"d3-sketchy demo I\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/QqPbEK/\">d3-sketchy demo I</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>繪製 sketchy bar 的函式主要做三件事：</p>\n<ol>\n<li>繪製一般的長條圖</li>\n<li>Random 產生一些動態 offset （在 <code class=\"language-text\">d3_sketchyRect</code> 這個函式中可以看到有一段看似複雜的計算，其實就只是對稱的畫出內外框，像是在原理介紹那邊的圖一樣）</li>\n<li>用 Svg path 來繪製手繪邊框</li>\n</ol>\n<h2 id=\"最後來打包-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BE%86%E6%89%93%E5%8C%85-plugin-%E5%90%A7\" aria-label=\"最後來打包 plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後來打包 Plugin 吧！</h2>\n<p>其實要打包一個 lib 有很多方法，但是 D3 的作者在 D3 v4 尚未推出前就有寫了一篇文章介紹要<a href=\"https://bost.ocks.org/mike/d3-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">怎麼樣製作一個 d3 plugin</a>，為了要能盡量共用所有的 d3 plugin，最好大家都是遵照同樣的準則來處理會比較好。</p>\n<p>不過其實也沒什麼準則 XD...主要比較特別的就是 D3 的 plugin 大多是用 rollup 來打包，我猜想是因為當時 webpack 1.x 還沒有加入 tree-shaking 的功能，而針對 plugin 這種小型模組來說，也用不到 webpack 的許多功能，rollup 反而比較適合用來打包 plugin 模組。</p>\n<p>｀</p>\n<p>檔案結構大概就是這樣：</p>\n<p><img src=\"/image/file_structure.png\" alt=\"檔案結構\"></p>\n<p>在你的 <code class=\"language-text\">index.js</code> 中加入：</p>\n<p><code class=\"language-text\">export {default as sketchy} from \"./src/sketchy\";</code></p>\n<p>當作 module 的入口，也方便 require。</p>\n<p>接著在你的 package.json 中加入 script：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsonpackage.json\"><pre class=\"language-jsonpackage.json\"><code class=\"language-jsonpackage.json\">&quot;scripts&quot;: {\n    &quot;pretest&quot;: &quot;rm -rf build &amp;&amp; mkdir build &amp;&amp; rollup -c rollup.config.js&quot;,\n    &quot;test&quot;: &quot;tape &#39;test/**/*-test.js&#39;&quot;,\n    &quot;prepublish&quot;: &quot;npm run test &amp;&amp; uglifyjs build/d3-sketchy.js -c -m -o build/d3-sketchy.min.js&quot;,\n    &quot;postpublish&quot;: &quot;zip -j build/d3-sketchy.zip -- LICENSE README.md build/d3-sketchy.js build/d3-sketchy.min.js&quot;\n}</code></pre></div>\n<p>可以看到這邊在 publish 前都會用 uglify.js 來產生 min.js 檔案，如此一來你的 user 就可以選擇要不要下載 minify 過的套件。</p>\n<p>最後就是撰寫你的 <code class=\"language-text\">rollup.config.js</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrollup.config.js\"><pre class=\"language-jsrollup.config.js\"><code class=\"language-jsrollup.config.js\">import resolve from &#39;rollup-plugin-node-resolve&#39;;\nimport babel from &#39;rollup-plugin-babel&#39;;\n\nexport default {\n    entry: &#39;index.js&#39;,\n    dest: &#39;build/d3-sketchy.js&#39;,\n    format: &#39;umd&#39;, // umd 的格式能透過 CommonJS 或是 AMD 載入\n    moduleName: &#39;d3&#39;, // 設定為 d3 可以將你的 plugin 放入 global.d3 底下\n    sourceMap: true,\n    plugins: [\n        resolve(),\n        babel({\n            exclude: &#39;node_modules/**&#39;\n        })\n    ]\n};</code></pre></div>\n<p>這邊要注意兩件事情。</p>\n<ol>\n<li>rollup 不會幫你打包你從 node<em>modules 裡面 import 進來的檔案，所以如果你有用到其他的 d3 plugin，變成在你的 plugin 說明內要告知使用者，記得載入相依的 plugin。或是你也可以向我這邊一樣，透過 <code class=\"language-text\">rollup-plugin-node-resolve</code> 這個 rollup plugin 來幫我們把 `node</em>modules` 底下的 lib 也打包</li>\n<li>rollup 不會幫你編譯 babel，如果你真的想用 babel，就像我一樣加入 <code class=\"language-text\">rollup-plugin-babel</code> 即可。</li>\n<li>format 記得設為 umd，這樣才能夠在 CommonJS 或 AMD 環境下都能使用。</li>\n<li>最雷的一點在這邊！目前用 rollup 打包 d3 plugin 的話，你需要將 roullup 的版本鎖在 0.41，否則你會發現你編譯出來的 <code class=\"language-text\">build/d3-xxx.js</code> 內的最前面幾行長得像這樣：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">global<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd <span class=\"token operator\">?</span> <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'exports'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有看出什麼問題嗎？</p>\n<p><code class=\"language-text\">factory((global.d3 = {}))</code></p>\n<p>他會將 global.d3 塞入一個空物件，而非先使用原先的 global.d3：<code class=\"language-text\">factory((global.d3 = global.d3 || {}))</code></p>\n<p>如此一來，你如果在載入 plugin 之前先載入其他 d3 plugin，就會發生問題了...</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://d3js.org/d3.v4.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../build/d3-sketchy.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 裡面的 d3 object 會蓋掉上面 d3.v4.js 產生的---></span></code></pre></div>\n<p>可能有其他解法，但看了 d3 的一些 plugin 也是先將版本卡在 0.41。</p>\n<p>當你做完上述工作後，在你的 repo 底下執行 <code class=\"language-text\">npm install</code>，就會產生 <code class=\"language-text\">build</code> folder，裡面含有：</p>\n<ol>\n<li>d3-sketchy.js</li>\n<li>d3-sketchy.min.js</li>\n<li>d3-sketchy.js.map (如果你 rollup.config.js 有設定 sourceMap: true 就會有此檔案)</li>\n</ol>\n<p>如此一來別人就能使用你的 plugin 了：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../build/d3-sketchy.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> sketchyBar <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span>sketchy<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token comment\">//..</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>有些時候看似很複雜的東西，其實原理卻非常簡單，只是需要發揮點創意。剛好透過這篇也學習了一下 rollup 的相關設定，雖然我私人猜測 rollup 應該還是會慢慢被 webpack 壓過去，即便 rollup 作者寫了<a href=\"https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>。\n這篇算是一個小小的筆記，不是太完整，若有任何疑問或建議歡迎留言討論！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/emeeks/d3-sketchy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-sketchy</a></li>\n<li><a href=\"https://bost.ocks.org/mike/d3-plugin/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">d3-plugin</a></li>\n<li><a href=\"https://github.com/rollup/rollup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rollup</a></li>\n</ol>","id":"e8539dea-9a05-51d1-a347-bcdb8d3eba5a","fields":{"slug":"d-3-v-4-sketchy-plugin"},"frontmatter":{"date":"2017-10-21T18:16:38.000Z","title":"D3v4 工作坊 - 製作 D3 plugin 來繪製草圖風格長條圖","tags":["d3","plugin","rollup","data visualization"],"type":"tech","slug":"d3v4-sketchy-plugin"},"timeToRead":9},"type":"tech"}},"staticQueryHashes":["2123680655"]}