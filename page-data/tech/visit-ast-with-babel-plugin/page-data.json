{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/visit-ast-with-babel-plugin","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近公司同事組了 Design pattern 的讀書會，剛好這週研讀到 <code class=\"language-text\">Visitor Pattern</code> 時，同事介紹說我們每天在用的工具 Babel 就是採用 <code class=\"language-text\">Vistor Pattern</code>，透過 <code class=\"language-text\">visitor</code> 拜訪 <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">AST (Abstract Syntax Tree)</code></a>，進而將程式碼進行對應轉換。</p>\n<p>這除了勾起我前陣子想要了解 <code class=\"language-text\">AST</code> 的想法外，也再度提醒我對於 Babel Plugin 背後的實作方式不太了解，只知道像是 ESLint, UglifyJS 或是 Webpack，他們的核心都是用到了 <code class=\"language-text\">AST</code> 來實現程式碼的檢查、分析與操作，但並不曉得實際上要如何使用。</p>\n<p>此外，我先前其實都沒有想過要自己寫 Babel Plugin，總覺得 Babel 的 Plugin 就是要很一般化，大家都能使用的，但其實不然啊，自己的專案或甚至是公司團隊內的專案，只要能有助於大家的工作效率，就算只給內部使用又何妨？明確定義好使用的情境跟 Style 即可。</p>\n<p>因此這次就決定花點時間來學習如何實作 Babel Plugin，並透過實作 Babel Plugin 的過程，一同了解 AST 的概念。</p>\n<h2 id=\"一直提到-ast到底什麼是-ast\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E7%9B%B4%E6%8F%90%E5%88%B0-ast%E5%88%B0%E5%BA%95%E4%BB%80%E9%BA%BC%E6%98%AF-ast\" aria-label=\"一直提到 ast到底什麼是 ast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一直提到 AST，到底什麼是 AST？</h2>\n<p>AST 的全文是 Abstract Syntax Tree，中文大多翻作抽象語法樹，主要是將我們 <strong>人類</strong> 所寫的程式語法，轉換成 <strong>程式</strong> 比較容易閱讀的語法結構，並以樹的資料結構來儲存。</p>\n<p>直接來個例子，先讓大家看看 <strong>給人類看的 code</strong> 與 <strong>給程式讀的 code</strong> 之間的差異：</p>\n<p><img src=\"/image/humancode-programcode.png\" alt=\"Human code vs Program code(AST)\"></p>\n<p>左邊的程式經過 Parser 的轉換後，就會產出右圖中的 AST。</p>\n<p>在遠古的 Nestcape 時代，對於 Javascript 的 AST 有許多種實作，而後來為了解決一致性的問題，<a href=\"https://github.com/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESTree</a> 這個組織定義了現今通用的 <a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a>。</p>\n<p>像是我們現在常用的 Babel 所使用的 AST 就是基於 ESTree 的規範延伸修改的。</p>\n<h3 id=\"那-babel-這些工具到底拿-ast-來做什麼呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3-babel-%E9%80%99%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%88%B0%E5%BA%95%E6%8B%BF-ast-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2\" aria-label=\"那 babel 這些工具到底拿 ast 來做什麼呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那 Babel 這些工具到底拿 AST 來做什麼呢？</h3>\n<p>稍稍回想一下，Babel 或是 ESLint 在我們平日的開發中扮演了什麼角色？</p>\n<p>情境大概是：</p>\n<blockquote>\n<p>你用 ES6 寫了一段 arrow function，而 Babel 會幫忙轉換成 ES5 的匿名函數，同時 ESLint 可能會顯示 Warning 告知你的括號前面必須要留有空格。</p>\n</blockquote>\n<p>這段描述當中，Babel 其實將你的 code 透過三個 stage 來處理：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#stages-of-babel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>parse</strong>, <strong>transform</strong>, <strong>generate</strong>.</a></p>\n<p>而其中，AST 其實就出現了兩次：</p>\n<!-- 放置圖片 code to AST and Modefied AST to code -->\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"The role AST plays in babel\"></p>\n<ul>\n<li>\n<p><strong>Parse stage</strong></p>\n<p>你寫的 js code 會經由 js parser 轉換為 AST，當然其中會透過 <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lexical Analysis</a> 與 <a href=\"https://en.wikipedia.org/wiki/Parsing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Syntactic Analysis</a>。</p>\n</li>\n<li>\n<p><strong>Transform stage</strong></p>\n<p>而這時 Babel plugin 與 ESLint plugin 就可以介入你的程式進行改造，<strong>幫忙轉換成 ES5 的匿名函數</strong>以及<strong>審視你的程式，決定是否要提示 Warning</strong> 的這兩個動作就是在這個階段發生的，我們將 Parser 解析後的 AST 改造成我們想要的樣子。</p>\n</li>\n<li>\n<p><strong>Generate stage</strong></p>\n<p>最後，改造完成的 AST 會再被 generator 轉換為一般的 code 輸出。</p>\n</li>\n</ul>\n<p>常用的 js parser 有很多種，像是 babylon, acorn, esprima 等等，而所謂的 Babel plugin 或是 ESLint plugin，則可以看作是一種 Transformer。</p>\n<h3 id=\"窺探一下-ast-的內容\" style=\"position:relative;\"><a href=\"#%E7%AA%BA%E6%8E%A2%E4%B8%80%E4%B8%8B-ast-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"窺探一下 ast 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>窺探一下 AST 的內容</h3>\n<p>在實作 Plugin 前，先了解一下 AST 的長相對之後會比較有幫助。</p>\n<p>開始之前先介紹兩個常用網站：</p>\n<ul>\n<li>\n<p><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></p>\n<p>超棒的網站，在上面可以邊看原始程式碼根據不同 Parser 所建構出來的 AST，也能切換不同 Transformer 來實作 Plugin 內容。</p>\n</li>\n<li>\n<p><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></p>\n<p>主要是將 AST 視覺化，對於理解整個程式碼的 AST 結構能有比較清楚 Overview。</p>\n</li>\n</ul>\n<p>不過我個人是覺得 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 就足夠了， <a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VISUALIZER</a> 雖然能看到圖像化的樹狀結構，但操作起來不是很順暢，也無法直接在上面撰寫 Transformer。所以下面都會以 <code class=\"language-text\">AST Exporler</code> 為使用工具來介紹。</p>\n<p>現在我們以一個比最開始稍稍複雜一點的簡單範例來解析，在這邊我們採用與 Babel 相同的 Parser - <a href=\"https://github.com/babel/babel/tree/master/packages/babel-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babylon7</a>：</p>\n<p>我們的原始程式碼如下，定義 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 兩個變數，以及一個 <code class=\"language-text\">add</code> function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一步一步來看，<code class=\"language-text\">const a = 2</code> 的 AST 會長這樣：</p>\n<p><img src=\"/image/ast-explorer-sample-1.png\" alt=\"AST Explorer example 1\"></p>\n<p>你的程式碼在 AST 當中，會被拆解成各種 node 來存放表示，而每一個 node 都有自己的 type，各種 type 有其特定的屬性參數，以上圖為例：</p>\n<p><code class=\"language-text\">const</code> 在 AST 中就是ㄧ個 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">VariableDeclaration</code> 的 node，這個 node 必須包含兩種屬性， <code class=\"language-text\">declarations</code> 與 <code class=\"language-text\">kind</code>：</p>\n<p><code class=\"language-text\">kind</code> 很好理解，意指我們的 <code class=\"language-text\">VariableDeclaration</code> 可以有三種類型（<code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>）， 而 <code class=\"language-text\">declarations</code> 看起來就是存放你所宣告的變數，像 <code class=\"language-text\">a = 2</code>，但他是 <code class=\"language-text\">Array of VariableDeclarator</code>，我們不是只有宣告一個變數嗎？</p>\n<p>其實是要應付這種寫法：<code class=\"language-text\">const a = 2, b = 3</code>，需要能接收多個 <code class=\"language-text\">VariableDeclarator</code>。</p>\n<p>而 <code class=\"language-text\">VariableDeclarator</code> 這種 type 的 node 代表的就是 <code class=\"language-text\">a=2</code> 這種宣告式，其中包含兩個屬性 <code class=\"language-text\">id</code> 與 <code class=\"language-text\">init</code>，我們將其展開看看：</p>\n<p><img src=\"/image/ast-explorer-sample-2.png\" alt=\"AST Explorer example 2\"></p>\n<p><code class=\"language-text\">id</code> 屬性所接受的是 <code class=\"language-text\">identifier</code> 這個 type 的 node，代表該 <code class=\"language-text\">VariableDeclarator</code> 的 identity。該 node 只需要一個 <code class=\"language-text\">name</code> 屬性，也就是他的名稱，在這邊的例子中當然就是 <code class=\"language-text\">a</code> 囉。而 <code class=\"language-text\">init</code> 則是這個 <code class=\"language-text\">VariableDeclarator</code> 的初始值，因為我們程式中是初始 <code class=\"language-text\">a</code> 為 <code class=\"language-text\">2</code>，所以這個 <code class=\"language-text\">init</code> 屬性就會連到一個 <code class=\"language-text\">NumericLiteral</code> type 的 node，擁有 <code class=\"language-text\">value</code> 為 <code class=\"language-text\">2</code> 的屬性。</p>\n<p>此外，眼尖的讀者想必都有發現到，每個 node 都有 <code class=\"language-text\">start</code>, <code class=\"language-text\">end</code> 與 <code class=\"language-text\">loc</code> 這三個屬性，這是用來代表該 node 在程式的第幾行第幾列。</p>\n<p>看到這邊應該對於 AST 的結構會有點感覺了，基本上就是 Parser 會先將你的程式切成多種 tokens，接著依照類別來區分是哪種 node，最後從程式結構上一一把 node 串接，形成一顆完整的 Abstract Syntax Tree。如果覺得剛剛用 AST Explorer 轉化的格式不夠清楚，這邊補充一下同樣程式用 VISUALIZER 出來的 AST 長相，應該會對 AST 的結構更有感受：</p>\n<p><img src=\"/image/ast-visualizer.png\" alt=\"ast visualizer\"></p>\n<p>範例程式中我們還有使用到 <code class=\"language-text\">function</code>，他長出的 AST 與宣告變數在 node type 上有不少差異，但大體結構就如同上面介紹的一般，這邊就不再贅述，相信看到這邊的讀者也有能力自己去 AST Explorer 玩玩看了！寫些簡單的程式，看看他們經由 Parser 轉換後，會產生怎樣的 AST，每種語法所對應的 node type 又是什麼。</p>\n<h2 id=\"懂了-ast來實際應用一下開始製作-babel-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%87%82%E4%BA%86-ast%E4%BE%86%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8%E4%B8%80%E4%B8%8B%E9%96%8B%E5%A7%8B%E8%A3%BD%E4%BD%9C-babel-plugin-%E5%90%A7\" aria-label=\"懂了 ast來實際應用一下開始製作 babel plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>懂了 AST，來實際應用一下，開始製作 Babel Plugin 吧！</h2>\n<p>出發，總要有個方向。</p>\n<p>要做 Plugin 也得要先決定要做什麼。</p>\n<p>剛好在工作上常常會用到 <code class=\"language-text\">React-intl</code> 這個套件來幫忙處理 i18n，他的使用方法還算簡單，當一些基本設定做好以後，你只要用其提供的一個特殊元件 <code class=\"language-text\">&lt;FormattedMessage /></code>，放入對應文字的 id 即可，像是： <code class=\"language-text\">&lt;FormattedMessage id=\"#words-need-i18n\" /></code> 。</p>\n<p>雖然實際上已經非常簡單了，但我還想更懶一點，能不能直接輸入 <code class=\"language-text\">{'#words-need-i18n'}</code> 就好呢？</p>\n<p>像是能把：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>轉換成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedMessage</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>words-need-i18n<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以！自己寫 Plugin 就可以！</p>\n<h3 id=\"撰寫-babel-plugin-的起手式\" style=\"position:relative;\"><a href=\"#%E6%92%B0%E5%AF%AB-babel-plugin-%E7%9A%84%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-label=\"撰寫 babel plugin 的起手式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>撰寫 Babel Plugin 的起手式</h3>\n<p>先到 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 開啟一個新的頁面，接著在上方列表選取好 Parser (Babylon7) 與 Transformer (Babel7)，並在旁邊的程式區塊內寫上一點範例程式，就是你預期能被 Babel 認得並轉換的\"新\"程式碼，以我的例子就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/step-1-babel-plugin.gif\" alt=\"Babel plugin step 1\"></p>\n<p>接著看看你的 AST 長什麼樣子，想想你該怎麼修改他：</p>\n<p><img src=\"/image/step-2-babel-plugin.png\" alt=\"Babel plugin step 2\"></p>\n<p>出現沒看過的 type 了！沒關係，在剛開始撰寫 Plugin 的過程中一定會遇到許多沒看過的 type 或是不清楚他的屬性型別，好在 babel 有一份非常詳細的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook</a> 與 <a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 可以查閱，只要到上面 <code class=\"language-text\">ctrl + f</code> 一下，應該都能在上頭找到你所需要的知識。</p>\n<p>準備好測試程式碼、了解測試程式碼的 AST、也有了工具書可以查，就能毫無懸念的開始撰寫 Babel plugin 了。</p>\n<h3 id=\"babel-plugin-之-transformvisitorstraversal\" style=\"position:relative;\"><a href=\"#babel-plugin-%E4%B9%8B-transformvisitorstraversal\" aria-label=\"babel plugin 之 transformvisitorstraversal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 之 Transform、Visitors、Traversal</h3>\n<p>還記得我在最一開始說過，Babel 大量使用到了 Visitor pattern 嗎？就是用在這邊！</p>\n<p>之所以 Babel 能夠輕易解析你的程式碼，並且進行各種修改操作，依賴的就是各種 visitors 在 AST 上進行 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">traverse</a>，當遇到對應的 node 時，visitor 就會做出相對的操作，進而將輸入的程式碼 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-generator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transform</a> 成預期的結果，這就是整個 Babel plugin 的實作核心。</p>\n<h3 id=\"babel-plugin-的基礎結構\" style=\"position:relative;\"><a href=\"#babel-plugin-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%B5%90%E6%A7%8B\" aria-label=\"babel plugin 的基礎結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 的基礎結構</h3>\n<p>若你剛剛有照著我的說明，在 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上方列表選取好 Parser 與 Transformer，那左下角應該會出現類似下方的程式區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"ast-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上的預設 template，基本的 Babel plugin 也就是長這樣。</p>\n<p>你會接受一個 <code class=\"language-text\">babel</code> 物件，其中我們會需要的是 <code class=\"language-text\">babel.types</code>，在之後新增修改 node 時會不斷地用到，因此最好存成一個變數，省去 chain lookup。</p>\n<p>而基本上你要做的就是回傳一個 <code class=\"language-text\">visitor object</code>，其中定義以 node type 為名的 funciton，接收兩種參數：<code class=\"language-text\">path</code> 與 <code class=\"language-text\">state</code>：</p>\n<ul>\n<li>path\npath 代表的是在 traverse AST 過程中，連接 node 之間的邊。所以你可以用 <code class=\"language-text\">path.node</code> 取得目前的節點，也可以用 <code class=\"language-text\">path.parent</code> 取得父節點。\n此外，path 還能透過 <code class=\"language-text\">path.traverse</code> 來在原有的 visitor 內進行 nested visiting，這對於想要<strong>讓 visitor 在某個特定 visitor 執行後再執行</strong>時很有幫助，可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 範例</a>。</li>\n<li>state\nstate 的用法在 handbook 上也沒有說得很明確，我的理解是一個貫串整個 traverse 過程的 global state，你可以在任意階段修改 state。其中也包含你想讓使用 plugin 的使用者傳入的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#plugin-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">options 設定</a>。</li>\n</ul>\n<p>以上述 template 為例，你的 visitor 在遇到 type 為 <code class=\"language-text\">Identifier</code> 的節點時，就會執行 <code class=\"language-text\">path.node.name = path.node.name.split('').reverse().join('');</code>，也就是將該 <code class=\"language-text\">Identifier</code> node 的名稱給顛倒過來。</p>\n<p>此外，Visitor 在 traverse AST 的過程中，會在節點上進進出出，所以其實我們是可以定義 <code class=\"language-text\">enter</code> 與 <code class=\"language-text\">exit</code> 的函式來進行操作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Identifier<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entered!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exited!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#visitors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 中有更多詳細介紹</a></p>\n<h3 id=\"動手撰寫自己的-visitor\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E6%89%8B%E6%92%B0%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84-visitor\" aria-label=\"動手撰寫自己的 visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動手撰寫自己的 Visitor</h3>\n<p>知道基礎架構後，就可以開始撰寫 Visitor 了！</p>\n<p>但你可能會有點沒頭緒該怎麼開始，因為你不知道要從哪個 node type 的 visitor function 開始寫。這就是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 的好處了，你只要將游標停放在編譯前的程式碼的任意位置上，右邊的 AST 樹就會自動 Focus 到對應的節點上頭（前提是要記得選取上方的 <code class=\"language-text\">AutoFocus</code>，預設會是啟用的）：</p>\n<p><img src=\"/image/ast-explorer-find-node.gif\" alt=\"Find the node we need\"></p>\n<p>以範例來說，我們要轉換的是 <code class=\"language-text\">{'#words-need-i18n'}</code>，將游標指上去後發現他是一個 type 為 <code class=\"language-text\">StringLiteral</code> 的 node，這就是我們要撰寫的 visitor function！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"i18n-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// some logic in here</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下來把需要的邏輯填寫上去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'JSXExpressionContainer'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>\n          t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXElement</span><span class=\"token punctuation\">(</span>\n              t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXOpeningElement</span><span class=\"token punctuation\">(</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FormattedMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span>\n                      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- 解釋前四行  然後畫個 path 的圖 -->\n<p>在前面有介紹到，<code class=\"language-text\">path</code> 代表連接著目前被拜訪到的節點，所以我們能用 <code class=\"language-text\">path.node.value.startsWith('#')</code> 來檢查目前節點的值是否為我們想要的（開頭為 hashtag）。但由於 <code class=\"language-text\">StringLiteral</code> 感覺得出來是到處都會出現的 node type，所以我們需要設立一些條件：當 <code class=\"language-text\">path.parent.type !== 'JSXExpressionContainer'</code> 時，我們就 bypass 這次的 visit 操作。所謂的 <code class=\"language-text\">JSXExpressionContainer</code> 就是在 jsx 中的 <code class=\"language-text\">{ }</code>。</p>\n<p>當條件都成立時，也就代表我們的 visitor 成功找到我們想轉換的程式碼 <code class=\"language-text\">{'#words-need-i18n'}</code>。這時聰明如你，一定會想說那就把 <code class=\"language-text\">path.node</code> 替換掉就好了吧！</p>\n<p>但是，<code class=\"language-text\">path.node</code> 目前指到的是 <code class=\"language-text\">StringLiteral</code>，也就是 <code class=\"language-text\">#words-need-i18n</code>，外面還有一層 <code class=\"language-text\">JSXExpressionContainer</code>，我們不能直接使用 <code class=\"language-text\">path.node.replaceWith</code> 來替換程式碼，我們要連同上一層都一起換掉，因此這邊需要使用 <code class=\"language-text\">path.parentPath.replaceWith</code>。以圖像表示的話大概像這樣：</p>\n<p><img src=\"/image/ast-explorer-path-replace.png\" alt=\"需要找到 parent path 來直接從上層替換程式碼節點\"></p>\n<!-- 放個 gif 說明如何找出要 create 什麼 node, 以及去哪裡找合法參數 （提及 log 訊息不一定看得出來）-->\n<p>接著，<code class=\"language-text\">replaceWith</code> 接收你要替換的節點當作參數，而這時我們最一開始宣告的 <code class=\"language-text\">const { types: t } = babel;</code> 就派上用場啦！</p>\n<p><code class=\"language-text\">babel.types</code> 可以幫我們創建出各種 type 的 node，也提供許多 type checking 的 function，像是剛剛我們檢查 <code class=\"language-text\">path.parent.type</code> 的地方其實應該更改為 <code class=\"language-text\">!t.isJSXExpressionContainer(path.parent)</code>。更多關於 <code class=\"language-text\">babel.types</code> 的操作可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-transformation-operations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 上的說明</a></p>\n<p>但到這邊問題又來了，我們怎麼知道要創建什麼 node 呢？</p>\n<p>我一開始也不知道，但抬頭想一想，AST Explorer 不是就會幫我們轉換 AST 嗎？那就把我們預期的結果程式碼也貼上去，不就知道他的 AST 長相了嗎？</p>\n<p>大膽將 <code class=\"language-text\">&lt;FormattedMessage id={'#words-need-i18n'}></code> 貼上去後，就能得到其 AST 結構：</p>\n<p><img src=\"/image/ast-explorer-final-ast-format.png\" alt=\"預期結果的 AST 結構\"></p>\n<p>接著呢，就到 <strong><a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 官網的 docs</a>  裡面去查詢每一種需要創建的 type，各自要填入哪些參數</strong>，舉例來說，<code class=\"language-text\">&lt;FormattedMessage></code> 會是一個被 <code class=\"language-text\">JSXOpeningElement</code> 包起來，從 <a href=\"https://babeljs.io/docs/en/babel-types#jsxopeningelement\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 能看到非常詳細的說明：</p>\n<p><img src=\"/image/ast-explorer-docs.png\" alt=\"JSXOpeningElement\"></p>\n<p>我們要填入三個參數: <code class=\"language-text\">name</code>, <code class=\"language-text\">attributes</code> 與 <code class=\"language-text\">selfClosing</code>，第一與第三個很好理解，中間的 <code class=\"language-text\">attributes</code> 裡面包含了其他的 type，這時你就需要再繼續往下查，直到完成所有需求為止。</p>\n<p>照著這樣的思路，一一將 AST 內的結構轉換到你的 plugin 程式碼內，就大功告成啦！</p>\n<p><img src=\"/image/ast-explorer-final-result.png\" alt=\"最終結果\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>當然這只是個很簡陋的實作，不過也算是把 plugin 的製作概念呈現了一遍，並稍加了解了 AST 的重要性與實用性。</p>\n<p>在實作你所想要的 plugin 功能時，勢必會遇到複雜得多的狀況，建議大家還是直接在 handbook 上查看最直接，上面有更詳細的 API 介紹與教學，包含 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-template</a> 、 babel-types 的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#builders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">builder</a> 與 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#validators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Validators</a>，更有 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Best Practices</a> 可供參考。也可以看看高手們的<a href=\"https://github.com/kentcdodds/babel-plugin-preval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a></p>\n<p>最後，不知道有沒有讀者會覺得整個 Plugin 的邏輯操作與大家熟悉的 jQuery 有點類似？都是選取到某個元件後，就針對該元件進行更動：<code class=\"language-text\">$('StringLiteral').textContent = '&lt;FormattedMessage id={'xxx'}>'</code></p>\n<p>我在查資料的過程中發現一篇<a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常有趣又很清楚的介紹</a>，其中就是以 jQuery 來做類比（節錄其 slides 中的一段）：</p>\n<p><code class=\"language-text\">Babel:Javascript :: jQuery:DOM</code></p>\n<p><strong>jQuery 幫助你改變 DOM，而 Babel 幫助你轉化 Javascirpt</strong></p>\n<p>實在是很貼切的比喻不是嗎？</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/kentcdodds/a-beginners-guide-to-asts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Writing custom Babel and ESLint plugins</a></li>\n<li><a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How writing babel-plugin is like wrigint jQuery</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel Plugin Handbook</a></li>\n<li><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></li>\n<li><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></li>\n<li><a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a></li>\n</ol>","fields":{"slug":"visit-ast-with-babel-plugin"},"frontmatter":{"title":"透過製作 Babel-plugin 初訪 AST","date":"08-25-2018","tags":["es6","javascript","babel","ast","pattern"]},"timeToRead":16}},"pageContext":{"slug":"visit-ast-with-babel-plugin","prev":{"excerpt":"『你能相信聖誕老人是真實存在的有十年之久，那你也能相信你自己，哪怕只有十秒鐘』","html":"<blockquote>\n<p>『你能相信聖誕老人是真實存在的有十年之久，那你也能相信你自己，哪怕只有十秒鐘』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>上次我們介紹了三種 Rect Component Patterns，包含 <code class=\"language-text\">Compound component</code>、<code class=\"language-text\">Render props component</code> 與 <code class=\"language-text\">Prop collections &amp; getters</code>，而今天要繼續往下介紹剩下的五個 Patterns:</p>\n<ul>\n<li>State Initializers</li>\n<li>State Reducer</li>\n<li>Control Props</li>\n<li>Provider</li>\n<li>Higher-order component</li>\n</ul>\n<p>若對前三個 Pattern 不熟悉，或是沒看過上一篇文章的可以移駕至 <a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">進階 React Component Patterns 筆記（上）</a></p>\n<p>接下來的 Pattern 都會延續之前的 Demo 範例，所以建議先閱讀過上篇！</p>\n<p>此外，每個 Pattern 的最後都放有 codesandbox 的 demo link，覺得文字太多的可以直接去看完整的 code 喔！</p>\n<h1 id=\"state-initializers\" style=\"position:relative;\"><a href=\"#state-initializers\" aria-label=\"state initializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Initializers</h1>\n<p>有時候我們會希望能讓元件回復到初始狀態，或是能讓使用者自己定義初始狀態，這時就適合採用 State initializer 技巧。</p>\n<p>首先，我們利用自定義的 <code class=\"language-text\">inistialState</code> 來存放元件初始狀態，而在真正的 state 中去 reference 它：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...other function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣一來，要實作 <code class=\"language-text\">reset</code> 函式就相當簡單了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而要讓使用者能自定義元件初始狀態的方式，相信多數讀者都有用過，也就是讓使用者透過 props 來定義元件的 initial state：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialOn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...other function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由於並不是所有使用者都會自行定義初始狀態，所以別忘了在 <code class=\"language-text\">defaultProps</code> 中宣告我們自己希望的初始值喔！</p>\n<p><a href=\"https://codesandbox.io/embed/2wp3jr6o8j\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo link</a></p>\n<p>上面的 Demo 範例是延續<a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上篇</a>提到的 <code class=\"language-text\">Prop collections &amp; getters</code> 與 <code class=\"language-text\">Render props</code>，所以這邊加入的 <code class=\"language-text\">reset</code> 按鈕要記得加入 <code class=\"language-text\">getStateAndHelpers</code> 中傳遞給 <code class=\"language-text\">render props</code> 中的 children 使用。</p>\n<h1 id=\"state-reducer\" style=\"position:relative;\"><a href=\"#state-reducer\" aria-label=\"state reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Reducer</h1>\n<p>State Reducer 是一個蠻有趣的概念，主要目的是讓使用者能夠介入元件狀態改變的行為，讓元件在每次的 <code class=\"language-text\">setState</code> 時，都能夠被使用者影響。</p>\n<p>舉個簡單的範例，像是我們先前的 Toggle component，如果今天使用者提出個需求，想要讓這個元件只能被 toggle 三次，那我們該怎麼做呢？</p>\n<p>你當然可以讓使用者多傳一個 props 控制次數，然後在內部更動狀態時去檢查有沒有超過那個次數：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onReset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    initialOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 元件內部多一個 toggleTimes 來控制目前的 toggle 次數</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialOn<span class=\"token punctuation\">,</span> currentToggleTimes<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 每次 toggle 時判斷有沒有超過使用者定義的 toggle 次數上限</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentToggleTimes <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toggleTimes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle too much'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on<span class=\"token punctuation\">,</span>\n        currentToggleTimes<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentToggleTimes <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...other methods</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但你也知道使用者的需求總是會變動，假如他突然間也想控制 reset 的次數怎麼辦? 你的程式不就改不完？</p>\n<p>這時我們就能採用 <code class=\"language-text\">State Reducer</code>，先看一下使用者應該會怎麼使用 <code class=\"language-text\">State Reducer</code>：\n｀</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> timesClicked<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState\n  <span class=\"token function-variable function\">toggleStateReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> changes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// state 為 Toggle 的 current state</span>\n    <span class=\"token comment\">// changes 為該次 Toggle 動作所造成的改變</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>timesClicked <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>changes<span class=\"token punctuation\">,</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> changes\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle\n          initialOn<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n          onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> timesClicked <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n               timesClicked<span class=\"token operator\">:</span> timesClicked <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          onReset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">initialState</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          stateReducer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleStateReducer<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> getTogglerProps<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// render props</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們讓使用者傳入一個 <code class=\"language-text\">stateReducer</code>，其中接受兩個參數，一個是 Toggle component 的 current state，另一個是該次 Toggle component 執行 <code class=\"language-text\">setState</code> 時，所接受的變化 <code class=\"language-text\">changes</code>，而回傳值就是 Toggle component 實際 <code class=\"language-text\">setState</code> 時所接受的 change object。</p>\n<p>因此在這個函式中，使用者就擁有了一個機會能夠在元件真正觸發 <code class=\"language-text\">setState</code> 之前，進行一些操作，以剛剛例子來說，就能在這邊判斷使用者自己紀錄的 state(<code class=\"language-text\">timesClicked</code>) 有沒有超過某個值，如果超過了，那我們之後每次的回傳結果中，都會將 <code class=\"language-text\">on</code> 這個 state 設為 false。</p>\n<p>那元件本身該如何讓 <code class=\"language-text\">stateReducer</code> 介入 <code class=\"language-text\">setState</code> 中呢？重點就在這段：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">internalSetState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 確認傳入的 changes 是單純的物件，或是函式</span>\n      <span class=\"token keyword\">const</span> changesObject <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typeof</span> changes <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">changes</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> changes\n      <span class=\"token comment\">// 呼叫使用者傳入的 stateReducer 來取得最終的 state change object</span>\n      <span class=\"token keyword\">const</span> reducedChanges <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">stateReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> changesObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 最後只是檢查一下 changes 是否為空，避免重複 render</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducedChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n        <span class=\"token operator\">?</span> reducedChanges\n        <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們需要建立一個介面與原本 <code class=\"language-text\">setState</code> 相同的 <code class=\"language-text\">internalSetState</code> 的方法，取代原本的 <code class=\"language-text\">setState</code>。</p>\n<p>其中需要注意的有兩點，一個是原本的 <code class=\"language-text\">setState</code> 是能接受函式當第一個參數的，因此我們需要先判斷 <code class=\"language-text\">changes</code> 是否為 function，才能繼續進行其他動作。</p>\n<p>另一個則是並非所有的 <code class=\"language-text\">setState</code> 都一定要用 <code class=\"language-text\">internalSetState</code> 取代，像是 <code class=\"language-text\">reset</code> function 我們可能不太希望使用者能介入，應該要很明確的 reset 所有狀態，因此這邊可以用原本的 <code class=\"language-text\">setState</code>。</p>\n<p>看看 <a href=\"https://codesandbox.io/embed/wyl152o1jw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a> ，並實際玩玩看會更清楚！</p>\n<p>另外，在 Kent C. Dodds 的 workshop 中，他在 internalSetState 的實作上有提到一種他比較偏好的寫法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">internalSetState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>changes<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> c <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">changes</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">stateReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducedChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> c <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過硬轉成 array 後，再用 map 將每個步驟 chain 起來，的確比較乾淨跟簡單，但比起原本做法沒那麼直覺就是了，尤其是最後還要取 <code class=\"language-text\">[0]</code> 出來，但參考一下也不錯！</p>\n<p>透過 <code class=\"language-text\">State Reducer</code>，不僅使用者開心（能夠介入元件 state 的更動），開發者也不用疲於奔命一直改 code（讓使用者自己處理 reducer 實際內容），但壞處就是你需要呼叫一個 <code class=\"language-text\">internalSetState</code> 的函式，蠻可能造成 trace code 上的困擾，算是個 trade-off。</p>\n<h1 id=\"control-props\" style=\"position:relative;\"><a href=\"#control-props\" aria-label=\"control props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Props</h1>\n<p>除非你從來沒有用 React 開發與表單相關的 component，否則你一定用過 <code class=\"language-text\">Control Props</code>，因為所謂的 <code class=\"language-text\">Control Props</code> 其實就是 <code class=\"language-text\">Controlled component</code> 的一種實作。</p>\n<p>舉例來說，<code class=\"language-text\">Select</code>, <code class=\"language-text\">Input</code> 等 <code class=\"language-text\">Form</code> 的元件，當使用者輸入值時，其改變的是元件的內部狀態，該狀態通常綁定在 <code class=\"language-text\">value</code> 這個屬性上頭。</p>\n<p>若在 React 中想要取得使用者輸入進表單元件的值時，你就會想要將 state 綁定在元件的 <code class=\"language-text\">value</code> 上頭，然而，一但你傳值給 <code class=\"language-text\">value</code>（也就是 <code class=\"language-text\">value={this.state.value}</code>），你就必須要自己利用 handler 去控制它的狀態改變，否則使用者再怎麼輸入，都不會改變其狀態。因為在你傳值給 <code class=\"language-text\">value</code> 的時候，這個元件就已經歸你控制了，這樣的方式可以保證該元件內部狀態是 single source of truth，不會有使用者的輸入與你的 state 不一致的狀態發生。（關於 <code class=\"language-text\">Controlled component</code> 在 React 官方網站有詳細的<a href=\"https://reactjs.org/docs/forms.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">介紹</a>）</p>\n<p>所以說，<code class=\"language-text\">Control Props</code> 就是想利用這樣的技巧，讓你的元件在讓使用者自行操作 input 時，能確保元件內部狀態的 single source of truth。透過這種方式，也就能夠從使用者角度來同步多個元件的內部狀態。</p>\n<p>一樣已先前的 Toggle 元件來舉例，但這次我們用個簡化版：</p>\n<p>假設今天使用者想同步兩個元件的狀態，他們可以透過本身的 <code class=\"language-text\">State</code> 來控制，並在 <code class=\"language-text\">onToggle</code> 時來更動 <code class=\"language-text\">State</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bothOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">handleToggle</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bothOn<span class=\"token operator\">:</span> on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle on<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>bothOn<span class=\"token punctuation\">}</span> onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle on<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>bothOn<span class=\"token punctuation\">}</span> onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// same render props as above</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但要記得，<code class=\"language-text\">onToggle</code> 實際上是 <code class=\"language-text\">Toggle</code> 元件內部執行完 <code class=\"language-text\">toggle</code> 後才會執行的動作（告知使用者該元件\"被\" Toggle 了），這樣的話，元件要怎麼依照傳入的 Props 來處理內部狀態呢？</p>\n<p>來看一下我們 Toggle 的實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">combinedState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        combinedState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        combinedState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> combinedState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主要重點在於，每次 <code class=\"language-text\">toggle</code> 被 trigger 時，我們都會先去確認一下 <code class=\"language-text\">on</code> 這個 state 有沒有被使用者 <code class=\"language-text\">Controlled</code>（<code class=\"language-text\">isControlled()</code>），若是使用者有透過 <code class=\"language-text\">props</code>（使用者端）傳值給這個 <code class=\"language-text\">state</code>（元件內部），就代表我們得將該 <code class=\"language-text\">state</code> 的掌控交給使用者。</p>\n<p>什麼叫『交給使用者』呢？</p>\n<p>其實也就是要將使用者傳入的 props 與我們自己本身的 state 做 <strong>combination</strong>，並將結果當作元件實際的 state 來使用，如同上述程式碼中的 <code class=\"language-text\">getState()</code> 函數。之後元件所有需要操作 state 的地方都需要透過該函數來取得元件的 <strong>Current State</strong>。</p>\n<p>如此一來，只要使用者有傳入 <code class=\"language-text\">on</code> 這個 props，元件內部關於 <code class=\"language-text\">on</code> 這個 state 的變化，就會像是由使用者本身操控一般（因為我們在每次取得 current state 時都會 merge props 中對應的值），也就能讓使用者同步多個 <code class=\"language-text\">Toggle</code> component 了！</p>\n<p><code class=\"language-text\">Control Props</code> 用文字敘述比較繁瑣難懂，可以到下面的 demo link 玩玩，試著把 <code class=\"language-text\">Toggle</code> component 的 <code class=\"language-text\">on</code> props 拿掉看看差別，拿掉 props 後，兩個元件的狀態就無法同步，但元件本身的狀態還是正常的。\n<a href=\"https://codesandbox.io/embed/p94nmr2p2m\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a></p>\n<p>在 Kent C. Dodds 的 workshop 中，他其實還有介紹如何整合先前的 <code class=\"language-text\">State Reducer</code> 與 <code class=\"language-text\">Control Props</code>，不過我覺得過於複雜，除了很難光用文字敘述外，實際使用的機會感覺也不大，如果有興趣的讀者可以直接去 <a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a> 上看範例(file 10.js)</p>\n<h1 id=\"provider\" style=\"position:relative;\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider</h1>\n<p>Provider pattern 其實是為了解決 <code class=\"language-text\">Props drilling</code> 的問題，什麼是 <code class=\"language-text\">Props drilling</code> 呢？</p>\n<p>舉個簡單例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 toggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 toggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleToggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我知道這段 code 很奇怪，但這裡想呈現的重點是，有些時候我們可能真的想要把某個外層的 props 往下傳遞給底下的 component，這種情況下可能得一層一層將 props 往下帶，即便中間經過的 component 都不需要用到該 props。</p>\n<p>要解決這樣的問題，可以利用 React 的 <a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Context API</code></a>。</p>\n<p>雖然在 React 16 以前，<code class=\"language-text\">Context API</code> 在官方文件是一直處於一種不推薦使用的狀態，但大概因為太多人需要吧（像是 <code class=\"language-text\">redux</code> 等 state management 其實都有用到），現在有了新的實作，讓我們終於可以放心使用 <code class=\"language-text\">Context API</code> 了，因此這邊要介紹的 <code class=\"language-text\">Provider pattern</code>，其實就是利用 React 最新的 <code class=\"language-text\">Context API</code> 來解決 <code class=\"language-text\">Props drilling</code> 問題！</p>\n<p>早在<a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上篇</a>中介紹的 <code class=\"language-text\">Compound component</code> 我們就有用到 Provider pattern 了，而現在就讓我們用剛剛那個離奇的例子來做點修正吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> Consumer <span class=\"token operator\">=</span> ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ui <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> children <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>ui<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>利用 React 16 後出現的 <code class=\"language-text\">React.createContext()</code>，創造一個 <code class=\"language-text\">ToggleContext</code>，並將其提供的 <code class=\"language-text\">Consumer</code> 當作 static 變數放在 <code class=\"language-text\">Toggle</code> 中。</p>\n<p>接著在 render function 中我們使用 <code class=\"language-text\">Context API</code> 提供的另一個 component <code class=\"language-text\">Provider</code>，將傳入 <code class=\"language-text\">Toggle</code> 的 render props 包裹住，並且將 <code class=\"language-text\">Toggle</code> 本身的 <code class=\"language-text\">state</code> 或 <code class=\"language-text\">function</code> 傳到 <code class=\"language-text\">value</code> 這個 props 中。如此一來，<code class=\"language-text\">Toggle</code> 底下的所有 children 之後只要將自己用 <code class=\"language-text\">Toggle.Consumer</code> 包住就可以自由存取 <code class=\"language-text\">Toggle</code> 傳下來的 <code class=\"language-text\">value</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由上面的程式碼可以看到，<code class=\"language-text\">Toggle</code> component 的 <code class=\"language-text\">state</code> 與 <code class=\"language-text\">toggle</code> function 都會被當成 props 傳給被 <code class=\"language-text\">Toggle.Consumer</code> 包裹著的 children。</p>\n<p>包在第三層的 <code class=\"language-text\">&lt;Layer3 /></code> 就可以直接拿到想要的 <code class=\"language-text\">on</code> 與 <code class=\"language-text\">toggle</code>，再也不用從 <code class=\"language-text\">Layer1</code> 傳到 <code class=\"language-text\">Layer2</code> 再傳到 <code class=\"language-text\">Layer3</code> 了！</p>\n<p><a href=\"https://codesandbox.io/embed/m3p2p38z5j\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"higher-order-component\" style=\"position:relative;\"><a href=\"#higher-order-component\" aria-label=\"higher order component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher-order component</h1>\n<p>最後一個 Pattern 我想是大家最熟悉，也是我認為最需要懂得融會貫通的 <code class=\"language-text\">Higher-order component</code>，通常簡稱 <code class=\"language-text\">HOC</code>。旨在解決 <a href=\"https://en.wikipedia.org/wiki/Cross-cutting_concern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Cutting Concerns</a>，說白一點就是讓你將一些可共用的邏輯抽取出來，讓其他元件透過 <code class=\"language-text\">HOC</code> 的包裝後，能獲得該共用功能，之後修改新增時不會因為邏輯跟元件綁太緊而出現問題。</p>\n<p>雖然很重要，但這個 Pattern 相對簡單，React 官網其實就有<a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常詳細的介紹</a>。這邊就簡單介紹就好，先來個範例吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Layer3 <span class=\"token operator\">=</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>contextProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Layer4 <span class=\"token operator\">=</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>contextProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button2 is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button2 is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer4 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個範例延續前一個 <code class=\"language-text\">Provider pattern</code>，我們將 <code class=\"language-text\">Toggle.Consumer</code> 抽出來，包裝成一個 <code class=\"language-text\">HOC</code> <code class=\"language-text\">withToggle</code>，這樣一來，我們可以輕鬆製造出多個擁有 <code class=\"language-text\">Toggle</code> component 功能與狀態的元件，像是這邊的 <code class=\"language-text\">Layer3</code> 與 <code class=\"language-text\">Layer4</code>，他們只需要 care 自己的 UI 邏輯即可，剩下與 <code class=\"language-text\">Toggle</code> 相關的狀態操作都交由 <code class=\"language-text\">withToggle</code> 這個 HOC 幫忙處理。</p>\n<p>而 <code class=\"language-text\">withToggle</code> 長這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token parameter\">toggleContext</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>Component contextProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleContext<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Wrapper<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">withToggle(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span>\n    Component<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">hoistNonReactStatics</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>Wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不是很簡單呢！</p>\n<p><code class=\"language-text\">HOC</code> 負責主要的共用邏輯，在這邊就是 <code class=\"language-text\">Toggle.Consumer</code> 這段，然後將傳入的 <code class=\"language-text\">Component</code> 塞入，可能是放在 <code class=\"language-text\">render</code> 或是像這邊是傳入 <code class=\"language-text\">Consumer</code> 的 children。</p>\n<p>特別要注意的有三點，一個是 <code class=\"language-text\">displayName</code>，由於 <code class=\"language-text\">HOC</code> 會回傳一個新的 Component，這時如果你沒有明確定義一個 <code class=\"language-text\">displayName</code> 的話，在 Dev tool 裡你就只能看到一個 <code class=\"language-text\">Unknown</code> 的元件，會造成開發上的困擾，所以記得要指定一下 <code class=\"language-text\">displayName</code>，通常會用 <code class=\"language-text\">HOC</code> 自己的名稱加上原有 Component 的 <code class=\"language-text\">displayName</code>。</p>\n<p>另一個要注意的點是 <code class=\"language-text\">forwardRef</code>，在 React 中，<code class=\"language-text\">ref</code> 與 <code class=\"language-text\">props</code> 的處理方式不相同，<code class=\"language-text\">ref</code> 並不會如同 props 一般往下傳遞，若你想要取得被 <code class=\"language-text\">HOC</code> 包裹過的 component 的 <code class=\"language-text\">ref</code>，那在你的 <code class=\"language-text\">HOC</code> 中，必須使用 <code class=\"language-text\">React.forwardRef</code> 將其 forward 下去，詳細介紹可以看<a href=\"https://reactjs.org/docs/forwarding-refs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網說明</a>。</p>\n<p>最後，假如你原先的 component 有一些 <code class=\"language-text\">static method</code>，透過 <code class=\"language-text\">HOC</code> 包裝後，你可能會發現那些 <code class=\"language-text\">static method</code> 都取不到了！</p>\n<p>你必須要在 <code class=\"language-text\">HOC</code> 中自行複製一份到 <code class=\"language-text\">HOC</code> 上頭，像這樣（取自 <a href=\"https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官網</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Must know exactly which method(s) to copy :(</span>\n  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但這樣太麻煩了，我們可以直接利用 <code class=\"language-text\">hoistNonReactStatics</code> 這套 lib 來幫忙，這樣就萬無一失了！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/q3wmv6okqw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>介紹了這麼多種 Pattern，其實我覺得 HOC、Render Props 與 Compound Component 是最需要好好掌握並且多加運用的，其他如 State Reducer、Prop Collections and Getters 則是平常在進行 Code Review 時，可以好好拿出來思考一下是否能夠採用，為你的專案加分。\n無論如何，經過這樣的學習與紀錄，至少讓自己平日開發時，能主動多思考一些優化的方向與可能性，總體是蠻有收穫的！</p>\n<p>最後提供大家 Kent C. Dodds 在 workshop 後自己寫的一篇文章，<a href=\"https://blog.kentcdodds.com/mixing-component-patterns-4328f1e26bb5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixing Component Patterns</a>，裡頭他將這些 pattern 結合在一起使用，有興趣的讀者可以去看看到底這麼多 Pattern 要怎麼融合使用。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns workshop</a></li>\n<li><a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns V2 codesandbox</a></li>\n<li><a href=\"https://blog.kentcdodds.com/advanced-react-component-patterns-56af2b74bc5f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns Blog</a></li>\n<li><a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Answers to common questions about render props</a></li>\n<li><a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do more with less using render props</a></li>\n<li><a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React new context api</a></li>\n<li><a href=\"https://blog.kentcdodds.com/mixing-component-patterns-4328f1e26bb5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixing Component Patterns</a></li>\n</ol>","id":"58dec21e-0a3c-51c5-bef1-c4bdd9096457","fields":{"slug":"advanced-react-component-patterns-note-ii"},"frontmatter":{"date":"2018-07-21T23:33:27.000Z","title":"進階 React Component Patterns 筆記（下）","tags":["react","es6","javascript","pattern"],"type":"tech","slug":"advanced-react-component-patterns-note-II"},"timeToRead":16},"next":{"excerpt":"好歌分享：Massive fusion","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/hB_QW-wDR1k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Massive fusion</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/hB_QW-wDR1k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在前端的世界中，如何優化 performance 一直都是很重要的議題，也常常被拿來當作評斷前端工程師能力的一個依據。效能調教有許多方面可以探討，但最主要的重點就是希望使用者在操作網站時，不會感受到頁面跳動，尤其是當網站有動畫效果時，些微的跳動就會引起使用者注意。</p>\n<p>大概在去年的時候，同事為了解決 CSS Animation 在頁面上的不順暢，研究了不少 hack 技巧，其中一個讓我覺得很特別的就是今天的主角：FLIP。</p>\n<p>FLIP 技巧已經出來好幾年了，但我也是去年才知道，今天這篇算是個複習與回顧，順便分享給還不知道此技巧的讀者。</p>\n<h2 id=\"什麼是-flip為什麼我們需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-flip%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 flip為什麼我們需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 FLIP？為什麼我們需要它？</h2>\n<p>在開始介紹 FLIP 之前，必須先說明一下我們在製作 CSS 動畫時，可能會遭遇的效能問題。</p>\n<p>舉例來說，今天我們想要製造一個如下效果的動畫：</p>\n<p><img src=\"/image/flip-bad-sample.gif\" alt=\"Bad animation\">\n<a href=\"https://codepen.io/arvin0731/pen/wYXJdv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code link</a></p>\n<p>我們通常會需要調整 DOM 元素的位置與大小，而這類的操作會造成瀏覽器偵測到潛在的 Layout 改變，而重新從 pixel pipeline 的 Layout 階段開始 reflow 與 repaint，若同時在這階段進行其他 js 操作或是頁面互動，就會降低 fps，也就代表著頁面可能會掉幀，造成視覺上的跳動。</p>\n<p>當然在目前硬體設備越來越強大的狀態下，其實像上圖中的動畫很難會有問題，但若是背後有其他繁重的 js 在運作，還是有可能出現下面這樣的 fps 狀態：</p>\n<p><img src=\"/image/flip-bad-jank.png\" alt=\"Jank FPS\"></p>\n<p>解決方法通常就是要想辦法將這類花費昂貴的動畫改用 <code class=\"language-text\">transform</code>、<code class=\"language-text\">opacity</code> 來製作，讓動畫的進行能在 Composite 階段進行即可，不須動到 Layout。</p>\n<p>這時候就可以引入 FLIP 技巧來幫忙了！透過 FLIP 可以將那些會導致 Layout 更動的動畫，轉成以 <code class=\"language-text\">transform</code> 這樣的屬性來達成。</p>\n<h2 id=\"flip\" style=\"position:relative;\"><a href=\"#flip\" aria-label=\"flip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h2>\n<p>如果你直接 google 搜尋 FLIP，可能會查到滑板教學；搜尋 FLIP CSS，應該會出現卡片翻轉的動畫教學。</p>\n<p>那到底 FLIP 跟網頁動畫的優化有什麼關係呢？</p>\n<p>FLIP 其實是四個字的組合：<strong>F</strong>irst, <strong>L</strong>ast, <strong>I</strong>nvert, <strong>P</strong>lay：</p>\n<ul>\n<li><strong>F</strong>irst：在 FLIP 技巧中，我們需要先記錄下動畫元件的初始狀態。</li>\n<li><strong>L</strong>ast：接著進行一些運算後，套用動畫的最終狀態在動畫元件上，並且將完成動畫後的狀態記錄下來。</li>\n<li><strong>I</strong>nvert：FLIP 最主要的 hack 就是發生在這個階段。根據前兩個步驟，我們可以知道該動畫物件在動畫期間的位置變化，接著利用 <code class=\"language-text\">transform</code> 與 <code class=\"language-text\">scale</code>，將物件從動畫結尾位置移動回初始狀態的地點。</li>\n<li><strong>P</strong>lay：在最後的步驟時，元件已經被我們 <code class=\"language-text\">transform</code> 回起始點了，這時只要將 <code class=\"language-text\">transform</code> 屬性移除，並加上 <code class=\"language-text\">transition</code> 的效果，我們就能完美的消除原先昂貴的 Layout change，改以能擁有獨自 Layer 的 <code class=\"language-text\">transform</code> 來處理動畫效果。</li>\n</ul>\n<p>文字敘述可能不夠好懂，<a href=\"https://twitter.com/davidkpiano\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid</a> 做的這個範例應該就能非常清楚的說明 FLIP 原理：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"EbwrQQ\" data-default-tab=\"result\" data-user=\"davidkpiano\" data-pen-title=\"How the FLIP technique works\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/davidkpiano/pen/EbwrQQ/\">How the FLIP technique works</a> by David Khourshid (<a href=\"https://codepen.io/davidkpiano\">@davidkpiano</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>解釋起來其實會發現跟 FLIP 這個字其實也是很吻合的，把元件從結束狀態 ”翻“ 回初始狀態。</p>\n<p>看到這邊可能會有些人覺得困惑，為什麼要這麼麻煩，不能直接用 <code class=\"language-text\">transform</code> 搭配 <code class=\"language-text\">transition</code> 將元件移動至結束位置嗎？</p>\n<p>的確是可以，但如果你今天是要優化原先寫好的動畫，變成要重新手動計算 <code class=\"language-text\">transform</code> 的位置與 <code class=\"language-text\">scale</code> 的比例，是件麻煩的事，倒不如讓瀏覽器幫你處理這部分的計算，只要算出起點與終點位置的差異即可。</p>\n<p>此外，將元件先移至結束位置，再 <code class=\"language-text\">transform</code> 回去起點的方式，可以讓瀏覽器先知道這個動畫會走的過程，據說有助於更快的處理動畫。（但我沒有實際測試過，並非百分百確定有這種效果，也歡迎大家幫忙補充！）</p>\n<h2 id=\"接著我們實際做做看\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E5%AF%A6%E9%9A%9B%E5%81%9A%E5%81%9A%E7%9C%8B\" aria-label=\"接著我們實際做做看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們實際做做看</h2>\n<p>依照 FLIP 原則，我們將一開始的動畫做點調整：</p>\n<ul>\n<li><strong>F</strong>irst：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Fisrt: 記錄初始狀態</span>\n<span class=\"token keyword\">const</span> collapsed <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>L</strong>ast：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 進行運算, 套用動畫結尾的 css style</span>\nelem<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Last: 紀錄結束狀態</span>\n<span class=\"token keyword\">const</span> expanded <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>I</strong>nvert：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// INVERT</span>\n<span class=\"token comment\">// 根據在 F 與 L 紀錄的位置，我們算出其位置差距 (top 與 left)</span>\n<span class=\"token keyword\">const</span> invertedTop <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedLeft <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 大小的部分則是用寬高差去計算 scale 的比例</span>\n<span class=\"token keyword\">const</span> invertedWidth <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedHeight <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 設定 transform origin，代表動畫要從哪裡開始</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transformOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'top left'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 將算好的差距 apply 到 transform 屬性上</span>\n<span class=\"token comment\">// 這樣就能將元件 ”翻“ 回初始位置</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'translate('</span> <span class=\"token operator\">+</span> invertedLeft <span class=\"token operator\">+</span> <span class=\"token string\">'px, '</span> <span class=\"token operator\">+</span> invertedTop <span class=\"token operator\">+</span> <span class=\"token string\">'px) scale('</span> <span class=\"token operator\">+</span> invertedWidth <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> invertedHeight <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>P</strong>lay：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// PLAY</span>\n<span class=\"token comment\">// 利用 Raf，在下個 frame 開始時再做動畫</span>\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 設定 transition，並移除 transform，讓他再 \"翻\" 到結尾位置</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">'550ms ease-out'</span><span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>經由 FLIP 技巧調整過後的動畫：</p>\n<p data-height=\"713\" data-theme-id=\"dark\" data-slug-hash=\"EdRwmr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-pen-title=\"FLIP - good\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/EdRwmr/\">FLIP - good</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>我一開始看到這個實作時，稍微有點困惑，覺得為什麼可以直接先加上結尾狀態的 css，而不會讓元件真正更動？</p>\n<p>原因很簡單，就在於這些動作是在瀏覽器繪製下一個 frame 之前就做完的，在瀏覽器真正過了 16ms，要開始繪圖時，我們已經 apply 了另一個繪圖需求，也就是 <code class=\"language-text\">transform</code>。所以並不會看到元間跑到結束位置的狀況。</p>\n<p>從下面這張圖應該會更好理解：</p>\n<p><img src=\"/image/flip-web-fps.png\" alt=\"FPS\">\n<a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>上排黑色箭頭代表每一次的 frame render，下排則是繪圖需求，而紅色可以想做是我們計算結尾位置的動作。可以明顯看到，在每次紅色箭頭的後面，真正開始繪圖前，都有新的繪圖需求會蓋過去，因此瀏覽器並不會渲染紅色箭頭的部分。</p>\n<p>另外這邊要注意兩件事，第一個是 F、L、I 的時間需要掌控在 <strong>100ms</strong> 之內，根據 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Paul Lewis 的 FLIP 介紹文章</a>，使用者在做了互動後，到感知動畫的發生，這中間可以有 <code class=\"language-text\">100ms</code> 的空隙，我們只要能在這 100ms 中將初始與結尾位置計算完，並翻回初始點，使用者就不會感受到任何差異。</p>\n<p><img src=\"/image/flip-user-perception.jpg\" alt=\"user perception\">\n<a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>最後，在這個例子中，我需要利用 <code class=\"language-text\">transitionend</code> 這個事件，在動畫的最後把 <code class=\"language-text\">transition</code> 拿掉，否則下一次要計算動畫終點位置時 <code class=\"language-text\">elem.classList.add('expanded');</code>，就會產生 <code class=\"language-text\">transition</code> 效果，那不是我們要的。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>FLIP 技巧的概念很簡單，但實作起來的確會增加不少程式碼，但好在有不少套件可以使用，也能搭配 Web Animations API (<a href=\"https://github.com/web-animations/web-animations-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">polyfill</a>) 來開發。比較推薦的是 <a href=\"https://github.com/davidkpiano/flipping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid 的 flipping.js</a>，他在去年也有寫了一篇文章來介紹 <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a>，其中還有講到如何將 FLIP 應用在兩個獨立的元件上，寫得很棒很清楚，推薦大家直接去閱讀！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a></li>\n<li><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></li>\n<li><a href=\"https://medium.com/outsystems-experts/flip-your-60-fps-animations-flip-em-good-372281598865\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your 60 FPS Animations, FLIP ’Em Good</a></li>\n<li><a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your Animations</a></li>\n</ol>","id":"fad35fd6-9d68-5f2f-894c-29dac6638623","fields":{"slug":"flip-your-animation"},"frontmatter":{"date":"2018-10-20T17:46:57.000Z","title":"FLIP 技巧總複習","tags":["css","javascript","flip","animation"],"type":"tech","slug":"flip-your-animation"},"timeToRead":7},"type":"tech"}},"staticQueryHashes":["2123680655"]}