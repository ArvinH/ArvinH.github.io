{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/the-self-improvement-program-20-percent-time","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>慢走不送 2020，讓我們在 2021 一起 LOST IN PARADISE! <a href=\"https://youtu.be/KnakQRoQRzk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ALI – LOST IN PARADISE feat. AKLO</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/KnakQRoQRzk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>年末年始很適合來回顧過去展望未來，2020 對我們這代人來說絕對是難以忘記的一年，面對 2021，希望我們繼續保有對生活的熱情，享受生命的每一刻美好。</p>\n<p>2021 的第一篇文章不談生硬的技術、不寫長篇的教學文，我想分享一下在 2020 的最後一個 quarter 中，公司團隊所嘗試的 self-improvement 計畫，討論它為我們帶來的好處與是否適合大家嘗試導入。</p>\n<h2 id=\"何謂-self-improvement-計畫又為何重要\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-self-improvement-%E8%A8%88%E7%95%AB%E5%8F%88%E7%82%BA%E4%BD%95%E9%87%8D%E8%A6%81\" aria-label=\"何謂 self improvement 計畫又為何重要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 self improvement 計畫？又為何重要？</h2>\n<p>這個計畫實際上是由我們團隊新進主管所提出的，他認為，除了完成工作上交付的任務外，持續去精進專業能力是我們工程師的一種生活方式，這點相信毋庸置疑，大家都在推廣要撰寫部落格、參與開源專案、製作 side project 等等，這都是為了精進我們的專業能力。</p>\n<p>然而，生活不是只有這個面向，工程師也需要照顧家人、培養各種嗜好\b，以及享受其他生活美好；或更簡單點，維持你的 mental health。</p>\n<p>若要在下班後的時間，同時完成這所有的事情，著實是相當困難。</p>\n<p>因此他提出的 self improvement 計畫就是希望能建立一個框架，讓這一切從理想狀態變成現實。</p>\n<p>相信大家都聽過 Google 著名的 20% time，也就是能利用上班時間的 20% 來做自己想嘗試的專案，無論是否直接跟工作有關聯。</p>\n<p>所謂的 self improvement 計畫就是類似的概念，利用每個 sprint 的 20% 時間來增進自我，差別在於執行的專案必須要能夠幫助到你在工作上的成長。</p>\n<p>以一個 sprint 兩個星期來說，總共十個工作天，20% 的時間等同於每個 sprint 必須騰出兩天的時間給團隊成員執行自我精進計畫。</p>\n<p>沒錯，這等同於在要求公司對員工進行投資，但其實你仔細想想是非常合理的，畢竟當你精進了專業能力，公司當然也會受惠，更別提在過程中你的產出可能就已經直接對公司帶來正面影響，像是你可能在過程中幫忙製作了增進大家效率的開發工具等等。</p>\n<p>不過說是這樣說，一切還是很理想化，因此在真正執行這個計畫前，團隊內部是進行不少討論的，尤其是需要說服 PM 們認同這項計畫的好處，因為這是有可能會影響到公司專案的時程。</p>\n<h2 id=\"實際運作方法\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E9%81%8B%E4%BD%9C%E6%96%B9%E6%B3%95\" aria-label=\"實際運作方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際運作方法</h2>\n<p>Self improvement 計畫可以歸納為三個步驟：</p>\n<ul>\n<li>The what: 選擇你要做的專案</li>\n<li>The how: 執行</li>\n<li>The outcome: 分享結果</li>\n</ul>\n<p>剛剛提到，我們的 self improvement 計畫與 Google 的 20% 不同的點在於我們有限制能做的專案範圍，但實際上我們的規範還是非常寬鬆的，主要分成三類：</p>\n<ol>\n<li>Improve internal projects and tools</li>\n<li>Evaluates a new technology or framework</li>\n<li>Language Improvement</li>\n</ol>\n<p>你可以選擇利用平常想玩但工作上用不到的技術來實作一些增進開發效率的工具，像是我們有成員利用這時間製作了集合我們日常開發所需工具的 CLI tool，平常需要許多步驟才能設置好的環境，現在只要透過 CLI 下個指令就通通搞定，甚至有 web UI 介面可以操作；又或者你可以學習一門新的語言，截長補短，將好的概念應用到日常工作中，舉例來說，有成員學習了 Rust 與 webassembly，將 Rust 語言在 error handling 的一些概念引進我們 Typescript 的專案（雖然這樣的作法好壞見仁見智，但就我個人看來，這種火花對團隊是非常好的）。\n此外，畢竟公司是跨國團隊，語言溝通還是很重要的一個環節，利用這時間來增進你的英文或其他語言的水平，對個人與公司都是有極大的好處。</p>\n<p>除了上述這些偏向個人取向的例子外，也可以是組成一個小團隊來執行 self improvement 專案，像是前後端工程師互相舉辦 workshop，讓前端學習後端，後端了解前端；或是組織系統設計的讀書會，一起思考設計產品系統等等。</p>\n<p>上述是三步驟中的第一步驟，也就是你要利用 self improvement time 做什麼。基本上只要能規範在我們定義的三大分類中，你做什麼都是可以的。</p>\n<p>再來是執行面，我們訂定 two-week sprint 中的最後兩天作為 self improvement time，在每次的 sprint planning 與 backlog refinement meeting 時，必須考量到實際工作天數只有八天，依此來權衡各項 task 的優先順序，並依照先前的 sprint velocity 調整放進sprint 的點數。</p>\n<p>而最後那兩天其實也並非整整 16 小時都是 self improvement time，我們把 sprint review, demo 與 retrospective meeting 分插到這兩天內。會想將這些 ceremonies 與 self improvement time 放在一起是有原因的，首先，每次開完 sprint review/demo 與 retrospective 後，工作效率通常不會太好，畢竟是一個 sprint 的結束，將 self improvement time 安排在同一時間內，不僅能提升大家士氣，也比較好用來說服 PM 們；另外，雖然 review、demo 與 retrospective 算是 scrum ceremonies 內比較輕鬆的部分，但就我們團隊內部觀察下來，我們也是會花費不少時間在分析檢討，將他們拆分成不同時段的會議，也有助於大家更能集中精神、更有效率。</p>\n<p>最後一個步驟是 outcome，我們利用公司資源，把時間花在進行 self improvement 上，總是要做出點什麼成果才說得過去，對吧？</p>\n<p>這樣的想法是很自然的，但執行起來有很多面向要考慮，首先，要確保成員信任這個機制並不會影響到你的績效考核，否則所謂的 20% time 就不是 80% + 20%，而是 100% + 20%，額外增加了更多的壓力在成員身上，這就本末倒置了。</p>\n<p>再來就是不該限制形式，我們鼓勵大家舉辦 sharing、workshop、open source 或甚至是參加 conference 的方式去展現你的成果，但沒有任何硬性規定。</p>\n<p>每個月，我們會舉辦一次內部的簡單分享會，讓大家自由得談論各自在 self improvement time 中做了哪些事情，還有哪些想做、有沒有需要找人一起幫忙的等等。在分享會上，我們不批判你的進度與成就多寡，我們專注在這過程中，你『有沒有獲得』些什麼。</p>\n<p>在一個大家都有同樣共識，且優質的團隊內，你會發現這樣看似過於自由奔放的機制，反而能驅動大家去做出很棒的東西，以我們團隊的例子來說，有人因為這多出來的時間，有機會在公司內部工程部落格中發表研究成果，也有人撰寫了一整套 CI 自動化測試的工具，能夠推廣給公司內其他團隊使用，並寫出完整的說明文件。</p>\n<p>你或許會說這些人就算沒有 self improvement time 也會做這些事，但重點就是，讓他們在工作的時間內完成，對成員本身來說的感覺就很好，更別提能讓他們有更多的時間去接觸專業外的事物，接收不同的刺激，理論上能更加反饋到專業能力上頭。</p>\n<h2 id=\"執行結果與過程中的阻礙\" style=\"position:relative;\"><a href=\"#%E5%9F%B7%E8%A1%8C%E7%B5%90%E6%9E%9C%E8%88%87%E9%81%8E%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%98%BB%E7%A4%99\" aria-label=\"執行結果與過程中的阻礙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>執行結果與過程中的阻礙</h2>\n<p>說得這麼美好，實際的執行過程中，也是有一些阻礙，否則就也不會有網路上一堆關於 Google 20% time 神話破滅的討論了（<a href=\"https://channels.theinnovationenterprise.com/articles/the-myth-of-google-s-20-time\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Myth Of Google's 20% Time. It is one of the most enduring innovation ideas, but it may not be all that it seems</a>, <a href=\"https://www.businessinsider.com/google-20-percent-time-policy-2015-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The truth about Google's famous '20% time' policy</a>, <a href=\"https://buzzorange.com/techorange/2018/09/18/is-googles-20-any-real/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google 創新「80/20」法則名存實亡？員工時間分配技巧是創新最大考驗</a> ），就連待過谷歌的前雅虎 CEO Malissa Mayer 都說那其實是 120% time 了。</p>\n<p>在試驗的一個季度內，我們總共執行了兩次 monthly sharing，每一次都會收集一些 feedback 來做調整，大致上觀察到的阻礙有以下幾點：</p>\n<ul>\n<li>真的不知道要做什麼。不是每個工程師都有想要做的 side project。</li>\n<li>難以在平常的工作時間切換思緒，去做增進自我的專案。</li>\n<li>self improvement 計畫只有在我們團隊內部執行，許多跟其他團隊有相依性的事務很難真的在那兩天內排開，加上後端團隊都有 on call schedule。</li>\n</ul>\n<p>這幾點是比較難解決的必然問題，對於不知道要做些什麼的成員，我們會由其他成員來帶動，邀請他們加入其他已經在進行的專案；覺得無法適應如此切換工作狀態的成員，我們也不勉強，先以安排工作上一些比較沒時間處理的 refactor 或 tech debt 給對方，讓他們慢慢適應；而至於與其他團隊的合作上，我們也會告知他們我們的 scrum 時程，在不影響公司主體專案進行下，調整 schedule，並在必要時給予 support，但還是以不打擾成員兩天的 self improvement time 為基本準則。</p>\n<p>上述問題用這樣的處理方式到目前為止算是還算穩當，但畢竟才執行一個季度，後續還需要繼續觀察調整。</p>\n<p>對於我個人來說，困難的部分在於要捨得在那兩天確切的放下工作上的項目。即便在 sprint planning 時已經把時間也考慮進去了，但在實作 tasks 的過程，不免會有一些突發狀況，或是靈光一閃想要多做些什麼東西，這時候在那兩天內我還是會偶而會忍不住偷做一下工作的內容，但由於 self improvement 計畫並沒有規定要有多少產出，也不在績效內，所以並不至於到變成 120% time。</p>\n<p>另外還有一點值得一提。</p>\n<p>在前面我說過，我們為了不增加大家的負擔，盡量不限縮成果分享的形式與內容多寡，但我們是很明確的跟大家說明『一定要空出兩天作為 self improvement 計畫』，算是強制性要求大家參與，若是連參與本身都不強制，那整個計畫很容易就流於形式，到最後就不知不覺得消失了。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>就如同前面提供的許多關於 Google 20% time 機制的討論，這件事情執行起來很容易不小心就走歪，絕對不是適合每間公司每個團隊都採取這樣的做法，但至少是值得大家拿出來討論看看，是否能對你的團隊造成正面影響。我也不會覺得我們團隊能夠依照現在的步調走到多遠，但不斷的試驗與調整不就是工程師最擅長的嗎？大家又是怎麼看待這件事情呢？歡迎大家一起提出觀點討論！</p>","fields":{"slug":"the-self-improvement-program-20-percent-time"},"frontmatter":{"title":"20% self-improvement program 實際案例分享","date":"01-02-2021","tags":["self improvement","20% time"]},"timeToRead":8}},"pageContext":{"slug":"the-self-improvement-program-20-percent-time","prev":{"excerpt":"好歌分享：Figma In Quarantine: The Musical","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/vHXmj3hN5mI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Figma In Quarantine: The Musical</a></p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Figma 已經是現在設計師間的必備武器，不少人都已經從 <a href=\"https://medium.com/as-a-product-designer/%E6%88%91%E5%BE%9E-sketch-%E8%80%81%E7%B2%89%E8%AE%8A%E6%88%90-figma-%E9%90%B5%E7%B2%89%E7%9A%84-10-%E5%80%8B%E7%90%86%E7%94%B1-4a47a4e394c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sketch 轉移到 Figma</a> 上，其免費方案幾乎包含所有核心功能，讓像我一樣沒有設計專業的工程師也能毫無壓力的使用。</p>\n<p>Figma 主要建構於 Web 技術，透過 <code class=\"language-text\">Webassembly</code> 來使用 C++ 等模組，而其推出的 Plugin 平台理所當然也能由 Javascript 撰寫。</p>\n<p>基於這個事實，讓我覺得或許學習一下如何撰寫 Figma plugin 是個不錯的投資，如果能提供公司內部設計師所需要的外掛，不僅能提升整體工作的效率，也能提高自己對團隊的影響力，雙贏策略！所以今天就來學習一下如何製作 Figma plugin！</p>\n<p>如果有讀者不太知道 Figma plugin 會長什麼樣子，這邊給大家看個範例：</p>\n<p><img src=\"/image/figma-plugin-demo.gif\" alt=\"demo\"></p>\n<p>也可以去官方 <a href=\"https://www.figma.com/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">community</a> 網站看看其他實際發佈上線的外掛，並載下來試用。</p>\n<p>上圖的範例是為設計中的元件加入一些 status，像是 <code class=\"language-text\">In review</code>，<code class=\"language-text\">Work in progress</code> 等等。（實際上早已有人實作ㄧ樣點子的<a href=\"https://www.figma.com/community/plugin/742769304454952644/Status-%E2%9C%85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">外掛</a>，也比較完善，所以我也不打算發佈出去，就當作一個練習，並拿來說明實作過程，<a href=\"https://github.com/ArvinH/figma-status-label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼在此</a>。）</p>\n<p>在開始之前，想跟大家分享一個很讚的東西，這是一齣由 Figma 員工在其內部一年兩次的 Maker Weeks 中所製作的音樂劇，完整體現 2020 年因為武漢肺炎而造成的許多工作軼事，其中還包含他們處理 incident 的過程，好聽之外也非常有趣，他們應該都工作得很愉快吧：）</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/vHXmj3hN5mI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><em>剛好最近又是他們的 Maker Weeks，可以到 Figma 的 <a href=\"https://twitter.com/figmadesign\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a> 看看員工分享他們做了什麼！</em></p>\n<h2 id=\"一些簡單的前置作業\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E4%BA%9B%E7%B0%A1%E5%96%AE%E7%9A%84%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\" aria-label=\"一些簡單的前置作業 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些簡單的前置作業</h2>\n<p>如果你跟我一樣，是個蠻愛跟風的前端工程師，需要做的前置作業相信你都早已準備好了。</p>\n<p>基本就是需要你有能夠運行 Typescript、Nodejs 與 NPM 的環境、適合 TS 的編輯器（VScode, etc）以及桌面版本的 Figma。</p>\n<p>對，目前若是要開發 Figma Plugin，你必須使用桌面版本，他們才能讀取你本地端的程式來執行。</p>\n<h2 id=\"figma-plugin-context-介紹\" style=\"position:relative;\"><a href=\"#figma-plugin-context-%E4%BB%8B%E7%B4%B9\" aria-label=\"figma plugin context 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Figma plugin context 介紹</h2>\n<p>在真的進入開發階段前，先了解一下 Figma plugin 是怎麼運作，其基本架構為何，對開發會有不小的幫助，就像是你開發 Chrome extension 時，也得先搞懂何謂 <code class=\"language-text\">background scripts</code>、<code class=\"language-text\">content scripts</code> ㄧ樣。</p>\n<p>如同前面所說，Figma plugin 全由 Web 技術打造，也就是 Javascript、CSS 與 HTML，然而為了維持 Figma 本身的穩定與安全性，你的 plugin 需要拆分成兩個部分，執行在不同的環境：</p>\n<ul>\n<li><strong>Sandbox</strong></li>\n</ul>\n<p>一部分是運行在 Figma main thread 中 Sandbox 內的程式，可以使用完整的 ES6 Javascript，存取操作 Figma 檔案內容，但無法存取 DOM 物件，也無法發出網路請求。</p>\n<ul>\n<li><strong>iframe</strong></li>\n</ul>\n<p>另一部分則是運行在 iframe 內，可以存取 DOM 元素、發起網路請求等一般的網頁功能，因此也是你提供 plugin 使用者外掛操作介面的地方。</p>\n<p>從<a href=\"https://www.figma.com/plugin-docs/how-plugins-run/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>的一張圖中，可以非常簡單明瞭的看出架構：</p>\n<p><img src=\"/image/figma-plugin-structure.png\" alt=\"figma-plugin-structure\"></p>\n<p>兩個部分的程式的溝通如同 worker 與 main thread 溝通一般，透過 <code class=\"language-text\">postMessage</code> 與 <code class=\"language-text\">onmessage</code> 來收發訊息。</p>\n<h2 id=\"目前支援的-figma-plugin-api\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8F%B4%E7%9A%84-figma-plugin-api\" aria-label=\"目前支援的 figma plugin api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前支援的 Figma Plugin API</h2>\n<p>目前 Figma plugin API 支援：</p>\n<ul>\n<li>\n<p><strong>Reading layers and layer properties in the local file</strong></p>\n<p>理論上整個 figma file 內的 content 你都能夠讀取，包含 layer 的各種屬性。在現有架構下，即便有缺少的，也能夠提 request 請官方補上，不會太困難。</p>\n</li>\n<li><strong>Create a modal with custom UI</strong></li>\n<li>\n<p><strong>Access browser APIs</strong></p>\n<p>由於有一部分的 code 是會運行在上述提到的 iframe 中，而在 iframe 中基本上你可以創建任何 Web UI，運行 JS、發送 network request 等等。</p>\n</li>\n</ul>\n<p>雖然看起來只有三個大類別，但其實也已經包含了上百個 method 與可操作的屬性。</p>\n<p>未來官方還想繼續拓展延伸的部分有更多，包含像是 <code class=\"language-text\">Access Team library</code>、<code class=\"language-text\">Access Team info</code>，以及我最想要的 <code class=\"language-text\">Trigger plugin code on events</code> 等等。不過這些並沒有排入他們目前的 Road map 中，因為要在不影響主要產品的穩定度下進行，需要考慮的東西很多，所以沒有明確的 Timeline。</p>\n<p>至於詳細的項目以及個別項目實作上會有的困難，官方都有在<a href=\"https://www.figma.com/plugin-docs/whats-supported/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文件</a>中說明，我覺得很簡單易讀，建議大家有興趣的話去看一看，可以看出他們對於整體設計上的一些思路。</p>\n<h2 id=\"存取-figma-document\" style=\"position:relative;\"><a href=\"#%E5%AD%98%E5%8F%96-figma-document\" aria-label=\"存取 figma document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>存取 Figma Document</h2>\n<p>基本上 Figma 的 plugin 都是想要存取 Figma 檔案內的物件，或是應該說是 Layer：</p>\n<p><img src=\"/image/figma-layers-example.png\" alt=\"figma-layers-example\"></p>\n<p>不過以程式的角度來看，Layer 其實比較適合用 <code class=\"language-text\">node</code> 來代表。</p>\n<p>有稍微用過 Figma 這類設計工具就知道，物件都可以被 Grouping 在一起成為一個物件，但你還是能繼續編輯 Group 底下的每一個物件，也就是 Layer 底下還可能會有其他 Layer，而這個概念就跟樹狀結構一樣\b，所以在撰寫程式的時候，用 <code class=\"language-text\">node</code> 來代表會直覺一點。</p>\n<p>例如，如果我們想要將當前選擇的物件中的文字統一調整成 font size 16，我們可以這樣寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"TEXT\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 告知 figma 你的 plugin 已經結束，可以關閉。</span>\nfigma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>而當你需要遍歷尋找特定節點時，就可以依靠我們學習樹狀資料結構時最常用的 traverse 函式，自己去找出需要的 Node：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"children\"</span> <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"INSTANCE\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// leaf, do something...etc</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 從 root 開始跑, 用 figma.root 也可</span></code></pre></div>\n<h3 id=\"node-type\" style=\"position:relative;\"><a href=\"#node-type\" aria-label=\"node type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Type</h3>\n<p>Figma 中有許多類別的 Node，像是 <code class=\"language-text\">[RectangleNode](https://www.figma.com/plugin-docs/api/RectangleNode)</code>、<code class=\"language-text\">[TextNode](https://www.figma.com/plugin-docs/api/TextNode)</code> 與 <code class=\"language-text\">[FrameNode](FrameNode)</code> 等等，完整列表可以參考官方文件 - <a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node Type</a>。</p>\n<p>零零總總有 16 種不同類別的 Node，每一種也都擁有不同的屬性。要記起來不太可能，這時就得感謝一下 Typescript 的幫忙，Figma 有提供 <code class=\"language-text\">@figma/plugin-typings</code> 供你使用，搭配 VSCode 的支援，在操作不同 Node 時，可以輕鬆知道其所擁有的屬性，若是不清楚詳細用法，再對照<a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>即可。</p>\n<p><img src=\"/image/figma-typescript-autocom.png\" alt=\"ts-autocomplete\"></p>\n<p>此外，因為大部分的 Plugin 都是作用在特定的 Node type，為了不讓系統 crash，製作 plugin 時，各種 edge case 的處理就很重要，你要顧慮到當使用者在不適合的 Node type 上使用你的 plugin 時該怎麼處理，無論是 ignore 或是給予警告都可以，重點是要盡量讓系統維持穩定。</p>\n<h2 id=\"編輯屬性\" style=\"position:relative;\"><a href=\"#%E7%B7%A8%E8%BC%AF%E5%B1%AC%E6%80%A7\" aria-label=\"編輯屬性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>編輯屬性</h2>\n<p>看到這邊你可能會覺得奇怪，編輯屬性為什麼需要特別提出來說呢？</p>\n<p>一般來說，更改 Object 內部的 properties，我們自然會這樣處理：</p>\n<p><code class=\"language-text\">text.fontSize = 12</code></p>\n<p>在 Figma plugin sandbox 中操作普通的 Node object 時，這樣的寫法大部分也會是有效的。</p>\n<p>然而，若是要操作一些複雜一點的屬性，像是陣列（Array）與陣列內的物件（Object）時，就不能這樣處理，除了修改不會生效外，Figma 也會報 Error：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// error: object is not extensible</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>otherNode<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// error: Cannot assign to read only property 'r' of object</span>\nnode<span class=\"token punctuation\">.</span>fills<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">10</span></code></pre></div>\n<p>若要成功更改內容，你必須複製整個內容然後取代，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nselection<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>someNode<span class=\"token punctuation\">)</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> selection</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fills <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>fills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfills<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\nrect<span class=\"token punctuation\">.</span>fills <span class=\"token operator\">=</span> fills</code></pre></div>\n<p>之所以要這樣做，主要原因是，某些 Javascript Object 在 Figma 的 Sandbox 中其實並不是一般的 Javascript Object，Figma 在其內部有特殊的實作，expose 出的介面可能背後有複雜的抽象細節，像是屬性更動時，需要處理 <code class=\"language-text\">re-render</code>、<code class=\"language-text\">update instance</code> 等等；加上 Figma 背後使用 <a href=\"https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly memory</a>，基於穩定性與實作複雜度的考量，才只能出此下策。</p>\n<p>這點在實作 Plugin 的過程中，算是比較需要注意以及比較麻煩的點。</p>\n<p>官方在文件內有說明他們的難處與考量，有興趣的可以前去詳讀，附上連結<a href=\"https://www.figma.com/plugin-docs/editing-properties/#the-why\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在此</a>。</p>\n<h2 id=\"開始實作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"開始實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作吧</h2>\n<p>基本的概念介紹得差不多了，可以開始實作了。</p>\n<p>回顧一下我們的範例：</p>\n<p><img src=\"/image/figma-plugin-demo.gif\" alt=\"demo\"></p>\n<p>功能很簡單，就是幫使用者選取的物件加上 Label，會創建出一個 FrameNode，然後與使用者選取的物件群組在一起。</p>\n<p>前面說過，要開發 Figma plugin 需要使用 Figma 桌面版（有 Windows 與 Mac 版本），在 Figma 桌面版中，<code class=\"language-text\">點選右鍵 -> Plugins -> Development -> New Plugin...</code>：</p>\n<p><img src=\"/image/figma-new-plugin-1.png\" alt=\"figma-new-plugin-step1\"></p>\n<p><img src=\"/image/figma-new-plugin-2.png\" alt=\"figma-new-plugin-step2\"></p>\n<p>Figma 已經為你準備好了一些基本的 template，有三種選項可以選擇，<code class=\"language-text\">RunOnce</code> 與 <code class=\"language-text\">With UI &amp; browser APIs</code> 的差別就在於有沒有 <code class=\"language-text\">iframe</code> 的環境可以提供 Plugin 使用者一個 UI 介面操作。</p>\n<p><img src=\"/image/figma-new-plugin-3.png\" alt=\"figma-new-plugin-step3\"></p>\n<p>選定好 template 後，選擇 <code class=\"language-text\">Save as...</code> 就可以將一個 Figma plugin template 載下。（這次的範例選擇 <code class=\"language-text\">With UI &amp; browser APIs</code>）</p>\n<p>載下來的 Plugin template 結構如下：</p>\n<p><img src=\"/image/figma-new-plugin-template-structure.png\" alt=\"figma-new-plugin-template-structure\"></p>\n<p>是一個簡單的 typescript project，<code class=\"language-text\">code.ts</code> 是主要的 Figma Plugin Sandbox 程式，<code class=\"language-text\">code.js</code> 可想而知是編譯後的檔案。</p>\n<p><code class=\"language-text\">ui.html</code> 則是運行在 <code class=\"language-text\">iframe</code> 裡面，你可以用來繪製 UI 與使用 browser APIs、Network reqeust 的部分。</p>\n<p><code class=\"language-text\">mainifest.json</code> 則是用來描述你的 Plugin，告知 Figma 你的 Sanbox code 與 iframe code 位置在哪等等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StatusLabel\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"917361515292167655\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"code.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui.html\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊的 <code class=\"language-text\">main</code> 與 <code class=\"language-text\">ui</code> 就是主要程式進入點，所以你其實也可以像開發一般的 Web SPA 一樣，用 React、Vue 來製作 UI，用 Webpack 來 bundle 你的程式，只要指定對路徑即可。範例可以參考<a href=\"https://www.figma.com/plugin-docs/bundling-webpack/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">此處</a>。</p>\n<p><strong>ui.html</strong></p>\n<p>我們先從 <code class=\"language-text\">ui.html</code> 開始看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Select status label<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Choose a status<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LGTM<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>LGTM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Work in progress<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Work in progress<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>In Review<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>In Review<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Please Review<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please Review<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Create<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cancel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cancel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> select <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">[</span>select<span class=\"token punctuation\">.</span>selectedIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pluginMessage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cancel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pluginMessage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'cancel'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>完全就是一個普通的 HTML 檔案，唯一要注意的是，因為他是運行在 iframe 裡面，所以當我們要將資訊傳遞給 Sandbox 內的 <code class=\"language-text\">code.ts</code> 時，得用 <code class=\"language-text\">parent.postMessage()</code>。</p>\n<p>傳遞的參數要用 <code class=\"language-text\">pluginMessage</code>，可以傳遞幾乎任何 object。這邊我們為了要讓 Sandbox 內的 <code class=\"language-text\">code.ts</code> 知道使用者點選了哪種 Button，以及選擇了哪個 status label，我們定義以下的 Message 來傳遞：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Msg <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'create-label'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cancel'</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用者 select 的字串</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的程式碼呈現在 Figma 當中就如下圖（畫面中的 Developer VM <a href=\"#%E5%A6%82%E4%BD%95%E9%99%A4%E9%8C%AF\">待會會說明</a>）：</p>\n<p><img src=\"/image/figma-plugin-ui.png\" alt=\"figma-plugin-ui\"></p>\n<p><strong>code.ts</strong></p>\n<p>使用者介面有了，接著來看 <code class=\"language-text\">code.ts</code>。</p>\n<p>主要重點有兩個函式：<code class=\"language-text\">figma.showUI</code> 與 <code class=\"language-text\">figma.ui.onmessage</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This shows the HTML page in \"ui.html\".</span>\nfigma<span class=\"token punctuation\">.</span><span class=\"token function\">showUI</span><span class=\"token punctuation\">(</span>__html__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfigma<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...Implementation details</span>\n  <span class=\"token comment\">// ...ignore for now</span>\n  <span class=\"token comment\">// Make sure to close the plugin when you're done. Otherwise the plugin will</span>\n  <span class=\"token comment\">// keep running, which shows the cancel button at the bottom of the screen.</span>\n  figma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">figma.showUI</code> 就是單純告知 Figma 你有一個 UI 要呈現給使用者，參數 <code class=\"language-text\">__html__</code> 會指向 <code class=\"language-text\">ui.html</code> 的內容，Figma 會開啟一個 Modal 去呈現這個 iframe UI。</p>\n<p><code class=\"language-text\">figma.ui.onmessage</code> 用來接收從 iframe 傳來的 <code class=\"language-text\">postMessage</code>。（相反的，我們也可以用 <code class=\"language-text\">figma.ui.postMessage</code> <a href=\"https://www.figma.com/plugin-docs/creating-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">傳遞資訊給 iframe</a>，iframe 以 <code class=\"language-text\">window.onmessage</code> 接收。）</p>\n<p>以我們的<a href=\"https://github.com/ArvinH/figma-status-label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>來說，我們想要接收的訊息可以分為兩種：</p>\n<ul>\n<li>插入使用者選擇的 Status label（Create button）</li>\n<li>關閉外掛（Cancel button）</li>\n</ul>\n<p>在 <code class=\"language-text\">figma.ui.onmessage</code> 中，我們根據接收到的 <code class=\"language-text\">msg.type</code> 來判斷是要處理哪一種類型的動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">figma<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 替選取的物件加上 label</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 若 msg.type !== 'create-label'，就直接關掉 plugin，也就是 cancel button</span>\n  figma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>當 <code class=\"language-text\">msg.type</code> 為 <code class=\"language-text\">create-label</code> 時，代表我們要創建 status label 並與使用者當前選取的 Layers（Nodes）群組在一起：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodes<span class=\"token operator\">:</span> SceneNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">loadFontAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> family<span class=\"token operator\">:</span> <span class=\"token string\">\"Roboto\"</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> <span class=\"token string\">\"Bold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> group<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 調整位置</span>\n    frame<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    frame<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n    group <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    group<span class=\"token punctuation\">.</span>layoutGrow <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span>\n  figma<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span><span class=\"token function\">scrollAndZoomIntoView</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因為我們的 Label 需要用到文字，也就是 <code class=\"language-text\">TextNode</code>，在 Figma 內他會要求你先載入字體檔，所以才需要加入這行：<code class=\"language-text\">await figma.loadFontAsync({ family: \"Roboto\", style: \"Bold\" });</code>。</p>\n<p>接著我們遍歷 <code class=\"language-text\">figma.currentPage.selection</code> 這個陣列，該陣列包含所有被使用者選取的 Layers（Nodes），我們針對每一個 Node 都創建一個 Label，這邊我們使用的是 <a href=\"https://www.figma.com/plugin-docs/api/FrameNode/#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">FrameNode</code></a>，類似於 HTML 中的 <code class=\"language-text\">Div</code>，我們用他與 <a href=\"https://www.figma.com/plugin-docs/api/TextNode/#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">TextNode</code></a> 一起組合排版出一個 Label，像這樣：</p>\n<p><img src=\"/image/figma-plugin-ui-label.png\" alt=\"figma-plugin-ui-label\"></p>\n<p><code class=\"language-text\">createLabel</code> 函式是我自己抽出去實作的，主要就是針對 <code class=\"language-text\">FrameNode</code> 與 <code class=\"language-text\">TextNode</code> 做排版、顏色、內容的處理，這邊簡略給大家看一下，實際上 Node 的使用方式，例如有什麼屬性可以調整，可以搭配<a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>閱讀：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createLabel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">createFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Status Label'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n  frame<span class=\"token punctuation\">.</span>fills <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'SOLID'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> colorMap<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>cornerRadius <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">createText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>fontName <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> family<span class=\"token operator\">:</span> <span class=\"token string\">\"Roboto\"</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> <span class=\"token string\">\"Bold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n  <span class=\"token comment\">// 這邊將 ui.html 傳入的 msg.text assign 給 TextNode</span>\n  text<span class=\"token punctuation\">.</span>characters <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>constrainProportions <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> frame<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再來呢，我們想要讓群組好的 <a href=\"https://www.figma.com/plugin-docs/api/GroupNode/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">GroupNode</code></a>，自動被選取，並移動到使用者視野正中間。</p>\n<p>要做到這件事，我們必需把他放入一個 Node 陣列中，因為如同我們在 <a href=\"#%E7%B7%A8%E8%BC%AF%E5%B1%AC%E6%80%A7\">編輯屬性</a> 提到的，要跟改陣列物件，我們必須整個陣列改掉才能生效：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...略</span>\n<span class=\"token keyword\">const</span> nodes<span class=\"token operator\">:</span> SceneNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...略</span>\n<span class=\"token comment\">// 將我們創造的 Label frameNode 與 目前選到的 Node 群組起來。</span>\ngroup <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...略</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 呼叫此 API 來移動 view port</span>\nfigma<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span><span class=\"token function\">scrollAndZoomIntoView</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到這邊為止，整個 Plugin 的實作就完成了，接著只要執行 <code class=\"language-text\">npm run build</code>，將檔案編譯好，你就能在 Figma Desktop 中找到你的 Plugin 來使用。（可以在 Development 下面找到）</p>\n<p><img src=\"/image/figma-plugin-in-app.png\" alt=\"figma-plugin-in-app\"></p>\n<p>當然，每次都要 build 會很麻煩，所以你一樣可以設定 Webpack watch mode，這樣會比較方便一些。<a href=\"https://www.figma.com/plugin-docs/bundling-webpack/#6-configure-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方有範例可以參考</a></p>\n<h2 id=\"如何除錯\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%99%A4%E9%8C%AF\" aria-label=\"如何除錯 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何除錯</h2>\n<p>開發的過程中，免不了需要除錯，Figma 既然是以 Web 技術為底，當然有 Dev Tool 可以使用，可以從 <code class=\"language-text\">右鍵 -> plugins -> Development -> Open console</code> 或是用跟 Chrome 開啟 Devtool 一樣的 shortcut 來開啟：</p>\n<p><img src=\"/image/figma-plugin-debug.png\" alt=\"figma-plugin-debug\"></p>\n<p>不過這只能讓你看到錯誤訊息，若是你想加入 Debugger 來下中斷點，並在 Console 內看到你的 source code，你需要啟用 <code class=\"language-text\">Developer VM</code>：</p>\n<p><img src=\"/image/figma-plugin-debug-developer-vm.png\" alt=\"figma-plugin-debug-developer-vm\"></p>\n<p><img src=\"/image/figma-plugin-debugger.gif\" alt=\"figma-plugin-debugger\"></p>\n<h3 id=\"caveat\" style=\"position:relative;\"><a href=\"#caveat\" aria-label=\"caveat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat</h3>\n<p>運行在 <code class=\"language-text\">Developer VM</code> 環境的 Plugin，其效能與 runtime 與實際跑在 Figma 上的會有不同，所以正式發佈前記得要取消 <code class=\"language-text\">Developer VM</code> 的選項，在一般環境下運行看看。</p>\n<h2 id=\"發佈你的-plugin\" style=\"position:relative;\"><a href=\"#%E7%99%BC%E4%BD%88%E4%BD%A0%E7%9A%84-plugin\" aria-label=\"發佈你的 plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>發佈你的 Plugin</h2>\n<p>最後，完成你的 Plugin 後，當然會想要上架啦。</p>\n<p>目前要上架 Plugin 需要經過 Figma 團隊的審核，官方有文章詳細說明每一個步驟，我就不贅述，可以到這邊查看：</p>\n<p><a href=\"https://help.figma.com/hc/en-us/articles/360042293394-Publish-a-plugin-to-the-Community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Publish a plugin to the Community</a></p>\n<h3 id=\"caveat-1\" style=\"position:relative;\"><a href=\"#caveat-1\" aria-label=\"caveat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat</h3>\n<p>雖然我沒有實際上架 Plugin，但相信照著文章步驟做不會有太大問題，只是有一個點要注意一下。</p>\n<p>你在 Figma 的帳號需要啟動 two-factor authentication 才能夠申請發佈 Plugin，<a href=\"https://help.figma.com/hc/en-us/articles/360039817634\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>如果你是用 Google account SSO 申請的帳號，是不能夠啟用 two-factor authentication 的</strong></a>，必須重新申請一個以 Email 註冊的帳號。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Figma Plugin 的製作概念不複雜，除了要手動去設定每個 Node 的屬性來改變物件型態一開始不太習慣外，整體實作起來的感覺是蠻迅速方便的，程式編譯完以後，在 Figma 桌面程式內可以直接使用，不需要有額外載入的動作。</p>\n<p>比較可惜的是目前還無法根據 Event 來觸發 Plugin，但依照 Figma 工程師的能力與創造力，相信在未來是有可能的。看看他們今年 maker week 就有人做了一個 Gameboy 的 plugin LOL：</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">For maker week at <a href=\"https://twitter.com/figmadesign?ref_src=twsrc%5Etfw\">@figmadesign</a> I really wanted to do something wild, so I made a plugin that runs a gameboy emulator inside of Figma and renders the output as vectors to the canvas. <a href=\"https://t.co/M7up2Gb2a8\">pic.twitter.com/M7up2Gb2a8</a></p>&mdash; Sawyer Hood (@sawyerhood) <a href=\"https://twitter.com/sawyerhood/status/1336000511107977216?ref_src=twsrc%5Etfw\">December 7, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>感謝閱讀到這邊的讀者，不知道是否有激起你一點慾望想去試試看製作 Figma plugin？有或沒有都很好，至少希望你對此有個大概的了解。而我呢，準備要去跟設計師討論看看，有什麼內部需求可以來玩玩了！</p>","id":"39941b87-aca7-5c20-abbe-28fd41462baa","fields":{"slug":"create-figma-plugin"},"frontmatter":{"date":"2020-12-05T22:47:05.000Z","title":"製作 Figma Plugin","tags":["Figma","Plugin"],"type":"tech","slug":"create-figma-plugin"},"timeToRead":16},"next":{"excerpt":"好歌分享：飛在風中的小雨","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/YRMg3smsZTo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">飛在風中的小雨</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/YRMg3smsZTo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>很多人可能會認為前端工程師對於美感都有一定的水準，甚至應該要會一點點設計，但現實中應該有很大一部分的前端工程師跟我一樣，其實負責處理狀態管理居多，對設計沒有太多的著墨。</p>\n<p>雖然現實是如此，我個人還是非常喜歡欣賞網路上大神們透過 CSS、Web API 所創作的東西，今天就來分享幾個我這陣子看到覺得蠻有趣的 WEB 特效與技巧！</p>\n<h2 id=\"motion-blur\" style=\"position:relative;\"><a href=\"#motion-blur\" aria-label=\"motion blur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motion blur</h2>\n<p><img src=\"/image/motionblur-demo.gif\" alt=\"demo\"></p>\n<p>忘了是從哪裡看到這個網站 - <a href=\"https://pie6k.github.io/motionblur/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Motion Blur Scrolling Demo</a>，驚為天人，雖然看了其實眼睛會不太舒服，但特效實在太酷，無法大聲斥責。</p>\n<p>作者的程式碼公開在此：<a href=\"https://github.com/pie6k/motionblur\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">motionblur</a>，我把一些看來是作者嘗試做的優化拿掉，擷取重點來解釋，大家也可以到 CodeSandbox 查看程式碼與把玩 Demo</p>\n<p><a href=\"https://codesandbox.io/s/motion-blur-test-yreqf?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit motion-blur-test\"></a></p>\n<blockquote>\n<p>不過要注意一點，這個特效只有在電腦版的 Chrome 與 Edge 上表現最好，firefox 還 ok，Safari 則是完全崩潰，電腦或手機都無法呈現效果。</p>\n</blockquote>\n<h3 id=\"原理解析\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\" aria-label=\"原理解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原理解析</h3>\n<p>從名稱應該就能看出端倪，既然是 motion \"blur\"，自然會想到 CSS 的 <code class=\"language-text\">filter:blur()</code> 屬性，<code class=\"language-text\">blur()</code> 接受單一數值，例如：<code class=\"language-text\">5px</code>，不能是百分比，數值越大越模糊：</p>\n<p><img src=\"/image/css-blur-sample.png\" alt=\"css-blur-sample\"></p>\n<p>image source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter#svg_filter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN - filter</a></p>\n<p>模糊是有了，但 <code class=\"language-text\">blur</code> 的模糊感覺跟範例中的 motion blur 好像有點差距，要讓畫面在上下捲動時，有<em>拉長模糊</em>的感覺才對，這種整片均勻模糊的樣子似乎不太對呀？</p>\n<p>要解開這個謎題，得先提到一個可能較少為人知的知識：像 <code class=\"language-text\">blur</code> 這種 <code class=\"language-text\">filter-function</code> 的屬性大多都有對應的 <code class=\"language-text\">svg-filter</code>，透過 <code class=\"language-text\">svg-filter</code> 你就能更細緻的調整參數。使用方式則為在你想要套用 filter 效果的 DOM 元件上，用 <code class=\"language-text\">filter: url()</code> 來指定 svg 的 id，e.g.：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token attr-name\">#9isnV\");\"</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>以 <code class=\"language-text\">blur(5px)</code> 來說，其內部是用高斯函數的標準偏差值（stdDeviation）來決定畫面上多少 pixels 會互相交錯融合，對應的 svg 為：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -99999px</span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>svgBlur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-5%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-5%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>110%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>110%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>調整 <code class=\"language-text\">stdDeviation</code> 就能有比起單純用 <code class=\"language-text\">blur(5px)</code> 更豐富的效果，而根據 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stdDeviation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 資料，<code class=\"language-text\">stdDeviation</code> 的 type 是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#number-optional-number\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">&lt;number-optional-number></code></a>，也就是其實他能有第二個參數，當提供兩個參數時，一個會代表 x 軸的標準偏差值，一個則是 y 軸的。</p>\n<p>所以謎題就揭曉了，要做出上下拉長的模糊化，我們可以調整 <code class=\"language-text\">stdDeviation</code> 的 y 軸值，這也是整個特效的重點。</p>\n<p>如果把 y 值設大，例如 20，畫面就會變成這樣:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0,20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><img src=\"/image/y-deviation.png\" alt=\"y-deviation\"></p>\n<p>因此，要做出 motion blur，就是在 scroll 的時候調整 y 值。</p>\n<p>把調整 y 值的函式綁定到 <code class=\"language-text\">scroll</code> event 的 listener，並根據捲軸捲動的位置變化差距來決定 y 軸值的大小，就能造就出範例中那種動越快越模糊的 motion blur 效果（scroll event listner 的實作不難，可以到 <a href=\"https://codesandbox.io/s/motion-blur-test-yreqf?from-embed=&#x26;file=/src/scrollSpeed.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a> 查看）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 核心程式碼</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initializeBodyScrollMotionBlur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 動態創建 svg filter DOM 元素，將其存到 bodyBlur 物件</span>\n  <span class=\"token keyword\">const</span> bodyBlur <span class=\"token operator\">=</span> <span class=\"token function\">createBlurSvg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 將 svg filter 綁定到 body 上</span>\n  bodyBlur<span class=\"token punctuation\">.</span><span class=\"token function\">applyTo</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">initializeScrollSpeedWatcher</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">speed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 註冊 scroll event listener，計算捲軸滾動速度，在滑動時更改 filter DOM stdDeviation attribute。</span>\n    <span class=\"token comment\">// 因為我們只需要改 y 軸的值，所以 x 固定為 0</span>\n    bodyBlur<span class=\"token punctuation\">.</span><span class=\"token function\">setBlur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe src=\"https://codesandbox.io/embed/motion-blur-test-yreqf?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"motion-blur-test\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>雖然不太實用，但理解原理後還是會覺得這真的是個有趣又不太難的效果！</p>\n<h2 id=\"css-3d-rolling\" style=\"position:relative;\"><a href=\"#css-3d-rolling\" aria-label=\"css 3d rolling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 3D rolling</h2>\n<p>第二個想分享的在我平常訂閱的週刊 - <a href=\"https://frontend.horse/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frontend Horse</a> 看到的範例，<a href=\"https://unitedsodas.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">united sodas</a> 的網站：</p>\n<p><img src=\"/image/3d-rolling-can.gif\" alt=\"3d-rolling-can\"></p>\n<p>透過 GIF 可能看起來不是很清楚，但<a href=\"https://unitedsodas.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實際在網站上</a>的效果很不錯，真的有罐子旋轉的感覺。</p>\n<h3 id=\"原理解析-1\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-1\" aria-label=\"原理解析 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原理解析</h3>\n<p>要讓 DOM object 呈現 3D 有不少做法，利用 CSS 的 3D transforms、perspective 搭配 translate、rotate 就可以，然而週刊的作者提出的作法我覺得更為簡單且有趣，與其真的去旋轉物件，不如利用人眼錯覺，固定住 3D 模樣的罐子，只讓上方的 label 文字滾動。</p>\n<p>具體做法如下：</p>\n<p>找一個包含陰影的透明罐子圖案（如下圖）：</p>\n<p><img src=\"/image/3d-can-transparent.png\" alt=\"3d-can-transparent\"></p>\n<p>以及罐子的 Label 包裝圖片：</p>\n<p><img src=\"/image/3d-can-label.png\" alt=\"3d-can-label\"></p>\n<p>將 Label 圖片疊加在罐子上，利用 JS 讓滾輪滾動時，將圖片從罐子右邊移至左邊。</p>\n<p>重點在於最後要利用 <code class=\"language-text\">clip-path</code> 來製造出一個 svg mask，把圖片修整成貼合罐子的樣子，就可以完成這個滑順的轉動動畫！</p>\n<p>週刊作者有提供一個 <a href=\"https://codepen.io/a-trost/pen/afdb27fb762a02cd1c68cd705721c75f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen 連結</a>，可以試著把 <code class=\"language-text\">Clip Path On</code> 的 checkbox 開啟關閉，應該能清楚了解整體概念：</p>\n<iframe src=\"https://codesandbox.io/embed/3d-rolling-can-sample-bdo6l?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"3D rolling can - sample\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<h2 id=\"animation-based-on-the-time-uniform-value\" style=\"position:relative;\"><a href=\"#animation-based-on-the-time-uniform-value\" aria-label=\"animation based on the time uniform value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animation based on the time uniform value</h2>\n<p>本週最後一個要分享的是從 <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 的作者 <a href=\"https://yuanchuan.dev/time-uniform-for-css-animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> 上看到的小技巧，這是作者發現在電腦視覺的 Shader 中，經常利用 <a href=\"https://thebookofshaders.com/03/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Time Uniforms</a> 的方式去控制動畫，這跟一般 CSS @keyframes 透過指定各時間點的屬性變化，利用 interpolation 來形成動畫的方式是不同的思考方式。</p>\n<p>然而在 Web 世界中，其實能利用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Houdini\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini</a> 的 <a href=\"https://developer.mozilla.org/en-us/docs/Web/CSS/@property\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@property API</a> 與 CSS <code class=\"language-text\">@Keyframes</code>，製作出一個能隨著時間變化其值的 custom property，如此一來就能達成類似 time uniforms 的方法，統一依照時間來控制所有 DOM 物件的動畫：</p>\n<p>首先利用 <code class=\"language-text\">@property</code> API 客製化屬性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@property</span> --t</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;number>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過 <code class=\"language-text\">@keyfames</code> 來 anitmate 客制屬性，這邊時間用 <code class=\"language-text\">31536000000</code> 是因為作者想營造無限時間的動畫，用一年為區間算是個很足夠長的模擬方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> animate-time</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">--t</span><span class=\"token punctuation\">:</span> 0 <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span>   <span class=\"token punctuation\">{</span> <span class=\"token property\">--t</span><span class=\"token punctuation\">:</span> 31536000000 <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最後將 keyframes 動畫放到 <code class=\"language-text\">:root</code> 中，這樣所有的 css class 所吃到的 <code class=\"language-text\">--t</code> 就會是不斷隨著時間而更動的值，此外， anmiation 的 druation 同樣設為一年，時間才會同步：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> animate-time 31536000000ms linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最後在任意的 element 上頭，只要利用變動的 <code class=\"language-text\">--t</code> 就能在不另外指定 keyframes 的狀況下一樣產生動畫：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span> / 1000 / 10 * 1turn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同樣的 <code class=\"language-text\">--t</code> 值，同時套用在其他元素動畫上時，就能營造出利用 time uniforms 來製造動畫的效果。</p>\n<p>附上作者的 codepen 範例：</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"yuanchuan\" data-slug-hash=\"JjbjOPg\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Demo #1 for article (Chrome only)\">\n  <span>See the Pen <a href=\"https://codepen.io/yuanchuan/pen/JjbjOPg\">\n  Demo #1 for article (Chrome only)</a> by yuanchuan (<a href=\"https://codepen.io/yuanchuan\">@yuanchuan</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>今天分享了三個我這週發現的有趣特效與小技巧，雖然沒有自己真正實作，但觀摩別人的創意與程式碼也能學習到非常多，除了當工作上需要使用到類似效果時，會有印象可以怎麼做之外，或許也能讓你舉一反三，融合這些技巧，製作出別出心裁的特效也說不定呢！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter#svg_filter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN filter</a></li>\n<li><a href=\"https://pie6k.github.io/motionblur/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Motion Blur Scrolling Demo</a></li>\n<li><a href=\"https://yuanchuan.dev/time-uniform-for-css-animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Time Uniform For CSS Animation</a></li>\n<li><a href=\"https://thebookofshaders.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The book of shaders</a></li>\n</ol>","id":"cd165f4e-dea4-546a-b186-3d6675a4c567","fields":{"slug":"interesting-web-effect-sharing"},"frontmatter":{"date":"2021-01-29T17:46:57.000Z","title":"有趣的 WEB 特效與技巧分享","tags":["css","animation"],"type":"tech","slug":"interesting-web-effect-sharing"},"timeToRead":7},"type":"tech"}},"staticQueryHashes":["2123680655"]}