{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/css-methodology","result":{"data":{"markdownRemark":{"html":"<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"bWqOeK\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"css-is-awesome\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/bWqOeK/\">css-is-awesome</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<!-- more -->\n<p>今天來點輕鬆的，看標題就知道我想介紹一下 <a href=\"https://acss.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic CSS</a>，這是一套由 Yahoo 開源的 CSS 工具，工作上使用了蠻長一段時間，一開始使用起來其實覺得蠻不習慣的，\n但是久了以後發現搭配 React 寫起來雖然醜了點但是方便又易懂，非常適合獨立作業的前端工程師（設計師不參與 HTML, CSS 切版等動作），待我稍後慢慢說來～</p>\n<p>在介紹 Atomic CSS 之前，我想順便複習一下現今的 CSS methodology，以及 React 出現後對 CSS 的影響，進而帶出 Atomic CSS 想解決的問題與其帶來的好處。後續的一些說明多參考自許多網路資源，附錄在文章最後面。</p>\n<h2 id=\"css-架構心法\" style=\"position:relative;\"><a href=\"#css-%E6%9E%B6%E6%A7%8B%E5%BF%83%E6%B3%95\" aria-label=\"css 架構心法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 架構心法</h2>\n<p>剛開始接觸前端時，對於 CSS 也不太會去思考什麼架構，覺得就自己 class name 命名清楚一點，檔案整理好一點就好，但是這幾乎僅適用於專案規模還算小的時候，一但開發的專案龐大起來，並且有多位前端工程師在進行程式碼撰寫時，就很容易遇到命名衝突、stylesheet 過於龐大等問題，主因是在 CSS 的世界中，所有規則集都是全域的。（註：規則集 (ruleset) - 由一個宣告區塊所涵括的一或多個選擇器所組成, ex: <code class=\"language-text\">modal-text { color: #000, font-size: 12px }</code>）</p>\n<p>為了更加明確的管理 CSS，開始有人提出一些 CSS 的架構心法，想讓 CSS 也能有良好的<strong>重用性</strong>、<strong>維護性</strong>與<strong>延展性</strong>。</p>\n<p>比較有名的 CSS 架構心法大致上分為這三種：</p>\n<ul>\n<li>OOCSS</li>\n<li>SMACSS</li>\n<li>BEM</li>\n</ul>\n<p>有份流傳已久的投影片在說明這三種心法：<a href=\"https://www.slideshare.net/kurotanshi/css-oocss-smacss-bem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">漫談 CSS 架構方法 - Kuro Hsu</a></p>\n<p>這邊我就簡單節錄重點：</p>\n<p><span style=\"font-size: 2rem; color: #ba0707;\">OOCSS</span></p>\n<p>身為工程師，看到 OO 兩個字一定就會想到 Object-Oriented 吧，OOCSS 主意就在於將 CSS 物件化、模組化，其主要原則有兩個：</p>\n<p><span style=\"font-size: 1.2rem; color: #2626cc\">1. Separation of Structure from Skin: </span></p>\n<p>Structure 可以看作是 CSS 中定義元素的 box-modal 大小、margin 與 position 的部分，而 Skin 自然就是表現性的 Style，像是顏色、字型大小、border-color、box-shadow 等等，在 OOCSS 的原則中，這兩部分的 CSS 不能混合在同一個規則集中。</p>\n<p>Example:</p>\n<p>一般在定義一個 div 的長相時，直覺就會寫出下列這種 CSS，根據該 div selector 定義好其大小、位置與顏色</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#modal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid 1px #1ED3A9<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>#09D083<span class=\"token punctuation\">,</span> #1ED3A9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span> 2px 2px 5px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid 1px #1ED3A9<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>#09D083<span class=\"token punctuation\">,</span> #1ED3A9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span> 2px 2px 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 apply OOCSS 的第一原則後，可以修改成如下，將共用的表現型 Style 抽取出來，並且以 class 取代 id 作為 selector，讓其可以 reuse：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.modal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.defaultTheme</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid 1px #1ED3A9<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>#09D083<span class=\"token punctuation\">,</span> #1ED3A9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span> 2px 2px 5px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><span style=\"font-size: 1.2rem; color: #2626cc\">2. Separation of Containers and Content:</span></p>\n<p>關於 OOCSS 的第二原則，白話來說就是要求你將 css 與 html 盡量切割，以可共用的 class selector 來定義 style 並放入該 html 元素中。</p>\n<p>Example:</p>\n<p>假設我們定義 Header id 底下的 h1 要是如下 style：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#header h1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #1ED3A9\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假若之後想要在不同地方的 h1 有不同顏色，但同時保有相同 size 呢？你得這樣複寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#header h1, #footer h1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #1ED3A9\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#footer h1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣不僅是有重複的 style，更是難以維護，以 OOCSS 的角度來看，若將這些共用的 style 另外包成 class，最後在 apply 到需要的 html 上，會清楚許多。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header commonFontSize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer commonFontSize<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.commonFontSize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.header</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #1ED3A9\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.footer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>OOCSS 的指標人物 Nicole Sullivan 有個 <a href=\"https://github.com/stubbornella/oocss/wiki/Content\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">media object</a> 的 reusable module 以 oocss 概念實作，大家可以參考。</p>\n<p>總結一下 OOCSS 優點與實作方針：</p>\n<p>優點：更小的 css size，能讓網站加速；更方便管理模組化的 css stylesheet。\n實作方針：避免 descendent selector 與 id selector，使用 class 並盡量與 html 元素綁定。\n<strong>Don' do</strong>: <code class=\"language-text\">#button h3</code>, <code class=\"language-text\">span.title</code></p>\n<p><span style=\"font-size: 2rem; color: #ba0707;\">SMACSS</span></p>\n<p>SMACSS 有線上的官方電子書 <a href=\"https://smacss.com/book/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scalable and Modular Architecture for CSS</a></p>\n<p>看名稱就知道是以整體專案的 Architecture 來考量，與 OOCSS 我覺得是相同概念，只是關注點的起始位置不同，從不同瀏覽器對於基礎元件的 style 就開始考量，除了與 OOCSS 相似但有規範的 <strong>結構分類</strong> 與 <strong>CSS與HTML分離</strong>，還多了命名規則的限制。</p>\n<h4 id=\"結構分類\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E6%A7%8B%E5%88%86%E9%A1%9E\" aria-label=\"結構分類 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結構分類：</h4>\n<ul>\n<li>Base</li>\n<li>Layout</li>\n<li>Module</li>\n<li>State</li>\n<li>Theme</li>\n</ul>\n<h4 id=\"base\" style=\"position:relative;\"><a href=\"#base\" aria-label=\"base permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Base:</h4>\n<p>定義頁面中HTML Element的最基本Style，包含CSS Reset(一致化各瀏覽器自定義的 style)，因此只會用到 element tag selector。</p>\n<h4 id=\"layout\" style=\"position:relative;\"><a href=\"#layout\" aria-label=\"layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout:</h4>\n<p>所謂 Layout 就是將頁面切割定義成不同的區塊，像是 naviagtion、header、sidebar 等等，由於這些區塊大多獨立出現在頁面，因此用 ID 宣告是 ok 的，但若是有重複區塊類型，但不同 style，則可以採用 class 加上 cascade 來處理。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#sidebar</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.l-fixed #sidebar</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 10%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"module\" style=\"position:relative;\"><a href=\"#module\" aria-label=\"module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module:</h4>\n<p>Module 基本上與 Layout 相同，都是頁面上的區塊，只是偏向於 Content，但是嚴禁使用 id 或是 element selector，只准使用 <strong>class selector</strong>，可以透過命名的方式來管理這些 class，即 <code class=\"language-text\">Subclassing</code> 或 <code class=\"language-text\">Sub module</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.modal-body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100% <span class=\"token punctuation\">}</span> <span class=\"token comment\">/* 用 dash 分隔 class (subclassing/submodule)*/</span>\n<span class=\"token selector\">.modal-header</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100% <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State:</h4>\n<p>State 顧名思義就是根據元件的狀態給予不同的 style，因此命名上，針對該狀態的描述越精準越好：</p>\n<p><code class=\"language-text\">&lt;div class=\"modal-button active\">&lt;/div></code></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.active</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"theme\" style=\"position:relative;\"><a href=\"#theme\" aria-label=\"theme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Theme:</h4>\n<p>這個很好懂，其實就是針對網站主視覺定義好各種 Module 或是 Layout 需要的 Style，像是 Bootstrap、Material-UI 中也有類似概念。</p>\n<p>這邊稍為總結一下 SMACSS 的優缺，更多細節可以參考電子書：</p>\n<p>優： 根據結構分類，並定義出 Base style，最小化各瀏覽器的差異，遵守其 Layout、Module、State 規則可以有良好的重用性與維護性，並分離 CSS 與 HTML，進而幫助簡化 selector 深度，增加效能、減少 Size。\n缺：與 OOCSS 一樣，可能會造成 Class 定義過多</p>\n<p><span style=\"font-size: 2rem; color: #ba0707;\">BEM</span></p>\n<p>最後一個心法是 BEM，核心觀念與現今流行的 React, Vuejs 相像，強調模組化與 css 的重複利用性，因此只使用 Class selector，以其特有的命名規則來規範。不像先前 OOCSS 或 SMACSS 的 class 可能會讓你命名出 MargintTop-10 這樣以 skin 為主的 class name，BEM 以<strong>功能導向</strong>來命名，將網頁組成分為 <em>Block</em>, <em>Element</em>, <em>Modifier</em>。</p>\n<h4 id=\"block\" style=\"position:relative;\"><a href=\"#block\" aria-label=\"block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block：</h4>\n<p>就是一個獨立並可重複使用的頁面元件，如同 SMACSS 的 Layout/Module，命名若有需要則以 dash (-) 串接\n<code class=\"language-text\">.search-field {...}</code>。</p>\n<h4 id=\"element\" style=\"position:relative;\"><a href=\"#element\" aria-label=\"element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Element：</h4>\n<p>是 Block 中不可分離的小元件，一定存在於 Block 下，但 Block 不一定會有 Element。\n因為一定存在於 Block 中，因此命名會一定有 Block Name 作為 prefix，以<span style=\"font-weight: 600; color: red;\">雙底線</span>分隔 :</p>\n<p>.search-field<span style=\"color:red\">__button</span> {...}</p>\n<p><img src=\"/image/BEM_BE_example.png\" alt=\"BEM example\" title=\"BEM example\"></p>\n<h4 id=\"modifier\" style=\"position:relative;\"><a href=\"#modifier\" aria-label=\"modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modifier：</h4>\n<p>用來定義 Block 或 Element 的狀態或屬性，像是 SMACSS 的 State，可以多個 modifier 同時存在於 Block 與 Element 中。命名則以 Block 或 Element name 作為 prefix，以<span style=\"font-weight: 600; color: red;\">單底線</span>分隔</p>\n<p>.search-field_<em>button<span style=\"color:red\"></em>hover</span> {...}</p>\n<p>另外，BEM 甚至提出了依照 BEM 的架構來區分 file structure：\n（截圖至<a href=\"https://en.bem.info/methodology/quick-start/#file-structure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a>）\n<img src=\"/image/BEM_file.png\" alt=\"BEM file structure\" title=\"BEM file structure\"></p>\n<h2 id=\"結論與轉折\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96%E8%88%87%E8%BD%89%E6%8A%98\" aria-label=\"結論與轉折 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論與轉折</h2>\n<p>CSS 心法除了上述三種以外，其實還有 <a href=\"https://suitcss.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SUIT CSS</a> 等等，不過就大同小異，主要都是希望提高 CSS 的重用性、可維護性與延展性，發展至此似乎趨於穩定，搭配 SASS 等工具幾乎已經能很好的管理 CSS 了，但是從 React 出來以後，其推薦的 CSS in JS 根本打翻了上述的哲學，既然要用 JS 來寫 component，那 CSS 直接用 inline-style 的方式寫在 jsx 中，就不用記一堆有的沒的命名規則，又不用擔心全域變數影響，多棒啊！</p>\n<p>但從來沒有完美的解法，有很多人討厭這樣的做法，所以出現了 <a href=\"http://stack.formidable.com/radium/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Radim</a> 或 <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS-module</a> 這樣的東西，算是蠻完美的利用 Scoped css\n來做到擁有原始 css style 使用彈性的 CSS in JS。</p>\n<p>不管是用哪種方式，朝向模組化、Scoped CSS 的方向看來都是不變的。</p>\n<p><span style=\"font-size: 2rem; color: #ba0707;\">Atomic CSS</span></p>\n<p>既然我們複習了 CSS 心法，也了解到目前因應 React 的發展而出現的 CSS-module 等方式，我們就可以來介紹一下由 Yahoo 這個曾經的網路巨人所開源的 Atomic CSS 吧！</p>\n<p><strong>這邊要特別說明一下，Atomic CSS 並不是來解決上述心法的缺點，要解決的問題都雷同，都是希望能讓 CSS 在大型專案下能擁有更好的重用性與維護性，只是採用的方法與面向不同罷了。</strong></p>\n<p>透過前述心法我們可以利用 class selector 的方式來處理命名衝突的麻煩，但是還有可能造成 stylesheet 過大，因為你可能會依據不同 component 來設置不同的 namespace，而且一個不小心，若 CSS 階層越多，效能就會越差。加上不同團隊一起開發時，可能還會有不同命名，卻有相同效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">block1__text_highlight</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">...\n\nblock2__text_bright</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因此 Atomic CSS 提出另一種觀點：</p>\n<h4 id=\"將-css-style-最小元件化重用性最大化\" style=\"position:relative;\"><a href=\"#%E5%B0%87-css-style-%E6%9C%80%E5%B0%8F%E5%85%83%E4%BB%B6%E5%8C%96%E9%87%8D%E7%94%A8%E6%80%A7%E6%9C%80%E5%A4%A7%E5%8C%96\" aria-label=\"將 css style 最小元件化重用性最大化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>將 CSS style 最小元件化，重用性最大化</h4>\n<p>只要確保同一個 style 永遠只會被定義一次，並且可以運用在各個地方，就能解決這些問題！</p>\n<p>實際作法就看一下範例吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>D(f) W(100px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>利用 Atomic css 的工具，會幫你將上述 html 中的 class name 解析成：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.D\\(f\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.W\\(300px\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>應該很淺顯易懂吧！<code class=\"language-text\">D(f)</code> 對應到 <code class=\"language-text\">display:flex</code> 這個 style，也就是說，Atomic 以一種 css style 作為 class name 的最小單位。</p>\n<p>再稍微想一下你就會發現，這根本就是在寫 inline-style，只是我們用 class name 的方式來表示而已啊！</p>\n<p>沒錯，但這樣做的好處就是可以 <span style=\"color:red\">Define once, use everywhere.</span></p>\n<p>今天你就算有另一個 div 也想要有 display:flex 的屬性，只要加上 <code class=\"language-text\">D(f)</code> 這個 class name 就可以了，同樣 style，不用重複定義 class name！</p>\n<p><strong>在大型專案內，你的元件越多、重複的屬性用得越多，相對於其他心法，你就可能省下更多 Size！</strong></p>\n<p>而且這樣的寫法，搭配 React 真的很方便，也符合原先 CSS in JS 的概念，透過串接多個 \"Atomic Class\" 的方式在元素上來達到原先 css style 的效果。</p>\n<p>來看個實際的 Example：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Modal</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>P(10px) M(20%) Pos(f) Start(50%) Bgc(#fff)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Modal<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Atomic css tool parsed 過的 css</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.Bgc\\(#fff\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffffff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.M\\(20\\%\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.Pos\\(f\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.Start\\(50%\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.P\\(10px\\)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有發現嗎？從此以後你要看一個 component 的時候，可以直接從 jsx 檔案中看完整個元件的狀態與樣式，不用再切換 jsx 與 css 檔案了，而且透過這樣的 class name 命名，只要稍微熟悉以後，就超級好懂這個 div 用了哪些 style。（就算不懂，官網也有很方便的<a href=\"https://acss.io/reference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">查閱工具</a>）。</p>\n<p>最後列舉一下優點：</p>\n<ol>\n<li>將 class name 定義最小化，讓全站都能重複使用。</li>\n<li>透過 Atomic CSS 的 parser（or webpack loader），只會產生你有使用到的 classname 的 stylesheet。</li>\n<li>比起 inline style 的寫法更簡潔，又不會有命名衝突。</li>\n<li>加上此種 class name 很好壓縮，整體 size 可以很小。</li>\n<li>搭配 React，從此 component 的狀態與樣式合為一體。</li>\n</ol>\n<p>我知道會有很多人覺得這樣違反直覺、寫起來很醜、沒有語意化等等，我一開始也閃過這種念頭，\n但是身為工程師，我們擅長打破常規、利用創意來解決問題。\n這些 class name 的確不語意化，但是身為工程師，我想我們擅長理解這些代號。\n寫程式都知道，語言只是工具，邏輯才是重點，如果可以避免，可以不必花這麼多時間在思考命名。</p>\n<p>當然，以上只是我的觀點啦～推薦大家試用看看！</p>\n<p>同場加映另一個類似概念，但處理機制不太相同的 <a href=\"http://tachyons.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tachyons css</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intro-to-OOCSS</a></li>\n<li><a href=\"https://www.slideshare.net/kurotanshi/css-oocss-smacss-bem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">漫談 CSS 架構方法 - Kuro Hsu</a></li>\n<li><a href=\"http://sj82516-blog.logdown.com/posts/1077348/finish-css-intro-oocss-smacss-bem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scalable CSS - 介紹OOCSS/SMACSS/BEM</a></li>\n<li><a href=\"https://smacss.com/book/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scalable and Modular Architecture for CSS</a></li>\n<li><a href=\"https://en.bem.info/methodology/quick-start/#file-structure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BEM</a></li>\n<li><a href=\"http://tom76kimo-blog.logdown.com/posts/737611-atomic-css-introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic css 介紹</a></li>\n</ol>","fields":{"slug":"css-methodology"},"frontmatter":{"title":"淺談 CSS 方法論與 Atomic CSS","date":"04-29-2017","tags":["css","atomic css","methodology"]},"timeToRead":12}},"pageContext":{"slug":"css-methodology","prev":{"excerpt":"『探索宇宙真理已經很累了，我沒有時間撒謊。』","html":"<blockquote>\n<p>『探索宇宙真理已經很累了，我沒有時間撒謊。』</p>\n</blockquote>\n<!-- more -->\n<p>Web VR 出來也很久了，但沒有去玩過，因為想說我沒有相關設備，直到前陣子看到這篇文章 <a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minecraft in WebVR with HTML Using A-Frame</a></p>\n<p>整個驚艷！</p>\n<p>隨便加幾個 tag，然後調整一下就可以有 VR 效果，這東西不試試怎麼行！說不定以後能像這篇作者一樣，在自己的婚禮上搞一套 VR 的網站！因此決定跟著<a href=\"https://aframe.io/docs/0.5.0/guides/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網範例</a>來了解一下 Web VR 到底該如何實作。</p>\n<p>一樣先看個成品：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BWMjBd\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo5\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/BWMjBd/\">webVR-test-demo5</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"a-frame\" style=\"position:relative;\"><a href=\"#a-frame\" aria-label=\"a frame permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A-frame</h2>\n<p>A-Frame 是 Mozilla VR team 為了在 browser 上利用 Javascript 提供 VR 體驗的一套 web framework，<a href=\"https://aframe.io/docs/0.5.0/guides/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a> 上有很詳細的教學與介紹。\n核心基於 HTML 與 entity-component-system framework (似乎是一套遊戲上常用的 pattern，像是 Unity)，雖然我不懂遊戲，但他的概念頗簡單，<strong>\"ECS favors composition over inheritance\"</strong>。</p>\n<p>在每個場景（scene）中的每個物件（object）都是一個 <strong>entity</strong>，<strong>entity</strong> 可以想做一個物件的空殼，而該空殼的動作、行為、外觀皆是由 <strong>components</strong> 來完成。\n所以透過在場景中混搭組合各種 components 就能創造出無數種的物件，這種方式若是用繼承的方式則會需要 create 許多特殊的 class 才行。</p>\n<p>在 A-frame 中，一個 entity 就是 <code class=\"language-text\">&lt;a-entity>&lt;/a-entity></code>。</p>\n<p>而這個 entity 可以掛載上各種 component，大致的方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">AFRAME</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sun'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    degree<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">init</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when component is plugged in.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">update</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when component's data is updated.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著就能夠在 html 中使用 sun 這個 component，<code class=\"language-text\">&lt;a-entity sun=\"degree: 5; color: yellow\">&lt;/a-entity></code>。\n（這邊比較會跟一般的 html tag 混淆，因為 tag 上看似 attribute 的東西其實是 entity 掛載的 component。）</p>\n<p>就像 Web component 一樣，A-frame 也有個 <a href=\"https://aframe.io/aframe-registry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-Frame Registry</a> 在收集各種開發者貢獻的 component。</p>\n<p>除了 <code class=\"language-text\">&lt;a-entity>&lt;/a-entity></code> 以外，Web VR 還有許多原生原件，像是 <code class=\"language-text\">&lt;a-scene></code>、<code class=\"language-text\">&lt;a-assets></code>、<code class=\"language-text\">&lt;a-box></code> 等等。\n這些 Primitives 的 tag 也是一種 entity，主要是包含了一些複雜但是 common 的元件（像是 <a-sky>，用來代表場景中的天空），\n以 <code class=\"language-text\">&lt;a-box></code> 為例，其實就是一個包含 geometry 與 material components 的 entity：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity id<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span> geometry<span class=\"token operator\">=</span><span class=\"token string\">\"primitive: box\"</span> material<span class=\"token operator\">=</span><span class=\"token string\">\"color: red\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span></code></pre></div>\n<p>也可以透過 <code class=\"language-text\">AFRAME.registerPrimitive</code> 的方式來註冊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">AFRAME</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-wave'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Attaches the wave component by default.</span>\n  <span class=\"token comment\">// And smartly makes the wave parallel to the ground.</span>\n  defaultComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    wave<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    rotation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Maps HTML attributes to wave component's properties.</span>\n  mappings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token string\">'wave.width'</span><span class=\"token punctuation\">,</span>\n    depth<span class=\"token operator\">:</span> <span class=\"token string\">'wave.depth'</span><span class=\"token punctuation\">,</span>\n    density<span class=\"token operator\">:</span> <span class=\"token string\">'wave.density'</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'wave.color'</span><span class=\"token punctuation\">,</span>\n    opacity<span class=\"token operator\">:</span> <span class=\"token string\">'wave.opacity'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這樣就有一個 Primitives 元件可用，<code class=\"language-text\">&lt;a-wave color=\"aqua\" depth=\"100\" width=\"100\">&lt;/a-wave></code></p>\n<p>其中可以看到我們有 <code class=\"language-text\">defaultComponents</code> 與 <code class=\"language-text\">mappings</code> 兩個 properties 可以用，分別讓你設置這個 entity 的 default component 與 將 HTML 的 attribute 映射到你自定義的 component 的屬性中，\n向這邊就是將 html 的 width 映射到 wave 這個 component 的 width 屬性。</p>\n<p>更詳細內容可以參考官網 <a href=\"https://aframe.io/docs/0.5.0/primitives/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">primitives</a></p>\n<h2 id=\"our-first-web-vr-scene-skeleton\" style=\"position:relative;\"><a href=\"#our-first-web-vr-scene-skeleton\" aria-label=\"our first web vr scene skeleton permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our first Web VR Scene (Skeleton)</h2>\n<p>接下來從實作一個最簡單的 Web VR Scene 來一步步認識 Web VR 的一些基礎元件。</p>\n<p>Web VR 的基礎骨幹：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.5.0/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">&lt;a-scene></code> 會 setup 一切 VR 所需的東西，並包含所有 entities，包含 WebGL, canvas, camera 等等，另外還有一些針對不同平台的 WebVR support，一個 out of box 的 magic tag！\n加上這個以後，整個 html 就會變成 WebVR 的骨幹了，你在 codepen 上的話就會看到右下角有個眼鏡的圖示。（當然記得要載入 aframe.js）</p>\n<p>接著，我們需要瞭解一下在 A-frame 的世界中的座標系統，採用所謂的 <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">right-hand rule</a></p>\n<p><img src=\"/image/right-hand-rule.png\" alt=\"Right-hand rule\" title=\"Right-hand rule\"></p>\n<p>在 WebVR API 回傳的距離資料以 Meter 為單位，因此在 A-frame 中的距離單位也是 Meter，所以當你在設計你的 WebVR project 時要注意一下，<code class=\"language-text\">height: 10</code> 跟 <code class=\"language-text\">width: 10</code> 在一般開發 web 來說好像很小，\n但在 A-frame 中可是會超大。</p>\n<h2 id=\"add-entity\" style=\"position:relative;\"><a href=\"#add-entity\" aria-label=\"add entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Entity</h2>\n<p>再來我們可以在 <code class=\"language-text\">&lt;a-scene></code> 中加入 <code class=\"language-text\">&lt;a-cylinder color=\"red\">&lt;/a-cylinder></code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>當你放上去以後應該會覺得奇怪，怎麼什麼都看不到，轉動了一下才發現東西在你腳下ＸＤ\n原因很簡單，我們沒有設定 postion，所以 x, y, z 軸都是 0。根據 right-hand rule，我們可以給 position component 一些參數，另外還可以進行 rotation 與 scale：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此應該就能看到如下結果：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MpLwKa\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/MpLwKa/\">webVR-test-demo1</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>Note：這邊岔開介紹一下 codepen 上的 WebVR 功能，點選右下角眼鏡可以進入全 VR 環境，在電腦上 default 的控制是用滑鼠拖拉，或是 WASD 控制，如果你有 VR headset 就能更直接的體驗。</p>\n<h2 id=\"add-background\" style=\"position:relative;\"><a href=\"#add-background\" aria-label=\"add background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Background</h2>\n<p>我們可以透過 <code class=\"language-text\">&lt;a-sky>&lt;/a-sky></code> 來增加背景，裡面可以單純設置顏色、360度的影片或照片</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>sky src<span class=\"token operator\">=</span><span class=\"token string\">\"http://i.imgur.com/JHZjdp6.jpg\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>sky<span class=\"token operator\">></span></code></pre></div>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"yMZNXO\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/yMZNXO/\">webVR-test-demo2</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>這樣我們就有一個漂浮在城市空中的圓柱體了 XD  (<a href=\"http://www.nwicon.com/seattle-view-from-the-top-of-the-space-needle.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a>)</p>\n<h2 id=\"asset-management-system\" style=\"position:relative;\"><a href=\"#asset-management-system\" aria-label=\"asset management system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asset Management System</h2>\n<p>在 A-frame 裡面有個 <code class=\"language-text\">&lt;a-assets></code>，用來管理所有 Entity 的 assets 資源，與其直接寫在 inline 裡面在 runtime 時讀取，透過定義在 <code class=\"language-text\">&lt;a-assets></code> 中可以讓 Browser 更輕易地做 cache，而 A-frame 會保證在 render 之前就把這些資源都載好，因此官方建議使用這種方式來處理圖片等 assets。</p>\n<p>用法很簡單，在 <code class=\"language-text\">&lt;a-assets></code> 中宣告 <code class=\"language-text\">&lt;img></code>，然後設定好 id，接著在想使用該 asset 的 entity 中的 src 指定對應 id 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-assets</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>skyTexture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://i.imgur.com/JHZjdp6.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-assets</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-sky</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#skyTexture<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-sky</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"more-entity-ground-light-animation\" style=\"position:relative;\"><a href=\"#more-entity-ground-light-animation\" aria-label=\"more entity ground light animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More entity (Ground, Light, Animation)</h2>\n<h3 id=\"ground--light\" style=\"position:relative;\"><a href=\"#ground--light\" aria-label=\"ground  light permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ground &#x26; Light</h3>\n<p>基本的場景除了天空以外，當然還要有地板、燈光，地板其實有很多種選擇，可以用 <code class=\"language-text\">&lt;a-plane></code>，也能用 <code class=\"language-text\">&lt;a-cylinder></code>，只要設置對的高度跟方位即可。\n以 <code class=\"language-text\">&lt;a-plane></code> 來說，因為他 defalut 的角度是與 XY 平行，因此我們要將 X 軸反轉九十度，讓他與 XZ 平行：</p>\n<p><code class=\"language-text\">&lt;a-plane src=\"#groundTexture\" rotation=\"-90 0 0\" width=\"30\" height=\"30\">&lt;/a-plane></code></p>\n<p>另外場景中很重要的燈光，在目前的例子中，我們都沒有特別設定，A-frame 會自己幫我們定義一個 ambient light 和 directional light，一旦我們有了自己的設定，default 值就會被拔掉。</p>\n<p>基本有兩種燈光可以設定：</p>\n<ul>\n<li>ambient: 針對整個 scene 的燈光設定</li>\n<li>point: 像是一個電燈泡，我們可以調整其位置與強度，讓 entity 上的光影效果因應距離與角度的不同有所變化。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-light</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ambient<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#445451<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-light</span><span class=\"token punctuation\">></span></span>\n    // intensity 為強度 2 距離在 x y z: 2 4 4 的燈泡\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-light</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>point<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">intensity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2 4 4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-light</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"animation\" style=\"position:relative;\"><a href=\"#animation\" aria-label=\"animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animation</h3>\n<p>A-frame 有內建的 <a href=\"https://aframe.io/docs/0.5.0/core/animations.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">animation system</a>，要使用很簡單，加上 <code class=\"language-text\">&lt;a-animation></code> 即可（文件上寫說這個 entity 將被取代，不過在我寫文的當下，該 issue 從 aframe 的 milestone 拔除了，所以還需要再觀察看看。）</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 60 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>是的，A-frame 中的 entity 可以有 child，而 child 會擁有 parent 設定的位置與角度等等，A-frame 會幫你處理好。</p>\n<p>這邊我們的動畫讓 <a-cylinder> 改變 rotation，到 30 60 45，也就是往 Y 軸轉動到 60 度，方向是 alternate，兩秒內做完，並且不斷 repeat。\n如果要多個動畫，就再加上一個 <a-animation>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 60 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>position<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2.2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>現在我們的圓柱體會上下左右旋轉移動了！</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"aJXvZa\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/aJXvZa/\">webVR-test-demo3</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"add-user-interation\" style=\"position:relative;\"><a href=\"#add-user-interation\" aria-label=\"add user interation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add user interation</h2>\n<p>VR 如果不能互動，還有什麼意義嗎？</p>\n<p>雖然我們沒有 VR 設備，但 A-frame 有提供給 Desktop 的開發者一個好用的內建 component <code class=\"language-text\">&lt;a-cursor></code>，用來模擬 controllers，我們要讓 controller 固定在 camera 的中間，也就是跟著我們的眼睛，\n只要當作 child 放在 <a-camera> 底下即可。\n(cursor 可以監聽的事件在此 <a href=\"https://aframe.io/docs/0.5.0/components/cursor.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aframe.io/docs/0.5.0/components/cursor.html</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-camera</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cursor</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cursor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-camera</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此一來我們就可以用滑鼠來做點擊的動作。</p>\n<p>要讓場景中的物件跟隨我們的點擊有所反應的話，有兩種做法：</p>\n<ul>\n<li>\n<p>Event Listener Component:\n如同一般我們在 Web 當中一樣，用 javascript 去 querySelector 出 object，接著加上 EventListener：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n        <span class=\"token keyword\">const</span> cylinderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-cylinder'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cylinderEl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseenter'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cylinderEl<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scale'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>也可以設置一個 component 然後 attach 到 Entity 上：\n<code class=\"language-text\">js\n        &lt;script>\n            AFRAME.registerComponent('scale-on-mouseenter', {\n                schema: {\n                    to: {default: '2.5 2.5 2.5'}\n                },\n                init: function () {\n                    var data = this.data;\n                    // 在這邊設定 listener\n                    this.el.addEventListener('mouseenter', function () {\n                        this.setAttribute('scale', data.to);\n                    });\n                    this.el.addEventListener('mouseleave', function () {\n                        this.setAttribute('scale', data.leave);\n                    });\n                }\n            });\n        &lt;/script></code>\n<code class=\"language-text\">html\n        &lt;!-- 掛載一個 sacle-on-mouseenter component 上去 -->\n        &lt;a-cylinder color=\"red\" position=\"0 2 -5\" rotation=\"30 100 0\" scale=\"1 1 1\" height=\"0.2\"\n            scale-on-mouseenter=\"to: 2.2 2.2 2.2\">\n            &lt;a-animation attribute=\"rotation\" to=\"30 90 90\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"position\" to=\"0 2.2 -5\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n        &lt;/a-cylinder></code></p>\n</li>\n<li>Animating on Event:\n另一種方式很簡單，是直接設定 Event 到 <a-animation> 上頭，但你就少了一些自由操作的彈性：\n<code class=\"language-text\">html\n        &lt;a-cylinder color=\"red\" position=\"0 2 -5\" rotation=\"30 100 0\" scale=\"1 1 1\" height=\"0.2\"\n            scale-on-mouseenter=\"to: 2.2 2.2 2.2\">\n            &lt;a-animation attribute=\"rotation\" to=\"30 90 90\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"position\" to=\"0 2.2 -5\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"scale\" begin=\"mouseenter\" dur=\"300\" to=\"2.2 2.2 2.2\">&lt;/a-animation>\n            &lt;a-animation attribute=\"scale\" begin=\"mouseleave\" dur=\"300\" to=\"1 1 1\">&lt;/a-animation>\n            &lt;a-animation attribute=\"rotation\" begin=\"click\" dur=\"2000\" to=\"30 405 0\">&lt;/a-animation>\n        &lt;/a-cylinder></code></li>\n</ul>\n<p>中間的點（cursor）移入與移出圓柱體時會放大縮小，點擊時會旋轉：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BWMjBd\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo5\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/BWMjBd/\">webVR-test-demo5</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>到目前為止學到的東西其實已經足夠我們回去最開始我提及的那篇文章 <a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://css-tricks.com/minecraft-webvr-html-using-frame/</a> 深入閱讀，\n大部分的內容在我這篇都有涵括到了，但透過閱讀該篇文章可以更了解如何利用 reusable 的 component 製作出一個 VR 的 Minecraft！並且裡面還有教你怎麼要設置 Vive, Oculus 的 controller，很推薦閱讀！</p>\n<p>最後，再告訴大家一個好康，A-frame 有提供 Inspector<a href=\"https://github.com/aframevr/aframe-inspector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a>！而且只要在你的 html 加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">inspector</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url: https://aframe.io/releases/0.3.0/aframe-inspector.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Scene... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接著按下 <code class=\"language-text\">&lt;ctrl> + &lt;alt> + i</code>，就可以看到如下畫面了！</p>\n<p><img src=\"/image/vr-inspector.png\" alt=\"aframe-inspector\" title=\"aframe-inspector\"></p>\n<p>A-frame 使用起來真的很簡單方便，大家都來玩玩看吧！</p>\n<p>這邊有瀏覽器支援度：<a href=\"https://webvr.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webvr.rocks/</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://aframe.io/docs/0.5.0/guides\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-frame.io</a></li>\n<li><a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minecraft webVR using A-frame</a></li>\n<li><a href=\"https://mozvr.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla VR</a></li>\n<li><a href=\"https://webvr.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webvr.rocks</a></li>\n<li><a href=\"https://www.gamedev.net/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding Component-Entity-Systems</a></li>\n</ol>","id":"0bb61284-5578-5bf4-866b-3d4ea6314a54","fields":{"slug":"web-vr-101"},"frontmatter":{"date":"2017-04-01T17:12:25.000Z","title":"Web VR 初探","tags":["web vr","javascript"],"type":"tech","slug":"web-vr-101"},"timeToRead":12},"next":{"excerpt":"\"I stopped checking email for entire week and it change my life!\"\nOh, really?\n\"I got fired.\"","html":"<blockquote>\n<p>\"I stopped checking email for entire week and it change my life!\"\nOh, really?\n\"I got fired.\"</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>今天想繼續 CSS 的議題，常常會覺得學 CSS 的新發展不太划算，因為每次看到新的 Feature 出現，都只能當下興奮個幾分鐘，然後就會認命接受可能還要再等個五年才能真正使用的可能性...如果你有跟我一樣的感受，那今天這篇文章或許可以帶給你一絲絲希望。</p>\n<p>在現今的 Web 開發中，JavaScript 幾乎佔據所有版面，除了控制頁面邏輯與操作 DOM 物件以外，連 CSS 都直接寫在 JavaScript 裡面了，就算瀏覽器都還沒有實作的規格，總會有人做出對應的 Polyfills，讓你快速的將新 Feature 應用到 Production 環境中，更別提我們還有 Babel 等工具幫忙轉譯。</p>\n<p>而 CSS 就不同了，除了制定 CSS 標準規格所需的時間外，各家瀏覽器的版本、實作進度差異更是曠日費時，再加上 CSS 並非 Javascript 這樣的動態語言，我們無法簡單的提供 Polyfills，頂多利用 PostCSS、SASS 等工具來幫我們轉譯出瀏覽器能接受的 CSS，而剩下的就是瀏覽器的事了。</p>\n<p>這邊讓我們回想一下，瀏覽器在網頁的渲染過程中，做了哪些事情？</p>\n<p><img src=\"/image/render_pipeline.png\" alt=\"Render Pipeline (source from google)\"></p>\n<p>瀏覽器的 Render Pipeline 中，<strong>JavaScript</strong> 與 <strong>Style</strong> 兩個階段會解析 HTML 並為載入的 JS 與 CSS 建立 Render Tree，也就是所謂的 DOM 與 CSSOM：（對於 Render Pipeline 與 Render Tree 若不了解，可以先看看我先前的文章 <a href=\"https://blog.arvinh.info/2016/03/26/Front-end%20kata%2060fps%E7%9A%84%E5%BF%AB%E6%84%9F/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Front-end kata 60fps的快感</a>）</p>\n<p><img src=\"/image/RenderTree.png\" alt=\"Render Tree (source from google)\"></p>\n<p>而就現階段的 Web 技術來看，開發者們能操作的就是透過 JS 去控制 DOM 與 CSSOM，來影響畫面的變化，但是對於接下來的 <strong>Layout</strong>、<strong>Paint</strong> 與 <strong>Composite</strong> 就幾乎沒有控制權了。</p>\n<p>既無法讓各家瀏覽器快速並統一實作規格，亦不能輕易產生 Polyfills，所以到現在我們依然無法大膽使用 Flexbox，即便它早在 2009 年就被提出了...</p>\n<p>但 CSS 並非就此駐足不前。</p>\n<p>為了解決上述問題，為了讓 CSS 的魔力不再被瀏覽器把持，Houdini 就誕生了！（ Houdini 是美國的偉大魔術師，擅長逃脫術，很適合想將 CSS 從瀏覽器中解放的概念）</p>\n<h2 id=\"css-houdini\" style=\"position:relative;\"><a href=\"#css-houdini\" aria-label=\"css houdini permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Houdini</h2>\n<p>CSS Houdini 是由一群來自 Mozilla, Apple, Opera, Microsoft, HP, Intel, IBM, Adobe 與 Google 的工程師所組成的工作小組，志在建立一系列的 API，讓開發者能夠介入瀏覽器的 CSS engine 運作，帶給開發者更多的解決方案，用來解決 CSS 長久以來的問題：</p>\n<ul>\n<li>Cross-Browser isse</li>\n<li>CSS Polyfill 的製作困難</li>\n</ul>\n<p>Houdini task force 目前起草了一些 API 規範，並逐步努力讓其通過 W3C，成為真正的 Web standards。\n由於都是草稿階段，有些甚至只有規劃，還未被真正寫入規範，所以變動很大，有些我也不是很了解，所以就大致介紹一下，若有錯誤拜託務必告知！\n另外，有興趣的讀者可以直接從這裡 <a href=\"http://dev.w3.org/houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini Drafts</a> 看詳細內容（ Drafts 的更新時間都非常近期，活躍中的草稿！）。</p>\n<p>下面這張圖我將 Google 提供的 Render pipeline 與 <a href=\"https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini: Maybe The Most Exciting Development In CSS You’ve Never Heard Of</a> 中提到的 pipeline 做個結合對比，顯示出 Houdini 試圖在瀏覽器的 Render pipeline 中提供哪些 API 給開發者使用：</p>\n<p><img src=\"/image/huodini-apis.png\" alt=\"Houdini API on render pipeline\"></p>\n<p>其中灰色部分就是只在規劃階段，而黃色部份就是已經寫入規範正在推行中。</p>\n<h2 id=\"houdini-api-介紹\" style=\"position:relative;\"><a href=\"#houdini-api-%E4%BB%8B%E7%B4%B9\" aria-label=\"houdini api 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Houdini API 介紹</h2>\n<h3 id=\"css-properties-and-values-api\" style=\"position:relative;\"><a href=\"#css-properties-and-values-api\" aria-label=\"css properties and values api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Properties and Values API</h3>\n<p>先介紹一個最能夠使用的 API，除了 IE family 以外，Chrome、Firefox 與 Safari 都已經能夠直接使用了！ <a href=\"http://caniuse.com/#search=custom%20properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">caniuse</a></p>\n<p>相信很多人都使用過 CSS Preprocessors，他給予開發者在 CSS 中使用變數的能力：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$font-size</span></span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$brightBlue</span></span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">.mark</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.5 <span class=\"token operator\">*</span> <span class=\"token variable\">$font-size</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$brightBlue</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但其實使用 Preprocessors 還是有其缺點，像是不同的 Preprocessors 就有不同的 Syntax，需要額外 setup 與 compile，\n而現在 CSS 已經有原生的變數可以使用了！就是 CSS Properties and Values API！</p>\n<p>SCSS 與 Native CSS Custom Properties 的一個主要差別可以看<a href=\"http://slides.com/malyw/houdini-codemotion#/18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">下圖</a>：</p>\n<p><img src=\"/image/scss-vs-css.png\" alt=\"source from http://slides.com/malyw/houdini-codemotion#/18\"></p>\n<p>原生的 CSS variable syntax：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* declaration */</span>\n<span class=\"token property\">--VAR_NAME</span><span class=\"token punctuation\">:</span> &lt;declaration-value><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* usage */</span>\n<span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--VAR_NAME<span class=\"token punctuation\">)</span></code></pre></div>\n<p>變數可以定義在 root element selector 內，也能在一般 selector 內，甚至是給別的變數 reuse：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/* root element selector (全域) */</span>\n<span class=\"token selector\">:root </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--main-color</span><span class=\"token punctuation\">:</span> #ff00ff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--main-bg</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>200<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--block-font-size</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.btn__active::after</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--btn-text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'This is btn'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 相等於 --box-highlight-text:'This is btn been actived'; */</span>\n  <span class=\"token property\">--btn-highlight-text</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--btn-text<span class=\"token punctuation\">)</span><span class=\"token string\">' been actived'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--btn-highlight-text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 也能使用 calc 來做運算 */</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--block-font-size<span class=\"token punctuation\">)</span>*1.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body </span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* variable usage */</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而有了變數以後，會為 CSS 帶來什麼好處應該很明顯，他的 Use case 可以多寫一篇文章來介紹了，<a href=\"https://blog.hospodarets.com/css_properties_in_depth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">或是可以直接看這篇的詳細介紹</a>，我這邊介紹幾個我覺得比較有趣的：</p>\n<ol>\n<li>\n<p>模擬一個特殊的 CSS rule:</p>\n<p>單純透過更改變數來達到改變 box-shadow 顏色</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.textBox</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">--box-shadow-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 30px <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--box-shadow-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.textBox:hover</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">/* box-shadow: 0 0 30px green; */</span>\n<span class=\"token property\">--box-shadow-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>動態調整某個 CSS rule 內的各別屬性：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"ZKKyer\" data-default-tab=\"html,result\" data-user=\"malyw\" data-embed-version=\"2\" data-pen-title=\"Generated colors from CSS custom properties\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/malyw/pen/ZKKyer/\">Generated colors from CSS custom properties</a> by Serg Hospodarets (<a href=\"https://codepen.io/malyw\">@malyw</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n</li>\n</ol>\n<p>此外，我們也可以用 JavaScript 來控制：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> textBox <span class=\"token operator\">=</span> \n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.textBox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// GET</span>\n<span class=\"token keyword\">const</span> Bxshc <span class=\"token operator\">=</span> <span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>textBox<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--box-shadow-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SET</span>\ntextBox<span class=\"token punctuation\">.</span>style\n    <span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--box-shadow-color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'new color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>非常好用的特性，幾乎所有主流瀏覽器都已經支援了，大家快來使用吧！</p>\n<h3 id=\"box-tree-api\" style=\"position:relative;\"><a href=\"#box-tree-api\" aria-label=\"box tree api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box Tree API</h3>\n<p>Box tree API 並沒有出現在上圖中，但在 Paintin API 中會用到其概念。\n大家都知道在 DOM tree 中的每個元素都有一個 Box Modal，而在瀏覽器解析過程中，還會將其拆分成 fragments，至於什麼是 fragments？以 drafts 中的例子來解釋：</p>\n<p data-height=\"300\" data-theme-id=\"29194\" data-slug-hash=\"wdZvOm\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"fragments-sample\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/wdZvOm/\">fragments-sample</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>上面的 HTML 總共就會拆出七個 fragments：</p>\n<ul>\n<li>最外層的 div</li>\n<li>第一行的 box (包含 foo bar)</li>\n<li>第二行的 box (包含 baz)</li>\n<li>吃到 <code class=\"language-text\">::first-line</code> 與 <code class=\"language-text\">::first-letter</code> 的 f 也會被拆出來成獨立的 fragments</li>\n<li>只吃到 <code class=\"language-text\">::first-line</code> 的 oo 只好也獨立出來</li>\n<li>吃到 <code class=\"language-text\">::first-line</code> 與 包在 <code class=\"language-text\">&lt;i></code> 內的 bar 當然也是</li>\n<li>在第二行底下且為 italic 的 <code class=\"language-text\">baz</code></li>\n</ul>\n<p>而 Box tree API 目的就是希望讓開發者能夠取得這些 fragments 的資訊，至於取得後要如何使用，基本上應該會跟後面會介紹的 Parser API、Layout API 與 Paint API 有關聯，當我們能取得詳細的 Box Modal 資訊時，要客製化 Layout Module 才更為方便。</p>\n<h3 id=\"css-layout-api\" style=\"position:relative;\"><a href=\"#css-layout-api\" aria-label=\"css layout api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Layout API</h3>\n<p>Layout API 顧名思義就是提供開發者撰寫自己的 Layout module，Layout module 也就是用來 assign 給 <code class=\"language-text\">display</code> 屬性的值，像是 <code class=\"language-text\">display: grid</code> 或 <code class=\"language-text\">display: flex</code>。\n你只要透過 <code class=\"language-text\">registerLayout</code> 的 function，傳入 Layout 名稱與 JS class 來定義 Layout 的邏輯即可，例如我們實作一個 <code class=\"language-text\">block-like</code> 的 Layout：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsblocklike.js\"><pre class=\"language-jsblocklike.js\"><code class=\"language-jsblocklike.js\">registerLayout(&#39;block-like&#39;, class extends Layout {\n    static blockifyChildren = true;\n    static inputProperties = super.inputProperties;\n\n    *layout(space, children, styleMap) {\n        const inlineSize = resolveInlineSize(space, styleMap);\n\n        const bordersAndPadding = resolveBordersAndPadding(constraintSpace, styleMap);\n        const scrollbarSize = resolveScrollbarSize(constraintSpace, styleMap);\n        const availableInlineSize = inlineSize -\n                                    bordersAndPadding.inlineStart -\n                                    bordersAndPadding.inlineEnd -\n                                    scrollbarSize.inline;\n\n        const availableBlockSize = resolveBlockSize(constraintSpace, styleMap) -\n                                   bordersAndPadding.blockStart -\n                                   bordersAndPadding.blockEnd -\n                                   scrollbarSize.block;\n\n        const childFragments = [];\n        const childConstraintSpace = new ConstraintSpace({\n            inlineSize: availableInlineSize,\n            blockSize: availableBlockSize,\n        });\n\n        let maxChildInlineSize = 0;\n        let blockOffset = bordersAndPadding.blockStart;\n\n        for (let child of children) {\n            const fragment = yield child.layoutNextFragment(childConstraintSpace);\n\n            // 這段控制 Layout 下的 children 要 inline 排列\n            // fragment 應該就是前述的 Box Tree API 內提到的 fragment\n            fragment.blockOffset = blockOffset;\n            fragment.inlineOffset = Math.max(\n                bordersAndPadding.inlineStart,\n                (availableInlineSize - fragment.inlineSize) / 2);\n\n            maxChildInlineSize =\n                Math.max(maxChildInlineSize, childFragments.inlineSize);\n            blockOffset += fragment.blockSize;\n        }\n\n        const inlineOverflowSize = maxChildInlineSize + bordersAndPadding.inlineEnd;\n        const blockOverflowSize = blockOffset + bordersAndPadding.blockEnd;\n        const blockSize = resolveBlockSize(\n            constraintSpace, styleMap, blockOverflowSize);\n\n        return {\n            inlineSize: inlineSize,\n            blockSize: blockSize,\n            inlineOverflowSize: inlineOverflowSize,\n            blockOverflowSize: blockOverflowSize,\n            childFragments: childFragments,\n        };\n    }\n});</code></pre></div>\n<p>上面這段 code 是來自 <a href=\"https://drafts.css-houdini.org/css-layout-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">houdini draft 的範例</a>，完整放上來是想給大家看一下實作一個 Layout 需要注意的細節有多少，其實並不是如想像中的輕鬆，\n相信未來會出現更多方便的 API 輔助開發。（放心接下來不會再有這麼多 code 了 XD）</p>\n<p>有了 Layout API，不管是自己實作或是拿別人寫好的 Layout，你都可以直接如下方式使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token function\">layout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'block-like'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"css-painting-api\" style=\"position:relative;\"><a href=\"#css-painting-api\" aria-label=\"css painting api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Painting API</h3>\n<p>Painting API 與 Layout 類似，提供一個叫做 <code class=\"language-text\">registerPaint</code> 的方法：</p>\n<p>定義 Paint Method，這邊偷偷用到了待會要介紹的 CSS Properties：</p>\n<div class=\"gatsby-highlight\" data-language=\"jssimplerect.js\"><pre class=\"language-jssimplerect.js\"><code class=\"language-jssimplerect.js\">registerPaint(&#39;simpleRect&#39;, class {\n    static get inputProperties() { return [&#39;--rect-color&#39;]; }\n    paint(ctx, size, properties) {\n        // 依據 properties 改變顏色\n        const color = properties.get(&#39;--rect-color&#39;);\n        ctx.fillStyle = color.cssText;\n        ctx.fillRect(0, 0, size.width, size.height);\n    }\n});</code></pre></div>\n<p>宣告使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.div-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.div-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 50% 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">.div-1</code> 與 <code class=\"language-text\">.div-2</code> 就可以擁有各自定義寬高顏色的方形 background-image</p>\n<h3 id=\"worklets\" style=\"position:relative;\"><a href=\"#worklets\" aria-label=\"worklets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Worklets</h3>\n<p>在上述的 Layout API 與 Paint API 中，我們都有撰寫一支 js 檔案，用來定義新的屬性，然後在 css 檔案中呼叫取用，你可能會覺得那支 js 檔案就直接像一般 web 嵌入 js 的方式一樣即可，\n但實際上並非如此，我們需要透過 <strong>Worklets</strong> 來幫我們載入。以上面的 Paint API 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add a Worklet</span>\npaintWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// WORKLET \"simpleRect.js\"</span>\n<span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>同理，Layout API 則是 <code class=\"language-text\">layoutWorklet.addModule('blockLike.js')</code>。</p>\n<p><strong>Worklets</strong> 光名字就有點像 Web Worker 了，都是獨立於主要執行緒之外，並且不直接與 DOM 互動。你可能會想那為何還需要有一個 Worklets？</p>\n<p>因為 Houdini 是希望將開發者的程式碼 hook 到 CSS engine 中運作，而根據規範內的敘述，web worker 相對笨重，不適合用來處理 CSS engine 這種可能會牽扯到數百萬畫素圖片的工作。\n所以可以推斷，Worklets 的特點就是輕量以及生命週期較短。</p>\n<p>其實除了 Layout Worklets 與 Paint Worklets 外，還有所謂的 Animation Worklet，雖然還沒有放入規範，但已經有在著手進行中，也有 <a href=\"https://github.com/GoogleChrome/houdini-samples/tree/master/animation-worklet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polyfills</a> 了，Chrome 的 Sticky Header 就是採用 Houdini 的 Animation Worklet。Twitter 的 <a href=\"https://blog.hospodarets.com/demos/houdini-anim-twitter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Header Effect</a> 也是採用 Animation Worklet\nAnimation Worklet 是想介入 Render Pipeline 中的 Composite 步驟，也就是原本利用 js 與 css 控制動畫時，瀏覽器會重新執行的部分。\n關於 Animation Worklet 的詳細實作介紹可以看這份投影片 <a href=\"http://slides.com/malyw/houdini-codemotion#/48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">houdini-codemotion</a></p>\n<h3 id=\"css-parser-api\" style=\"position:relative;\"><a href=\"#css-parser-api\" aria-label=\"css parser api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Parser API</h3>\n<p>Parser API 目前還是處在 Unofficial draft，但我相信如果這個 API 確認的話，對前端開發有絕對的幫助，她的概念是想讓開發者能擴充瀏覽器解析 HTML、CSS 的功能，\n也就是說，你可以想辦法讓他看得懂最新定義的 pseudo-classes 或甚至是 element-queries 等等，這樣就能正確解析出 CSSOM，從此不用再等瀏覽器更新。</p>\n<h3 id=\"css-typed-om\" style=\"position:relative;\"><a href=\"#css-typed-om\" aria-label=\"css typed om permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Typed OM</h3>\n<p>CSS Typed OM 就是 CSSOM 的強化版，最主要的功能在於將 CSSOM 所使用的字串值轉換成具有型別意義的 JavaScript 表示形態，像是所有的 CSS Values 都有一個 base class interface：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CSSStyleValue</span> <span class=\"token punctuation\">{</span>\n    stringifier<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> CSSStyleValue<span class=\"token operator\">?</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>DOMString property<span class=\"token punctuation\">,</span> DOMString cssText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> sequence<span class=\"token operator\">&lt;</span>CSSStyleValue<span class=\"token operator\">></span><span class=\"token operator\">?</span> <span class=\"token function\">parseAll</span><span class=\"token punctuation\">(</span>DOMString property<span class=\"token punctuation\">,</span> DOMString cssText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你可以如下操作 CSS style: (source from <a href=\"http://slides.com/malyw/houdini-codemotion#/27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CSS -> JS</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>styleMap<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSSimpleLength {value: 12, type: \"px\", cssText: \"12px\"}</span>\n\n<span class=\"token comment\">// JS -> JS</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSUnitValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSUnitValue{value:5,unit:\"px\",type:\"length\",cssText:\"5px\"}</span>\n\n<span class=\"token comment\">// JS -> CSS</span>\n<span class=\"token comment\">// set style \"transform: translate3d(0px, -72.0588%, 0px);\"</span>\nelem<span class=\"token punctuation\">.</span>outputStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTransformValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTranslation</span><span class=\"token punctuation\">(</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSSimpleLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> currentPercent<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>根據 <a href=\"https://drafts.css-houdini.org/css-typed-om/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Drafts 的內容</a>，有了型別定義，在 JavaScript 的操作上據說會有效能上的顯著提升。此外，CSS Typed OM 也應用在 Parser API 與 CSS Properties API 上。</p>\n<h3 id=\"font-metrics-api\" style=\"position:relative;\"><a href=\"#font-metrics-api\" aria-label=\"font metrics api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Font Metrics API</h3>\n<p>Font Metrics 也沒有出現在上方的 <strong>Houdini API on render pipeline</strong> 中，但它其實已經被寫入 <a href=\"https://drafts.css-houdini.org/font-metrics-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Draft 規範</a> 中了。\n老實說看不是很懂他的 spec 寫的內容，但我猜測這東西的用途應該跟這篇文章 <a href=\"http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep dive CSS: font metrics, line-height and vertical-align</a> 其中提到一個問題有關，（裡面非常詳細的介紹了 font metrics、line-height 與 vertical-align 在網頁上如何互相影響，推薦大家有空的話耐心閱讀一番。）：</p>\n<p>不同 font-family 在相同 font-size 下，所產生的 span 高度會不同。</p>\n<p><img src=\"/image/font-size.png\" alt=\"source from http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align\"></p>\n<p>要想控制 Font metrics，也就是控制字所佔的寬高的話，目前可以先用 CSS Properties 來處理，根據已知字體的 font-metrics 動態算出我們要 apply 多少的 font-size：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 定義好我們已知字型的 Font metrics */</span>\n    <span class=\"token comment\">/* font metrics */</span>\n    <span class=\"token property\">--font</span><span class=\"token punctuation\">:</span> Catamaran<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-capitalHeight</span><span class=\"token punctuation\">:</span> 0.68<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-descender</span><span class=\"token punctuation\">:</span> 0.54<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-ascender</span><span class=\"token punctuation\">:</span> 1.1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">--fm-linegap</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 定義想要的高度 */</span>\n    <span class=\"token property\">--capital-height</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 設定 font-family */</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--font<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 利用 Font metrics 的資訊與想定義的高度來計算出 font-size */</span>\n    <span class=\"token property\">--computedFontSize</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--capital-height<span class=\"token punctuation\">)</span> / <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--fm-capitalHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--computedFontSize<span class=\"token punctuation\">)</span> * 1px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而想必 Font Metrics API 就是希望能 expose 出更方便的 API 來達成上述的事情。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<!-- JS 與 CSS 的發展速度剛好相反 -->\n<p>Web 開發基本上就是由 HTML、JS、CSS 三大要素構成，然而 JS 與 CSS 的發展差異卻極其龐大，一個速度快到讓人跟不上，一個則是等半天還是無法放心使用新規格，實在非常有趣...\n但透過這次了解 Houdini API 的過程，理解到了 CSS 算是朝向好的方向前進，雖然很多離實際採用還有段距離，但至少我們已經能夠在最新的瀏覽器上使用 Custom Properties 了！CSS 的未來還是充滿希望的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/malyw/houdini-codemotion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</li>\n<li><a href=\"https://drafts.css-houdini.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini Draft</a></li>\n<li><a href=\"http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep dive CSS: font metrics, line-height and vertical-align</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini: Maybe The Most Exciting Development In CSS You’ve Never Heard Of</a></li>\n<li><a href=\"https://github.com/GoogleChrome/houdini-samples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">houdini-samples</a></li>\n<li><a href=\"https://github.com/w3c/css-houdini-drafts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Houdini API Draft</a></li>\n</ol>","id":"9560287f-56d5-5dd8-8ecf-f72cb4e30c0e","fields":{"slug":"css-houdini-custom-properties"},"frontmatter":{"date":"2017-05-23T19:44:02.000Z","title":"CSS 魔術師 Houdini API 介紹","tags":["css","houdini"],"type":"tech","slug":"css-houdini-custom-properties"},"timeToRead":13},"type":"tech"}},"staticQueryHashes":["2123680655"]}