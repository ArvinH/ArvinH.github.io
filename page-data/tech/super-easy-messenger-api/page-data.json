{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/super-easy-messenger-api","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"</p>\n</blockquote>\n<!-- more -->\n<p>最近Bot好像很夯，FB也在幾天前的F8大會上推出Messenger API，讓擁有粉絲頁的店家、企業、或是個人，能夠製作出Chat Bot來與使用者互動。事實上像是Slack、HipChat、telegram等通訊軟體都早已有類似的Bot api可以提供使用，並且在設計上跟Facebook現階段推出的 API 其實大同小異，甚至也已經有人將它整進Hubot framework中 <a href=\"https://github.com/chen-ye/hubot-fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hubot-fb</a>，連所謂的 <a href=\"https://medium.com/@tomazstolfa/the-future-of-conversational-ui-belongs-to-hybrid-interfaces-8a228de0bdb5#.b0tcmb607\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CUI - Conversational User Interface</a> 都出現了。</p>\n<p>對我來說，Chat Bot也只是另一種方式來解決使用者的問題，另一種相對新穎的媒介，找到痛點，並對症下藥這件事情是不會改變的！</p>\n<p>好，扯遠了。Facebook Messenger最大的優勢除了FB本身龐大的使用者外，還有粉絲專頁的功能可以操作，如同 Mark Zuckerberg 在F8 Keynote中提到的例子一樣，背後隱藏的商機與可能性非常大，因此還是有必要來玩一下Messenger API。這邊希望簡單記錄與並以中文說明如何產生你的第一個Messenger Bot，讓你夜深寂寞時能有人陪你聊天...</p>\n<p>值得一提的是，Facebook developer doc上面的說明算是非常清楚，需要完整文件支援的話可以移駕至此 <a href=\"https://developers.facebook.com/docs/messenger-platform/quickstart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FB messenger-platform doc</a></p>\n<h2 id=\"step-1---創建facebook-應用程式與facebook粉絲專頁\" style=\"position:relative;\"><a href=\"#step-1---%E5%89%B5%E5%BB%BAfacebook-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%88%87facebook%E7%B2%89%E7%B5%B2%E5%B0%88%E9%A0%81\" aria-label=\"step 1   創建facebook 應用程式與facebook粉絲專頁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1 - 創建Facebook 應用程式與Facebook粉絲專頁</h2>\n<p>還沒有在Facebook上面創建過應用程式的讀者，可以先連結到 <a href=\"https://developers.facebook.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.facebook.com/</a>\n進去後會看到右上角會有<strong>我的應用程式</strong>可以選擇</p>\n<p><img src=\"/image/fbdeveloper.png\" alt=\"FB developer\" title=\"FB developer\"></p>\n<p>選擇<strong>新增應用程式</strong>後，理論上會需要填寫一些基本資訊，必要填寫的有<strong>顯示名稱</strong>, <strong>聯絡電子郵件</strong> 與 <strong>網站網址</strong>\n這邊要注意一下，基本上你如果想要用Messenger API，你勢必會需要有一個server來養你的bot，若不想污染你自己目前的server環境，就創建一個新的吧！FB上的範例多數是以JS為主，當然你可以自行選用慣用的環境。</p>\n<p><img src=\"/image/fbapp-apply.png\" alt=\"FB App 申請\" title=\"FB App 申請\"></p>\n<p>接著看向左邊的Menu，在最下方地方有個Messenger，點選後會進入以下頁面</p>\n<p><img src=\"/image/messenger.png\" alt=\"Messenger 申請\" title=\"Messenger 申請\"></p>\n<p>重點有兩個地方，第一個是你必須要選擇一個粉絲專頁，在這邊選定好粉絲專頁後，後面產生的Token（權杖）會用來將你的app與粉絲專頁綁定，之後的messenger要透過此Token才能順利執行。第二個Webhooks的步驟下面會談到。</p>\n<p>創建粉絲專頁非常簡單，簡單到多放一張圖都是多餘，因此我們直接跳往下個步驟。\n<img src=\"/image/token.png\" alt=\"粉絲專頁選好後會出現Token\" title=\"Token\"></p>\n<h2 id=\"step-2---set-up-webhook\" style=\"position:relative;\"><a href=\"#step-2---set-up-webhook\" aria-label=\"step 2   set up webhook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 - Set up Webhook</h2>\n<p>當你選定好粉絲專頁後就要設定你的webhook，這邊就需要開始寫點code了！\n但先別急著動手！當你點選set up webhook後，會彈出一個視窗：</p>\n<p><img src=\"/image/webhook.png\" alt=\"Webhook setup\" title=\"Webhook setup\"></p>\n<p>這邊的url就要填寫你的server，記得要填寫適當的route，以FB的範例程式為例，如果你希望之後的bot api都走/webhook這個route當作進入點，那這邊的url可能就要填寫 <code class=\"language-text\">https://www.mybot.com/webhook/</code>\n這邊另外要注意一點，你的server必須要提供https，如果你跟筆者一樣先前沒有設定過ssl的話，推薦<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cloudflare</a>的free plan或是前陣子很紅的<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Let's encrypt</a></p>\n<p>當一切準備就緒後，把你server的route添加以下的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes.js\"><pre class=\"language-javascriptroutes.js\"><code class=\"language-javascriptroutes.js\">\t\tapp.get(&#39;/webhook/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>若你跟我一樣習慣把route分開，當然就會變成以下這樣，而webhook url 就是 <code class=\"language-text\">https://www.mybot.com/fbbot/</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">\t\troute.get(&#39;/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>這邊的<code class=\"language-text\">validation_token</code>就是上圖中的<strong>驗證權杖</strong>，基本上隨便你填寫什麼都可以。</p>\n<p>當你在server端加上route，並且把他填寫到上面的url欄位後，記得將下方的<strong>訂閱欄位</strong>的選項都打勾，不然你就沒辦法傳送訊息。接著就可以按下save，FB會emit一個get request去驗證你的webhook，成功後該區塊就會變成：</p>\n<p><img src=\"/image/webhooksuccess.png\" alt=\"Webhook successful\" title=\"Webhook successful\"></p>\n<h2 id=\"step-3---subscribe-the-app-to-the-page\" style=\"position:relative;\"><a href=\"#step-3---subscribe-the-app-to-the-page\" aria-label=\"step 3   subscribe the app to the page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3 - Subscribe the App to the Page</h2>\n<p>記得步驟一中我們有設定好粉絲專頁，並取得Token嗎？現在就需要利用該Token來讓我們的App與粉絲專頁進行綁定，只需要一行指令：\n<code class=\"language-text\">curl -ik -X POST \"https://graph.facebook.com/v2.6/me/subscribed_apps?access_token=&lt;token>\"</code></p>\n<p>如果進行到這邊都沒問題的話，就可以進入重頭戲了。</p>\n<h2 id=\"step-4---send-a-text--receive-message\" style=\"position:relative;\"><a href=\"#step-4---send-a-text--receive-message\" aria-label=\"step 4   send a text  receive message permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 - Send a text &#x26; Receive Message</h2>\n<p>Message的傳送是透過<code class=\"language-text\">POST</code>，我們再度新增一個route在你的webhook底下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>這樣你就能在server上接收到別人傳送給你的粉絲專頁的訊息。</p>\n<p>接著我們撰寫個簡單的<code class=\"language-text\">sendTextMessage Method</code>：\n(FB的範例是include request這個http client module，你可以用你自己習慣的方式)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsendtextmessage.js\"><pre class=\"language-javascriptsendtextmessage.js\"><code class=\"language-javascriptsendtextmessage.js\">var token = &quot;&lt;page_access_token&gt;&quot;;\nvar request = require(&#39;request&#39;);\n\nfunction sendTextMessage(sender, text) {\n  messageData = {\n    text:text\n  }\n  request({\n    url: &#39;https://graph.facebook.com/v2.6/me/messages&#39;,\n    qs: {access_token:token},\n    method: &#39;POST&#39;,\n    json: {\n      recipient: {id:sender},\n      message: messageData,\n    }\n  }, function(error, response, body) {\n    if (error) {\n      console.log(&#39;Error sending message: &#39;, error);\n    } else if (response.body.error) {\n      console.log(&#39;Error: &#39;, response.body.error);\n    }\n  });\n}</code></pre></div>\n<p>接著我們把這個Method放到前面的<code class=\"language-text\">POST</code>處理中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n      sendTextMessage(sender, &quot;Text received, echo: &quot;+ text.substring(0, 200));\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>接著去到粉絲專頁傳訊息看看吧！</p>\n<p><img src=\"/image/echo-robot.png\" alt=\"Echo Robot\" title=\"Echo Robot\"></p>\n<p>Yeah! you just build your first own echo robot!</p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>目前Messenger API的功能還很少，且需要許多認證才能讓你的bot正式使用，但我想之後一定會出現更簡易的設定方式，讓一般粉絲頁不用撰寫程式碼即可擁有自己的bot，否則也會有 Bot版本的 Wix 出現吧！</p>\n<p>其實Bot說穿了就是低成本、自動化去解決問題，背後的AI、NLP、ML等等才是重點！不過接下來我應該會先繼續研究Messnger API，並用Hubot adapter開發幾個slack與telegram bot玩玩！或許加上一些NLP處理～</p>","fields":{"slug":"super-easy-messenger-api"},"frontmatter":{"title":"超簡易 Messenger API 初探","date":"04-17-2016","tags":["messenger","api","facebook"]},"timeToRead":5}},"pageContext":{"slug":"super-easy-messenger-api","prev":{"excerpt":"\"My name is Barry Allen, and I'm the fastest man alive ...\"\n\"Wait..reverse flash is faster then you, zoom is faster than you..\"","html":"<blockquote>\n<p>\"My name is Barry Allen, and I'm the fastest man alive ...\"\n\"Wait..reverse flash is faster then you, zoom is faster than you..\"</p>\n</blockquote>\n<!-- more -->\n<p>今天來談談Browser Rendering Optimisation。順便也是為在公司上的課做個心得記錄。</p>\n<p>相信大家小時候都好奇過早期的電影、卡通或動畫，是怎麼樣製作出來的，而我們也都知道基本上就是一連串的<code class=\"language-text\">畫面</code>以非常快速的方式做切換，矇騙你的視覺讓你感受到是連續的<code class=\"language-text\">影片</code>，而Browser其實也是類似的做法，當取得Server的回應後，瀏覽器便把接收到的HTML畫出來，而每當你的網頁有所變化時，Browser就會再依據其邏輯將網頁重新渲染一遍，也因此才能看到這麼多漂亮的效果。</p>\n<p>而所謂browser rendering optimization就是要讓渲染的過程能夠更快速、更順暢，讓你的網頁畫面如夢似幻、細緻耀眼。</p>\n<p>要做到這件事情，就必須提及FPS(Frames per Second)，顧名思義就是每秒畫幾個Frames，一般影片大概是<a href=\"https://en.wikipedia.org/wiki/Frame_rate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">30fps</a>，而多數螢幕畫面的更新頻率是60Hz，因此若我們能將fps極致提升到60fps，理當能有非常棒的畫面呈現！</p>\n<p>知道目標後，let's do some math...\n<code class=\"language-text\">60fps = 60 frames per second = 60 frames every 1000ms</code>\n好的從我們優異的數學能力下得知，要達到60fps，我們繪製一個frames的時間必須在16.6666...ms左右(1000/60)</p>\n<p>ok，那要怎麼知道自己的網頁每個frames花了多少時間繪製？拜Google大神所賜，只要打開Chrome的devTool，切換到Timeline的tab，就可以很容易的知道網頁在browser上的render時間。讓我們用畫面超級old school的pchome拍賣來Demo一下：</p>\n<p><img src=\"/image/googleDevTool-pchome.png\" alt=\"Devtool-timeline(點圖放大)\" title=\"DevTool-timeline\"></p>\n<p>先別被圖中五顏六色的區塊嚇到，在我們說明這Tool該如何使用之前，必須先瞭解Browser的Render過程，以及這圖片中每個顏色所代表的意義。</p>\n<p>接觸過HTML的人一定都知道所謂的DOM Tree，Browser會解析HTML並轉換成DOM Tree做操作，但知道<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Render Tree</a>的人可能就不多了，Render tree由DOM tree與CSS結合產生，Browser就是依照Render Tree來決定該在畫面上呈現什麼東西。若你今天在某個div的css上加上<code class=\"language-text\">display: none</code>，那這個div就不會再Render tree上呈現。</p>\n<p><img src=\"/image/RenderTree.png\" alt=\"Render Tree (source from google)\"></p>\n<p>既然Render的過程也是一棵Tree，有點概念的人可能會想：每次style改變或是我更動DOM的位置時，這棵Tree也就會變動了吧？\n沒錯！在整個Browser的Render過程中，就是會不斷去recalculating style、layout的關係，來建構這棵樹。</p>\n<p>當然Browser的渲染過程不止這些，還必須載入js, css, web api等等的資源，因此有所謂的Rendering Pipeline</p>\n<p><img src=\"/image/render_pipeline.png\" alt=\"Render Pipeline (source from google)\">\n從圖上可以發現其順序為：</p>\n<ol>\n<li>Javascript: 載入與執行JS/CSS</li>\n<li>Style: 根據js與css計算style</li>\n<li>Layout: 當style套入元素時，瀏覽器要檢查是否會影響到整個畫面的排列，並進行排列</li>\n<li>Paint: 排列後有更動到的元素需要重新繪製（第一次載入的話當然是全部繪製）</li>\n<li>Composite: 最後就是將所有元素重新合成回來（重新繪製的元素與原本的元素）</li>\n</ol>\n<p>實際上並非每次的前端更動都會執行這五個步驟，若你只有切換顏色、圖片等不影響版面配置的動作，browser會跳過Layout，直接進行Paint；或著你捲動網頁、css的動畫效果，這類操作則會跳過style與layout，直接進行Composite。</p>\n<p>接下來我們回到Timeline這個tool。</p>\n<p><img src=\"/image/Timeline2.png\" alt=\"Timeline record\">\n你可以直接在你想觀察的網頁打開Timeline，並重新整理，他就會自行錄製；或是你可以在你想觀察的操作步驟進行前（ex. 滑動頁面、打開menu bar等等）按下錄製。</p>\n<p><img src=\"/image/Timeline3.png\" alt=\"Timeline finish\"></p>\n<p>接著在你覺得適合的地方（通常就是步驟執行完後）按下Finish。</p>\n<p><img src=\"/image/Timeline1.png\" alt=\"Timeline result\"></p>\n<p>基本上就能得到下列的Timeline結果。\n從這張圖片可以清楚看到每個frame花了多少時間，在Render pipeline中發生了哪些事情，值得注意的是，圖片右上角有個紅色小三角形，若你的frame中有這個標記，就代表Chrome認為這段frame有可以改善的部分。大家不妨到自己的網頁打開Timeline，看看有多少東西需要改進XD</p>\n<p>在認識了工具後，總是要實際操作一遍才會有感受，這邊以三種角度來進行Optimization。</p>\n<h2 id=\"javascript\" style=\"position:relative;\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript</h2>\n<p>一般來說，前端工程師常常會利用<code class=\"language-text\">setTimeout</code>或是<code class=\"language-text\">setInterval</code>來製作一些動畫效果，你可能會寫下面這樣的code:</p>\n<p><a href=\"https://jsbin.com/xuconawipi/5/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example setInterval</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsetinterval.js\"><pre class=\"language-javascriptsetinterval.js\"><code class=\"language-javascriptsetinterval.js\">var timer = {time: 0};\nfunction counter(timer) { \n  timer.time = timer.time+1;\n  document.querySelector(&quot;#counter&quot;).innerHTML = timer.time;\n}\nsetInterval(counter.bind(null,timer), 1000); </code></pre></div>\n<p>或著是</p>\n<p><a href=\"https://jsbin.com/yocokorelu/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example setTimeout</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsettimeout.js\"><pre class=\"language-javascriptsettimeout.js\"><code class=\"language-javascriptsettimeout.js\">\t\tvar timer = {time: 0};\n\t\tfunction counter(timer) { \n\t\t\tsetTimeout(counter.bind(null,timer), 1000);\n\t\t\ttimer.time = timer.time+1;\n\t\t\tdocument.querySelector(&quot;#counter&quot;).innerHTML = timer.time;\n\t\t}\n\t\tcounter(timer);</code></pre></div>\n<p>兩者都可以讓你達到同樣的效果，但是setTimeout跟setInterval對Browser來說都有個主要缺點，就是他<strong><span style=\"color:red; font-style: italic;\">想執行時就會執行，而不會依據你的Browser狀況<span></strong>；另外當你切換到別的Tab時，setTimeout還會繼續Render。（理論上user看不到畫面，Browser就可以不用執行，以節省效能）\n<em><span style=\"color:rgba(228, 85, 85, 0.81); font-style: italic;\">不過現在許多瀏覽器都已經利用某些方式讓setTimeout在不需要Render時暫停工作。</span></em></p>\n<p>除了setTimeout與setInterval外，我們其實還有另一個選擇 <span style=\"color:red;\"><code class=\"language-text\">requestAnimationFrame</code></span></p>\n<p>假設我們有個Draw的動畫function，用setTimeout是這樣實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptdraw.js\"><pre class=\"language-javascriptdraw.js\"><code class=\"language-javascriptdraw.js\">\t\tfunction draw() {\n\t\t    setTimeout(draw, 16); // 16ms per frame!\n\t\t    // Drawing\n\t\t}\n\t\tdraw();</code></pre></div>\n<p>若是用requestAnimationFrame：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptdraw-raf.js\"><pre class=\"language-javascriptdraw-raf.js\"><code class=\"language-javascriptdraw-raf.js\">\t\tfunction draw() {\n\t\t\t// Drawing\n\t\t\trequestAnimationFrame(draw);\n\t\t}\n\t\trequestAnimationFrame(draw);</code></pre></div>\n<p>就這麼簡單，用了<span style=\"color:red;\"><code class=\"language-text\">requestAnimationFrame</code></span>之後，Browser就會綜合考量javascript所產生的動畫，一起刷新螢幕，並在動畫不在viewport時，暫停工作，以節省資源。</p>\n<p>當然你會想說，那如果我想控制animation的timing怎麼辦？以前面的counter例子來看，你可以這樣做：</p>\n<p><a href=\"https://jsbin.com/qerude/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example reqeustAnimationFrame</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptraf_timeer\"><pre class=\"language-javascriptraf_timeer\"><code class=\"language-javascriptraf_timeer\">\t\tvar timer = {time: 0};\n\t\tfunction counter(timer) { \n\t\t  setTimeout(function(){\n\t\t    requestAnimationFrame(counter.bind(null, timer));\n\t\t    timer.time = timer.time+1;\n\t\t    document.querySelector(&quot;#counter&quot;).innerHTML = timer.time;\n\t\t  }, 1000);\n\t\t}\n\t\tcounter(timer);</code></pre></div>\n<h2 id=\"style--layout\" style=\"position:relative;\"><a href=\"#style--layout\" aria-label=\"style  layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Style &#x26; Layout</h2>\n<p>除了JS外，在頁面上操作畫面大多免不了觸發<code class=\"language-text\">Style</code> &#x26; <code class=\"language-text\">Layout</code>這兩個Render Pipeline的步驟。既然免不了這些步驟，我們能做的就是盡量<strong>減少</strong>這些步驟的產生，大家可以到這裡（<a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How (not) to trigger a layout in WebKit</a>）看看在有哪些操作我們要盡量減少。</p>\n<p>當然，光說不練感受不到差別，讓我們來練習一個例子：</p>\n<p><a href=\"https://jsbin.com/yesika/edit?html,css,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example Layout trigger</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptbefor-optimization.js\"><pre class=\"language-javascriptbefor-optimization.js\"><code class=\"language-javascriptbefor-optimization.js\">\t\t(function() {\n\t\t  // noprotect\n\t\t  var sizer = document.querySelector(&#39;.sizer&#39;);\n\n\t\t  document.querySelector(&#39;.set-size&#39;).addEventListener(&#39;click&#39;, function(event) {\n\t\t    var ps = document.querySelectorAll(&#39;.article .article-block&#39;);\n\t\t    var i = ps.length;\n\t\t    var size;\n\t\t    while (i--) {\n\t\t      finalHeight = sizer.offsetHeight;\n\t\t      ps[i].style.height = finalHeight + &#39;px&#39;;\n\t\t    }\n\t\t    event.preventDefault();\n\t\t  });\n\t\t}());</code></pre></div>\n<p><a href=\"https://jsbin.com/wukuzi/2/edit?html,css,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example Less Layout trigger</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptafter-optimization\"><pre class=\"language-javascriptafter-optimization\"><code class=\"language-javascriptafter-optimization\">\t\t(function() {\n\t\t  // noprotect\n\t\t  var sizer = document.querySelector(&#39;.sizer&#39;);\n\n\t\t  document.querySelector(&#39;.set-size&#39;).addEventListener(&#39;click&#39;, function(event) {\n\t\t    var ps = document.querySelectorAll(&#39;.article .article-block&#39;);\n\t\t    var i = ps.length;\n\t\t    var size;\n\t\t    var finalHeight = sizer.offsetHeight;\n\t\t    while (i--) {\n\t\t      ps[i].style.height = finalHeight + &#39;px&#39;;\n\t\t    }\n\t\t    event.preventDefault();\n\t\t  });\n\t\t}());</code></pre></div>\n<p>仔細看就會發現其實只有一行code有變動，效果卻差很多！當你在操作類似DOM物件的時候可以參考上述的網站，避免不必要的re-layout動作。</p>\n<h2 id=\"composite\" style=\"position:relative;\"><a href=\"#composite\" aria-label=\"composite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composite</h2>\n<p>在一個網頁的頁面當中，實際上並非是平面的，通常會由許多<code class=\"language-text\">Layer</code>所組成，而在Browser rendering pipeline的最後一個步驟<code class=\"language-text\">Composite</code>中，就是負責將這些Layer組合成完整的頁面。</p>\n<p>我們這次以最近Live直播統一獅頗為熱門的Yahoo首頁為例子，依照先前的方式打開Dev tool中的Timeline，選取其中一段frame後，點選下方的<code class=\"language-text\">Layers</code>標籤，應該就可以看到類似下面的圖：\n<img src=\"/image/layer.png\" alt=\"Composite Layers\">\n<img src=\"/image/compositeLayers.png\" alt=\"Composite Layers (而在Timeline的工具中，旁邊還能讓你拖拉旋轉，方便查看各個Layer的狀況。)\"></p>\n<p>可以發現yahoo首頁也是由許多層Layer所組成。</p>\n<p>眼尖的讀者可能會發現為什麼頁面中只有一個區塊是綠色的？這就是這小節的重點了，在Composite的過程中，只有需要重新Style與Layout的Layer才需要重繪，而這些需要重繪的Layer就會被標註成綠色；以yahoo首頁為例，綠色的那條是影音列表，理當會不斷變動，因此會被Highlight為綠色。</p>\n<p>那為什麼我們需要針對這個步驟做Optimize呢？因為假如在同一層layer中，你其實只有某一個div需要re-layout，但由於是在同一個Layer，會變成整個Layer都需要重新繪製，如此一來就會增加不必要的負擔。</p>\n<p>因此我們可以在你確定會需要重繪制的div中，加入<code class=\"language-text\">will-change: transform;</code>這個屬性，告訴browser說，“欸~我知道我可能會變動喔，請不要把大家跟我視為一樣的”，這樣就能解決上述的問題。</p>\n<p>大家不妨打開自己的網站，利用Chrome的Timeline玩看看，提升頁面的渲染效率，讓我們一起追求60ps的極致快感吧！</p>\n<h2 id=\"延伸閱讀\" style=\"position:relative;\"><a href=\"#%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80\" aria-label=\"延伸閱讀 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>延伸閱讀</h2>\n<ol>\n<li><a href=\"http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How not to trigger layout in webkit</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Web Fundamentals</a></li>\n<li><a href=\"http://www.html5rocks.com/zh/tutorials/speed/layers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Accelerated Rendering in Chrome</a></li>\n</ol>","id":"c7046447-102b-5060-9ea8-3434320d299e","fields":{"slug":"front-end-kata-60-fps的快感"},"frontmatter":{"date":"2016-03-26T16:45:55.000Z","title":"Front-end kata 60fps的快感 - Browser Rendering Optimisation","tags":["Browser Rendering Optimisation","kata","performance"],"type":"tech","slug":"Front-end kata 60fps的快感"},"timeToRead":7},"next":{"excerpt":"\"要學Flux還是直接學Redux好呢？\"\n\t\"Flux我知道, 3D printer麻！\"","html":"<blockquote>\n<p>\"要學Flux還是直接學Redux好呢？\"\n\"Flux我知道, 3D printer麻！\"</p>\n</blockquote>\n<!-- more -->\n<p>今天這篇主要是想藉由 <code class=\"language-text\">Flux</code> 的介紹，進而探討 <code class=\"language-text\">Flux</code> 與 <code class=\"language-text\">MVC</code> 的差異。會想記錄這篇的原因是前幾天跟我的師父（以前實習公司的 CTO）詢問我類似的問題，我才發現自己還沒有真正全盤瞭解過，只是很直接的去了解 Flux，並且使用，但是到底 <code class=\"language-text\">Flux</code> 做對了什麼，而 <code class=\"language-text\">MVC</code> 又犯了什麼錯呢？</p>\n<p>首先我們回顧一下<a href=\"https://www.youtube.com/watch?v=nYkdrAPrdcw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2014 F8大會 - Hacker Way</a>的影片\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=nYkdrAPrdcw\" target=\"_blank\">\n<img src=\"http://img.youtube.com/vi/nYkdrAPrdcw/0.jpg\" alt=\"2014 F8大會 - Hacker Way\" width=\"240\" height=\"180\" border=\"10\">\n</a>\n其中 Jing Chen 用了兩張圖來做對比，說明 MVC 的觀念在複雜的 Application 下難以維護。</p>\n<p><img src=\"/image/flux-react-mvc.png\" alt=\"facebook MVC\" title=\"facebook MVC\"></p>\n<p>經驗豐富一點的 Developer 看到這張圖的第一個念頭應該會是：\"What the fxxx... 誰家的 MVC長這樣啊？\" 沒錯！Jing Chen 事後在 Reddit 上也有回覆，主要是想利用這張圖把 MVC 在大型架構下，資料 與 視圖 之間的 <code class=\"language-text\">bi-directional data flow</code>，容易造成 <code class=\"language-text\">cascading effects</code> 的問題凸顯出來。</p>\n<p>為了解決她說的這個問題，Facebook 提出了 <code class=\"language-text\">Flux</code></p>\n<h2 id=\"flux\" style=\"position:relative;\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h2>\n<p>Flux是一種讓你很容易做到 one-way data flow 的<span style=\"color:red\">概念</span>，讓你View中的每個 component 的 state 都能夠 <code class=\"language-text\">predictable</code>。</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<h3 id=\"views-dispatch-actions\" style=\"position:relative;\"><a href=\"#views-dispatch-actions\" aria-label=\"views dispatch actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Views Dispatch Actions</h3>\n<p><code class=\"language-text\">Dispatcher</code> 是一個重要的 event system，用來 broadcast events 以及 registers callbacks，一般來說 Dispatcher 是唯一且 global 的，可以參考 Facebook 的<a href=\"https://github.com/facebook/flux/blob/master/src/Dispatcher.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dispatcher Library</a>（題外話，有許多一些 Flux 的 framework 並非這樣使用）</p>\n<p>簡單來看個 Dispatcher 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 假設你initiate一個dispatcher</span>\n<span class=\"token keyword\">var</span> AppDispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//.</span>\n<span class=\"token comment\">//..</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token comment\">//在你的 component.jsx 中，可能會有這樣的程式</span>\n<span class=\"token function-variable function\">createNewItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">evt</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    actionName<span class=\"token operator\">:</span> <span class=\"token string\">'newPhoto'</span><span class=\"token punctuation\">,</span>\n    newItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Happy Holiday'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// example data</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createNewPhoto <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>New Photo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當每次的 <code class=\"language-text\">onClick</code> 發生後，<code class=\"language-text\">View</code> 就會透過 <code class=\"language-text\">Dispatcher</code> dispatch 出一個 <code class=\"language-text\">Action</code>，該 Action 可以包含一個 <code class=\"language-text\">payload</code>，說明<code class=\"language-text\">你想做什麼事情</code>以及<code class=\"language-text\">你需要操作什麼資料</code>。</p>\n<h3 id=\"store-responds-to-dispatched-actions\" style=\"position:relative;\"><a href=\"#store-responds-to-dispatched-actions\" aria-label=\"store responds to dispatched actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Responds to Dispatched Actions</h3>\n<p>Store 在 Flux的架構內，通常是 Singleton (一樣，有些 framework 並非這樣做，尤其是想達成 isomorphic 時，可以參考<a href=\"http://fluxible.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yahoo Fluxible</a>)</p>\n<p>在 Flux 的概念中，Store 基本上是你唯一可以<strong>操作資料</strong>與<strong>儲存資料</strong>的地方。去除操作資料的部分，聽起來有點像 MVC 中的 Model ? 更明確一點來說，<strong>Store contains Models</strong></p>\n<p>舉例來說，當你需要存放一些照片以及其 Meta data 時，你會 Create 一個 PhotoStore 來存放 Photo model 與 Meta model。你會依照資料的<code class=\"language-text\">Domain</code> 來切割你的 Store。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> PhotoStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// collection of model data</span>\n  photos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nAppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Store</code> 會向 <code class=\"language-text\">Dispatcher</code> 註冊 <code class=\"language-text\">Callback</code>，依照各種 action 的類別執行相對應的資料操作。</p>\n<h3 id=\"store-emits-change-event-to-view\" style=\"position:relative;\"><a href=\"#store-emits-change-event-to-view\" aria-label=\"store emits change event to view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Emits \"Change\" Event to View</h3>\n<p>當你的 Store 資料做完更新後，要告訴前端頁面去刷新視圖，通常可以在 Store 註冊的 Callback 中執行以下動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// trigger \"Change\" event 通知View去做更新</span>\n      PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接著，如果你是搭配 React 當作你的 View 的話，可能會在 <code class=\"language-text\">componentDidMount</code> 時，binding 一個 Store listener</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">PhotoStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>photoChange <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>在 listener 中重新 fetch store 資料，並且 setState 來 re-render Component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">photoChange</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> newPhotoData <span class=\"token operator\">=</span> PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      photos<span class=\"token operator\">:</span> newPhotoData\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你的 Component 的 render function 大概會像這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> photosComponet <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">photo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'photo'</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photo<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photosComponet<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看完簡單的 Flux 介紹後，讓我們再複習一次 Flux 的流程圖</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<p>相信在業界打滾多年的 Developer 們應該早有疑惑了，Flux 的那張圖，跟最原始的 MVC 圖不是很像嗎？！</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png\" alt=\"MVC definition in wikipedia\" title=\"MVC definition in wikipedia\"></p>\n<p>User 操作 View 所產生的任何 event，都會經由 Controller 來修改與更動相關的 Model，而 Model 再告知 View 是否需要做更動，聽起來也是蠻 <code class=\"language-text\">one-way direction</code> 的呀。</p>\n<p>事實上，MVC 跟 Flux 都只是一個概念，因此有各種不同的實作，加上 MVC 在<code class=\"language-text\">資料流</code>的處理上，並不像 Flux 一般有較為明確的定義，多數時候 Model 的更動與 View 的刷新可能會透過 Controller 來管理，讓 Model 單純存放 data。</p>\n<p>如此一來，假若今天 View 的操作更動了 Model，而 Model 的變化又刷新了 View，在系統龐大的時候，一來一往，就會讓你的資料與頁面狀態變得非常複雜，要追蹤某個頁面的變動到底是誰觸發的，或是哪個資料改變了，你必須從 Controller 去慢慢 trace。而若是遵照 Flux 的流程，任何 View 的 update 都只要去追蹤其 State 的來源 Store 即可，有一個明確的 flow 可以遵循，並且每個 View 所需要監聽的資料來源，可以依照 Store 來區分，這之間的資料流不會互相干擾。\n另外一個 Flux 的好處是，能夠更輕鬆的做出更 Unit 的 Unit test。這是你在複雜的 Controller 中難以達成的。</p>\n<p>當然，你可能會想：“這是你 MVC 用得不好“。 </p>\n<p>我覺得這樣講也沒什麼不對，如果你 MVC 用得很熟很順手，的確單單是 Flux 這個東西對你的誘因可能不高，但當一間明星公司大力 Promote，對於基本概念的定義又夠清楚單純時，還是值得你試試。更別說 Flux 搭配上 React 的宣告式寫法，用起來更是如魚得水。</p>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<p>Flux 做的是：</p>\n<ol>\n<li>改善<code class=\"language-text\">資料狀態</code>與<code class=\"language-text\">視圖狀態</code>的 Data Flow</li>\n<li>讓頁面的狀態 <code class=\"language-text\">Predictable</code></li>\n<li>資料流不會互相污染</li>\n<li>讓你的測試更加容易</li>\n</ol>\n<p>而 MVC 在關注點分離上的貢獻不可小覷，重視在將資料(Model)、視圖(View)、邏輯(Controller)拆開，各自負責各自的工作。</p>\n<p>因此並非是 MVC 不好、不對，所以我們應該採用 Flux；Flux 是在 MVC 建立的基礎下，定義出一個清楚的 <code class=\"language-text\">one-way direction</code> 資料流，並且透過 <code class=\"language-text\">Action</code>、<code class=\"language-text\">Dispatcher</code>與 <code class=\"language-text\">Store</code> 來幫助整個概念的實現。</p>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h3>\n<p>如同前面所提，Flux 的實作有很多種，這邊介紹的只是最基本的流程，很多 Framework 在設計自己的 Dispatcher, Action 與 Store 時，會有不同的方式，或許可以從這邊的比較下去看看</p>\n<ul>\n<li><a href=\"https://github.com/voronianski/flux-comparison\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Comparison</a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Awesome React</a></li>\n</ul>\n<p>參考資料</p>\n<ul>\n<li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux for stupid people</a></li>\n<li><a href=\"http://www.infoq.com/news/2014/05/facebook-mvc-flux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook: MVC Does Not Scale, Use Flux Instead</a></li>\n</ul>","id":"80f48bd4-139f-5ec5-bdbf-8c2000d8c7c8","fields":{"slug":"flux-vs-mvc"},"frontmatter":{"date":"2016-04-27T22:25:24.000Z","title":"從 Flux 與 MVC 的曖昧關係來介紹 Flux","tags":["flux","mvc","javascript"],"type":"tech","slug":"flux-vs-mvc"},"timeToRead":6},"type":"tech"}},"staticQueryHashes":["2123680655"]}