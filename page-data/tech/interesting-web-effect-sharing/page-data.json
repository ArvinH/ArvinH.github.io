{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/interesting-web-effect-sharing","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/YRMg3smsZTo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">飛在風中的小雨</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/YRMg3smsZTo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>很多人可能會認為前端工程師對於美感都有一定的水準，甚至應該要會一點點設計，但現實中應該有很大一部分的前端工程師跟我一樣，其實負責處理狀態管理居多，對設計沒有太多的著墨。</p>\n<p>雖然現實是如此，我個人還是非常喜歡欣賞網路上大神們透過 CSS、Web API 所創作的東西，今天就來分享幾個我這陣子看到覺得蠻有趣的 WEB 特效與技巧！</p>\n<h2 id=\"motion-blur\" style=\"position:relative;\"><a href=\"#motion-blur\" aria-label=\"motion blur permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motion blur</h2>\n<p><img src=\"/image/motionblur-demo.gif\" alt=\"demo\"></p>\n<p>忘了是從哪裡看到這個網站 - <a href=\"https://pie6k.github.io/motionblur/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Motion Blur Scrolling Demo</a>，驚為天人，雖然看了其實眼睛會不太舒服，但特效實在太酷，無法大聲斥責。</p>\n<p>作者的程式碼公開在此：<a href=\"https://github.com/pie6k/motionblur\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">motionblur</a>，我把一些看來是作者嘗試做的優化拿掉，擷取重點來解釋，大家也可以到 CodeSandbox 查看程式碼與把玩 Demo</p>\n<p><a href=\"https://codesandbox.io/s/motion-blur-test-yreqf?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit motion-blur-test\"></a></p>\n<blockquote>\n<p>不過要注意一點，這個特效只有在電腦版的 Chrome 與 Edge 上表現最好，firefox 還 ok，Safari 則是完全崩潰，電腦或手機都無法呈現效果。</p>\n</blockquote>\n<h3 id=\"原理解析\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\" aria-label=\"原理解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原理解析</h3>\n<p>從名稱應該就能看出端倪，既然是 motion \"blur\"，自然會想到 CSS 的 <code class=\"language-text\">filter:blur()</code> 屬性，<code class=\"language-text\">blur()</code> 接受單一數值，例如：<code class=\"language-text\">5px</code>，不能是百分比，數值越大越模糊：</p>\n<p><img src=\"/image/css-blur-sample.png\" alt=\"css-blur-sample\"></p>\n<p>image source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter#svg_filter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN - filter</a></p>\n<p>模糊是有了，但 <code class=\"language-text\">blur</code> 的模糊感覺跟範例中的 motion blur 好像有點差距，要讓畫面在上下捲動時，有<em>拉長模糊</em>的感覺才對，這種整片均勻模糊的樣子似乎不太對呀？</p>\n<p>要解開這個謎題，得先提到一個可能較少為人知的知識：像 <code class=\"language-text\">blur</code> 這種 <code class=\"language-text\">filter-function</code> 的屬性大多都有對應的 <code class=\"language-text\">svg-filter</code>，透過 <code class=\"language-text\">svg-filter</code> 你就能更細緻的調整參數。使用方式則為在你想要套用 filter 效果的 DOM 元件上，用 <code class=\"language-text\">filter: url()</code> 來指定 svg 的 id，e.g.：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token attr-name\">#9isnV\");\"</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>以 <code class=\"language-text\">blur(5px)</code> 來說，其內部是用高斯函數的標準偏差值（stdDeviation）來決定畫面上多少 pixels 會互相交錯融合，對應的 svg 為：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -99999px</span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>svgBlur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-5%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-5%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>110%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>110%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>調整 <code class=\"language-text\">stdDeviation</code> 就能有比起單純用 <code class=\"language-text\">blur(5px)</code> 更豐富的效果，而根據 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stdDeviation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 資料，<code class=\"language-text\">stdDeviation</code> 的 type 是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Content_type#number-optional-number\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">&lt;number-optional-number></code></a>，也就是其實他能有第二個參數，當提供兩個參數時，一個會代表 x 軸的標準偏差值，一個則是 y 軸的。</p>\n<p>所以謎題就揭曉了，要做出上下拉長的模糊化，我們可以調整 <code class=\"language-text\">stdDeviation</code> 的 y 軸值，這也是整個特效的重點。</p>\n<p>如果把 y 值設大，例如 20，畫面就會變成這樣:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0,20<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><img src=\"/image/y-deviation.png\" alt=\"y-deviation\"></p>\n<p>因此，要做出 motion blur，就是在 scroll 的時候調整 y 值。</p>\n<p>把調整 y 值的函式綁定到 <code class=\"language-text\">scroll</code> event 的 listener，並根據捲軸捲動的位置變化差距來決定 y 軸值的大小，就能造就出範例中那種動越快越模糊的 motion blur 效果（scroll event listner 的實作不難，可以到 <a href=\"https://codesandbox.io/s/motion-blur-test-yreqf?from-embed=&#x26;file=/src/scrollSpeed.ts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a> 查看）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 核心程式碼</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initializeBodyScrollMotionBlur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 動態創建 svg filter DOM 元素，將其存到 bodyBlur 物件</span>\n  <span class=\"token keyword\">const</span> bodyBlur <span class=\"token operator\">=</span> <span class=\"token function\">createBlurSvg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 將 svg filter 綁定到 body 上</span>\n  bodyBlur<span class=\"token punctuation\">.</span><span class=\"token function\">applyTo</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">initializeScrollSpeedWatcher</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">speed</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 註冊 scroll event listener，計算捲軸滾動速度，在滑動時更改 filter DOM stdDeviation attribute。</span>\n    <span class=\"token comment\">// 因為我們只需要改 y 軸的值，所以 x 固定為 0</span>\n    bodyBlur<span class=\"token punctuation\">.</span><span class=\"token function\">setBlur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">.</span>y <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe src=\"https://codesandbox.io/embed/motion-blur-test-yreqf?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"motion-blur-test\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>雖然不太實用，但理解原理後還是會覺得這真的是個有趣又不太難的效果！</p>\n<h2 id=\"css-3d-rolling\" style=\"position:relative;\"><a href=\"#css-3d-rolling\" aria-label=\"css 3d rolling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 3D rolling</h2>\n<p>第二個想分享的在我平常訂閱的週刊 - <a href=\"https://frontend.horse/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frontend Horse</a> 看到的範例，<a href=\"https://unitedsodas.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">united sodas</a> 的網站：</p>\n<p><img src=\"/image/3d-rolling-can.gif\" alt=\"3d-rolling-can\"></p>\n<p>透過 GIF 可能看起來不是很清楚，但<a href=\"https://unitedsodas.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實際在網站上</a>的效果很不錯，真的有罐子旋轉的感覺。</p>\n<h3 id=\"原理解析-1\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-1\" aria-label=\"原理解析 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原理解析</h3>\n<p>要讓 DOM object 呈現 3D 有不少做法，利用 CSS 的 3D transforms、perspective 搭配 translate、rotate 就可以，然而週刊的作者提出的作法我覺得更為簡單且有趣，與其真的去旋轉物件，不如利用人眼錯覺，固定住 3D 模樣的罐子，只讓上方的 label 文字滾動。</p>\n<p>具體做法如下：</p>\n<p>找一個包含陰影的透明罐子圖案（如下圖）：</p>\n<p><img src=\"/image/3d-can-transparent.png\" alt=\"3d-can-transparent\"></p>\n<p>以及罐子的 Label 包裝圖片：</p>\n<p><img src=\"/image/3d-can-label.png\" alt=\"3d-can-label\"></p>\n<p>將 Label 圖片疊加在罐子上，利用 JS 讓滾輪滾動時，將圖片從罐子右邊移至左邊。</p>\n<p>重點在於最後要利用 <code class=\"language-text\">clip-path</code> 來製造出一個 svg mask，把圖片修整成貼合罐子的樣子，就可以完成這個滑順的轉動動畫！</p>\n<p>週刊作者有提供一個 <a href=\"https://codepen.io/a-trost/pen/afdb27fb762a02cd1c68cd705721c75f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen 連結</a>，可以試著把 <code class=\"language-text\">Clip Path On</code> 的 checkbox 開啟關閉，應該能清楚了解整體概念：</p>\n<iframe src=\"https://codesandbox.io/embed/3d-rolling-can-sample-bdo6l?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"3D rolling can - sample\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<h2 id=\"animation-based-on-the-time-uniform-value\" style=\"position:relative;\"><a href=\"#animation-based-on-the-time-uniform-value\" aria-label=\"animation based on the time uniform value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animation based on the time uniform value</h2>\n<p>本週最後一個要分享的是從 <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 的作者 <a href=\"https://yuanchuan.dev/time-uniform-for-css-animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> 上看到的小技巧，這是作者發現在電腦視覺的 Shader 中，經常利用 <a href=\"https://thebookofshaders.com/03/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Time Uniforms</a> 的方式去控制動畫，這跟一般 CSS @keyframes 透過指定各時間點的屬性變化，利用 interpolation 來形成動畫的方式是不同的思考方式。</p>\n<p>然而在 Web 世界中，其實能利用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Houdini\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini</a> 的 <a href=\"https://developer.mozilla.org/en-us/docs/Web/CSS/@property\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@property API</a> 與 CSS <code class=\"language-text\">@Keyframes</code>，製作出一個能隨著時間變化其值的 custom property，如此一來就能達成類似 time uniforms 的方法，統一依照時間來控制所有 DOM 物件的動畫：</p>\n<p>首先利用 <code class=\"language-text\">@property</code> API 客製化屬性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@property</span> --t</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">syntax</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;number>\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">initial-value</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">inherits</span><span class=\"token punctuation\">:</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過 <code class=\"language-text\">@keyfames</code> 來 anitmate 客制屬性，這邊時間用 <code class=\"language-text\">31536000000</code> 是因為作者想營造無限時間的動畫，用一年為區間算是個很足夠長的模擬方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> animate-time</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">--t</span><span class=\"token punctuation\">:</span> 0 <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span>   <span class=\"token punctuation\">{</span> <span class=\"token property\">--t</span><span class=\"token punctuation\">:</span> 31536000000 <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最後將 keyframes 動畫放到 <code class=\"language-text\">:root</code> 中，這樣所有的 css class 所吃到的 <code class=\"language-text\">--t</code> 就會是不斷隨著時間而更動的值，此外， anmiation 的 druation 同樣設為一年，時間才會同步：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> animate-time 31536000000ms linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最後在任意的 element 上頭，只要利用變動的 <code class=\"language-text\">--t</code> 就能在不另外指定 keyframes 的狀況下一樣產生動畫：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--t<span class=\"token punctuation\">)</span> / 1000 / 10 * 1turn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>同樣的 <code class=\"language-text\">--t</code> 值，同時套用在其他元素動畫上時，就能營造出利用 time uniforms 來製造動畫的效果。</p>\n<p>附上作者的 codepen 範例：</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"yuanchuan\" data-slug-hash=\"JjbjOPg\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Demo #1 for article (Chrome only)\">\n  <span>See the Pen <a href=\"https://codepen.io/yuanchuan/pen/JjbjOPg\">\n  Demo #1 for article (Chrome only)</a> by yuanchuan (<a href=\"https://codepen.io/yuanchuan\">@yuanchuan</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>今天分享了三個我這週發現的有趣特效與小技巧，雖然沒有自己真正實作，但觀摩別人的創意與程式碼也能學習到非常多，除了當工作上需要使用到類似效果時，會有印象可以怎麼做之外，或許也能讓你舉一反三，融合這些技巧，製作出別出心裁的特效也說不定呢！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/filter#svg_filter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN filter</a></li>\n<li><a href=\"https://pie6k.github.io/motionblur/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Motion Blur Scrolling Demo</a></li>\n<li><a href=\"https://yuanchuan.dev/time-uniform-for-css-animation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Time Uniform For CSS Animation</a></li>\n<li><a href=\"https://thebookofshaders.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The book of shaders</a></li>\n</ol>","fields":{"slug":"interesting-web-effect-sharing"},"frontmatter":{"title":"有趣的 WEB 特效與技巧分享","date":"01-29-2021","tags":["css","animation"]},"timeToRead":7}},"pageContext":{"slug":"interesting-web-effect-sharing","prev":{"excerpt":"慢走不送 2020，讓我們在 2021 一起 LOST IN PARADISE! ALI – LOST IN PARADISE feat. AKLO","html":"<blockquote>\n<p>慢走不送 2020，讓我們在 2021 一起 LOST IN PARADISE! <a href=\"https://youtu.be/KnakQRoQRzk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ALI – LOST IN PARADISE feat. AKLO</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/KnakQRoQRzk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>年末年始很適合來回顧過去展望未來，2020 對我們這代人來說絕對是難以忘記的一年，面對 2021，希望我們繼續保有對生活的熱情，享受生命的每一刻美好。</p>\n<p>2021 的第一篇文章不談生硬的技術、不寫長篇的教學文，我想分享一下在 2020 的最後一個 quarter 中，公司團隊所嘗試的 self-improvement 計畫，討論它為我們帶來的好處與是否適合大家嘗試導入。</p>\n<h2 id=\"何謂-self-improvement-計畫又為何重要\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-self-improvement-%E8%A8%88%E7%95%AB%E5%8F%88%E7%82%BA%E4%BD%95%E9%87%8D%E8%A6%81\" aria-label=\"何謂 self improvement 計畫又為何重要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 self improvement 計畫？又為何重要？</h2>\n<p>這個計畫實際上是由我們團隊新進主管所提出的，他認為，除了完成工作上交付的任務外，持續去精進專業能力是我們工程師的一種生活方式，這點相信毋庸置疑，大家都在推廣要撰寫部落格、參與開源專案、製作 side project 等等，這都是為了精進我們的專業能力。</p>\n<p>然而，生活不是只有這個面向，工程師也需要照顧家人、培養各種嗜好\b，以及享受其他生活美好；或更簡單點，維持你的 mental health。</p>\n<p>若要在下班後的時間，同時完成這所有的事情，著實是相當困難。</p>\n<p>因此他提出的 self improvement 計畫就是希望能建立一個框架，讓這一切從理想狀態變成現實。</p>\n<p>相信大家都聽過 Google 著名的 20% time，也就是能利用上班時間的 20% 來做自己想嘗試的專案，無論是否直接跟工作有關聯。</p>\n<p>所謂的 self improvement 計畫就是類似的概念，利用每個 sprint 的 20% 時間來增進自我，差別在於執行的專案必須要能夠幫助到你在工作上的成長。</p>\n<p>以一個 sprint 兩個星期來說，總共十個工作天，20% 的時間等同於每個 sprint 必須騰出兩天的時間給團隊成員執行自我精進計畫。</p>\n<p>沒錯，這等同於在要求公司對員工進行投資，但其實你仔細想想是非常合理的，畢竟當你精進了專業能力，公司當然也會受惠，更別提在過程中你的產出可能就已經直接對公司帶來正面影響，像是你可能在過程中幫忙製作了增進大家效率的開發工具等等。</p>\n<p>不過說是這樣說，一切還是很理想化，因此在真正執行這個計畫前，團隊內部是進行不少討論的，尤其是需要說服 PM 們認同這項計畫的好處，因為這是有可能會影響到公司專案的時程。</p>\n<h2 id=\"實際運作方法\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E9%81%8B%E4%BD%9C%E6%96%B9%E6%B3%95\" aria-label=\"實際運作方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際運作方法</h2>\n<p>Self improvement 計畫可以歸納為三個步驟：</p>\n<ul>\n<li>The what: 選擇你要做的專案</li>\n<li>The how: 執行</li>\n<li>The outcome: 分享結果</li>\n</ul>\n<p>剛剛提到，我們的 self improvement 計畫與 Google 的 20% 不同的點在於我們有限制能做的專案範圍，但實際上我們的規範還是非常寬鬆的，主要分成三類：</p>\n<ol>\n<li>Improve internal projects and tools</li>\n<li>Evaluates a new technology or framework</li>\n<li>Language Improvement</li>\n</ol>\n<p>你可以選擇利用平常想玩但工作上用不到的技術來實作一些增進開發效率的工具，像是我們有成員利用這時間製作了集合我們日常開發所需工具的 CLI tool，平常需要許多步驟才能設置好的環境，現在只要透過 CLI 下個指令就通通搞定，甚至有 web UI 介面可以操作；又或者你可以學習一門新的語言，截長補短，將好的概念應用到日常工作中，舉例來說，有成員學習了 Rust 與 webassembly，將 Rust 語言在 error handling 的一些概念引進我們 Typescript 的專案（雖然這樣的作法好壞見仁見智，但就我個人看來，這種火花對團隊是非常好的）。\n此外，畢竟公司是跨國團隊，語言溝通還是很重要的一個環節，利用這時間來增進你的英文或其他語言的水平，對個人與公司都是有極大的好處。</p>\n<p>除了上述這些偏向個人取向的例子外，也可以是組成一個小團隊來執行 self improvement 專案，像是前後端工程師互相舉辦 workshop，讓前端學習後端，後端了解前端；或是組織系統設計的讀書會，一起思考設計產品系統等等。</p>\n<p>上述是三步驟中的第一步驟，也就是你要利用 self improvement time 做什麼。基本上只要能規範在我們定義的三大分類中，你做什麼都是可以的。</p>\n<p>再來是執行面，我們訂定 two-week sprint 中的最後兩天作為 self improvement time，在每次的 sprint planning 與 backlog refinement meeting 時，必須考量到實際工作天數只有八天，依此來權衡各項 task 的優先順序，並依照先前的 sprint velocity 調整放進sprint 的點數。</p>\n<p>而最後那兩天其實也並非整整 16 小時都是 self improvement time，我們把 sprint review, demo 與 retrospective meeting 分插到這兩天內。會想將這些 ceremonies 與 self improvement time 放在一起是有原因的，首先，每次開完 sprint review/demo 與 retrospective 後，工作效率通常不會太好，畢竟是一個 sprint 的結束，將 self improvement time 安排在同一時間內，不僅能提升大家士氣，也比較好用來說服 PM 們；另外，雖然 review、demo 與 retrospective 算是 scrum ceremonies 內比較輕鬆的部分，但就我們團隊內部觀察下來，我們也是會花費不少時間在分析檢討，將他們拆分成不同時段的會議，也有助於大家更能集中精神、更有效率。</p>\n<p>最後一個步驟是 outcome，我們利用公司資源，把時間花在進行 self improvement 上，總是要做出點什麼成果才說得過去，對吧？</p>\n<p>這樣的想法是很自然的，但執行起來有很多面向要考慮，首先，要確保成員信任這個機制並不會影響到你的績效考核，否則所謂的 20% time 就不是 80% + 20%，而是 100% + 20%，額外增加了更多的壓力在成員身上，這就本末倒置了。</p>\n<p>再來就是不該限制形式，我們鼓勵大家舉辦 sharing、workshop、open source 或甚至是參加 conference 的方式去展現你的成果，但沒有任何硬性規定。</p>\n<p>每個月，我們會舉辦一次內部的簡單分享會，讓大家自由得談論各自在 self improvement time 中做了哪些事情，還有哪些想做、有沒有需要找人一起幫忙的等等。在分享會上，我們不批判你的進度與成就多寡，我們專注在這過程中，你『有沒有獲得』些什麼。</p>\n<p>在一個大家都有同樣共識，且優質的團隊內，你會發現這樣看似過於自由奔放的機制，反而能驅動大家去做出很棒的東西，以我們團隊的例子來說，有人因為這多出來的時間，有機會在公司內部工程部落格中發表研究成果，也有人撰寫了一整套 CI 自動化測試的工具，能夠推廣給公司內其他團隊使用，並寫出完整的說明文件。</p>\n<p>你或許會說這些人就算沒有 self improvement time 也會做這些事，但重點就是，讓他們在工作的時間內完成，對成員本身來說的感覺就很好，更別提能讓他們有更多的時間去接觸專業外的事物，接收不同的刺激，理論上能更加反饋到專業能力上頭。</p>\n<h2 id=\"執行結果與過程中的阻礙\" style=\"position:relative;\"><a href=\"#%E5%9F%B7%E8%A1%8C%E7%B5%90%E6%9E%9C%E8%88%87%E9%81%8E%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%98%BB%E7%A4%99\" aria-label=\"執行結果與過程中的阻礙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>執行結果與過程中的阻礙</h2>\n<p>說得這麼美好，實際的執行過程中，也是有一些阻礙，否則就也不會有網路上一堆關於 Google 20% time 神話破滅的討論了（<a href=\"https://channels.theinnovationenterprise.com/articles/the-myth-of-google-s-20-time\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Myth Of Google's 20% Time. It is one of the most enduring innovation ideas, but it may not be all that it seems</a>, <a href=\"https://www.businessinsider.com/google-20-percent-time-policy-2015-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The truth about Google's famous '20% time' policy</a>, <a href=\"https://buzzorange.com/techorange/2018/09/18/is-googles-20-any-real/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google 創新「80/20」法則名存實亡？員工時間分配技巧是創新最大考驗</a> ），就連待過谷歌的前雅虎 CEO Malissa Mayer 都說那其實是 120% time 了。</p>\n<p>在試驗的一個季度內，我們總共執行了兩次 monthly sharing，每一次都會收集一些 feedback 來做調整，大致上觀察到的阻礙有以下幾點：</p>\n<ul>\n<li>真的不知道要做什麼。不是每個工程師都有想要做的 side project。</li>\n<li>難以在平常的工作時間切換思緒，去做增進自我的專案。</li>\n<li>self improvement 計畫只有在我們團隊內部執行，許多跟其他團隊有相依性的事務很難真的在那兩天內排開，加上後端團隊都有 on call schedule。</li>\n</ul>\n<p>這幾點是比較難解決的必然問題，對於不知道要做些什麼的成員，我們會由其他成員來帶動，邀請他們加入其他已經在進行的專案；覺得無法適應如此切換工作狀態的成員，我們也不勉強，先以安排工作上一些比較沒時間處理的 refactor 或 tech debt 給對方，讓他們慢慢適應；而至於與其他團隊的合作上，我們也會告知他們我們的 scrum 時程，在不影響公司主體專案進行下，調整 schedule，並在必要時給予 support，但還是以不打擾成員兩天的 self improvement time 為基本準則。</p>\n<p>上述問題用這樣的處理方式到目前為止算是還算穩當，但畢竟才執行一個季度，後續還需要繼續觀察調整。</p>\n<p>對於我個人來說，困難的部分在於要捨得在那兩天確切的放下工作上的項目。即便在 sprint planning 時已經把時間也考慮進去了，但在實作 tasks 的過程，不免會有一些突發狀況，或是靈光一閃想要多做些什麼東西，這時候在那兩天內我還是會偶而會忍不住偷做一下工作的內容，但由於 self improvement 計畫並沒有規定要有多少產出，也不在績效內，所以並不至於到變成 120% time。</p>\n<p>另外還有一點值得一提。</p>\n<p>在前面我說過，我們為了不增加大家的負擔，盡量不限縮成果分享的形式與內容多寡，但我們是很明確的跟大家說明『一定要空出兩天作為 self improvement 計畫』，算是強制性要求大家參與，若是連參與本身都不強制，那整個計畫很容易就流於形式，到最後就不知不覺得消失了。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>就如同前面提供的許多關於 Google 20% time 機制的討論，這件事情執行起來很容易不小心就走歪，絕對不是適合每間公司每個團隊都採取這樣的做法，但至少是值得大家拿出來討論看看，是否能對你的團隊造成正面影響。我也不會覺得我們團隊能夠依照現在的步調走到多遠，但不斷的試驗與調整不就是工程師最擅長的嗎？大家又是怎麼看待這件事情呢？歡迎大家一起提出觀點討論！</p>","id":"1b64368d-c853-5ea4-af52-41ff802212e9","fields":{"slug":"the-self-improvement-program-20-percent-time"},"frontmatter":{"date":"2021-01-02T00:00:00.000Z","title":"20% self-improvement program 實際案例分享","tags":["self improvement","20% time"],"type":"tech","slug":"the-self-improvement-program-20percent-time"},"timeToRead":8},"next":{"excerpt":"好歌分享：YOASOBI - 向夜晚奔去 / THE HOME TAKE","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/j1hft9Wjq9U\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YOASOBI - 向夜晚奔去 / THE HOME TAKE</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/j1hft9Wjq9U\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前端狀態管理方式百百種，但大致上可以分為兩類：</p>\n<p>一種是與 UI view library 綁在一起的，以 React 為例，React state、Context API 與去年剛推出的實驗性套件 Recoil 就屬於這種，主要將狀態資料存在 React tree 中。</p>\n<p>另一種則是 view-layer agnostic library，資料存在外部 store，讓你可以套用在任何 UI framework 或 view library，如最常見的 Redux、Mobx 等。</p>\n<p>再往下細分可以用 Mental modal 分為：Flux、Proxy 與 Atomic 等三種狀態管理邏輯，其中 Flux（Redux）與 Proxy（Mobx）算是出來比較久的，而 Atomic 則是隨著 Recoil 的推出而興起，今天就是想來了解一下 Atomic 的概念是什麼，建構在其上的套件用起來是如何。</p>\n<p>但是，今天我想介紹的不是 Recoil，而是一個與 Recoil 採用同樣概念，但 API 與整體 bundle size 小非常多的 Jōtai。</p>\n<blockquote>\n<p>minified + gzipped 後的大小，Jōtai: 3.3kb vs Recoil: 14kb</p>\n</blockquote>\n<p>這也是我想從 jotai 切入的原因，因為簡單的 API 與輕量的 bundle size 通常也代表他的原始碼會比較簡短好 trace（但不代表實作上比較簡單），用起來負擔也很輕。</p>\n<p>Jōtai 是日文的 “狀態” 的意思，最開始是由一個產量極高的日本工程師 - <a href=\"https://github.com/dai-shi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Daishi Kato</a> 所開發，在其<a href=\"https://blog.axlight.com/posts/developing-react-global-state-library-with-atom-abstraction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">部落格</a>上有介紹初始動機與一開始的 prototype - <a href=\"https://github.com/dai-shi/use-atom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use-atom</a>。</p>\n<p>現在 <a href=\"https://github.com/pmndrs/jotai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jotai</a> 則是移至 <a href=\"https://pmnd.rs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@pmndrs</a> 去維護，其底下還有像是 <a href=\"https://github.com/pmndrs/zustand\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zustand</a>、<a href=\"https://github.com/pmndrs/valtio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">valtio</a> 這類簡化 Redux 與 Mobx 的 state management tool，以及更廣為人知的 <a href=\"https://github.com/pmndrs/react-spring\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-spring</a> 和 <a href=\"https://github.com/pmndrs/react-three-fiber\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-three-fiber</a>。</p>\n<h2 id=\"atomic\" style=\"position:relative;\"><a href=\"#atomic\" aria-label=\"atomic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atomic</h2>\n<p>進入 Jotai 的介紹前，先簡介一下 Atomic 是什麼。</p>\n<p>Recoil 中定義 atom 是你 application 中的一小塊狀態，感覺像是把原本 redux state tree 中的狀態都切割成可以獨立創建（可以 on-demand create，不一定要在何時創建）、更新、讀取的個別 state，有助於 code splitting。</p>\n<p>每一個 atom 除了 primitive state 外，也能非同步處理 derived state（根據別的 state 進行運算、呼叫 API 等 side effect），加上 atom 是存在 React tree 中，能很簡單得搭配 <code class=\"language-text\">&lt;Suspense></code> 與 <code class=\"language-text\">&lt;ErrorBoundary></code> 來處理 side effect 狀態。</p>\n<p>這些個別的 atom 可以隨時被不同 component 給取用與更新，只有與該 atom 有關聯的 component 會在 atom 更新時觸發 re-render，因此相比單純使用 React Context 來說，用在頻繁更新的 application 上也沒問題。</p>\n<p>但值得一提的是，Recoil 與 Jotai 底層都還是用了 React Context，只是都用了<code class=\"language-text\">useMutableSource</code> 與 <code class=\"language-text\">useRef</code> 來 bail out rerendering。</p>\n<p>P.S. jotai 原本使用同為 dai-shi 開發的 <code class=\"language-text\">use-context-selector</code>，但就在一週前左右，改為使用與 Recoil 相同的 <code class=\"language-text\">useMutableSource</code> solution，猜測是為了能更好的 support concurrent mode 底下的各種使用情境。細節可參考<a href=\"https://github.com/pmndrs/jotai/pull/308\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這隻 PR</a>。</p>\n<p>P.S.S 針對 <code class=\"language-text\">use-context-selector</code>，可以參考先前文章 - <a href=\"https://blog.techbridge.cc/2020/09/13/use-context-selector-src-analysis/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Context API 效能問題 - use-context-selector 解析</a> 了解其實作（文章內容是 v1 的實作，目前已經有 v2 版本）</p>\n<h2 id=\"recoil-vs-jōtai\" style=\"position:relative;\"><a href=\"#recoil-vs-j%C5%8Dtai\" aria-label=\"recoil vs jōtai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recoil vs Jōtai</h2>\n<p>Jotai 的<a href=\"https://github.com/pmndrs/jotai/blob/master/docs/introduction/comparison.md#how-is-jotai-different-from-recoil\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方說明</a>與<a href=\"https://blog.logrocket.com/jotai-vs-recoil-what-are-the-differences/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>詳細比較了 Recoil 與 Jotai 的差異，推薦有興趣的讀者去閱讀。</p>\n<p>官網從幾個面向來分析差異，並說明了兩者的使用時機，我這邊翻譯總結一下：</p>\n<ul>\n<li>\n<p>開發資源</p>\n<p>Jotai 是由 Poimandres 的幾位開發者共同維護，而 Recoil 除了社群外還有 Facebook 的支援。</p>\n</li>\n<li>\n<p>功能差異</p>\n<p>Jotai 著重在易學且簡潔的 primitive API，目標是 unopinionated 的 library，功能上不比 Recoil 能支援得多；Recoil 應該是希望能支援多種需求，並應用在大型且有複雜交互作用的應用程式上。</p>\n</li>\n<li>\n<p>使用技術上的主要差異</p>\n<p>Jotai 的 atom object 沒有 key，用的是 object referential identities，而 Recoil 的 atom 則有 string keys，除了在判斷 atom 更新上會有所不同外，debug 時，Jotai 也需要額外設置 debugLabel，Recoil 則可以直接利用 atom key 來輔助。</p>\n<p>依靠 object referential identities 的另一個<strong>潛在問題</strong>是，當你用 React Fast Refresh 時，頁面上舊的狀態不能被保留住，<strong>因為 refresh 後的 atoms 都會是新的 object</strong>。這點在 Recoil 就沒問題，因為他們可以用 string key 來辨別。</p>\n</li>\n<li>\n<p>使用時機</p>\n<ol>\n<li>如果你只是想替換掉 React Context，避免因頻繁更新造成的效能問題，Jotai 可能是個好選擇，能提供足夠的功能與輕量的 bundle size 和 API。</li>\n<li>如果你的應用程式需要 serialize state，例如從 localStorage 或 server，Recoil 可能有比較多的 utils 可用。</li>\n<li>如果你想在 Jotai 或 Recoil 的基礎上再去開發新的 library，Jotai 的 primitive API 可能比較適合你使用。</li>\n</ol>\n<p>如果上述三點都不是你的 deal-breaker，那選哪個都可以，Jotai 跟 Recoil 在概念與目的上基本是一樣的。</p>\n</li>\n</ul>\n<p>接下來會主要介紹 Jotai 的核心用法。</p>\n<h2 id=\"jōtai\" style=\"position:relative;\"><a href=\"#j%C5%8Dtai\" aria-label=\"jōtai permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jōtai</h2>\n<p>不過還是先看個最簡單的例子比較有感覺：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useAtom<span class=\"token punctuation\">,</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jotai'</span>\n\n<span class=\"token keyword\">const</span> countAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>countAtom<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>one up<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Root</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Counter <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>最簡單的用法就跟 <code class=\"language-text\">React.useState</code> 一樣，差別只在於我們需要先用 <code class=\"language-text\">atom()</code> 來創建一個 atom 傳入 <code class=\"language-text\">useAtom</code> 使用，接下來 <code class=\"language-text\">useAtom</code> 一樣會回傳一個 tuple，包含目前的值與一個 updating function。</p>\n<p>這個例子就展示完了 Jotai 的三個核心函式（<code class=\"language-text\">jotai/core</code>）：</p>\n<h3 id=\"atom\" style=\"position:relative;\"><a href=\"#atom\" aria-label=\"atom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>atom</h3>\n<p>atom 函數用來創建 atom，接受至多兩個參數，當只有第一個參數，且該參數為非函數時，atom() 回傳的是 primitive atom；若是傳入 function，則回傳 derived atom。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> primitiveAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> derivedAtomWithRead <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>readFunction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> derivedAtomWithReadWrite <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>readFunction<span class=\"token punctuation\">,</span> writeFunction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> derivedAtomWithWriteOnly <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> writeFunction<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上面範例所示，derived atom 根據傳入的函數分為 writable atom 或 read-only atom：</p>\n<ul>\n<li>\n<p>若只傳入 readFunction：<code class=\"language-text\">(get) => value | Promise&lt;value></code>，則代表為 read-only atom，其中傳入 readFunction 的 <code class=\"language-text\">get</code> 函數可以用來讀取目前存在 application 中的 atom 的值，此外 <code class=\"language-text\">get</code> 會追蹤 dependency，意思是，當讀取的 atom 的值變動時，會觸發這個 <code class=\"language-text\">get</code> 函式，重新計算這個 derived atom 的值。</p>\n<p>舉個例子來說：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uppercaseAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>textAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在這段程式中，uppercaseAtom 是由傳入一個 readFunction 的 atom 函式所創建的 derived atom。該 readFunction 會讀取 textAtom 的值來做運算並回傳，所以 textAtom 是 uppercaseAtom 的 dependency，當 textAtom 變動時，這個 readFunction 會重跑一遍，讓 uppercaseAtom 也連帶更新。</p>\n</li>\n<li>\n<p>若有傳入 writeFunction：<code class=\"language-text\">(get, set, update) => void | Promise&lt;void></code>，就會回傳 writable atom。其中 <code class=\"language-text\">get</code> 與 readFunction 的 <code class=\"language-text\">get</code> 類似，但這個 get 函數不會因為 dependcy 變動而被觸發，比較像是讓你在 update atom 值時，可以拿別的 atom 來操作；<code class=\"language-text\">set</code> 就是用來更新 application 中的 atom 值；<code class=\"language-text\">update</code> 則是當外部透過類似 <code class=\"language-text\">setState</code> 的函式（實際上會是 <code class=\"language-text\">useAtom</code> 回傳的 updating function）試圖更改這個 derived atom 時會傳入的值，例如：<code class=\"language-text\">setState(newValue)</code>，<code class=\"language-text\">update</code> 就會是 newValue。</p>\n<p>P.S. primitive atom 是 writable atom，其 writeFunction 就等同於 <code class=\"language-text\">useState</code> 回傳的 <code class=\"language-text\">setState()</code>。</p>\n</li>\n</ul>\n<h3 id=\"provider\" style=\"position:relative;\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>provider</h3>\n<p>Provider 就是儲存 atom value 的地方，用法跟 React context provider 一樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Root</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>你可以用一個 provider 放在你的 Root component，也可以創好幾個 provider 個別放在不同的 component tree 中，這樣 atom 就會存在各自的 component tree 裡。</p>\n<h3 id=\"useatom\" style=\"position:relative;\"><a href=\"#useatom\" aria-label=\"useatom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useAtom</h3>\n<p>useAtom 就像是 useState 一樣的 hook，用來讀取 Provider 內的 atom 值，並且會回傳 updating function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> updateValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>anAtom<span class=\"token punctuation\">)</span></code></pre></div>\n<p>如同最前面範例說的，需要傳入一個 atom，可以是 primitive atom 也可以是 derived atom，如果是 derived atom，他會先執行 readFunction，計算完值以後再回傳。\n若是第一次使用該 atom，也就是代表 Provider 內還沒有存任何 value 時，這邊傳入的 atom 就會被作為 initial value，存到 Provider 中。</p>\n<p>此外，如同<a href=\"#atom\">前面 atom 的介紹</a>，當傳入的 atom 變更時，無論是 primitive atom 或是 derived atom，這邊也都會連帶更新。</p>\n<p>Jotai 就是透過這種方式在不同的 component 之間共享 state。</p>\n<p>至於 useAtom 回傳的 tuple 中的第二個值，也就是 updating function，會依照傳入 atom 的不同有不同的行為，若是 primitive atom，會使用內建的 updating function，模擬 <code class=\"language-text\">React.setState</code>；若是有傳入自訂 writeFunction 的 writable atom，則會將傳入 updating function 的值傳給 writeFunction 執行。</p>\n<h2 id=\"async-的使用\" style=\"position:relative;\"><a href=\"#async-%E7%9A%84%E4%BD%BF%E7%94%A8\" aria-label=\"async 的使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async 的使用</h2>\n<p>接著我們可以來看看怎麼在 Jotai 中使用 async function，像是拿 API 資料或是觸發 action 等等。</p>\n<p><strong>derived async read-only atom</strong></p>\n<p>在 atom 的 readFunction 中讀取 API 資料：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urlAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://json.host.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fetchUrlAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>urlAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>json<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>fetchUrlAtom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>假如 urlAtom 被更改，readFunction 會重新執行，然後 Status component 的 re-render 會等到 readFunction 執行完，useAtom 取得新值後才進行。</p>\n<p><strong>derived async writable atom</strong></p>\n<p>除了 readFunction，我們也能在 writeFunction 中放入 async function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fetchCountAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>countAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_get<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>countAtom<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Controls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> compute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>fetchCountAtom<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://count.host.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>compute<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一個實際一點的範例：</p>\n<p><a href=\"https://codesandbox.io/s/github/pmndrs/jotai/tree/master/examples/hacker_news?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit hacker_news\"></a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> postId <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token number\">9001</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">get</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://hacker-news.firebaseio.com/v0/item/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> from<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> reset<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>round<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>→<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">PostTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> by<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> time <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postData<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>by<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h6<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleDateString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h6<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>title <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>h4<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h4<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>text <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token function\">Parser</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Id <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>PostTitle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Next <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這個範例中可以看到要如何在不同的 component 間使用定義在 Global 的 atoms，當 <code class=\"language-text\">&lt;Next /></code> 元件的 button 被點選時，觸發了 updating function 來更改 <code class=\"language-text\">postId</code> atom，同時 <code class=\"language-text\">postData</code> 這個 derived atom 因為其 readFunction 中有 get <code class=\"language-text\">postId</code> atom，所以也會被觸發，導致 <code class=\"language-text\">PostTitle</code> 能夠取得新值，並 re-render component。</p>\n<h4 id=\"caveat\" style=\"position:relative;\"><a href=\"#caveat\" aria-label=\"caveat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>caveat</h4>\n<p>在 Jotai 上使用 async function 時要注意一點，就是必須搭配 <code class=\"language-text\">React.Suspense</code>，因為當 async function 還沒回傳值時，React tree 會被 suspense 住。</p>\n<h2 id=\"utils\" style=\"position:relative;\"><a href=\"#utils\" aria-label=\"utils permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utils</h2>\n<p>在上面的範例中，我們的 <code class=\"language-text\">&lt;Next /></code> component 只有用到 useAtom 回傳的 updating function，但是每當 postId 更新時，他也會被觸發 re-render。</p>\n<p>你可以在原本的 code 中加入 <code class=\"language-text\">(rendered: {++useRef(0).current})</code> 來驗證看看</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>→<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">(</span>rendered<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">++</span><span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你會發現每點一次，Next 元件都會被觸發 render，但其實 Next 元件沒有讀取 postId atom 的值，不需要觸發 re-render的。</p>\n<p>這問題可以運用 <code class=\"language-text\">useMemo</code> 把 useAtom 多包一層來解決，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useSetAtom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">anAtom</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> writeOnlyAtom <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">get<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>anAtom<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>anAtom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useAtom</span><span class=\"token punctuation\">(</span>writeOnlyAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這種感覺就很常需要用到的 hooks，Jotai 有另外寫了一系列的 utils function 供大家使用，放在 <code class=\"language-text\">jotai/utils</code> 底下。</p>\n<p>在官方 <a href=\"https://github.com/pmndrs/jotai/blob/master/docs/api/utils.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 中，可以找到有哪些 utils，包含使用方法、範例，甚至連促使該 util 產生的 issue，有需要的時候可以去查詢。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>到這邊就差不多把基本的用法與概念都介紹完了，以 Atomic 為概念的 state management 在使用上相對簡單，jotai 的精簡 API 也讓入門非常容易，雖然維護人員不多，但主要貢獻者的生產力很強大，也很厲害，我認為在小專案上還是非常適合拿來使用！接下來有機會的話，想從 jotai 的原始碼來了解是如何實作 atomic 概念的 state management library！感謝大家收看！</p>","id":"8f497dc0-fe52-5477-a053-bc0994fa4ba8","fields":{"slug":"jotai-intro"},"frontmatter":{"date":"2021-02-27T13:37:30.000Z","title":"Jōtai 介紹","tags":["react","state management","atom"],"type":"tech","slug":"jotai-intro"},"timeToRead":11},"type":"tech"}},"staticQueryHashes":["2123680655"]}