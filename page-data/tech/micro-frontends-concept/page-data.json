{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/micro-frontends-concept","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『所有對於現狀的解脫，最終都只能靠積累來實現。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>大概三個月前，忘了在哪看到 Micro Frontends 這個詞，當時沒有仔細去了解（畢竟聽起來就像是另一個 Buzzword XD），只是從名字大概猜測是想讓前端頁面更加模組化，讓不同團隊能更有效率的開發共同的站。稍微 Google 了一下這個 term，發現文章多數在 2018 的五六月出現，之後就鮮少人提起，我也就淡忘了他。</p>\n<p>直到最近工作上接觸到的框架，似乎也想讓頁面上的元件更加低耦合，甚至是希望能支援運行不同版本或是 tech stack 的元件，才讓我又再想起 Micro Frontends 這個東西，所以查了點資料，這邊做個紀錄分享。</p>\n<h1 id=\"什麼是-micro-frontends\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-micro-frontends\" aria-label=\"什麼是 micro frontends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Micro Frontends</h1>\n<p>大部分查到的文章都有提到，Micro Frontends 最早出現在 <a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2016 年 ThoughtWorks 這間公司公佈的技術雷達</a>中，並在 2018 年五月進入試驗階段，代表他們認為這個架構是有發展淺力的。（查了一下 <a href=\"https://en.wikipedia.org/wiki/ThoughtWorks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a>，ThoughtWorks 是一間蠻大的全球軟體顧問公司，有自己的產品，也會為客戶制定各種前瞻軟體設計）</p>\n<p>要解釋 Micro Frontends，可以先從 Microservices 講起。</p>\n<p>Microservices 在後端的世界裡面已經運行多年，採用 Microservices 的團隊架構通常都是如下圖所繪：</p>\n<p><img src=\"/image/monolithic-fe-micro-be.png\" alt=\"monolithic-fe-micro-be\"></p>\n<p>後端中每個 Microservices 彼此之間獨立作業，各個團隊可以擁有自己的部署與開發技術，溝通可以透過各樣 API 介面來達成，與前端之間也只需要 HTTP request 即可進行各種服務串接。</p>\n<p>在這樣的架構下，Frontend team 的程式碼卻還是都共存在一個 Monolithic 的結構內，當網站功能越趨複雜、團隊成長茁壯後，整個前端架構就會越來越難以維護，更別提前端技術的日新月異，很容易會產生 legacy code，這時若想要更新就麻煩了。</p>\n<p>由於慢慢有人體會到這種問題，Micro Frontends 的想法才被提出：</p>\n<p><img src=\"/image/micro-fe-micro-be.png\" alt=\"micro frontend\"></p>\n<p>從圖中不難發現，Frontend 的模組被拆分至各個 team 中，每個團隊獨立掌管自己的前後端服務，擁有自己的部署環境與 tech stack，團隊間低耦合，團隊中高內聚。\n此外，每個團隊產出的前端模組，要能夠有效的『拼貼』在同一個 SPA 頁面當中，保持使用者在產品的體驗上與原先的 SPA 一致。</p>\n<p>在 <a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">micro-frontends.org</a> 這個網站中說到，這樣的結構就算是 Micro Frontends，而這樣的概念其實更早之前就有，只是有別的名稱，分別叫做 <a href=\"https://dev.otto.de/2014/07/29/scaling-with-microservices-and-vertical-decomposition/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frontend Integration for Verticalised Systems</a> 與 <a href=\"http://scs-architecture.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Self-contained Systems</a>。</p>\n<p>但我自己認為，Micro frontend 應該主要著重在：如何將前端頁面中以功能模組來拆分成不同獨立應用，並黏貼共存在同個 SPA 中。(後面會再提到目前常見的實作方式。)</p>\n<p>而由 Micro Frontends 與 Micro Services 所組成的一個從 UI、商業邏輯、資料處理和系統部署，這樣完整的獨立服務，才算是一個 <a href=\"https://scs-architecture.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SCS - Self contain system</a>。</p>\n<h2 id=\"micro-frontends-的核心思想\" style=\"position:relative;\"><a href=\"#micro-frontends-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\" aria-label=\"micro frontends 的核心思想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro Frontends 的核心思想</h2>\n<ul>\n<li><strong>Be Technology Agnostic</strong>：每個團隊可以使用自己的技術結構來開發前端模組，與其他團隊彼此之間互不干擾，也無須耗費成本相互協調。</li>\n<li><strong>Isolate Team Code</strong>：就算各個團隊採用同樣的技術框架，彼此之間也不該共享變數或狀態。彼此間應該透過 public API 來溝通。</li>\n<li><strong>Establish Team Prefixes</strong>：利用 Prefix 的方式來避免 CSS、Browser API、Web Event、Cookies 或 Local Storage 的衝突。</li>\n<li><strong>Favor Native Browser Features over Custom APIs</strong>：要整合 Micro Frontends 的複雜度其實很高，當每個模組間需要溝通時，盡量採用 Browser Native API 來完成較好；若真的需要額外的溝通方式（pub/sub system），要盡量保持簡單。</li>\n<li><strong>Build a Resilient Site</strong>：透過 SSI 或 PWA 的方式增強網站的穩定性，在 JS 無法執行的狀況下也有堪用的呈現。</li>\n</ul>\n<h1 id=\"micro-frontends-的實作方法\" style=\"position:relative;\"><a href=\"#micro-frontends-%E7%9A%84%E5%AF%A6%E4%BD%9C%E6%96%B9%E6%B3%95\" aria-label=\"micro frontends 的實作方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro Frontends 的實作方法</h1>\n<p><img src=\"/image/three-teams.png\" alt=\"PoC demo\">\n<a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>接著我們先來看看要如何實現 Micro Frontends，達成如上圖所呈現的狀態，在同個頁面中，運行三個不同 Team 採用不同 Tech stack 的模組。</p>\n<p>Team checkout 與 Team inspire 各自開發了前後端整合的模組，而 Team product 要負責整合它們。</p>\n<p>三個 Team 採用不同 tech stack，並且獨立部署在各自的環境中運行，基本上可能會有三個 Host 分別 serve 它們：</p>\n<ol>\n<li><a href=\"https://microfrontends-checkout.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends-checkout.com/</a></li>\n<li><a href=\"https://microfrontends-inspire.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends-inspire.com/</a></li>\n<li><a href=\"https://microfrontends-product.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends-product.com/</a></li>\n</ol>\n<h2 id=\"方法一使用-iframe\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%E4%BD%BF%E7%94%A8-iframe\" aria-label=\"方法一使用 iframe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法一：使用 iframe</h2>\n<p>在 Team product 的模組中，可以利用嵌入 iframe 的方式來載入另外兩個模組，由於 iframe 天生就有隔離運行環境的特性，各團隊的模組相互不會干擾，若要通訊，在同網域下，我們更能直接透過 <code class=\"language-text\">window.postMessage</code> 來達成。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- in Team Product --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://microfrontends-checkout.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://microfrontends-inspire.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>缺點</strong>:</p>\n<p>但使用 iframe 的缺點很多，基本上不會有人想採用這種方法...\n像是：由於應用模組是分開的，無法將共用的依賴模組取出來，導致頁面可能會同時載入重複的 code；再者，UI 的呈現上也會變得很難控制，若是其中還含有表單之類的功能，就更麻煩了。</p>\n<h2 id=\"方法二在-client-side-用-js-載入模組\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%E5%9C%A8-client-side-%E7%94%A8-js-%E8%BC%89%E5%85%A5%E6%A8%A1%E7%B5%84\" aria-label=\"方法二在 client side 用 js 載入模組 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法二：在 Client side 用 JS 載入模組</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadPage</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://microfrontends-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>element<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.com/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.pagelet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>loadPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- in Team Product --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagelet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagelet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inspire<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>也就是在 client side ajax 抓取模組，塞入對應的 target div 內。這種做法需要注意 js、css 等的載入順序，Facebook 在多年前是用 <a href=\"https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BigPipe</a> 來處理（可能 FB 已經沒在使用，但還是很值得了解的一個專案！）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\nbig_pipe<span class=\"token punctuation\">.</span><span class=\"token function\">onPageletArrive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> “pagelet_composer”<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">HTML</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> css<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> js<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>類似這樣，用 array 來依序載入資源。</p>\n<p>但缺點明顯就是無法 Server-side render。</p>\n<h2 id=\"方法三web-component\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%89web-component\" aria-label=\"方法三web component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法三：Web component</h2>\n<p>這邊是指 Web standard 下包含 <code class=\"language-text\">Custom Element</code>、<code class=\"language-text\">HTML template</code>、<code class=\"language-text\">Shadow DOM</code> 與 <code class=\"language-text\">HTML imports</code> 的 Web component。</p>\n<p>各個團隊可以用自己想使用的 tech stack 來製作元件，但最終包裹成 Web component 的形式，以 React 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SearchComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token string\">\"search-component\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomSearch</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mountPoint <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> keyword <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.google.com/search?q='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>SearchComponent<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>keyword<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SearchComponent<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      mountPoint<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-search'</span><span class=\"token punctuation\">,</span> CustomSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- in Team Product --></span>\n<span class=\"token comment\">&lt;!-- search component from Team Inspire --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-search</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TeamInspire<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyword</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Micro Frontends<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-search</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>採用 Web component 可以讓程式碼清晰可讀，元件之間各自獨立，所有資源都由自身控制該如何加載，團隊在使用這些元件上，就如同一般 HTML DOM，並且可以直接利用 Web Event API 來進行元間間的溝通。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// in Team checkout</span>\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'buy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> item<span class=\"token operator\">:</span> <span class=\"token string\">'car'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'buy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> buyItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>buyItem<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，如果 Web component 還能搭配 SSI (Server Side Includes) 來達成 SSR：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-search</span> <span class=\"token attr-name\">keyword</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Micro Frontends<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!--#include virtual=\"/custom-search?keyword=\"Micro Frontends\" --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-search</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">server <span class=\"token punctuation\">{</span>\n  listen <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n  ssi on<span class=\"token punctuation\">;</span>\n\n  location <span class=\"token operator\">/</span>TeamInspire <span class=\"token punctuation\">{</span>\n    proxy_pass  https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>microfrontends<span class=\"token operator\">-</span>TeamInspire<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>每個 Micro Frontend team 自己要建立起 <code class=\"language-text\">component server</code>，用來 serve component 的 markup。並且實作的 Web component 本身也要修改成支援 Server side render。\n不過重點是，這樣在技術上是可行的，至少比上一種方式好。</p>\n<p>但缺點也很明顯：</p>\n<ol>\n<li>需要 polyfills 來補足瀏覽器支援度問題。</li>\n<li>雖說大家能用不同 Tech stack，但本質上每個團隊最終還是得想辦法用成統一的 Web component</li>\n<li>Web component 的發展與普及不夠快速。</li>\n</ol>\n<p>關於 Web component 實作 Micro Frontends 的範例與細節，大家可以到 <a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">micro-frontends.org</a> 看，範例 code 甚至都包成 docker，很快就能裝起來玩！</p>\n<h2 id=\"方法四single-spa---javascript-metaframework\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E5%9B%9Bsingle-spa---javascript-metaframework\" aria-label=\"方法四single spa   javascript metaframework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法四：<a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Single-SPA - javascript metaframework</a></h2>\n<p>CanopyTax 這間公司推出的一個開源專案，提供了一些方便的 API 讓你達到：</p>\n<ol>\n<li>用各種技術構建 micro frontends。</li>\n<li>在同個頁面下使用多種前端 framework 組成的模組，且無需 refresh page。</li>\n<li>在現有的應用中嘗試新的 framework，而不必全部重寫。</li>\n<li>支援 Lazy load</li>\n<li>支援 Hot reload</li>\n</ol>\n<p>有興趣的讀者可以前往他們的 <a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> 看各種範例與程式碼。類似這樣的使用方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> singleSpa <span class=\"token keyword\">from</span> <span class=\"token string\">'single-spa'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadingFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./react/react.app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可根據 route 來切分要換成哪個模組並動態載入相應資源</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">activityFunction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">location</span> <span class=\"token operator\">=></span> location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#/react-app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">declareChildApplication</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">,</span> loadingFunction<span class=\"token punctuation\">,</span> activityFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"其他方法\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95\" aria-label=\"其他方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他方法：</h2>\n<p>在查資料的過程中，其實大家在討論的 Micro Frontends 都會著重在各 Team 間採用不同 tech stack 的前提，可能是這樣才比較好凸顯 Micro Frontends 切割模組的感覺。</p>\n<p>但是如果只是想要讓 Microservices 都有各自對應的前端模組，我們其實也可以直接用 React 來建造各類元件庫，讓主 App 下載使用。</p>\n<p>這樣會是一個折衷的方案，不用煩惱 common dependences 的問題，但相對的在升級版本時，可能就得一次將所有元件庫內的元件都升級才可以使用。</p>\n<p>有點偏離 Micro Frontends 的核心就是了。</p>\n<h2 id=\"micro-frontends-帶來的好處與壞處\" style=\"position:relative;\"><a href=\"#micro-frontends-%E5%B8%B6%E4%BE%86%E7%9A%84%E5%A5%BD%E8%99%95%E8%88%87%E5%A3%9E%E8%99%95\" aria-label=\"micro frontends 帶來的好處與壞處 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro Frontends 帶來的好處與壞處</h2>\n<p>Micro Frontends 的好處就在於，各個模組間是非常獨立的，彼此間的部署不需要互相等待，tech stack 也不一定要用相同的，也就是說，在汰換 legacy code 的過程可以順暢一些，也更容易嘗試新技術，可以漸進式的把 SPA 上的模組替換成更好或更新的框架，讓新舊 code 能夠並存無衝突。團隊在開發上可以更敏捷。</p>\n<p>但實務上我想應該不太會有人想在同個頁面上同時存在多種框架吧？試想，一個頁面上如果同時存在 React 與 Vue，甚至是 Angular，這樣 Page load time 大概難以想像。\n再加上缺乏統一打包的步驟，共用資源的相依性就無法被知曉，要如何有效處理 Common resources 是很麻煩的難題。</p>\n<p>還有就是 CSS 解決方案，會不會需要處理命名衝突，也是一個隱憂。若是公司資源不夠，沒有辦法利用像 Zeplin 之類的工具了統一定義 Style guideline，就還得想辦法協調各 Team 開發模組的 style 問題。</p>\n<p>整體而言看起來 Micro Frontends 的複雜度並不小，應該比較適合大型應用，或真的有許多 Legacy code 要處理的公司團隊。</p>\n<h1 id=\"那有誰採用-micro-frontends\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E6%9C%89%E8%AA%B0%E6%8E%A1%E7%94%A8-micro-frontends\" aria-label=\"那有誰採用 micro frontends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那有誰採用 Micro Frontends？</h1>\n<p>很多公司可能都有自己的類似解決方案，就像 FB 的 bigpie，或是 Yahoo 也有類似的作法。</p>\n<p>在我查到的資料當中，比較有提到 Micro Frontends 的大公司有 Spotify 與 IKEA，細節就給大家自行去欣賞他們的分享了：</p>\n<p><a href=\"https://www.slideshare.net/kevingoldsmith/how-spotify-builds-products-organization-architecture-autonomy-accountability\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spotify - How Spotify Builds Products (Organization. Architecture, Autonomy, Accountability)</a>:</p>\n<p><img src=\"/image/spotify-microfe.jpg\" alt=\"Spotify sharing\"></p>\n<p>Spotify 是從 UI 來區分團隊負責的 function，原先採用 iframe 與 postMessage 的方式來處理 Micro Frontends，團隊間 technology independence，但他們已經捨棄這個架構很久了，後來改採一律 react/redux 的架構。可以看這份 <a href=\"https://twitter.com/derberq/status/910056617881817089\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">twitter</a> 討論。</p>\n<p>另外，它們是有一個團隊在負責檢驗各 team 產出的模組 UI style 是否維持產品的一致性。</p>\n<p><a href=\"https://www.youtube.com/watch?v=4KVOuQDIfmw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MICROSERVICE WEBSITES - Gustaf N. Kotte</a></p>\n<p><img src=\"/image/ikea-microfe.png\" alt=\"MICROSERVICE WEBSITES - Gustaf N. Kotte\"></p>\n<h1 id=\"小結論\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B5%90%E8%AB%96\" aria-label=\"小結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小結論</h1>\n<p>其實會需要用到 Micro Frontends 結構的應該不多，尤其在 React/Vue/Angular 主宰的這幾年，需求相對更少。越大型的 web app 與團隊才比較值得去嘗試。</p>\n<p>現行的實作方式其實都很複雜，上面描述的方法與網路看到的 prototype 都過於簡化了。</p>\n<p>但這種高階層架構的思考與設計其實多多益善，從中發現的困難更能推動技術發展，而且也很有趣！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">micro-frontends.org</a></li>\n<li><a href=\"https://tech.mercari.com/entry/2018/12/06/162827\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">フロントエンドエンジニアは Micro Frontends の夢を見るか</a></li>\n<li><a href=\"https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇）</a></li>\n<li><a href=\"https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">技术雷达之「微前端」- 将微服务理念扩展到前端开发（下：实战篇）</a></li>\n<li><a href=\"https://github.com/Pragmatists/microfrontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Micro Frontends Proof of Concept</a></li>\n<li><a href=\"https://blog.pragmatists.com/independent-micro-frontends-with-single-spa-library-a829012dc5be\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Independent micro frontends with Single SPA library</a></li>\n<li><a href=\"https://single-spa.surge.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Single-SPA</a></li>\n<li><a href=\"https://www.slideshare.net/kevingoldsmith/how-spotify-builds-products-organization-architecture-autonomy-accountability\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spotify - How Spotify Builds Products (Organization. Architecture, Autonomy, Accountability)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4KVOuQDIfmw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MICROSERVICE WEBSITES - Gustaf N. Kotte</a></li>\n</ol>","fields":{"slug":"micro-frontends-concept"},"frontmatter":{"title":"一起探討 Micro Frontends 的世界","date":"01-12-2019","tags":["frontends","micro"]},"timeToRead":12}},"pageContext":{"slug":"micro-frontends-concept","prev":{"excerpt":"『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』","html":"<blockquote>\n<p>『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>從 2017 年開始，我每天都會用 Google Calendar 紀錄生活，也在年底的時候利用 D3.js 與 Google api 將紀錄的資料視覺化出來做個年終回顧。（沒看過的讀者可以往這裡走：<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>）</p>\n<p>2018 當然也不例外，我依然持續記錄每天的日常，透過每週回顧自己的時間花費來調整目標與心理狀態。</p>\n<p>而既然我有了兩年的資料，不拿來比較看看就太可惜了，因此決定在我今年的最後一篇文章中，將 2017 年與 2018 年的資料做個視覺化的比較，看看我在工作、生活、娛樂以及自我進修等上面的時間調配是否有照著我去年所希望的步調進行。在一年的尾聲，好好面對自己！</p>\n<p>一樣先附上成果與 <a href=\"https://blog.arvinh.info/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a>：</p>\n<p><img src=\"/image/YearEndReview-2018_.png\" alt=\"YearEndReview-2018\"></p>\n<h2 id=\"工具\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%85%B7\" aria-label=\"工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具</h2>\n<p>工具的使用上，這次並沒有使用 D3.js，畢竟以需求來說，D3.js 太大材小用了，加上我前陣子發現一個基於 D3.js 與 React 的視覺化 library - <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a>，看起來非常不錯，所以這次就拿這套來試試看，透過這套工具，整個作品大概不用花費一小時就可以完成了，大多的時間都是在處理資料格式上。</p>\n<p>而抓取 Google Calendar 資料的部分，一樣使用 Google 的 api，只不過一年過去，Google api 也是有所更新，不過問題不大，稍微修改一些小地方即可，稍後會帶到。</p>\n<h2 id=\"視覺化的第一步取得資料\" style=\"position:relative;\"><a href=\"#%E8%A6%96%E8%A6%BA%E5%8C%96%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%8F%96%E5%BE%97%E8%B3%87%E6%96%99\" aria-label=\"視覺化的第一步取得資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>視覺化的第一步，取得資料</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>中我有提到過，雖然 Google 有提供一個 <a href=\"https://takeout.google.com/settings/takeout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Takeout</a> 的功能，你也能直接匯出日曆，但是下載到的資料其格式都是 <a href=\"https://zh.wikipedia.org/wiki/ICalendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">iCalendar</code></a>，除非你在每個紀錄的項目上都有很詳細的紀錄內容，才有辦法去將每一項 task 都進行分類，像我只用顏色來區分的就沒辦法。</p>\n<p><img src=\"/image/google-takeout.png\" alt=\"Google Takeout\"></p>\n<p>所以還是得靠 Google 提供的 Calendar API 來取得資料。</p>\n<p>而 Google Calendar API 的使用方式很簡單，只要照著<a href=\"https://console.developers.google.com/start/api?id=calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>拿到憑證後，就可以從他們提供的<a href=\"https://developers.google.com/google-apps/calendar/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a> 來修改實作。</p>\n<p>基本上跟我<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年寫的</a>差不多，主要是在 auth 的套件（拿 cretential 的方式）以及 api 回傳的 schema 有所變動：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var googleAuth = require('google-auth-library');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const { google } = require('googleapis');\n</span>// If modifying these scopes, delete token.json.\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nvar SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n<span class=\"token prefix deleted\">-</span>  process.env.USERPROFILE) + '/.credentials/';\n<span class=\"token prefix deleted\">-</span> var TOKEN_PATH = TOKEN_DIR + 'calendar-nodejs-quickstart.json';\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const TOKEN_PATH = 'token.json';</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function listEvents(auth, pageToken) {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var calendar = google.calendar('v3');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const calendar = google.calendar({version: 'v3', auth});\n</span>const queryOptions = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> auth: auth,\n<span class=\"token prefix unchanged\"> </span> calendarId: 'primary',\n<span class=\"token prefix unchanged\"> </span> timeMax: (new Date()).toISOString(),\n<span class=\"token prefix unchanged\"> </span> singleEvents: true,\n<span class=\"token prefix unchanged\"> </span> orderBy: 'startTime'\n</span>};\nif (pageToken) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> queryOptions.pageToken = pageToken;\n</span>}\ncalendar.events.list(queryOptions, function (err, response) {\nif (err) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('The API returned an error: ' + err);\n<span class=\"token prefix unchanged\"> </span> return;\n</span>}\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>var events = response.items;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const resData = response.data || {};\n<span class=\"token prefix inserted\">+</span>const events = resData.items;\n</span>if (events.length == 0) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('No upcoming events found.');\n</span>} else {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> // ...\n</span>}\n// ...\n}\n}</code></pre></div>\n<p>完整的程式碼我一樣有放在 <a href=\"https://gist.github.com/ArvinH/5960a33b54fb03d504bcba7a4d5982e5#file-fetchcalendardata-js-L86-L151\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a> 上，如果你也想要用 Google API 下載自己的 Calendar，基本上除了 <code class=\"language-text\">listEvents</code> 函數內的部分以外，都可以直接照抄，<code class=\"language-text\">listEvents</code> 內的程式碼是 API 的 callback，主要是負責後續資料的處理，將之轉化成我們視覺化所需要的格式。而關於 Calendar api 相關參數的介紹，可以參考<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年的文章</a>。</p>\n<h1 id=\"nivo\" style=\"position:relative;\"><a href=\"#nivo\" aria-label=\"nivo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nivo</h1>\n<p>接下來介紹一下 <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a> 這套工具。</p>\n<p>它是 <a href=\"https://twitter.com/benitteraphael\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Raphaël Benitte</a> 所製作，基於 D3.js 與 React.js 的視覺化套件。</p>\n<p><img src=\"/image/nivo-cover.png\" alt=\"nivo\"></p>\n<p>比起市面上其他套件，我自己認為 nivo 的優勢有幾點：</p>\n<ul>\n<li>對於 Server-side render 的支援度很高。</li>\n<li>由於支援 React SSR，nivo 提供了 api 介面，讓你能透過 http request 產生圖表 - 詳情可看 <a href=\"https://github.com/plouc/nivo-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo-api</a>。</li>\n<li>Mono repo 的方式管理 packages，可以依照需求，只安裝你需要的圖表 package。</li>\n<li>宣告式的寫法，加上他互動式的文件範例，套用他的圖表幾乎沒有學習曲線。</li>\n</ul>\n<p><img src=\"/image/nivo-bar-doc.png\" alt=\"nivo 文件網站\"></p>\n<ul>\n<li>部分元件提供 Canvas 實作的版本，大量數據也不怕！</li>\n<li>動畫部分使用 <code class=\"language-text\">react-motion</code>，寫過 react 的人應該不陌生，<code class=\"language-text\">react-motion</code> 可說是 react 動畫界的翹楚啊！</li>\n<li>每個元件都有對應的 <code class=\"language-text\">Storybook</code> 可以看，非常的 developer-friendly!</li>\n</ul>\n<p>當然也是有缺點的：</p>\n<ul>\n<li>不是每個元件都支援動畫，這時候會知道 D3.js 的好(?</li>\n<li>圖表種類固定，比較難有創意的發揮。</li>\n</ul>\n<p>基於以上的優缺點，不難看出，如果是對於不熟悉 D3.js 或是想要快速產出圖表，但又想要有動畫效果或是互動性的人來說，直接採用 nivo 這類的 library 會是很不錯的選擇，也是我這次採用的原因。</p>\n<h1 id=\"開始進行我們的圖表製作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E6%88%91%E5%80%91%E7%9A%84%E5%9C%96%E8%A1%A8%E8%A3%BD%E4%BD%9C%E5%90%A7\" aria-label=\"開始進行我們的圖表製作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行我們的圖表製作吧！</h1>\n<p>基本的想法一樣是將資料用 Calendar 圖表呈現，觀察每種類別的 task 在一年中的分佈狀況，並且加入去年的資料來做對比。</p>\n<p>接著，想利用一個折線圖來觀察單一類別在每個月的波動，是不是在某些月份我比較勤奮工作、某些月份很認真在進修或玩樂。當然這些資訊從 Calendar 圖表也看得出來，但是用月加總的數值呈現在折線圖上，感覺會更直接一點。</p>\n<p>最後在把每種類別的資料集結起來，利用 Waffle 圖表，一目瞭然各個類別的比例關係。</p>\n<p>要達成上面三個想法，我們只需要使用 nivo 的 <a href=\"https://github.com/plouc/nivo/tree/master/packages/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/calendar</a>、<a href=\"https://github.com/plouc/nivo/tree/master/packages/line\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/line</a> 與 <a href=\"https://github.com/plouc/nivo/tree/master/packages/waffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/waffle</a> 三種套件即可。</p>\n<p>使用方法都很簡單，基本上只要到對應的 doc 頁面，就直接有現成的程式碼可以<del>複製</del>參考。</p>\n<p>像是 <a href=\"https://nivo.rocks/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calendar</a>:</p>\n<p><img src=\"/image/nivo-calendar-doc.gif\" alt=\"calendar doc demo\"></p>\n<p>重點反而是資料格式，即便我們只是想繪製三種圖表，但就需要整理出三種資料格式，才能夠符合其各自的需求，一樣可以從 nivo 的 doc 中找到每個圖表所需要的資料格式（data tab）。</p>\n<p>我製作範例的 parser 放在 <a href=\"https://github.com/ArvinH/YearEndReview-2018/tree/master/src/dataParser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 上，有興趣可以參考，不過就只是一些髒髒的資料轉換，是個耗時費力的工作啊...</p>\n<p>值得一提的是，這邊我除了轉化資料格式外，還花了不少時間在做資料的整理與同步。</p>\n<p>為什麼呢？</p>\n<p>因為每天的日誌是我自己手動輸入，顏色 label 也是我自己標記，有些事項的類別在 2017 年與 2018 年我用的是不同的顏色，但卻應該是分在同類中，這在做對比時，就會有問題了，因此花了不少時間從 2017 年一月開始過到 2018 年十二月...所以如果有人想跟我一樣這樣紀錄的話，或許可以用 Calendar 內建的分類功能，而不要像我一樣用手動標記顏色的方式。</p>\n<p>總之，當資料處理好以後，照著網站範例將我們想要的元件放到頁面上即可，這邊我是直接用 CRA 製作 React SPA，其中 <code class=\"language-text\">Calendar</code> 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ResponsiveCalendar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nivo/calendar'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calendar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ResponsiveCalendar\n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>\n        from<span class=\"token operator\">=</span><span class=\"token string\">\"2017-01-01\"</span>\n        to<span class=\"token operator\">=</span><span class=\"token string\">\"2018-12-31\"</span>\n        emptyColor<span class=\"token operator\">=</span><span class=\"token string\">\"#eeeeee\"</span>\n        colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"#61cdbb\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#97e3d5\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#e8c1a0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#f47560\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        margin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"bottom\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        yearSpacing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">45</span><span class=\"token punctuation\">}</span>\n        monthBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        monthLegendOffset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n        dayBorderWidth<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n        dayBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        legends<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"anchor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bottom-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"direction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"row\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"translateY\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemHeight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemDirection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"top-to-bottom\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Calendar<span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的範例看得出來，你有許多 <code class=\"language-text\">options</code> 可以設定，像是資料的起始日期(<code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>)、資料顏色的區間或是各種 margin 等都能調整，非常方便好用。</p>\n<p>唯一要注意的是，如果採用支援 RWD 的元件（像是這邊用的 <code class=\"language-text\">ResponsiveCalendar</code>），記得要給定這個 Component 的 Parent component 固定的高度，否則 nivo 的元件偵測到高度為零時，就不會 render 了，所以記得要多加個有高度的 Wrapper 在 nivo 的元件上。</p>\n<p>其他的實作細節基本上就是 React 而已，真的有興趣<del>（想看看 code 有多鳥）</del>可以到 <a href=\"https://github.com/ArvinH/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 瞧瞧。</p>\n<h2 id=\"最後分享一下我的年終檢討\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84%E5%B9%B4%E7%B5%82%E6%AA%A2%E8%A8%8E\" aria-label=\"最後分享一下我的年終檢討 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後分享一下我的年終檢討</h2>\n<p>我記錄在 Google Calendar 上的 task，基本上分為六類：</p>\n<ul>\n<li>English - 包含上英文線上課程、背單字、唸英文等</li>\n<li>Entertainment - 所有娛樂事項</li>\n<li>Sick/Rehabilitation - 生病、做物理復健</li>\n<li>Exercise - 運動</li>\n<li>Training - 一切我認為跟加強我自身實力有關的事，有可能是看文章、寫 code 或是刷題</li>\n<li>Work - 上班</li>\n</ul>\n<p><img src=\"/image/nivo-waffle-explain.png\" alt=\"waffle\"></p>\n<p>Waffle 圖的數據是我將每個月的分類 task 加總後做平均所算出的比例。</p>\n<p>而從 Waffle 圖可以很明顯看到，2018 年我對於 <code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 這兩部分的分類，加重了不少。回想過去半年，很急切的想要有所突破，雖然我不覺得有達到我心中的努力程度，但以結果論來說，這些多出的 <code class=\"language-text\">Training</code> 或許真的幫助了我，讓我在今年達成了人生中一個小小的目標，有了<del>逃離鬼島</del>前往海外的機會。</p>\n<p>若是從 Calendar 圖與折線圖來做兩個年度的對比，感受會更深一點：</p>\n<p><img src=\"/image/review-explain.gif\" alt=\"Review\"></p>\n<p>首先，去年做完 year end review 後，我就發現假日也在工作的時間有點太多，除了有些時候的確是 project 較為忙碌，但大多是自己平日上班專注力沒有好好發揮。</p>\n<p>因此今年開始，我調整作息，除了早上運動外，也盡量在公司時保持專注，降低與社群媒體的接觸，從圖表結果來看，成效挺好的，明顯看到 2018 年的假日在 Work 這個分類，是比較空的。</p>\n<p>另外，<code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 分類的差異從 Calendar 圖表非常明顯啊！</p>\n<p>2018 我幾乎每天都有抽出一點時間學習工作外的事，持續練英文的時間也變多了！</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>在製作第一年的 Year End Review 時，只是覺得好玩，可以把紀錄一年的資料做個整理跟視覺化呈現，但到了第二年，有了對照後，好像真的可以從中看出自己一年來的成長，也在整理資料的過程中，回顧了這一年所做的事情，並反省自己的缺失。雖然整體上來說，還是覺得自己浪費了許多時間，但套句李笑來的話：『所有對於現狀的解脫，最終都只能靠積累來實現。』從現在開始繼續努力、繼續積累，活在未來！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a></li>\n</ol>","id":"35d05912-1e5e-51e9-84c6-a16c2877ea32","fields":{"slug":"dataviz-yearendreview"},"frontmatter":{"date":"2018-12-15T15:15:09.000Z","title":"用 Google Calendar 與 nivo 製作自己的年終檢討報告","tags":["data","visualization","d3","nivo","google calendar","yearend"],"type":"tech","slug":"dataviz-yearendreview"},"timeToRead":10},"next":{"excerpt":"『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』","html":"<blockquote>\n<p>『知識變現是一直存在的，但真正能變現的知識是 “認知差異”』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>過年除舊佈新，剛好趁這個機會來複習一下已經是老觀念的 Virtual DOM。很多人在講到 React 的時候都一定會提到 Virtual DOM，而問到 Virtual DOM 的好處時，就會說到實際 DOM 的操作成本很貴，所以透過 Virtual DOM 可以降低成本。</p>\n<p>你在除夕餐桌上這樣講可能沒問題，面試只講這樣應該不太好。</p>\n<p>畢竟你最後還是會操作實體 DOM 啊，這樣說明太簡化了。</p>\n<p>Virtual DOM 的由來可以從 MVC 和 MVVM 的架構追溯起，主要都是為了解決前端頁面呈現、資料更動、使用者操作這三種狀態交互作用產生的複雜性，MVC 提供了一個解法，MVVM 提出的 View Model 有了優化的方案，還有 data 與 view 雙向綁定的方式等等，而 React 提出了另一種思路，但那不是我今天的重點，有興趣且還不知道這些名詞是什麼的讀者可以去搜尋看看，有很多文章在說明這些資訊與歷史。</p>\n<p>React 的 Virtual DOM 是因應其數據與 UI 更新繪製的特殊思路而提出的效能解決方案。</p>\n<p>React 希望在資料更新時，能夠直接重新渲染頁面，不用主動去探究是數據的哪部份發生變化，要對應去更新頁面哪一部分的 DOM。但頁面重新渲染的成本可是更高，所以才需要 Virtual DOM 作為緩衝，透過資料更新後，重新繪製 Virtual DOM，與實體 DOM 進行 Diff，最後再把差異部分 Patch 上去，這不僅修正了重新渲染的成本問題，也降低了 data 與 view 交互更新的複雜度，提高了 developer 的開發體驗。</p>\n<p>說了這麼多，其實今天就只是單純想自己手刻一個 Virtual DOM 來理解一下該怎麼實現這樣的功能，畢竟知道了概念，總覺得手刻應該不難。\n手刻 Virtual DOM 其實也沒什麼太大意義，但很多時候就是 for fun，然後做個記錄。</p>\n<p>主要參考至 <a href=\"https://twitter.com/ycmjason\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ycmjason</a> 的 <a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">talk</a> 與 <a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a>，非常推薦欣賞，講者的熱情完全掩蓋掉音訊不佳的缺點，又很清楚地介紹了 VDOM 實作。</p>\n<h2 id=\"所以virtual-dom-到底長什麼樣子\" style=\"position:relative;\"><a href=\"#%E6%89%80%E4%BB%A5virtual-dom-%E5%88%B0%E5%BA%95%E9%95%B7%E4%BB%80%E9%BA%BC%E6%A8%A3%E5%AD%90\" aria-label=\"所以virtual dom 到底長什麼樣子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>所以，Virtual DOM 到底長什麼樣子？</h2>\n<p>Virtual DOM 就只是個 javascript plain object，並且模仿 Actual DOM 的結構（但當然簡化很多）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'v-element'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>一個基本的 VDOM，我們只需要元素名稱（tagName）、元素屬性（attrs）與其 Children list（既然是虛擬 DOM，這個 plain object 裡面的屬性其實隨便你取名，只要對應得到實際 DOM 即可）。</p>\n<p>根據這個想法，我們可以模仿現存的 VDOM lib，提供一個 <code class=\"language-text\">createElement</code> 的 function：</p>\n<div class=\"gatsby-highlight\" data-language=\"jscreateelement.js\"><pre class=\"language-jscreateelement.js\"><code class=\"language-jscreateelement.js\">export default (tagName, { attrs = {}, children = [] }) =&gt; {\n  const vElement = Object.create(null);\n\n  Object.assign(vElement, {\n    tagName,\n    attrs,\n    children,\n  });\n\n  return vElement;\n};</code></pre></div>\n<blockquote>\n<p>Note: 利用 <code class=\"language-text\">Object.create(null)</code> 與 <code class=\"language-text\">Object.assign</code> 的方式產生物件，可以避免直接採用 Object literals 的方式會繼承到 object prototype 的屬性。</p>\n</blockquote>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\nconsole.log(vRootApp);</code></pre></div>\n<p>結果：</p>\n<p><img src=\"/image/vdom-createElement.png\" alt=\"vdom-createElement\"></p>\n<h2 id=\"從-virtual-dom-到-real-dom\" style=\"position:relative;\"><a href=\"#%E5%BE%9E-virtual-dom-%E5%88%B0-real-dom\" aria-label=\"從 virtual dom 到 real dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>從 Virtual DOM 到 Real DOM</h2>\n<p>有了 Virtual DOM，我們還需要一個 <code class=\"language-text\">render</code> 函數來將其繪製到頁面上。方法很簡單，我們只需要 <code class=\"language-text\">document.createElement</code>、<code class=\"language-text\">setAttribute</code> 與 <code class=\"language-text\">appendChild</code> 三個 web api 即可完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(renderElem(child));\n  }\n  return elem;\n};\nexport default renderElem;</code></pre></div>\n<p>根據 <code class=\"language-text\">tagName</code> 使用 <code class=\"language-text\">document.createElement</code> 來建立實際的 DOM 物件，並且將 <code class=\"language-text\">attrs</code> 一個一個 <code class=\"language-text\">setAttribute</code> 到實際的 DOM 元素上；最後再將 <code class=\"language-text\">children</code> 遞迴丟入 <code class=\"language-text\">renderElem</code> 函數中，將所有小孩的實際 DOM object 都建立好並 <code class=\"language-text\">appendChild</code> 到上層的實際 DOM 物件上，最後將完整的 real DOM object 回傳出去。</p>\n<p>以概念來說基本上這樣就完成了，但可以讓他在完整一點，提供 <code class=\"language-text\">textNode</code> 的支援，利用 <code class=\"language-text\">document.createTextNode</code> 來產生純 string 的元素，稍微修改 <code class=\"language-text\">render.js</code> 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsrender.js\"><pre class=\"language-jsrender.js\"><code class=\"language-jsrender.js\">const renderElem = ({ tagName, attrs, children }) =&gt; {\n  const elem = document.createElement(tagName);\n  for (const [k, v] of Object.entries(attrs)) {\n    elem.setAttribute(k, v);\n  }\n  for (const child of children) {\n    elem.appendChild(render(child));\n  }\n  return elem;\n};\nconst render = (vNode) =&gt; {\n  if (typeof vNode === &#39;string&#39;) {\n    return document.createTextNode(vNode);\n  }\n  return renderElem(vNode);\n};\nexport default render;</code></pre></div>\n<p>從 <code class=\"language-text\">render</code> 函數回傳的基本上就會是一顆完整的 Virtual DOM Tree 了，舉個例子來看：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vRootApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello VDOM'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'http://placekitten.com/200/300'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootApp <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vRootApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>結果如下，Virtual DOM 就是個 Javascript plain object，而經由 <code class=\"language-text\">render</code> 函數回傳的即是包含實際 DOM 屬性的 Real DOM：</p>\n<p><img src=\"/image/vDom-render-actualDOM.png\" alt=\"Render to real dom\"></p>\n<h3 id=\"掛到頁面上吧\" style=\"position:relative;\"><a href=\"#%E6%8E%9B%E5%88%B0%E9%A0%81%E9%9D%A2%E4%B8%8A%E5%90%A7\" aria-label=\"掛到頁面上吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>掛到頁面上吧！</h3>\n<p>透過 <code class=\"language-text\">render</code> 我們有了實體 DOM，但這樣還沒辦法在頁面上顯示，需要有個類似 <code class=\"language-text\">ReactDOM.render</code> 的方法來幫助我們實現：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmount.js\"><pre class=\"language-jsmount.js\"><code class=\"language-jsmount.js\">export default (element, targetNode) =&gt; {\n  targetNode.appendChild(element);\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">import createElement from &#39;./createElement&#39;;\nimport render from &#39;./render&#39;;\nimport mount from &#39;./mount&#39;;\n\nconst vRootApp = createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n  },\n  children: [\n    &#39;Hello VDOM&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: &#39;http://placekitten.com/200/300&#39;,\n      },\n    }),\n  ],\n});\n\nconst rootApp = render(vRootApp);\nmount(rootApp, document.getElementById(&#39;rootApp&#39;));</code></pre></div>\n<p>很簡單，就把我們產生的 Real DOM <code class=\"language-text\">appendChild</code> 到 targetNode 下就好。</p>\n<p>或是也能用 <code class=\"language-text\">targetNode.replaceWith(element);</code> 的方式直接取代掉 targetNode。（不過要注意一下 IE 是無法使用的喔！）</p>\n<p><img src=\"/image/mount-to-html.png\" alt=\"Mounted DOM\"></p>\n<h1 id=\"diff-virtual-dom---reconciliation\" style=\"position:relative;\"><a href=\"#diff-virtual-dom---reconciliation\" aria-label=\"diff virtual dom   reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diff Virtual DOM - Reconciliation</h1>\n<p>知道怎麼產生 Virtual DOM 並繪製到頁面上後，也是時候進入重頭戲了！</p>\n<p>如前言所說，Virtual DOM 作為我們操作 Real DOM 的一層緩衝，我們比較經過狀態變化後產生的新舊 Virtual DOM 來找出實際需要更新的 Real DOM 位置，如此一來，儘管每次都重新 Render，實際更新的 DOM 也不會是全部，可以大幅改善直接重新渲染的效能問題。</p>\n<p>而 tree diff 的演算法其實很複雜，如果用 <a href=\"https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tree Edit Distance</a> 的方式遞迴檢查每個節點，複雜度將可達到 O(n^3)，是非常驚人的數字，幾乎無法在短時間處理完，因此 React 所提出的 reconciliation 制定了一些策略，來將複雜度從 O(n^3) 降至 O(n)。<a href=\"https://reactjs.org/docs/reconciliation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官方文檔其實說明得很清楚</a>。</p>\n<p>主要有兩個假設：</p>\n<ol>\n<li>只需要比較同一層的節點，同一層內的元素若擁有不同的 type，往下長出的樹就會不同。</li>\n<li>同樣 type 的元件，開發者可以使用 <code class=\"language-text\">key</code> 這個 props 來決定其子樹是否需要重新 render。</li>\n</ol>\n<p>如假設一提及，我們只比較新舊兩棵 Virtual DOM Tree 中，同個父節點下的所有子節點，若發現某個節點不存在了，那就整個子樹都會刪除不去進一步比較。</p>\n<p><img src=\"/image/vdom-level-comparison.png\" alt=\"只比同 level 的 node\"></p>\n<p>這樣做的意思就是說，如果今天發生了一些跨層級的操作，像是整顆子樹被搬移到另一個節點上，對 React 來說，會是刪掉原有的子樹，然後重新在新的位置建立一模一樣的子樹出來：</p>\n<p><img src=\"/image/vdom-cross-level-modify.png\" alt=\"刪掉原子樹，在新位置重建\"></p>\n<blockquote>\n<p>Note: 實際上 React 在這兩個假設下，還做了許多更細節的事情（component diff、element diff），可以先去參考這篇很久之前的<a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，再去閱讀 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React fiber 的介紹</a>。</p>\n</blockquote>\n<p>基於這兩個假設我們可以開始實作簡單版的 Virtual DOM Diffing 演算法，基本上有四個 cases 處理：</p>\n<ol>\n<li>newTreeRoot 為 undefined，也就是某個節點被刪除了。</li>\n<li>兩個 Node 都是純字串。</li>\n<li>一個 Node 為純字串，一個 Node 為 Virtual Element。</li>\n<li>新舊 TreeRoot 的 TagName 不同。</li>\n</ol>\n<p>根據這四種 cases 我們個別處理，並且回傳一個 <code class=\"language-text\">patch</code> 函數，供之後來將 diff 完的結果 attach 到 Real DOM 上 （Note: r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM）：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  // 假設 oldVTreeRoot 一定都存在，只有 newVTreeRoot 有機會被刪除，也就是 undefined\n  if (newVTreeRoot === undefined) {\n    // 回傳 patch 函數，會接收 Real DOM，這邊 r 開頭的都代表 Real DOM，v 開頭為 Virtual DOM\n    return rNode =&gt; {\n      // 因為新的 Virtual DOM Tree 是空的，所以回傳的 Patch 函式就是直接把 Real DOM 刪除。\n      rNode.remove();\n      return undefined;\n    }\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // 這邊包含兩種 cases：\n      // Case 1：新舊 Virtual DOM Tree 其中一個為 string，一個為 Virtual Node，所以當然會 !==\n      // Case 2：是兩者都為 string，但 !==\n      // 我們直接根據新的 Virtual Tree render 新的 Real Tree，並 replace 掉原本的 Real Tree\n      return rNode =&gt; {\n          // 回傳 patch 函數\n          const rNewNode = render(newVTreeRoot);\n          rNode.replaceWith(rNewNode);\n          return rNewNode;\n       };\n    } else {\n      // 若都為 string 且值相同，那就不用改。\n      return rNode =&gt; rNode; // 回傳 patch 函數\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n    // 根據優化 Tree diffing 演算法的假設一，只要 tagName 不同，我們就直接重新 render。\n    return rNode =&gt; {\n      // 回傳 patch 函數\n      const rNewNode = render(newVTreeRoot);\n      rNode.replaceWith(rNewNode);\n      return rNewNode;\n    };\n  }\n  // ...\n};\nexport default diff;</code></pre></div>\n<p>聰明的你看到這邊就會發問了：tag name 相同的 case 沒有處理到啊？</p>\n<p>沒錯，如果新舊兩棵 Virtual Tree 的 tag name 都一樣，那我們還得比 attributes，而要比較兩個節點的所有 attributes，不如直接 replace 上新的就好。但要注意，因為 attributes 很多，所以會產生多個 patch 函數需要被 apply 到 Real DOM 上，我們額外用一個陣列暫存，最後回傳一個 wrapper patch 函數，把所有暫存的 patch 函數都 apply 到傳進來的 Real DOM ：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffattrs.js\"><pre class=\"language-jsdiffattrs.js\"><code class=\"language-jsdiffattrs.js\">const diffAttrs = (oldAttrs, newAttrs) =&gt; {\n  // 因為 attributes 很多，需要一個 array 來存所有需要的 patch 函數\n  const patches = [];\n  // 放上新的 attributes\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push(rNode =&gt; {\n      // 暫存 patch 函數\n      rNode.setAttribute(k, v);\n      return rNode;\n    });\n  }\n  // 移除舊的 attributes\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push(rNode =&gt; {\n        // 暫存 patch 函數\n        rNode.removeAttribute(k);\n        return rNode;\n      });\n    }\n  }\n  // 最後傳出去的外層 patch 函數\n  return rNode =&gt; {\n    for (const patch of patches) {\n      // 把每個暫存的 patch 函數都 apply 到 Real DOM 上\n      patch(rNode);\n    }\n    return rNode;\n  };\n};\nexport default diffAttrs;</code></pre></div>\n<p>處理完 attributes 後，我們還得考慮 children，diff children 的方式其實跟 diff 整棵樹一樣，但我們要考慮到子樹的長度：</p>\n<ol>\n<li><code class=\"language-text\">oldVChildren.length === newVChildren.length</code>，那就直接 <code class=\"language-text\">diff(oldVChildren[i], newVchildren[i])</code>，i 從 0 到 <code class=\"language-text\">oldVChildren.length</code>。</li>\n<li><code class=\"language-text\">oldVChildren.length > newVChildren.length</code>，跟 case 1 其實一樣，因為新子樹比較少，就代表有 Node 被刪除，在我們原本的 diff 函式中有處理了。</li>\n<li><code class=\"language-text\">oldVChildren.length &lt; newVChildren.length</code>，新子樹比較長，那就先把舊子樹的所有點先 update 好，再把剩餘的新子樹 patch 上去。</li>\n</ol>\n<p>從上述三個 cases 來看，我們橫豎都需要 loop oldVChildren 一次，最後若有多餘的 newVChildren 再想辦法 update 上去。另外，這邊一樣需要暫存多個 patch 函數，實作細節我註解在 code 裡比較清楚，最後回傳的 patch 函數比較特別：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiffchildren.js\"><pre class=\"language-jsdiffchildren.js\"><code class=\"language-jsdiffchildren.js\">const diffChildren = (oldVChildren, newVChildren) =&gt; {\n  // 無論如何都 loop 過 oldVChildren 一次，把所有 diff 回傳的 patch 函數暫存在 childrenPatches 內\n  // 這是一定會 apply 到 old tree 的部分。\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) =&gt; {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n  // 接著我們看看 `newVChildren` 是否有多餘的子樹需要處理\n  // 若有，我們產生的 patch 函數就是單純 `render` 出 Real Node 並且\n  // appendChild 到 patch 傳進的 Real Node 上（實際要被 patch 的 parent 節點）\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push(rNode =&gt; {\n      rNode.appendChild(render(additionalVChild));\n      return rNode;\n    });\n  }\n  return rParent =&gt; {\n    // 由於這是 children 的 patch，吃進來的會是 parent 的 Real DOM\n    // 我們要抓出 `rParent.childNodes` 來針對 old tree 做 patch\n    // zip 函數其實就是 lodash 的 zip，成對將 childPatches, rParent.childNodes 的元素並排傳出，這樣比較簡潔\n    for (const [patch, rChild] of zip(childPatches, rParent.childNodes)) {\n      patch(rChild);\n    }\n    // 最後把 new tree 多餘的 patches 直接 patch 到 parent 的 Real DOM 下即可（因為我們是 appendChild）\n    for (const patch of additionalPatches) {\n      patch(rParent);\n    }\n    return rParent;\n  };\n};</code></pre></div>\n<p>最後在我們原本的 <code class=\"language-text\">diff.js</code> 中的最後面加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsdiff.js\"><pre class=\"language-jsdiff.js\"><code class=\"language-jsdiff.js\">import render from &#39;./render&#39;;\nconst diff = (oldVTreeRoot, newVTreeRoot) =&gt; {\n  if (newVTreeRoot === undefined) {\n    // ....\n  }\n  if (typeof oldVTreeRoot === &#39;string&#39; ||\n    typeof newVTreeRoot === &#39;string&#39;) {\n    if (oldVTreeRoot !== newVTreeRoot) {\n      // ....\n    } else {\n      // ....\n    }\n  }\n  if (oldVTreeRoot.tagName !== newVTreeRoot.tagName) {\n      // ....\n  }\n  const patchAttrs = diffAttrs(oldVTreeRoot.attrs, newVTreeRoot.attrs);\n  const patchChildren = diffChildren(oldVTreeRoot.children, newVTreeRoot.children);\n\n  return rNode =&gt; {\n    patchAttrs(rNode);\n    patchChildren(rNode);\n    return rNode;\n  };\n};\nexport default diff;</code></pre></div>\n<p>完整的 diff code 可以看這邊 <a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<p>到這邊為止，Virtual DOM 算是告一段落了！</p>\n<h2 id=\"最後修改下-mainjs做點變化讓大家看製作出的-vdom-效果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E4%BF%AE%E6%94%B9%E4%B8%8B-mainjs%E5%81%9A%E9%BB%9E%E8%AE%8A%E5%8C%96%E8%AE%93%E5%A4%A7%E5%AE%B6%E7%9C%8B%E8%A3%BD%E4%BD%9C%E5%87%BA%E7%9A%84-vdom-%E6%95%88%E6%9E%9C\" aria-label=\"最後修改下 mainjs做點變化讓大家看製作出的 vdom 效果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後修改下 main.js，做點變化讓大家看製作出的 VDOM 效果</h2>\n<p>我們讓 <code class=\"language-text\">createVApp</code> 柯里化，多傳一個參數 <code class=\"language-text\">count</code> 進去改變 attributes 跟圖片尺寸，接著 <code class=\"language-text\">setInterval</code> 讓每兩秒產生一個隨機數字當作 <code class=\"language-text\">count</code> 值，用來 update 我們的節點：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsmain.js\"><pre class=\"language-jsmain.js\"><code class=\"language-jsmain.js\">const createVApp = count =&gt; createElement(&#39;div&#39;, {\n  attrs: {\n    id: &#39;root&#39;,\n    dataCount: count, // we use the count here\n  },\n  children: [\n    &#39;Hello Kitty&#39;,\n    createElement(&#39;img&#39;, {\n      attrs: {\n        src: `http://placekitten.com/${count}00/${count}00`,\n      },\n    }),\n  ],\n});\n\nlet vApp = createVApp(0);\nconst rApp = render(vApp);\nlet rRootEl = mount(rApp, document.getElementById(&#39;rootApp&#39;));\nsetInterval(() =&gt; {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n  // 每次 patch 完就 assgin 回原有變數，這樣下個 interval 才會抓到更新的樹\n  rRootEl = patch(rRootEl);\n  vApp = vNewApp;\n}, 2000);</code></pre></div>\n<p>效果如下，可以看到圖片一直變動，但是我們真的只改到了需要改的節點與 attributes，並不會整個頁面重新刷新：</p>\n<p><img src=\"/image/vdom-demo.gif\" alt=\"demo\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然沒辦法跟市面上實際的 VDOM 相提並論，但是從這簡單的實作可以很清楚的知道整個概念與要解決的問題，我覺得是蠻不錯的小練習，接下來再去看 React 或是 Vue 在這方面的實作應該會比較有頭緒一些！\n最後再附上一次 codesandbox 連結讓想玩的人直接試試：<a href=\"https://codesandbox.io/s/434xr5mr84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05#mount-node-target\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog: Building a Simple Virtual DOM from Scratch - Jason Yu</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20346379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 源碼剖析系列 － 不可思議的 react diff</a></li>\n<li><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">深度剖析：如何实现一个 Virtual DOM 算法</a></li>\n</ol>","id":"17b2e615-d357-52dc-8e0a-2cd83e9dfcbb","fields":{"slug":"vdom-from-scratch"},"frontmatter":{"date":"2019-02-04T11:19:30.000Z","title":"從頭打造一個簡單的 Virtual DOM","tags":["virtual dom","react","javascript","web"],"type":"tech","slug":"vdom-from-scratch"},"timeToRead":13},"type":"tech"}},"staticQueryHashes":["2123680655"]}