{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/flip-your-animation","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/hB_QW-wDR1k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Massive fusion</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/hB_QW-wDR1k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在前端的世界中，如何優化 performance 一直都是很重要的議題，也常常被拿來當作評斷前端工程師能力的一個依據。效能調教有許多方面可以探討，但最主要的重點就是希望使用者在操作網站時，不會感受到頁面跳動，尤其是當網站有動畫效果時，些微的跳動就會引起使用者注意。</p>\n<p>大概在去年的時候，同事為了解決 CSS Animation 在頁面上的不順暢，研究了不少 hack 技巧，其中一個讓我覺得很特別的就是今天的主角：FLIP。</p>\n<p>FLIP 技巧已經出來好幾年了，但我也是去年才知道，今天這篇算是個複習與回顧，順便分享給還不知道此技巧的讀者。</p>\n<h2 id=\"什麼是-flip為什麼我們需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-flip%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 flip為什麼我們需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 FLIP？為什麼我們需要它？</h2>\n<p>在開始介紹 FLIP 之前，必須先說明一下我們在製作 CSS 動畫時，可能會遭遇的效能問題。</p>\n<p>舉例來說，今天我們想要製造一個如下效果的動畫：</p>\n<p><img src=\"/image/flip-bad-sample.gif\" alt=\"Bad animation\">\n<a href=\"https://codepen.io/arvin0731/pen/wYXJdv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code link</a></p>\n<p>我們通常會需要調整 DOM 元素的位置與大小，而這類的操作會造成瀏覽器偵測到潛在的 Layout 改變，而重新從 pixel pipeline 的 Layout 階段開始 reflow 與 repaint，若同時在這階段進行其他 js 操作或是頁面互動，就會降低 fps，也就代表著頁面可能會掉幀，造成視覺上的跳動。</p>\n<p>當然在目前硬體設備越來越強大的狀態下，其實像上圖中的動畫很難會有問題，但若是背後有其他繁重的 js 在運作，還是有可能出現下面這樣的 fps 狀態：</p>\n<p><img src=\"/image/flip-bad-jank.png\" alt=\"Jank FPS\"></p>\n<p>解決方法通常就是要想辦法將這類花費昂貴的動畫改用 <code class=\"language-text\">transform</code>、<code class=\"language-text\">opacity</code> 來製作，讓動畫的進行能在 Composite 階段進行即可，不須動到 Layout。</p>\n<p>這時候就可以引入 FLIP 技巧來幫忙了！透過 FLIP 可以將那些會導致 Layout 更動的動畫，轉成以 <code class=\"language-text\">transform</code> 這樣的屬性來達成。</p>\n<h2 id=\"flip\" style=\"position:relative;\"><a href=\"#flip\" aria-label=\"flip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h2>\n<p>如果你直接 google 搜尋 FLIP，可能會查到滑板教學；搜尋 FLIP CSS，應該會出現卡片翻轉的動畫教學。</p>\n<p>那到底 FLIP 跟網頁動畫的優化有什麼關係呢？</p>\n<p>FLIP 其實是四個字的組合：<strong>F</strong>irst, <strong>L</strong>ast, <strong>I</strong>nvert, <strong>P</strong>lay：</p>\n<ul>\n<li><strong>F</strong>irst：在 FLIP 技巧中，我們需要先記錄下動畫元件的初始狀態。</li>\n<li><strong>L</strong>ast：接著進行一些運算後，套用動畫的最終狀態在動畫元件上，並且將完成動畫後的狀態記錄下來。</li>\n<li><strong>I</strong>nvert：FLIP 最主要的 hack 就是發生在這個階段。根據前兩個步驟，我們可以知道該動畫物件在動畫期間的位置變化，接著利用 <code class=\"language-text\">transform</code> 與 <code class=\"language-text\">scale</code>，將物件從動畫結尾位置移動回初始狀態的地點。</li>\n<li><strong>P</strong>lay：在最後的步驟時，元件已經被我們 <code class=\"language-text\">transform</code> 回起始點了，這時只要將 <code class=\"language-text\">transform</code> 屬性移除，並加上 <code class=\"language-text\">transition</code> 的效果，我們就能完美的消除原先昂貴的 Layout change，改以能擁有獨自 Layer 的 <code class=\"language-text\">transform</code> 來處理動畫效果。</li>\n</ul>\n<p>文字敘述可能不夠好懂，<a href=\"https://twitter.com/davidkpiano\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid</a> 做的這個範例應該就能非常清楚的說明 FLIP 原理：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"EbwrQQ\" data-default-tab=\"result\" data-user=\"davidkpiano\" data-pen-title=\"How the FLIP technique works\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/davidkpiano/pen/EbwrQQ/\">How the FLIP technique works</a> by David Khourshid (<a href=\"https://codepen.io/davidkpiano\">@davidkpiano</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>解釋起來其實會發現跟 FLIP 這個字其實也是很吻合的，把元件從結束狀態 ”翻“ 回初始狀態。</p>\n<p>看到這邊可能會有些人覺得困惑，為什麼要這麼麻煩，不能直接用 <code class=\"language-text\">transform</code> 搭配 <code class=\"language-text\">transition</code> 將元件移動至結束位置嗎？</p>\n<p>的確是可以，但如果你今天是要優化原先寫好的動畫，變成要重新手動計算 <code class=\"language-text\">transform</code> 的位置與 <code class=\"language-text\">scale</code> 的比例，是件麻煩的事，倒不如讓瀏覽器幫你處理這部分的計算，只要算出起點與終點位置的差異即可。</p>\n<p>此外，將元件先移至結束位置，再 <code class=\"language-text\">transform</code> 回去起點的方式，可以讓瀏覽器先知道這個動畫會走的過程，據說有助於更快的處理動畫。（但我沒有實際測試過，並非百分百確定有這種效果，也歡迎大家幫忙補充！）</p>\n<h2 id=\"接著我們實際做做看\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E5%AF%A6%E9%9A%9B%E5%81%9A%E5%81%9A%E7%9C%8B\" aria-label=\"接著我們實際做做看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們實際做做看</h2>\n<p>依照 FLIP 原則，我們將一開始的動畫做點調整：</p>\n<ul>\n<li><strong>F</strong>irst：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Fisrt: 記錄初始狀態</span>\n<span class=\"token keyword\">const</span> collapsed <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>L</strong>ast：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 進行運算, 套用動畫結尾的 css style</span>\nelem<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Last: 紀錄結束狀態</span>\n<span class=\"token keyword\">const</span> expanded <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>I</strong>nvert：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// INVERT</span>\n<span class=\"token comment\">// 根據在 F 與 L 紀錄的位置，我們算出其位置差距 (top 與 left)</span>\n<span class=\"token keyword\">const</span> invertedTop <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedLeft <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 大小的部分則是用寬高差去計算 scale 的比例</span>\n<span class=\"token keyword\">const</span> invertedWidth <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedHeight <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 設定 transform origin，代表動畫要從哪裡開始</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transformOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'top left'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 將算好的差距 apply 到 transform 屬性上</span>\n<span class=\"token comment\">// 這樣就能將元件 ”翻“ 回初始位置</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'translate('</span> <span class=\"token operator\">+</span> invertedLeft <span class=\"token operator\">+</span> <span class=\"token string\">'px, '</span> <span class=\"token operator\">+</span> invertedTop <span class=\"token operator\">+</span> <span class=\"token string\">'px) scale('</span> <span class=\"token operator\">+</span> invertedWidth <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> invertedHeight <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>P</strong>lay：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// PLAY</span>\n<span class=\"token comment\">// 利用 Raf，在下個 frame 開始時再做動畫</span>\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 設定 transition，並移除 transform，讓他再 \"翻\" 到結尾位置</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">'550ms ease-out'</span><span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>經由 FLIP 技巧調整過後的動畫：</p>\n<p data-height=\"713\" data-theme-id=\"dark\" data-slug-hash=\"EdRwmr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-pen-title=\"FLIP - good\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/EdRwmr/\">FLIP - good</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>我一開始看到這個實作時，稍微有點困惑，覺得為什麼可以直接先加上結尾狀態的 css，而不會讓元件真正更動？</p>\n<p>原因很簡單，就在於這些動作是在瀏覽器繪製下一個 frame 之前就做完的，在瀏覽器真正過了 16ms，要開始繪圖時，我們已經 apply 了另一個繪圖需求，也就是 <code class=\"language-text\">transform</code>。所以並不會看到元間跑到結束位置的狀況。</p>\n<p>從下面這張圖應該會更好理解：</p>\n<p><img src=\"/image/flip-web-fps.png\" alt=\"FPS\">\n<a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>上排黑色箭頭代表每一次的 frame render，下排則是繪圖需求，而紅色可以想做是我們計算結尾位置的動作。可以明顯看到，在每次紅色箭頭的後面，真正開始繪圖前，都有新的繪圖需求會蓋過去，因此瀏覽器並不會渲染紅色箭頭的部分。</p>\n<p>另外這邊要注意兩件事，第一個是 F、L、I 的時間需要掌控在 <strong>100ms</strong> 之內，根據 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Paul Lewis 的 FLIP 介紹文章</a>，使用者在做了互動後，到感知動畫的發生，這中間可以有 <code class=\"language-text\">100ms</code> 的空隙，我們只要能在這 100ms 中將初始與結尾位置計算完，並翻回初始點，使用者就不會感受到任何差異。</p>\n<p><img src=\"/image/flip-user-perception.jpg\" alt=\"user perception\">\n<a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>最後，在這個例子中，我需要利用 <code class=\"language-text\">transitionend</code> 這個事件，在動畫的最後把 <code class=\"language-text\">transition</code> 拿掉，否則下一次要計算動畫終點位置時 <code class=\"language-text\">elem.classList.add('expanded');</code>，就會產生 <code class=\"language-text\">transition</code> 效果，那不是我們要的。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>FLIP 技巧的概念很簡單，但實作起來的確會增加不少程式碼，但好在有不少套件可以使用，也能搭配 Web Animations API (<a href=\"https://github.com/web-animations/web-animations-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">polyfill</a>) 來開發。比較推薦的是 <a href=\"https://github.com/davidkpiano/flipping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid 的 flipping.js</a>，他在去年也有寫了一篇文章來介紹 <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a>，其中還有講到如何將 FLIP 應用在兩個獨立的元件上，寫得很棒很清楚，推薦大家直接去閱讀！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a></li>\n<li><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></li>\n<li><a href=\"https://medium.com/outsystems-experts/flip-your-60-fps-animations-flip-em-good-372281598865\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your 60 FPS Animations, FLIP ’Em Good</a></li>\n<li><a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your Animations</a></li>\n</ol>","fields":{"slug":"flip-your-animation"},"frontmatter":{"title":"FLIP 技巧總複習","date":"10-20-2018","tags":["css","javascript","flip","animation"]},"timeToRead":7}},"pageContext":{"slug":"flip-your-animation","prev":{"excerpt":"『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』","html":"<blockquote>\n<p>『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近公司同事組了 Design pattern 的讀書會，剛好這週研讀到 <code class=\"language-text\">Visitor Pattern</code> 時，同事介紹說我們每天在用的工具 Babel 就是採用 <code class=\"language-text\">Vistor Pattern</code>，透過 <code class=\"language-text\">visitor</code> 拜訪 <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">AST (Abstract Syntax Tree)</code></a>，進而將程式碼進行對應轉換。</p>\n<p>這除了勾起我前陣子想要了解 <code class=\"language-text\">AST</code> 的想法外，也再度提醒我對於 Babel Plugin 背後的實作方式不太了解，只知道像是 ESLint, UglifyJS 或是 Webpack，他們的核心都是用到了 <code class=\"language-text\">AST</code> 來實現程式碼的檢查、分析與操作，但並不曉得實際上要如何使用。</p>\n<p>此外，我先前其實都沒有想過要自己寫 Babel Plugin，總覺得 Babel 的 Plugin 就是要很一般化，大家都能使用的，但其實不然啊，自己的專案或甚至是公司團隊內的專案，只要能有助於大家的工作效率，就算只給內部使用又何妨？明確定義好使用的情境跟 Style 即可。</p>\n<p>因此這次就決定花點時間來學習如何實作 Babel Plugin，並透過實作 Babel Plugin 的過程，一同了解 AST 的概念。</p>\n<h2 id=\"一直提到-ast到底什麼是-ast\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E7%9B%B4%E6%8F%90%E5%88%B0-ast%E5%88%B0%E5%BA%95%E4%BB%80%E9%BA%BC%E6%98%AF-ast\" aria-label=\"一直提到 ast到底什麼是 ast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一直提到 AST，到底什麼是 AST？</h2>\n<p>AST 的全文是 Abstract Syntax Tree，中文大多翻作抽象語法樹，主要是將我們 <strong>人類</strong> 所寫的程式語法，轉換成 <strong>程式</strong> 比較容易閱讀的語法結構，並以樹的資料結構來儲存。</p>\n<p>直接來個例子，先讓大家看看 <strong>給人類看的 code</strong> 與 <strong>給程式讀的 code</strong> 之間的差異：</p>\n<p><img src=\"/image/humancode-programcode.png\" alt=\"Human code vs Program code(AST)\"></p>\n<p>左邊的程式經過 Parser 的轉換後，就會產出右圖中的 AST。</p>\n<p>在遠古的 Nestcape 時代，對於 Javascript 的 AST 有許多種實作，而後來為了解決一致性的問題，<a href=\"https://github.com/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESTree</a> 這個組織定義了現今通用的 <a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a>。</p>\n<p>像是我們現在常用的 Babel 所使用的 AST 就是基於 ESTree 的規範延伸修改的。</p>\n<h3 id=\"那-babel-這些工具到底拿-ast-來做什麼呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3-babel-%E9%80%99%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%88%B0%E5%BA%95%E6%8B%BF-ast-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2\" aria-label=\"那 babel 這些工具到底拿 ast 來做什麼呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那 Babel 這些工具到底拿 AST 來做什麼呢？</h3>\n<p>稍稍回想一下，Babel 或是 ESLint 在我們平日的開發中扮演了什麼角色？</p>\n<p>情境大概是：</p>\n<blockquote>\n<p>你用 ES6 寫了一段 arrow function，而 Babel 會幫忙轉換成 ES5 的匿名函數，同時 ESLint 可能會顯示 Warning 告知你的括號前面必須要留有空格。</p>\n</blockquote>\n<p>這段描述當中，Babel 其實將你的 code 透過三個 stage 來處理：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#stages-of-babel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>parse</strong>, <strong>transform</strong>, <strong>generate</strong>.</a></p>\n<p>而其中，AST 其實就出現了兩次：</p>\n<!-- 放置圖片 code to AST and Modefied AST to code -->\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"The role AST plays in babel\"></p>\n<ul>\n<li>\n<p><strong>Parse stage</strong></p>\n<p>你寫的 js code 會經由 js parser 轉換為 AST，當然其中會透過 <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lexical Analysis</a> 與 <a href=\"https://en.wikipedia.org/wiki/Parsing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Syntactic Analysis</a>。</p>\n</li>\n<li>\n<p><strong>Transform stage</strong></p>\n<p>而這時 Babel plugin 與 ESLint plugin 就可以介入你的程式進行改造，<strong>幫忙轉換成 ES5 的匿名函數</strong>以及<strong>審視你的程式，決定是否要提示 Warning</strong> 的這兩個動作就是在這個階段發生的，我們將 Parser 解析後的 AST 改造成我們想要的樣子。</p>\n</li>\n<li>\n<p><strong>Generate stage</strong></p>\n<p>最後，改造完成的 AST 會再被 generator 轉換為一般的 code 輸出。</p>\n</li>\n</ul>\n<p>常用的 js parser 有很多種，像是 babylon, acorn, esprima 等等，而所謂的 Babel plugin 或是 ESLint plugin，則可以看作是一種 Transformer。</p>\n<h3 id=\"窺探一下-ast-的內容\" style=\"position:relative;\"><a href=\"#%E7%AA%BA%E6%8E%A2%E4%B8%80%E4%B8%8B-ast-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"窺探一下 ast 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>窺探一下 AST 的內容</h3>\n<p>在實作 Plugin 前，先了解一下 AST 的長相對之後會比較有幫助。</p>\n<p>開始之前先介紹兩個常用網站：</p>\n<ul>\n<li>\n<p><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></p>\n<p>超棒的網站，在上面可以邊看原始程式碼根據不同 Parser 所建構出來的 AST，也能切換不同 Transformer 來實作 Plugin 內容。</p>\n</li>\n<li>\n<p><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></p>\n<p>主要是將 AST 視覺化，對於理解整個程式碼的 AST 結構能有比較清楚 Overview。</p>\n</li>\n</ul>\n<p>不過我個人是覺得 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 就足夠了， <a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VISUALIZER</a> 雖然能看到圖像化的樹狀結構，但操作起來不是很順暢，也無法直接在上面撰寫 Transformer。所以下面都會以 <code class=\"language-text\">AST Exporler</code> 為使用工具來介紹。</p>\n<p>現在我們以一個比最開始稍稍複雜一點的簡單範例來解析，在這邊我們採用與 Babel 相同的 Parser - <a href=\"https://github.com/babel/babel/tree/master/packages/babel-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babylon7</a>：</p>\n<p>我們的原始程式碼如下，定義 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 兩個變數，以及一個 <code class=\"language-text\">add</code> function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一步一步來看，<code class=\"language-text\">const a = 2</code> 的 AST 會長這樣：</p>\n<p><img src=\"/image/ast-explorer-sample-1.png\" alt=\"AST Explorer example 1\"></p>\n<p>你的程式碼在 AST 當中，會被拆解成各種 node 來存放表示，而每一個 node 都有自己的 type，各種 type 有其特定的屬性參數，以上圖為例：</p>\n<p><code class=\"language-text\">const</code> 在 AST 中就是ㄧ個 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">VariableDeclaration</code> 的 node，這個 node 必須包含兩種屬性， <code class=\"language-text\">declarations</code> 與 <code class=\"language-text\">kind</code>：</p>\n<p><code class=\"language-text\">kind</code> 很好理解，意指我們的 <code class=\"language-text\">VariableDeclaration</code> 可以有三種類型（<code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>）， 而 <code class=\"language-text\">declarations</code> 看起來就是存放你所宣告的變數，像 <code class=\"language-text\">a = 2</code>，但他是 <code class=\"language-text\">Array of VariableDeclarator</code>，我們不是只有宣告一個變數嗎？</p>\n<p>其實是要應付這種寫法：<code class=\"language-text\">const a = 2, b = 3</code>，需要能接收多個 <code class=\"language-text\">VariableDeclarator</code>。</p>\n<p>而 <code class=\"language-text\">VariableDeclarator</code> 這種 type 的 node 代表的就是 <code class=\"language-text\">a=2</code> 這種宣告式，其中包含兩個屬性 <code class=\"language-text\">id</code> 與 <code class=\"language-text\">init</code>，我們將其展開看看：</p>\n<p><img src=\"/image/ast-explorer-sample-2.png\" alt=\"AST Explorer example 2\"></p>\n<p><code class=\"language-text\">id</code> 屬性所接受的是 <code class=\"language-text\">identifier</code> 這個 type 的 node，代表該 <code class=\"language-text\">VariableDeclarator</code> 的 identity。該 node 只需要一個 <code class=\"language-text\">name</code> 屬性，也就是他的名稱，在這邊的例子中當然就是 <code class=\"language-text\">a</code> 囉。而 <code class=\"language-text\">init</code> 則是這個 <code class=\"language-text\">VariableDeclarator</code> 的初始值，因為我們程式中是初始 <code class=\"language-text\">a</code> 為 <code class=\"language-text\">2</code>，所以這個 <code class=\"language-text\">init</code> 屬性就會連到一個 <code class=\"language-text\">NumericLiteral</code> type 的 node，擁有 <code class=\"language-text\">value</code> 為 <code class=\"language-text\">2</code> 的屬性。</p>\n<p>此外，眼尖的讀者想必都有發現到，每個 node 都有 <code class=\"language-text\">start</code>, <code class=\"language-text\">end</code> 與 <code class=\"language-text\">loc</code> 這三個屬性，這是用來代表該 node 在程式的第幾行第幾列。</p>\n<p>看到這邊應該對於 AST 的結構會有點感覺了，基本上就是 Parser 會先將你的程式切成多種 tokens，接著依照類別來區分是哪種 node，最後從程式結構上一一把 node 串接，形成一顆完整的 Abstract Syntax Tree。如果覺得剛剛用 AST Explorer 轉化的格式不夠清楚，這邊補充一下同樣程式用 VISUALIZER 出來的 AST 長相，應該會對 AST 的結構更有感受：</p>\n<p><img src=\"/image/ast-visualizer.png\" alt=\"ast visualizer\"></p>\n<p>範例程式中我們還有使用到 <code class=\"language-text\">function</code>，他長出的 AST 與宣告變數在 node type 上有不少差異，但大體結構就如同上面介紹的一般，這邊就不再贅述，相信看到這邊的讀者也有能力自己去 AST Explorer 玩玩看了！寫些簡單的程式，看看他們經由 Parser 轉換後，會產生怎樣的 AST，每種語法所對應的 node type 又是什麼。</p>\n<h2 id=\"懂了-ast來實際應用一下開始製作-babel-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%87%82%E4%BA%86-ast%E4%BE%86%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8%E4%B8%80%E4%B8%8B%E9%96%8B%E5%A7%8B%E8%A3%BD%E4%BD%9C-babel-plugin-%E5%90%A7\" aria-label=\"懂了 ast來實際應用一下開始製作 babel plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>懂了 AST，來實際應用一下，開始製作 Babel Plugin 吧！</h2>\n<p>出發，總要有個方向。</p>\n<p>要做 Plugin 也得要先決定要做什麼。</p>\n<p>剛好在工作上常常會用到 <code class=\"language-text\">React-intl</code> 這個套件來幫忙處理 i18n，他的使用方法還算簡單，當一些基本設定做好以後，你只要用其提供的一個特殊元件 <code class=\"language-text\">&lt;FormattedMessage /></code>，放入對應文字的 id 即可，像是： <code class=\"language-text\">&lt;FormattedMessage id=\"#words-need-i18n\" /></code> 。</p>\n<p>雖然實際上已經非常簡單了，但我還想更懶一點，能不能直接輸入 <code class=\"language-text\">{'#words-need-i18n'}</code> 就好呢？</p>\n<p>像是能把：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>轉換成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedMessage</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>words-need-i18n<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以！自己寫 Plugin 就可以！</p>\n<h3 id=\"撰寫-babel-plugin-的起手式\" style=\"position:relative;\"><a href=\"#%E6%92%B0%E5%AF%AB-babel-plugin-%E7%9A%84%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-label=\"撰寫 babel plugin 的起手式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>撰寫 Babel Plugin 的起手式</h3>\n<p>先到 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 開啟一個新的頁面，接著在上方列表選取好 Parser (Babylon7) 與 Transformer (Babel7)，並在旁邊的程式區塊內寫上一點範例程式，就是你預期能被 Babel 認得並轉換的\"新\"程式碼，以我的例子就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/step-1-babel-plugin.gif\" alt=\"Babel plugin step 1\"></p>\n<p>接著看看你的 AST 長什麼樣子，想想你該怎麼修改他：</p>\n<p><img src=\"/image/step-2-babel-plugin.png\" alt=\"Babel plugin step 2\"></p>\n<p>出現沒看過的 type 了！沒關係，在剛開始撰寫 Plugin 的過程中一定會遇到許多沒看過的 type 或是不清楚他的屬性型別，好在 babel 有一份非常詳細的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook</a> 與 <a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 可以查閱，只要到上面 <code class=\"language-text\">ctrl + f</code> 一下，應該都能在上頭找到你所需要的知識。</p>\n<p>準備好測試程式碼、了解測試程式碼的 AST、也有了工具書可以查，就能毫無懸念的開始撰寫 Babel plugin 了。</p>\n<h3 id=\"babel-plugin-之-transformvisitorstraversal\" style=\"position:relative;\"><a href=\"#babel-plugin-%E4%B9%8B-transformvisitorstraversal\" aria-label=\"babel plugin 之 transformvisitorstraversal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 之 Transform、Visitors、Traversal</h3>\n<p>還記得我在最一開始說過，Babel 大量使用到了 Visitor pattern 嗎？就是用在這邊！</p>\n<p>之所以 Babel 能夠輕易解析你的程式碼，並且進行各種修改操作，依賴的就是各種 visitors 在 AST 上進行 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">traverse</a>，當遇到對應的 node 時，visitor 就會做出相對的操作，進而將輸入的程式碼 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-generator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transform</a> 成預期的結果，這就是整個 Babel plugin 的實作核心。</p>\n<h3 id=\"babel-plugin-的基礎結構\" style=\"position:relative;\"><a href=\"#babel-plugin-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%B5%90%E6%A7%8B\" aria-label=\"babel plugin 的基礎結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 的基礎結構</h3>\n<p>若你剛剛有照著我的說明，在 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上方列表選取好 Parser 與 Transformer，那左下角應該會出現類似下方的程式區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"ast-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上的預設 template，基本的 Babel plugin 也就是長這樣。</p>\n<p>你會接受一個 <code class=\"language-text\">babel</code> 物件，其中我們會需要的是 <code class=\"language-text\">babel.types</code>，在之後新增修改 node 時會不斷地用到，因此最好存成一個變數，省去 chain lookup。</p>\n<p>而基本上你要做的就是回傳一個 <code class=\"language-text\">visitor object</code>，其中定義以 node type 為名的 funciton，接收兩種參數：<code class=\"language-text\">path</code> 與 <code class=\"language-text\">state</code>：</p>\n<ul>\n<li>path\npath 代表的是在 traverse AST 過程中，連接 node 之間的邊。所以你可以用 <code class=\"language-text\">path.node</code> 取得目前的節點，也可以用 <code class=\"language-text\">path.parent</code> 取得父節點。\n此外，path 還能透過 <code class=\"language-text\">path.traverse</code> 來在原有的 visitor 內進行 nested visiting，這對於想要<strong>讓 visitor 在某個特定 visitor 執行後再執行</strong>時很有幫助，可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 範例</a>。</li>\n<li>state\nstate 的用法在 handbook 上也沒有說得很明確，我的理解是一個貫串整個 traverse 過程的 global state，你可以在任意階段修改 state。其中也包含你想讓使用 plugin 的使用者傳入的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#plugin-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">options 設定</a>。</li>\n</ul>\n<p>以上述 template 為例，你的 visitor 在遇到 type 為 <code class=\"language-text\">Identifier</code> 的節點時，就會執行 <code class=\"language-text\">path.node.name = path.node.name.split('').reverse().join('');</code>，也就是將該 <code class=\"language-text\">Identifier</code> node 的名稱給顛倒過來。</p>\n<p>此外，Visitor 在 traverse AST 的過程中，會在節點上進進出出，所以其實我們是可以定義 <code class=\"language-text\">enter</code> 與 <code class=\"language-text\">exit</code> 的函式來進行操作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Identifier<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entered!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exited!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#visitors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 中有更多詳細介紹</a></p>\n<h3 id=\"動手撰寫自己的-visitor\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E6%89%8B%E6%92%B0%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84-visitor\" aria-label=\"動手撰寫自己的 visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動手撰寫自己的 Visitor</h3>\n<p>知道基礎架構後，就可以開始撰寫 Visitor 了！</p>\n<p>但你可能會有點沒頭緒該怎麼開始，因為你不知道要從哪個 node type 的 visitor function 開始寫。這就是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 的好處了，你只要將游標停放在編譯前的程式碼的任意位置上，右邊的 AST 樹就會自動 Focus 到對應的節點上頭（前提是要記得選取上方的 <code class=\"language-text\">AutoFocus</code>，預設會是啟用的）：</p>\n<p><img src=\"/image/ast-explorer-find-node.gif\" alt=\"Find the node we need\"></p>\n<p>以範例來說，我們要轉換的是 <code class=\"language-text\">{'#words-need-i18n'}</code>，將游標指上去後發現他是一個 type 為 <code class=\"language-text\">StringLiteral</code> 的 node，這就是我們要撰寫的 visitor function！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"i18n-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// some logic in here</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下來把需要的邏輯填寫上去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'JSXExpressionContainer'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>\n          t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXElement</span><span class=\"token punctuation\">(</span>\n              t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXOpeningElement</span><span class=\"token punctuation\">(</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FormattedMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span>\n                      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- 解釋前四行  然後畫個 path 的圖 -->\n<p>在前面有介紹到，<code class=\"language-text\">path</code> 代表連接著目前被拜訪到的節點，所以我們能用 <code class=\"language-text\">path.node.value.startsWith('#')</code> 來檢查目前節點的值是否為我們想要的（開頭為 hashtag）。但由於 <code class=\"language-text\">StringLiteral</code> 感覺得出來是到處都會出現的 node type，所以我們需要設立一些條件：當 <code class=\"language-text\">path.parent.type !== 'JSXExpressionContainer'</code> 時，我們就 bypass 這次的 visit 操作。所謂的 <code class=\"language-text\">JSXExpressionContainer</code> 就是在 jsx 中的 <code class=\"language-text\">{ }</code>。</p>\n<p>當條件都成立時，也就代表我們的 visitor 成功找到我們想轉換的程式碼 <code class=\"language-text\">{'#words-need-i18n'}</code>。這時聰明如你，一定會想說那就把 <code class=\"language-text\">path.node</code> 替換掉就好了吧！</p>\n<p>但是，<code class=\"language-text\">path.node</code> 目前指到的是 <code class=\"language-text\">StringLiteral</code>，也就是 <code class=\"language-text\">#words-need-i18n</code>，外面還有一層 <code class=\"language-text\">JSXExpressionContainer</code>，我們不能直接使用 <code class=\"language-text\">path.node.replaceWith</code> 來替換程式碼，我們要連同上一層都一起換掉，因此這邊需要使用 <code class=\"language-text\">path.parentPath.replaceWith</code>。以圖像表示的話大概像這樣：</p>\n<p><img src=\"/image/ast-explorer-path-replace.png\" alt=\"需要找到 parent path 來直接從上層替換程式碼節點\"></p>\n<!-- 放個 gif 說明如何找出要 create 什麼 node, 以及去哪裡找合法參數 （提及 log 訊息不一定看得出來）-->\n<p>接著，<code class=\"language-text\">replaceWith</code> 接收你要替換的節點當作參數，而這時我們最一開始宣告的 <code class=\"language-text\">const { types: t } = babel;</code> 就派上用場啦！</p>\n<p><code class=\"language-text\">babel.types</code> 可以幫我們創建出各種 type 的 node，也提供許多 type checking 的 function，像是剛剛我們檢查 <code class=\"language-text\">path.parent.type</code> 的地方其實應該更改為 <code class=\"language-text\">!t.isJSXExpressionContainer(path.parent)</code>。更多關於 <code class=\"language-text\">babel.types</code> 的操作可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-transformation-operations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 上的說明</a></p>\n<p>但到這邊問題又來了，我們怎麼知道要創建什麼 node 呢？</p>\n<p>我一開始也不知道，但抬頭想一想，AST Explorer 不是就會幫我們轉換 AST 嗎？那就把我們預期的結果程式碼也貼上去，不就知道他的 AST 長相了嗎？</p>\n<p>大膽將 <code class=\"language-text\">&lt;FormattedMessage id={'#words-need-i18n'}></code> 貼上去後，就能得到其 AST 結構：</p>\n<p><img src=\"/image/ast-explorer-final-ast-format.png\" alt=\"預期結果的 AST 結構\"></p>\n<p>接著呢，就到 <strong><a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 官網的 docs</a>  裡面去查詢每一種需要創建的 type，各自要填入哪些參數</strong>，舉例來說，<code class=\"language-text\">&lt;FormattedMessage></code> 會是一個被 <code class=\"language-text\">JSXOpeningElement</code> 包起來，從 <a href=\"https://babeljs.io/docs/en/babel-types#jsxopeningelement\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 能看到非常詳細的說明：</p>\n<p><img src=\"/image/ast-explorer-docs.png\" alt=\"JSXOpeningElement\"></p>\n<p>我們要填入三個參數: <code class=\"language-text\">name</code>, <code class=\"language-text\">attributes</code> 與 <code class=\"language-text\">selfClosing</code>，第一與第三個很好理解，中間的 <code class=\"language-text\">attributes</code> 裡面包含了其他的 type，這時你就需要再繼續往下查，直到完成所有需求為止。</p>\n<p>照著這樣的思路，一一將 AST 內的結構轉換到你的 plugin 程式碼內，就大功告成啦！</p>\n<p><img src=\"/image/ast-explorer-final-result.png\" alt=\"最終結果\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>當然這只是個很簡陋的實作，不過也算是把 plugin 的製作概念呈現了一遍，並稍加了解了 AST 的重要性與實用性。</p>\n<p>在實作你所想要的 plugin 功能時，勢必會遇到複雜得多的狀況，建議大家還是直接在 handbook 上查看最直接，上面有更詳細的 API 介紹與教學，包含 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-template</a> 、 babel-types 的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#builders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">builder</a> 與 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#validators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Validators</a>，更有 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Best Practices</a> 可供參考。也可以看看高手們的<a href=\"https://github.com/kentcdodds/babel-plugin-preval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a></p>\n<p>最後，不知道有沒有讀者會覺得整個 Plugin 的邏輯操作與大家熟悉的 jQuery 有點類似？都是選取到某個元件後，就針對該元件進行更動：<code class=\"language-text\">$('StringLiteral').textContent = '&lt;FormattedMessage id={'xxx'}>'</code></p>\n<p>我在查資料的過程中發現一篇<a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常有趣又很清楚的介紹</a>，其中就是以 jQuery 來做類比（節錄其 slides 中的一段）：</p>\n<p><code class=\"language-text\">Babel:Javascript :: jQuery:DOM</code></p>\n<p><strong>jQuery 幫助你改變 DOM，而 Babel 幫助你轉化 Javascirpt</strong></p>\n<p>實在是很貼切的比喻不是嗎？</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/kentcdodds/a-beginners-guide-to-asts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Writing custom Babel and ESLint plugins</a></li>\n<li><a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How writing babel-plugin is like wrigint jQuery</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel Plugin Handbook</a></li>\n<li><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></li>\n<li><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></li>\n<li><a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a></li>\n</ol>","id":"89ec09ae-24c7-5115-8444-f16260372725","fields":{"slug":"visit-ast-with-babel-plugin"},"frontmatter":{"date":"2018-08-25T18:32:14.000Z","title":"透過製作 Babel-plugin 初訪 AST","tags":["es6","javascript","babel","ast","pattern"],"type":"tech","slug":"visit-ast-with-babel-plugin"},"timeToRead":16},"next":{"excerpt":"好歌分享：San Cisco - Awkward","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/ukNOaKeUEQY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - Awkward</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ukNOaKeUEQY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前陣子 netflix 上了最新一季的夜魔俠，其中的反派角色很愛在家中擺設畫作，有了藝術品襯托，壞人在我的腦海裡突然就變成看似很有深度的角色。這讓我覺得應該也該擺點畫作在家裡，看看能不能提高自己的層次。</p>\n<p>而宅宅如我當然無法做如此的投資，不過如果能夠自己用 Web 技術產生一些藝術作品，然後投影在家中呢？應該很酷吧！\n然後就在 codepen 上發現了一個有趣的東西：</p>\n<p data-height=\"416\" data-theme-id=\"29194\" data-slug-hash=\"XZqwaq\" data-default-tab=\"result\" data-user=\"jh3y\" data-pen-title=\"Randomly generate Mondrian Art with CSS Grid + Vue 🎨\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/jh3y/pen/XZqwaq/\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a> by Jhey (<a href=\"https://codepen.io/jh3y\">@jh3y</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來煞有其事啊！原來簡單利用 CSS Grid 就能排出這樣的藝術圖畫！ 查了一下這叫做蒙德里安 (mondrian art)。</p>\n<p>臨摹也算是一種學習，原作者是使用 Vue.js 與 Stylus 製作，今天我們就簡單利用 React 來重新實作一次並說明原理吧！</p>\n<h2 id=\"css-grid-小複習\" style=\"position:relative;\"><a href=\"#css-grid-%E5%B0%8F%E8%A4%87%E7%BF%92\" aria-label=\"css grid 小複習 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid 小複習</h2>\n<p>如果有不了解 CSS Grid 的讀者，可以先去看我先前寫的介紹 - <a href=\"https://blog.techbridge.cc/2017/02/03/css-grid-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">與 CSS Grid 的第一次接觸</a> 或是很完整的 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a>。</p>\n<p>這邊簡單總結一下 CSS Grid 的特性：</p>\n<p>相比於 <code class=\"language-text\">Flexbox</code> 是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 可以理解為 <code class=\"language-text\">two-dimentional layout solution</code>。</p>\n<p>也就是說，你能夠在二維平面上，透過網格系統來擺放你的元件位置。</p>\n<p>現在最新版的 Chrome 與 Firefox 都已經支援 CSS Grid Layout 了，並且在 devtool 中能清楚看到網格狀態：</p>\n<p><img src=\"/image/css-grid-in-devtools.png\" alt=\"css grid in devtools\"></p>\n<h2 id=\"實作前的小分析\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E5%89%8D%E7%9A%84%E5%B0%8F%E5%88%86%E6%9E%90\" aria-label=\"實作前的小分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作前的小分析</h2>\n<p>不管你對 CSS Grid 有沒有概念，看了上面的圖應該也很快可以猜出其原理。</p>\n<p>主要就是讓整個 <code class=\"language-text\">container</code> 切割成數個小方塊，接著隨機產生出多個區塊，每個區塊隨機橫跨不同的行數與列數，並填上不同顏色，將 <code class=\"language-text\">container</code> 填滿即可。</p>\n<p>有點像是七巧板的感覺，只是我們的板子都是矩形~ 不過聽起來簡單，實作上還是有些細節需要注意的。</p>\n<h1 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作！</h1>\n<p>第一步是先定義出我們這幅畫作的畫框，也就是 CSS Grid 中的 <code class=\"language-text\">container</code>，透過這個 <code class=\"language-text\">container</code> 來定義好整個網格系統：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.MondrainArt</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px solid #070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"grid\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"250px\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這裡面發生了幾件事情：</p>\n<p>我們用 <code class=\"language-text\">grid-template-columns</code> 與 <code class=\"language-text\">grid-template-rows</code> 先規範我們的 container 內要有多少欄與列，以及每格的長寬。</p>\n<p>由於每個格子的大小我們要固定，所以使用 <code class=\"language-text\">repeat()</code>，並且採用 <code class=\"language-text\">&lt;auto-repeat> values</code> 的語法，這樣做的好處是我們只要固定好 <code class=\"language-text\">container</code> 的寬高，不用去限制 grid 的 column 數與 row 數，讓 CSS Grid 幫我們計算出不會 overflow 的數目。<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN: repeat()</a></p>\n<p>至於要用 <code class=\"language-text\">auto-fit</code> 或是 <code class=\"language-text\">auto-fill</code>， 在這邊的例子中其實都可以，因為這兩者的差別主要在於寬度改變時，針對多出的空間在運用上有不同的方式：</p>\n<p>以 <code class=\"language-text\">auto-fit</code> 來說，視覺上的效果是會將原本 column 內的 item 寬度都平均拉長，但實際上還是有新增 column 數，只是因為 content 是空的，所以空間被壓縮了：</p>\n<p><img src=\"/image/auto-fit.gif\" alt=\"auto-fit\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>而 <code class=\"language-text\">auto-fill</code> 則是不管是否有新的 content 在，新增的 column 數都會佔有一樣的空間大小，並不會去延伸原有 item 的寬度：</p>\n<p><img src=\"/image/auto-fill.gif\" alt=\"auto-fill\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>接著，利用 <code class=\"language-text\">gap: 10px 10px</code> 設定好每個格子間的空隙；然後給定一個固定的寬高並將 overflow hidden 起來。</p>\n<p>到這邊為止，我們可以先在 <code class=\"language-text\">container</code> 內放入數個 grid item，然後每個 item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 皆設置為 <code class=\"language-text\">span 1</code>，也就是都只占 grid 的中的一個單位。如此一來就能看到目前的格子樣式：</p>\n<iframe src=\"https://codesandbox.io/embed/ww21ow2nvl\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"隨機產生不同大小的區塊\" style=\"position:relative;\"><a href=\"#%E9%9A%A8%E6%A9%9F%E7%94%A2%E7%94%9F%E4%B8%8D%E5%90%8C%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%80%E5%A1%8A\" aria-label=\"隨機產生不同大小的區塊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>隨機產生不同大小的區塊</h2>\n<p>有了基礎的格子後，看起來我們接著只要把目前 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 改造一下就大功告成了吧!?</p>\n<p>馬上來試試！</p>\n<p>首先，先做點數學，我們剛剛設定每個格子是 <code class=\"language-text\">50px</code>，而每個格子的間距 <code class=\"language-text\">gap</code> 為 <code class=\"language-text\">10px</code>，而寬度為 <code class=\"language-text\">250px</code>，所以每一個 <code class=\"language-text\">row</code> 最多就是 <code class=\"language-text\">4</code> 個格子。（用肉眼看上圖其實就知道了...）</p>\n<p>為什麼要算這個呢？</p>\n<p>因為我們要讓 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 隨機分配，但要在正確的範圍內，更改上面範例內的 <code class=\"language-text\">generateBlocks()</code> 如下，並加上個 <code class=\"language-text\">colorMap</code> 來隨機分配顏色：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(242, 245, 241)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(214, 0, 20)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">generateBlocks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blocks-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        gridColumn<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        gridRow<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        backgroundColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorMap<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以得到以下結果：</p>\n<iframe src=\"https://codesandbox.io/embed/934p8px7pw\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>疑？好像跟想像不太一樣？</p>\n<p>的確是隨機產生了橫跨不同欄位數的區塊，但是大小好像不太對啊！</p>\n<p>那是因為我們沒辦法保證隨機產生的 grid-area 都能剛剛好接續著各自的起始點排滿滿的，所以可能發生下列情況：</p>\n<p><img src=\"/image/auto-col-row.png\" alt=\"auto-col-row\"></p>\n<p>在右下角實際產生的黃色區塊前，<code class=\"language-text\">row5</code> 與 <code class=\"language-text\">row6</code> 的位置實際上是空的，所以 grid layout 會將其當作為高度 0 的 item。</p>\n<p>好在，我們可以利用 <code class=\"language-text\">grid-auto-columns</code> 與 <code class=\"language-text\">grid-auto-rows</code> 來解決！<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p>我們在 <code class=\"language-text\">container</code> 加上以下設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">grid-auto-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>這樣就會讓 grid layout 知道空的欄位我們想要自動填補上 <code class=\"language-text\">50px</code> 的大小。</p>\n<p>基本上到此為止就完成了一個不錯的版本：</p>\n<p><img src=\"/image/no-fill-algo.png\" alt=\"no-fill-algo\"></p>\n<p>但總還是覺得怪怪的，好像“不夠密”。</p>\n<p>有些區塊如果能換個位置似乎會好看一點？</p>\n<p>由於我們並沒有明確指定每個區塊在 grid 中的確切位置，grid layout 會採用一個 <code class=\"language-text\">auto-placement algorithm</code> 來擺放，而我們能透過 <code class=\"language-text\">grid-auto-flow</code> 這個屬性來更改其排放的規則。<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p><code class=\"language-text\">grid-auto-flow</code> 有 <code class=\"language-text\">row</code>, <code class=\"language-text\">column</code> 與 <code class=\"language-text\">dense</code> 這三種值可以設置，從字面上來看就能理解各自代表的意思，如果你設定為 <code class=\"language-text\">row</code> 或 <code class=\"language-text\">column</code>，那 grid layout 會盡量幫你的 item 照著列與行的方向照順序排放；而 <code class=\"language-text\">dense</code> 則是會盡量把空間塞滿，小的 item 就可能會先排在大的 item 之前，跟你在 html dom 上的排放位置可能有所落差，對於 accessibility 並不好，但以我們的 case 來說，不需要考慮那些，就大膽採用 <code class=\"language-text\">dense</code> 就對了！</p>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p>最後我們可以再加上一點點動畫效果，讓 react component 每五秒重新 render 一次新的圖案，這樣投放出來以後，就好像你有一幅不斷自行變化的藝術品一般了！</p>\n<iframe src=\"https://codesandbox.io/embed/420rv1v86w\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>有趣的作品實作起來可能原理很簡單，但也是有一些眉眉角角需要注意。透過這次的實作，重新複習了一次 CSS Grid 的好處與用法，也期許自己未來能夠有更多的時間去思考與創造這樣的作品！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"https://codepen.io/jh3y/pen/XZqwaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","id":"4d5a489b-0f84-5fcb-a2e7-7a727e0b5e73","fields":{"slug":"css-grid-art-generator"},"frontmatter":{"date":"2018-11-15T00:18:37.000Z","title":"用 CSS Grid 創造蒙德里安藝術","tags":["css","grid","mondrian","react"],"type":"tech","slug":"css-grid-art-generator"},"timeToRead":7},"type":"tech"}},"staticQueryHashes":["2123680655"]}