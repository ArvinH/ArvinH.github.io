{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/wtf-is-web-monetization","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/ZrpZB8-VBD0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">海豚刑警『安平之光』</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ZrpZB8-VBD0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>上個月在 <a href=\"https://dev.to/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dev.to</a> 上看到 <a href=\"https://dev.to/devteam/announcing-the-grant-for-the-web-hackathon-on-dev-3kd1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Announcing the Grant For The Web Hackathon on DEV</a> 這個 Hackathon 比賽，雖然看到的時候比賽已經結束了，但還是仔細看了他的內容，發現提到了一個我沒聽過的名詞 - Web Monetization，看到 monetization💰 就勾起我的興趣了...所以稍微查詢了些資料，做點筆記順便分享給大家。</p>\n<h2 id=\"什麼是-web-monetization又為什麼需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-web-monetization%E5%8F%88%E7%82%BA%E4%BB%80%E9%BA%BC%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 web monetization又為什麼需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Web Monetization，又為什麼需要它</h2>\n<p><a href=\"https://webmonetization.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Monetization（WM）</a> 是目前正在討論希望能列為 W3C 標準的一個 Web API，旨在透過標準且開放的 API 與 protocol (<a href=\"https://interledger.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interledger</a>) 來進行內容創作者與使用者間的小額付費。</p>\n<p>透過這新的 Web API ，提供網路用戶一個除了訂閱、廣告等以外的獲利方式，並同時兼顧資料隱私與使用者體驗。在後面的章節會再詳細點介紹其架構與 API 格式。</p>\n<p>會看到這篇文章的讀者，想必也常常在 Medium 等內容平台閱讀資訊，對於目前市面上文字內容創作者所能營利的管道不會太陌生，像是 Pay wall、訂閱、廣告置入、贊助、LikeCoin 等等。</p>\n<p>這些機制都提供了創作者一個取得回報的來源，但同時也帶來相對應的問題。</p>\n<p>首先是閱讀體驗，Pay wall 與廣告置入，都是保障創作者基本回報的機制，但每當點進一篇文章卻發現自己被擋在牆外，或是被迫將注意力分散到鋪天蓋地的廣告，都讓使用者的體驗大幅下降，更別提廣告背後隱含的隱私安全疑慮。</p>\n<p>再者，無論是付費加入 pay wall、訂閱、直接 Patreon、buymeacoffee 贊助或是 LikeCoin，都是需要使用者與創作者雙方在不同的平台上註冊帳號，重複帳號設定的流程一方面浪費金錢時間（加上學習服務操作的時間成本），另一方面也是在出賣你自身的資料，將其散播到各個平台上方。更別提最常發生的狀況應該是，使用者一看到需要另外註冊新帳號且付費，乾脆放棄閱讀該篇文章，畢竟很少會有人想只為了閱讀某篇文章就付出這些代價。</p>\n<p>透過 Web Monetization API 的標準化，理論上來說，創作者與使用者可以各自選擇喜歡的服務平台，而服務間透過統一的 protocol 溝通，雙方都不再需要到處創建帳號。</p>\n<p>而且有了標準的 JavaScript API，創作者可以自行掌控希望的 monetization 模式，像是常見的 Exlusive content、廣告移除等等，更進一步的話甚至能做到<a href=\"https://webmonetization.org/docs/probabilistic-rev-sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章分潤</a> 或是依照閱讀時間長短來決定費用多寡等功能。官網有一些挺酷的<a href=\"https://webmonetization.org/docs/exclusive-content\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">應用範例</a>。</p>\n<h2 id=\"web-monetization-的架構\" style=\"position:relative;\"><a href=\"#web-monetization-%E7%9A%84%E6%9E%B6%E6%A7%8B\" aria-label=\"web monetization 的架構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Monetization 的架構</h2>\n<p>Web Monetization 的架構與運作流程，可以從其官網的 <a href=\"https://webmonetization.org/docs/explainer#sequence-diagram\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequence diagram</a> 來理解，但可以先看我畫的簡化版流程來初略了解一下：</p>\n<p><img src=\"/image/wm-simple-flow.png\" alt=\"wm-simple-flow\"></p>\n<p>簡單三個步驟：1. 使用者加入 <code class=\"language-text\">WM Sender</code> 的會員並儲值；2. 內容創造者設定他的數位錢包到 <code class=\"language-text\">WM Receiver</code> 上，並在網站上啟用 Web Monetization；3. 當使用者到了創作者的網站時，sender 就會將錢傳送給 receiver，創作者就能獲得金錢。</p>\n<p>再來回到官網的 <a href=\"https://webmonetization.org/docs/explainer#sequence-diagram\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequence diagram</a> ：</p>\n<p><img src=\"/image/webmonetization-flow.svg\" alt=\"webmonetization-flow\"></p>\n<p>Web Monetization 的完整流程如下（號碼對應圖中的序列號碼）：</p>\n<ol>\n<li>要啟動整個 Web Monetization 流程的第一步是你的網站需要先有設定一個特殊的 <code class=\"language-text\">meta</code> tag，該 tag 包含了一個叫做 <a href=\"https://webmonetization.org/docs/explainer#payment-pointers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">payment pointer</a> 資訊，會指向網站設定的 Wallet。瀏覽器在解析 HTML tag 時發現這資訊時，就可以知道接下來要往哪裡送出 payment。</li>\n<li>\n<p>瀏覽器會用內部實作的 Web Monetization agent 來計算要付給網站多少費用。</p>\n<ul>\n<li>之所以要計算，是因為 Web Monetization 提供 Micropayment，能夠付非常小量的金額，不必總是整數，所以即便使用者的錢包內沒有足夠金額，網站也能夠調整提供對應的內容，比如說發現使用者只剩十塊，但看一篇文章要五十塊，那網站方可以選擇收取十塊費用讓使用者看一半的內容等等。</li>\n</ul>\n</li>\n<li>接著瀏覽器會產生一組唯一的 session ID 作為此次 payment 的 session 紀錄。</li>\n<li>從第一步得到的 payment pointer url 可以用來取得實際的付款位址與 secret。</li>\n<li>[Optional] 可以另外設置一個 receipt verifier service 在網站與 WM Receiver 中間，用來產生收據等資訊。</li>\n<li>\n<p>當上述過程完成後，只要使用者還 focus 在同個網站上，瀏覽器就可以開始將計算好的付款金額從使用者的 WM Sender 送給 WM Receiver。</p>\n<ul>\n<li>這邊特別強調 focus 在網站上，是因為根據目前的 Spec，還沒有規範到要如何針對在 Background tabs 的網站進行付費，例如在背景播放的音樂服務等等，但在 <a href=\"https://github.com/WICG/webmonetization/issues/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Incubator CG (WICG)</a> 中是有開個 Issue 在討論的。</li>\n</ul>\n</li>\n<li>WM Sender 收到瀏覽器的付款需求後，開始向 WM Receiver streaming payment。</li>\n<li>[Optional] 若是有使用 receipt verifier service，WM Receiver 可以在這步產生收據並傳回給 WM Sender。</li>\n<li>WM Sender 通知瀏覽器付款成功。</li>\n<li>收到通知後，瀏覽器可以透過 API dispatch event 告知網站付款成功</li>\n<li>接著網站就能根據付款狀態提供不同的內容或服務給使用者，需要的話，也能透過 receipt verifier service 來驗證該筆交易[Optional]。</li>\n</ol>\n<p>無論是我的簡化流程，或是官網上的完整流程，重點都在兩個主要角色上：<code class=\"language-text\">WM Receiver</code> 與 <code class=\"language-text\">WM Sender</code>。</p>\n<p>內容創作者需要設定 <code class=\"language-text\">WM Receiver</code>，而使用者則需要有 <code class=\"language-text\">WM Sender</code>。</p>\n<h3 id=\"web-monetization-sender\" style=\"position:relative;\"><a href=\"#web-monetization-sender\" aria-label=\"web monetization sender permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Monetization Sender</h3>\n<p>當你是 Web Monetization 的使用者方時，需要有 WM Sender，你需要註冊 WM Sender 的會員，並繳交費用，作為你付款給內容創作者的資金。</p>\n<p>而目前唯一的 WM sender 是一間叫 <a href=\"https://coil.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coil</a> 的公司，同時也是提出整個 Web Monetizaiton 標準化的人。</p>\n<p>加入並成為 Web Monetization 的使用者就幾個步驟：</p>\n<ol>\n<li>註冊一個 coil 帳號 - <a href=\"https://coil.com/signup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://coil.com/signup</a></li>\n<li>設定你的信用卡資訊以每月最低五美元的金額訂閱 Coil 服務（WM Sender）</li>\n<li>最後你需要下載一個瀏覽器 Extension，以啟用 Web Monetization，因為目前此 API 還在 W3C 標準的討論階段，需要透過 Extension 才能在目前主流瀏覽器上使用。<a href=\"https://chrome.google.com/webstore/detail/coil/locbifcbeldmnphbgkdigjmkbfkhbnca?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chrome</a>, <a href=\"https://addons.mozilla.org/en-US/firefox/addon/coil/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox</a>, <a href=\"https://microsoftedge.microsoft.com/addons/detail/ljionajlbinlfkdnpkloejeoogfgkojm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Edge</a></li>\n</ol>\n<p>當你裝好 Extension 後，到任一網站，該 Extension 可以讓你知道該網站是否支援 Web Monetization：</p>\n<p><img src=\"/image/wm-extension-example.png\" alt=\"extension-example\"></p>\n<h3 id=\"web-monetization-receiver\" style=\"position:relative;\"><a href=\"#web-monetization-receiver\" aria-label=\"web monetization receiver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Monetization Receiver</h3>\n<p>Coil 身為此標準的提案人兼唯一一個實作 Web Monetization Sender 的公司，作為 Web Monetization Receiver 的提供商也是合情合理。</p>\n<p>但至少你的 Payment pointer，也就是你的錢包可以有不同選擇，你可以選擇任何有支援 <a href=\"https://interledger.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">interledger</a> protocol 的數位錢包，目前有：</p>\n<ol>\n<li>GateHub XRP - Defaults to XRP but can be exchanged for any currency supported by GateHub</li>\n<li>Stronghold - USD (Local regulations prevent Stronghold from supporting certain countries and regions.</li>\n<li>Uphold - USD, EUR, GBP, CAD, PLN, XRP, BTC, ETH, +59 more</li>\n</ol>\n<p>在 Coil 的網站上可以找到<a href=\"https://help.coil.com/accounts/digital-wallets-payment-pointers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">各家平台的設定方式</a>。</p>\n<p>取得的 Payment pointer 其實就是一個類似 url 格式的網址：</p>\n<ul>\n<li>GateHub - <code class=\"language-text\">$ilp.gatehub.net/123456789</code></li>\n<li>Stronghold - <code class=\"language-text\">$pay.stronghold.co/1b567ec83c151f44fb693fabc3d02ac09bb</code></li>\n<li>Uphold - <code class=\"language-text\">$ilp.uphold.com/ABC3DefGHi67jk</code></li>\n</ul>\n<p>有了 Payment pointer，也設定到 Coil 讓它知道要把會員的錢轉到你的哪個錢包後，就只需要將下面這個 <code class=\"language-text\">meta</code> tag 設定到你的網站內即可開始啟動整個流程：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 當然 content 要換成你自己的 payment pointer --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>monetization<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$ilp.uphold.com/ABC3DefGHi67jk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"稍微來看個程式碼\" style=\"position:relative;\"><a href=\"#%E7%A8%8D%E5%BE%AE%E4%BE%86%E7%9C%8B%E5%80%8B%E7%A8%8B%E5%BC%8F%E7%A2%BC\" aria-label=\"稍微來看個程式碼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>稍微來看個程式碼</h2>\n<p>畢竟這是一個還未成為標準的 API，相信到通過提案並正式實作在瀏覽器上時，API 或多或少會有所改變，因此就不探究太多 API 細節，附上一個簡單的範例讓大家有點感覺就好：</p>\n<p>在你的網站中可以放入以下的程式片段：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- content 要換成你自己的 payment pointer --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>monetization<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$ilp.uphold.com/ABC3DefGHi67jk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">.hidden</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>monetization<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      document<span class=\"token punctuation\">.</span>monetization<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'monetizationstart'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusive'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n    Show me the money!\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exclusive<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hidden<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Here's some exclusive content for people who pay me!\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>當瀏覽器偵測到你的頁面含有 <code class=\"language-text\">&lt;meta name=\"monetization\" content=\"...\"></code> 時，<code class=\"language-text\">WM Sender</code> 可以啟動 Web monetization 進行付款，付款成功後 <code class=\"language-text\">WM Receiver</code> 可以 dispatch 一個 <code class=\"language-text\">monetizationstart</code> event，你的網站監聽到後，就可以把獨家內容顯示給使用者：</p>\n<p><img src=\"/image/wm-sample-demo.gif\" alt=\"wm-sample-demo\"></p>\n<p>想看完整一點的範例可以到這個網站玩玩，<a href=\"https://testwebmonetization.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://testwebmonetization.com/</a>，裡面附有程式碼，包含了另一個 event <code class=\"language-text\">monetizationprogress</code>（用來記錄付款進度）的用法：</p>\n<p><img src=\"/image/wm-sample-demo2.gif\" alt=\"wm-sample-demo2\"></p>\n<p>Wait...</p>\n<p>從這兩個範例來看，我發個 Event 你就可以當作我付款了，根本是漏洞吧？</p>\n<p>單從範例來看的確是這樣，但別忘了在<a href=\"Web%20Monetization%20%E7%9A%84%E6%9E%B6%E6%A7%8B\">完整的 Web monetization 流程</a> 中有提到，接收到 event 的網站可以再去向 <code class=\"language-text\">WM Receiver</code> 確認收據與付款狀況，做進一步的驗證，這個 <a href=\"https://github.com/sharafian/web-monetization-access#asking-for-proof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> 提供了範例告訴你可以利用 JWT 與 Interledger protocol 來處理。</p>\n<h2 id=\"背後成員\" style=\"position:relative;\"><a href=\"#%E8%83%8C%E5%BE%8C%E6%88%90%E5%93%A1\" aria-label=\"背後成員 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背後成員</h2>\n<p>雖然整個 Web monetization 的流程中都沒有提到區塊鏈的技術，但你還是得申請一個數位錢包，收取包含虛擬貨幣在內的金錢。對於區塊鏈不太熟悉的我對於這件事有點好奇，稍微查了一下後才發現，Coil 的創始成員幾乎都是前幾年聲名遠播的瑞波幣（Ripple）的成員，像是 Coil 的 Founder 和現任 CEO 即是曾任 Ripple CTO 的 <a href=\"https://www.linkedin.com/in/justmoon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stefan Thomas</a>，也難怪目前支援的 <code class=\"language-text\">WM Receiver</code> 中有 <code class=\"language-text\">GateHub</code>。這邊有場他與 W3C 成員的<a href=\"https://www.w3.org/blog/2019/09/w3c-interview-coil-on-interledger-protocol-and-web-monetization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">訪談紀錄</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然目前乍看之下，Web Monetization 從提案到相關 ecosystem 的發展，都是由 Coil 一間公司所負責與掌控，但其他基金會如 Mozilla 與 Creative commons 都有參與，他們甚至一起合作開設了一個 <a href=\"https://www.grantfortheweb.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GRANT FOR\nTHE WEB</a> 的百萬計畫，目的就在推廣更健康的網路，用公開的標準規格，讓人們拿回對於自己內容營利的掌控權，不用再依賴於各種惱人廣告、付費牆與個人隱私資料的侵犯。</p>\n<p>相信這個計畫慢慢推進下去的話，會有更多服務出現作為 <code class=\"language-text\">WM Sender</code>，就不會有 Coil 壟斷的疑慮了。</p>\n<p>希望透過這篇文章的介紹能稍微引起大家的興趣，關注這個個人覺得蠻有發展淺力的計畫！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://webmonetization.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webmonetization.org</a></li>\n<li><a href=\"https://dev.to/hacksultan/web-monetization-like-i-m-5-1418\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Monetization like I'm 5</a></li>\n<li><a href=\"https://testwebmonetization.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">testwebmonetization</a></li>\n<li><a href=\"https://github.com/sharafian/web-monetization-access#asking-for-proof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web-monetization-access</a></li>\n<li><a href=\"https://forum.grantfortheweb.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grant for the Web</a></li>\n<li><a href=\"https://coil.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coil</a></li>\n</ol>","fields":{"slug":"wtf-is-web-monetization"},"frontmatter":{"title":"Web Monetization 簡介","date":"07-18-2020","tags":["web","monetization","standard"]},"timeToRead":10}},"pageContext":{"slug":"wtf-is-web-monetization","prev":{"excerpt":"好歌分享：MONKEY MAJIK × 岡崎体育 / 留学生","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/lvEVP7NPklU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MONKEY MAJIK × 岡崎体育 / 留学生</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/lvEVP7NPklU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前陣子在公司的專案裡頭想引用 <a href=\"https://github.com/conventional-changelog/standard-version\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standard-version</a> 這套工具來優化 release changelog 的過程，但發現雖然可以用 <code class=\"language-text\">commitlint</code> 或是 <code class=\"language-text\">commitizen</code> 來輔助大家遵循 commit message 的 convention，卻沒辦法簡單的控制 Pull Request 的 title 格式，或是在 GitHub 上 squash merge 時的 commit format，雖然不是太大的問題，code review 的時候稍微注意一下即可，但還是很希望能有個工具來幫忙，心靈上會舒服些。</p>\n<p>GitHub 的 marketplace 上其實找得到可用的 GitHub Apps，可惜公司 policy 的緣故，無法直接使用，試想了ㄧ下原理與實作方法的選項，覺得足夠簡單，可以自己實作，順便學習如何製作 GitHub App，並以這篇文章與大家稍作分享。原始碼分享於此 - <a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<p>效果大致如下，依據你的 PR title 有無符合特定格式，改變 status check 的狀態：</p>\n<p><img src=\"/image/prlint-serverless-demo.gif\" alt=\"DEMO\"></p>\n<h2 id=\"需求分析\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\" aria-label=\"需求分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需求分析</h2>\n<p>想達成 Demo 的功能，我們需要監聽 Pull Request 被 Create、Update 的事件，並且透過 GitHub API 將 Pull Request 上的狀態做更改。</p>\n<p>而要能監聽 GitHub 上的事件，想必是需要設定 webhook endpoint 給 GitHub 呼叫。若是幾年前的我，大概直覺會想到去 Heroku 或是 Digital ocean 開一個最低規格的機器來架 server，但現在我們有了各種 serverless 服務可以使用，AWS Lamda、GCP Cloud Function、Azure Function 等等，基本上只要寫好一個 function 就能 deploy 上去當作 webhook 給其他服務呼叫了。用什麼都可以，但因為公司使用的是 GCP 平台，所以我也就順勢採用 Cloud Function 來作為我的 webhook endpoint。</p>\n<p>總結所需要的技術只有兩個：GitHub API 與 Cloud Function。</p>\n<h2 id=\"github-api\" style=\"position:relative;\"><a href=\"#github-api\" aria-label=\"github api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub API</h2>\n<p>GitHub 開放的 API 很多，每個 API 可以控制的權限分得很細，官方文件針對每個 API 的參數、用法都有提供範例與解釋，不過我覺得有些專屬於 GitHub API 的名詞還是需要花點時間去額外搜尋資料釐清。</p>\n<p><img src=\"/image/github-api-docs.png\" alt=\"github api doc\"></p>\n<p>目前 GitHub 上有使用 GraphQL 的 <a href=\"https://developer.github.com/v4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v4</a> 版本，以及 Rest API 的 <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v3</a>，兩種都能使用，端看你的需求，這次的實作是採用 Rest API。</p>\n<p>若要監聽 Pull Request 的 event，得用到 - <a href=\"https://developer.github.com/v3/activity/event_types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Event types and payloads API</a>，從中可以找到 <a href=\"https://developer.github.com/v3/activity/event_types/#pullrequestevent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PullRequestEvent</a>，</p>\n<p><img src=\"/image/github-api-pr-event.png\" alt=\"github-api-pr-event\"></p>\n<p>event 回傳的 payload 包藏不少資訊，從 <code class=\"language-text\">action</code> 中可以得知該 event 是被哪種操作所觸發，像是 <code class=\"language-text\">opened</code>, <code class=\"language-text\">closed</code> 或 <code class=\"language-text\">edited</code> 等等。而關於 Pull Request 的詳細內容，會放在 <code class=\"language-text\">pull_request</code> 這個物件裡，從 <a href=\"https://developer.github.com/v3/pulls/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pull Request API</a> 中 <a href=\"https://developer.github.com/v3/pulls/#get-a-pull-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get a pull request</a> 的 <code class=\"language-text\">Response</code> 中，我們可以找到 API 回傳的完整 payload 範例，資訊含量非常多，你在 GitHub UI 看得到的內容都找得到，甚至包含 Repo 的資訊。</p>\n<p>這些豐富的資訊中，有一個 <code class=\"language-text\">statuses_url</code>，這是我們創建 Pull request 狀態的端點，待會我們會再提到，可以從 <a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 了解。</p>\n<h2 id=\"cloud-function\" style=\"position:relative;\"><a href=\"#cloud-function\" aria-label=\"cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud Function</h2>\n<p>了解要使用的 GitHub API 後，接著就是要撰寫我們的 webhook endpoint，也就是 Cloud Function。要開始使用 Cloud Function 很簡單，到你的 GCP project 底下點選 Cloud Functions，按下 <strong>CREATE FUNCTION</strong> 即可。</p>\n<p><img src=\"/image/create-cloudfunction.png\" alt=\"create-cloudfunction\"></p>\n<p>創建 Cloud Function 的頁面上可以設定 function 名稱、要配置的記憶體大小、Trigger 的介面（除了能被 HTTP 的 request 觸發外，也能設定由 Cloud Storage、Firestore、Cloud pub/sub 等等服務來啟動函式執行）</p>\n<p><img src=\"/image/cloud-function-details.png\" alt=\"cloud-function-details\"></p>\n<p>URL 就是此 cloud function 的 endpoint，到時候就是要把這個 url 設定到 GitHub 的 webhook 上。此外，要記得把 <code class=\"language-text\">Allow unauthenticated invocations</code> 的選項打勾，此舉能將該 endpoint 公開給所有人存取，GitHub webhook 也才能打得到這隻 API。</p>\n<p>接著最後就是設定程式碼的部分，你可以直接把程式碼貼上（inline editor）、壓縮成 zip 檔上傳（ZIP upload, ZIP from cloud storage）和連接 repository（cloud source repository）。</p>\n<p>也有多種 runtime 可以選擇：</p>\n<p><img src=\"/image/cloud-function-runtimes.png\" alt=\"cloud-function-runtimes\"></p>\n<p>runtime 結構大同小異，都會有一個 entry file，與一個對應的套件管理檔案，以 NodeJS 為例就是一個 <code class=\"language-text\">index.js</code> 與 <code class=\"language-text\">package.json</code>。因此你要在你的 cloud function 中使用第三方套件是沒問題的。</p>\n<p>另外，也能夠有不同的資料夾結構，將一些邏輯拆分到別的檔案再 import 進來也可以（依照相對路徑存取），但當然就必須選擇 <code class=\"language-text\">ZIP upload</code> 等方式上傳你的專案。</p>\n<p>至於 Cloud Function 的基本結構，可以從 inline editor 提供的範例來觀察，以 NodeJS 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Responds to any HTTP request.\n *\n * @param {!express:Request} req HTTP request context.\n * @param {!express:Response} res HTTP response context.\n */</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">helloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其實就像是 Express 的一個 route 或 middleware 的結構，傳入 <code class=\"language-text\">req</code> 與 <code class=\"language-text\">res</code> 物件讓你操作。</p>\n<p>exports 的名稱則是用在設定中，讓 Cloud Function 知道要呼叫哪個函式：</p>\n<p><img src=\"/image/cloud-funciton-name.png\" alt=\"cloud-funciton-name\"></p>\n<h2 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作</h2>\n<p>你可能會有個疑惑，雖然我們已經知道 cloud function 的結構與設定方式，但難道我每寫完一段程式想要測試一下時，就得重新上傳到 cloud function 一次嗎？</p>\n<p>當然不用，Google Cloud team 有推出一個 <code class=\"language-text\">@google-cloud/functions-framework</code> 套件可以使用，透過 <code class=\"language-text\">functions-framework --target=${function name}</code> 的方式啟動你的 cloud function，會幫你起一個 express server，監聽在 port 8080：</p>\n<p><img src=\"/image/cloud-function-framework-cli.png\" alt=\"cloud-function-framework-cli\"></p>\n<p>接著你可以使用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngrok</a> 將其 expose 成 public access 的 url，就能用來設定在 webhook 上，同時又能一邊持續開發。</p>\n<h2 id=\"結合-github-api-與-cloud-function\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E5%90%88-github-api-%E8%88%87-cloud-function\" aria-label=\"結合 github api 與 cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結合 GitHub API 與 Cloud Function</h2>\n<p>當你有了 webhook url，就可以先到 GitHub repo 去設定看看，實際測試 webhook 與 GitHub API 的串連。方法也很簡單，到你想使用的 repository 中，選擇 <code class=\"language-text\">Settings</code> -> <code class=\"language-text\">Webhooks</code> -> <code class=\"language-text\">Add webhook</code>，就會看到下面的畫面：</p>\n<p><img src=\"/image/git-webhook.png\" alt=\"git-webhook\"></p>\n<p>Payload URL 填入你的 <code class=\"language-text\">ngrok</code> url，Content-type 可以選擇 json 格式。</p>\n<p>最後注意一下，你可以選擇哪些 events 會 trigger 你的這隻 webhook，選擇 <code class=\"language-text\">Let me select individual events.</code> 並勾選 <code class=\"language-text\">Pull Requests</code> 的選項，這樣才不會拿到其餘你不需要的事件資訊。</p>\n<p><img src=\"/image/select-individual-event.png\" alt=\"select-individual-event\"></p>\n<p><img src=\"/image/pull-request-event.png\" alt=\"pull-request-event\"></p>\n<p>設定完後回到我們的程式碼，最基礎的 webhook 架構如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prStatus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'opened'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'edited'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ready_for_review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prLint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pull_request<span class=\"token operator\">:</span> pullRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> statuses_url<span class=\"token operator\">:</span> statusesUrl<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pullRequest<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prStatus<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// check pr title</span>\n    <span class=\"token keyword\">const</span> isValid <span class=\"token operator\">=</span> <span class=\"token function\">validatePullReqeustTitle</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// create status</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>依照我們在 <a href=\"#github-api\">GitHub API</a> 所瞭解到的 Event API 與 Pull Request Object，我們知道可以從 <code class=\"language-text\">req.body</code> 中取出 <code class=\"language-text\">pull_request</code> 物件，而在該物件中能取得 <code class=\"language-text\">action</code>、<code class=\"language-text\">title</code> 與 <code class=\"language-text\">statuses_url</code> 兩個我們需要的資訊。</p>\n<p>接著就能實作我們 GitHub App 想要的功能邏輯，包含 filter 掉我們不想要的 action 操作、驗證 Title 是否有符合格式、創建 pull request status 等等。</p>\n<h2 id=\"創建-pull-request-status\" style=\"position:relative;\"><a href=\"#%E5%89%B5%E5%BB%BA-pull-request-status\" aria-label=\"創建 pull request status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>創建 pull request status</h2>\n<p>程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// call status api</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'pass pr lint'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'please check your pr title'</span><span class=\"token punctuation\">,</span>\n  context<span class=\"token operator\">:</span> <span class=\"token string\">'pr-lint'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Token </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessTokens<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>statusesUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'PR lint error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用上來說非常簡單，<a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 接收的 Post body 有四個 properties 可以設置：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"state\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// error, failure, pending, or success.</span>\n  <span class=\"token string\">\"target_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/build/status\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The build succeeded!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"continuous-integration/jenkins\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>state</strong> 就是你想設定的狀態，有四種可以選；<strong>target_url</strong> 則是使用者點選該狀態後要連結去的地方，可以忽略不設；<strong>description</strong> 就是顯示在狀態列的文字；而 <strong>context</strong> 則是讓系統知道這是由第三方 App 所創立的 status。</p>\n<p>要發送 Post API 到 GitHub 上需要有 accessToken，有使用過 webhook 的讀者應該知道，我們可以輕易從 <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 個人 profile settings 中的 Developer options</a> 產生 Personal Token：</p>\n<p><img src=\"/image/github-personal-token.png\" alt=\"github-personal-token\"></p>\n<p>取得 personal token 後填入上方範例程式碼的 <code class=\"language-text\">accessTokens</code>，就能夠發送 Post request 到我們從 pull request event 中取得的 <strong>statuses_url</strong>，在該 Pull Request 的頁面產生一個 Check status：</p>\n<p><img src=\"/image/github-check-status.png\" alt=\"github-check-status\"></p>\n<p>到這邊為止看起來就完成了，只要我們把程式碼部署到 Cloud Function 上，將 Webhook 的 URL 更改成實際的連結，一切就大功告成。</p>\n<p>對，也不對。</p>\n<p>如果你仔細看一下你創建的 Check Status，你會發現因為你用的是 Personal Token，他會顯示該狀態是由你本人產生的：</p>\n<p><img src=\"/image/github-check-status-issue.png\" alt=\"github-check-status-issue\"></p>\n<p>這當然不是太大的問題，但看起來不是很專業，而且當你用在多個公司專案時，總是出現你的大頭貼好像很討人厭啊。要解決這問題，就需要創建 GitHub App 了。</p>\n<h2 id=\"github-app\" style=\"position:relative;\"><a href=\"#github-app\" aria-label=\"github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub App</h2>\n<p>GitHub App 目前有分兩種類型：OAuth Apps 與普通的 GitHub Apps，官網有詳細的<a href=\"https://developer.github.com/apps/differences-between-apps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">差別說明</a>，我們的案例只需要用到一般的 GitHub Apps 即可，一樣在官網有手把手的<a href=\"https://developer.github.com/apps/quickstart-guides/using-the-github-api-in-your-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">創建教學範例</a>。</p>\n<p>我們之所以需要用到 GitHub App，是因為我們想要能夠以 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub App 的名義去取得 AccessToken</a>，利用該 AccessToken 去創建 pull request 的 check status。</p>\n<p>為此，有幾個步驟需要進行：</p>\n<h4 id=\"在-github-上新增一個-github-app\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-github-%E4%B8%8A%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8B-github-app\" aria-label=\"在 github 上新增一個 github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 GitHub 上新增一個 GitHub App</h4>\n<p>在你個人的 <a href=\"https://github.com/settings/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub developer settings 頁面</a> 中，有個 GitHub Apps 的選項，可以 <strong>New GitHub App</strong>：</p>\n<p><img src=\"/image/github-apps-index.png\" alt=\"github-apps\"></p>\n<p>創建的時候有很多欄位可以填選，像是 App 名稱、網站、Logo 等等，但基本上重要的只有 <strong>Webhook</strong> 與 <strong>Repository Permissions</strong>（其實 GitHub App 除了 repository permission 可以設定外，也能設定到 Organization 與 User 兩種不同層級的權限，不過目前我們只需要 repository 層級即可）：</p>\n<p>跟先前我們在 repo 的 webhook 是ㄧ樣的</p>\n<p><img src=\"/image/github-app-webhook.png\" alt=\"github-app-webhook\"></p>\n<p>為了讓我們的 GitHub App 能存取 Repo 的 Pull request 與 status，需要將這兩個的權限設定為 Read&#x26;Write。</p>\n<p><img src=\"/image/github-app-repo-permission.png\" alt=\"github-app-repo-permission\"></p>\n<p>當你設定完後，下方會出現你可以訂閱的 Event，而我們一樣選擇 <em>pull request</em>：</p>\n<p><img src=\"/image/github-app-subscribe-event.png\" alt=\"github-app-subscribe-event\"></p>\n<h4 id=\"產生該-app-的-private-keys\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F%E8%A9%B2-app-%E7%9A%84-private-keys\" aria-label=\"產生該 app 的 private keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生該 App 的 Private keys</h4>\n<p>當你都創建好 App 後，App settings 的頁面最下方會有一個 <strong>Private keys</strong> 的區塊，點選 <code class=\"language-text\">Generate a private key</code> 的按鈕，會自動下載一份 <code class=\"language-text\">.pem</code> 的檔案到你電腦裡，而這把 Key 就是我們用來產生 JWT 的關鍵：</p>\n<p><img src=\"/image/github-app-private-key.png\" alt=\"github-app-private-key\"></p>\n<h4 id=\"利用該-private-keys-去產生-jwtjson-web-token\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E8%A9%B2-private-keys-%E5%8E%BB%E7%94%A2%E7%94%9F-jwtjson-web-token\" aria-label=\"利用該 private keys 去產生 jwtjson web token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用該 Private keys 去產生 JWT（JSON Web Token）</h4>\n<p>產生 JWT 的方式有很多，在 NodeJS 上我是用 <a href=\"https://github.com/auth0/node-jsonwebtoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Auth0 的 jsonwebtoken</a> 這個套件。</p>\n<p>要產生 GitHub App 能使用來取得 AccessToken 的 JWT，需要將一些資訊利用剛剛下載的那把 key 簽署到 JWT 上 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#jwt-payload\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// issued at time</span>\n    iat<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// JWT expiration time (10 minute maximum)</span>\n    exp<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// GitHub App's identifier</span>\n    iss<span class=\"token operator\">:</span> <span class=\"token constant\">YOUR_APP_ID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// https://github.com/settings/apps/${your app}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> privateKey<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    privateKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/../key/your-app.private-key.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> jsonwebtoken<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'RS256'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最主要的資訊是 <code class=\"language-text\">iss</code>，可以從你的 GitHub App 設定頁面取得 App 的 ID，而其餘時間的資訊其實對我們來說不太重要，因為每次 Cloud Funciton 被呼叫的時候，我們都會重新去申請一次 AccessToken，所以 Expiration 的時間問題不大。</p>\n<p>透過 <code class=\"language-text\">jsonwebtoken.sign</code> 把剛剛下載的 Key 跟相關的 Payload 結合產生 JWT，接著就能拿這個 Token 去申請 AccessToken。</p>\n<h4 id=\"以該-jwt-與-github-app-的-installations-id-去取得屬於該-app-的-accesstoken\" style=\"position:relative;\"><a href=\"#%E4%BB%A5%E8%A9%B2-jwt-%E8%88%87-github-app-%E7%9A%84-installations-id-%E5%8E%BB%E5%8F%96%E5%BE%97%E5%B1%AC%E6%96%BC%E8%A9%B2-app-%E7%9A%84-accesstoken\" aria-label=\"以該 jwt 與 github app 的 installations id 去取得屬於該 app 的 accesstoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>以該 JWT 與 GitHub App 的 installations id 去取得屬於該 App 的 AccessToken</h4>\n<p>要以 GitHub App 的身份取得 AccessToken 需要呼叫的 endpoint 為：</p>\n<p><code class=\"language-text\">POST /app/installations/:installation_id/access_tokens</code> <a href=\"https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a></p>\n<p>其中需要用到 GitHub App 的 installation id，而這個資訊其實也包含在我們 subscribe 的 pull request event 回傳的物件中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>const { pull_request: pullRequest = {}, action } = req.body;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const { pull_request: pullRequest = {}, action, installation } = req.body;</span></code></pre></div>\n<p>在呼叫 access token API 時要注意一點，官方文件特別叮囑：</p>\n<blockquote>\n<p>Note: To access the API with your GitHub App, you must provide a custom media type in the Accept Header for your requests. </p>\n</blockquote>\n<p>所謂的 custom meida type 就是 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，因此在呼叫 API 時記得要將 Accept 改成該類型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAccessToken</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>installationId <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get a JWT every time</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">JWT</span> <span class=\"token operator\">=</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">GITHUB_API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/installations/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>installationId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/access_tokens</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/vnd.github.machine-man-preview+json'</span><span class=\"token punctuation\">,</span>\n        Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JWT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-console</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> exception <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"修改-api-request-header\" style=\"position:relative;\"><a href=\"#%E4%BF%AE%E6%94%B9-api-request-header\" aria-label=\"修改 api request header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改 API request Header</h4>\n<p>最後取得 AccessToken 後，回到我們最初發送 Status API 的 request，將原有的 personal access token 取代掉，並將 Accept header 也改為 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，就大功告成了！</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">const headers = {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Authorization: `Token ${personal accessToken}`,\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Authorization: `Token ${github app accessToken}`,\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Accept: 'application/json',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Accept: 'application/vnd.github.machine-man-preview+json',\n</span>};</code></pre></div>\n<p>透過 GitHub App 取得的 AccessToken 所創建的 Check status 運作起來就會有這樣的效果，就是個第三方 App 所產生的，而不是你個人的大頭照：</p>\n<p><img src=\"/image/github-app-final.png\" alt=\"github-app-final\"></p>\n<p>完整程式碼請參考：<a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一個不小心似乎又把篇幅拉得太長，使用 GitHub App 與 Cloud Function 其實真的很簡單，只是步驟稍微多了些，但每一個步驟都只需要做一點點事情，或是設定一些資訊，只要實作過一次後，要再次使用就會快很多了。</p>\n<p>花費些微的力氣，利用 Serverless 的解決方案搭配 GitHub App/API，能提昇不少生產力，是很值得的投資，希望大家都能試試看！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Developer Guide</a></li>\n<li><a href=\"https://cloud.google.com/functions/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloud Function Docs</a></li>\n<li><a href=\"https://github.com/ewolfe/prlint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prlint github app</a></li>\n</ol>","id":"82bcb2ef-a77c-5d3a-9b38-36499a601a55","fields":{"slug":"github-apps-cloudfunction"},"frontmatter":{"date":"2020-06-14T13:50:00.000Z","title":"利用 Cloud function 製作 GitHub Apps","tags":["GitHub API","javascript","Cloud Function"],"type":"tech","slug":"github-apps-cloudfunction"},"timeToRead":13},"next":{"excerpt":"『Gotta remember we live what we choose; It's not what you say, it's what you do; And the life you want is the life you have to make.』- Life is so cool (一首我心愛的人推薦的歌 :) )","html":"<blockquote>\n<p>『Gotta remember we live what we choose; It's not what you say, it's what you do; And the life you want is the life you have to make.』- Life is so cool (一首我心愛的人推薦的歌 :) )</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>稍微取樣了胡立先前<a href=\"https://blog.techbridge.cc/2020/07/11/an-interesting-styled-component-bug/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>的標題，但實際上這篇文章想分享的面向不太ㄧ樣，並不是 styled-components 本身的 issue 或是其所引用的底層套件的 bug，比較像是特定的使用情境，以及對 styled-components 實際運作原理不熟悉等因素，所導致的 bug。這個 bug 不是很容易被發現，解決的方法也算是有點 hack（運用到與官方文檔描述不符合的 API），我覺得蠻有趣的，加上主要的解法實作是由我<a href=\"https://github.com/whatasod\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同事</a>處理，所以想寫下來給自己做一個紀錄，給自己留點印象，對大家可能沒有直接幫助，可以當故事看看做個參考。</p>\n<p>TL;DR</p>\n<p>下面的篇幅大部分在講解發現問題的流程，也可以直接跳到<a href=\"#%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E5%95%8F%E9%A1%8C%E8%88%87%E8%A7%A3%E6%B3%95\">最後</a>看重點。</p>\n<h2 id=\"一切的開端\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E5%88%87%E7%9A%84%E9%96%8B%E7%AB%AF\" aria-label=\"一切的開端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一切的開端</h2>\n<p>團隊內有個專案是專門提供給行銷人員製作行銷頁面的內部工具，tech stack 中有使用 React 與 styled-components。原本最早的實作方式是簡單的 Single Page Application，透過 API 拉取內容進行 render，而由於頁面大多是在 App 內的 WebView 開啟，為了提高使用者經驗，我們決定將頁面先行在 server 端進行 prerender，將 HTML 放置 CDN，client 端載入所需資源後，JS 再透過 <code class=\"language-text\">ReactDOM.hydrate</code> 進行 hydration，讓有互動功能的 react component 可以運作。</p>\n<p>prerender 的做法，非常直接，我們使用 puppeteer 開啟 Headless server 直接 render 原本的 SPA 頁面，把 <code class=\"language-text\">page.content()</code> 給存起來。</p>\n<p>會採用這種做法的一個原因是因為原本用在 SPA 上的 component 其實也同時共用在內部工具中，而整個 SPA 頁面也還保留著作為預覽，讓使用者在編輯製作行銷頁面的時候能夠即時看到頁面外觀，因此與其修改成 <code class=\"language-text\">ReactDOM.renderToString()</code>，直接將 SPA 渲染完的結果存下來，直覺上簡單很多，程式碼的更動也少。</p>\n<p>prerender 完後，接著會把不需要在前端 rehydrate 的 component 從 JS bundle 中移除，inject 需要的 style tag，最後連同 HTML 一起放到 CDN 上。</p>\n<p>要 inject style tag 的原因是因為 styled-components 如同多數 CSS-in-JS 解決方案，是使用 CSSOM 去 insertRule，而這樣的做法在 Chrome 85 以前是無法透過 devtool 來調整 style，在開發階段除錯上稍嫌麻煩，所以我們利用 prerender 完的優化階段來把 styled-components 放在 CSSOM 中的 sheet 抓出來塞到 style tag 中（註：當時使用的還不是 styled-components v5+ 因此沒有 <code class=\"language-text\">disableCSSOMInjection</code> option 可用。）</p>\n<p>簡單的架構圖：</p>\n<p><img src=\"/image/mock-structure.png\" alt=\"simple structure\"></p>\n<p>基本上這樣一切都很順利，實際測試上線也都沒什麼太大問題。</p>\n<p>但是有個隱藏的 bug 我們一直都沒有發現，就是 <strong>prerender 完的頁面存有樣式跑版的機會。</strong></p>\n<p>而且這個情況並不是很容易發生，實際上在我們意識到之前，PM 早已回報過一兩次，但基於慣性，發現頁面有點奇怪時，自然反應是重新整理、重新執行，看看能否重現 issue，而這個 bug 在重新 prerender 後有蠻大的機率會再次隱藏起來，也因此沒有獲得足夠的注意力讓我們持續專研下去。</p>\n<p>直到某個同事在實作一個頁面載入後會有較多狀態變化的 component 時，他發現到，在沒有更動程式碼的情況下，在 client 端才動態出現的 component 樣式卻跑掉了，但瀏覽器 first load HTML 時卻是正常的。</p>\n<h2 id=\"到底是什麼問題\" style=\"position:relative;\"><a href=\"#%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E9%BA%BC%E5%95%8F%E9%A1%8C\" aria-label=\"到底是什麼問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>到底是什麼問題</h2>\n<p>為了除錯，我利用 Devtool 插入中斷點，發現到第一次 HTML 載入時，一切的 Style 都是正常的，包含 styled-components 所產生的 class name 以及我們 inject 到 html 內的 style tag；然而當 JS bundle 載入，前端 react component 重新 render 後，HTML DOM 上的 styled-components class name 與原先的不同，class name 所對應的 css style rule 也不一樣。</p>\n<p>接著再細看最終瀏覽器渲染的 HTML，發現到 <code class=\"language-text\">&lt;head></code> 內有兩個屬於 styled-components 的 style tag。</p>\n<p><img src=\"/image/two-style-tag.png\" alt=\"two style tag\"></p>\n<p>到這邊問題就比較清楚了。</p>\n<p><strong>我們塞了兩次 styled-components 產生的 style tag，所以導致 class name 的 style 有衝突。</strong></p>\n<p>上面紅線括弧的部分是我們在 server-side inject 進去，含有 css text 的 style tag；下方黃線標記的則是 client 端 hydrate 後，所產生的新的 style tag。</p>\n<p>造成的後果就是兩個毫無相干的 component 有機會共享了同樣的 class name，其中一個 component 的 style 就跑掉了：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--Call to action component--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-AxiKw iOTgPf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--FQA component--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-AxhUy iOTgPf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>另外值得一提的是，在我們的 case 中，由於我們還會把不需要在前端 rehydrate 的 react component code 從 JS bundle 裡拿掉，所以那些我們所謂 <em>靜態的 component</em> 樣式基本上不太會受影響，才讓這個 bug 比較難發現。</p>\n<h2 id=\"解決方案\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88\" aria-label=\"解決方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決方案</h2>\n<p>既然發現多了一個 style tag，那我們把後來蓋上去的那個 tag 拿掉不就得了嗎？</p>\n<p>但事情果然不是憨人想得這麼簡單。</p>\n<p>拿掉在 client-side 重新產生的 style tag 是可以確保整個 application 只吃到我們原先在 server 端 inject 的 CSS 樣式，但在 rehydrate 的過程中，component 的 class name 也變了，所以單純拿掉 client side style tag 反而讓整個頁面的樣式更加慘烈。</p>\n<p>還是得從根本解決問題。</p>\n<p>之所以會產生兩個 style tag，原因在於我們在 client 端進行 hydration 時，並<strong>沒有正確處理 styled-components 的 hydration</strong>，只顧慮到了 react component 本身的 hydration，對於 styled-compponent 來說，我們在 server-side inject 的 style tag <strong>不足以讓他進行 rehydrate（原因後面會說明）</strong>，所以他實際上只能重新 render 所有 component 的 style，重新產生 class name 與 style tag。</p>\n<p>而在了解到我們自己 inject 的 style tag 無法讓 styled-components 進行 rehydrate 後，我試著用前面提到過的 <code class=\"language-text\">disableCSSOMInjection</code>，根據<a href=\"https://styled-components.com/docs/api#stylesheetmanager\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a>，可以搭配 <code class=\"language-text\">StyleSheetManager</code>，讓 styled-components 自己 export 出含有 css text 的 style tag，但結果還是一樣有問題（後面會解釋原因）。</p>\n<p>因此，還是得仔細了解該如何讓 styled component 能正確 rehydrate，讀取我們在 prerender 時就已經處理過的 style，才不會造成 class name 衝突，以及有多餘的 style tag 產生。</p>\n<h3 id=\"styled-components-的-hydration\" style=\"position:relative;\"><a href=\"#styled-components-%E7%9A%84-hydration\" aria-label=\"styled components 的 hydration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-components 的 hydration</h3>\n<p>知道 solution 的方向後，開始到官網查閱關於 server side hydration 的資料，發現有針對 server-side rendering 所提出的<a href=\"https://styled-components.com/docs/advanced#server-side-rendering\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解決方案</a>：利用 <code class=\"language-text\">ServerStyleSheet</code> 可以搭配 <code class=\"language-text\">StyleSheetManager</code> provider，讓 styled-components 在 server-side 能夠產生 css style，並且提供機制讓該 style 能在 client-side 被 rehydrate：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyleSheetManager</span></span> <span class=\"token attr-name\">sheet</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">YourApp</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyleSheetManager</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> styleTags <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// or sheet.getStyleElement();</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handle error</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看起來就是該這樣做，不過呢，光從名字就跟你說了他是給你在 Server 用的，甚至還在文檔中寫上：<em>Just make sure not to use it on the client-side.</em></p>\n<p>但我們的 prerender 實際上是跑在 client 端，這樣肯定不行吧？</p>\n<p>我原本也是這樣想，打算放棄的時候，我優秀的<a href=\"https://github.com/whatasoda\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">同事</a>跑去讀了讀 styled-components 的原始碼，發現 <code class=\"language-text\">ServerStyleSheet</code> 內其實沒有用到任何 NodeJS 獨有的 API，也就是說實際上 <code class=\"language-text\">ServerStyleSheet</code> 跑在 client 端也是沒問題的！</p>\n<p><code class=\"language-text\">ServerStyleSheet</code> 跟一般 styled-components 在 client 端使用的 <code class=\"language-text\">StyleSheet</code>（styled-components 自己<a href=\"https://github.com/styled-components/styled-components/blob/b19d17f1d6739d0cc6da826cf701a9ee3c075525/packages/styled-components/src/sheet/Sheet.js#L26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">實作的版本</a>，並非 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StyleSheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Browser 內建的 StyleSheet</a>）差別在於，<code class=\"language-text\">ServerStyleSheet</code> 多傳了一個 <a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/models/ServerStyleSheet.js#L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">isServer = true</code> 的 option</a> 給 <code class=\"language-text\">StyleSheet</code>，而這會使得 styled-components 的 <code class=\"language-text\">StyleSheet</code> 在 <code class=\"language-text\">makeTag</code> 的時候，不是去生成一個實際的 style tag，而是產生一個 <code class=\"language-text\">VirtualTag</code>：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Tag.js#L7-L16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/** Create a CSSStyleSheet-like tag depending on the environment */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> makeTag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isServer<span class=\"token punctuation\">,</span> useCSSOMInjection<span class=\"token punctuation\">,</span> target <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SheetOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tag <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isServer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VirtualTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useCSSOMInjection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSOMTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextTag</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這個 <code class=\"language-text\">VirtualTag</code> 包含所有 style 的資訊，但不需要操作到實際的 DOM，這就是讓 styled-components 能支援 SSR 的原因。</p>\n<p>而 <code class=\"language-text\">StyleSheet</code> 的 <code class=\"language-text\">toString</code> <a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Sheet.js#L122\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">函式</a>，能夠 serialize <code class=\"language-text\">makeTag</code> 產生的 tag 的內容：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L10-L39\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">outputSheet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> length <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> css <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> group <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> group <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> group<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getIdForGroup</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rules <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">getGroup</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> rules<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> selector <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SC_ATTR</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.g</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>group<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      names<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          content <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// NOTE: It's easier to collect rules and have the marker</span>\n    <span class=\"token comment\">// after the actual rules to simplify the rehydration</span>\n    css <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>selector<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{content:\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLITTER</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> css<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再搭配 <code class=\"language-text\">ServerStyleSheet</code> 提供的 <code class=\"language-text\">getStyleTags</code> 方法，能夠 output 出正確的 style tag 來 inject 到你 SSR 產生的 HTML 內，讓 styled-components 可以順利 Rehydrate。</p>\n<p>而何謂 “正確” 的 style tag 呢？</p>\n<p>在我們最一開始的實作中，我們自己是透過下面這般方式產生出要 inject 到 HTML 中的 style tag：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// styled-components 預設產生的 tag 會是空的，因為採用 CSSOM API insertRule</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>sheet <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CSSStyleSheet</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\t\n  elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>sheet<span class=\"token punctuation\">.</span>cssRules <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\t\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rule</span> <span class=\"token operator\">=></span> rule<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">)</span>\t\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也就是說我們是取出 styled-components 預設產出的 style tag，把其中的 cssRules 讀出來後塞回去。</p>\n<p>這樣的做法錯在會保留 style tag 上的其他屬性，像是 <code class=\"language-text\">data-styled=active</code>。</p>\n<p>當 styled-components 在進行 Rehydrate 時，他會去抓取 <code class=\"language-text\">data-styled</code> 不為 <code class=\"language-text\">active</code> 的 style tag 來 parse，並進行 rehydrate：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rehydrateSheet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SELECTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SC_ATTR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token constant\">SC_ATTR_ACTIVE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">rehydrateSheetFromTag</span><span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這也說明了為什麼一開始我使用 <code class=\"language-text\">disableCSSOMInjection</code> 讓 styled-components 幫我產生 text node-based 的 css style tag 也沒有用，因為那樣產生的 style tag ㄧ樣會是帶有 <code class=\"language-text\">data-style=active</code> 的屬性，並不會被 styled-components 拿去 rehydrate。</p>\n<p>這時我們更加釐清了問題。</p>\n<p>首先，有兩個 styled-components 的 style tag 的確不對，但<strong>重點是這兩個 style tag 同時都擁有 <code class=\"language-text\">data-styled</code> 為 <code class=\"language-text\">true</code> 的屬性，以致於 styled-components 在 rehydrate 的時候抓不到可用的 style tag。</strong></p>\n<p>另外，也不是單純 <code class=\"language-text\">data-styled</code> 不為 <code class=\"language-text\">true</code> 的 style tag 就可以被 rehydrate，前面提到 <code class=\"language-text\">StyleSheet</code> 的 <code class=\"language-text\">toString</code> 能夠 serialize <code class=\"language-text\">VirtualTag</code> 的內容，其中有一段程式碼與註解：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// NOTE: It's easier to collect rules and have the marker</span>\n<span class=\"token comment\">// after the actual rules to simplify the rehydration</span>\ncss <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>rules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>selector<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">{content:\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SPLITTER</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊指示出，要能夠被 rehydrate 的 text node-based 的 css style tag，需要有特定的 <code class=\"language-text\">SPLITTER</code>：</p>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/constants.js#L13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SPLITTER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/*!sc*/\\n'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet/Rehydration.js#L55\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rehydrateSheetFromTag</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sheet<span class=\"token operator\">:</span> Sheet<span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> style<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SPLITTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rules<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h2 id=\"重新梳理一下問題與解法\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E6%96%B0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8B%E5%95%8F%E9%A1%8C%E8%88%87%E8%A7%A3%E6%B3%95\" aria-label=\"重新梳理一下問題與解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重新梳理一下問題與解法</h2>\n<h3 id=\"問題\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C\" aria-label=\"問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題</h3>\n<p>我們頁面 prerender 完的結果，在 client 端 first load 與 JS bundle rehydrate 後的樣式不同，原因是利用 client side render 製作 prerender 時，產生兩個同樣擁有 <code class=\"language-text\">data-styled=true</code> 屬性的 styled-components style tag，造成 styled-components 無法 rehydrate，只好重新產生新的 style tag，因而破壞了頁面樣式。</p>\n<h3 id=\"解法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B3%95\" aria-label=\"解法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解法</h3>\n<p>使用 <code class=\"language-text\">ServerStyleSheet</code> 搭配 <code class=\"language-text\">StyleSheetManager</code> 在 prerender 階段生成 <code class=\"language-text\">VirtualTag</code>（這邊的使用方法稍微 hack 了一點，因為我們的 prerender 是 client-side render，而官方不建議將 <code class=\"language-text\">ServerStyleSheet</code> 使用在 client side），接著再透過 <code class=\"language-text\">ServerStyleSheet</code> 的 <code class=\"language-text\">getStyleTags</code> 取得可被 styled-components 存取進行 rehydration 的 style tag，並 inject 到 prerendered HTML 中。</p>\n<p>主要的程式碼片段如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> sheet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 放在整個 Application 的最上層</span>\n<span class=\"token keyword\">const</span> StyleSheetProvider<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StyleSheetManager sheet<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>sheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 prerender 結束，產生 HTML 後執行</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">injectStyleElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  style<span class=\"token punctuation\">.</span>outerHTML <span class=\"token operator\">=</span> sheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sheet<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到這邊為止就算是將問題解決了，但會發現還是有問題，雖然 style tag 成功只剩下一個，看起來 rehydrate 也有成功，但樣式還是跑掉了。</p>\n<p>還好這個原因很好找，官網就有<a href=\"https://styled-components.com/docs/advanced#tooling-setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">解答</a> ：</p>\n<blockquote>\n<p>In order to reliably perform server side rendering and have the client side bundle pick up without issues, you'll need to use our babel plugin. It prevents checksum mismatches by adding a deterministic ID to each styled component.</p>\n</blockquote>\n<p>就是 SSR 最常見的 checksum issue，我們需要給每一個 styled-component 一個在前後端一致的 ID，這樣才可以確保 rehydrate 後能夠擁有相同的 class。</p>\n<p>加上 <a href=\"https://styled-components.com/docs/tooling#babel-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin</a> 後問題就成功解決了！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>經過這次的除錯過程，我才發現自己對於 styled-component 這類 React 生態系的套件了解度不夠深，才導致在一開始設計實作 prerender 時沒有注意到這件事情，另外也透過這次的紀錄發現要將一個 bug 的原因與解法從頭到尾書寫出來有多困難，畢竟整個除錯過程你可能是跳耀性的在思考各種可能，文章中的每個步驟其實也絕對不是這樣一步步找出解法的，要有條理的將其梳理出一個流暢的 flow 真的需要一點功力，看來我還有很大的進步空間！</p>\n<p>雖然這次的問題實際上的解法不需要更動多少程式碼，原理也很簡單，但若是沒有像我同事那樣鑽入程式碼去查看，光是憑靠自己的邏輯是很難思考出來的。整個過程學習到很多，遇到這個 bug 真是太好了！（好像怪怪的...）</p>\n<h3 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h3>\n<ol>\n<li><a href=\"https://styled-components.com/docs/advanced\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-component website</a></li>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/sheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-component source code</a></li>\n</ol>","id":"342141e0-0a2e-53ff-8ba8-a915956520a3","fields":{"slug":"styld-component-prerendering-issue"},"frontmatter":{"date":"2020-08-15T13:37:30.000Z","title":"另一個與 styled-components 相關的 debug 紀錄","tags":["web","styled-components","server-side generated page","react"],"type":"tech","slug":"styld-component-prerendering-issue"},"timeToRead":13},"type":"tech"}},"staticQueryHashes":["2123680655"]}