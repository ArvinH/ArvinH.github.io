{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/create-figma-plugin","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/vHXmj3hN5mI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Figma In Quarantine: The Musical</a></p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>Figma 已經是現在設計師間的必備武器，不少人都已經從 <a href=\"https://medium.com/as-a-product-designer/%E6%88%91%E5%BE%9E-sketch-%E8%80%81%E7%B2%89%E8%AE%8A%E6%88%90-figma-%E9%90%B5%E7%B2%89%E7%9A%84-10-%E5%80%8B%E7%90%86%E7%94%B1-4a47a4e394c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sketch 轉移到 Figma</a> 上，其免費方案幾乎包含所有核心功能，讓像我一樣沒有設計專業的工程師也能毫無壓力的使用。</p>\n<p>Figma 主要建構於 Web 技術，透過 <code class=\"language-text\">Webassembly</code> 來使用 C++ 等模組，而其推出的 Plugin 平台理所當然也能由 Javascript 撰寫。</p>\n<p>基於這個事實，讓我覺得或許學習一下如何撰寫 Figma plugin 是個不錯的投資，如果能提供公司內部設計師所需要的外掛，不僅能提升整體工作的效率，也能提高自己對團隊的影響力，雙贏策略！所以今天就來學習一下如何製作 Figma plugin！</p>\n<p>如果有讀者不太知道 Figma plugin 會長什麼樣子，這邊給大家看個範例：</p>\n<p><img src=\"/image/figma-plugin-demo.gif\" alt=\"demo\"></p>\n<p>也可以去官方 <a href=\"https://www.figma.com/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">community</a> 網站看看其他實際發佈上線的外掛，並載下來試用。</p>\n<p>上圖的範例是為設計中的元件加入一些 status，像是 <code class=\"language-text\">In review</code>，<code class=\"language-text\">Work in progress</code> 等等。（實際上早已有人實作ㄧ樣點子的<a href=\"https://www.figma.com/community/plugin/742769304454952644/Status-%E2%9C%85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">外掛</a>，也比較完善，所以我也不打算發佈出去，就當作一個練習，並拿來說明實作過程，<a href=\"https://github.com/ArvinH/figma-status-label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼在此</a>。）</p>\n<p>在開始之前，想跟大家分享一個很讚的東西，這是一齣由 Figma 員工在其內部一年兩次的 Maker Weeks 中所製作的音樂劇，完整體現 2020 年因為武漢肺炎而造成的許多工作軼事，其中還包含他們處理 incident 的過程，好聽之外也非常有趣，他們應該都工作得很愉快吧：）</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/vHXmj3hN5mI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p><em>剛好最近又是他們的 Maker Weeks，可以到 Figma 的 <a href=\"https://twitter.com/figmadesign\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a> 看看員工分享他們做了什麼！</em></p>\n<h2 id=\"一些簡單的前置作業\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E4%BA%9B%E7%B0%A1%E5%96%AE%E7%9A%84%E5%89%8D%E7%BD%AE%E4%BD%9C%E6%A5%AD\" aria-label=\"一些簡單的前置作業 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些簡單的前置作業</h2>\n<p>如果你跟我一樣，是個蠻愛跟風的前端工程師，需要做的前置作業相信你都早已準備好了。</p>\n<p>基本就是需要你有能夠運行 Typescript、Nodejs 與 NPM 的環境、適合 TS 的編輯器（VScode, etc）以及桌面版本的 Figma。</p>\n<p>對，目前若是要開發 Figma Plugin，你必須使用桌面版本，他們才能讀取你本地端的程式來執行。</p>\n<h2 id=\"figma-plugin-context-介紹\" style=\"position:relative;\"><a href=\"#figma-plugin-context-%E4%BB%8B%E7%B4%B9\" aria-label=\"figma plugin context 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Figma plugin context 介紹</h2>\n<p>在真的進入開發階段前，先了解一下 Figma plugin 是怎麼運作，其基本架構為何，對開發會有不小的幫助，就像是你開發 Chrome extension 時，也得先搞懂何謂 <code class=\"language-text\">background scripts</code>、<code class=\"language-text\">content scripts</code> ㄧ樣。</p>\n<p>如同前面所說，Figma plugin 全由 Web 技術打造，也就是 Javascript、CSS 與 HTML，然而為了維持 Figma 本身的穩定與安全性，你的 plugin 需要拆分成兩個部分，執行在不同的環境：</p>\n<ul>\n<li><strong>Sandbox</strong></li>\n</ul>\n<p>一部分是運行在 Figma main thread 中 Sandbox 內的程式，可以使用完整的 ES6 Javascript，存取操作 Figma 檔案內容，但無法存取 DOM 物件，也無法發出網路請求。</p>\n<ul>\n<li><strong>iframe</strong></li>\n</ul>\n<p>另一部分則是運行在 iframe 內，可以存取 DOM 元素、發起網路請求等一般的網頁功能，因此也是你提供 plugin 使用者外掛操作介面的地方。</p>\n<p>從<a href=\"https://www.figma.com/plugin-docs/how-plugins-run/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>的一張圖中，可以非常簡單明瞭的看出架構：</p>\n<p><img src=\"/image/figma-plugin-structure.png\" alt=\"figma-plugin-structure\"></p>\n<p>兩個部分的程式的溝通如同 worker 與 main thread 溝通一般，透過 <code class=\"language-text\">postMessage</code> 與 <code class=\"language-text\">onmessage</code> 來收發訊息。</p>\n<h2 id=\"目前支援的-figma-plugin-api\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E6%94%AF%E6%8F%B4%E7%9A%84-figma-plugin-api\" aria-label=\"目前支援的 figma plugin api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前支援的 Figma Plugin API</h2>\n<p>目前 Figma plugin API 支援：</p>\n<ul>\n<li>\n<p><strong>Reading layers and layer properties in the local file</strong></p>\n<p>理論上整個 figma file 內的 content 你都能夠讀取，包含 layer 的各種屬性。在現有架構下，即便有缺少的，也能夠提 request 請官方補上，不會太困難。</p>\n</li>\n<li><strong>Create a modal with custom UI</strong></li>\n<li>\n<p><strong>Access browser APIs</strong></p>\n<p>由於有一部分的 code 是會運行在上述提到的 iframe 中，而在 iframe 中基本上你可以創建任何 Web UI，運行 JS、發送 network request 等等。</p>\n</li>\n</ul>\n<p>雖然看起來只有三個大類別，但其實也已經包含了上百個 method 與可操作的屬性。</p>\n<p>未來官方還想繼續拓展延伸的部分有更多，包含像是 <code class=\"language-text\">Access Team library</code>、<code class=\"language-text\">Access Team info</code>，以及我最想要的 <code class=\"language-text\">Trigger plugin code on events</code> 等等。不過這些並沒有排入他們目前的 Road map 中，因為要在不影響主要產品的穩定度下進行，需要考慮的東西很多，所以沒有明確的 Timeline。</p>\n<p>至於詳細的項目以及個別項目實作上會有的困難，官方都有在<a href=\"https://www.figma.com/plugin-docs/whats-supported/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文件</a>中說明，我覺得很簡單易讀，建議大家有興趣的話去看一看，可以看出他們對於整體設計上的一些思路。</p>\n<h2 id=\"存取-figma-document\" style=\"position:relative;\"><a href=\"#%E5%AD%98%E5%8F%96-figma-document\" aria-label=\"存取 figma document permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>存取 Figma Document</h2>\n<p>基本上 Figma 的 plugin 都是想要存取 Figma 檔案內的物件，或是應該說是 Layer：</p>\n<p><img src=\"/image/figma-layers-example.png\" alt=\"figma-layers-example\"></p>\n<p>不過以程式的角度來看，Layer 其實比較適合用 <code class=\"language-text\">node</code> 來代表。</p>\n<p>有稍微用過 Figma 這類設計工具就知道，物件都可以被 Grouping 在一起成為一個物件，但你還是能繼續編輯 Group 底下的每一個物件，也就是 Layer 底下還可能會有其他 Layer，而這個概念就跟樹狀結構一樣\b，所以在撰寫程式的時候，用 <code class=\"language-text\">node</code> 來代表會直覺一點。</p>\n<p>例如，如果我們想要將當前選擇的物件中的文字統一調整成 font size 16，我們可以這樣寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"TEXT\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 告知 figma 你的 plugin 已經結束，可以關閉。</span>\nfigma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>而當你需要遍歷尋找特定節點時，就可以依靠我們學習樹狀資料結構時最常用的 traverse 函式，自己去找出需要的 Node：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"children\"</span> <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"INSTANCE\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> node<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// leaf, do something...etc</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 從 root 開始跑, 用 figma.root 也可</span></code></pre></div>\n<h3 id=\"node-type\" style=\"position:relative;\"><a href=\"#node-type\" aria-label=\"node type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node Type</h3>\n<p>Figma 中有許多類別的 Node，像是 <code class=\"language-text\">[RectangleNode](https://www.figma.com/plugin-docs/api/RectangleNode)</code>、<code class=\"language-text\">[TextNode](https://www.figma.com/plugin-docs/api/TextNode)</code> 與 <code class=\"language-text\">[FrameNode](FrameNode)</code> 等等，完整列表可以參考官方文件 - <a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node Type</a>。</p>\n<p>零零總總有 16 種不同類別的 Node，每一種也都擁有不同的屬性。要記起來不太可能，這時就得感謝一下 Typescript 的幫忙，Figma 有提供 <code class=\"language-text\">@figma/plugin-typings</code> 供你使用，搭配 VSCode 的支援，在操作不同 Node 時，可以輕鬆知道其所擁有的屬性，若是不清楚詳細用法，再對照<a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>即可。</p>\n<p><img src=\"/image/figma-typescript-autocom.png\" alt=\"ts-autocomplete\"></p>\n<p>此外，因為大部分的 Plugin 都是作用在特定的 Node type，為了不讓系統 crash，製作 plugin 時，各種 edge case 的處理就很重要，你要顧慮到當使用者在不適合的 Node type 上使用你的 plugin 時該怎麼處理，無論是 ignore 或是給予警告都可以，重點是要盡量讓系統維持穩定。</p>\n<h2 id=\"編輯屬性\" style=\"position:relative;\"><a href=\"#%E7%B7%A8%E8%BC%AF%E5%B1%AC%E6%80%A7\" aria-label=\"編輯屬性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>編輯屬性</h2>\n<p>看到這邊你可能會覺得奇怪，編輯屬性為什麼需要特別提出來說呢？</p>\n<p>一般來說，更改 Object 內部的 properties，我們自然會這樣處理：</p>\n<p><code class=\"language-text\">text.fontSize = 12</code></p>\n<p>在 Figma plugin sandbox 中操作普通的 Node object 時，這樣的寫法大部分也會是有效的。</p>\n<p>然而，若是要操作一些複雜一點的屬性，像是陣列（Array）與陣列內的物件（Object）時，就不能這樣處理，除了修改不會生效外，Figma 也會報 Error：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// error: object is not extensible</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>otherNode<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// error: Cannot assign to read only property 'r' of object</span>\nnode<span class=\"token punctuation\">.</span>fills<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">10</span></code></pre></div>\n<p>若要成功更改內容，你必須複製整個內容然後取代，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nselection<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>someNode<span class=\"token punctuation\">)</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> selection</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fills <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>fills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfills<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\nrect<span class=\"token punctuation\">.</span>fills <span class=\"token operator\">=</span> fills</code></pre></div>\n<p>之所以要這樣做，主要原因是，某些 Javascript Object 在 Figma 的 Sandbox 中其實並不是一般的 Javascript Object，Figma 在其內部有特殊的實作，expose 出的介面可能背後有複雜的抽象細節，像是屬性更動時，需要處理 <code class=\"language-text\">re-render</code>、<code class=\"language-text\">update instance</code> 等等；加上 Figma 背後使用 <a href=\"https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly memory</a>，基於穩定性與實作複雜度的考量，才只能出此下策。</p>\n<p>這點在實作 Plugin 的過程中，算是比較需要注意以及比較麻煩的點。</p>\n<p>官方在文件內有說明他們的難處與考量，有興趣的可以前去詳讀，附上連結<a href=\"https://www.figma.com/plugin-docs/editing-properties/#the-why\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在此</a>。</p>\n<h2 id=\"開始實作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"開始實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作吧</h2>\n<p>基本的概念介紹得差不多了，可以開始實作了。</p>\n<p>回顧一下我們的範例：</p>\n<p><img src=\"/image/figma-plugin-demo.gif\" alt=\"demo\"></p>\n<p>功能很簡單，就是幫使用者選取的物件加上 Label，會創建出一個 FrameNode，然後與使用者選取的物件群組在一起。</p>\n<p>前面說過，要開發 Figma plugin 需要使用 Figma 桌面版（有 Windows 與 Mac 版本），在 Figma 桌面版中，<code class=\"language-text\">點選右鍵 -> Plugins -> Development -> New Plugin...</code>：</p>\n<p><img src=\"/image/figma-new-plugin-1.png\" alt=\"figma-new-plugin-step1\"></p>\n<p><img src=\"/image/figma-new-plugin-2.png\" alt=\"figma-new-plugin-step2\"></p>\n<p>Figma 已經為你準備好了一些基本的 template，有三種選項可以選擇，<code class=\"language-text\">RunOnce</code> 與 <code class=\"language-text\">With UI &amp; browser APIs</code> 的差別就在於有沒有 <code class=\"language-text\">iframe</code> 的環境可以提供 Plugin 使用者一個 UI 介面操作。</p>\n<p><img src=\"/image/figma-new-plugin-3.png\" alt=\"figma-new-plugin-step3\"></p>\n<p>選定好 template 後，選擇 <code class=\"language-text\">Save as...</code> 就可以將一個 Figma plugin template 載下。（這次的範例選擇 <code class=\"language-text\">With UI &amp; browser APIs</code>）</p>\n<p>載下來的 Plugin template 結構如下：</p>\n<p><img src=\"/image/figma-new-plugin-template-structure.png\" alt=\"figma-new-plugin-template-structure\"></p>\n<p>是一個簡單的 typescript project，<code class=\"language-text\">code.ts</code> 是主要的 Figma Plugin Sandbox 程式，<code class=\"language-text\">code.js</code> 可想而知是編譯後的檔案。</p>\n<p><code class=\"language-text\">ui.html</code> 則是運行在 <code class=\"language-text\">iframe</code> 裡面，你可以用來繪製 UI 與使用 browser APIs、Network reqeust 的部分。</p>\n<p><code class=\"language-text\">mainifest.json</code> 則是用來描述你的 Plugin，告知 Figma 你的 Sanbox code 與 iframe code 位置在哪等等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"StatusLabel\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"917361515292167655\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"code.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui.html\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊的 <code class=\"language-text\">main</code> 與 <code class=\"language-text\">ui</code> 就是主要程式進入點，所以你其實也可以像開發一般的 Web SPA 一樣，用 React、Vue 來製作 UI，用 Webpack 來 bundle 你的程式，只要指定對路徑即可。範例可以參考<a href=\"https://www.figma.com/plugin-docs/bundling-webpack/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">此處</a>。</p>\n<p><strong>ui.html</strong></p>\n<p>我們先從 <code class=\"language-text\">ui.html</code> 開始看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Select status label<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Choose a status<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>status<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LGTM<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>LGTM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Work in progress<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Work in progress<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>In Review<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>In Review<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Please Review<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Please Review<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Create<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cancel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cancel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> select <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">[</span>select<span class=\"token punctuation\">.</span>selectedIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pluginMessage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">,</span> text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cancel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pluginMessage<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'cancel'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>完全就是一個普通的 HTML 檔案，唯一要注意的是，因為他是運行在 iframe 裡面，所以當我們要將資訊傳遞給 Sandbox 內的 <code class=\"language-text\">code.ts</code> 時，得用 <code class=\"language-text\">parent.postMessage()</code>。</p>\n<p>傳遞的參數要用 <code class=\"language-text\">pluginMessage</code>，可以傳遞幾乎任何 object。這邊我們為了要讓 Sandbox 內的 <code class=\"language-text\">code.ts</code> 知道使用者點選了哪種 Button，以及選擇了哪個 status label，我們定義以下的 Message 來傳遞：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Msg <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'create-label'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cancel'</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用者 select 的字串</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的程式碼呈現在 Figma 當中就如下圖（畫面中的 Developer VM <a href=\"#%E5%A6%82%E4%BD%95%E9%99%A4%E9%8C%AF\">待會會說明</a>）：</p>\n<p><img src=\"/image/figma-plugin-ui.png\" alt=\"figma-plugin-ui\"></p>\n<p><strong>code.ts</strong></p>\n<p>使用者介面有了，接著來看 <code class=\"language-text\">code.ts</code>。</p>\n<p>主要重點有兩個函式：<code class=\"language-text\">figma.showUI</code> 與 <code class=\"language-text\">figma.ui.onmessage</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This shows the HTML page in \"ui.html\".</span>\nfigma<span class=\"token punctuation\">.</span><span class=\"token function\">showUI</span><span class=\"token punctuation\">(</span>__html__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfigma<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...Implementation details</span>\n  <span class=\"token comment\">// ...ignore for now</span>\n  <span class=\"token comment\">// Make sure to close the plugin when you're done. Otherwise the plugin will</span>\n  <span class=\"token comment\">// keep running, which shows the cancel button at the bottom of the screen.</span>\n  figma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">figma.showUI</code> 就是單純告知 Figma 你有一個 UI 要呈現給使用者，參數 <code class=\"language-text\">__html__</code> 會指向 <code class=\"language-text\">ui.html</code> 的內容，Figma 會開啟一個 Modal 去呈現這個 iframe UI。</p>\n<p><code class=\"language-text\">figma.ui.onmessage</code> 用來接收從 iframe 傳來的 <code class=\"language-text\">postMessage</code>。（相反的，我們也可以用 <code class=\"language-text\">figma.ui.postMessage</code> <a href=\"https://www.figma.com/plugin-docs/creating-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">傳遞資訊給 iframe</a>，iframe 以 <code class=\"language-text\">window.onmessage</code> 接收。）</p>\n<p>以我們的<a href=\"https://github.com/ArvinH/figma-status-label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>來說，我們想要接收的訊息可以分為兩種：</p>\n<ul>\n<li>插入使用者選擇的 Status label（Create button）</li>\n<li>關閉外掛（Cancel button）</li>\n</ul>\n<p>在 <code class=\"language-text\">figma.ui.onmessage</code> 中，我們根據接收到的 <code class=\"language-text\">msg.type</code> 來判斷是要處理哪一種類型的動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">figma<span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 替選取的物件加上 label</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 若 msg.type !== 'create-label'，就直接關掉 plugin，也就是 cancel button</span>\n  figma<span class=\"token punctuation\">.</span><span class=\"token function\">closePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>當 <code class=\"language-text\">msg.type</code> 為 <code class=\"language-text\">create-label</code> 時，代表我們要創建 status label 並與使用者當前選取的 Layers（Nodes）群組在一起：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create-label'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nodes<span class=\"token operator\">:</span> SceneNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">loadFontAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> family<span class=\"token operator\">:</span> <span class=\"token string\">\"Roboto\"</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> <span class=\"token string\">\"Bold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> group<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token keyword\">of</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> <span class=\"token function\">createLabel</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 調整位置</span>\n    frame<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    frame<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n    group <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    group<span class=\"token punctuation\">.</span>layoutGrow <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span>\n  figma<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span><span class=\"token function\">scrollAndZoomIntoView</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因為我們的 Label 需要用到文字，也就是 <code class=\"language-text\">TextNode</code>，在 Figma 內他會要求你先載入字體檔，所以才需要加入這行：<code class=\"language-text\">await figma.loadFontAsync({ family: \"Roboto\", style: \"Bold\" });</code>。</p>\n<p>接著我們遍歷 <code class=\"language-text\">figma.currentPage.selection</code> 這個陣列，該陣列包含所有被使用者選取的 Layers（Nodes），我們針對每一個 Node 都創建一個 Label，這邊我們使用的是 <a href=\"https://www.figma.com/plugin-docs/api/FrameNode/#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">FrameNode</code></a>，類似於 HTML 中的 <code class=\"language-text\">Div</code>，我們用他與 <a href=\"https://www.figma.com/plugin-docs/api/TextNode/#docsNav\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">TextNode</code></a> 一起組合排版出一個 Label，像這樣：</p>\n<p><img src=\"/image/figma-plugin-ui-label.png\" alt=\"figma-plugin-ui-label\"></p>\n<p><code class=\"language-text\">createLabel</code> 函式是我自己抽出去實作的，主要就是針對 <code class=\"language-text\">FrameNode</code> 與 <code class=\"language-text\">TextNode</code> 做排版、顏色、內容的處理，這邊簡略給大家看一下，實際上 Node 的使用方式，例如有什麼屬性可以調整，可以搭配<a href=\"https://www.figma.com/plugin-docs/api/nodes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>閱讀：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createLabel</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">createFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Status Label'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n  frame<span class=\"token punctuation\">.</span>fills <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'SOLID'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> colorMap<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>cornerRadius <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">createText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>fontName <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> family<span class=\"token operator\">:</span> <span class=\"token string\">\"Roboto\"</span><span class=\"token punctuation\">,</span> style<span class=\"token operator\">:</span> <span class=\"token string\">\"Bold\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 略</span>\n  <span class=\"token comment\">// 這邊將 ui.html 傳入的 msg.text assign 給 TextNode</span>\n  text<span class=\"token punctuation\">.</span>characters <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span>constrainProportions <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> frame<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再來呢，我們想要讓群組好的 <a href=\"https://www.figma.com/plugin-docs/api/GroupNode/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">GroupNode</code></a>，自動被選取，並移動到使用者視野正中間。</p>\n<p>要做到這件事，我們必需把他放入一個 Node 陣列中，因為如同我們在 <a href=\"#%E7%B7%A8%E8%BC%AF%E5%B1%AC%E6%80%A7\">編輯屬性</a> 提到的，要跟改陣列物件，我們必須整個陣列改掉才能生效：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...略</span>\n<span class=\"token keyword\">const</span> nodes<span class=\"token operator\">:</span> SceneNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...略</span>\n<span class=\"token comment\">// 將我們創造的 Label frameNode 與 目前選到的 Node 群組起來。</span>\ngroup <span class=\"token operator\">=</span> figma<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> figma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...略</span>\nnodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfigma<span class=\"token punctuation\">.</span>currentPage<span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 呼叫此 API 來移動 view port</span>\nfigma<span class=\"token punctuation\">.</span>viewport<span class=\"token punctuation\">.</span><span class=\"token function\">scrollAndZoomIntoView</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到這邊為止，整個 Plugin 的實作就完成了，接著只要執行 <code class=\"language-text\">npm run build</code>，將檔案編譯好，你就能在 Figma Desktop 中找到你的 Plugin 來使用。（可以在 Development 下面找到）</p>\n<p><img src=\"/image/figma-plugin-in-app.png\" alt=\"figma-plugin-in-app\"></p>\n<p>當然，每次都要 build 會很麻煩，所以你一樣可以設定 Webpack watch mode，這樣會比較方便一些。<a href=\"https://www.figma.com/plugin-docs/bundling-webpack/#6-configure-webpack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方有範例可以參考</a></p>\n<h2 id=\"如何除錯\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%99%A4%E9%8C%AF\" aria-label=\"如何除錯 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何除錯</h2>\n<p>開發的過程中，免不了需要除錯，Figma 既然是以 Web 技術為底，當然有 Dev Tool 可以使用，可以從 <code class=\"language-text\">右鍵 -> plugins -> Development -> Open console</code> 或是用跟 Chrome 開啟 Devtool 一樣的 shortcut 來開啟：</p>\n<p><img src=\"/image/figma-plugin-debug.png\" alt=\"figma-plugin-debug\"></p>\n<p>不過這只能讓你看到錯誤訊息，若是你想加入 Debugger 來下中斷點，並在 Console 內看到你的 source code，你需要啟用 <code class=\"language-text\">Developer VM</code>：</p>\n<p><img src=\"/image/figma-plugin-debug-developer-vm.png\" alt=\"figma-plugin-debug-developer-vm\"></p>\n<p><img src=\"/image/figma-plugin-debugger.gif\" alt=\"figma-plugin-debugger\"></p>\n<h3 id=\"caveat\" style=\"position:relative;\"><a href=\"#caveat\" aria-label=\"caveat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat</h3>\n<p>運行在 <code class=\"language-text\">Developer VM</code> 環境的 Plugin，其效能與 runtime 與實際跑在 Figma 上的會有不同，所以正式發佈前記得要取消 <code class=\"language-text\">Developer VM</code> 的選項，在一般環境下運行看看。</p>\n<h2 id=\"發佈你的-plugin\" style=\"position:relative;\"><a href=\"#%E7%99%BC%E4%BD%88%E4%BD%A0%E7%9A%84-plugin\" aria-label=\"發佈你的 plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>發佈你的 Plugin</h2>\n<p>最後，完成你的 Plugin 後，當然會想要上架啦。</p>\n<p>目前要上架 Plugin 需要經過 Figma 團隊的審核，官方有文章詳細說明每一個步驟，我就不贅述，可以到這邊查看：</p>\n<p><a href=\"https://help.figma.com/hc/en-us/articles/360042293394-Publish-a-plugin-to-the-Community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Publish a plugin to the Community</a></p>\n<h3 id=\"caveat-1\" style=\"position:relative;\"><a href=\"#caveat-1\" aria-label=\"caveat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat</h3>\n<p>雖然我沒有實際上架 Plugin，但相信照著文章步驟做不會有太大問題，只是有一個點要注意一下。</p>\n<p>你在 Figma 的帳號需要啟動 two-factor authentication 才能夠申請發佈 Plugin，<a href=\"https://help.figma.com/hc/en-us/articles/360039817634\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>如果你是用 Google account SSO 申請的帳號，是不能夠啟用 two-factor authentication 的</strong></a>，必須重新申請一個以 Email 註冊的帳號。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Figma Plugin 的製作概念不複雜，除了要手動去設定每個 Node 的屬性來改變物件型態一開始不太習慣外，整體實作起來的感覺是蠻迅速方便的，程式編譯完以後，在 Figma 桌面程式內可以直接使用，不需要有額外載入的動作。</p>\n<p>比較可惜的是目前還無法根據 Event 來觸發 Plugin，但依照 Figma 工程師的能力與創造力，相信在未來是有可能的。看看他們今年 maker week 就有人做了一個 Gameboy 的 plugin LOL：</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">For maker week at <a href=\"https://twitter.com/figmadesign?ref_src=twsrc%5Etfw\">@figmadesign</a> I really wanted to do something wild, so I made a plugin that runs a gameboy emulator inside of Figma and renders the output as vectors to the canvas. <a href=\"https://t.co/M7up2Gb2a8\">pic.twitter.com/M7up2Gb2a8</a></p>&mdash; Sawyer Hood (@sawyerhood) <a href=\"https://twitter.com/sawyerhood/status/1336000511107977216?ref_src=twsrc%5Etfw\">December 7, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>感謝閱讀到這邊的讀者，不知道是否有激起你一點慾望想去試試看製作 Figma plugin？有或沒有都很好，至少希望你對此有個大概的了解。而我呢，準備要去跟設計師討論看看，有什麼內部需求可以來玩玩了！</p>","fields":{"slug":"create-figma-plugin"},"frontmatter":{"title":"製作 Figma Plugin","date":"12-05-2020","tags":["Figma","Plugin"]},"timeToRead":16}},"pageContext":{"slug":"create-figma-plugin","prev":{"excerpt":"今年 地味ハロウィン 的第一名我給這位 LOL - パンダが足にまとわりついてしまう飼育員","html":"<blockquote>\n<p>今年 地味ハロウィン 的第一名我給這位 LOL - パンダが足にまとわりついてしまう飼育員</p>\n</blockquote>\n<!-- more -->\n<blockquote class=\"twitter-tweet\" data-dnt=\"true\" data-theme=\"light\"><p lang=\"ja\" dir=\"ltr\">パンダが足にまとわりついてしまう飼育員<a href=\"https://twitter.com/hashtag/%E5%9C%B0%E5%91%B3%E3%83%8F%E3%83%AD%E3%82%A6%E3%82%A3%E3%83%B3?src=hash&amp;ref_src=twsrc%5Etfw\">#地味ハロウィン</a> <a href=\"https://twitter.com/hashtag/DPZ?src=hash&amp;ref_src=twsrc%5Etfw\">#DPZ</a> <a href=\"https://t.co/GlHyjuZJ5R\">pic.twitter.com/GlHyjuZJ5R</a></p>&mdash; チカ (@chica_1107) <a href=\"https://twitter.com/chica_1107/status/1322368574380335104?ref_src=twsrc%5Etfw\">October 31, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>大約是在前陣子 GitHub 的 profile readme 很夯的時候，我在網路上看到了 matter.js 這個套件的作品，腦袋中就萌生一個點子想試試看，但因為真的沒有實際用處，也不確定效果好不好，就被我一直擱置，直到這個週末的空閒時間才決定要來實現它。</p>\n<p>整體想法是這樣的，我想從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</p>\n<p>這邊用我老婆☺️ 的名字作為範例先給大家看看成果：</p>\n<p><img src=\"/image/HSI-HOver-DropName-loop.gif\" alt=\"wife\"></p>\n<p>而放到 GitHub 頁面的效果如下：</p>\n<p><img src=\"/image/github-demo.gif\" alt=\"github\"></p>\n<p>效果跟我想像的還是有點差異，不過也有八成像了，今天就利用我製作的小玩具來介紹一下 matter.js 的基本使用方式。</p>\n<h2 id=\"基本介紹\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9\" aria-label=\"基本介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本介紹</h2>\n<p><img src=\"/image/matterjs-website.png\" alt=\"matterjs-website\"></p>\n<p>matter.js 是一套由 JavaScript 撰寫的物理引擎，讓你能透過 JS 在瀏覽器上模擬物理反應，可以輕易調整物體重量、質量、速度，甚至是密度、摩擦力等等變量，非常適合用在需要呈現物理效果的 2D 遊戲中。</p>\n<p>其提供的 API 也設計得簡單好用，只是雖然每個 API 都有文件，但內容都不太實用，如果你需要調整細節的話，要馬就自己慢慢更動嘗試，不然就得查看其原始碼會比較清楚。</p>\n<p>而至於支援度部分也無須擔心，瀏覽器支援 IE8+，手機的觸控 Event 也不成問題。我覺得是另一個如同 GSAP 一樣值得花點時間學習把玩的前端工具。</p>\n<p>在進入我們的範例製作解析前，我想先條列介紹 matter.js 中的常用套件，除了先了解整體的 Context 外，也能當作之後說明實作內容時的 reference。</p>\n<h3 id=\"matterjs-的通用模組\" style=\"position:relative;\"><a href=\"#matterjs-%E7%9A%84%E9%80%9A%E7%94%A8%E6%A8%A1%E7%B5%84\" aria-label=\"matterjs 的通用模組 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Matter.js 的通用模組</h3>\n<p>matter.js 的 API 定義的很易懂，既然是做物理模擬，當然就要有 <code class=\"language-text\">World</code>、<code class=\"language-text\">Body</code> 與 <code class=\"language-text\">Constraint</code>，而這些也是你使用 matter.js 所需要的基礎元件。</p>\n<p><strong>World</strong>: matter.js 透過此模組來創建一個模擬世界，可以微調世界中的一些屬性，像是重力、邊界等等，而一個世界當然是由多個 Bodies 所組成。</p>\n<p><strong>Bodies</strong>: Bodies 模組提供你方法去生成一些物體，像是圓形物體、方形物體等等，你也可以傳入 svg、img 去客製化物體形狀與樣式。產生的物體放入 World 中後就可以被 render 在畫面上。</p>\n<p><strong>Body</strong>: 利用 Bodies 產生的物件可以利用 Body 模組來進行進一步的操控。透過 Body，你可以旋轉、縮放、位移你的物體，也可以更改物體本身的密度、速度等等。換句話說，Body 讓你調整物體的物理特性。</p>\n<p><strong>Engine</strong>: 引擎，顧名思義就是驅動整個模擬物理世界的動力，根據 Body 的物理性質來精準掌控 <code class=\"language-text\">World</code> 內 <code class=\"language-text\">Body</code> 彼此間的物理現象，確保能模擬出符合設定的反應。是 matter.js 的核心。主要的<a href=\"https://github.com/liabru/matter-js/blob/master/src/core/Engine.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">程式碼</a>意外的沒有很長，可以大略看出 Engine 會負責控制 Bodies 之間的狀態更新。</p>\n<p><strong>Render</strong>: matter.js 有提供一個 Canvas based 的 Renderer，讓你能將 Engine 所催動的結果繪製出來，這個內建的 Render 模組主要是讓你用在開發與除錯上的，但對於簡單的動畫或遊戲，還是可以使用。另外要注意的是，該模組預設只會繪製出 wirefram 與向量，你要主動將 <code class=\"language-text\">render.options.wireframes</code> 設為 false，否則，以今天的模組為例（我們今天的範例也是用此模組開發。），他會變成這樣：</p>\n<p><img src=\"/image/matterjs-wireframe.png\" alt=\"matterjs-wireframe\"></p>\n<p>不過照這樣看來，依照官方的意思，如果你要使用 matter.js 來製作遊戲等等，基本上應該要自己實作 Render，你才能更好的控制畫面的變化。官方有提供一些 Renderer 的<a href=\"https://github.com/liabru/matter-js/wiki/Rendering#renderer-example\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a>，也可以從其<a href=\"https://github.com/liabru/matter-js/blob/master/src/render/Render.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">原始碼</a>參考。</p>\n<p><strong>Composites</strong>: 這個模組有點像是 Bodies 模組，差別在於 Bodies 模組讓你創建出 ”一個“ 物體，而 Composites 提供方法讓你創建出多個物體所組合而成的物體，像是 Stack、Pyramid 或甚至是 Car, Chain 等等常用的內建組合。</p>\n<p><strong>Composite</strong>: 如同 Body 對應於 Bodies，Composite 就是對應於 Composites 的模組，讓你控制由 Composites 創建出的組合物體的物理特性。</p>\n<p><strong>Constraint</strong>: Constraint 模組讓你能為兩個物體之間增加物理限制，像是兩物體一定要間隔一定距離等等。這個模組在我們這次的範例中我沒有用到，不過官網有不少範例都有使用，像是 <a href=\"https://brm.io/matter-js/demo/#newtonsCradle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Newton's Cradle</a>。</p>\n<p><strong>MouseConstraint</strong>: 如同 Constraint，這個模組讓你增加滑鼠與物體之間的”約束”，透過建立物體與滑鼠的限制，就可以讓使用者透過滑鼠與你創建的物體互動。前面的範例中沒用到，但後面我會稍微帶到如何使用。</p>\n<h2 id=\"知道了基本模組就從做中學吧\" style=\"position:relative;\"><a href=\"#%E7%9F%A5%E9%81%93%E4%BA%86%E5%9F%BA%E6%9C%AC%E6%A8%A1%E7%B5%84%E5%B0%B1%E5%BE%9E%E5%81%9A%E4%B8%AD%E5%AD%B8%E5%90%A7\" aria-label=\"知道了基本模組就從做中學吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>知道了基本模組，就從做中學吧</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Engine <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Engine<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Render <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Render<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Composites <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Composites<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> World <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Bodies <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Bodies<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Body <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">;</span></code></pre></div>\n<p>起手式就是先將先前介紹過的模組都宣告出來。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// create engine</span>\n<span class=\"token keyword\">const</span> engine <span class=\"token operator\">=</span> Engine<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> world <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>world<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// create renderer</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> Render<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  element<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  engine<span class=\"token operator\">:</span> engine<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token number\">920</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token operator\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著創建 instance，利用 <code class=\"language-text\">Engine.create()</code> 創造 Engine 實例，而 <code class=\"language-text\">engine.world</code> 最後會需要傳給 <code class=\"language-text\">World</code> 模組，可以想像成是此引擎（Engine） 所驅動的世界（world）。</p>\n<p><code class=\"language-text\">Render</code> 的部分我們要指定使用的 engine、要渲染的 root element，以及寬高等基本選項。更細部的 properties 可以參考<a href=\"https://brm.io/matter-js/docs/classes/Render.html#properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網文件</a>，以我們的範例來說，只需要這樣就夠了。</p>\n<p>到目前為止，我們設定好了 <code class=\"language-text\">Engine</code> 與 <code class=\"language-text\">Render</code> 的實例，代表我們已經準備好了一個虛擬的世界，然而光是準備好還不夠，我們需要“啟動”它。</p>\n<p>所謂的啟動，其實就是要不斷地去呼叫 <code class=\"language-text\">Engine.update()\b</code> 來觸發引擎計算，或是讓 Renderer 更新畫面，執行類似下面的動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Engine<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而實際上 matter.js 內有另一個模組 <code class=\"language-text\">Matter.Runner</code>，可以來幫忙運行引擎與觸發 Render，在 <code class=\"language-text\">Engine</code> 與 <code class=\"language-text\">Render</code> 物件內都有個叫 <code class=\"language-text\">run</code> 的 helper 函式，就是用到此內建 Runner 模組，只要將實例放入，matter.js 的 <code class=\"language-text\">Runner</code> 就會幫忙執行 Runner 該做的事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Engine<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRender<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不過，與前面提到的 <code class=\"language-text\">Matter.Render</code> 類似，依照官網說法，內建的 <code class=\"language-text\">Matter.Runner</code> 主要也是開發與除錯用途，只適合用在簡單的小應用上。</p>\n<h3 id=\"萬事俱備只欠東風\" style=\"position:relative;\"><a href=\"#%E8%90%AC%E4%BA%8B%E4%BF%B1%E5%82%99%E5%8F%AA%E6%AC%A0%E6%9D%B1%E9%A2%A8\" aria-label=\"萬事俱備只欠東風 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>萬事俱備，只欠東風</h3>\n<p>Engine 與 Render 都啟動了，虛擬世界已上線，再來就只要往裡面丟入物體就好了。</p>\n<p>分析一下我的點子：<em>從上掉落一個利用 GitHub contribution graph 拼湊出的名字，然後掉落至畫面中間後，除了名字以外的方塊就會因為撞擊而噴散，最後只留下名字。</em></p>\n<p>大致需要幾個條件：</p>\n<ul>\n<li>一堆小方塊來堆疊出 contribution graph。</li>\n<li>小方塊要能自由墜落，而代表名字部分的小方塊到某個點時需要停住。</li>\n<li>小方塊要能有噴散的效果。</li>\n</ul>\n<p>從 matter.js 的官網中可以找到許多範例，從那些範例內，可以大致摸索出自己需要哪些模組才能拼湊出這樣的效果。</p>\n<p>首先，可以利用 <code class=\"language-text\">Composites.stack</code> <a href=\"https://brm.io/matter-js/docs/classes/Composites.html#method_stack\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a> 來製造出堆疊好的 contribution graph：</p>\n<blockquote>\n<p>API: Matter.Composites.stack(xx, yy, columns, rows, columnGap, rowGap, callback)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...略</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      fillStyle<span class=\"token operator\">:</span> color<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 隨機給定格子顏色</span>\n      strokeStyle<span class=\"token operator\">:</span> <span class=\"token string\">'#fff'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...略</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Composites.stack</code> 前面六個參數可以定義一個 grid 空間，範例中我們在相對於 <code class=\"language-text\">Render</code> 設定範圍的 x 軸 125px 與 y 軸 15px 的位置開始放置 stack，並定義該 grid 是 45 x 7 的格子（GitHub 上每行七天，大約 45 週），每個方塊大小 15px x 15px，格子與格子之間我們不需要空格，因此 columnGap 與 rowGap 都填 0。</p>\n<p>而最後的 callback 函數中，可以組合多個 body 來擺放在其 grid 空間中。舉例來說，我們想要繪製出 contribution graph 的話，就是在 callback 函式中，利用 <code class=\"language-text\">Bodies.rectangle</code> 來產生一個個的小方塊，在這個 callback 中可以做很多事情，包含定義方塊的顏色、狀態等等。 </p>\n<p>到這邊可以繪製出一個還不錯的 contribution graph：</p>\n<p><img src=\"/image/github-graph.png\" alt=\"github-graph\"></p>\n<h3 id=\"那名字呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%90%8D%E5%AD%97%E5%91%A2\" aria-label=\"那名字呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那名字呢？</h3>\n<p>要客製化 contribution graph 好像很不少方式，像是<a href=\"https://hackernoon.com/hack-your-github-contribution-graph-d88bdb417351\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>，但我沒想那麼多 LOL 畢竟一開始只是想實驗看看，所以就用最土炮的方式，用 <a href=\"https://www.pixilart.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pixilart</a> 手動在 45x7 的格子上用 pixel art 的方式寫出名字，然後再慢慢把格子數出來，建立一個雙層陣列來存：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> nameBlock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然後在剛剛的 <code class=\"language-text\">Composites.stack</code> 的 callback 函數中，我就能判斷當下繪製的 body（rectangle）是不是屬於名字的一部分，進一步做處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 根據當下的 rectangle 位置 (x, y) 與 nameBlock 做比對</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">static</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> indexX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">125</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> indexY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> nameBlock<span class=\"token punctuation\">[</span>indexY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 若是屬於名字的一部分，設定為 static，然後給予不同的顏色設定</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block <span class=\"token operator\">&amp;&amp;</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#229A3B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#196126'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#EBEDEF'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#C5E48B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isStatic<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>繪製成果：</p>\n<p><img src=\"/image/matterjs-githubgraph-withname.png\" alt=\"withName\"></p>\n<p>另外，在上面我自製的 <code class=\"language-text\">static</code> 函式中，會根據 rectangle 是否屬於名字的一部分，回傳 <code class=\"language-text\">isStatic</code> 布林值，這個值其實是屬於 <code class=\"language-text\">Body</code> 的一個 property，若 <code class=\"language-text\">isStatic</code> 設為 true，則該物體就不會受到其他物體的物理影響，很適合用在製作牆壁之類的物體，也恰好可以用來滿足我希望名字能被定住的需求。</p>\n<p>而由於我希望方塊們是在掉落到一半的時候，名字才卡住，而其餘的方塊得隨著地心引力繼續下落，所以我必須要延緩設定 <code class=\"language-text\">isStatic</code> 的時間點，不能在我使用 <code class=\"language-text\">Bodies</code> 創建 rectangle 時就設定，需要來個 setTimeout 才行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Body<span class=\"token punctuation\">.</span><span class=\"token function\">setStatic</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> isStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>由於因為“物理界”的正常現象，方塊會從我們設定的 y 軸 15px 的地方掉落，而在下落的 800ms 時，我們透過 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setStatic\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Body.setStatic()</code></a> 這個 method 讓屬於名字部分的方塊變為 static，這樣就能達到名字掉落一半時定住，其餘方塊繼續掉落的效果：</p>\n<p><img src=\"/image/name-fix-block-drop.gif\" alt=\"name-fix-block-drop\"></p>\n<h3 id=\"增加阻礙摩擦力與速度\" style=\"position:relative;\"><a href=\"#%E5%A2%9E%E5%8A%A0%E9%98%BB%E7%A4%99%E6%91%A9%E6%93%A6%E5%8A%9B%E8%88%87%E9%80%9F%E5%BA%A6\" aria-label=\"增加阻礙摩擦力與速度 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>增加阻礙、摩擦力與速度</h3>\n<p>想要的效果達成一半了，就是方塊掉落速度太線性了，而且直直落到畫面外也有點好笑，我們需要製造一點障礙物以及改變物體的速度，產生撞擊的效果。</p>\n<p>首先，增加障礙物。</p>\n<p>要增加障礙物很簡單，matter.js 的範例裡面很多都有利用 <a href=\"https://brm.io/matter-js/docs/classes/Bodies.html#method_rectangle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Bodies.rectangle</code></a> 去創建牆壁，控制物體的活動範圍，這在製作遊戲時也是很重要的一部分。我們也可以如法泡製，增加四面八方的牆壁：</p>\n<blockquote>\n<p>API: Matter.Bodies.rectangle(x, y, width, height, [options])</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wallOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    fillStyle<span class=\"token operator\">:</span> <span class=\"token string\">'transparernt'</span><span class=\"token punctuation\">,</span>\n    strokeStyle<span class=\"token operator\">:</span> <span class=\"token string\">'#FBFBFB'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  isStatic<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> topWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">650</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bottomWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rightWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">880</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> leftWall <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">420</span><span class=\"token punctuation\">,</span> wallOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>牆壁的製作就是利用前面提到的 <code class=\"language-text\">isStatic</code> 屬性，讓他固定住，然後設定好擺放位置與長寬即可。唯一要注意的是，牆壁的長度要調整，不能四面都ㄧ樣長，這樣小方塊撞擊到牆壁後，還能從邊緣掉落或向外噴散，效果會好一點。</p>\n<p>加了牆壁後，讓小方塊不會直直掉落，有了一些回饋感：</p>\n<p><img src=\"/image/matterjs-wall.gif\" alt=\"matter-js-wall\"></p>\n<p>接著是物體的速度。</p>\n<p><code class=\"language-text\">Matter.Body</code> 有提供 <a href=\"https://brm.io/matter-js/docs/classes/Body.html#method_setVertices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">setVelocity</code></a> 這個屬性可以立即增加物體本身的線性速度，調整的方式為給予一個向量，因此可以調整施予速度的方向性：</p>\n<blockquote>\n<p>API: Matter.Body.setVertices(body, vertices), Vertor: { x: 0, y: 0 }</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocity</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這樣就會讓一個小方塊往 x 軸 3，y 軸 -10 的方向增加速度，再加上先前加入的牆壁與固定住的名字方塊，產生的撞擊反彈就能達成這樣的效果：</p>\n<p><img src=\"/image/matter-js-velocity.gif\" alt=\"velocity\"></p>\n<p>除此之外，<code class=\"language-text\">Bodies.rectangle</code> 在宣告時能夠傳入調整物理特性的 properties，像是 <code class=\"language-text\">frictionAir</code> 可以改變物體的空氣摩擦力，數值越高，物體掉落越慢，並且都能透過 <code class=\"language-text\">Matter.Body</code> 去操控，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Body<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>相關 <a href=\"https://brm.io/matter-js/docs/classes/Body.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API</a> 官網都有條列出來。</p>\n<p>將上述調整物體物理特性的函式呼叫搭配適當的 setTimeout，就能夠完成我們今天的範例效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> Composites<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isStatic<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> block <span class=\"token operator\">=</span> Bodies<span class=\"token punctuation\">.</span><span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...略</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">.</span><span class=\"token function\">setStatic</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> isStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> frictionAir<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isStatic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocity</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">900</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>喔對了，最後當然要記得把我們產生的 Stack composites 與牆壁放入模擬的世界中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// const world = engine.world;</span>\nWorld<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  stack<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// walls</span>\n  topWall<span class=\"token punctuation\">,</span>\n  bottomWall<span class=\"token punctuation\">,</span>\n  rightWall<span class=\"token punctuation\">,</span>\n  leftWall\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing...</h3>\n<p>matter.js 主打物理引擎，當然不是單純用來製造動畫，而是用來製作遊戲等等，也就是說要能與使用者互動，而方法就是一開始提到過的 <code class=\"language-text\">MouseConstraint</code>，雖然這次範例用不著這個東西，但還是放個使用方法在這邊供參考：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Mouse <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>Mouse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MouseConstraint <span class=\"token operator\">=</span> Matter<span class=\"token punctuation\">.</span>MouseConstraint<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouse <span class=\"token operator\">=</span> Mouse<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mouseConstraint <span class=\"token operator\">=</span> MouseConstraint<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  mouse<span class=\"token operator\">:</span> mouse<span class=\"token punctuation\">,</span>\n  constraint<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    stiffness<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      visible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nWorld<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>world<span class=\"token punctuation\">,</span> mouseConstraint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用法其實很簡單，其中 constraint 參數 <code class=\"language-text\">visible</code> 代表著滑鼠的拖拉軌跡會不會呈現出來，而 stiffness 可以算是調整所設定的 constraint 的韌度，調整該值可以影響物體受牽制（與滑鼠互動）後產生的彈性。文字可能有點難以描述，有需要使用的時候可以從官網文件查看可調整的參數值，試試看效果再決定要如何設置。</p>\n<p>上述設定的效果如下：</p>\n<p><img src=\"/image/matter-js-mouse.gif\" alt=\"matter-js-mouse\"></p>\n<p>最後放上程式碼連結供各位參考：<a href=\"https://codepen.io/arvin0731/pen/qBNoLQv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/arvin0731/pen/qBNoLQv</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Matter.js 應該算是蠻久的一個工具了，以使用上來說非常容易上手，做些小動畫小遊戲蠻適合的，至於要真的用來製作複雜的遊戲的話，可能還是要再多研究他的效能如何，畢竟我這次並沒有觸碰到那塊，就歡迎有接觸過的讀者分享了！</p>\n<p>畢竟這個範例也是拼拼湊湊而來的，週末小玩具就是這樣，的確沒辦法理解到他底層是如何實作，但是至少完成了想要的效果，然後也知道了這個工具的一些基本用法，之後有需要時可以快速拿來使用。</p>\n<p>不過，提醒自己也提醒大家，要記得撥出時間去理解底層原理，因為這才是能讓你成長的要素，共勉之啦！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://brm.io/matter-js/docs/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">matter-js website</a></li>\n<li><a href=\"https://code.tutsplus.com/series/getting-started-with-matterjs--cms-1186\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting Started with Matter.js</a></li>\n<li><a href=\"https://www.pixilart.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pixilart</a></li>\n</ol>","id":"8449f260-f743-5214-ab33-8d991fd3b091","fields":{"slug":"matterjs-intro"},"frontmatter":{"date":"2020-11-01T13:37:30.000Z","title":"使用 Matter.js 2D 物理引擎製作動畫","tags":["web","matterjs","2d physics","for fun"],"type":"tech","slug":"matterjs-intro"},"timeToRead":15},"next":{"excerpt":"慢走不送 2020，讓我們在 2021 一起 LOST IN PARADISE! ALI – LOST IN PARADISE feat. AKLO","html":"<blockquote>\n<p>慢走不送 2020，讓我們在 2021 一起 LOST IN PARADISE! <a href=\"https://youtu.be/KnakQRoQRzk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ALI – LOST IN PARADISE feat. AKLO</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/KnakQRoQRzk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>年末年始很適合來回顧過去展望未來，2020 對我們這代人來說絕對是難以忘記的一年，面對 2021，希望我們繼續保有對生活的熱情，享受生命的每一刻美好。</p>\n<p>2021 的第一篇文章不談生硬的技術、不寫長篇的教學文，我想分享一下在 2020 的最後一個 quarter 中，公司團隊所嘗試的 self-improvement 計畫，討論它為我們帶來的好處與是否適合大家嘗試導入。</p>\n<h2 id=\"何謂-self-improvement-計畫又為何重要\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-self-improvement-%E8%A8%88%E7%95%AB%E5%8F%88%E7%82%BA%E4%BD%95%E9%87%8D%E8%A6%81\" aria-label=\"何謂 self improvement 計畫又為何重要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 self improvement 計畫？又為何重要？</h2>\n<p>這個計畫實際上是由我們團隊新進主管所提出的，他認為，除了完成工作上交付的任務外，持續去精進專業能力是我們工程師的一種生活方式，這點相信毋庸置疑，大家都在推廣要撰寫部落格、參與開源專案、製作 side project 等等，這都是為了精進我們的專業能力。</p>\n<p>然而，生活不是只有這個面向，工程師也需要照顧家人、培養各種嗜好\b，以及享受其他生活美好；或更簡單點，維持你的 mental health。</p>\n<p>若要在下班後的時間，同時完成這所有的事情，著實是相當困難。</p>\n<p>因此他提出的 self improvement 計畫就是希望能建立一個框架，讓這一切從理想狀態變成現實。</p>\n<p>相信大家都聽過 Google 著名的 20% time，也就是能利用上班時間的 20% 來做自己想嘗試的專案，無論是否直接跟工作有關聯。</p>\n<p>所謂的 self improvement 計畫就是類似的概念，利用每個 sprint 的 20% 時間來增進自我，差別在於執行的專案必須要能夠幫助到你在工作上的成長。</p>\n<p>以一個 sprint 兩個星期來說，總共十個工作天，20% 的時間等同於每個 sprint 必須騰出兩天的時間給團隊成員執行自我精進計畫。</p>\n<p>沒錯，這等同於在要求公司對員工進行投資，但其實你仔細想想是非常合理的，畢竟當你精進了專業能力，公司當然也會受惠，更別提在過程中你的產出可能就已經直接對公司帶來正面影響，像是你可能在過程中幫忙製作了增進大家效率的開發工具等等。</p>\n<p>不過說是這樣說，一切還是很理想化，因此在真正執行這個計畫前，團隊內部是進行不少討論的，尤其是需要說服 PM 們認同這項計畫的好處，因為這是有可能會影響到公司專案的時程。</p>\n<h2 id=\"實際運作方法\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E9%81%8B%E4%BD%9C%E6%96%B9%E6%B3%95\" aria-label=\"實際運作方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際運作方法</h2>\n<p>Self improvement 計畫可以歸納為三個步驟：</p>\n<ul>\n<li>The what: 選擇你要做的專案</li>\n<li>The how: 執行</li>\n<li>The outcome: 分享結果</li>\n</ul>\n<p>剛剛提到，我們的 self improvement 計畫與 Google 的 20% 不同的點在於我們有限制能做的專案範圍，但實際上我們的規範還是非常寬鬆的，主要分成三類：</p>\n<ol>\n<li>Improve internal projects and tools</li>\n<li>Evaluates a new technology or framework</li>\n<li>Language Improvement</li>\n</ol>\n<p>你可以選擇利用平常想玩但工作上用不到的技術來實作一些增進開發效率的工具，像是我們有成員利用這時間製作了集合我們日常開發所需工具的 CLI tool，平常需要許多步驟才能設置好的環境，現在只要透過 CLI 下個指令就通通搞定，甚至有 web UI 介面可以操作；又或者你可以學習一門新的語言，截長補短，將好的概念應用到日常工作中，舉例來說，有成員學習了 Rust 與 webassembly，將 Rust 語言在 error handling 的一些概念引進我們 Typescript 的專案（雖然這樣的作法好壞見仁見智，但就我個人看來，這種火花對團隊是非常好的）。\n此外，畢竟公司是跨國團隊，語言溝通還是很重要的一個環節，利用這時間來增進你的英文或其他語言的水平，對個人與公司都是有極大的好處。</p>\n<p>除了上述這些偏向個人取向的例子外，也可以是組成一個小團隊來執行 self improvement 專案，像是前後端工程師互相舉辦 workshop，讓前端學習後端，後端了解前端；或是組織系統設計的讀書會，一起思考設計產品系統等等。</p>\n<p>上述是三步驟中的第一步驟，也就是你要利用 self improvement time 做什麼。基本上只要能規範在我們定義的三大分類中，你做什麼都是可以的。</p>\n<p>再來是執行面，我們訂定 two-week sprint 中的最後兩天作為 self improvement time，在每次的 sprint planning 與 backlog refinement meeting 時，必須考量到實際工作天數只有八天，依此來權衡各項 task 的優先順序，並依照先前的 sprint velocity 調整放進sprint 的點數。</p>\n<p>而最後那兩天其實也並非整整 16 小時都是 self improvement time，我們把 sprint review, demo 與 retrospective meeting 分插到這兩天內。會想將這些 ceremonies 與 self improvement time 放在一起是有原因的，首先，每次開完 sprint review/demo 與 retrospective 後，工作效率通常不會太好，畢竟是一個 sprint 的結束，將 self improvement time 安排在同一時間內，不僅能提升大家士氣，也比較好用來說服 PM 們；另外，雖然 review、demo 與 retrospective 算是 scrum ceremonies 內比較輕鬆的部分，但就我們團隊內部觀察下來，我們也是會花費不少時間在分析檢討，將他們拆分成不同時段的會議，也有助於大家更能集中精神、更有效率。</p>\n<p>最後一個步驟是 outcome，我們利用公司資源，把時間花在進行 self improvement 上，總是要做出點什麼成果才說得過去，對吧？</p>\n<p>這樣的想法是很自然的，但執行起來有很多面向要考慮，首先，要確保成員信任這個機制並不會影響到你的績效考核，否則所謂的 20% time 就不是 80% + 20%，而是 100% + 20%，額外增加了更多的壓力在成員身上，這就本末倒置了。</p>\n<p>再來就是不該限制形式，我們鼓勵大家舉辦 sharing、workshop、open source 或甚至是參加 conference 的方式去展現你的成果，但沒有任何硬性規定。</p>\n<p>每個月，我們會舉辦一次內部的簡單分享會，讓大家自由得談論各自在 self improvement time 中做了哪些事情，還有哪些想做、有沒有需要找人一起幫忙的等等。在分享會上，我們不批判你的進度與成就多寡，我們專注在這過程中，你『有沒有獲得』些什麼。</p>\n<p>在一個大家都有同樣共識，且優質的團隊內，你會發現這樣看似過於自由奔放的機制，反而能驅動大家去做出很棒的東西，以我們團隊的例子來說，有人因為這多出來的時間，有機會在公司內部工程部落格中發表研究成果，也有人撰寫了一整套 CI 自動化測試的工具，能夠推廣給公司內其他團隊使用，並寫出完整的說明文件。</p>\n<p>你或許會說這些人就算沒有 self improvement time 也會做這些事，但重點就是，讓他們在工作的時間內完成，對成員本身來說的感覺就很好，更別提能讓他們有更多的時間去接觸專業外的事物，接收不同的刺激，理論上能更加反饋到專業能力上頭。</p>\n<h2 id=\"執行結果與過程中的阻礙\" style=\"position:relative;\"><a href=\"#%E5%9F%B7%E8%A1%8C%E7%B5%90%E6%9E%9C%E8%88%87%E9%81%8E%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%98%BB%E7%A4%99\" aria-label=\"執行結果與過程中的阻礙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>執行結果與過程中的阻礙</h2>\n<p>說得這麼美好，實際的執行過程中，也是有一些阻礙，否則就也不會有網路上一堆關於 Google 20% time 神話破滅的討論了（<a href=\"https://channels.theinnovationenterprise.com/articles/the-myth-of-google-s-20-time\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Myth Of Google's 20% Time. It is one of the most enduring innovation ideas, but it may not be all that it seems</a>, <a href=\"https://www.businessinsider.com/google-20-percent-time-policy-2015-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The truth about Google's famous '20% time' policy</a>, <a href=\"https://buzzorange.com/techorange/2018/09/18/is-googles-20-any-real/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google 創新「80/20」法則名存實亡？員工時間分配技巧是創新最大考驗</a> ），就連待過谷歌的前雅虎 CEO Malissa Mayer 都說那其實是 120% time 了。</p>\n<p>在試驗的一個季度內，我們總共執行了兩次 monthly sharing，每一次都會收集一些 feedback 來做調整，大致上觀察到的阻礙有以下幾點：</p>\n<ul>\n<li>真的不知道要做什麼。不是每個工程師都有想要做的 side project。</li>\n<li>難以在平常的工作時間切換思緒，去做增進自我的專案。</li>\n<li>self improvement 計畫只有在我們團隊內部執行，許多跟其他團隊有相依性的事務很難真的在那兩天內排開，加上後端團隊都有 on call schedule。</li>\n</ul>\n<p>這幾點是比較難解決的必然問題，對於不知道要做些什麼的成員，我們會由其他成員來帶動，邀請他們加入其他已經在進行的專案；覺得無法適應如此切換工作狀態的成員，我們也不勉強，先以安排工作上一些比較沒時間處理的 refactor 或 tech debt 給對方，讓他們慢慢適應；而至於與其他團隊的合作上，我們也會告知他們我們的 scrum 時程，在不影響公司主體專案進行下，調整 schedule，並在必要時給予 support，但還是以不打擾成員兩天的 self improvement time 為基本準則。</p>\n<p>上述問題用這樣的處理方式到目前為止算是還算穩當，但畢竟才執行一個季度，後續還需要繼續觀察調整。</p>\n<p>對於我個人來說，困難的部分在於要捨得在那兩天確切的放下工作上的項目。即便在 sprint planning 時已經把時間也考慮進去了，但在實作 tasks 的過程，不免會有一些突發狀況，或是靈光一閃想要多做些什麼東西，這時候在那兩天內我還是會偶而會忍不住偷做一下工作的內容，但由於 self improvement 計畫並沒有規定要有多少產出，也不在績效內，所以並不至於到變成 120% time。</p>\n<p>另外還有一點值得一提。</p>\n<p>在前面我說過，我們為了不增加大家的負擔，盡量不限縮成果分享的形式與內容多寡，但我們是很明確的跟大家說明『一定要空出兩天作為 self improvement 計畫』，算是強制性要求大家參與，若是連參與本身都不強制，那整個計畫很容易就流於形式，到最後就不知不覺得消失了。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>就如同前面提供的許多關於 Google 20% time 機制的討論，這件事情執行起來很容易不小心就走歪，絕對不是適合每間公司每個團隊都採取這樣的做法，但至少是值得大家拿出來討論看看，是否能對你的團隊造成正面影響。我也不會覺得我們團隊能夠依照現在的步調走到多遠，但不斷的試驗與調整不就是工程師最擅長的嗎？大家又是怎麼看待這件事情呢？歡迎大家一起提出觀點討論！</p>","id":"1b64368d-c853-5ea4-af52-41ff802212e9","fields":{"slug":"the-self-improvement-program-20-percent-time"},"frontmatter":{"date":"2021-01-02T00:00:00.000Z","title":"20% self-improvement program 實際案例分享","tags":["self improvement","20% time"],"type":"tech","slug":"the-self-improvement-program-20percent-time"},"timeToRead":8},"type":"tech"}},"staticQueryHashes":["2123680655"]}