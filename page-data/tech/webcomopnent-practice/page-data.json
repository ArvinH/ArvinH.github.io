{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/webcomopnent-practice","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/HddPrwMUGVc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boney M. - Sunny</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/HddPrwMUGVc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>上個月我們介紹過 Web Component，大致上把 Web Component 的相關知識都介紹一輪了，也提供了一些範例，但是並沒有製作出一個完整可用的元件，\n因此今天就好好的來實做一個簡易又實用的 Web Component（對我來說很實用啦...），並且將他發佈到 <a href=\"https://www.webcomponents.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webcomponent.org</a> 上面。\n最後也會說明一下我嘗試將我製作的 webcomponent 與 react 整合的心得。</p>\n<p>開始前還是先給大家看一下看完這篇文章後可以達到的成果，發佈到 Webcomponent.org 並有 inline demo：</p>\n<p><img src=\"/image/webcomponent-published.png\" alt=\"Fianl\" title=\"Final Result\"></p>\n<p><a href=\"https://www.webcomponents.org/element/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">format-num webcomponent</a>\n<a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a></p>\n<h2 id=\"idea\" style=\"position:relative;\"><a href=\"#idea\" aria-label=\"idea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Idea</h2>\n<p>在一些活動頁面或是互動性較高的網站中，顯示參與人數是很常見的功能，而有些時候我們並不需要很確切的數目，反倒是希望能夠約分成以 K（千） 或 M（百萬） 為單位，\n這時通常我會寫個類似下面這樣的小函式來作轉換，並在每個需要的 React Component 中去 require 這個函式使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">></span> <span class=\"token number\">999</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'k'</span> <span class=\"token operator\">:</span> num\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但就只是個很簡單的函示，卻每個需要的 Component 都要 require 一次，久了就會覺得怎麼 HTML 5 不出一個 tag 是可以幫我把數字直接做 format 的呢？\n這樣我就只要用對 Tag，就會有我要的結果了，也不用特別去寫個小 function。</p>\n<p>想到這就覺得似乎是個好機會來練習一下 Web Comopnent 的實作，而且依照 React 的<a href=\"https://facebook.github.io/react/docs/web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方說法</a> Web Component 跟 React 是可以相互在對方的環境下使用的！\n那還等什麼呢！</p>\n<h2 id=\"那就來實作吧\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%B0%B1%E4%BE%86%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"那就來實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那就來實作吧</h2>\n<p>根據上一次的學習 <a href=\"http://blog.techbridge.cc/2017/01/06/web-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2017，讓我們再來看看 Web Components 吧！</a>，\n很快的就能建立好基本的架構：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlformatnum.html\"><pre class=\"language-htmlformatnum.html\"><code class=\"language-htmlformatnum.html\">&lt;!-- template --&gt;\n&lt;template id=&quot;format-num-template&quot;&gt;\n  &lt;style&gt;\n    :host {\n      position: relative;\n    }\n  &lt;/style&gt;\n  &lt;span class=&quot;wrapper&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/span&gt;\n&lt;/template&gt;\n\n&lt;!-- custom element --&gt;\n&lt;script&gt;\nclass formatNum extends HTMLElement {\n    constructor() {\n      super();\n      let shadowRoot = this.attachShadow({mode: &#39;open&#39;});\n      const t = document.querySelector(&#39;#format-num-template&#39;);\n      const instance = t.content.cloneNode(true);\n      shadowRoot.appendChild(instance);\n      this.shadowDOM = shadowRoot;\n    }\n  }\n  customElements.define(&#39;format-num&#39;, formatNum);\n&lt;/script&gt;</code></pre></div>\n<p>接著我開始構想這個 tag 需要有哪些 attribute 可以設置，最基本我會需要能指定小數點後的位數，並且能指定轉換單位的型態，因為有時候可能會需要二進位的轉換，也就是以 1024 為單位，而有時需要計算人數時，則是以 K, M, B 來顯示。</p>\n<p>因此會需要設置兩個 attribute，<code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得要設置 <code class=\"language-text\">observedAttributes</code>，這樣使用者改變 tag 的 <code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code> 時，我們才可以有對應動作，也就是重新 format 一次數字。</p>\n<p>接著加入下列兩個關鍵 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們在 <code class=\"language-text\">observedAttributes</code> 中列舉的 attribute 只要有所變動都會觸發 <code class=\"language-text\">attributeChangedCallback</code>，並且執行 <code class=\"language-text\">formatNum()</code>，\n而 <code class=\"language-text\">formatNum()</code> 就會從 shadowDOM 中抓出數字，並且從 attribute 中抓出小數點位數以及是哪種單位，經過 <code class=\"language-text\">format()</code> 的轉換後再將資料塞回 shadowDOM 中。\n（ <code class=\"language-text\">format()</code> 就是類似最上方的數字單位轉換函示，不是重點就不列出，有興趣可以到我的 <a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git repo</a> 連結去看）</p>\n<p>寫到這邊看起來就大功告成了，嗯，我也這麼覺得。</p>\n<p>但是事情就是沒有憨人想得這麼簡單。</p>\n<p>當我在 html 裡面加上我新增的 element <code class=\"language-text\">&lt;format-num digits='1'>1234&lt;/format-num></code> 時，竟然毫無反應，就只是個 1234，而不是 1.2k。</p>\n<p>原因是我以為在執行 <code class=\"language-text\">formatNum()</code> 的時候，可以從 <code class=\"language-text\">this.shadowDOM.querySelector('slot').textContent</code> 裡面取得 slot 內的值的，\n但似乎無法直接這樣做，就算能透過 shadowDOM 存取，當我們想要將 format 過的數字塞回 tag 內的時候，由於原先的 1234 屬於 light DOM，我們需要透過 <code class=\"language-text\">document.querySelect('format-num').innerHML</code> 的方式去改值，這樣變成由外部的 context（document) 來更改 light DOM，似乎有點不符 web component 的精神，應該要讓一切操作保持在內部才對。</p>\n<p>因此換個方式，我們不讓使用者將值寫在 slot 中，而是透過 attribute 來設置，而我們再將 parse 過的結果利用 shadowDOM 設置到 slot 中，這樣就能順利顯示了！</p>\n<p>修改程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 增加 num attribute</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 修改 formatNum()，從 attribute 中拿 num 的值，並透過 shadowDOM 塞進 slot 顯示</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>digits <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>成果：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/xezujo/embed?html,js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.5\"></script></p>\n<h2 id=\"讓別人-import-你的-webcomponent\" style=\"position:relative;\"><a href=\"#%E8%AE%93%E5%88%A5%E4%BA%BA-import-%E4%BD%A0%E7%9A%84-webcomponent\" aria-label=\"讓別人 import 你的 webcomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>讓別人 Import 你的 Webcomponent</h2>\n<p>本來想說做完了，準備要發佈的時候，發現需要準備 Demo page，\n雖然我都直接在 jsbin 與 codepen 上方寫，還沒有真正在別的 page <code class=\"language-text\">Import</code> 過 webcomponent，但想說應該就很簡單啊，把我的 code 都放在一個 html 內，\n然後透過 <code class=\"language-text\">&lt;link rel=\"import\" href=\"../src/formatNum.html\"></code> 不就得了？</p>\n<p>正當我這麼想的時候，卻發現我的 demo page 一直無法正常顯示，出現 \"Uncaught TypeError: Cannot read property 'content' of null\" 的 error，\n是在 custom element constructor 的地方：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#format-num-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>竟然找不到我的 template ?!</p>\n<p>仔細研究了好一陣子後才發現到這篇文章 <a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">introduction to html imports</a></p>\n<p>裡面有提到 html import 時的行為差異，舉例來說：</p>\n<p><em>index.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatNum.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> // 1.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Import Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>     // 4.</code></pre></div>\n<p><em>formatNum.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 2.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 3.</code></pre></div>\n<p>以上面的例子來說明，index.html 載入 formatNum.html，其 script 的執行順序如上面標記，\n但 <span style=\"color:red\">index.html 與 formatNum.html 中的 document 物件卻都是指向 index.html。</span></p>\n<p>因此當我的 demo page 在執行存在於 formatNum.html 內的 script，也就是 constructor 時，document 就找不到存在於 formatNum.html 內的 template 了。</p>\n<p>所以該怎麼解決呢？</p>\n<p>為了要保存住 formatNum.html 自己的 document object，我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">documentCurrentScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>_currentScript <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mainDoc <span class=\"token operator\">=</span> documentCurrentScript<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">;</span></code></pre></div>\n<p>currentScript 是只有在有支援 HTML import 的瀏覽器中才有的屬性，若是透過 webcomponent.js 等 polyfill，則是用 _currentScript</p>\n<h2 id=\"打包發佈\" style=\"position:relative;\"><a href=\"#%E6%89%93%E5%8C%85%E7%99%BC%E4%BD%88\" aria-label=\"打包發佈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打包發佈</h2>\n<p>問題都解決以後當然就要發佈到 Webcomponent.org 上面去了</p>\n<p><img src=\"/image/webcomponentIdx.png\" alt=\"webcomponent.org\" title=\"webcomponent.org\"></p>\n<p>從網站上的步驟看來很簡單，只要你的 repository 滿足三個條件，並加上 badge 與 inline demo，就可以發佈了：</p>\n<img src=\"/image/publishWebcomponent.png\" alt=\"publish to webcomponent\" style=\"width: 500px;\"/>\n<p>三個條件：</p>\n<ol>\n<li>有 Open source license，只要是被 <a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Source Initative</a> 認可的都可以。</li>\n<li>Tagged release，這點很重要，他會依照你 repository 裡面的 tag 去抓檔案，如果你沒有設置的話，就算 repo 中有程式，也會發佈失敗，而且如果你有更新，也一定要有新版 Tag release，Webcomponent.org 這邊才會更新。我一開始因為有些設定沒做好，重新 push 後忘了 release tage，怎麼樣都是發佈失敗...</li>\n<li>README，這當然也是很重要，你總得要介紹一下內容。此外，如果你想要放 inline demo 的話，也是要設置在 README.md 當中。</li>\n</ol>\n<p>加上 badge：</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token url\">[<span class=\"token content\">![Published on webcomponents.org</span>][<span class=\"token variable\">webcomponents-image</span>]</span>][webcomponents-url]\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-image</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://img.shields.io/badge/webcomponents.org-published-blue.svg</span>\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-url</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://www.webcomponents.org/element/arvinh/format-num</span></code></pre></div>\n<p>Inline Demo：</p>\n<p>要製作 inline demo 很簡單，只要在你的 README.md 中加入：</p>\n<p><img src=\"/image/inlineDemoscript.png\" alt=\"Inline Demo\" title=\"Inline Demo\"></p>\n<p>你只需要在 <code class=\"language-text\">&lt;custom-element-demo></code> 中 import 你的 custom-element 即可，<code class=\"language-text\">html</code> block 內的就是你 demo 元件的地方了。</p>\n<p>以我的 README.md 來說，完成後會長這樣：</p>\n<p><img src=\"/image/final-readme.png\" alt=\"Final README\" title=\"IFinal README\"></p>\n<p>當你照著網站上所寫的，完成所有步驟後，可以到這邊去填寫 Repo 名稱並進行發佈。</p>\n<p><img src=\"/image/readyToPublish.png\" alt=\"Ready to publish\" title=\"Ready to publish\"></p>\n<p>然後你會發現發佈失敗，因為網站隱藏了一個步驟沒有寫到。</p>\n<p>他會要求你的 repo 中要含有 <code class=\"language-text\">bower.json</code>，但應該是沒有要你 register 到 bower 中，不過我有順手放上去就是了，\n所以也能透過 <code class=\"language-text\">bower install format-num</code> 來下載這個 webcomponent。</p>\n<p>總之，加上 bower.json 以後應該就能順利發佈了！</p>\n<p>此外，你也可以到 <a href=\"https://www.webcomponents.org/preview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.webcomponents.org/preview</a> 輸入你的 git repo url，就可以在發佈前先進行 preview，\n在這邊甚至能動態調整你的 inline demo！就由讀者自行玩玩吧！</p>\n<h2 id=\"work-with-react-but-failed\" style=\"position:relative;\"><a href=\"#work-with-react-but-failed\" aria-label=\"work with react but failed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Work with React but failed</h2>\n<p>製作這個 Web Component 的初衷是希望能夠透過它讓我輕鬆地放在 React 的 component 中當一般 tag 使用，因此我也嘗試了一下簡單的範例：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"ZeOLRP\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"web-component: <format-num> with React\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZeOLRP/\">web-component: <format-num> with React</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>但眼尖的讀者會發現，我在 html 內又再寫了一次 template...</p>\n<p>沒錯，因為再度遇到 document 存取不到 template 的 error，這次連使用 currentScript 都無法解決，我想是跟 Rect compile 的時間以及 Webcomponent script 載入執行的時間順序有關，導致存取不到正確的 docuemnt scope。</p>\n<p>當然這也只是我的猜測，若有讀者了解原因請不吝指教！</p>\n<p>在試著整合 React 的過程中也有發現，babel 在處理 extends HTMLElement 的元件上有些衝突，需要透過 <a href=\"https://github.com/github/babel-plugin-transform-custom-element-classes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-transform-custom-element-classes</a> 來解，不過沒有真正試過，畢竟我會希望 webcomponent 是獨立的，\n不需要跟 React 一起經過 babel 的 compile，而在支援 webcomponent 的 browser 上，理論上也不需要 babel 編譯 es6 的 code 才對...</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然最後還是沒能順利整合進 React 當中，不過原先預期輕鬆完成的小玩具竟然還是卡了不少關，也有學習到，不過總是因為時間有限沒辦法很完整的將查到的資料認真讀完，\n或許我的實作過程與觀念的理解有錯誤的地方，歡迎讀者留言指教，我會非常感激的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.webcomponents.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components org</a></li>\n<li><a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to html import</a></li>\n<li><a href=\"http://staltz.com/react-could-love-web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React could love web components</a></li>\n</ol>","fields":{"slug":"webcomopnent-practice"},"frontmatter":{"title":"Web Component 實戰","date":"03-04-2017","tags":["web components","javascript"]},"timeToRead":9}},"pageContext":{"slug":"webcomopnent-practice","prev":{"excerpt":"好歌分享：Ruby duby feat.Ruby","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/o5S-K5G9VO8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby duby feat.Ruby</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/o5S-K5G9VO8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>建構網頁佈局是製作網站的基本動作之一，隨著設計多樣性與功能複雜度的提升，開發者必須利用 <code class=\"language-text\">table</code>, <code class=\"language-text\">inline</code>, <code class=\"language-text\">float</code>, <code class=\"language-text\">clear</code>, 或是 <code class=\"language-text\">positioning</code> 等方式來 hack 頁面配置，但不管是哪種方式都各自有其缺乏的功能，也因此催生出許多 CSS Framework 提供的 Grid System 來加速佈局開發。</p>\n<p>幾年前出現的 <code class=\"language-text\">FlexBox</code> 宛如神兵利器，讓我們可以擺脫這些困擾，快速進行排版，而隨著 <code class=\"language-text\">CSS Grid</code> 規範的出現，我們即將有更好的武器了！</p>\n<p><code class=\"language-text\">CSS Grid</code> 不是要來取代 <code class=\"language-text\">Flexbox</code>，他們是相輔相成的角色，<code class=\"language-text\">flex</code> 可以看作是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 則是 <code class=\"language-text\">two-dimentional layout solution</code>，用來解決我們所有先前需要各種 hack 才能完成的頁面佈局。</p>\n<p>不過可惜的是，<code class=\"language-text\">CSS Grid</code> 還在 <a href=\"https://www.w3.org/TR/css-grid-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C working draft</a> 中，並且直到 2017 的今天，還是有些人使用不支援 <code class=\"language-text\">flex</code> 的舊瀏覽器...</p>\n<img src=\"/image/caniuse-grid.png\" alt=\"Can I use Css grid\" style=\"width: 500px;\"/>\n<p>從<a href=\"http://caniuse.com/#search=grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上圖</a>可以得知，Chrome 跟 Firefox 的下一個版本都會預設支援 <code class=\"language-text\">CSS Grid</code>，而 IE/Edge 目前則是支援舊版本的規格實作的。如果想要先嚐鮮，可以直接下載 <a href=\"https://www.google.com/chrome/browser/canary.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chrome Canary</a>, <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox Nightly</a> 來使用，或是開啟目前版本的實驗功能：</p>\n<ul>\n<li>Chrome: <code class=\"language-text\">chrome://flags</code> -> 啟用 <code class=\"language-text\">experimental Web Platform features</code></li>\n<li>Firefox: <code class=\"language-text\">about:config</code> -> 啟用 <code class=\"language-text\">layout.css.grid.enabled</code></li>\n</ul>\n<p>當然也有 <a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polyfill</a> 可以使用。</p>\n<p>雖然生不逢時，但這一切都是過程，活著不難，最難的是做人...啊啊蛋堡的歌真好聽</p>\n<p>這篇文章主要是介紹 <code class=\"language-text\">CSS Grid</code> 的用法，並為我自己做個學習紀錄，畢竟網路上已經有許多關於 <code class=\"language-text\">CSS Grid</code> 的資源，我也條列了一些在文章最下方，懶得看我廢言的讀者可以自行參考！</p>\n<h2 id=\"css-grid-layout\" style=\"position:relative;\"><a href=\"#css-grid-layout\" aria-label=\"css grid layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid Layout</h2>\n<p>以往我們在進行頁面切版佈局的時候，即便是使用 <code class=\"language-text\">flexbox</code>，由於他是 <code class=\"language-text\">one-dimensional layout</code>，我們排版的方式無非就是從上往下排，或是由左到右等方向性來把各種 <code class=\"language-text\">one-dimensional layout</code> 組合成我們要的 <code class=\"language-text\">two-dimensional layout</code>。</p>\n<p>而 <code class=\"language-text\">CSS Grid</code> 不同的地方就在於，他讓我們先定義好一個 <code class=\"language-text\">container</code> 就夠了，一個 <code class=\"language-text\">container</code> 來設定好所有底下元件<strong>可以擺放的位置</strong>。</p>\n<p>什麼是<strong>“可以擺放的位置“</strong>呢？先跳過實作過程與這些屬性值的意思，以下面這張結果圖來解釋一下，你設定好 <code class=\"language-text\">CSS Grid</code> 的 container 後，該 container 會長成這副德性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 10px 0.3fr 0.7fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 25% 100px auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"/image/grid-container.png\" alt=\"Grid Container\" style=\"width: 300px;\"/>\n<p>然後你就只要把 <code class=\"language-text\">container</code> 內的元素，一一定義好各自的 CSS 屬性，來決定他們要擺在這圖中的哪個空格內即可。\n只要兩行 css，一個 div 就排好了，是不是很讓人興奮啊啊啊！</p>\n<p>好的，接下來認真說明 CSS Grid 的其他基本用法。</p>\n<h2 id=\"css-grid-terminology\" style=\"position:relative;\"><a href=\"#css-grid-terminology\" aria-label=\"css grid terminology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid Terminology</h2>\n<p>再開始嘗試實作之前，我們先來了解並記憶一下相關的術語。</p>\n<ul>\n<li>Grid Line: 分隔元素的線，可以是垂直與水平，如下圖的紅色線</li>\n<li>Grid Track: 兩條分隔線中間的區域，簡單想就是 Grid 中的 Columns 或 Rows，如下圖的綠色區塊</li>\n<li>Grid Cell: Grid 中的基本單位，四條線組成的區域，如下圖的藍色區塊。</li>\n<li>Grid Area: 由數個 Cell 組成的區域，如下圖的紅色區塊。</li>\n<li>fr: track-size 的單位，通常用於分配 row 或 column 的非彈性尺寸設定完後之剩餘空間。以下圖的 column為例，意思即：將去掉 100px 與 10px 後的剩餘空間，分配為 30% 與 70%。</li>\n</ul>\n<img src=\"/image/grid-term.png\" alt=\"Grid Terminology\" style=\"width: 300px;\"/>\n<h2 id=\"simple-css-grid-example\" style=\"position:relative;\"><a href=\"#simple-css-grid-example\" aria-label=\"simple css grid example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple CSS Grid Example</h2>\n<p>接著我們把上面的圖片，用 CSS Grid 來 layout 出來。</p>\n<p>CSS Grid 的 properties 可以切成兩大塊，一塊是給 Parent 的，也就是 <code class=\"language-text\">Grid Container</code>，另一塊給 Children，<code class=\"language-text\">Grid items</code>。</p>\n<p>詳細的 properties 介紹可以看這篇 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete Guide Grid</a>\n（ 強力推薦閱讀，各種圖片文字輔以 css 說明，完全可以直接左轉出去看這篇就好 XD ）</p>\n<p>要使用 CSS Grid 就必須先定義好 Grid Container：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Tack<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cell<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Area<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 grid container 底下的 children 是沒有順序差別的，我們都可以透過定義 grid items 的 properties 來設定他的擺放位置。當然，如果你沒有設定的話，就會照順序放置，如果該列放不下就會自動放到下一行。</p>\n<p>但基本上不會這麼做，畢竟我們就是想要能好好掌控位置啊！</p>\n<p>Grid Container 的 css 可以用下面兩種方式來寫，<code class=\"language-text\">grid-template-columns</code> 用來定義這個 Grid 有幾個 columns，每個 column 可以有多少寬度；換而言之，<code class=\"language-text\">grid-template-rows</code> 就是用來定義 row 的屬性。</p>\n<p><code class=\"language-text\">grid-template-columns</code> 和 <code class=\"language-text\">grid-template-rows</code> 有兩個主要 Values 可以設定：</p>\n<ul>\n<li>track-size：可以是任何長度(px)、百分比(%)或是先前提到的 <code class=\"language-text\">fr</code></li>\n<li>line-name：組成 column 與 row 的線的名字</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> &lt;track-size> ... | &lt;line-name> &lt;track-size> ...<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> &lt;track-size> ... | &lt;line-name> &lt;track-size> ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是說，你可以用純數字的方式來給予屬性質：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 10px 0.3fr 0.7fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 25% 100px auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也可以安插 <code class=\"language-text\">Grid Line</code> 的名字在屬性值的設定中，這個名字在後續我們要安置 children 時可以用到！\n[Note] 要注意，因為是定義 <strong>線</strong> 的名字，所以最後一個數字的後面也可以定義名字喔！</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> [line1] 100px [line2] 10px [line3] 0.3fr [line4] 0.7fr [end]<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> [row-1-start] 25% [row-2-start] 100px [row-3-start] auto [row-end]<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就定義好需要的 Grid Container 了。</p>\n<p>接著，我們說明一下如何將前面的圖片中的 ** Area ** 這個 <code class=\"language-text\">Grid Item</code> 放到我們剛剛定義好的 Grid Container 中，因為他的位置比較特殊，在右下角的位置，較好展現 CSS Grid 方便之處。</p>\n<p><code class=\"language-text\">Grid Item</code> 的屬性基本上就是四個：<code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-column-end</code>, <code class=\"language-text\">grid-row-start</code> 和 <code class=\"language-text\">grid-row-end</code>，你也可以簡化成兩個：<code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code>。</p>\n<p><code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-column-end</code>, <code class=\"language-text\">grid-row-start</code> 和 <code class=\"language-text\">grid-row-end</code> 可以有四種 Values 設定：</p>\n<ul>\n<li>line： 對照到 Grid Container 中定義的線，可以是數字或名字。</li>\n<li>span [number]：該 item 會橫跨 [number] 個 tracks。</li>\n<li>span [name]：該 item 會橫跨到名字是 [name] 的線為止。</li>\n<li>auto：自動放置，類等於 span 1。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item-area</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-start</span><span class=\"token punctuation\">:</span> line2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-end</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-start</span><span class=\"token punctuation\">:</span> row-3-start<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-end</span><span class=\"token punctuation\">:</span> row-end<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>若只用兩個屬性，中間以 / 隔開：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item-area</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> line2 / end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> row-3-start / row-end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以此類推，完成的範例如下：</p>\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ZLodmz\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZLodmz/\">CSS-Grid-Sample</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"another-css-grid-example\" style=\"position:relative;\"><a href=\"#another-css-grid-example\" aria-label=\"another css grid example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Another CSS Grid Example</h2>\n<p>Container 不只有上面的寫法，還有一個叫做 <code class=\"language-text\">grid-template-areas</code> 的東西，搭配 Grid-Item 的 <code class=\"language-text\">grid-area</code> 可以有更簡單的寫法來進行排版。</p>\n<p>我們這邊換個例子，以一般網頁較常見的配置來說明：</p>\n<p data-height=\"423\" data-theme-id=\"0\" data-slug-hash=\"xgjvRr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample-Area\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/xgjvRr/\">CSS-Grid-Sample-Area</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>用了 <code class=\"language-text\">grid-template-areas</code> 後，在 container 的 css 中，我們可以直接定義每個元素的位置：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 0.25fr 0.25fr 0.25fr 0.25fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"header header header header\"</span>\n                       <span class=\"token string\">\"main main . sidebar\"</span>\n                       <span class=\"token string\">\"footer footer footer footer\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-gap</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>裡面的 <code class=\"language-text\">header</code>, <code class=\"language-text\">main</code>, <code class=\"language-text\">sidebar</code> 與 <code class=\"language-text\">footer</code> 就是在 Grid-Item 中我們要指定的名稱：</p>\n<p><code class=\"language-text\">grid-template-areas</code> 的每一行定義了 Grid-Item 內容：</p>\n<ul>\n<li>第一行代表：header 要佔據四行。</li>\n<li>第二行代表：main 佔兩行，而 sidebar 佔一行，其中 <code class=\"language-text\">·</code> 類似 placeholder 的作用。</li>\n<li>第三行代表：footer 佔四行。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #8BC574<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> header<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #748CC5<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> main<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> sidebar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.footer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FCE052<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> footer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，<code class=\"language-text\">grid-column-gap</code> 與 <code class=\"language-text\">grid-row-gap</code> 可用來設定行距。</p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>除了上述的基本屬性運用外，最前面有說過 CSS Grid 跟 Flex 是相輔相成，而實際上他們可以調配的屬性也有類似的地方。</p>\n<p>Grid Container 可以用 <code class=\"language-text\">justify-items</code> 與 <code class=\"language-text\">align-items</code> 來控制每個 Grid-item 的 <strong>垂直</strong> 與 <strong>水平</strong> 位置。</p>\n<p>Grid Item 則是可以用 <code class=\"language-text\">justify-self</code> 與 <code class=\"language-text\">align-self</code> 來控制自己在網格中的位置。</p>\n<p>像這個範例中的 Sidebar</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdMQXK\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/NdMQXK/\">CSS-Grid-Sample-align</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>歡迎大家參考這幾個個超詳細圖解說明：</p>\n<p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-items\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - justify-items</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-items\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - align-items</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - justify-self</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - align-self</a></p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>用幾個簡單的範例來學習並介紹 CSS Grid，但還是希望大家都能直接去 Codepen 上玩玩看 CSS Grid，一定都會被其方便性給驚豔到！\n前端發展雖然百家爭鳴，但是很多基本的規範如果能越來越統一越來越強大，開發者就更能省去各種 hacking 的時間，用來創造更多有創意又有美感的作品！</p>\n<p>最後再推薦一個網站 <a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a>，裡面用許多範例來進行教學，頁面也很清楚乾淨。\n有任何問題都歡迎大家指教！\t</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"http://chris.house/blog/a-complete-guide-css-grid-layout/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chris House Guide to Grid</a></li>\n<li><a href=\"http://andyyou.github.io/2016/05/04/css-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Grid 介紹</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","id":"3b87b3f0-ee42-5e87-b24d-7d0f2e207bb8","fields":{"slug":"css-grid"},"frontmatter":{"date":"2017-02-03T23:44:37.000Z","title":"與 CSS Grid 的第一次接觸","tags":["css","css-grid"],"type":"tech","slug":"css-grid"},"timeToRead":9},"next":{"excerpt":"好歌分享：莫宰羊 - 健康快樂","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/SfehQq0wC84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">莫宰羊 - 健康快樂 </a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/SfehQq0wC84\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<p>去年年底時趁著 Udemy 特價，買了上面很有名的課程 - JavaScript: Understanding the Weird Parts，當初會想買是因為他最後面有個章節是介紹如何建構自己的 JS Framework，\n而我一直都很想有系統性地去瞭解建構一個可供大家使用的 JS library 或是 framework 需要注意哪些事項，該怎麼寫才是安全有彈性的結構。</p>\n<p>大約花了三天的時間斷斷續續把課程上完，這邊紀錄一下該章節的一些筆記，並實做一個小小的 js library 當範例。</p>\n<h3 id=\"goal\" style=\"position:relative;\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h3>\n<p>目標是建構一個 js library，可以將數字做一些簡化約分，像是我在 <a href=\"http://blog.techbridge.cc/2017/03/04/webcomopnent-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Component 實戰</a> 中所實作的 function。\n並讓 user 透過 <code class=\"language-text\">&lt;script src=\"formatNum.js\" /></code> 的方式就能載入使用。</p>\n<p>完整的 code 如下：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/cayelaxewu/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.9\"></script></p>\n<h3 id=\"structuring-safe-code\" style=\"position:relative;\"><a href=\"#structuring-safe-code\" aria-label=\"structuring safe code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structuring Safe Code</h3>\n<p>要建構一個安全的 JS lib，勢必需要保護好自己的 scope 不受外部影響，也不會去影響外部。要做到這件事最簡單的方式就是使用一個 IIFE (Immediately Invoked Function Expression)，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而我們需要將 lib 能夠 export 到外部供人使用，所以在這個立即執行函式中需要傳入 window 物件，在函式內我們則取名為 global，這樣未來如果想要執行在不同環境，像是 nodejs 裡面時，可以不用更改內部的變數名稱，\n只要修改傳入的 window 變數即可。</p>\n<p>另外最前方可以加上個分號，以免有其他人的 code 沒有用分號做結尾而造成問題，不過這個並不是必須的。</p>\n<p>在這個立即執行函式中的變數除非我們刻意 export 出去，否則都只存在於自己的作用域內，是個安全的結構。</p>\n<p>下方的 <code class=\"language-text\">supportedUnit</code> 與 <code class=\"language-text\">unit</code> 在外部都無法存取，無法透過 <code class=\"language-text\">FormaNum.unit</code> 取得。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// hidden within the scope of the IIFE and never directly accessible</span>\n    <span class=\"token keyword\">const</span> supportedUnit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scientific'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        normalUnit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"k\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        siUnit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E18</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"E\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E15</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"P\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E12</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"T\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E9</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"G\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E6</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E3</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"k\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"object-prototype-and-properties\" style=\"position:relative;\"><a href=\"#object-prototype-and-properties\" aria-label=\"object prototype and properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object, Prototype and Properties</h3>\n<p>接著就是開始實作我們的 lib 內容了，這門課程中，有帶著我們了解 JQuery 的 source code，看看這個偉大的 lib 是如何架構其內部程式，其中很特別的地方在於它 new 一個物件的方式，\n通常我們載入一個別人寫好的物件，或是我們自己寫好了一個物件，要使用的時候會需要透過 <code class=\"language-text\">const objectInstanc = new Object()</code> 的方式來產生物件實例，但為何我們使用 JQuery 的時候都不需要特別使用 new 關鍵字呢？</p>\n<p>因為在 JQuery 中，他透過下面的方式來幫你在每次使用它時自動 new 了一個物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// 'new' an object</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FormatNum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatNum<span class=\"token punctuation\">.</span>init</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...</span>\n\n    <span class=\"token comment\">// the actual object is created here, allowing us to 'new' an object without calling 'new'</span>\n    FormatNum<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">=</span> digits <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">=</span> unit <span class=\"token operator\">||</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n        \n        self<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這時候你可能會想說，這樣的寫法，不就代表我要加 method 到 prototype 的話，都是要加在 <code class=\"language-text\">FormatNum.init.prototype</code> 了嗎？ 這樣有點奇怪耶，畢竟我的 lib 是叫做 FormatNum呀！</p>\n<p>沒錯，所以我們可以將 FormatNum.init.prototype 在指定到 FormatNum.prototype 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    FormatNum<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">FormatNum</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過短短這兩個步驟，我們就能夠不需要自己 new object，同時又能直接在 FormatNum 上面設置 prototype method！</p>\n<p>另外，透過在每個 method 的最後 return this，就能讓我們的 function chainable。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// prototype holds methods (to save memory space)</span>\n    <span class=\"token class-name\">FormatNum</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">///</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      \n        <span class=\"token function-variable function\">calculate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unitType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">///</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      \n        <span class=\"token function-variable function\">formatScientific</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'siUnit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n        <span class=\"token function-variable function\">formatNormal</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'normalUnit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// chainable methods return their own containing object</span>\n        <span class=\"token function-variable function\">format</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> formattedNum<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// if undefined or null it will be coerced to 'false'</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">'scientific'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                formattedNum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatScientific</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                formattedNum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>\n          \n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formattedNum <span class=\"token operator\">=</span> formattedNum<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 'this' refers to the calling object at execution time</span>\n            <span class=\"token comment\">// makes the method chainable</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n        <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formattedNum is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formattedNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// make chainable</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"export-to-outside-world\" style=\"position:relative;\"><a href=\"#export-to-outside-world\" aria-label=\"export to outside world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>export to outside world</h3>\n<p>最後我們只要加上 <code class=\"language-text\">global.FormatNum = global.F$ = FormatNum;</code></p>\n<p>就可以在外部使用 <code class=\"language-text\">FormatNum</code> 或是 <code class=\"language-text\">F$</code> 來呼叫我們的 lib 了！</p>\n<h3 id=\"小問題\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E5%95%8F%E9%A1%8C\" aria-label=\"小問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小問題</h3>\n<p>在實作範例時，本來想直接全用 ES6 寫（課程主要都是 ES5），但是在這邊的 function 都不能用 ES6 的 arrow function 取代，<code class=\"language-text\">this</code> 的作用域不同，會造成問題。\n<a href=\"https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇有提到</a>\narrow function 會 binding 到整個 module 的 scope，而非 object。不知道是否有什麼好方法可以解決，等我查到後再來補上。</p>","id":"c2f70c5f-5181-5121-ba39-71a2245daa09","fields":{"slug":"build-own-js-lib"},"frontmatter":{"date":"2017-04-01T15:21:37.000Z","title":"[筆記] JavaScript: Understanding the Weird Parts --- Build your own lib/framework","tags":["javascript","note"],"type":"tech","slug":"build-own-js-lib"},"timeToRead":4},"type":"tech"}},"staticQueryHashes":["2123680655"]}