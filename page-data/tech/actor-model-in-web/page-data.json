{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/actor-model-in-web","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>If you don't want to start over, don't give up</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年的 Google I/O 2019 中，<a href=\"https://twitter.com/dassurma\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Surma</a>, <a href=\"https://twitter.com/jaffathecake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Jake</a> 與 <a href=\"https://twitter.com/kosamari\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mariko</a> 推出了一款能在低階的 feature phone 上運作順暢的 <a href=\"https://github.com/GoogleChromeLabs/proxx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web app - PROXX</a>，其中利用到了 Web worker 來分擔許多 Browser main thread 中的工作，讓畫面渲染可以更順暢，也因此讓我注意到去年在 Chrome dev summit 2018 中的一支影片 - <a href=\"https://www.youtube.com/watch?v=Vg60lf92EkM&#x26;list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&#x26;index=17&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Architecting Web Apps - Lights, Camera, Action!</a>，讓我眼睛為之一亮，裡面講到他們利用 Actor Model 來將關注點分離，不同的 Actors 各自負責不同的工作，彼此之間用共通的介面溝通，如此一來，除了將複雜的運算邏輯放入 Web worker 外，由於架構上的特性，理論上也能很方便的抽換 View 的實作方式，像是一套 web app，可以在不重寫所有邏輯的情況下，從 Vue 實作 view，轉換到以 React 實作。</p>\n<p>聽起來非常合理，而有趣的是，這個 Actor Model 其實早在 46 年前就被提出，也有應用在 Web 領域上過，像是用 Scala 撰寫 的 Akka，或是在電信通訊上有名的 Erlang，但是在前端上似乎是第一次被提出來。</p>\n<p>今天透過這篇文章來了解一下這個 46 年前就存在的觀念是什麼，而又能如何與 Web 前端整合呢！</p>\n<h2 id=\"actor-model-介紹\" style=\"position:relative;\"><a href=\"#actor-model-%E4%BB%8B%E7%B4%B9\" aria-label=\"actor model 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actor Model 介紹</h2>\n<p>Actor Model 是一個關於 concurrent computation 的 conceptual model，在 1973 年最早被提出時，只是一個概念模型，用來抽象化並行處理程序的複雜程式，直到 1985 才被延伸出一個完整的 Actor model theory，有興趣可以到 <a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a> 查看。</p>\n<p>而為什麼會需要提出 Actor Model 來處理 concurrent issue 呢？</p>\n<p>歷史上的前因後果在這個影片中的前半段解釋得蠻清楚的 <a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></p>\n<p>大體上是說，由於 CPU 的製程是有其極限存在，已經無法保證 Moore's Law 會持續下去，取而代之的是用多核心來提高處理器內的電晶體數量，透過多核心的並行處理來提高運算速度，而平行處理對於撰寫程式的我們來說，就是很複雜的一個存在，因為我們有 Shared mutable state，造成 race condition、dead lock 等等的 issue 需要避免，而 Actor Model 就是因應而生的解決方案之一。</p>\n<p>Actor Model 主要有幾個特點：</p>\n<ul>\n<li>輕量物件: Actor 是系統內的一個基礎單位，每個 Actor 只負責自己的工作，所以可以很輕量。</li>\n<li>沒有 shared state：每個 Actor 各自管理自己的 state，跑在各自的 thread 上，不共享 memory 與 state。</li>\n<li>透過 message 溝通：每個 Actor 會有一個 message queue，或稱作 mailbox，接收到的訊息會在此排隊等著依序執行。</li>\n</ul>\n<p>一個 Actor 的架構略如下圖：</p>\n<p><img src=\"/image/actor-model.png\" alt=\"Actor Model\"></p>\n<p>每個 Actor 都有自己的 private state，別的 Actor 沒辦法直接更動你的 state，降低了因為 shared state 產生的問題。</p>\n<p>我們拉遠一點來看，Actor 運行在不同的 Thread 中，彼此之間透過 Message 來溝通，收到訊息後各自決定要採取什麼樣的對應動作，而更改的都只會是自己的 private state，沒有 share memory，彼此之間是互相獨立的。</p>\n<p><img src=\"/image/actor-model-system.png\" alt=\"Actor Model system\"></p>\n<p>而在操作上，每個 Actor 只被允許做下面三種 operation：</p>\n<ol>\n<li>創建另一個 Actor</li>\n<li>傳送 Message</li>\n<li>指示該如何處理下一個 Message</li>\n</ol>\n<p>前面兩種很好理解，但第三個就蠻有趣的了，舉例來說，假設有個 Counter Actor A，一直以來都是會把接受到的 Message 數字累加到自己的 counter state 中，但今天可以有另一個 Actor B 傳遞訊息跟 Actor A 說：『hey, 你這次先不用累加數字了，但是下一個傳進來的訊息，你要乘以 2 以後再放到計數器內喔』。</p>\n<p><img src=\"/image/actor-model-counter.png\" alt=\"Counter example\"></p>\n<p>這個三個特性合再一起時，有個很大的好處：容錯系統。</p>\n<p>一個 Actor 對於他創建的 Actor 可以擁有 supervisor 的權限，可以告訴其管控的 Actor 說：『如果你 crash 了，至少死前丟給我個訊息跟我說』，然後當 Supervisor Actor 收到 Actor 死亡訊息時，可以再傳送 \"restart\" Message 去重啟 Actor，這樣的能力造就了一個 Self-healing systems：</p>\n<p><img src=\"/image/actor-model-fault-tolerance.png\" alt=\"Fault Tolerance System\"></p>\n<p>看到這邊會發現，雖然 Actor model 是因為 concurrent computation 而提出的，但其特性用在<strong>分散式系統</strong>上也是非常合適的，每個 Actor 跑在不同的 thread 上，當然也可以是不同的遠端環境上，並透過統一個 Message 介面溝通。</p>\n<h2 id=\"運用到-web-前端上\" style=\"position:relative;\"><a href=\"#%E9%81%8B%E7%94%A8%E5%88%B0-web-%E5%89%8D%E7%AB%AF%E4%B8%8A\" aria-label=\"運用到 web 前端上 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>運用到 Web 前端上</h2>\n<p>在瀏覽器的世界中，也是存在有多種 Process 與 Context（推薦閱讀 @Mariko 的這篇<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">瀏覽器深入淺出介紹</a>)，像是負責渲染的 UI Process，而在 DOM 外的 web worker 則是另一個獨立的 Worker Process，就想是一個縮小版的分散式系統，Worker Process 沒辦法直接存取 UI Process 所控制的 DOM 元件，相對的 UI Process 也無法直接呼叫 Worker Process 中所存在的函式。</p>\n<p>照著這樣的邏輯梳理下來，Web 前端真的是蠻適合套用 Actor Model 的，就像我們有個 UI Actor 運行在 UI Process，同時負責控制狀態的 State Actor 運行在 Worker Process，彼此之間透過 Message 來溝通。</p>\n<p>透過 Actor Model 來切割 UI 與 State 的關係，只要處理得當，理論上我們能夠讓一套相同商業邏輯的 Web app，輕易地從普通的 Web 轉換成 3D 版本，或是 Web VR 版本。</p>\n<p>更棒的是，將關注點分離成各種 Actor 後，code splitting 變得更自然更容易了，每個 Actor 都能夠在需要的時候再載入即可。</p>\n<h2 id=\"web-應用的範例\" style=\"position:relative;\"><a href=\"#web-%E6%87%89%E7%94%A8%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"web 應用的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web 應用的範例</h2>\n<p>說了這麼多，來看點實際的例子！</p>\n<p>既然這個概念是 Google engineer 在他們的開發大會展示的，勢必有 Demo code 可以看，這套叫做 <a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a> 的 repository 包含了 <a href=\"https://github.com/PolymerLabs/actor-helpers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-helper</a> 來幫忙 cover 了 Actor Model 與 Messaging system 的實作細節，讓我們能輕易的體驗 Actor Model 運用在 Web Frontend 的感覺。</p>\n<p>我們做個簡單的基礎代謝率(BMR)計算器來感受一下。</p>\n<p>先看一下成果：</p>\n<p><img src=\"/image/actor-bmr-demo.gif\" alt=\"bmr calculator - actor model\"></p>\n<p>UI 上就是簡單幾個 input 欄位而已，按下按鈕後，取出使用者輸入的值進行計算，最後顯示結果。這段流程我們可以拆分成兩個 Actor 來完成，分別是控制 UI 的 <strong>UI Actor</strong> 與更動 State 的 <strong>State Actor</strong>。（仔細看上方的 gif 的話，可以看到 State Actor 其實是運行在 Worker process 上的。</p>\n<p>接著我們先來看看 UI Actor 長什麼樣子，關鍵的程式碼在下面這幾行（順帶一提，因為 action-boilerplate 本身就是以 TypeScript 實作，因此接下來範例也是 TypeScript）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UiActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> state <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> resultEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSpanElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">getInputVal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// gender</span>\n    <span class=\"token keyword\">const</span> genderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSelectElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> genderVal <span class=\"token operator\">=</span> genderEl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// height, weight, age 依此類推...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      gender<span class=\"token operator\">:</span> genderVal<span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> heightVal<span class=\"token punctuation\">,</span>\n      weight<span class=\"token operator\">:</span> weightVal<span class=\"token punctuation\">,</span>\n      age<span class=\"token operator\">:</span> ageVal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> calculateButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Calculate\"</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n    calculateButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> StateMessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultEl<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先從 <code class=\"language-text\">actor-helpers</code> 中取出 Actor 物件來繼承，實作兩個主要函式：<code class=\"language-text\">init()</code> 與 <code class=\"language-text\">onMessage()</code>：</p>\n<ul>\n<li>init()：\n負責在初始時與 DOM 元件建立關係，綁定 event handler，當事件觸發時傳遞訊息給 State Actor。</li>\n<li>onMessage():\n就像是接收 <code class=\"language-text\">postMessage</code> 傳送的訊息一般，<code class=\"language-text\">actor-helpers</code> 幫我們串接好訊息溝通這段，在這 <code class=\"language-text\">onMessage()</code> 中，可以接收到其他 Actor 傳送過來的訊息。</li>\n</ul>\n<p>在 <code class=\"language-text\">init()</code> 中的 <code class=\"language-text\">this.state</code> 是什麼呢？為什麼他可以 send message？</p>\n<p>那是我們利用 <code class=\"language-text\">actor-helpers</code> 提供的 <code class=\"language-text\">lookup</code> 函式，將 State Actor 綁定到創建的私有變數上，這樣就能使用 <code class=\"language-text\">send</code> 來傳送訊息。</p>\n<p>接著我們來看看 State Actor：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lots of Type definitions...</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StateActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> ui <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          weight<span class=\"token punctuation\">,</span>\n          height<span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">,</span>\n          gender\n        <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> BMRParams <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Do the math</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> bmr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">RESET</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      state<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跟 UI Actor 大同小異，繼承 <code class=\"language-text\">Actor</code> 並利用 <code class=\"language-text\">lookup</code> 綁定 UI Actor 到私有變數上，在 <code class=\"language-text\">onMessage()</code> 中，根據接收到的 Message Type 來執行對應動作，並更改自身的 state，再將 Result Message 傳回給 UI Actor。</p>\n<p>透過 <code class=\"language-text\">action-helps</code>，實作 Actor 變得方便許多（當然也是因為這是很簡單的例子...）。</p>\n<p>不過還沒結束，Actor 都有了以後，我們要怎麼使用呢？</p>\n<p>我們要準備兩個特殊的檔案，<code class=\"language-text\">bootstrap.ts</code> 與 <code class=\"language-text\">worker.ts</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup<span class=\"token punctuation\">,</span> initializeQueues <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> UiActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/ui.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">initializeQueues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UiActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// This is necessary in Safari to keep the worker alive.</span>\n  <span class=\"token comment\">// 相關討論可以看 repo 內的 issue https://github.com/PolymerLabs/actor-boilerplate/issues/13</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>顧名思義，<code class=\"language-text\">bootstrap.ts</code> 負責啟動整個專案，透過 <code class=\"language-text\">hookup</code> 載入 UI Actor，並且 new 出一個 worker 來運行我們的 State Actor。</p>\n<p><code class=\"language-text\">initializeQueues</code> 主要是在程式執行前，清空目前瀏覽器的 Message queue，該函式的程式碼也就一行 <code class=\"language-text\">await messageStore.popMessages(\"*\");</code>。</p>\n<p>而 <code class=\"language-text\">worker.ts</code> 的內容更簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> StateActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/state.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StateActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就是 <code class=\"language-text\">hookup</code> State Actor！</p>\n<p>最後在你的 html 上加入 <code class=\"language-text\">bootstrap.ts</code> 即可，這樣我們就完成了一個以 Actor Model 為基礎架構的 Web app！</p>\n<p><a href=\"https://github.com/ArvinH/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整程式瑪可從此參考</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Actor Model 雖然有了 <code class=\"language-text\">actor-helps</code> 的幫忙，實作上來說已經簡易很多，但任何操作都要透過 Message 的實作方式在前端應用上恐怕還是不好被接受，可能也因為如此，<code class=\"language-text\">actor-boilerplate</code> 其實在去年 Chrome dev summit 結束後似乎就沒再更新了 XD</p>\n<p>不過我個人是蠻喜歡這個想法的，之後有機會再來真的實作一個不同 View 但使用同樣 State 的 Web app 看看！</p>\n<p>另外，我也發現到，Web worker 雖存在已久，但是使用上的限制，讓一般我們在開發上很少會去考慮他，但這幾年看來，像是 AMP 等等的出現，發現 Google 似乎在推廣一個概念，就是 User experience first，Developer experience second，Developer 擅長處理複雜的事情，既然如此，我們應該專注在提供使用者最佳使用體驗上，而犧牲一點開發體驗。</p>\n<p>如果你的 Web app 有複雜運算的需求，就試試看用 Actor Model 來將複雜的邏輯丟給在 Worker process 的 Actor 處理吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://dassur.ma/things/lights-camera-action/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lights, Camera, Action!</a></li>\n<li><a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki - Actor Model</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside Browser</a></li>\n</ol>","fields":{"slug":"actor-model-in-web"},"frontmatter":{"title":"46 年老技術與 Web 的新火花 - Actor Model in Web","date":"06-21-2019","tags":["web","web worker","google chrome","architecture"]},"timeToRead":10}},"pageContext":{"slug":"actor-model-in-web","prev":{"excerpt":"好歌分享：SEEDS feat.Airy","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/81HYAx-oIyo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SEEDS feat.Airy</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/81HYAx-oIyo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在很久之前寫過一篇使用 CSS 繪圖的<a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，但 CSS 能做的不僅止於此，利用 Pure CSS 製作遊戲的大有人在，像是 <a href=\"https://codepen.io/collection/AKkZro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pure CSS Games collection</a> 裡面羅列的。</p>\n<p>不過你知我知你隔壁戴眼鏡的也知，純 CSS 製作的圖畫或是遊戲，實作成本高、閱讀性不佳，也難以調教效能，幾乎無法應用到實際產品上。</p>\n<p>可是很好玩啊！利用有限條件加上各種技巧想辦法完成預想中的效果，成就感是很大的，能夠有能力跟時間製作出這樣的作品，我覺得是很奢侈的幸福。</p>\n<p>老實說我還沒有那個能力做到如此地步，但從觀察他人的作品就能學習到很多有趣的技巧！</p>\n<p>今天就來分析一下在 codepen 上看到的這個純 CSS 圈圈叉叉是怎麼實做出來的：</p>\n<p class=\"codepen\" data-height=\"440\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"alvaromontoro\" data-slug-hash=\"vwjBqz\" style=\"height: 440px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"CSS Tic-Tac-Toe\">\n  <span>See the Pen <a href=\"https://codepen.io/alvaromontoro/pen/vwjBqz/\">\n  CSS Tic-Tac-Toe</a> by Alvaro Montoro (<a href=\"https://codepen.io/alvaromontoro\">@alvaromontoro</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"觀察一下功能\" style=\"position:relative;\"><a href=\"#%E8%A7%80%E5%AF%9F%E4%B8%80%E4%B8%8B%E5%8A%9F%E8%83%BD\" aria-label=\"觀察一下功能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>觀察一下功能</h2>\n<p><img src=\"/image/css-tic-tac-toe-behavior.gif\" alt=\"Behavior\"></p>\n<p>這個作品的完成度很高，實作出來的有以下功能：</p>\n<ul>\n<li>點選方格後，能夠留下不同 style 的 X 或是 O。</li>\n<li>滑鼠 hover 到方格上時，也還能輪流出現圈圈叉叉，讓你知道現在是輪到哪個玩家。</li>\n<li>遊戲結束時，能夠跳出選項重新玩。</li>\n</ul>\n<p>對於 CSS 稍微敏銳一些，或是有看過類似作品的實作方式的讀者，應該蠻快可以猜到第一點能夠過什麼樣的技巧達成。但作者是如何讓圈圈與叉叉交替出現，我倒是無法很快想出來。</p>\n<p>如果你也跟我一樣，別怕！</p>\n<p>接下來我們從功能面來一步步拆解他所使用到的技巧，大家可以對照原作者程式碼看，會更好理解。</p>\n<h2 id=\"依靠純-css-如何在使用者點擊元素後進而變更元素狀態呢\" style=\"position:relative;\"><a href=\"#%E4%BE%9D%E9%9D%A0%E7%B4%94-css-%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%80%85%E9%BB%9E%E6%93%8A%E5%85%83%E7%B4%A0%E5%BE%8C%E9%80%B2%E8%80%8C%E8%AE%8A%E6%9B%B4%E5%85%83%E7%B4%A0%E7%8B%80%E6%85%8B%E5%91%A2\" aria-label=\"依靠純 css 如何在使用者點擊元素後進而變更元素狀態呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>依靠純 CSS 如何在使用者點擊元素後，進而變更元素狀態呢？</h2>\n<p>透過 <code class=\"language-text\">input[type=radio]</code> 與 <code class=\"language-text\">:check</code> 僞類別的結合，我們就能製造出點擊與非點擊的兩種狀態：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* ... 省略 ... */</span>\n<span class=\"token selector\">input[id*='-8-x']:checked ~ #board #tile-8 div::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #004974<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #89dcf6<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ... 省略 ... */</span>\n<span class=\"token selector\">input[id*='-8-o']:checked ~ #board #tile-8 div::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #a60011<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ffc7b5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>從原作程式碼中，可以看到有許多類似 pattern 的 selector，其中上面這兩種就是在處理 <code class=\"language-text\">X</code> 玩家與 <code class=\"language-text\">O</code> 玩家各自點擊了 board 上的一個空格後，該進行的 CSS 樣式改變。</p>\n<p><code class=\"language-text\">input[id*='-8-x']</code>，代表的是 **選取所有 id attribute 中『包含』字串 '-8-x' 的 input 元素 **。接著加上 <code class=\"language-text\">:check</code> 就能 filter 出被使用者選取的 <code class=\"language-text\">input</code> 元素。</p>\n<p>而後面的 <code class=\"language-text\">~ #board #tile-8 div::before</code> 則是表示，在符合上面條件的 <code class=\"language-text\">input</code> 元素<strong>下</strong>的<strong>所有符合</strong> <code class=\"language-text\">#board #tile-8 div</code> 的 div 內，我們加上一個 <code class=\"language-text\">::before</code> 僞元素，並且設定其 css 為 <code class=\"language-text\">content: \"X\"</code>。</p>\n<p>這樣的一段 CSS selector 被觸發後，就可以達到<strong>點擊後留下 X 標記</strong>的效果了：</p>\n<p><img src=\"/image/css-x-check.png\" alt=\"X 玩家點擊空格\"></p>\n<p>從中可以明顯看出，作者是利用 <code class=\"language-text\">-o</code> 與 <code class=\"language-text\">-x</code> 這兩種 postfix 當作 <code class=\"language-text\">X</code> 玩家與 <code class=\"language-text\">O</code> 玩家的曲別，今天若是 <code class=\"language-text\">id attribute</code> 中含有 <code class=\"language-text\">-0</code> 的 input 元素被點選，就是 <code class=\"language-text\">O</code> 玩家點擊空格，得放入 <code class=\"language-text\">O</code>。</p>\n<p>此外，由於 <code class=\"language-text\">input[type=radio]</code> 元素，在瀏覽器中的固定樣式就是一個圓形選擇鈕，要替換成井字空格，並且又能觸發點擊的方式，就是結合 <code class=\"language-text\">form</code> 與 <code class=\"language-text\">label</code> 元素，綁定對應的 <code class=\"language-text\">input</code> 按鈕：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tictactoe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-x<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-o<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- ... 省略 ... --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-x<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-o<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>board<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- ... 省略 ... --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... 省略 ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此一來，我們可以把 <code class=\"language-text\">input</code> 按鈕藏到畫面看不到的地方，然後輕易套用任何 style 到 <code class=\"language-text\">label</code> 上頭，做出井字空格。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">input[type=\"radio\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -9999em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 藏到畫面外 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"hover-出後出現額外元素很常見但怎麼讓他交替出現不同元素\" style=\"position:relative;\"><a href=\"#hover-%E5%87%BA%E5%BE%8C%E5%87%BA%E7%8F%BE%E9%A1%8D%E5%A4%96%E5%85%83%E7%B4%A0%E5%BE%88%E5%B8%B8%E8%A6%8B%E4%BD%86%E6%80%8E%E9%BA%BC%E8%AE%93%E4%BB%96%E4%BA%A4%E6%9B%BF%E5%87%BA%E7%8F%BE%E4%B8%8D%E5%90%8C%E5%85%83%E7%B4%A0\" aria-label=\"hover 出後出現額外元素很常見但怎麼讓他交替出現不同元素 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hover 出後出現額外元素很常見，但怎麼讓他交替出現不同元素？</h2>\n<p>好，知道怎麼透過 <code class=\"language-text\">input[type=radio]</code> 來更改空格狀態之後，我們來研究作者是如何透過 Hover 後的不同樣式，呈現出 <code class=\"language-text\">X</code> 玩家與 <code class=\"language-text\">O</code> 玩家輪流的感覺呢？</p>\n<p>要在游標 hover 時出現元素，就是結合僞類別與僞元素來在 Hover 到的空格上加入 <code class=\"language-text\">X</code> 或 <code class=\"language-text\">O</code>。：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.tile label[for$='-o']:hover::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.tile label[for$='-x']:hover::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到這邊為止都不稀奇，不過還無法理解為何可以交替出現。</p>\n<p>解答在原始碼中這段看起來很可怕的 css：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">label[for$='-x']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">input:checked ~ #board label[for$='-o']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">input:checked ~ input:checked ~ #board label[for$='-x']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">input:checked ~ input:checked ~ input:checked ~ #board label[for$='-o']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* ... 省略一段 z-index 5 ~ 8 ... */</span>\n\n<span class=\"token selector\">input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ #board label[for$='-x']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 9<span class=\"token punctuation\">;</span></code></pre></div>\n<p>前面我們有提到，作者是利用 <code class=\"language-text\">label</code> 來做出井字空格以及 hover 後呈現的 <code class=\"language-text\">X</code> 與 <code class=\"language-text\">O</code> 符號，而在 html 中可以看到每個空格底下都有這樣的結構：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>搭配上方的 CSS，我們就能知道作者是透過<strong>更改 label 的 z-index</strong> 來<strong>交替地</strong>觸發 <code class=\"language-text\">.tile label[for$='-o']:hover::before</code> 與 <code class=\"language-text\">.tile label[for$='-x']:hover::before</code>，進而達到想要的效果。</p>\n<p>至於控制的方式就是透過 <code class=\"language-text\">:check</code> 為 true 的 input 數量：</p>\n<p>當沒有任何一個 radio input 被 check 時，設定所有 <code class=\"language-text\">for</code> attribute 結尾為 <code class=\"language-text\">-x</code> 的 <code class=\"language-text\">label</code> 的 <code class=\"language-text\">z-index</code> 為 1，就會讓游標 hover 到空格時，會是 <code class=\"language-text\">&lt;label for=\"cell-0-x\">&lt;/label></code> 的 hover 被觸發，而不是 <code class=\"language-text\">&lt;label for=\"cell-0-o\">&lt;/label></code>。</p>\n<p>若有一個 radio input 被選擇後，代表要換成 <code class=\"language-text\">O</code> 玩家，<code class=\"language-text\">input:checked ~ #board label[for$='-o']</code> 就被觸發了，所有 <code class=\"language-text\">for</code> attribute 結尾為 <code class=\"language-text\">-o</code> 的 <code class=\"language-text\">label</code> 的 <code class=\"language-text\">z-index</code> 變為 2，大於剛剛的 x label，這時使用者在 hover 到任何一個空格時，出現的就通通都會是 <code class=\"language-text\">O</code> 了！</p>\n<p>雖然這樣的做法讓 CSS 蠻冗長的，但還是不得不讚嘆作者能想出利用 <code class=\"language-text\">z-index</code> 來製造出這樣的效果，真的很厲害啊...閱讀性也算很高的。</p>\n<h2 id=\"判斷輸贏以及重新遊玩的功能怎麼實作\" style=\"position:relative;\"><a href=\"#%E5%88%A4%E6%96%B7%E8%BC%B8%E8%B4%8F%E4%BB%A5%E5%8F%8A%E9%87%8D%E6%96%B0%E9%81%8A%E7%8E%A9%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%8E%E9%BA%BC%E5%AF%A6%E4%BD%9C\" aria-label=\"判斷輸贏以及重新遊玩的功能怎麼實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>判斷輸贏以及重新遊玩的功能怎麼實作？</h2>\n<p>在遊戲結束的時候，不管是哪種結果，畫面上都會疊上一層訊息與重新遊玩的按鈕，這部分的 html 藏在最下方含有 <code class=\"language-text\">end</code> class name 的 div 內：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>end<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tictactoe<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Play again<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>由於整個遊戲都是包含在一個 <code class=\"language-text\">form</code> 中，所以可以直接透過 type 為 <code class=\"language-text\">reset</code> 的 input 按鈕來重設所有的 radio button 狀態，達到重新遊玩的功能。</p>\n<p>而顯示訊息框以及判斷輸贏的方法其實蠻暴力的，就是一一檢查各種組合，橫的、直的與斜的：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#cell-0-x:checked ~ #cell-1-x:checked ~ #cell-2-x:checked ~ #end #message::before,\n#cell-3-x:checked ~ #cell-4-x:checked ~ #cell-5-x:checked ~ #end #message::before,\n#cell-6-x:checked ~ #cell-7-x:checked ~ #cell-8-x:checked ~ #end #message::before,\n#cell-0-x:checked ~ #cell-3-x:checked ~ #cell-6-x:checked ~ #end #message::before,\n#cell-1-x:checked ~ #cell-4-x:checked ~ #cell-7-x:checked ~ #end #message::before,\n#cell-2-x:checked ~ #cell-5-x:checked ~ #cell-8-x:checked ~ #end #message::before,\n#cell-0-x:checked ~ #cell-4-x:checked ~ #cell-8-x:checked ~ #end #message::before,\n#cell-2-x:checked ~ #cell-4-x:checked ~ #cell-6-x:checked ~ #end #message::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Player 1 won!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#cell-0-o:checked ~ #cell-1-o:checked ~ #cell-2-o:checked ~ #end #message::before,\n#cell-3-o:checked ~ #cell-4-o:checked ~ #cell-5-o:checked ~ #end #message::before,\n#cell-6-o:checked ~ #cell-7-o:checked ~ #cell-8-o:checked ~ #end #message::before,\n#cell-0-o:checked ~ #cell-3-o:checked ~ #cell-6-o:checked ~ #end #message::before,\n#cell-1-o:checked ~ #cell-4-o:checked ~ #cell-7-o:checked ~ #end #message::before,\n#cell-2-o:checked ~ #cell-5-o:checked ~ #cell-8-o:checked ~ #end #message::before,\n#cell-0-o:checked ~ #cell-4-o:checked ~ #cell-8-o:checked ~ #end #message::before,\n#cell-2-o:checked ~ #cell-4-o:checked ~ #cell-6-o:checked ~ #end #message::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Player 2 won!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>並將含有 <code class=\"language-text\">end</code> class 的 div 設為 <code class=\"language-text\">display: block</code>，當然，也是要確定所有 checked 狀態都是正確的（已經結束）：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ #end,\n#cell-0-x:checked ~ #cell-1-x:checked ~ #cell-2-x:checked ~ #end,\n#cell-3-x:checked ~ #cell-4-x:checked ~ #cell-5-x:checked ~ #end,\n#cell-6-x:checked ~ #cell-7-x:checked ~ #cell-8-x:checked ~ #end,\n#cell-0-x:checked ~ #cell-3-x:checked ~ #cell-6-x:checked ~ #end,\n#cell-1-x:checked ~ #cell-4-x:checked ~ #cell-7-x:checked ~ #end,\n#cell-2-x:checked ~ #cell-5-x:checked ~ #cell-8-x:checked ~ #end,\n#cell-0-x:checked ~ #cell-4-x:checked ~ #cell-8-x:checked ~ #end,\n#cell-2-x:checked ~ #cell-4-x:checked ~ #cell-6-x:checked ~ #end,\n#cell-0-o:checked ~ #cell-1-o:checked ~ #cell-2-o:checked ~ #end,\n#cell-3-o:checked ~ #cell-4-o:checked ~ #cell-5-o:checked ~ #end,\n#cell-6-o:checked ~ #cell-7-o:checked ~ #cell-8-o:checked ~ #end,\n#cell-0-o:checked ~ #cell-3-o:checked ~ #cell-6-o:checked ~ #end,\n#cell-1-o:checked ~ #cell-4-o:checked ~ #cell-7-o:checked ~ #end,\n#cell-2-o:checked ~ #cell-5-o:checked ~ #cell-8-o:checked ~ #end,\n#cell-0-o:checked ~ #cell-4-o:checked ~ #cell-8-o:checked ~ #end,\n#cell-2-o:checked ~ #cell-4-o:checked ~ #cell-6-o:checked ~ #end</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主要的實作重點大概就到這邊，剩下還有一些像是 radio button 被 check 後，把原有 label 設為 <code class=\"language-text\">display: none</code> 的部分就是為了讓畫面更好看而已，實作方式跟上面的 selector 都大同小異。</p>\n<h2 id=\"實作技巧整理\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86\" aria-label=\"實作技巧整理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作技巧整理</h2>\n<p>最後稍微統整一下實作的技巧：</p>\n<ul>\n<li>\n<p>實作技巧 1 - 善用 form 元素： <code class=\"language-text\">input[type=radio]</code> 與 <code class=\"language-text\">label</code></p>\n<p>利用 radio button 來達成切換狀態的操作，在各種以純 CSS 製作的應用中，幾乎是必備出現的技巧，這邊也不例外。</p>\n<p>透過 input 元素，我們可以從 <code class=\"language-text\">:check</code> 這個 Pseudo-class 來判斷使用者的點擊與否。</p>\n</li>\n<li>\n<p>實作技巧 2 - CSS selector 可不是只有 id 與 class</p>\n<p>活用 attribute selector 與 僞元素、僞類別，可以帶來很多意想不到的妙用，像是 <code class=\"language-text\">label[for$='-o']</code> 與 <code class=\"language-text\">:check</code> 等等。</p>\n</li>\n<li>\n<p>實作技巧 3 - 藏東西不是只能用 display，還有 z-index 呢</p>\n<p>利用 <code class=\"language-text\">z-index</code> 的階層關係，控制觸發 <code class=\"language-text\">hover</code> 的元素，讓我們多了一種隱藏物件的方式。</p>\n</li>\n<li>\n<p>實作技巧 4 - CSS Grid</p>\n<p>雖然在前面並沒有提到，但作者是利用 CSS Grid 畫出表格，這在 Modern web browser 上是最經濟實惠的方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>board<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- \n    ...  依此類推將九個格子填滿\n  --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/*\n... 省略\n*/</span>\n<span class=\"token selector\">#board</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50vmin<span class=\"token punctuation\">;</span>\n<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50vmin<span class=\"token punctuation\">;</span>\n<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 1fr 1fr 1fr<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 1fr 1fr 1fr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#tile-0</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#tile-1</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n... 省略\n*/</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>每每看到 codepen 上一些神奇的作品，都會讓我有 mind-blowing 的感覺，雖然大多時候難以理解實作原理，但偶而還是會看到類似這次範例一般，好理解，又能學到不少技巧的作品。\n希望對 CSS 不那麼熟悉的讀者，透過這次的分析，也能看得懂背後的原理，然後對利用 CSS 繪圖或是製作 no-js 的作品有所興趣，雖然沒什麼實際用途，但我自己覺得能夠利用專業玩出一些好玩的東西真的蠻吸引人的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://codepen.io/alvaromontoro/pen/vwjBqz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Tic-Tac-Toe - Alvaro Montoro</a></li>\n</ol>","id":"7462d372-f401-5e9b-9bd5-4d24938dd26e","fields":{"slug":"pure-css-tic-tac-toe-analyze"},"frontmatter":{"date":"2019-05-25T22:47:05.000Z","title":"解析：純 CSS 的圈圈叉叉","tags":["css"],"type":"tech","slug":"pure-css-tic-tac-toe-analyze"},"timeToRead":12},"next":{"excerpt":"好歌分享：Love is the answer","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Ugm_E7vERYs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Love is the answer</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Ugm_E7vERYs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>近年 VR/AR 一直不斷出現在大家的視線內，雖然一直沒有什麼殺手級的應用出現，但這阻止不了開發者們的雄心壯志，尤其是 JavaScript 社群，畢竟 Jeff Atwood 說過：</p>\n<blockquote>\n<p>\"Any application that can be written in JavaScript, will eventually be written in JavaScript.\" — Jeff Atwood, Author, Entrepreneur, Cofounder of StackOverflow</p>\n</blockquote>\n<p>隨著 a-frame 的出現，WebVR 成為現實，並且很容易開發；Web AR 部分進展則相對緩慢ㄧ些，瀏覽器原生支援的 API 還一直處於不穩定的開發階段，但即便如此，我們還是可以在特定版本的瀏覽器上使用，此外，也有像是 AR.js 這樣融合 artoolkit、three.js、ＷebGL 和 WebRTC 等技術的工具可以使用。</p>\n<p>今天就來稍稍研究一下，看看目前的技術能如何開發 Web AR！</p>\n<p>照慣例，開始前先看點 demo，把 Pokemon 帶到你家客應：</p>\n<p><img src=\"/image/arjs-demo.jpg\" alt=\"arjs demo\"></p>\n<!--\n1. 簡介\n2. 介紹目前有的 WebAR 實作 lib 或 api\n2-1. 說明 WebXR Viewer on iOS 與 Google chrome 可以跑的 api\n3. 分別以 AR.js 與 Web 純 API 介紹\n-->\n<h2 id=\"目前的工具有哪些\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B\" aria-label=\"目前的工具有哪些 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前的工具有哪些</h2>\n<p><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a> 這網站上列出了一些目前有的 library，以及目前支援 WebAR 的瀏覽器：</p>\n<p><img src=\"/image/webar-libs.png\" alt=\"常見 lib\"></p>\n<p>其中 <a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a> 使用了 A-Frame (基於 Three.js) 以及 JSARTookit5（JavaScript 移植版的 <a href=\"https://github.com/artoolkit/artoolkit5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ARToolKit</a>），而這兩個技術主要皆是利用 WebGL 為主，因此大多現行的瀏覽器都能直接支援，不需要特殊的 API。</p>\n<p>這大概也是為何 AR.js 能在 GitHub 上擁有一萬多顆星星，遠勝過上列其他套件的原因。再加上作者的實驗證明 AR.js 即便在<a href=\"https://github.com/jeromeetienne/AR.js#performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">兩年的老舊手機上也能運行順暢，擁有良好的 Performance</a>。</p>\n<p>但 AR.js 也並非沒有缺點，由於是基於 ARToolKit，因此只能夠支援 Marker-based 的 AR 效果，也就是像最前面的 Demo 圖片一樣，是需要在鏡頭內放置一個設定好的 Marker，讓其辨識，取得環境的一些 Sensor 資訊，包含鏡頭的深淺遠近等等，才能讓 AR 物件渲染在視窗中。</p>\n<p>即便如此，AR.js 其簡潔、便利的使用方式（<a href=\"https://github.com/jeromeetienne/AR.js#folders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有 a-frame 與 threejs 的 extension</a>），能讓你用<a href=\"https://medium.com/arjs/augmented-reality-in-10-lines-of-html-4e193ea9fdbf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">短短 10 行程式碼就產生出一個 WebAR 效果的網頁</a>，還是非常好用的。</p>\n<p><img src=\"/image/webar-browsers.png\" alt=\"支援的 browsers\"></p>\n<p>如果你是使用 AR.js 的話，基本上現行有支援 WebGL 的手機瀏覽器就都能夠運行，不需要額外的 Polyfill 等等。</p>\n<p>但如果你想要使用非 Marker-based 效果的 AR 應用，你就得研究 <a href=\"https://immersive-web.github.io/webxr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">WebXR Device API</code></a>，其前身為 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAR API</a>。</p>\n<h2 id=\"webxr-device-api\" style=\"position:relative;\"><a href=\"#webxr-device-api\" aria-label=\"webxr device api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebXR Device API</h2>\n<p>WebXR Device API 現在還在不斷更新中，不是個穩定的 API。</p>\n<p>運用到 WebXR Device API 的有 Google 使用的 <a href=\"https://github.com/google-ar/three.ar.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.ar.js</a> 與整合 A-Frame 的 <a href=\"https://github.com/chenzlabs/aframe-ar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-ar.js</a>，以及 Mozilla 主導的 <a href=\"https://github.com/mozilla/aframe-xr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.xr.js</a> 和 <a href=\"https://github.com/mozilla/three.xr.js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-xr.js</a>。</p>\n<p>Google 提供了 <a href=\"https://github.com/google-ar/WebARonARCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARCore</a> 和 <a href=\"https://github.com/google-ar/WebARonARKit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARKit</a> 兩種分別在 Android 與 iOS 平台上運行的特殊 browsers，讓你能在上面跑 WebXR Device 相關的 API：而 Mozilla 在 iOS 上也推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 來對應，三者皆是用到手機平台原生的 ARKit。</p>\n<p>如同剛剛所說，WebXR Device API 還很不穩定，而且 Google 與 Mozilla 各自在 Android 與 iOS 上有不同的實作，<a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例</a>只能運行在 version 為 70 - 72 的 Chrome canary 上，而 Mozilla 雖然有推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a>，但上面的<a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例實作</a>也<strong>只能</strong>運行在 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 上頭...</p>\n<p>不過去看一下雙方的範例程式碼後，會發現其實用法蠻雷同的，大多都有下面這些流程（以 Google 的程式碼來當範例）：</p>\n<p>判斷是否支援 WebXR Device API，並初始設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n   * Fetches the XRDevice, if available.\n   */</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `navigator.xr` 是 WebXR Device API 的入口，有必要確認其存在</span>\n    <span class=\"token comment\">// 而 `XRSession` 中的 `requestHitTest` 則是要 enable #webxr-hit-test flag</span>\n    <span class=\"token comment\">// 確認這兩個 API 存在，確保能夠製造出點擊畫面</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>xr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">XRSession</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>requestHitTest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">requestDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 成功取得 XRDevice 物件後，需要 bind 一個 user gesture 的 event，然後呼叫</span>\n    <span class=\"token comment\">// `device.requestSession()`，這是規範在 spec  中的</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#enter-ar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEnterAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>取得 <code class=\"language-text\">XRDevice</code> 後，利用 <code class=\"language-text\">device.requestSession()</code> 製造出運行 XR 的環境：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">async</span> <span class=\"token function\">onEnterAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> outputCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> outputCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xrpresent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// `device.requestSession()` 一定要是由 user 觸發，像是 click handler 內</span>\n      <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">requestSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        outputContext<span class=\"token operator\">:</span> ctx<span class=\"token punctuation\">,</span>\n        environmentIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>outputCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 成功創建 Session 後就能開始運算 AR 了</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>當 XRSession 成功創建後，接著就是 set up three.js，撰寫 renderer，設定 scene、camera，並 attach 上 XRWebGLLayer，然後啟動 render loop：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">session</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">// 利用 Three.js 繪製 3D 物件，因此要借用 THREE.WebGLRenderer 來當作 XRSession 的 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    alpha<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    preserveDrawingBuffer<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">//  設定 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRWebGLLayer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> framebuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setFramebuffer</span><span class=\"token punctuation\">(</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 scene</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> DemoUtils<span class=\"token punctuation\">.</span><span class=\"token function\">createLitScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 camera</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 更多的設定</span>\n  <span class=\"token comment\">// 在 `requestAnimationFrame` 中啟動 render loop</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onXRFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>省略了很多細節，但大致的步驟就是這樣，<a href=\"https://github.com/googlecodelabs/ar-with-webxr/archive/master.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細程式碼在此下載</a></p>\n<p>對 WebXR Device API 比較有興趣的讀者除了 <a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例程式</a>與 Mozilla 的 <a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webxr-ios-js 範例</a> 外，也可以到 <a href=\"https://github.com/immersive-web/webxr/blob/master/explainer.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immersive-web/webxr</a> 看看該 WebXR Device API 的 Specs detail 與解釋，他們也有提供 <a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sample Page</a> 可作參考。</p>\n<h2 id=\"arjs\" style=\"position:relative;\"><a href=\"#arjs\" aria-label=\"arjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AR.js</h2>\n<p>由於手邊沒有適合的 Android 手機，不能嘗試利用 WebXR Device API，所以今天就先來看看 AR.js 有多簡單。</p>\n<p>你需要的就只有：</p>\n<ol>\n<li>準備好 Marker</li>\n<li>準備好 3D models</li>\n<li>撰寫十行簡單的程式碼</li>\n<li>host 你的 WebAR webapp</li>\n</ol>\n<p>AR.js 有提供一個 Marker generator - <a href=\"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js Marker Training</a></p>\n<p><img src=\"/image/arjs-maker-traning.png\" alt=\"ARjs marker training\"></p>\n<p>你可以上傳想要的圖片放到 Marker 中，例如一個記載你的 WebVR webapp 網址的 QR code 就很適合。像<a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>作者利用 AR.js 結合實體卡片送給他女友一個小驚喜。</p>\n<p>我建議把你做好的 Marker 下載下來，否則當你手機對著電腦中的 marker 時，3D Model 方位視角會跟你是垂直的，不是很好看。</p>\n<p>接著可以到 <a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a> 或是 <a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a> 下載 <code class=\"language-text\">gltf</code> 的 3D 模型。(搜尋想要的 Model 時記得勾選 <code class=\"language-text\">downloadable</code>，比較不會選到需要付費才能下載的，當然你要付費也很棒！)</p>\n<p>以我最前面的例子來說，我在 <a href=\"https://sketchfab.com/3d-models/squirtle-18caed58804943d7a839dcbd44d21b80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab 中載了一個傑尼龜的模型</a></p>\n<p><img src=\"/image/sketchfb-usage.png\" alt=\"sketchfab\"></p>\n<p>接著用 AR.js 對應 AFrame 的 extension 撰寫簡單的 WebVR app:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.9.2/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.rawgit.com/jeromeetienne/AR.js/1.7.5/aframe/build/aframe-ar.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token value css language-css\"><span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">'</span></span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">embedded</span> <span class=\"token attr-name\">arjs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>sourceType: webcam; debugUIEnabled: false;<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-marker</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>pattern<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>assets/pattern-marker.patt<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-entity</span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0 -6 -12<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-20 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">gltf-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url(assets/scene.gltf)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-entity</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-marker</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 <code class=\"language-text\">&lt;a-scene /></code> 中，我們指定一個 attribute <code class=\"language-text\">arjs</code>，並且設定 <code class=\"language-text\">sourceType</code> 為 <code class=\"language-text\">webcam</code>，相關 attribute 設定其實來自 <code class=\"language-text\">artoolkit system</code>，有需要可以到 <a href=\"https://github.com/jeromeetienne/AR.js/tree/master/aframe#artoolkit-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 的列表</a>查看。</p>\n<p>接著我們透過 <code class=\"language-text\">&lt;a-marker /></code> 放入我們製作的 marker，副檔名為 <code class=\"language-text\">.patt</code>，這邊的 type attribute，如果你是單純用 barcode 的話，可以設為 <code class=\"language-text\">type=barcode</code>，但若是客製化的 marker，就要設為 <code class=\"language-text\">type=pattern</code>。</p>\n<p>最後在 <code class=\"language-text\">&lt;a-entity /></code> 上頭設定我們想要呈現的 AR 3D Model，<code class=\"language-text\">gltf-model</code> attribute 設定模型的路徑，再透過 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 來調整你的模型出現在鏡頭的位置。</p>\n<p>這邊特別要注意一下，因為你載下來的 3D Model，都有自己的位置屬性，所以你可能會需要自己多加調整出適合的 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 值，否則你的 3D Model 很可能一直成像在你手機的鏡頭外而看不到，然後你還以為是程式出問題...</p>\n<p>當手機鏡頭偵測到 <code class=\"language-text\">&lt;a-marker /></code> 內對應的 marker 時，就會在鏡頭內渲染出 <code class=\"language-text\">&lt;a-entiy /></code>。</p>\n<p>如果只是像我一樣想要嘗試一下的話，可以簡單利用 Chrome 的 webapp - <a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Server for Chrome</a> 來 host 你的 htlm file，然後利用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngork</a> 或是 <a href=\"https://serveo.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serveo</a> 來當作你 localhost 的 proxy，讓你的手機可以方便相連。</p>\n<p>一切順利的話，你就會看到一隻傑尼龜出現在你家裡啦～</p>\n<p><img src=\"/image/another-arjs-demo.jpg\" alt=\"another arjs demo\"></p>\n<p>如果你沒有手機可以玩，想用電腦 Browser 跑的話，會需要到 <code class=\"language-text\">chrome://flags</code> 中把 <code class=\"language-text\">WebVR</code> 的選項開啟，然後用 inpsecter 將 Browser 調整成手機模式。</p>\n<p><img src=\"/image/chrome-flags.png\" alt=\"chrome flags\"></p>\n<p>並且需要加上 polyfill，因為普通的 chrome 是沒有支援 <code class=\"language-text\">navigator.xr</code> api 的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> polyfill <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebXRPolyfill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/arjs-run-mac.png\" alt=\"run on chrome\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然 WebXR Device API 還不穩定，但就是在這時候開始試用才更能給出回饋，高手們來試試吧！決定下次拿公司測試機來跟著 Code lab 上的範例改改看！\n另外，AR.js 雖然目前是 Marker-based，但從 <a href=\"https://github.com/jeromeetienne/AR.js/issues/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 上的一些討論</a> 來看，之後應該是有機會支援 Markerless 的。</p>\n<p>AR 這樣牽扯到電腦視覺、硬體、演算法、Sensor 等複雜運算的技術，要實作到 Web 上更是困難，進度慢是可以理解的，但還是衷心期盼著那一天，能夠開啟網頁就能丈量傢俱尺寸或是試穿衣物！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/immersive-web/webxr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Repository for the WebXR Device API Specification.</a></li>\n<li><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a></li>\n<li><a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a></li>\n<li><a href=\"https://medium.com/chialab-open-source/ar-js-the-simpliest-way-to-get-cross-browser-ar-on-the-web-8f670dd45462\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js — The Simplest Way to get Cross-Browser Augmented Reality on the Web</a></li>\n<li><a href=\"https://blog.halolabs.io/building-ar-vr-with-javascript-and-html-97af4434bcf6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building AR/VR with Javascript and HTML</a></li>\n<li><a href=\"https://medium.com/agora-io/web-vs-app-ar-edition-d9aafe988ba2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web vs App (AR edition)</a></li>\n<li><a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a></li>\n<li><a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a></li>\n<li><a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用ar-js做一個讓另對方-喔喔喔喔-的小卡片吧</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google code lab - WebXR</a></li>\n<li><a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebXR Sample page</a></li>\n</ol>\n<p>關於作者：\n<a href=\"http://blog.arvinh.info/about/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>","id":"a776efbf-720d-5861-94eb-4b4becb96984","fields":{"slug":"web-ar"},"frontmatter":{"date":"2019-07-16T17:40:44.000Z","title":"淺嚐 Web AR","tags":["web","ar","javascript"],"type":"tech","slug":"web-ar"},"timeToRead":12},"type":"tech"}},"staticQueryHashes":["2123680655"]}