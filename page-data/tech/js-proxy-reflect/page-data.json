{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/js-proxy-reflect","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『強者是不會待在同一個地方太久的。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在眾多 ES6 提供的新功能上，Proxy 與 Reflect 算是最少被提及的，主要原因我想還是因為瀏覽器的支援度較低，不過在我前陣子看到 <a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frameworkless JavaScript Part 3: One-Way Data Binding</a> 這篇文章時（好文推薦！很有趣），特意去查了一下才發現目前支援度已經越來越好：</p>\n<p><img src=\"/image/caniuseproxy.png\" alt=\"Can I Use Proxy\"></p>\n<p><img src=\"/image/caniusereflect.png\" alt=\"Can I Use Reflect\"></p>\n<p>常用的瀏覽器幾乎都支援，我想也是可以來好好了解一下這兩個神奇的物件了！</p>\n<p>最後有個參考該篇文章實作的 Todo app 範例，如果懶得看介紹的可以先 <a href=\"#todo-sample\">跳下去</a> 玩玩，但若是對 Proxy 與 Reflect 不了解的人還是建議先看一下。</p>\n<h1 id=\"proxy\" style=\"position:relative;\"><a href=\"#proxy\" aria-label=\"proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy</h1>\n<blockquote>\n<p>Proxy 物件被使用於定義基本操作的自定行為（例如：尋找屬性、賦值、列舉、函式調用等等）。 - <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></p>\n</blockquote>\n<p>不知道為什麼唸起來有點饒口，但基本上跟其字面意思相同，就是代理（代為管理）物件行為。</p>\n<p>Proxy 是一個函式物件（可被建構），他提供一個機會讓你能介入一般物件的基本操作行為，像是在你 assign 一個值給某個物件時，可以透過 Proxy 先進行一些 validation 等等，藉此讓使用被代理過後的物件之開發者可以專注在其他核心功能上。</p>\n<p>咦？聽起來很像許多 framework 或 helper library 會做的事情？有趣！讓我們繼續看下去。</p>\n<p>使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> proxyObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">target</code> 就是你想要代理的對象；而 <code class=\"language-text\">handler</code> 則是一個物件，其中定義了所有你想替 target 代為管理的操作定義，包含了：</p>\n<ul>\n<li>construct(target, args) - 代理 Object 的 <code class=\"language-text\">new</code> operator</li>\n<li>get(target, prop, receiver) - 代理 Object getting properties 時的行為</li>\n<li>set(target, prop, value, receiver) - 代理 Object setting properties 時的行為</li>\n<li>apply(target, object, args) - 代理 function call，像是 f.apply()</li>\n<li>has(target, prop) - 代理 <code class=\"language-text\">in</code> operator</li>\n<li>defineProperty(target, propKey, propDesc) - 代理 <code class=\"language-text\">Object.defineProperty</code>.</li>\n<li>deleteProperty(target, prop) - 代理 <code class=\"language-text\">delete</code> operator</li>\n<li>getOwnPropertyDescriptor(target, prop) - 代理 <code class=\"language-text\">Object.getOwnPropertyDescriptor</code>.</li>\n<li>getPrototypeOf(target) - 代理 <code class=\"language-text\">Object.getPrototypeOf</code>.</li>\n<li>setPrototypeOf(target, proto) - 代理 <code class=\"language-text\">Object.setPrototypeOf</code>.</li>\n<li>ownKeys(target) - 代理 <code class=\"language-text\">Object.getOwnPropertyNames</code> 與 <code class=\"language-text\">Object.getOwnPropertySymbols</code>.</li>\n<li>isExtensible(target) - 代理 <code class=\"language-text\">Object.isExtensible</code>.</li>\n<li>preventExtensions(target) - 代理 <code class=\"language-text\">Object.preventExtensions</code>.</li>\n</ul>\n<p><code class=\"language-text\">handler</code> object 所包含的 method 定義可以從 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 看到更多範例與描述。</p>\n<h2 id=\"說了這麼多我們到底能拿-proxy-來做什麼呢直接來點範例吧\" style=\"position:relative;\"><a href=\"#%E8%AA%AA%E4%BA%86%E9%80%99%E9%BA%BC%E5%A4%9A%E6%88%91%E5%80%91%E5%88%B0%E5%BA%95%E8%83%BD%E6%8B%BF-proxy-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2%E7%9B%B4%E6%8E%A5%E4%BE%86%E9%BB%9E%E7%AF%84%E4%BE%8B%E5%90%A7\" aria-label=\"說了這麼多我們到底能拿 proxy 來做什麼呢直接來點範例吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>說了這麼多，我們到底能拿 Proxy 來做什麼呢？直接來點範例吧！</h2>\n<h3 id=\"直觀的私有變數\" style=\"position:relative;\"><a href=\"#%E7%9B%B4%E8%A7%80%E7%9A%84%E7%A7%81%E6%9C%89%E8%AE%8A%E6%95%B8\" aria-label=\"直觀的私有變數 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>直觀的私有變數</h3>\n<p>以往在 Javascript 中，我們可能需要透過 <code class=\"language-text\">closure</code> 來實現物件的私有變數，像是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FooBar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>closeTime <span class=\"token operator\">=</span> <span class=\"token string\">'never'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setSecretDrink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">secret</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> secretDrink <span class=\"token operator\">=</span> secret<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getSecretDrink</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> secretDrink<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FooBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfooBar<span class=\"token punctuation\">.</span><span class=\"token function\">setSecretDrink</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span><span class=\"token function\">getSecretDrink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Jäger Bom'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span>closeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooBar<span class=\"token punctuation\">.</span>secretDrink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>但透過 Proxy，我們可以很直觀地在一個 Object 內達成類似效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _secretDrink<span class=\"token operator\">:</span> <span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">,</span>\n  closeTime<span class=\"token operator\">:</span> <span class=\"token string\">'never'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBarProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 以底線開頭的作為私有變數</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能存取私有變數！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 非私有變數，那就回傳原物件的原屬性值</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不能修改私有變數！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">has</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> prop<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>prop <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFooBarProxy<span class=\"token punctuation\">.</span>_secretDrink<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能存取私有變數！</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBarProxy<span class=\"token punctuation\">.</span>closeTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never</span>\nFooBarProxy<span class=\"token punctuation\">.</span>_secretDrink <span class=\"token operator\">=</span> <span class=\"token string\">'Cola'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能修改私有變數！</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_secretDrink'</span> <span class=\"token keyword\">in</span> FooBarProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'closeTime'</span> <span class=\"token keyword\">in</span> FooBarProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>眼尖一點的讀者可能會發現，這邊 handler 裡面的 <code class=\"language-text\">get</code>、<code class=\"language-text\">set</code> 好像跟上面定義中的參數不同，少了 <code class=\"language-text\">receiver</code> 這個參數？</p>\n<p>沒錯，這個神奇的第三個參數其實是指向你產生的 Proxy 實例，以上面例子來看就是 <code class=\"language-text\">FooBarProxy</code> 本身，由於範例中用不到，所以不宣告也沒關係，不過晚點在 <code class=\"language-text\">Reflect</code> 的介紹會再度提起。</p>\n<p>另外，若是沒有被你代理到的操作，則會直接 fallback 回原始 target 物件的操作上。</p>\n<h3 id=\"在設置物件屬性前進行-validation\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E8%A8%AD%E7%BD%AE%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%89%8D%E9%80%B2%E8%A1%8C-validation\" aria-label=\"在設置物件屬性前進行 validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在設置物件屬性前進行 Validation</h3>\n<p>延續剛剛的例子，我們的 FooBar 除了秘密飲料外，也需要紀錄一下基本資訊，像是電話、地址等等，這時候 Proxy 就能為我們帶來另一個好處：驗證屬性值：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _secretDrink<span class=\"token operator\">:</span> <span class=\"token string\">'Jäger Bom'</span><span class=\"token punctuation\">,</span>\n  closeTime<span class=\"token operator\">:</span> <span class=\"token string\">'never'</span><span class=\"token punctuation\">,</span>\n  phoneNumber<span class=\"token operator\">:</span> <span class=\"token string\">'02-2849-2839'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">===</span> <span class=\"token string\">'phoneNumber'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// phone number validation</span>\n      <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\(?\\d{2}\\)?[\\s\\-]?\\d{4}\\-?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot set </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prop<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Wrong format. Should be xx-xxxx-xxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"/image/proxy-validationexample.png\" alt=\"proxy example validation\"></p>\n<p>只要你設置的 <code class=\"language-text\">phoneNumber</code> 不符合 regex 的規則，就會拋出一個 Error 告訴開發者，此物件的 <code class=\"language-text\">phoneNumber</code> 屬性值是有固定 format 的。</p>\n<p>當然，javascript 充滿彈性，你也可以有彈性一點的寫法，把 validator 抽離出來：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> BarValidator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">_secretDrink</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'cola'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lame...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">phoneNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\(?\\d{2}\\)?[\\s\\-]?\\d{4}\\-?\\d{4}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Cannot set phoneNumber to </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">. Wrong format. Should be xx-xxxx-xxxx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    BarValidator<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"用來設定屬性預設值\" style=\"position:relative;\"><a href=\"#%E7%94%A8%E4%BE%86%E8%A8%AD%E5%AE%9A%E5%B1%AC%E6%80%A7%E9%A0%90%E8%A8%AD%E5%80%BC\" aria-label=\"用來設定屬性預設值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用來設定屬性預設值</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 實際上沒有這個屬性</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token comment\">// 但經過 Proxy 後</span>\nFooBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop <span class=\"token operator\">===</span> <span class=\"token string\">'revenue'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'None of your business'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可以讀取到我們設定的預設值</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'None of your business'</span></code></pre></div>\n<h3 id=\"複寫原有物件讓測試更加順利mock-object\" style=\"position:relative;\"><a href=\"#%E8%A4%87%E5%AF%AB%E5%8E%9F%E6%9C%89%E7%89%A9%E4%BB%B6%E8%AE%93%E6%B8%AC%E8%A9%A6%E6%9B%B4%E5%8A%A0%E9%A0%86%E5%88%A9mock-object\" aria-label=\"複寫原有物件讓測試更加順利mock object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>複寫原有物件，讓測試更加順利（mock object）</h3>\n<p>寫測試的時候很常會需要 mock object，像是 function 中若有讀取 <code class=\"language-text\">document.location.href</code> 的部分，在你開發機上基本上都會是 <code class=\"language-text\">localhost</code>，這時候就會需要把這個值 mock 掉。</p>\n<p>這時我們就可以將 <code class=\"language-text\">document.location</code> 委託給 proxy 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mockDocument <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  location<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">==</span> <span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">return</span> <span class=\"token string\">\"your-website-com\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"location href: \"</span><span class=\"token punctuation\">,</span> mockLocation<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// https://blog.arvinh.info</span></code></pre></div>\n<h3 id=\"看到這邊想必很多人都會想到我們可以實作-observe-function\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E5%88%B0%E9%80%99%E9%82%8A%E6%83%B3%E5%BF%85%E5%BE%88%E5%A4%9A%E4%BA%BA%E9%83%BD%E6%9C%83%E6%83%B3%E5%88%B0%E6%88%91%E5%80%91%E5%8F%AF%E4%BB%A5%E5%AF%A6%E4%BD%9C-observe-function\" aria-label=\"看到這邊想必很多人都會想到我們可以實作 observe function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看到這邊想必很多人都會想到，我們可以實作 Observe function！</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> FooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> open<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> FooBarObserver <span class=\"token operator\">=</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">property<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  property <span class=\"token operator\">===</span> <span class=\"token string\">'open'</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">?</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBar is open!!!'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keep waiting'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFooBarObserver<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"不是什麼都可以被代理的\" style=\"position:relative;\"><a href=\"#%E4%B8%8D%E6%98%AF%E4%BB%80%E9%BA%BC%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BB%A3%E7%90%86%E7%9A%84\" aria-label=\"不是什麼都可以被代理的 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不是什麼都可以被代理的</h3>\n<p>不知道大家會不會有個疑問，難道所有物件都能被 proxy 代理嗎？有沒有辦法限制我的某個物件就是不希望被他人代理？</p>\n<p>當然有！</p>\n<p>如果你的物件擁有 <code class=\"language-text\">configurable: false</code> 與 <code class=\"language-text\">writable: false</code> 的屬性，那該物件就無法被 proxy 代理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  FooBar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'???'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nproxy<span class=\"token punctuation\">.</span>FooBar\n<span class=\"token comment\">// Uncaught TypeError: 'get' on proxy: property 'FooBar' is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value (expected 'undefined' but got '???')</span></code></pre></div>\n<h3 id=\"小結論\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B5%90%E8%AB%96\" aria-label=\"小結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小結論</h3>\n<p>這邊我只列了幾個我覺得比較能凸顯 Proxy 用途的範例，而其他 handler 可以介入的操作如果大家也想了解並看看例子的話，阮一峰的 <a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入門</a> 中有針對每個操作給予例子做解析，可以參考。</p>\n<h1 id=\"reflect\" style=\"position:relative;\"><a href=\"#reflect\" aria-label=\"reflect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflect</h1>\n<p>接著我們來看看 Reflect。Reflect 不能建構實例，就像 Math 一樣，單純包含了一系列的靜態方法。</p>\n<h2 id=\"reflect-與-proxy-的完美搭配\" style=\"position:relative;\"><a href=\"#reflect-%E8%88%87-proxy-%E7%9A%84%E5%AE%8C%E7%BE%8E%E6%90%AD%E9%85%8D\" aria-label=\"reflect 與 proxy 的完美搭配 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflect 與 Proxy 的完美搭配</h2>\n<p>網路上許多文章都說 Reflect 是因應 Proxy 才增加的規範，最明確的連結是，Reflect 所定義的靜態方法包含了 Proxy Handler 能處理的所有代理操作，但他提供的是呼叫原始物件的操作，舉例來說：</p>\n<p><code class=\"language-text\">Reflect.get(target, name);</code> 效果等同於 <code class=\"language-text\">target[name];</code></p>\n<p>所以我們在 Proxy 中，如果需要 target 物件的預設操作，使用 Reflect 會更合理更清楚：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loggedObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"主要的理由在於reflect-讓我們對物件的操作可以用函數來處理\" style=\"position:relative;\"><a href=\"#%E4%B8%BB%E8%A6%81%E7%9A%84%E7%90%86%E7%94%B1%E5%9C%A8%E6%96%BCreflect-%E8%AE%93%E6%88%91%E5%80%91%E5%B0%8D%E7%89%A9%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C%E5%8F%AF%E4%BB%A5%E7%94%A8%E5%87%BD%E6%95%B8%E4%BE%86%E8%99%95%E7%90%86\" aria-label=\"主要的理由在於reflect 讓我們對物件的操作可以用函數來處理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主要的理由在於，Reflect 讓我們對物件的操作可以用函數來處理</h3>\n<p>例如在判斷物件有無特定屬性，或是刪除物件屬性時，以往我們會這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'_secretDrink'</span> <span class=\"token keyword\">in</span> FooBar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delete</span> Object<span class=\"token punctuation\">.</span>_secretDrink<span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了 Reflect 我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token string\">'_secretDrink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>FooBar<span class=\"token punctuation\">,</span> <span class=\"token string\">'_secretDrink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因此，在 Proxy 中，比起使用 <code class=\"language-text\">delete target[name]</code>, <code class=\"language-text\">Reflect.deleteProperty</code> 更能保持一制性：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loggedObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">deleteProperty</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// instead of `delete target[name]...</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"控制被-proxy-代理的函數之-this-參考對象\" style=\"position:relative;\"><a href=\"#%E6%8E%A7%E5%88%B6%E8%A2%AB-proxy-%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%BD%E6%95%B8%E4%B9%8B-this-%E5%8F%83%E8%80%83%E5%B0%8D%E8%B1%A1\" aria-label=\"控制被 proxy 代理的函數之 this 參考對象 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>控制被 Proxy 代理的函數之 this 參考對象</h3>\n<p>這個例子比較難懂，但這是說明為何 Reflect 是因應 Proxy 而生的好例子(<a href=\"https://stackoverflow.com/questions/35276559/benefits-of-es6-reflect-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    bar<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propertyKey <span class=\"token operator\">===</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reflect.get '</span><span class=\"token punctuation\">,</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> propertyKey<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this in foo getter references Proxy instance; logs 2</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target[propertyKey] '</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this in foo getter references \"target\" - logs 3</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\nobj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Reflect.get  2</span>\n<span class=\"token comment\">// target[propertyKey]  3</span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/bimadip/2/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.1.4\"></script></p>\n<p>假設你的 object target 有一個 getter 函數 foo()，現在你透過 Proxy 代理 get 函數，當今天你呼叫 <code class=\"language-text\">obj.bar</code> 時，會印出 <code class=\"language-text\">2</code>，因為 Proxy handler 攔截並代理了原始 target 物件的 get 函數；接著，若你呼叫 <code class=\"language-text\">obj.foo</code>，會出現兩個結果: <code class=\"language-text\">Reflect.get  2</code> 與 <code class=\"language-text\">target[propertyKey]  3</code>。</p>\n<p>為什麼？</p>\n<p>這是因為只有透過 <code class=\"language-text\">Reflect.get()</code> 的第三個參數 <code class=\"language-text\">receiver</code>，將指向 Proxy 本身的實例傳進去原始物件的 get 呼叫，才能夠真的呼叫到 Proxy.get。</p>\n<p>若是直接透過 <code class=\"language-text\">target['foo']</code>，則原本在 <code class=\"language-text\">foo</code> 中的 this，就會指向原始的 target 本身，而不會觸發 Proxy 的 get。</p>\n<p>這邊概念真的比較難懂，若我有任何錯誤地方歡迎指正，我相信大家多看幾次範例後都能悟道的。</p>\n<p>除了與 Proxy 匹配的優勢外，Reflect 還帶來了一些好處（source: <a href=\"https://goo.gl/9v9STM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Benefits of ES6 Reflect API</a>, <a href=\"https://github.com/tvcutsem/harmony-reflect/wiki\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Harmony-reflect</a>)：</p>\n<h3 id=\"更優雅更好用的回傳值\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%84%AA%E9%9B%85%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E5%9B%9E%E5%82%B3%E5%80%BC\" aria-label=\"更優雅更好用的回傳值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更優雅、更好用的回傳值</h3>\n<p>以往使用 <code class=\"language-text\">Object.defineProperty(obj, name, desc);</code> 時，若成功，會回傳 obj，失敗則有可能會拋出 Error。而使用 <code class=\"language-text\">Reflect.defineProperty(obj, name, desc)</code> 的話，則會回傳 boolean 值，讓失敗或成功的結果有統一的格式。</p>\n<!-- 介紹其他更多好處 https://github.com/tvcutsem/harmony-reflect/wiki-->\n<h3 id=\"更可靠的-code-classlanguage-textapplycode\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E5%8F%AF%E9%9D%A0%E7%9A%84-code-classlanguage-textapplycode\" aria-label=\"更可靠的 code classlanguage textapplycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更可靠的 <code class=\"language-text\">apply</code></h3>\n<p>在 es5 時，大家都很習慣透過 <code class=\"language-text\">f.apply(obj, args)</code> 的方式來 apply 函數到物件上頭，但很有可能在某些情況下，<code class=\"language-text\">f.apply</code> 被串改了，這時候就會有不預期的結果。</p>\n<p>Senior 一點的會知道可以利用 <code class=\"language-text\">Function.prototype.apply.call(f, obj, args)</code> 來呼叫，至少 prototype 不會騙你，但這種方式總是不夠優雅。</p>\n<p>現在有了 Reflect 後，就不需要擔心這種事情，透過 <code class=\"language-text\">Reflact.apply(obj, args)</code> 就能輕鬆達到一樣效果。</p>\n<h3 id=\"接受可變參數的-constructor\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E5%8F%97%E5%8F%AF%E8%AE%8A%E5%8F%83%E6%95%B8%E7%9A%84-constructor\" aria-label=\"接受可變參數的 constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接受可變參數的 Constructor</h3>\n<p>這個優點只有跟 ES5 比較時才有優勢。主要是讓你能透過：<code class=\"language-text\">const obj = Reflect.construct(FooBar, args)</code> 來在建構物件實例時，傳遞可變參數；若是在 ES5 的世界，只有 <code class=\"language-text\">FooBar.apply</code> 或 <code class=\"language-text\">FooBar.call</code> 能夠接受變動參數，但是在 <code class=\"language-text\">new</code> 物件實例時，並沒有 <code class=\"language-text\">apply</code> 或 <code class=\"language-text\">call</code> 可以使用。</p>\n<p>而現在透過 ES6 的 spread syntax，我們可以在建構物件實例時，直接傳遞可變參數：<code class=\"language-text\">const obj = new FooBar(...args)</code>。</p>\n<!-- 最後說明 https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/ 中 data binding 的實作-->\n<p><span id=\"todo-sample\"></span></p>\n<h2 id=\"最終範例利用-proxy-與-reflect-完成-one-way-data-binding\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%AF%84%E4%BE%8B%E5%88%A9%E7%94%A8-proxy-%E8%88%87-reflect-%E5%AE%8C%E6%88%90-one-way-data-binding\" aria-label=\"最終範例利用 proxy 與 reflect 完成 one way data binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終範例：利用 Proxy 與 Reflect 完成 one way data binding</h2>\n<p>在了解完 Proxy 與 Reflect 的基本使用方式後，想分享一個很有趣的應用，也就是我開頭提到，激發我研究 Proxy 的範例：frameworkless js one way data binding.</p>\n<p>結合先前提過的 Observe function，來實作一個簡單 Todo App：</p>\n<p data-height=\"339\" data-theme-id=\"dark\" data-slug-hash=\"LrpOEw\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"Oneway-data-binding-js-proxy-reflect\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/LrpOEw/\">Oneway-data-binding-js-proxy-reflect</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>基本上是結合了上述介紹的 Proxy 與 Reflect 特性，並融合[這篇文章]((<a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/</a>)的範例所製作的，如果大家有看完前面的介紹，對於這段 code 應該不難理解。</p>\n<p>主要是透過 Proxy 來代理 Object 的 <code class=\"language-text\">set</code> 與 <code class=\"language-text\">deleteProperty</code> 操作，讓 Todo list 的變動能夠被代理。</p>\n<p>此外，在先前的介紹中，都是以 Object 為主，但 todo app 範例中被 Proxy 代理的是 Array。</p>\n<p>最大的差別在於，當你 push 一個新 item 進入 Array 時，<code class=\"language-text\">set</code> 會被呼叫兩次，一次是新的 item 被塞入陣列時，一次是 Array 的 <code class=\"language-text\">length</code> property 加一時。所以要特別濾掉 <code class=\"language-text\">length</code> 更動的那次代理操作。</p>\n<p>最後，只要在代理的操作中，想辦法把 DOM 做對應的修改，如同上面程式中的 <code class=\"language-text\">line 22 ~ line 40</code>，定義一些 render template 的 function 來更新 DOM 即可。</p>\n<!-- 最終結論 -->\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>Javascript 的變動總是快於瀏覽器支援度，所以常常造成一些新的 Spec 我們不熟悉、不知如何運用，這次的研究學習了不少，而上面的 Todo App 是個簡陋不嚴謹的範例，不過也足以展現 Proxy 與 Reflect 在實際運用上的情境，並帶給我們另一種思考方向，很多時候不用一開始就套用 Framework，透過越來越進步的瀏覽器與 ES 版本，我們也能達到一樣目的。雖然比不上 framework 包山包海的優化，但或許能讓我們更了解實際要解決的問題是什麼，以及解決方法背後的概念。</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://jack.ofspades.com/frameworkless-javascript-part-3-one-way-data-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frameworkless JavaScript Part 3: One-Way Data Binding</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN Proxy</a></li>\n<li><a href=\"https://www.jianshu.com/p/34f0e6abe312\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6 之 Proxy 介绍</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ECMAScript 6 入门</a></li>\n</ol>","fields":{"slug":"js-proxy-reflect"},"frontmatter":{"title":"一起來了解 Javascript 中的 Proxy 與 Reflect","date":"05-27-2018","tags":["javascript","es6","proxy","reflect","frameworkless"]},"timeToRead":15}},"pageContext":{"slug":"js-proxy-reflect","prev":{"excerpt":"好歌分享：四季","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Nm0HTbO5HhM\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">四季</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Nm0HTbO5HhM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>隨著年齡增長，多少開始會遇到家人或親戚需要長期照護，入住療養院或醫院的狀況，接者就會發現許多照護中心可是一位難求，院中的照服人員或是醫護人員也得以一擋百，讓我很想知道目前台灣整體來說，老年人口、長照機構與照服人員的比例失衡有多嚴重。而剛好在前陣子 <a href=\"https://medium.com/@hulitw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@huli</a> 大大介紹了<a href=\"https://blog.techbridge.cc/2018/04/28/antd-and-admin-website/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ant design</a>，讓我再次注意到同樣為螞蟻金服出品的 <a href=\"https://antv.alipay.com/zh-cn/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV</a>，稍微研究之下發現它使用起來非常簡單快速，並且一樣有 React、Angular 與 Vue 的版本。所以今天這篇文章想藉由實作台灣老年人口與長照機構供需比的資料圖表，順便介紹 AntV 這套資料視覺化的套件。</p>\n<p>對了，報導者有發表過一系列專輯 - <a href=\"https://www.twreporter.org/topics/nursing-home-truth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長照機構裡的大象——10萬老人被照顧的真相</a>，說明台灣長照產業的現況，如果懶得看我長篇大論的技術文章，拜託至少在離開前去看一下報導者的專輯，這樣我也算功德一件，讓更多人知道長照產業的重要性，或許也就有那麼一些人有辦法解決這個鮮少被提起的問題。</p>\n<p>先看個成果：</p>\n<p data-height=\"379\" data-theme-id=\"29194\" data-slug-hash=\"OZxNbO\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"總體台灣老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/OZxNbO/\">總體台灣老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<!--\n解釋範例內容\n-->\n<p>我依照 <a href=\"https://zh.wikipedia.org/wiki/%E5%8F%B0%E6%B9%BE%E5%9C%B0%E7%90%86%E5%8C%BA%E5%88%92\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki 上的台灣地理區劃分</a>將資料北、中、南、東與外島五個區塊，並加上兩個按鈕，可以把資料量較少的外島去除，用來展示 G2 在處理資料切換時的順暢感。</p>\n<p>看得出來其實就是個非常簡單用 Excel 也畫得出來的分組長條圖，但實際上你會發現，透過 AntV 製作完全不會比用 Excel 麻煩，還支援 RWD 與資料的切換動畫！真的非常適合我這次想要快速拉出一個比較圖表的狀況！</p>\n<h1 id=\"antv\" style=\"position:relative;\"><a href=\"#antv\" aria-label=\"antv permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AntV</h1>\n<p><img src=\"/image/antv-cover.png\" alt=\"AntV 官網\"></p>\n<p>AntV 其實包含了三個不同應用情境的套件：G2、G6、F2。</p>\n<ol>\n<li>G2: 包含各種圖表元素的集成，大多數的應用場景都可以從 G2 中找到對應合適的元件。</li>\n<li>G6: 主要是針對流程圖與關聯性分析的圖表元件，甚至能利用 G2 繪製資料庫的 ER Diagram 與時序圖。</li>\n<li>F2: 針對 Mobile 的使用情境來特別加強圖表在 performance 上的表現，主要繪製在 <code class=\"language-text\">canvas</code> 上。</li>\n</ol>\n<h2 id=\"今天我們使用-g2-來開發\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%A4%A9%E6%88%91%E5%80%91%E4%BD%BF%E7%94%A8-g2-%E4%BE%86%E9%96%8B%E7%99%BC\" aria-label=\"今天我們使用 g2 來開發 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今天我們使用 G2 來開發</h2>\n<p>這幾套由螞蟻金服開發的視覺化套件，除了遵照 Antd 的設計語言外，針對圖表的設計製作上，深受 <a href=\"https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Grammar of Graphics</a> 這本巨作的影響，也是 G2 的名稱的由來。</p>\n<blockquote>\n<p>G2 的強大是由其背後的一套圖形語法所支撐的，它基於《The Grammar of Graphics》(Leland Wilkinson 著)一書，是一套用來描述所有統計圖形深層特性的語法規則，該語法回答了『什麼是統計圖形』這一問題，以自底向上的方式組織最基本的元素形成更高級的元素。由此，G2 所建構出的圖表是由一系列獨立的圖形語法元素組合而成的 -- <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/the-grammar-of-graphics.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV G2 官網</a></p>\n</blockquote>\n<p>我並沒有看過那本書，也沒有仔細研究 G2 的原始碼，但這敘述聽起來就超厲害的，整個工具是建構在一套完整的理論基礎上頭。</p>\n<p>在 G2 的世界中，並沒有明確定義一般的圖表類型，像是長條圖、折線圖等等，是依照一系列的圖形語法元素組合成的結果來決定其類型。</p>\n<p>所謂的圖形語法元素大概就是包含：</p>\n<ul>\n<li><strong>DataSet 資料集操作</strong></li>\n<li><strong>Scale 度量</strong></li>\n<li><strong>Geom 幾何標記（point, line, area, shape, etc）</strong></li>\n<li><strong>Attr 圖形屬性</strong></li>\n<li><strong>Coord 座標系</strong></li>\n<li><strong>Axis 座標軸</strong></li>\n<li><strong>Legend 圖例</strong></li>\n<li><strong>Tooltip 提示訊息</strong></li>\n<li><strong>Guide 輔助元素</strong></li>\n<li><strong>Facet 分面 （將一份資料按照某個維度分隔成若干子集）</strong></li>\n<li><strong>Label 標籤</strong></li>\n<li><strong>Theme 主題</strong></li>\n<li><strong>Event 圖表事件</strong></li>\n</ul>\n<p>在<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件上</a>上針對不同的元素都有非常詳細的說明與範例，而且都有中文文件（雖然是簡體...），是 AntV 的絕大優點之一。</p>\n<p>透過操作這些不同元素的組合，可以很容易的切換圖表類型，以 <strong>Coord</strong> 為例：</p>\n<p><code class=\"language-text\">chart.coord('coordType'[, cfg]);</code></p>\n<p>在同樣的資料集上，透過上述的方式來轉換座標軸，馬上就可以從層疊長條圖切換為圓餅圖：</p>\n<p><img src=\"/image/g2_coord.png\" alt=\"Different coord on same chart\"> <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/coord.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>或是透過自定義 <code class=\"language-text\">Shape</code>，快速將一般的長條圖，改變成三角形的形狀：</p>\n<p data-height=\"458\" data-theme-id=\"29194\" data-slug-hash=\"deVMmN\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"AntV-G2-demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/deVMmN/\">AntV-G2-demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>由於這樣的設計理念與基礎，G2 比起其他一樣提供較為高階視覺化語法的套件來說，彈性大了不少。</p>\n<h2 id=\"開始進行實作視覺化總要有個方向走我們先從資料搜集開始\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E5%AF%A6%E4%BD%9C%E8%A6%96%E8%A6%BA%E5%8C%96%E7%B8%BD%E8%A6%81%E6%9C%89%E5%80%8B%E6%96%B9%E5%90%91%E8%B5%B0%E6%88%91%E5%80%91%E5%85%88%E5%BE%9E%E8%B3%87%E6%96%99%E6%90%9C%E9%9B%86%E9%96%8B%E5%A7%8B\" aria-label=\"開始進行實作視覺化總要有個方向走我們先從資料搜集開始 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行實作，視覺化總要有個方向，走，我們先從資料搜集開始！</h2>\n<p>首先，要想知道老年人口以及長照機構的比例，我們需要找到依照年齡分組的人口統計資料，這可以從<a href=\"https://www.ris.gov.tw/346\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">內政部的人口資料庫</a>中找到「年底人口數按性別及五歲年齡組分」的資料表，從民國 35 年到 106 年都有，算是蠻齊全的。我們選取 85 ~ 100+ 以上的資料當作老年人口。</p>\n<p>2017 年的部分計算出來後大約是：368,757 人</p>\n<p><img src=\"/image/age_population.png\" alt=\"年底人口數按性別及五歲年齡組分\"></p>\n<p>接著，到<a href=\"https://dep.mohw.gov.tw/DOS/lp-3550-113-xCat-T02.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛福部統計處</a>找尋長期照顧機構的相關資料。</p>\n<p>可以找到 2017 年長照與安養機構總數的可供進住人數，大約 57,147 人：</p>\n<p><img src=\"/image/number_of_nursy_building.png\" alt=\"長照與安養機構總數的可供進住人數\"></p>\n<p>以及 2017 年老人長期照顧、安養機構工作人員人數，大約 19,064 人（只計算護理人員與照顧服務人員）：</p>\n<p><img src=\"/image/number_of_workers.png\" alt=\"老人長期照顧、安養機構工作人員人數\"></p>\n<p>上述的資料來源都有個別縣市的統計資料，上面數字是我將各縣市加總的結果，可能多少會有誤差，大家別介意啊...整體比例應該不會差太多。</p>\n<h2 id=\"接著使用-g2-來進行視覺化\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E4%BD%BF%E7%94%A8-g2-%E4%BE%86%E9%80%B2%E8%A1%8C%E8%A6%96%E8%A6%BA%E5%8C%96\" aria-label=\"接著使用 g2 來進行視覺化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著使用 G2 來進行視覺化</h2>\n<p>要使用 G2 很簡單，只要在 HTML 中載入 <code class=\"language-text\">&lt;script src=\"https://gw.alipayobjects.com/os/antv/assets/g2/3.0.9/g2.min.js\">&lt;/script></code> 即可。</p>\n<p>接著將剛剛的資料定義好：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> SimpleAll <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">57147</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">19064</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'老年人口數(85~100+)'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">368757</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們就可以透過 <code class=\"language-text\">G2.Chart</code> 來定義圖表：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">G2<span class=\"token punctuation\">.</span>Chart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  container<span class=\"token operator\">:</span> <span class=\"token string\">'mountNode'</span><span class=\"token punctuation\">,</span>\n  forceFit<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>innerHeight\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們 new 一個 <code class=\"language-text\">G2.Chart</code> 的 instance，並且同時傳入三個參數給予建構：</p>\n<ul>\n<li>container: 指定你的圖表要掛載在 DOM 中的哪個位置，對應於 HTML 中元素的 id 值。</li>\n<li>forceFit: 超方便的參數，只要設定為 true，你的圖表就能 Responsive，因此也不用再設定寬度。</li>\n<li>height: 可以額外定義需要的圖表高度。</li>\n</ul>\n<p>再來我們把資料與圖表做綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  chart<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>SimpleAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著便能開始設定我們的圖表長相：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart\n  <span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name*value'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'dodge'</span><span class=\"token punctuation\">,</span>\n    marginRatio<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>先前說過，G2 中沒有區分圖表類型，利用的是各種不同的<strong>幾何標記</strong>來組成圖表，如果要製作長條圖，需要用到的就是 <code class=\"language-text\">ìnterval()</code> 這個幾何標記，G2 還支援：<code class=\"language-text\">point()</code>, <code class=\"language-text\">path()</code>, <code class=\"language-text\">line()</code>, <code class=\"language-text\">area()</code>, <code class=\"language-text\">polygon()</code>, <code class=\"language-text\">edge()</code>, <code class=\"language-text\">schema()</code>, <code class=\"language-text\">heatmap()</code> 這幾種類型，<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/geom.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網有更詳細的介紹</a></p>\n<p>宣告我們需要的幾何圖形後，接著就會想知道我們要怎麼將資料映射到對的位置，並且給予不同的顏色區別。</p>\n<p>而這一切在 G2 中都非常的簡單直覺。</p>\n<p>透過 <code class=\"language-text\">position('name*value')</code> 這個 API，我們指定資料欄位的 <code class=\"language-text\">name</code> 要對應到圖表座標軸上的 <code class=\"language-text\">x</code>，而 <code class=\"language-text\">value</code> 對應到 <code class=\"language-text\">y</code>，到這邊為止，我們就能畫出一個擁有完整資訊的圖表：</p>\n<img src=\"/image/g2-simple-bar.png\" width=\"500\" height=\"300\">\n<p>當然這樣還不夠，至少也要用顏色來區別一下不同的資料類別。利用 <code class=\"language-text\">color(name)</code> 來告訴 G2，我們要根據資料的 <code class=\"language-text\">name</code> 欄位，用不同的顏色來區分。</p>\n<img src=\"/image/g2-simple-bar-color.png\" width=\"500\" height=\"300\">\n<p>G2 的 API 通常都能接收一個以上的參數，以 color 為例，除了直接傳入顏色要對應的資料欄位外，也可以直接輸入某個顏色，讓他 apply 到整個圖表；或是傳入 callback，在 callback 中根據欄位數值做邏輯上的著色動作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 可以參考官網 API Doc https://antv.alipay.com/zh-cn/g2/3.x/api/geom.html#_color</span>\n\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用默認的顏色</span>\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用傳入的指定顏色</span>\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x*y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'red'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"接著我們還可以加點東西讓圖表活潑一點\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E9%82%84%E5%8F%AF%E4%BB%A5%E5%8A%A0%E9%BB%9E%E6%9D%B1%E8%A5%BF%E8%AE%93%E5%9C%96%E8%A1%A8%E6%B4%BB%E6%BD%91%E4%B8%80%E9%BB%9E\" aria-label=\"接著我們還可以加點東西讓圖表活潑一點 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們還可以加點東西讓圖表活潑一點。</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> imageMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們在原本的 <code class=\"language-text\">interval</code> 幾何圖形上加上另一個幾何圖形 <code class=\"language-text\">point</code>，位置一樣將 <code class=\"language-text\">(name, value)</code> 映射到 <code class=\"language-text\">(x, y)</code>。</p>\n<p>相信眼尖的你會發現，<code class=\"language-text\">position</code> 的參數除了一開始的 <code class=\"language-text\">(name*value)</code> 外，也可以傳遞 array 形式。</p>\n<p>接著設定 size 為 50；在幾何圖形 <code class=\"language-text\">point</code> 中，size 代表原點的半徑，如果是 <code class=\"language-text\">interval</code> 則代表柱體寬度，<code class=\"language-text\">line</code> 則是線段寬度。</p>\n<p>還有個特殊的 <code class=\"language-text\">shape()</code> 函式，他讓我們可以指定特定資料欄位（在這邊我們用 <code class=\"language-text\">name</code>），將其轉換成不同的型態，像是這邊我們就把單純的 <code class=\"language-text\">point</code> mapping 成圖片，而這一切只要透過一個 callback 函數，回傳對應的結果即可！</p>\n<p data-height=\"518\" data-theme-id=\"29194\" data-slug-hash=\"jxZGPV\" data-default-tab=\"js,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"2017 台灣總體老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/jxZGPV/\">2017 台灣總體老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>短短幾行 code 就作出一個比一般 Excel 還要特別一些的圖表，真的蠻方便使用的對吧！</p>\n<h2 id=\"但只看全台灣總體的資料好像不太夠啊能不能看一下各縣市的呢\" style=\"position:relative;\"><a href=\"#%E4%BD%86%E5%8F%AA%E7%9C%8B%E5%85%A8%E5%8F%B0%E7%81%A3%E7%B8%BD%E9%AB%94%E7%9A%84%E8%B3%87%E6%96%99%E5%A5%BD%E5%83%8F%E4%B8%8D%E5%A4%AA%E5%A4%A0%E5%95%8A%E8%83%BD%E4%B8%8D%E8%83%BD%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%90%84%E7%B8%A3%E5%B8%82%E7%9A%84%E5%91%A2\" aria-label=\"但只看全台灣總體的資料好像不太夠啊能不能看一下各縣市的呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>但只看全台灣總體的資料好像不太夠啊，能不能看一下各縣市的呢？</h2>\n<p>當然可以。</p>\n<p>只是每個縣市如果都要放三根長方體好像太密集了點，不是很適合，所以如同最前面的成品圖，將資料北、中、南、東與外島五個區塊，這樣圖表會比較清晰一點。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">18684</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">1609</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">328</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">5997</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">482</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">73</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'老年人口數(85~100+)'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">162443</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">92071</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">101846</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">10197</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">2200</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"dataset\" style=\"position:relative;\"><a href=\"#dataset\" aria-label=\"dataset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataSet</h3>\n<p>要想在同一圖表中呈現多組長條圖，我們需引進 G2 中 <code class=\"language-text\">DataSet</code> 的這個概念。</p>\n<p><img src=\"/image/antv-g2-data-set-structure.svg\" alt=\"DataSet 架構圖（取自官網）\">\n<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/data-set.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網介紹</a></p>\n<p>這張圖看似複雜，但其實很清楚的介紹了 <code class=\"language-text\">DataSet</code> 在使用 G2 製圖的過程中所扮演的角色：操作資料。</p>\n<p>資料可以經由 <code class=\"language-text\">Connector</code> 傳入 <code class=\"language-text\">DataSet</code> 中，接著利用 <code class=\"language-text\">Transforms</code> 針對數據做處理（排序、統計、資料補齊），最後渲染到 <code class=\"language-text\">DataView</code> 中。</p>\n<p>突然看到一堆名詞感覺有點嚇人？別擔心，待會的範例會慢慢講解，只要先把 <code class=\"language-text\">DataSet</code> 想成是存放資料的資料集，而 <code class=\"language-text\">DataView</code> 就是我們要繪製出來的資料視圖。</p>\n<p>另外，一份 <code class=\"language-text\">DataSet</code> 可以連接多個 <code class=\"language-text\">DataView</code>，並透過更動其中的共用 <code class=\"language-text\">State</code> 來進行連動變更，在我們的範例中沒有使用到，但可以參考<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/data-set.html#_%E5%9B%BE%E8%A1%A8%E8%81%94%E5%8A%A8%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網的清楚範例</a></p>\n<p><img src=\"/image/antv2-g2-dataset-state.gif\" alt=\"官網範例示圖\"></p>\n<h3 id=\"回到我們的範例來\" style=\"position:relative;\"><a href=\"#%E5%9B%9E%E5%88%B0%E6%88%91%E5%80%91%E7%9A%84%E7%AF%84%E4%BE%8B%E4%BE%86\" aria-label=\"回到我們的範例來 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>回到我們的範例來</h3>\n<p>跟剛剛的範例不同，我們在進行資料綁定前（<code class=\"language-text\">chart.source(data)</code>），需要先對數據做一些操作，所以要利用 <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">transform</code> 兩個 API：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dv <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span><span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndv<span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'fold'</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'南部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'東部'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'外島'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 展開資料</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'區域'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// key, 設置新的 key/value 值，來對應新數據的含義。</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// value</span>\n  retains<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'name'</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\">// 想要保留在 transform 後的資料欄位</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchart<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>dv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">new DataSet()</code> 與 <code class=\"language-text\">createView()</code> 創建出一個擁有 <strong>資料集 &#x3C;-> 資料狀態連接 &#x3C;-> 資料視圖</strong> 關聯性的物件 <code class=\"language-text\">dv</code>，接著利用 <code class=\"language-text\">transform()</code> 函數針對資料進行處理。</p>\n<p>我們的資料是根據 <code class=\"language-text\">可供進住人數'</code>、<code class=\"language-text\">長照、養護人員</code> 與 <code class=\"language-text\">老年人口數</code>來分類，但我們實際上希望的是能夠先依照區域劃分，在每個區域中再分別用這三種類別來比較資料。</p>\n<p>因此在傳入 <code class=\"language-text\">transform</code> 的 option 中，我們選定 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">fold</code>，其意義為：<strong>以指定字段集作為 Key，展開數據。</strong>並且設置新的 key/value 值，來對應新數據的含義。</p>\n<p>直接拿我們的資料來作為例子，比較一下前後結果就會很清楚了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 原始資料</span>\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span><span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">18684</span><span class=\"token punctuation\">,</span><span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">1609</span><span class=\"token punctuation\">,</span><span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">328</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'北部'</span><span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'中部'</span><span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'南部'</span><span class=\"token operator\">:</span> <span class=\"token number\">5997</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'東部'</span><span class=\"token operator\">:</span> <span class=\"token number\">482</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'外島'</span><span class=\"token operator\">:</span> <span class=\"token number\">73</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 經過 transform 後</span>\n\n<span class=\"token keyword\">const</span> dataBeenTransformed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">25499</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'北部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">8994</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">11027</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'可供進住人數'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'中部'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">3518</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'長照、養護人員'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 基本上，transform 後，原有的資料欄位會不見，這邊的 `name` 還保留是因為我有加入 `retains: [ 'name' ]` 這個選項。</span></code></pre></div>\n<p>如此一來，我們在繪製圖表的時候，他就會依照目前的 Key, 將相同的 Key 所對應的值 Group 在一起，讓<code class=\"language-text\">北部</code>這個 Key 對應的三個欄位數值（可供進住人數、長照人員數、老年人口數）一起在同個分類（北部）中顯示。</p>\n<p>不過，還沒有結束。</p>\n<p>將資料分組後，依照先前的繪製方式，會畫出下面這樣的結果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chart<span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域*區域人數'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img src=\"/image/antv2-g2-multiple-set.png\" width=\"500\" height=\"300\">\n<p>雖然分組了，但資料重疊在一起了...囧</p>\n<p>這是因為每個分組中的每個數據都套用到了同樣的 position 設定（區域*區域人數），我們必須要調整一下！</p>\n<p>透過 <code class=\"language-text\">adjust()</code> 函數可以方便做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'dodge'</span><span class=\"token punctuation\">,</span>\n  marginRatio<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>設定 type 為 <code class=\"language-text\">dodge</code>，代表我們要調整的是分組數據，然後給予 margin 比例為 1/5。</p>\n<p data-height=\"297\" data-theme-id=\"29194\" data-slug-hash=\"JvZWQE\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"2017 台灣老年人口與長照機構供需比 - AntV - demo1\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/JvZWQE/\">2017 台灣老年人口與長照機構供需比 - AntV - demo1</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來就正常多了！</p>\n<p>關於 <code class=\"language-text\">transform</code> 的運用，可以參考官方詳解 - <a href=\"https://antv.alipay.com/zh-cn/g2/3.x/api/transform.html#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Transform</a>\n關於 <code class=\"language-text\">adjust</code> 的運用，目前<a href=\"https://antv.alipay.com/zh-cn/g2/3.x/api/geom.html#_adjust\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">支援四種 type</a>：<code class=\"language-text\">stack</code>, <code class=\"language-text\">dodge</code>, <code class=\"language-text\">jitter</code>, <code class=\"language-text\">symmetric</code>。</p>\n<p>神奇的是，這些不同類型的差異，在擁有豐富文檔的官方網站竟然找不到介紹，所以我其實也不太懂。重點是，不同的資料型態會有各自適合的 type，大家在製作時要記得都嘗試看看效果。</p>\n<h3 id=\"看起來蠻完整的了但圖表沒辦法動態變化怎麼可以\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E8%B5%B7%E4%BE%86%E8%A0%BB%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BA%86%E4%BD%86%E5%9C%96%E8%A1%A8%E6%B2%92%E8%BE%A6%E6%B3%95%E5%8B%95%E6%85%8B%E8%AE%8A%E5%8C%96%E6%80%8E%E9%BA%BC%E5%8F%AF%E4%BB%A5\" aria-label=\"看起來蠻完整的了但圖表沒辦法動態變化怎麼可以 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看起來蠻完整的了，但圖表沒辦法動態變化怎麼可以！</h3>\n<p>沒錯，我也覺得不可以。</p>\n<p>還好 AntV G2 讓我們輕鬆利用 <code class=\"language-text\">chart.changeData()</code> 就能同時更新 <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">DataView</code>。更棒的是，除了提供 RWD 設計外，資料轉換過程中的動畫他也幫你照顧好好的。</p>\n<p>除此之外，我們也能夠直接操作原有的 <code class=\"language-text\">DataSet</code>，像開頭的範例一樣，點選 button 時，我們透過 <code class=\"language-text\">chart.filter</code> 來過濾原有資料，並且在最後呼叫 <code class=\"language-text\">chart.repaint()</code> 進行 <code class=\"language-text\">DataView</code> 的重繪（一定要重繪才會 trigger <code class=\"language-text\">DataSet</code> 與 <code class=\"language-text\">DataView</code> 間的連動）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  chart<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      chart<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        minLimit<span class=\"token operator\">:</span> <span class=\"token number\">73</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    chart<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'區域人數'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      minLimit<span class=\"token operator\">:</span> <span class=\"token number\">400</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> val <span class=\"token operator\">!==</span> <span class=\"token string\">'外島'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  chart<span class=\"token punctuation\">.</span><span class=\"token function\">repaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如此一來就能完成開頭的範例啦！</p>\n<p data-height=\"379\" data-theme-id=\"29194\" data-slug-hash=\"OZxNbO\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"總體台灣老年人口與長照機構供需比 - AntV - demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/OZxNbO/\">總體台灣老年人口與長照機構供需比 - AntV - demo</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>如同我在前言提及的<a href=\"(https://www.twreporter.org/topics/nursing-home-truth)\">報導者專輯</a>中所呈現的，台灣的長照產業正面臨很大的困境，只要家中有人有這種需求，相信都能有很深的體會。先前也曾有學長以長照產業為創業題目，可惜最終黯然收場，可見這問題真的有其嚴重與困難性存在。</p>\n<p>身為前端開發者，或許目前能做的最大貢獻就是盡量製作出許多一目了然的資訊圖表、網頁專輯，讓更多的人知道問題的嚴重性，透過 AntV G2 這樣的工具，製作互動式圖表真的是越來越方便與容易，希望大家能多加貢獻，讓台灣社會往更好的方向走去！而小魯我能力不足分身乏術...先下台一鞠躬...</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://antv.alipay.com/zh-cn/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AntV</a></li>\n<li><a href=\"https://antv.alipay.com/zh-cn/g2/3.x/tutorial/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">G2</a></li>\n<li><a href=\"https://www.ris.gov.tw/346\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">內政部戶政司人口資料庫</a></li>\n<li><a href=\"https://www.gender.ey.gov.tw/gecdb/Stat_Statistics_DetailData.aspx?sn=%2BwEzRrF1jtJ82VtOVizhxw%3D%3D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">行政院性別平等統計資料庫</a></li>\n<li><a href=\"https://dep.mohw.gov.tw/DOS/lp-3550-113-xCat-T02.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">衛福部統計處-長期照顧統計</a></li>\n<li><a href=\"https://www.twreporter.org/topics/nursing-home-truth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長照機構裡的大象——10萬老人被照顧的真相</a></li>\n<li>Icon made by Freepik from www.flaticon.com</li>\n</ol>","id":"92256b42-2644-5b1d-8625-b2717a7bc39d","fields":{"slug":"datavis-antv"},"frontmatter":{"date":"2018-05-05T13:41:40.000Z","title":"使用 AntV 製作資料圖表-台灣老年人口與長照機構供需比","tags":["data visualization","AntV","G2","RWD","javascript"],"type":"tech","slug":"datavis-antv"},"timeToRead":17},"next":{"excerpt":"『讓你焦慮的不是事情本身，而是你對事情的認知。』","html":"<blockquote>\n<p>『讓你焦慮的不是事情本身，而是你對事情的認知。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前不久在 Frontend masters 看到一部影片 <a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns</a>，是 Paypal 的工程師 Kent C. Dodds 在某場 workshop 介紹他實作 React component 時所使用的進階 React Patterns（目前似乎要付費觀看，而他在 <a href=\"https://egghead.io/courses/advanced-react-component-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">egghead.io</a> 上也有一系列教學，同樣要收費就是了...），內容非常豐富扎實，若是想提供一些可高度客製化的共用元件，使用這些 Pattern 絕對是有絕佳的幫助！如果可以，我強烈建議大家自己去聽聽，不用把時間花在閱讀我的文字上 :p</p>\n<p>自從看完那影片後，平常開發都會不自覺得去思考這些 pattern，看看如果應用到我目前的專案中，能否帶來益處。</p>\n<p>當然有些早已有在使用，而有些則苦無伸展之處，為了加深自己對這些 pattern 的印象與理解，今天就來筆記一下這系列影片的內容，也希望能對來到這邊的讀者有所幫助。</p>\n<h2 id=\"為何要有-pattern\" style=\"position:relative;\"><a href=\"#%E7%82%BA%E4%BD%95%E8%A6%81%E6%9C%89-pattern\" aria-label=\"為何要有 pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為何要有 Pattern</h2>\n<p>在開始介紹之前，我其實想討論一下為什麼需要有 Pattern，或是說，我們真的需要 Pattern 嗎？</p>\n<p>會有這樣的疑問其實是在過往經驗中，還蠻常發現採用 Design pattern 的程式碼如果需要修改時，對於不熟悉該 Pattern，或是原作者雖然採用某種 Pattern，但沒有堅持到底，在一些地方為了方便而改採取別種作法；更慘的情況是，在錯誤的情境下，採用了不適合的 pattern，這些情況都容易造成維護上的極大困擾。</p>\n<p>所謂的 Pattern，代表的應該是『被分門別類過，通過反覆使用與測試的考驗，且多數人知曉的程式設計經驗總結』，如果說，你今天採用的 Pattern 是團隊內的人都能接受並理解的，然後也都同意該情境下非常適合使用那種 Pattern，非他莫屬，直接打趴其他簡單做法的優缺點，那麼使用 Pattern 是絕對有好處的，除了測試的穩定性、程式碼的重用性外，在開發共用 component 或套件上，更有助於一般元件使用者，像是可以 export 出更加簡潔、方便的 API 等等。</p>\n<p>若不是上述情況，有道是『最好的 Pattern，就是沒有 Pattern』，讓邏輯單純簡單、不影響效能、方便接手的人進行維護，可能比起刻意套用 Pattern 來得有效益。所以在開發前，最好花點時間釐清自己的狀況。</p>\n<p>不過，你也得先了解有哪些 Patterns，才能在開發時有參考依據麻！所以不管你現在用不用得到，多學還是好的！</p>\n<h1 id=\"react-component-patterns\" style=\"position:relative;\"><a href=\"#react-component-patterns\" aria-label=\"react component patterns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component Patterns</h1>\n<p>主要想介紹的 React Component Pattern 有幾種：</p>\n<ul>\n<li>Compound comopnent</li>\n<li>Render props comopnent</li>\n<li>Prop Collections and Getters</li>\n<li>State Initializers</li>\n<li>State Reducer</li>\n<li>Control Props</li>\n<li>Provider</li>\n<li>Higher-order component</li>\n</ul>\n<p>但礙於篇幅關係，打算拆成幾篇文章來說明，今天是上篇，會介紹到 <code class=\"language-text\">Compound component</code>、<code class=\"language-text\">Render props component</code> 與 <code class=\"language-text\">Prop Collections and Getters</code>。</p>\n<h2 id=\"compound-component\" style=\"position:relative;\"><a href=\"#compound-component\" aria-label=\"compound component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compound component</h2>\n<p>假設今天你要撰寫一個 <code class=\"language-text\">Toggle</code> Component，並且分別在 state <code class=\"language-text\">On</code> 或 <code class=\"language-text\">Off</code> 時，能夠顯示不同的文字描述，你會怎麼做？</p>\n<p>一個很直覺的做法是，利用 props 來傳遞不同 state 時所需要顯示的文字（只是呈現 idea，並非有功能的 code）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> whenOn<span class=\"token punctuation\">,</span> whenOff <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on <span class=\"token operator\">?</span> whenOn <span class=\"token operator\">:</span> whenOff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle\n  whenOn<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is on\"</span>\n  whenOff<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is off\"</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>這樣做當然可行，但有幾個明顯的壞處：</p>\n<ul>\n<li>順序無法調動：沒辦法讓 <code class=\"language-text\">Toggle</code> component 的使用者自由得調整 <code class=\"language-text\">whenOn</code> 與 <code class=\"language-text\">whenOff</code> 的顯示順序，除非你另外加入其他 props 來控制。</li>\n<li>\n<p>利用 Props 來傳遞 UI 元件的話，容易造成使用者困擾，只能盡量透過 props 的命名來區別 UI 元件與其他狀態控制的 pros，舉例來說，如果今天 <code class=\"language-text\">Toggle</code> 還有一個 props 是來控制 toggle on 時的 callback：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">&lt;</span>Toggle\n    whenOn<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is on\"</span>\n    whenOff<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is off\"</span>｀\n    whenOnCallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yeee, I am on'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>看起來就不是一個非常好的 API 設計，對吧？</p>\n</li>\n</ul>\n<p>要解決這種情況，最適合的方式就是採用 <code class=\"language-text\">Compound component</code>！</p>\n<p>所謂的 <strong>Compound component</strong> 就是讓你的 UI 元件透過 <code class=\"language-text\">this.props.children</code> 的方式傳入給 <code class=\"language-text\">parent component</code>，利用 <code class=\"language-text\">React.Children.map()</code> 來 render 所有傳入的 <code class=\"language-text\">this.props.children</code>，並且透過 <code class=\"language-text\">React.cloneElement</code> 將 parent 的 <code class=\"language-text\">state</code> 傳入每個 children 的 <code class=\"language-text\">props</code>，讓 parent 與 children 之間會 <strong>隱含著狀態的共享</strong>，對於元件使用者來說，他只需要傳入想要的 <code class=\"language-text\">children component</code>，不用知道 parent 與 children 之間如何溝通，當然也能隨意調整順序，這樣的 API 設計，對於元件使用者就非常的友善。</p>\n<p>在這樣的原則下，不難發現，Compound component 必須要 <strong>同時結合使用 parent component 與 children component 才有意義</strong>。</p>\n<p>以剛剛的 <code class=\"language-text\">&lt;Toggle></code> 為例子，若改以 Compound component 的話：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">On</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Off</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">child</span> <span class=\"token operator\">=></span>\n        React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n          toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle\n  onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/6zz376vrzz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo link</a></p>\n<p>我們透過 <code class=\"language-text\">Toggle</code> Class 的 static properties 來定義 children component，這樣的好處是我們能夠從名稱上就保持 Parent 與 Children Component 之間的關聯性。</p>\n<p>透過 Compound Component，不僅能讓使用者自訂元件順序，又能將 UI component 與其他 callback props 做個清楚的切割。對於使用者來說，完全不需要管 <code class=\"language-text\">Toggle</code> 的 state 變化時，<code class=\"language-text\">Toggle.On</code> 要怎麼變動，他們之間的 state 與 props 都由 Parent component 處理。</p>\n<p>另外，在 Kent C. Dodds 的 workshop 中，有人提問為何不直接用 <code class=\"language-text\">this.props.children.map</code> 就好，而要用 <code class=\"language-text\">React.Children.map</code>？</p>\n<p>原因在於，在目前 React 的實作中，當你的 children 只有一個時，<code class=\"language-text\">this.props.children</code> 不會是一個 array，透過 <code class=\"language-text\">React.Children.map</code> 能寫得更簡潔，少些判斷。</p>\n<p>看到這邊，不知道有沒有想到，其實我們在撰寫表單時常用的 <code class=\"language-text\">&lt;select></code> 與 <code class=\"language-text\">&lt;option></code> 就是一個 Compound component 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>Opt 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>Opt 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"更有彈性的-compound-component\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%9C%89%E5%BD%88%E6%80%A7%E7%9A%84-compound-component\" aria-label=\"更有彈性的 compound component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更有彈性的 Compound Component</h2>\n<p>在上面的例子中，其實只要使用者更動其中一個 children，整個 Compound component 就會壞掉：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle\n  onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>因為 <code class=\"language-text\">React.Children.map</code> 只會 for-loop 到第一層的 children，也就是說，<code class=\"language-text\">React.cloneElement</code> 現在不會複製 <code class=\"language-text\">&lt;Toggle.Button></code> 而是複製 <code class=\"language-text\">&lt;div></code> 了。</p>\n<p>不過好在現在有了 React 16 的 Context API，要解決這個問題簡單了不少，主要就是將 <code class=\"language-text\">state</code> 的共享改由 <code class=\"language-text\">Context</code> 來完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">On</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> contextValue<span class=\"token punctuation\">.</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Off</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>contextValue<span class=\"token punctuation\">.</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contextValue<span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Toggle <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 由於不用傳遞 props 給 children，也就不用 React.Children.map 了，直接使用 this.props.children 即可</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n          toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/mzv766qqmx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<p>如此一來，使用者想要在我們的 Componet 裡面如何 wrap 各個 Child Component 都可以了！</p>\n<p><strong>Note:</strong> 在 workshop 中，Kent C. Dodds 有提到關於在 render 時， <code class=\"language-text\">Provider</code> 每次都會接收到新 object，造成多餘 re-render 的問題，因此可以做點小改良：\n將要傳給 <code class=\"language-text\">Provider</code> 的 value 改以 <code class=\"language-text\">this.state</code> 傳入，這樣每次在 render <code class=\"language-text\">Toggle</code> 時，才不會讓所有 <code class=\"language-text\">Toggle</code> 的 children component 也 re-render。\n只是要特別注意你原本要傳入 context 的 value 內，若有一些 function 如 <code class=\"language-text\">this.toggle</code>，記得確保你的 state 在宣告時能取得到。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstate <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 將 state 移至 toggle function 之下，以確保 refer 得到</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 由於不用傳遞 props 給 children，也就不用 React.Children.map 了，直接使用 this.props.children 即可</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider\n      value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>不過當你並不想把所有 <code class=\"language-text\">state</code> 都放入 <code class=\"language-text\">context</code> 時，可能就得想另一種方法了。</p>\n<h1 id=\"render-props-comopnent\" style=\"position:relative;\"><a href=\"#render-props-comopnent\" aria-label=\"render props comopnent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render props comopnent</h1>\n<p>Render props 相對於 Compound Component 來說應該是比較有名的 Pattern，而他的概念與實作方式也相對簡單，網路上也早有針對 Render props 的相關討論，像<a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>或<a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>。</p>\n<p>從名稱就可以猜出一二，所謂 Render props 就是將 render function 當作 props 傳入，讓原本的 render function 的控制權，從內部元件本身移轉至使用該元件的使用者身上，這種方式讓使用元件的使用者可以更方便的操作 <code class=\"language-text\">｀state</code>，而實作方式上比較常看到的有兩種：</p>\n<ul>\n<li>\n<p>將 render 當作 props 傳入：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>Toggle\n    onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    renderToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'The button is on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'The button is off'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>buttononClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'click on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'click off'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p>用 <code class=\"language-text\">this.props.children</code> 來呼叫 render props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n      state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>Toggle\n      onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'The button is on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'The button is off'</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'click on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'click off'</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n</li>\n</ul>\n<p><a href=\"https://codesandbox.io/embed/6zx6q92qw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<p>以這兩種方法來說，我的想法與 Kent C. Dodds 相同，以 <code class=\"language-text\">this.props.children</code> 來呼叫 render props 在使用上比較有優勢，除了可以明確知道 <code class=\"language-text\">Toggle</code> 元件的起始點外，還可以避免 當 renderProps 的內容很多時，容易 miss 掉一些 <code class=\"language-text\">Toggle</code> 的重要 props 的問題，例如下面的範例：</p>\n<iframe src=\"https://codesandbox.io/embed/jv9xjz5mr3?view=editor\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"prop-collections-and-getters\" style=\"position:relative;\"><a href=\"#prop-collections-and-getters\" aria-label=\"prop collections and getters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prop Collections and Getters</h1>\n<p>在 Kent C. Dodds 的 workshop 中所提到的 <code class=\"language-text\">Prop Collections</code> 與 <code class=\"language-text\">Prop Getters</code> 其實是要搭配運用的。</p>\n<p>我們將上面的例子稍微改變一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>pressed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>pressed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>現在我們有兩個 button 可以同時更改 Toggle 的狀態，而稍微注意一下可以發現兩個 button 其實接收的 props 有共通的部份，目前的寫法很多餘，也不好看。這時候我們就可以創造一個 <code class=\"language-text\">Prop collections</code> 來負責提供 Common 的 props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... Same as before</span>\n  <span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n      togglerProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// collection for common Props</span>\n        <span class=\"token string\">\"aria-pressed\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n        onClick<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而剛剛的範例就能修改為：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> togglerProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span>\n        aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>但這樣做你可能會發現一個缺點，就是當別人不小心 overwrite 你的 common props 時，你無能為力。這其實也是 <code class=\"language-text\">render props</code> 的一個小缺點，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button\n  <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span>\n  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'overwrite'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 蓋過我們原先在 onClick 的操作 (this.toggle)</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"這時候-code-classlanguage-textprop-getterscode-就可以出動了\" style=\"position:relative;\"><a href=\"#%E9%80%99%E6%99%82%E5%80%99-code-classlanguage-textprop-getterscode-%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%87%BA%E5%8B%95%E4%BA%86\" aria-label=\"這時候 code classlanguage textprop getterscode 就可以出動了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>這時候 <code class=\"language-text\">Prop Getters</code> 就可以出動了！</h2>\n<p>在原本的 Prop collections（<code class=\"language-text\">togglerProps</code>）中，我們改以呼叫一個 <code class=\"language-text\">Prop Getter</code> 的方式取得 common props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... Same as before</span>\n  <span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      onClick <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n      getTogglerProps<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getTogglerProps\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如此一來，使用者所提供的 <code class=\"language-text\">onClick</code> 就不會蓋過我們元件原始的 <code class=\"language-text\">onClick</code> 行為，也就是 <code class=\"language-text\">this.toggle</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button\n  <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">getTogglerProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'overwrite'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>如果想要 overwrite 更多的 method，在 <code class=\"language-text\">Prop Getter</code> 中也要做相對應的判斷與修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> otherMethod<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    onClick <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">otherMethod</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">originOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherMethod <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">otherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果嫌每次都要判斷傳入的 props 是否存在很麻煩，可以學 Kent C. Dodds 寫一個 handy funtion：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> fn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> otherMethod<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n  onClick<span class=\"token operator\">:</span> <span class=\"token function\">callAll</span><span class=\"token punctuation\">(</span>onClick<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/wywk4w1z6w\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>今天統整了三個 React component patterns: <code class=\"language-text\">Compound Component</code>、<code class=\"language-text\">Render Props</code> 與 <code class=\"language-text\">Prop Collections &amp; Getters</code>，讓我自己對這幾個 pattern 更熟悉了一些，不過還是要盡量運用在自己的專案當中，才能確切感受其好處，並更得心應手。也希望這些整理對來到這邊的讀者有所幫助，剩下的幾個 Pattern 會陸續補上，決不食言！</p>\n<p>最後，再次呼籲大家去看看 Kent C. Dodds 的影片 <a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns</a>，我比較推薦看 workshop 的版本，因為還可以聽到現場其他人對他的提問，以及他的回答，都很有幫助！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns workshop</a></li>\n<li><a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns V2 codesandbox</a></li>\n<li><a href=\"https://blog.kentcdodds.com/advanced-react-component-patterns-56af2b74bc5f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns Blog</a></li>\n<li><a href=\"https://juejin.im/post/59b78dfe5188257e7e115cae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">什麼是設計模式</a></li>\n<li><a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Answers to common questions about render props</a></li>\n<li><a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do more with less using render props</a></li>\n</ol>","id":"44db8e8e-c093-53e3-b722-992c39c2528d","fields":{"slug":"advanced-react-component-patterns-note"},"frontmatter":{"date":"2018-06-27T23:33:27.000Z","title":"進階 React Component Patterns 筆記（上）","tags":["react","es6","javascript","pattern"],"type":"tech","slug":"advanced-react-component-patterns-note"},"timeToRead":14},"type":"tech"}},"staticQueryHashes":["2123680655"]}