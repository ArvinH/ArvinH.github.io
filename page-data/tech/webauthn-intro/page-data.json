{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/webauthn-intro","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『既然很幸運不需要為生存掙扎, 那就該盡量過多種的生活比較不枉費自己掌握的資源。』</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年年初的時候，W3C 正式將 Web Authentication (WebAuthn) 列入<a href=\"https://www.w3.org/TR/webauthn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">正式標準</a>，開發者可以透過 API 啟動 <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO 2 驗證</a>，讓使用者透過行動裝置、指紋辨識或硬體安全金鑰來登入帳號，不需輸入密碼！</p>\n<p>雖然目前<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API#Browser_compatibility\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">支援度還不高</a>，但既然已成為標準，沒理由不來認識一下何謂 Web Authentication，以及我們可以如何使用。今天就一起來了解我們能如何使用 Web Authentication，增加網站安全性，並免除密碼帶給我們的諸多麻煩。</p>\n<h2 id=\"先回憶一下我們平常的註冊登入方式\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%9B%9E%E6%86%B6%E4%B8%80%E4%B8%8B%E6%88%91%E5%80%91%E5%B9%B3%E5%B8%B8%E7%9A%84%E8%A8%BB%E5%86%8A%E7%99%BB%E5%85%A5%E6%96%B9%E5%BC%8F\" aria-label=\"先回憶一下我們平常的註冊登入方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先回憶一下我們平常的註冊登入方式</h2>\n<p>不管是手機 application 或是網站，只要是需要登入操作的，勢必都會提供一個頁面讓你註冊帳號與密碼，接著你才能拿著這組帳密登入進行使用。這是我們習以為常的使用方式，但隨之而來的問題大家也是見怪不怪：</p>\n<ul>\n<li>每個網站都要想一組新密碼，若用太固定的 pattern 又容易被猜到。</li>\n<li>太複雜的密碼容易忘記。</li>\n<li>自己要防範釣魚網站。</li>\n<li>需要擔心該網站被入侵，密碼遭偷竊。</li>\n</ul>\n<p>而大約有<a href=\"https://duo.com/blog/state-of-the-auth-experiences-and-perceptions-of-multi-factor-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">三成左右</a>危機意識較高的使用者會啟用 2FA (2 factor authentication)，但這何嘗不是為使用上帶來更多不便？</p>\n<p>因此 WebAuthn 就是希望來解決這些問題，為我們使用者提供一個除了密碼登入以外的選項。</p>\n<h2 id=\"再來說明一下基本觀念\" style=\"position:relative;\"><a href=\"#%E5%86%8D%E4%BE%86%E8%AA%AA%E6%98%8E%E4%B8%80%E4%B8%8B%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5\" aria-label=\"再來說明一下基本觀念 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>再來說明一下基本觀念</h2>\n<p>聽到所謂<strong>免密碼登入</strong>，應該很容易聯想到我們透過 SSH 連進遠端 Server 時，大多也會設定免密碼登入，透過的是 <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Public-key cryptography</a> 或又稱 <a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asymmetric cryptography</a>，也就是利用產生一組非對稱的加密金鑰：<code class=\"language-text\">private key</code> 與 <code class=\"language-text\">public key</code>，又可稱作 <code class=\"language-text\">credential</code>，讓使用者自己保管 private key，而服務端利用 public key 來驗證使用者的身份。</p>\n<p>WebAuthn 也是利用相同的加密原理來達成免密碼的 Authentication。</p>\n<p><img src=\"/image/oldway-vs-webauthn.png\" alt=\"How we create account\"></p>\n<h2 id=\"進入-api-細節前我們科普一下web-authentication-與-fido\" style=\"position:relative;\"><a href=\"#%E9%80%B2%E5%85%A5-api-%E7%B4%B0%E7%AF%80%E5%89%8D%E6%88%91%E5%80%91%E7%A7%91%E6%99%AE%E4%B8%80%E4%B8%8Bweb-authentication-%E8%88%87-fido\" aria-label=\"進入 api 細節前我們科普一下web authentication 與 fido permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>進入 API 細節前，我們科普一下，Web Authentication 與 FIDO</h2>\n<p>其實很多人會誤解，以為 WebAuthn 指的就是上述利用非對稱加密來達到 authentication 的技術，但實際上，真正規範這項技術的是 <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2</a>，FIDO2 是 FIDO Alliance 的最新規範，裡面包含了一系列技術，讓使用者能透過一些普通的設備，輕易的與線上服務進行 authentication，無論是 Mobile 或是 Desktop。</p>\n<p>FIDO2 規範包含了 WebAuthn 與 Client-to-Authenticator Protocol (CTAP)</p>\n<p><img src=\"/image/FIDO2-Graphic-v3.png\" alt=\"FIDO2\">\nref: <a href=\"https://fidoalliance.org/fido2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fidoalliance.org</a></p>\n<p>也就是說，WebAuthn 其實是 FIDO2 的一部分，用來規範標準的 Web API 讓瀏覽器實作。</p>\n<p>目前支援的瀏覽器有 Chrome, Firefox, Edge 與 Safari preview 版。另外也可以再多參考 <a href=\"https://duo.com/blog/developments-to-webauthn-and-the-fido2-framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duo 的文章</a>。</p>\n<p>我們稍微解釋一下上圖：</p>\n<p>當使用者像應用程序要求註冊或登入時，使用 FIDO2 的服務端 (RP App Server) 會告知瀏覽器說，我們現在要用 FIDO Authentication，而瀏覽器則會使用 WebAuthn API，透過 CTAP protocol 來與 Authenticator 溝通，存取到需要的資訊並產生 public key 傳回給服務端。</p>\n<p>這邊出現兩個新名詞：RP app server 與 Authenticator。</p>\n<p>所謂的 RP (Relying Party)，描寫的就是負責註冊與認證使用者的組織或是服務，基本上我覺得就是你的伺服器。</p>\n<p>而 Authenticator 就是負責產生 credential 的軟硬體，例如：TouchID, YubiKey 等等。TouchID 這種存在於設備內部的，屬於 \"platform\" type，而 Yubikey 這類外部硬體設施則屬於 \"cross-platform\" type。</p>\n<h2 id=\"web-authentication-的主要特性\" style=\"position:relative;\"><a href=\"#web-authentication-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\" aria-label=\"web authentication 的主要特性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication 的主要特性：</h2>\n<ul>\n<li>強健的安全體系：Authentication 有安全性硬體作為支援，來儲存私鑰與進行 Web Authentication 需要的加密運算。</li>\n<li>效用受到作用域規範：產生的 Credential keypair 是綁定在 origin 上的，意思是說，註冊在 \"techbridge.com\" 的 keypair 是不能用在 \"bad-techbridge.com\" 的網域上頭，消除了釣魚攻擊的危險。</li>\n<li>受認證的（Attested）：上面提到負責產生 credential 的 Authenticators 可以提供 certificate 來幫助服務端驗證拿到的 public key 是由可信任的 authenticators 發出，而非有害的來源。</li>\n</ul>\n<h2 id=\"web-authentication-api---registering\" style=\"position:relative;\"><a href=\"#web-authentication-api---registering\" aria-label=\"web authentication api   registering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication API - Registering</h2>\n<p>接著我們可以開始來看看如何使用 Web Authentication API 來註冊使用者 （參考至 Duo 的 <a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.guide</a>：</p>\n<p><code class=\"language-text\">navigator.credentials.create()</code></p>\n<p>首先，Server 利用 <code class=\"language-text\">navigator.credentials.create()</code> 來產生 client 的 credential</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> credential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialCreationOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">publicKeyCredentialCreationOptions</code> 中有一堆 required 與 optional 的欄位需要填寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// should generate from server</span>\n<span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userID <span class=\"token operator\">=</span> <span class=\"token string\">'Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw='</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> Uint8Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>userID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">c</span><span class=\"token operator\">=></span>c<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> publicKeyCredentialCreationOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    challenge<span class=\"token punctuation\">,</span>\n    rp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tech Bridge\"</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token operator\">:</span> <span class=\"token string\">\"techbridge.inc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"arvin@techbridge.cc\"</span><span class=\"token punctuation\">,</span>\n        displayName<span class=\"token operator\">:</span> <span class=\"token string\">\"Arvin\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pubKeyCredParams<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>alg<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"public-key\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    authenticatorSelection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        authenticatorAttachment<span class=\"token operator\">:</span> <span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n    attestation<span class=\"token operator\">:</span> <span class=\"token string\">\"direct\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">challenge</code>：challenge 是由 server 產生的一個 buffer，裡面含有一串隨機加密過的 bytes，用來防止 <a href=\"https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"replay attacks\"</a>。這邊單純 demo，用 <code class=\"language-text\">Unit8Array</code> 與 <code class=\"language-text\">window.crypto.getRandomValues</code> 做個示範。</p>\n<p><code class=\"language-text\">rp</code>：先前解釋過，代表 \"relying party\"，指的就是註冊與認證使用者的網站。其中，<code class=\"language-text\">id</code> 一定要是目前網站的 domain 的 subset，像是如果是從 <code class=\"language-text\">techbridge.cc</code> 觸發 WebAuthn 認證，那這邊的 id 就得填寫 <code class=\"language-text\">techbridge.cc</code>。</p>\n<p><code class=\"language-text\">user</code>：就是目前想要註冊的使用者的資訊，這邊的 <code class=\"language-text\">id</code> 很重要，authenticator 會用這個 id 來與 credential 做連結，這樣之後才能透過一樣的 <code class=\"language-text\">id</code> 與一樣的 autenticator 去認證你是同個 user。而這資訊可能會被存在 authenticator 中，依據不同載具與實作會有不同，但是因為有這可能性存在，所以一般不建議 id 內藏有可以認出你本身的相關個人資訊，像是生日等等的。</p>\n<p><code class=\"language-text\">pubKeyCredParams</code>：這個 array 用來描述 Server 支援哪些 types 的 public key (signing algorithms) 。目前 FIDO2 servers 授權支援 RS1、RS256 與 ES256。 <code class=\"language-text\">alg</code> 的數字對應可以從 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">COSE</a> 去找。</p>\n<p><code class=\"language-text\">authenticatorSelection (optional)</code>：可以用來限制 Relying parties 支援的 authenticators 種類，像這邊我指定 platform，就是 Touch ID 之類內建的 authenticators。</p>\n<p><code class=\"language-text\">timeout (optional)</code>：以 milliseconds 為單位，表示說如果使用者在這段 timeout 時間內沒有回應 prompt 的話，就會回傳認證失敗。</p>\n<p><code class=\"language-text\">attestation (optional)</code>：attestation data 是從 authenticator 回傳的內容，server 可以用這個選項來決定要跟 authenticators 拿多少資訊，有三種選項：<em>none</em>、<em>indirect</em> 與 <em>direct</em>。<em>none</em> 指的是 server 不在意 attestation 資料；indirect 表示願意只拿匿名的 attestation 資料；而 direct 代表要求 authenticator 回傳所有 attestation data。</p>\n<h2 id=\"看了一些程式碼來嘗試一下吧\" style=\"position:relative;\"><a href=\"#%E7%9C%8B%E4%BA%86%E4%B8%80%E4%BA%9B%E7%A8%8B%E5%BC%8F%E7%A2%BC%E4%BE%86%E5%98%97%E8%A9%A6%E4%B8%80%E4%B8%8B%E5%90%A7\" aria-label=\"看了一些程式碼來嘗試一下吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>看了一些程式碼，來嘗試一下吧</h2>\n<p>現在打開瀏覽器的 console，把上面那段 code 複製上去，然後你會發現什麼事都沒發生？！</p>\n<p>因為上面那段 code 當中，我們在 <code class=\"language-text\">rp</code> 中的 id 有指定 <code class=\"language-text\">techbridge.inc</code>，而這並非你目前所在的 domain，因此無法啟用 WebAuthn。</p>\n<p>修改一下，將 <code class=\"language-text\">rp</code> 中的 <code class=\"language-text\">id</code> 移除，再試一次：</p>\n<p><img src=\"/image/webauthn-makecredential.gif\" alt=\"demo - make credentail\"></p>\n<p>就可以 credentials 了！</p>\n<p>另外，因為我們在 <code class=\"language-text\">authenticatorSelection.authenticatorAttachment</code> 中有指定 <code class=\"language-text\">platform</code>，所以當我們一請求 credential 後，Chrome 會直接跳出 prompt 要求使用 TouchID（上面出現 codepen.io 是因為我在 codepen.io 的頁面 console 測試：</p>\n<p><img src=\"/image/touchid-authenticator.png\" alt=\"TouchID authenticator\"></p>\n<p>但如果今天你沒有指定，或是指定為 <code class=\"language-text\">cross-platform</code>，則會顯示如下兩種 prompt：</p>\n<p><strong>cross-platform</strong>：</p>\n<p>會要求你插入實體 usb key。</p>\n<p><img src=\"/image/webauthn-cross-platform.png\" alt=\"cross platform\"></p>\n<p>不指定：</p>\n<p>你有兩種選項可以選擇，使用 TouchID 或是實體 usb key。</p>\n<p><img src=\"/image/webauthn-both.png\" alt=\"two options\"></p>\n<h2 id=\"parsing-與-validating-註冊資料\" style=\"position:relative;\"><a href=\"#parsing-%E8%88%87-validating-%E8%A8%BB%E5%86%8A%E8%B3%87%E6%96%99\" aria-label=\"parsing 與 validating 註冊資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing 與 Validating 註冊資料</h2>\n<p>從剛剛的範例可以看到，呼叫 <code class=\"language-text\">navigator.credentials.create</code> 後會回傳一個 credential 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPublicKeyCredential <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...'</span><span class=\"token punctuation\">,</span>\n    rawId<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> AuthenticatorAttestationResponse <span class=\"token punctuation\">{</span>\n        clientDataJSON<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        attestationObject<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">306</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中：</p>\n<p><code class=\"language-text\">id</code>：代表產生的 credential，在對 user 進行 authentication 時，用此 id 來 identify user credential，是 base64-encoded string。</p>\n<p><code class=\"language-text\">rawId</code>：同上，只是是 binary form。</p>\n<p><code class=\"language-text\">response.clientDataJSON</code>：是瀏覽器產生的一組資料，包含 origin、challenge 等等，這個資料重要在於可以用來防止 phishing attemp。此外，內容是由 authenticator 加密過的。</p>\n<p><code class=\"language-text\">response.attestationObject</code>：包含了 credential public key、optional attestation certificate 與其他 metadata，用 <a href=\"https://cbor.io/impls.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CBOR</a> encoded 過的 binary data。</p>\n<p>拿到 PublicKeyCredential 後，就可以送到 Server 端去進行驗證與後續動作。</p>\n<p>WebAuthn 規範中有描述了一系列<a href=\"https://w3c.github.io/webauthn/#registering-a-new-credential\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">驗證 registration data 的程序</a>，而實作部分則與你用什麼語言有所不同，可以參考 Duo Labs 的 <a href=\"https://github.com/duo-labs/webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go</a> 與 <a href=\"https://github.com/duo-labs/py_webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a> 版本。</p>\n<p>這邊以 JavaScript 為例說明：</p>\n<p>首先，Server 端需要先解析 clientDataJSON：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// decode the clientDataJSON into a utf-8 string</span>\n<span class=\"token keyword\">const</span> utf8Decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decodedClientData <span class=\"token operator\">=</span> utf8Decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>\n    credential<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>clientDataJSON<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// parse the string as an object</span>\n<span class=\"token keyword\">const</span> clientDataObj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>decodedClientData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">clientDataObj</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    challenge<span class=\"token operator\">:</span> <span class=\"token string\">\"ZVTQWf9y7JkEjKFH-iWiKL4FTtTrQJwhYt2kiJQlcM8\"</span>\n    origin<span class=\"token operator\">:</span> <span class=\"token string\">\"https://codepen.io\"</span> <span class=\"token comment\">// again, 因為我在 codepen.io 的頁面 console 測試，所以 origin 才會是這個</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"webauthn.create\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊我們拿出 challenge、origin 與 type 來驗證，challenge 應該要與當初 Server 產生的一致、origin 要正確，且 type 要確定為 create，才能代表是在註冊使用者。如此來避免釣魚與 replay attacks。</p>\n<p>接著，處理 attestationObject，由於是由 CBOR encode，所以需要額外找 lib 來 decode：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 需要找個 CBOR lib 來 decode</span>\n<span class=\"token keyword\">const</span> decodedAttestationObj <span class=\"token operator\">=</span> <span class=\"token constant\">CBOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>credential<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>attestationObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decodedAttestationObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n    authData<span class=\"token operator\">:</span> <span class=\"token function\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fmt<span class=\"token operator\">:</span> <span class=\"token string\">\"fido-u2f\"</span><span class=\"token punctuation\">,</span>\n    attStmt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        sig<span class=\"token operator\">:</span> <span class=\"token function\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        x5c<span class=\"token operator\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解碼出來後的 <code class=\"language-text\">attestationObject</code> 含有幾項資訊：</p>\n<ul>\n<li>authData：authData 這個 byte array 包含著所有 registration event 的 metadata，以及 public key。</li>\n<li>fmt：這個是包含著 attestation 的 format，如果你在 create credentials 時有要求 Authenticators 提供 attestation data，那 server 可以從這個欄位知道該如何 parse 與 validate attestation data。</li>\n<li>attStmt：這就是要求來的 attestation data，根據 fmt 的不同會有不同的結構，以這邊範例為例，我們拿到的是一個 signature 與 x5c certificate，servers 可以用這資料來驗證 publickey 是不是來自預期的 authenticator，或是根據 authenticator 的資訊而 reject authenticate (像是覺得不能信任該 certifacate，等等)</li>\n</ul>\n<p>最後可以從 authData 中取得更多資料：credentialId、publicKeyBytes、publicKeyObject 等等：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>authData<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> decodedAttestationObject<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// get the credential ID</span>\n<span class=\"token keyword\">const</span> credentialId <span class=\"token operator\">=</span> authData<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span> credentialIdLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// get the public key object</span>\n<span class=\"token keyword\">const</span> publicKeyBytes <span class=\"token operator\">=</span> authData<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span> <span class=\"token operator\">+</span> credentialIdLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the publicKeyBytes are encoded again as CBOR</span>\n<span class=\"token keyword\">const</span> publicKeyObject <span class=\"token operator\">=</span> <span class=\"token constant\">CBOR</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>publicKeyBytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>整個 Validation process 完成後，Server 就能將 publicKeyBytes 與 credentialId 存進資料庫，與使用者關聯起來。</p>\n<p>到這邊為止，我們走完了 <code class=\"language-text\">Registering</code> 的流程。而剛剛都是直接在 console 貼入程式碼，如果想看稍微”真實“一點的範例，可以到 <a href=\"https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/makeCredExample.html</a> 這個網址玩玩看，點選 button 註冊的流程。</p>\n<p><img src=\"/image/more-real-demo-1.png\" alt=\"more real demo\"></p>\n<p>接著，再努力一下，看看 <code class=\"language-text\">Authenticating</code>，也就是登入時要走的步驟吧！</p>\n<h2 id=\"web-authentication-api---authenticating\" style=\"position:relative;\"><a href=\"#web-authentication-api---authenticating\" aria-label=\"web authentication api   authenticating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Authentication API - Authenticating</h2>\n<p>Authenticated 的過程中，使用者會用其持有的 private key 簽上一個 signature 到 assertion 上頭，並傳給 server，server 則利用 public key 來驗證該 signature。</p>\n<p><code class=\"language-text\">navigator.credentials.get()</code></p>\n<p>Authentication 的過程在於使用者要證明他們擁有註冊時所提交的 key pair 中的 private key。證明方法為利用 <code class=\"language-text\">navigator.credentials.get()</code> 取得註冊時的 credential，並附上 signature。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> credential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialRequestOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> publicKeyCredentialRequestOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    challenge<span class=\"token punctuation\">,</span>\n    allowCredentials<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> credentialId<span class=\"token punctuation\">,</span> <span class=\"token comment\">// from registration</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span><span class=\"token punctuation\">,</span>\n        transports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'usb'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ble'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nfc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">60000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> assertion <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    publicKey<span class=\"token operator\">:</span> publicKeyCredentialRequestOptions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>跟註冊時比較不同的是 <code class=\"language-text\">allowCredentials</code>，這欄位是 Servers 端想要瀏覽器提供的 credentials 資訊，用來認證使用者，其中 id 為註冊時獲取的 credentialId。此外也能指定要用哪種方式傳輸 credentials (usb、bluetooth 或 NFC)。你可以填入多個 credentialId，authenticator 會找出他認識的來使用。</p>\n<p><code class=\"language-text\">navigator.credentials.get</code> 取得的 <code class=\"language-text\">assertion</code> 也是一個 <code class=\"language-text\">PublicKeyCredential</code> object，跟註冊時的差別在於，這次我們拿到的多了 signature，少了 public key。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPublicKeyCredential <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'ADSUllKQmbqdGtpu4sjseh4cg2TxSvrbcHDTBsv4NSSX9...'</span><span class=\"token punctuation\">,</span>\n    rawId<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    response<span class=\"token operator\">:</span> AuthenticatorAssertionResponse <span class=\"token punctuation\">{</span>\n        authenticatorData<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        clientDataJSON<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">118</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        signature<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        userHandle<span class=\"token operator\">:</span> <span class=\"token function\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'public-key'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本結構都差不多，多出來的 <code class=\"language-text\">signature</code> 是由 private key 與此 credential 所產生，在 server 端可以用 public key 來驗證此 signature。</p>\n<p><code class=\"language-text\">userHandle</code> 則是 authenticator 提供的使用者 id，也是註冊時使用的那組。在 Server 端可以用來關聯使用者。</p>\n<h2 id=\"parsing-與-validating-登入資料\" style=\"position:relative;\"><a href=\"#parsing-%E8%88%87-validating-%E7%99%BB%E5%85%A5%E8%B3%87%E6%96%99\" aria-label=\"parsing 與 validating 登入資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parsing 與 Validating 登入資料</h2>\n<p>拿到 assertion 後，可以送往 server 進行驗證，server 會用註冊時的 public key 來驗證 signature。</p>\n<p>一樣，Server 端實作有各種語言版本：<a href=\"https://github.com/duo-labs/webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Go</a> 與 <a href=\"https://github.com/duo-labs/py_webauthn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a>，等等。</p>\n<p>這邊簡單舉例：</p>\n<p>首先，從資料庫中取得 credential。接著利用 public key 和 client 傳來的 signature 與 authenticator data 和 SHA-256 hash 過的 cliendDataJSON 做驗證。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> storedCredential <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getCredentialFromDatabase</span><span class=\"token punctuation\">(</span>userHandle<span class=\"token punctuation\">,</span> credentialId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> signedData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>authenticatorDataBytes <span class=\"token operator\">+</span> hashedClientDataJSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> signatureIsValid <span class=\"token operator\">=</span> storedCredential<span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> signedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signatureIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Nice! User is authenticated!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Oops, verification failed.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就把一段無密碼登入的註冊與登入流程都走完了！一樣，可以到 <a href=\"https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://herrjemand.github.io/FIDO2WebAuthnSeries/WebAuthnIntro/PasswordlessExample.html</a> 來玩玩看實際一點的範例。</p>\n<p><img src=\"/image/more-real-demo-2.gif\" alt=\"more real demo\"></p>\n<h2 id=\"結論與更多資源\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96%E8%88%87%E6%9B%B4%E5%A4%9A%E8%B3%87%E6%BA%90\" aria-label=\"結論與更多資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論與更多資源</h2>\n<p>今天花了點時間把 Web Authentication 的概念與大致的實作方式瞭解了一番，雖然才剛成為標準，離全部瀏覽器都支援還需要一點時間，但最新版的瀏覽器幾乎都已支援（至少桌機版），想必不久的未來，passwordless 的登入會是一種趨勢。</p>\n<p>這邊再多提供幾個網站資源供大家參考，裡面有更為豐富的範例程式，以及詳細的 API 與情境解說：</p>\n<ol>\n<li><a href=\"https://duo.com/blog/tags/web-authentication\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duo blog</a> - Duo 是 Cisco 旗下的公司，主要發展與 Authentication 與 security 相關的產品，也因此針對 web authentication 有不少的文章教學與介紹。</li>\n<li><a href=\"https://github.com/herrjemand/FIDO2WebAuthnSeries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2WebAuthnSeries</a> - 這是我在找資料過程中發現的範例 github，裡面有多種情境的 source code 與 demo，推薦大家去玩玩看，看看程式碼，想必會更加了解。作者也有在 Medium 上寫了一篇<a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">長文</a>介紹，更詳細的說明各種情境的 Web authentication 應用會是如何的流程，而我們的程式碼又該如何修改。如果覺得這篇文章內的範例與說明不夠清楚，可以到他的 medium 看看。</li>\n</ol>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://webauthn.guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.guide</a></li>\n<li><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to WebAuthn API</a></li>\n<li><a href=\"https://github.com/herrjemand/FIDO2WebAuthnSeries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FIDO2WebAuthnSeries</a></li>\n<li><a href=\"https://webauthn.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webauthn.io</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Authentication API - MDN</a></li>\n</ol>","fields":{"slug":"webauthn-intro"},"frontmatter":{"title":"一起來了解 Web Authentication","date":"08-17-2019","tags":["web","authentication","security"]},"timeToRead":15}},"pageContext":{"slug":"webauthn-intro","prev":{"excerpt":"好歌分享：Love is the answer","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/Ugm_E7vERYs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Love is the answer</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/Ugm_E7vERYs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>近年 VR/AR 一直不斷出現在大家的視線內，雖然一直沒有什麼殺手級的應用出現，但這阻止不了開發者們的雄心壯志，尤其是 JavaScript 社群，畢竟 Jeff Atwood 說過：</p>\n<blockquote>\n<p>\"Any application that can be written in JavaScript, will eventually be written in JavaScript.\" — Jeff Atwood, Author, Entrepreneur, Cofounder of StackOverflow</p>\n</blockquote>\n<p>隨著 a-frame 的出現，WebVR 成為現實，並且很容易開發；Web AR 部分進展則相對緩慢ㄧ些，瀏覽器原生支援的 API 還一直處於不穩定的開發階段，但即便如此，我們還是可以在特定版本的瀏覽器上使用，此外，也有像是 AR.js 這樣融合 artoolkit、three.js、ＷebGL 和 WebRTC 等技術的工具可以使用。</p>\n<p>今天就來稍稍研究一下，看看目前的技術能如何開發 Web AR！</p>\n<p>照慣例，開始前先看點 demo，把 Pokemon 帶到你家客應：</p>\n<p><img src=\"/image/arjs-demo.jpg\" alt=\"arjs demo\"></p>\n<!--\n1. 簡介\n2. 介紹目前有的 WebAR 實作 lib 或 api\n2-1. 說明 WebXR Viewer on iOS 與 Google chrome 可以跑的 api\n3. 分別以 AR.js 與 Web 純 API 介紹\n-->\n<h2 id=\"目前的工具有哪些\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B\" aria-label=\"目前的工具有哪些 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目前的工具有哪些</h2>\n<p><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a> 這網站上列出了一些目前有的 library，以及目前支援 WebAR 的瀏覽器：</p>\n<p><img src=\"/image/webar-libs.png\" alt=\"常見 lib\"></p>\n<p>其中 <a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a> 使用了 A-Frame (基於 Three.js) 以及 JSARTookit5（JavaScript 移植版的 <a href=\"https://github.com/artoolkit/artoolkit5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ARToolKit</a>），而這兩個技術主要皆是利用 WebGL 為主，因此大多現行的瀏覽器都能直接支援，不需要特殊的 API。</p>\n<p>這大概也是為何 AR.js 能在 GitHub 上擁有一萬多顆星星，遠勝過上列其他套件的原因。再加上作者的實驗證明 AR.js 即便在<a href=\"https://github.com/jeromeetienne/AR.js#performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">兩年的老舊手機上也能運行順暢，擁有良好的 Performance</a>。</p>\n<p>但 AR.js 也並非沒有缺點，由於是基於 ARToolKit，因此只能夠支援 Marker-based 的 AR 效果，也就是像最前面的 Demo 圖片一樣，是需要在鏡頭內放置一個設定好的 Marker，讓其辨識，取得環境的一些 Sensor 資訊，包含鏡頭的深淺遠近等等，才能讓 AR 物件渲染在視窗中。</p>\n<p>即便如此，AR.js 其簡潔、便利的使用方式（<a href=\"https://github.com/jeromeetienne/AR.js#folders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">有 a-frame 與 threejs 的 extension</a>），能讓你用<a href=\"https://medium.com/arjs/augmented-reality-in-10-lines-of-html-4e193ea9fdbf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">短短 10 行程式碼就產生出一個 WebAR 效果的網頁</a>，還是非常好用的。</p>\n<p><img src=\"/image/webar-browsers.png\" alt=\"支援的 browsers\"></p>\n<p>如果你是使用 AR.js 的話，基本上現行有支援 WebGL 的手機瀏覽器就都能夠運行，不需要額外的 Polyfill 等等。</p>\n<p>但如果你想要使用非 Marker-based 效果的 AR 應用，你就得研究 <a href=\"https://immersive-web.github.io/webxr/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">WebXR Device API</code></a>，其前身為 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAR API</a>。</p>\n<h2 id=\"webxr-device-api\" style=\"position:relative;\"><a href=\"#webxr-device-api\" aria-label=\"webxr device api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebXR Device API</h2>\n<p>WebXR Device API 現在還在不斷更新中，不是個穩定的 API。</p>\n<p>運用到 WebXR Device API 的有 Google 使用的 <a href=\"https://github.com/google-ar/three.ar.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.ar.js</a> 與整合 A-Frame 的 <a href=\"https://github.com/chenzlabs/aframe-ar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-ar.js</a>，以及 Mozilla 主導的 <a href=\"https://github.com/mozilla/aframe-xr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">three.xr.js</a> 和 <a href=\"https://github.com/mozilla/three.xr.js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aframe-xr.js</a>。</p>\n<p>Google 提供了 <a href=\"https://github.com/google-ar/WebARonARCore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARCore</a> 和 <a href=\"https://github.com/google-ar/WebARonARKit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebARonARKit</a> 兩種分別在 Android 與 iOS 平台上運行的特殊 browsers，讓你能在上面跑 WebXR Device 相關的 API：而 Mozilla 在 iOS 上也推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 來對應，三者皆是用到手機平台原生的 ARKit。</p>\n<p>如同剛剛所說，WebXR Device API 還很不穩定，而且 Google 與 Mozilla 各自在 Android 與 iOS 上有不同的實作，<a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例</a>只能運行在 version 為 70 - 72 的 Chrome canary 上，而 Mozilla 雖然有推出 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a>，但上面的<a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例實作</a>也<strong>只能</strong>運行在 <a href=\"https://labs.mozilla.org/projects/webxr-viewer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla WebXR Viewer</a> 上頭...</p>\n<p>不過去看一下雙方的範例程式碼後，會發現其實用法蠻雷同的，大多都有下面這些流程（以 Google 的程式碼來當範例）：</p>\n<p>判斷是否支援 WebXR Device API，並初始設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n   * Fetches the XRDevice, if available.\n   */</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `navigator.xr` 是 WebXR Device API 的入口，有必要確認其存在</span>\n    <span class=\"token comment\">// 而 `XRSession` 中的 `requestHitTest` 則是要 enable #webxr-hit-test flag</span>\n    <span class=\"token comment\">// 確認這兩個 API 存在，確保能夠製造出點擊畫面</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>xr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">XRSession</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>requestHitTest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>xr<span class=\"token punctuation\">.</span><span class=\"token function\">requestDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 成功取得 XRDevice 物件後，需要 bind 一個 user gesture 的 event，然後呼叫</span>\n    <span class=\"token comment\">// `device.requestSession()`，這是規範在 spec  中的</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#enter-ar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEnterAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>取得 <code class=\"language-text\">XRDevice</code> 後，利用 <code class=\"language-text\">device.requestSession()</code> 製造出運行 XR 的環境：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">async</span> <span class=\"token function\">onEnterAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> outputCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> outputCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xrpresent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// `device.requestSession()` 一定要是由 user 觸發，像是 click handler 內</span>\n      <span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">requestSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        outputContext<span class=\"token operator\">:</span> ctx<span class=\"token punctuation\">,</span>\n        environmentIntegration<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>outputCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 成功創建 Session 後就能開始運算 AR 了</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Error handling，通知使用者的瀏覽器並不支援</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onNoXRDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>當 XRSession 成功創建後，接著就是 set up three.js，撰寫 renderer，設定 scene、camera，並 attach 上 XRWebGLLayer，然後啟動 render loop：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">onSessionStarted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">session</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">// 利用 Three.js 繪製 3D 物件，因此要借用 THREE.WebGLRenderer 來當作 XRSession 的 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    alpha<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    preserveDrawingBuffer<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n  <span class=\"token comment\">//  設定 render layer</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XRWebGLLayer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> framebuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>baseLayer<span class=\"token punctuation\">.</span>framebuffer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setFramebuffer</span><span class=\"token punctuation\">(</span>framebuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 scene</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> DemoUtils<span class=\"token punctuation\">.</span><span class=\"token function\">createLitScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 設定 camera</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略, 更多的設定</span>\n  <span class=\"token comment\">// 在 `requestAnimationFrame` 中啟動 render loop</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onXRFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>省略了很多細節，但大致的步驟就是這樣，<a href=\"https://github.com/googlecodelabs/ar-with-webxr/archive/master.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳細程式碼在此下載</a></p>\n<p>對 WebXR Device API 比較有興趣的讀者除了 <a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google code lab 上的範例程式</a>與 Mozilla 的 <a href=\"https://github.com/MozillaReality/webxr-ios-js/tree/master/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webxr-ios-js 範例</a> 外，也可以到 <a href=\"https://github.com/immersive-web/webxr/blob/master/explainer.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">immersive-web/webxr</a> 看看該 WebXR Device API 的 Specs detail 與解釋，他們也有提供 <a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sample Page</a> 可作參考。</p>\n<h2 id=\"arjs\" style=\"position:relative;\"><a href=\"#arjs\" aria-label=\"arjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AR.js</h2>\n<p>由於手邊沒有適合的 Android 手機，不能嘗試利用 WebXR Device API，所以今天就先來看看 AR.js 有多簡單。</p>\n<p>你需要的就只有：</p>\n<ol>\n<li>準備好 Marker</li>\n<li>準備好 3D models</li>\n<li>撰寫十行簡單的程式碼</li>\n<li>host 你的 WebAR webapp</li>\n</ol>\n<p>AR.js 有提供一個 Marker generator - <a href=\"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js Marker Training</a></p>\n<p><img src=\"/image/arjs-maker-traning.png\" alt=\"ARjs marker training\"></p>\n<p>你可以上傳想要的圖片放到 Marker 中，例如一個記載你的 WebVR webapp 網址的 QR code 就很適合。像<a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇文章</a>作者利用 AR.js 結合實體卡片送給他女友一個小驚喜。</p>\n<p>我建議把你做好的 Marker 下載下來，否則當你手機對著電腦中的 marker 時，3D Model 方位視角會跟你是垂直的，不是很好看。</p>\n<p>接著可以到 <a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a> 或是 <a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a> 下載 <code class=\"language-text\">gltf</code> 的 3D 模型。(搜尋想要的 Model 時記得勾選 <code class=\"language-text\">downloadable</code>，比較不會選到需要付費才能下載的，當然你要付費也很棒！)</p>\n<p>以我最前面的例子來說，我在 <a href=\"https://sketchfab.com/3d-models/squirtle-18caed58804943d7a839dcbd44d21b80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab 中載了一個傑尼龜的模型</a></p>\n<p><img src=\"/image/sketchfb-usage.png\" alt=\"sketchfab\"></p>\n<p>接著用 AR.js 對應 AFrame 的 extension 撰寫簡單的 WebVR app:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.9.2/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.rawgit.com/jeromeetienne/AR.js/1.7.5/aframe/build/aframe-ar.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span><span class=\"token value css language-css\"><span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">'</span></span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">embedded</span> <span class=\"token attr-name\">arjs</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>sourceType: webcam; debugUIEnabled: false;<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-marker</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>pattern<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>assets/pattern-marker.patt<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-entity</span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0 -6 -12<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-20 0 0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">gltf-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url(assets/scene.gltf)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-entity</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-marker</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 <code class=\"language-text\">&lt;a-scene /></code> 中，我們指定一個 attribute <code class=\"language-text\">arjs</code>，並且設定 <code class=\"language-text\">sourceType</code> 為 <code class=\"language-text\">webcam</code>，相關 attribute 設定其實來自 <code class=\"language-text\">artoolkit system</code>，有需要可以到 <a href=\"https://github.com/jeromeetienne/AR.js/tree/master/aframe#artoolkit-system\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 的列表</a>查看。</p>\n<p>接著我們透過 <code class=\"language-text\">&lt;a-marker /></code> 放入我們製作的 marker，副檔名為 <code class=\"language-text\">.patt</code>，這邊的 type attribute，如果你是單純用 barcode 的話，可以設為 <code class=\"language-text\">type=barcode</code>，但若是客製化的 marker，就要設為 <code class=\"language-text\">type=pattern</code>。</p>\n<p>最後在 <code class=\"language-text\">&lt;a-entity /></code> 上頭設定我們想要呈現的 AR 3D Model，<code class=\"language-text\">gltf-model</code> attribute 設定模型的路徑，再透過 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 來調整你的模型出現在鏡頭的位置。</p>\n<p>這邊特別要注意一下，因為你載下來的 3D Model，都有自己的位置屬性，所以你可能會需要自己多加調整出適合的 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">rotation</code> 值，否則你的 3D Model 很可能一直成像在你手機的鏡頭外而看不到，然後你還以為是程式出問題...</p>\n<p>當手機鏡頭偵測到 <code class=\"language-text\">&lt;a-marker /></code> 內對應的 marker 時，就會在鏡頭內渲染出 <code class=\"language-text\">&lt;a-entiy /></code>。</p>\n<p>如果只是像我一樣想要嘗試一下的話，可以簡單利用 Chrome 的 webapp - <a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Server for Chrome</a> 來 host 你的 htlm file，然後利用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngork</a> 或是 <a href=\"https://serveo.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serveo</a> 來當作你 localhost 的 proxy，讓你的手機可以方便相連。</p>\n<p>一切順利的話，你就會看到一隻傑尼龜出現在你家裡啦～</p>\n<p><img src=\"/image/another-arjs-demo.jpg\" alt=\"another arjs demo\"></p>\n<p>如果你沒有手機可以玩，想用電腦 Browser 跑的話，會需要到 <code class=\"language-text\">chrome://flags</code> 中把 <code class=\"language-text\">WebVR</code> 的選項開啟，然後用 inpsecter 將 Browser 調整成手機模式。</p>\n<p><img src=\"/image/chrome-flags.png\" alt=\"chrome flags\"></p>\n<p>並且需要加上 polyfill，因為普通的 chrome 是沒有支援 <code class=\"language-text\">navigator.xr</code> api 的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://cdn.jsdelivr.net/npm/webxr-polyfill@latest/build/webxr-polyfill.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> polyfill <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebXRPolyfill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/arjs-run-mac.png\" alt=\"run on chrome\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然 WebXR Device API 還不穩定，但就是在這時候開始試用才更能給出回饋，高手們來試試吧！決定下次拿公司測試機來跟著 Code lab 上的範例改改看！\n另外，AR.js 雖然目前是 Marker-based，但從 <a href=\"https://github.com/jeromeetienne/AR.js/issues/190\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 上的一些討論</a> 來看，之後應該是有機會支援 Markerless 的。</p>\n<p>AR 這樣牽扯到電腦視覺、硬體、演算法、Sensor 等複雜運算的技術，要實作到 Web 上更是困難，進度慢是可以理解的，但還是衷心期盼著那一天，能夠開啟網頁就能丈量傢俱尺寸或是試穿衣物！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/immersive-web/webxr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Repository for the WebXR Device API Specification.</a></li>\n<li><a href=\"https://createwebvr.com/webAR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CreateＷebVR</a></li>\n<li><a href=\"https://github.com/jeromeetienne/AR.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js</a></li>\n<li><a href=\"https://medium.com/chialab-open-source/ar-js-the-simpliest-way-to-get-cross-browser-ar-on-the-web-8f670dd45462\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AR.js — The Simplest Way to get Cross-Browser Augmented Reality on the Web</a></li>\n<li><a href=\"https://blog.halolabs.io/building-ar-vr-with-javascript-and-html-97af4434bcf6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building AR/VR with Javascript and HTML</a></li>\n<li><a href=\"https://medium.com/agora-io/web-vs-app-ar-edition-d9aafe988ba2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web vs App (AR edition)</a></li>\n<li><a href=\"https://poly.google.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Poly</a></li>\n<li><a href=\"https://sketchfab.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sketchfab</a></li>\n<li><a href=\"https://medium.com/%E9%AB%92%E6%A1%B6%E5%AD%90/%E7%94%A8ar-js%E5%81%9A%E4%B8%80%E5%80%8B%E8%AE%93%E5%8F%A6%E5%B0%8D%E6%96%B9-%E5%96%94%E5%96%94%E5%96%94%E5%96%94-%E7%9A%84%E5%B0%8F%E5%8D%A1%E7%89%87%E5%90%A7-4071ceea41dd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用ar-js做一個讓另對方-喔喔喔喔-的小卡片吧</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/ar-with-webxr/#0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google code lab - WebXR</a></li>\n<li><a href=\"https://immersive-web.github.io/webxr-samples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebXR Sample page</a></li>\n</ol>\n<p>關於作者：\n<a href=\"http://blog.arvinh.info/about/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@arvinh</a> 前端攻城獅，熱愛數據分析和資訊視覺化</p>","id":"a776efbf-720d-5861-94eb-4b4becb96984","fields":{"slug":"web-ar"},"frontmatter":{"date":"2019-07-16T17:40:44.000Z","title":"淺嚐 Web AR","tags":["web","ar","javascript"],"type":"tech","slug":"web-ar"},"timeToRead":12},"next":{"excerpt":"好歌分享：那天晚上 我夢見了你 feat.Vita 張芮菲","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/2MGUXtO7atA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">那天晚上 我夢見了你 feat.Vita 張芮菲</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/2MGUXtO7atA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>軟體工程師應該很少沒參加過 Conference 吧，不管是社群或是學術性的，只要是與會者都會拿到一面主辦方製作的名牌，上面除了印著你的大名外，大多就剩下 Conference 名稱與 Logo 了，然而，由灣區的資料視覺化社群所舉辦的年度聚會 - visfest unconf 很是特別，他們提供與會者一個製作自己 badge 的機會，讓大家自行發揮創意，特別之餘也很符合整個會議的調性。今年八月是他們舉辦的第五屆 visfest unconf，這次他們在 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a> 這個平台上釋出了一個 Template，讓大家更方便的製作名牌，效果如同下方（因為用到 ECMAScript modules，建議使用桌面版 Chrome），若無法觀看，可以前往此 <a href=\"https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>，或是拉到最下面看 gif：</p>\n<div id=\"animation\"></div>\n<script type=\"module\">\n  import notebook from \"https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js\";\n\n  const renders = {\n    \"result\": \"#animation\",\n  };\n\n  import {Inspector, Runtime} from \"https://unpkg.com/@observablehq/notebook-runtime@2?module\";\n  for (let i in renders)\n    renders[i] = document.querySelector(renders[i]);\n\n  Runtime.load(notebook, (variable) => {\n    console.log(variable)\n    if (renders[variable.name])\n      return new Inspector(renders[variable.name]);\n  });\n</script>\n<p>除了 Observable 與 visfest 的 Logo 外，你可以繪製任何你想呈現的東西，改變背景顏色等等，而主辦方會用 <a href=\"https://gifpop.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gitpop</a> 這項服務，將你的動畫製作成 10 frames 的 gif，因此在製作時，可以根據 template 提供的繪圖函式傳入的 <code class=\"language-text\">frameNumbers</code> 來控制動畫的呈現。</p>\n<p>我自己是覺得這樣的想法很酷，所以即便無緣參加 visfest unconf，也製作了一個自己的 Badge 玩玩，順便來試用已經想玩很久的平台 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>，這篇文章就記錄一下使用的過程，並說明其特性，希望能引起大家興趣！</p>\n<h2 id=\"observablehq-起源\" style=\"position:relative;\"><a href=\"#observablehq-%E8%B5%B7%E6%BA%90\" aria-label=\"observablehq 起源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 起源</h2>\n<p>D3.js 的作者 <a href=\"https://twitter.com/mbostock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@mbostock</a>，在 2017 年的時候發了一篇名為 <a href=\"https://medium.com/@mbostock/a-better-way-to-code-2b1d2876a3a0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Better Way to Code</a> 的文章，介紹了他當時正在製作的專案 - <code class=\"language-text\">d3.express</code>，也就是現在的 <a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>。</p>\n<!-- 介紹目的 -->\n<p>Mike Bostock 在過去十年左右的時間都致力於資料視覺化，為了能夠更方便的將資料以各種方式呈現，D3.js 因應而生，然而，致力於一個工具太久，反而忘了當初為何要製作工具，目的變成了工具本身，而不是透過該工具所能傳達的價值。</p>\n<blockquote>\n<p>The purpose of visualization is insight, not pictures - Ben Shneiderman</p>\n</blockquote>\n<p>資料視覺化的重點應在於將資料的 insight 更加輕易的傳遞給世界，儘管現在已經有很多圖形化介面的拖拉工具輔助你將資料視覺化，但若是想要最大幅度的自由創作並表達 insight，撰寫程式碼是無可避免的。</p>\n<p>然而寫程式一直都不是一件簡單的事，為了降低寫程式的難度，他創造了另一個工具：<a href=\"https://observablehq.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ObservableHQ</a>。你可以把它想像成 JavaScript 版本的 jupyter notebook，但使用上某些語法跟純 JavaScript 有些差異，因此剛開始可能會有些不太習慣的地方，等到上手後，你就會發現它的好用之處，尤其適合應用在製作資料視覺化專案上。</p>\n<h2 id=\"observablehq-基礎操作\" style=\"position:relative;\"><a href=\"#observablehq-%E5%9F%BA%E7%A4%8E%E6%93%8D%E4%BD%9C\" aria-label=\"observablehq 基礎操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 基礎操作</h2>\n<p>ObservableHQ 其實不能算是 JavaScript，因為有許多操作行為與 vanilla JavaScript 不相同，作者也有寫了一篇<a href=\"https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>。</p>\n<p>基本上，你可以把 ObservableHQ 想像成一個試算表，由一格一格的 <code class=\"language-text\">cell</code> 所組成，而每一格 <code class=\"language-text\">cell</code> 都是一個 JavaScript snippet，可以是一則運算式、一段簡短的函式，當然也可以將值指定給一變數名稱。</p>\n<p><img src=\"/image/observablehq-statement.png\" alt=\"ObservableHQ statements\"></p>\n<p>在上面的圖片中，比較不同的地方在於運算函式的寫法，除了一般的 Function Declarations 與 Function Expressions 外，你也可以用一個大括號 <code class=\"language-text\">{}</code> 包裹著一段程式碼，最後 <code class=\"language-text\">return</code> 出去的值，就會被印出來。</p>\n<p>而就像試算表的公式一樣，表格內的值是互相 reference 的，只要你在某處修改了某個 <code class=\"language-text\">cell</code> 的值，所有引用到該 <code class=\"language-text\">cell</code> 的程式都會相應改變（re-run），跟一般 vanilla JavaScript 從上到下執行程式碼的邏輯有所不同：</p>\n<p><img src=\"/image/observablehq-var-reference.gif\" alt=\"demo\"></p>\n<p>從這點來看，你也可以把所有在 ObservableHQ 上的變數 assignments 都想成是 hoisted declarations，因為宣告順序不影響 reference。</p>\n<p>此外，支援使用 <code class=\"language-text\">html</code> 與 <code class=\"language-text\">markdown</code> 的語法，利用 <code class=\"language-text\">Template literals</code> 來完成：</p>\n<p><img src=\"/image/observablehq-html-md.png\" alt=\"demo-html-md\"></p>\n<p>還有一個特別的 built-in 運算子 - <code class=\"language-text\">viewof</code>：</p>\n<p><img src=\"/image/observablehq-viewof.gif\" alt=\"demo-viewof\"></p>\n<p>如上面的 gif 所示，viewof 可以將使用者針對一個 html input element 操作所產生的值，exposes 出來，或是 assign 給一個變數。可以想見，這用在互動式視覺化專案中會是很棒的功能。</p>\n<p>這幾個大概是最基本的操作，還有其他諸如：如何匯入第三方套件、使用非同步 API 呼叫等等，我們就直接透過實際演練來學習吧！</p>\n<h2 id=\"observablehq-實際操作\" style=\"position:relative;\"><a href=\"#observablehq-%E5%AF%A6%E9%9A%9B%E6%93%8D%E4%BD%9C\" aria-label=\"observablehq 實際操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ObservableHQ 實際操作</h2>\n<p>接下來用我這次製作的 visfest badge 來做範例，進一步帶大家認識這個工具！</p>\n<p>這次的 badge，主要概念是在 2D 地球圖上，顯示各城市的人口數量級別，用地球的轉動與 marker 的 radius 大小變化來呈現動畫。</p>\n<p>要完成這個目標，起手第一步就是得先把 2D 地球畫出來。而 Mike Bostock 有提供一份 <code class=\"language-text\">topojson</code> 格式的世界地圖資料：<code class=\"language-text\">https://unpkg.com/world-atlas@1/world/110m.json</code>。</p>\n<p>因此，我們需要載入 <code class=\"language-text\">topojson</code> 套件，並 <code class=\"language-text\">fetch</code> 世界圖資，而在 ObservableHQ 上我們可以這樣做：</p>\n<p><img src=\"/image/observablehq-import-lib.png\" alt=\"Import libs\"></p>\n<p>這邊我們用 <code class=\"language-text\">require</code> 來載入 <code class=\"language-text\">topojson</code> 套件，但其實它背後並非 CommonJS，而是用 <a href=\"https://requirejs.org/docs/whyamd.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Asynchronous Module Definition (AMD)</a> 實作。另外它也支援 ES modules 與 imports，所以可以依照你所使用的套件支援度來選擇要用哪種方式載入模組。</p>\n<p>至於取得世界圖資，我們需要兩個步驟：</p>\n<ol>\n<li>取得圖資 JSON 檔案：<code class=\"language-text\">let world = await (await fetch(\"https://unpkg.com/world-atlas@1/world/110m.json\")).json();</code></li>\n<li>取得拓樸後的資料：<code class=\"language-text\">topojson.feature(world, world.objects.countries);</code></li>\n</ol>\n<p>在 ObservableHQ 上，我們可以利用先前說到的大括號 <code class=\"language-text\">{}</code> 來執行多行程式碼，並把最後 return 的值賦予給某個變數：</p>\n<p><img src=\"/image/observablehq-get-worldmap.png\" alt=\"Get world map data\"></p>\n<p>接著還需要有各城市的人口資料，取得方式與上面相同：</p>\n<p><img src=\"/image/observablehq-get-cities-pop.png\" alt=\"Get cities population\"></p>\n<p>資料到手後，剩下的就就跟一般撰寫 D3.js 的專案ㄧ樣。</p>\n<p>在 visfest 提供的模板中，提供了許多以定義好的變數宣告，像是姓名、字體亮度、大小等等，而我們只需要在 <code class=\"language-text\">badgeCode</code> 這個函數中實作我們的視覺化作品即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Your D3 code goes here.</span>\n<span class=\"token comment\">// The function badgeCode gets called below to generate the previews.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">badgeCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> frameNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// g: a &lt;g>, i.e. d3.select(... the node)</span>\n  <span class=\"token comment\">// context: a canvas context, useful for doing canvas drawing</span>\n  <span class=\"token comment\">// frameNumber: a number that represents the frame (1, 2, … 10) for psuedo-animation.</span>\n  <span class=\"token comment\">// width &amp; height are available via the environment, as is d3</span>\n  <span class=\"token comment\">// Note: the &lt;g> is drawn on top of the &lt;canvas></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">badgeCode</code> 接收三個參數，一個是在 badge 上留給你繪圖的空間 <code class=\"language-text\">&lt;g></code> 元素，以及 <code class=\"language-text\">canvas context</code> 和 <code class=\"language-text\">frameNumber</code>，該模板會呼叫此函式十次，依序傳入遞增的 <code class=\"language-text\">frameNumber</code>，讓你來掌控動畫過程。</p>\n<p>到這邊可能你會好奇，在 ObservableHQ 中的 <strong>模板</strong> 到底是怎麼運作的？為什麼能定義出一個函式，讓我去填寫內容，又幫我執行呢？</p>\n<p>答案要追究到 ObservableHQ 的一個特殊 <code class=\"language-text\">import-with</code> 方法：</p>\n<p><img src=\"/image/observablehq-import-with.png\" alt=\"import-with\"></p>\n<p><code class=\"language-text\">b93171820ba3f268</code> 是 ObservableHQ 上的另一個 notebook，也就是實際的 template 程式碼所在位置，我們可以從該 notebook 中 import 進 <code class=\"language-text\">{preview, animation, download, width, height, d3}</code> 這幾個函式來呼叫使用，而這幾個函式中所用到的變數，我們能使用 <code class=\"language-text\">with</code> 來取出，並且賦予其新的值！</p>\n<p>這就是為什麼我們可以修改 <code class=\"language-text\">firstName</code>、<code class=\"language-text\">lastName</code> 以及自行填入 <code class=\"language-text\">badgeCode</code> 函數的原因了。</p>\n<p><code class=\"language-text\">badgeCode</code> 內的程式碼基本上就是普通的 D3.js 程式，這邊就不再附上程式碼，有興趣想知道怎麼實作在地球呈現人口分布的，可以到我的 <a href=\"https://observablehq.com/@arvinh/visfest-unconf-badge-builder-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">notebook</a> 去看，其中我也有用到前面提及的 <code class=\"language-text\">viewof</code> 運算子，讓我能手動調整地球的 scale 大小。</p>\n<p>都完成後就會看到由模板提供的 <code class=\"language-text\">preview</code> 函式所繪製出的十張圖：</p>\n<p><img src=\"/image/observablehq-preview-ten-pics.png\" alt=\"Preview ten pics\"></p>\n<p>以及用 <code class=\"language-text\">animation</code> 函式（一樣模板提供）繪製的動畫：</p>\n<p><img src=\"/image/observablehq-animation.gif\" alt=\"Animation gif\"></p>\n<h2 id=\"分享你的-observablehq-作品\" style=\"position:relative;\"><a href=\"#%E5%88%86%E4%BA%AB%E4%BD%A0%E7%9A%84-observablehq-%E4%BD%9C%E5%93%81\" aria-label=\"分享你的 observablehq 作品 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分享你的 ObservableHQ 作品</h2>\n<p>完成作品後，最重要的就是分享。</p>\n<p>這篇文章的最上方，我放入的成品並不是 gif，而是貨真價實從 ObservableHQ 所匯入的，利用 <code class=\"language-text\">ECMAScript modules</code>，載入想要嵌入的 notebook，接著再載入 ObservableHQ 提供的 <code class=\"language-text\">{Inspector, Runtime}</code>，當 notebook 載入後，取得其中 export 的變數，透過 <code class=\"language-text\">Inspector</code> 將其繪製到指定的 DOM id 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>animation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> notebook <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://cors-anywhere.herokuapp.com/https://api.observablehq.com/@arvinh/visfest-unconf-badge-builder-template.js\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> renders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"result\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#animation\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Inspector<span class=\"token punctuation\">,</span> Runtime<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://unpkg.com/@observablehq/notebook-runtime@2?module\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> renders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    renders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>notebook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variable</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Inspector</span><span class=\"token punctuation\">(</span>renders<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>透過這種方式，除了能夠在 ObservableHQ 上載入引用他人的 notebook 外，也能在一般網站上嵌入任何作品，非常方便！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>這篇文章只是非常簡略的說明了 ObservableHQ 的起源、用途與使用方式，希望能引起大家的興趣，如果有想要使用這套工具玩玩，或是製作視覺化專案的話，官方網站其實有出了一系列的<a href=\"https://observablehq.com/collection/@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">教學與說明文件</a>，直接就是用 ObservableHQ 的 notebook 撰寫的，互動式的閱讀體驗非常好，可以非常清楚的知道各個環節該怎麼使用，以及其背後的設計原理。</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://observablehq.com/@observablehq/five-minute-introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observablehq five minute intro</a></li>\n<li><a href=\"https://observablehq.com/@observablehq/observables-not-javascript?collection=@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observable’s not JavaScript</a></li>\n<li><a href=\"https://observablehq.com/collection/@observablehq/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Observablehq introduction</a></li>\n</ol>","id":"1628307b-7c51-5350-8588-44aba765b8f3","fields":{"slug":"observablehq-intro"},"frontmatter":{"date":"2019-09-09T02:01:00.000Z","title":"從製作 visfest 2019 badge 認識 ObservableHQ","tags":["d3.js","javascript","visualization"],"type":"tech","slug":"observablehq-intro"},"timeToRead":8},"type":"tech"}},"staticQueryHashes":["2123680655"]}