{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/flux-vs-mvc","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>\"要學Flux還是直接學Redux好呢？\"\n\"Flux我知道, 3D printer麻！\"</p>\n</blockquote>\n<!-- more -->\n<p>今天這篇主要是想藉由 <code class=\"language-text\">Flux</code> 的介紹，進而探討 <code class=\"language-text\">Flux</code> 與 <code class=\"language-text\">MVC</code> 的差異。會想記錄這篇的原因是前幾天跟我的師父（以前實習公司的 CTO）詢問我類似的問題，我才發現自己還沒有真正全盤瞭解過，只是很直接的去了解 Flux，並且使用，但是到底 <code class=\"language-text\">Flux</code> 做對了什麼，而 <code class=\"language-text\">MVC</code> 又犯了什麼錯呢？</p>\n<p>首先我們回顧一下<a href=\"https://www.youtube.com/watch?v=nYkdrAPrdcw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2014 F8大會 - Hacker Way</a>的影片\n<a href=\"http://www.youtube.com/watch?feature=player_embedded&v=nYkdrAPrdcw\" target=\"_blank\">\n<img src=\"http://img.youtube.com/vi/nYkdrAPrdcw/0.jpg\" alt=\"2014 F8大會 - Hacker Way\" width=\"240\" height=\"180\" border=\"10\">\n</a>\n其中 Jing Chen 用了兩張圖來做對比，說明 MVC 的觀念在複雜的 Application 下難以維護。</p>\n<p><img src=\"/image/flux-react-mvc.png\" alt=\"facebook MVC\" title=\"facebook MVC\"></p>\n<p>經驗豐富一點的 Developer 看到這張圖的第一個念頭應該會是：\"What the fxxx... 誰家的 MVC長這樣啊？\" 沒錯！Jing Chen 事後在 Reddit 上也有回覆，主要是想利用這張圖把 MVC 在大型架構下，資料 與 視圖 之間的 <code class=\"language-text\">bi-directional data flow</code>，容易造成 <code class=\"language-text\">cascading effects</code> 的問題凸顯出來。</p>\n<p>為了解決她說的這個問題，Facebook 提出了 <code class=\"language-text\">Flux</code></p>\n<h2 id=\"flux\" style=\"position:relative;\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h2>\n<p>Flux是一種讓你很容易做到 one-way data flow 的<span style=\"color:red\">概念</span>，讓你View中的每個 component 的 state 都能夠 <code class=\"language-text\">predictable</code>。</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<h3 id=\"views-dispatch-actions\" style=\"position:relative;\"><a href=\"#views-dispatch-actions\" aria-label=\"views dispatch actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Views Dispatch Actions</h3>\n<p><code class=\"language-text\">Dispatcher</code> 是一個重要的 event system，用來 broadcast events 以及 registers callbacks，一般來說 Dispatcher 是唯一且 global 的，可以參考 Facebook 的<a href=\"https://github.com/facebook/flux/blob/master/src/Dispatcher.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dispatcher Library</a>（題外話，有許多一些 Flux 的 framework 並非這樣使用）</p>\n<p>簡單來看個 Dispatcher 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 假設你initiate一個dispatcher</span>\n<span class=\"token keyword\">var</span> AppDispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//.</span>\n<span class=\"token comment\">//..</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token comment\">//在你的 component.jsx 中，可能會有這樣的程式</span>\n<span class=\"token function-variable function\">createNewItem</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">evt</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    actionName<span class=\"token operator\">:</span> <span class=\"token string\">'newPhoto'</span><span class=\"token punctuation\">,</span>\n    newItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Happy Holiday'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// example data</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createNewPhoto <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>New Photo<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當每次的 <code class=\"language-text\">onClick</code> 發生後，<code class=\"language-text\">View</code> 就會透過 <code class=\"language-text\">Dispatcher</code> dispatch 出一個 <code class=\"language-text\">Action</code>，該 Action 可以包含一個 <code class=\"language-text\">payload</code>，說明<code class=\"language-text\">你想做什麼事情</code>以及<code class=\"language-text\">你需要操作什麼資料</code>。</p>\n<h3 id=\"store-responds-to-dispatched-actions\" style=\"position:relative;\"><a href=\"#store-responds-to-dispatched-actions\" aria-label=\"store responds to dispatched actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Responds to Dispatched Actions</h3>\n<p>Store 在 Flux的架構內，通常是 Singleton (一樣，有些 framework 並非這樣做，尤其是想達成 isomorphic 時，可以參考<a href=\"http://fluxible.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yahoo Fluxible</a>)</p>\n<p>在 Flux 的概念中，Store 基本上是你唯一可以<strong>操作資料</strong>與<strong>儲存資料</strong>的地方。去除操作資料的部分，聽起來有點像 MVC 中的 Model ? 更明確一點來說，<strong>Store contains Models</strong></p>\n<p>舉例來說，當你需要存放一些照片以及其 Meta data 時，你會 Create 一個 PhotoStore 來存放 Photo model 與 Meta model。你會依照資料的<code class=\"language-text\">Domain</code> 來切割你的 Store。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> PhotoStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// collection of model data</span>\n  photos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nAppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Store</code> 會向 <code class=\"language-text\">Dispatcher</code> 註冊 <code class=\"language-text\">Callback</code>，依照各種 action 的類別執行相對應的資料操作。</p>\n<h3 id=\"store-emits-change-event-to-view\" style=\"position:relative;\"><a href=\"#store-emits-change-event-to-view\" aria-label=\"store emits change event to view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store Emits \"Change\" Event to View</h3>\n<p>當你的 Store 資料做完更新後，要告訴前端頁面去刷新視圖，通常可以在 Store 註冊的 Callback 中執行以下動作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">AppDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> payload<span class=\"token punctuation\">.</span>actionName <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'newPhoto'</span><span class=\"token operator\">:</span>\n      PhotoStore<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>newPhoto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// trigger \"Change\" event 通知View去做更新</span>\n      PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接著，如果你是搭配 React 當作你的 View 的話，可能會在 <code class=\"language-text\">componentDidMount</code> 時，binding 一個 Store listener</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">componentDidMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">PhotoStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>photoChange <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>在 listener 中重新 fetch store 資料，並且 setState 來 re-render Component</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">photoChange</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">var</span> newPhotoData <span class=\"token operator\">=</span> PhotoStore<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      photos<span class=\"token operator\">:</span> newPhotoData\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你的 Component 的 render function 大概會像這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> photosComponet <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">photo<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'photo'</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photo<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>photosComponet<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看完簡單的 Flux 介紹後，讓我們再複習一次 Flux 的流程圖</p>\n<p><img src=\"/image/flux-react.png\" alt=\"facebook Flux\" title=\"facebook Flux\"></p>\n<p>相信在業界打滾多年的 Developer 們應該早有疑惑了，Flux 的那張圖，跟最原始的 MVC 圖不是很像嗎？！</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png\" alt=\"MVC definition in wikipedia\" title=\"MVC definition in wikipedia\"></p>\n<p>User 操作 View 所產生的任何 event，都會經由 Controller 來修改與更動相關的 Model，而 Model 再告知 View 是否需要做更動，聽起來也是蠻 <code class=\"language-text\">one-way direction</code> 的呀。</p>\n<p>事實上，MVC 跟 Flux 都只是一個概念，因此有各種不同的實作，加上 MVC 在<code class=\"language-text\">資料流</code>的處理上，並不像 Flux 一般有較為明確的定義，多數時候 Model 的更動與 View 的刷新可能會透過 Controller 來管理，讓 Model 單純存放 data。</p>\n<p>如此一來，假若今天 View 的操作更動了 Model，而 Model 的變化又刷新了 View，在系統龐大的時候，一來一往，就會讓你的資料與頁面狀態變得非常複雜，要追蹤某個頁面的變動到底是誰觸發的，或是哪個資料改變了，你必須從 Controller 去慢慢 trace。而若是遵照 Flux 的流程，任何 View 的 update 都只要去追蹤其 State 的來源 Store 即可，有一個明確的 flow 可以遵循，並且每個 View 所需要監聽的資料來源，可以依照 Store 來區分，這之間的資料流不會互相干擾。\n另外一個 Flux 的好處是，能夠更輕鬆的做出更 Unit 的 Unit test。這是你在複雜的 Controller 中難以達成的。</p>\n<p>當然，你可能會想：“這是你 MVC 用得不好“。 </p>\n<p>我覺得這樣講也沒什麼不對，如果你 MVC 用得很熟很順手，的確單單是 Flux 這個東西對你的誘因可能不高，但當一間明星公司大力 Promote，對於基本概念的定義又夠清楚單純時，還是值得你試試。更別說 Flux 搭配上 React 的宣告式寫法，用起來更是如魚得水。</p>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<p>Flux 做的是：</p>\n<ol>\n<li>改善<code class=\"language-text\">資料狀態</code>與<code class=\"language-text\">視圖狀態</code>的 Data Flow</li>\n<li>讓頁面的狀態 <code class=\"language-text\">Predictable</code></li>\n<li>資料流不會互相污染</li>\n<li>讓你的測試更加容易</li>\n</ol>\n<p>而 MVC 在關注點分離上的貢獻不可小覷，重視在將資料(Model)、視圖(View)、邏輯(Controller)拆開，各自負責各自的工作。</p>\n<p>因此並非是 MVC 不好、不對，所以我們應該採用 Flux；Flux 是在 MVC 建立的基礎下，定義出一個清楚的 <code class=\"language-text\">one-way direction</code> 資料流，並且透過 <code class=\"language-text\">Action</code>、<code class=\"language-text\">Dispatcher</code>與 <code class=\"language-text\">Store</code> 來幫助整個概念的實現。</p>\n<h3 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h3>\n<p>如同前面所提，Flux 的實作有很多種，這邊介紹的只是最基本的流程，很多 Framework 在設計自己的 Dispatcher, Action 與 Store 時，會有不同的方式，或許可以從這邊的比較下去看看</p>\n<ul>\n<li><a href=\"https://github.com/voronianski/flux-comparison\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux Comparison</a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Awesome React</a></li>\n</ul>\n<p>參考資料</p>\n<ul>\n<li><a href=\"http://blog.andrewray.me/flux-for-stupid-people/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux for stupid people</a></li>\n<li><a href=\"http://www.infoq.com/news/2014/05/facebook-mvc-flux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Facebook: MVC Does Not Scale, Use Flux Instead</a></li>\n</ul>","fields":{"slug":"flux-vs-mvc"},"frontmatter":{"title":"從 Flux 與 MVC 的曖昧關係來介紹 Flux","date":"04-27-2016","tags":["flux","mvc","javascript"]},"timeToRead":6}},"pageContext":{"slug":"flux-vs-mvc","prev":{"excerpt":"\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\t\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"","html":"<blockquote>\n<p>\"欸，IOT好像講太久了，VR也是，不趕快弄個新的不行啊！\"\n\"Hmmm...Alpha Go剛打敗人類，不然趁機推個Bot吧\"</p>\n</blockquote>\n<!-- more -->\n<p>最近Bot好像很夯，FB也在幾天前的F8大會上推出Messenger API，讓擁有粉絲頁的店家、企業、或是個人，能夠製作出Chat Bot來與使用者互動。事實上像是Slack、HipChat、telegram等通訊軟體都早已有類似的Bot api可以提供使用，並且在設計上跟Facebook現階段推出的 API 其實大同小異，甚至也已經有人將它整進Hubot framework中 <a href=\"https://github.com/chen-ye/hubot-fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hubot-fb</a>，連所謂的 <a href=\"https://medium.com/@tomazstolfa/the-future-of-conversational-ui-belongs-to-hybrid-interfaces-8a228de0bdb5#.b0tcmb607\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CUI - Conversational User Interface</a> 都出現了。</p>\n<p>對我來說，Chat Bot也只是另一種方式來解決使用者的問題，另一種相對新穎的媒介，找到痛點，並對症下藥這件事情是不會改變的！</p>\n<p>好，扯遠了。Facebook Messenger最大的優勢除了FB本身龐大的使用者外，還有粉絲專頁的功能可以操作，如同 Mark Zuckerberg 在F8 Keynote中提到的例子一樣，背後隱藏的商機與可能性非常大，因此還是有必要來玩一下Messenger API。這邊希望簡單記錄與並以中文說明如何產生你的第一個Messenger Bot，讓你夜深寂寞時能有人陪你聊天...</p>\n<p>值得一提的是，Facebook developer doc上面的說明算是非常清楚，需要完整文件支援的話可以移駕至此 <a href=\"https://developers.facebook.com/docs/messenger-platform/quickstart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FB messenger-platform doc</a></p>\n<h2 id=\"step-1---創建facebook-應用程式與facebook粉絲專頁\" style=\"position:relative;\"><a href=\"#step-1---%E5%89%B5%E5%BB%BAfacebook-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%88%87facebook%E7%B2%89%E7%B5%B2%E5%B0%88%E9%A0%81\" aria-label=\"step 1   創建facebook 應用程式與facebook粉絲專頁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1 - 創建Facebook 應用程式與Facebook粉絲專頁</h2>\n<p>還沒有在Facebook上面創建過應用程式的讀者，可以先連結到 <a href=\"https://developers.facebook.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developers.facebook.com/</a>\n進去後會看到右上角會有<strong>我的應用程式</strong>可以選擇</p>\n<p><img src=\"/image/fbdeveloper.png\" alt=\"FB developer\" title=\"FB developer\"></p>\n<p>選擇<strong>新增應用程式</strong>後，理論上會需要填寫一些基本資訊，必要填寫的有<strong>顯示名稱</strong>, <strong>聯絡電子郵件</strong> 與 <strong>網站網址</strong>\n這邊要注意一下，基本上你如果想要用Messenger API，你勢必會需要有一個server來養你的bot，若不想污染你自己目前的server環境，就創建一個新的吧！FB上的範例多數是以JS為主，當然你可以自行選用慣用的環境。</p>\n<p><img src=\"/image/fbapp-apply.png\" alt=\"FB App 申請\" title=\"FB App 申請\"></p>\n<p>接著看向左邊的Menu，在最下方地方有個Messenger，點選後會進入以下頁面</p>\n<p><img src=\"/image/messenger.png\" alt=\"Messenger 申請\" title=\"Messenger 申請\"></p>\n<p>重點有兩個地方，第一個是你必須要選擇一個粉絲專頁，在這邊選定好粉絲專頁後，後面產生的Token（權杖）會用來將你的app與粉絲專頁綁定，之後的messenger要透過此Token才能順利執行。第二個Webhooks的步驟下面會談到。</p>\n<p>創建粉絲專頁非常簡單，簡單到多放一張圖都是多餘，因此我們直接跳往下個步驟。\n<img src=\"/image/token.png\" alt=\"粉絲專頁選好後會出現Token\" title=\"Token\"></p>\n<h2 id=\"step-2---set-up-webhook\" style=\"position:relative;\"><a href=\"#step-2---set-up-webhook\" aria-label=\"step 2   set up webhook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 - Set up Webhook</h2>\n<p>當你選定好粉絲專頁後就要設定你的webhook，這邊就需要開始寫點code了！\n但先別急著動手！當你點選set up webhook後，會彈出一個視窗：</p>\n<p><img src=\"/image/webhook.png\" alt=\"Webhook setup\" title=\"Webhook setup\"></p>\n<p>這邊的url就要填寫你的server，記得要填寫適當的route，以FB的範例程式為例，如果你希望之後的bot api都走/webhook這個route當作進入點，那這邊的url可能就要填寫 <code class=\"language-text\">https://www.mybot.com/webhook/</code>\n這邊另外要注意一點，你的server必須要提供https，如果你跟筆者一樣先前沒有設定過ssl的話，推薦<a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cloudflare</a>的free plan或是前陣子很紅的<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Let's encrypt</a></p>\n<p>當一切準備就緒後，把你server的route添加以下的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes.js\"><pre class=\"language-javascriptroutes.js\"><code class=\"language-javascriptroutes.js\">\t\tapp.get(&#39;/webhook/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>若你跟我一樣習慣把route分開，當然就會變成以下這樣，而webhook url 就是 <code class=\"language-text\">https://www.mybot.com/fbbot/</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">\t\troute.get(&#39;/&#39;, function (req, res) {\n\t\t\tif (req.query[&#39;hub.verify_token&#39;] === &#39;&lt;validation_token&gt;&#39;) {\n\t\t\t\tres.send(req.query[&#39;hub.challenge&#39;]);\n\t\t\t}\n\t\t\tres.send(&#39;Error, wrong validation token&#39;);\n\t\t})</code></pre></div>\n<p>這邊的<code class=\"language-text\">validation_token</code>就是上圖中的<strong>驗證權杖</strong>，基本上隨便你填寫什麼都可以。</p>\n<p>當你在server端加上route，並且把他填寫到上面的url欄位後，記得將下方的<strong>訂閱欄位</strong>的選項都打勾，不然你就沒辦法傳送訊息。接著就可以按下save，FB會emit一個get request去驗證你的webhook，成功後該區塊就會變成：</p>\n<p><img src=\"/image/webhooksuccess.png\" alt=\"Webhook successful\" title=\"Webhook successful\"></p>\n<h2 id=\"step-3---subscribe-the-app-to-the-page\" style=\"position:relative;\"><a href=\"#step-3---subscribe-the-app-to-the-page\" aria-label=\"step 3   subscribe the app to the page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3 - Subscribe the App to the Page</h2>\n<p>記得步驟一中我們有設定好粉絲專頁，並取得Token嗎？現在就需要利用該Token來讓我們的App與粉絲專頁進行綁定，只需要一行指令：\n<code class=\"language-text\">curl -ik -X POST \"https://graph.facebook.com/v2.6/me/subscribed_apps?access_token=&lt;token>\"</code></p>\n<p>如果進行到這邊都沒問題的話，就可以進入重頭戲了。</p>\n<h2 id=\"step-4---send-a-text--receive-message\" style=\"position:relative;\"><a href=\"#step-4---send-a-text--receive-message\" aria-label=\"step 4   send a text  receive message permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 - Send a text &#x26; Receive Message</h2>\n<p>Message的傳送是透過<code class=\"language-text\">POST</code>，我們再度新增一個route在你的webhook底下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>這樣你就能在server上接收到別人傳送給你的粉絲專頁的訊息。</p>\n<p>接著我們撰寫個簡單的<code class=\"language-text\">sendTextMessage Method</code>：\n(FB的範例是include request這個http client module，你可以用你自己習慣的方式)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptsendtextmessage.js\"><pre class=\"language-javascriptsendtextmessage.js\"><code class=\"language-javascriptsendtextmessage.js\">var token = &quot;&lt;page_access_token&gt;&quot;;\nvar request = require(&#39;request&#39;);\n\nfunction sendTextMessage(sender, text) {\n  messageData = {\n    text:text\n  }\n  request({\n    url: &#39;https://graph.facebook.com/v2.6/me/messages&#39;,\n    qs: {access_token:token},\n    method: &#39;POST&#39;,\n    json: {\n      recipient: {id:sender},\n      message: messageData,\n    }\n  }, function(error, response, body) {\n    if (error) {\n      console.log(&#39;Error sending message: &#39;, error);\n    } else if (response.body.error) {\n      console.log(&#39;Error: &#39;, response.body.error);\n    }\n  });\n}</code></pre></div>\n<p>接著我們把這個Method放到前面的<code class=\"language-text\">POST</code>處理中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptroutes/fbbot.js\"><pre class=\"language-javascriptroutes/fbbot.js\"><code class=\"language-javascriptroutes/fbbot.js\">fbbot.post(&#39;/&#39;, function (req, res) {\n  messaging_events = req.body.entry[0].messaging;\n  for (i = 0; i &lt; messaging_events.length; i++) {\n    event = req.body.entry[0].messaging[i];\n    sender = event.sender.id;\n    if (event.message &amp;&amp; event.message.text) {\n      text = event.message.text;\n      // Handle a text message from this sender\n      sendTextMessage(sender, &quot;Text received, echo: &quot;+ text.substring(0, 200));\n    }\n  }\n  res.sendStatus(200);\n});</code></pre></div>\n<p>接著去到粉絲專頁傳訊息看看吧！</p>\n<p><img src=\"/image/echo-robot.png\" alt=\"Echo Robot\" title=\"Echo Robot\"></p>\n<p>Yeah! you just build your first own echo robot!</p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>目前Messenger API的功能還很少，且需要許多認證才能讓你的bot正式使用，但我想之後一定會出現更簡易的設定方式，讓一般粉絲頁不用撰寫程式碼即可擁有自己的bot，否則也會有 Bot版本的 Wix 出現吧！</p>\n<p>其實Bot說穿了就是低成本、自動化去解決問題，背後的AI、NLP、ML等等才是重點！不過接下來我應該會先繼續研究Messnger API，並用Hubot adapter開發幾個slack與telegram bot玩玩！或許加上一些NLP處理～</p>","id":"35e9daa0-d17c-57af-9006-19f3f458c0a1","fields":{"slug":"super-easy-messenger-api"},"frontmatter":{"date":"2016-04-17T12:54:13.000Z","title":"超簡易 Messenger API 初探","tags":["messenger","api","facebook"],"type":"tech","slug":"super-easy-messenger-api"},"timeToRead":5},"next":{"excerpt":"\"好想把自己subscribe到鬧鐘上...\"","html":"<blockquote>\n<p>\"好想把自己subscribe到鬧鐘上...\"</p>\n</blockquote>\n<!-- more -->\n<p>Rx 其實也出來一段時間了，一直都沒有好好靜下心來研究他，前陣子看到一篇<a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>解釋得蠻好的，擷取重點並加入一些自己的心得範例供大家參考，畢竟 Rx 中文的介紹似乎少了點...</p>\n<p>相信聽過 Rx 的讀者，應該也會耳聞 RxJS, RxJAVA, RxAndroid等等，因此被 Google 慣壞的我們一定會試著去搜尋一下 Rx 到底是什麼</p>\n<p>然後在 Google Search Result page 的最下方會看到 MSDN 的 Reactive Extensions 和 ReactiveX </p>\n<p><img src=\"/image/RxGoogleResult.png\" alt=\"Rx goolge search result\" title=\"Rx goolge search result\"></p>\n<p>好的看來就是我們要找的東西，但這好眼熟喔? 是每天在寫的React嗎？難道是相關的東西？!</p>\n<p>定睛一看會發現... 恩，基本上沒什麼關係。</p>\n<p>Reactive Extensions 是 Microsoft open source 推廣的一個lib</p>\n<p><code class=\"language-text\">Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators.</code></p>\n<p>網站連結：<a href=\"https://rx.codeplex.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rx</a>\n網站連結：<a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactiveX.io</a></p>\n<p><img src=\"/image/reactiveX.png\" alt=\"ReactiveX\" title=\"ReactiveX\"></p>\n<p><code class=\"language-text\">ReactiveX is a combination of the best ideas from\nthe Observer pattern, the Iterator pattern, and functional programming</code></p>\n<p>ok, Observer pattern, Iterator patter, functional programming 都聽過，而這些串起來似乎就是傳說中的 Reactive Programming.</p>\n<h1 id=\"what-is-reactive-programming\" style=\"position:relative;\"><a href=\"#what-is-reactive-programming\" aria-label=\"what is reactive programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Reactive Programming?</h1>\n<p>Reactive Programming 是一種以 asynchronous data streams 為中心思想出發的程式撰寫方式，比較常聽到的是 asynchronous event，像是 user click event, mouse hover event 等等，而這邊特別的則是 <strong><span style=\"color:red; font-style: italic;\">data<span></strong> 與 <strong><span style=\"color:red; font-style: italic;\">stream<span></strong>，顧名思義，Reactive Extensions 將 event 延伸為 data，並且注重在 stream （串流）上，也就是 <strong><span style=\"color:red; font-style: italic;\">時間序列上的一連串資料事件<span></strong>，Rx讓你將任何事情都變化為 data streams : variables, user inputs, properties, caches, data structures 等等皆可，透過 Observe 這些 data streams，並依據其造成的 side effects 進行對應的動作。</p>\n<h3 id=\"stream-時間序列上的一連串資料事件\" style=\"position:relative;\"><a href=\"#stream-%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E4%B8%8A%E7%9A%84%E4%B8%80%E9%80%A3%E4%B8%B2%E8%B3%87%E6%96%99%E4%BA%8B%E4%BB%B6\" aria-label=\"stream 時間序列上的一連串資料事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Stream</strong>:\t <strong>時間序列上的一連串資料事件</strong></h3>\n<p>以一個 click event 來說，在 user 點擊的動作發生後，會有一段時間觸發了幾個事件 (event stream)：value, error or completed signal</p>\n<p><img src=\"/image/clickeventstream.png\" alt=\"click event stream (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)\" title=\"click event stream \"></p>\n<p>而在 Reactive Programming 的概念下，你可以把任何事情都看作 <strong>Stream</strong>，並且 <strong>Observe</strong> stream 中的變化，以下面一個例子來說：</p>\n<p>假設我們想要印出一個包含 1 到 5 的 Array，一般我們會這樣做：</p>\n<p><a href=\"http://jsbin.com/fiyiyo/edit?js,console,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example 1</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptiterate1to5.js\"><pre class=\"language-javascriptiterate1to5.js\"><code class=\"language-javascriptiterate1to5.js\">\tvar source = [1,2,3,4,5];\n\tsource.map((item) =&gt; {\n\t  console.log(&quot;onNext: &quot;+item);\n\t})</code></pre></div>\n<p>然而，以Rx來說，任何事情都要 Observable，因此我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptobserve1to5.js\"><pre class=\"language-javascriptobserve1to5.js\"><code class=\"language-javascriptobserve1to5.js\">\t// Creates an observable sequence of 5 integers\n\tvar source = Rx.Observable.range(1, 5);\n\n\t// catch every status and print out value\n\tvar subscription = source.subscribe(\n\t    x =&gt; console.log(&#39;onNext: &#39; + x),\n\t  \n\t    e =&gt; console.log(&#39;onError: &#39; + e.message),\n\t  \n\t    () =&gt; console.log(&#39;onCompleted&#39;));</code></pre></div>\n<p>在上面的例子中，我們創建了一個 Observable 的整數陣列，並且透過 <strong>subscribe</strong> 的動作去 <strong>listening</strong> 這個陣列，當有我們設定的 event 觸發時，我們就會 <strong>observe</strong> 到，並採取對應動作，這基本上就是 <strong>Observer Design Pattern</strong> 做的事情</p>\n<h2 id=\"why-rxjs\" style=\"position:relative;\"><a href=\"#why-rxjs\" aria-label=\"why rxjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why RxJS</h2>\n<p>以 Javascript 來說，想要抓取這些事件，一般可以用 callback 或是 Promise 來達成，然而 Promise 主要設計於一次性的事件與單一回傳值，而 RxJS 除了包含 Promise 外，提供了更豐富的整合應用。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Single return value</th>\n<th>Mutiple return values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pull/Synchronous/Interactive</td>\n<td>Object</td>\n<td>Iterables (Array/Set/Map/Object)</td>\n</tr>\n<tr>\n<td>Push/Asynchronous/Reactive</td>\n<td>Promise</td>\n<td>Observable</td>\n</tr>\n</tbody>\n</table>\n<p>還記得前面 ReactiveX 的定義嗎？ \"combination of Observer pattern, <strong>Iterator pattern</strong> and functional programming\" </p>\n<p>RxJS 結合 Array#extras 的優點，讓你能夠方便處理 <strong>Multiple return values</strong></p>\n<p>延伸上面的例子來說：</p>\n<p><a href=\"http://jsbin.com/yizequ/edit?html,js,console,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example 2</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptiteratorpattern.js\"><pre class=\"language-javascriptiteratorpattern.js\"><code class=\"language-javascriptiteratorpattern.js\">\tconst data = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;];\n\tconst source = Rx.Observable\n\t                 .interval(500)\n\t                 .take(6)\n\t                 .map(i =&gt; data[i])\n\n\tconst result = source\n\n\tresult.subscribe(x =&gt; console.log(x));</code></pre></div>\n<p>當你 subscribe 這個 Observale 的 data source 時，他能讓你 <strong>監聽</strong> 陣列中，每 500ms (interval) 取一個值 (map(i => data[i])) 並取 6 次 (take(6))</p>\n<p>再回到最早的 click event 來說，假若我們想要能夠抓取 single click 與 double click 的事件，用最原始的 javascript 可能會需要許多變數來紀錄狀態、時間等等，但透過 RxJS 提供的 library，你只需要短短四行 code 就可以達成：</p>\n<p><a href=\"http://jsfiddle.net/staltz/4gGgs/27/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整範例</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptmulticlickstream.js\"><pre class=\"language-javascriptmulticlickstream.js\"><code class=\"language-javascriptmulticlickstream.js\">\tvar multiClickStream = clickStream\n\t    .buffer(function() { return clickStream.throttle(250); })\n\t    .map(function(list) { return list.length; })\n\t    .filter(function(x) { return x &gt;= 2; });</code></pre></div>\n<p><img src=\"/image/muticlick.png\" alt=\"Double click event (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)\" title=\"double click\">     </p>\n<p>由上圖可以清楚看到，RxJS 幫你把 Stream 上的 event 依照你想要的時間做 <strong>整理</strong>，<code class=\"language-text\">buffer</code> 住觸發時間在 250ms 間的 click events，並且利用 <code class=\"language-text\">map</code> 函式抓出每個 event list 的長度，並進一步抓出長度大於 2 ，也就是 double click 的 event 出來。</p>\n<p>接著你只需要 <code class=\"language-text\">subscribe</code> 你剛剛定義的 event stream，即可做出反應(reaction)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptmulticlickstream.js\"><pre class=\"language-javascriptmulticlickstream.js\"><code class=\"language-javascriptmulticlickstream.js\">\tmultiClickStream.subscribe(function (numclicks) {\n\t    document.querySelector(&#39;h2&#39;).textContent = &#39;&#39;+numclicks+&#39;x click&#39;;\n\t});</code></pre></div>\n<h3 id=\"more-examples-autocompletion-service\" style=\"position:relative;\"><a href=\"#more-examples-autocompletion-service\" aria-label=\"more examples autocompletion service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More examples (Autocompletion service)</h3>\n<p>以現在的 web app 來說，大量依賴 user 互動的效果與呈現，在不影響使用者體驗的前提下，多是用非同步的方式去抓取資料、渲染頁面等等，因此 Rx 系列的出現絕對是一個很大的助益。</p>\n<p>最後讓我們再以一個例子來做結尾，利用 RxJS 與 Jquery 打造 Wikipedia Autocompletion Service。</p>\n<p><a href=\"http://jsbin.com/yojuwu/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整範例</a>\n(source: <a href=\"http://xgrommx.github.io/rx-book/why_rx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://xgrommx.github.io/rx-book/why_rx.html</a>)</p>\n<h3 id=\"step-1\" style=\"position:relative;\"><a href=\"#step-1\" aria-label=\"step 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">var</span> keyups <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'keyup'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Now throttle the input for 500ms */</span>\n\t<span class=\"token keyword\">var</span> throttled <span class=\"token operator\">=</span> keyups<span class=\"token punctuation\">.</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token comment\">/* ms */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Now get only distinct values, so we eliminate the arrows and other control characters */</span>\n\t<span class=\"token keyword\">var</span> distinct <span class=\"token operator\">=</span> throttled<span class=\"token punctuation\">.</span><span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>我們先利用 Rx.Observable.fromEvent 來 Create 一個 binding keyup event 的 Observalbe keyups object，並且針對每次事件發生時，回傳被綁定的元素其 value 值長度大於二的</li>\n<li>接著設定 keyups 的 throttle 時間，將 500ms 內的input當做一次event去觸發</li>\n<li>再來剔除掉不相干的控制輸入，只抓取 distinct 的 value</li>\n</ol>\n<h3 id=\"step-2\" style=\"position:relative;\"><a href=\"#step-2\" aria-label=\"step 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">searchWikipedia</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">term</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t        url<span class=\"token operator\">:</span> <span class=\"token string\">'http://en.wikipedia.org/w/api.php'</span><span class=\"token punctuation\">,</span>\n\t        dataType<span class=\"token operator\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span>\n\t        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t            action<span class=\"token operator\">:</span> <span class=\"token string\">'opensearch'</span><span class=\"token punctuation\">,</span>\n\t            format<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n\t            search<span class=\"token operator\">:</span> term\n\t        <span class=\"token punctuation\">}</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>簡單撰寫一個 ajax 來 fetch search api</li>\n<li>這邊我們直接 return promise，RxJS 會幫你 wrap 起來變成 Obserbale，或是你也可以利用 <code class=\"language-text\">Rx.Observable.fromPromise</code>來將原有的 Promise 改裝</li>\n</ol>\n<h3 id=\"step-3\" style=\"position:relative;\"><a href=\"#step-3\" aria-label=\"step 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">var</span> suggestions <span class=\"token operator\">=</span> distinct<span class=\"token punctuation\">.</span><span class=\"token function\">flatMapLatest</span><span class=\"token punctuation\">(</span>searchWikipedia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"6\">\n<li>利用 <a href=\"http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/flatmaplatest.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flatMapLatest</a> 將剛才的 Observable object <code class=\"language-text\">distinct</code> 與 <code class=\"language-text\">searchWikipedia</code> function 做結合，then we good to go! (先不管flatMapLatest是什麼，總之他會將 distinct 這個 Observable sequence內的元素丟給 searchWikipedia，並將回傳回來的資料再轉換成 Observable sequence，讓人可以 subscribe)</li>\n</ol>\n<h3 id=\"step-4\" style=\"position:relative;\"><a href=\"#step-4\" aria-label=\"step 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\tsuggestions<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t    $results<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t    $<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;li>'</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">/* handle any errors */</span>\n\t    $results<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;li>Error: '</span> <span class=\"token operator\">+</span> error <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"7\">\n<li>接著就是 Subscribe 剛剛的 Observable sequence <strong>suggestions</strong>，並將 listen 到的資料 show 出來</li>\n</ol>\n<p>就這麼簡單完成了一個 Autocompletion 的 service 了！</p>\n<h3 id=\"題外話\" style=\"position:relative;\"><a href=\"#%E9%A1%8C%E5%A4%96%E8%A9%B1\" aria-label=\"題外話 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>題外話</h3>\n<p>先簡單介紹什麼是 flatMap 與 flatMapLatest，畢竟剛剛範例有用到，而實際上 RxJS 還有很多複雜的 function 可以應用，待之後我有時間再繼續專研吧！但有興趣的讀者可以在文章最下方的連結找到資源。</p>\n<p>flatMap 會將 一個 Observable Sequence 的元素 映射到 另一個新的 Observable Sequence，並且subscribe 原先的 Observable Sequence 的人也都可以聽得到</p>\n<p>簡單的例子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptflatmap\"><pre class=\"language-javascriptflatmap\"><code class=\"language-javascriptflatmap\">\tconsole.clear();\n\tvar source = Rx.Observable\n\t    .range(1, 2)\n\t    .flatMap(function (x) {\n\t        return Rx.Observable.range(x, 2);    \n\t    });\n\n\tvar subscription = source.subscribe(\n\t    function (x) {\n\t        console.log(&#39;Next: &#39; + x);\n\t    },\n\t    function (err) {\n\t        console.log(&#39;Error: &#39; + err);   \n\t    },\n\t    function () {\n\t        console.log(&#39;Completed&#39;);   \n\t    });\n\n    // Result: \n\t// =&gt; Next: 1 \n\t// =&gt; Next: 2  Rx.Observable.range(1, 2)\n\t// =&gt; Next: 2 \n\t// =&gt; Next: 3  Rx.Observable.range(2, 2)\n\t// =&gt; Completed    </code></pre></div>\n<p>See? 他會把 sequence 中的元素丟進 callback，並回傳 Observable sequence，你也可以丟入 Promise，就像範例中做的。</p>\n<p>而 flatMapLatest 則是只會進行最後一次的 sequence，以剛剛的範例來說，最後subscribe的人接收到的會是最新的那個 Observable sequence 的結果！而不會每打一個字所搜尋的結果都一直累加顯示上去。</p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>在我前面放的圖中，描繪 Click event 的 叫做 <strong>marble</strong> 圖，這邊有個網站可以讓你以視覺化互動的方式去操作這些 event，幫助你理解 Rx 當中的各個 function 之功用！非常推薦！！\n去玩玩吧！<a href=\"http://rxmarbles.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxmarbles</a></p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>Rx 真的是蠻有趣的東西，提供的lib又號稱毫無相依性，可以應用在各種framework上方，只是必須要懂得如何Think in Reactive Programming，否則這些lib的用法還真的是不好理解，這篇拋磚引玉簡單介紹一下罷了，之後會再有更深入的研究！ 有什麼說明不對的地方也請見諒與指教！</p>\n<p>參考資料</p>\n<ul>\n<li><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The introduction to Reactive Programming you've been missing (by @andrestaltz)</a></li>\n<li><a href=\"http://xgrommx.github.io/rx-book/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rx-book</a></li>\n<li><a href=\"https://github.com/Reactive-Extensions/RxJS/tree/master/doc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactive-Extensions RxJS</a></li>\n<li><a href=\"http://rxmarbles.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxmarbles</a></li>\n</ul>","id":"635b391f-fdcd-5535-ae32-6b8a30486a37","fields":{"slug":"reactive-programming-簡介與教學-以-rx-js-為例"},"frontmatter":{"date":"2016-05-28T00:03:18.000Z","title":"Reactive Programming 簡介與教學(以 RxJS 為例)","tags":["rxjs","reactive programming"],"type":"tech","slug":"Reactive Programming 簡介與教學(以 RxJS 為例)"},"timeToRead":8},"type":"tech"}},"staticQueryHashes":["2123680655"]}