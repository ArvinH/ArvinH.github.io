{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/css-grid","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/o5S-K5G9VO8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby duby feat.Ruby</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/o5S-K5G9VO8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>建構網頁佈局是製作網站的基本動作之一，隨著設計多樣性與功能複雜度的提升，開發者必須利用 <code class=\"language-text\">table</code>, <code class=\"language-text\">inline</code>, <code class=\"language-text\">float</code>, <code class=\"language-text\">clear</code>, 或是 <code class=\"language-text\">positioning</code> 等方式來 hack 頁面配置，但不管是哪種方式都各自有其缺乏的功能，也因此催生出許多 CSS Framework 提供的 Grid System 來加速佈局開發。</p>\n<p>幾年前出現的 <code class=\"language-text\">FlexBox</code> 宛如神兵利器，讓我們可以擺脫這些困擾，快速進行排版，而隨著 <code class=\"language-text\">CSS Grid</code> 規範的出現，我們即將有更好的武器了！</p>\n<p><code class=\"language-text\">CSS Grid</code> 不是要來取代 <code class=\"language-text\">Flexbox</code>，他們是相輔相成的角色，<code class=\"language-text\">flex</code> 可以看作是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 則是 <code class=\"language-text\">two-dimentional layout solution</code>，用來解決我們所有先前需要各種 hack 才能完成的頁面佈局。</p>\n<p>不過可惜的是，<code class=\"language-text\">CSS Grid</code> 還在 <a href=\"https://www.w3.org/TR/css-grid-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C working draft</a> 中，並且直到 2017 的今天，還是有些人使用不支援 <code class=\"language-text\">flex</code> 的舊瀏覽器...</p>\n<img src=\"/image/caniuse-grid.png\" alt=\"Can I use Css grid\" style=\"width: 500px;\"/>\n<p>從<a href=\"http://caniuse.com/#search=grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上圖</a>可以得知，Chrome 跟 Firefox 的下一個版本都會預設支援 <code class=\"language-text\">CSS Grid</code>，而 IE/Edge 目前則是支援舊版本的規格實作的。如果想要先嚐鮮，可以直接下載 <a href=\"https://www.google.com/chrome/browser/canary.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chrome Canary</a>, <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Firefox Nightly</a> 來使用，或是開啟目前版本的實驗功能：</p>\n<ul>\n<li>Chrome: <code class=\"language-text\">chrome://flags</code> -> 啟用 <code class=\"language-text\">experimental Web Platform features</code></li>\n<li>Firefox: <code class=\"language-text\">about:config</code> -> 啟用 <code class=\"language-text\">layout.css.grid.enabled</code></li>\n</ul>\n<p>當然也有 <a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polyfill</a> 可以使用。</p>\n<p>雖然生不逢時，但這一切都是過程，活著不難，最難的是做人...啊啊蛋堡的歌真好聽</p>\n<p>這篇文章主要是介紹 <code class=\"language-text\">CSS Grid</code> 的用法，並為我自己做個學習紀錄，畢竟網路上已經有許多關於 <code class=\"language-text\">CSS Grid</code> 的資源，我也條列了一些在文章最下方，懶得看我廢言的讀者可以自行參考！</p>\n<h2 id=\"css-grid-layout\" style=\"position:relative;\"><a href=\"#css-grid-layout\" aria-label=\"css grid layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid Layout</h2>\n<p>以往我們在進行頁面切版佈局的時候，即便是使用 <code class=\"language-text\">flexbox</code>，由於他是 <code class=\"language-text\">one-dimensional layout</code>，我們排版的方式無非就是從上往下排，或是由左到右等方向性來把各種 <code class=\"language-text\">one-dimensional layout</code> 組合成我們要的 <code class=\"language-text\">two-dimensional layout</code>。</p>\n<p>而 <code class=\"language-text\">CSS Grid</code> 不同的地方就在於，他讓我們先定義好一個 <code class=\"language-text\">container</code> 就夠了，一個 <code class=\"language-text\">container</code> 來設定好所有底下元件<strong>可以擺放的位置</strong>。</p>\n<p>什麼是<strong>“可以擺放的位置“</strong>呢？先跳過實作過程與這些屬性值的意思，以下面這張結果圖來解釋一下，你設定好 <code class=\"language-text\">CSS Grid</code> 的 container 後，該 container 會長成這副德性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 10px 0.3fr 0.7fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 25% 100px auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"/image/grid-container.png\" alt=\"Grid Container\" style=\"width: 300px;\"/>\n<p>然後你就只要把 <code class=\"language-text\">container</code> 內的元素，一一定義好各自的 CSS 屬性，來決定他們要擺在這圖中的哪個空格內即可。\n只要兩行 css，一個 div 就排好了，是不是很讓人興奮啊啊啊！</p>\n<p>好的，接下來認真說明 CSS Grid 的其他基本用法。</p>\n<h2 id=\"css-grid-terminology\" style=\"position:relative;\"><a href=\"#css-grid-terminology\" aria-label=\"css grid terminology permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid Terminology</h2>\n<p>再開始嘗試實作之前，我們先來了解並記憶一下相關的術語。</p>\n<ul>\n<li>Grid Line: 分隔元素的線，可以是垂直與水平，如下圖的紅色線</li>\n<li>Grid Track: 兩條分隔線中間的區域，簡單想就是 Grid 中的 Columns 或 Rows，如下圖的綠色區塊</li>\n<li>Grid Cell: Grid 中的基本單位，四條線組成的區域，如下圖的藍色區塊。</li>\n<li>Grid Area: 由數個 Cell 組成的區域，如下圖的紅色區塊。</li>\n<li>fr: track-size 的單位，通常用於分配 row 或 column 的非彈性尺寸設定完後之剩餘空間。以下圖的 column為例，意思即：將去掉 100px 與 10px 後的剩餘空間，分配為 30% 與 70%。</li>\n</ul>\n<img src=\"/image/grid-term.png\" alt=\"Grid Terminology\" style=\"width: 300px;\"/>\n<h2 id=\"simple-css-grid-example\" style=\"position:relative;\"><a href=\"#simple-css-grid-example\" aria-label=\"simple css grid example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple CSS Grid Example</h2>\n<p>接著我們把上面的圖片，用 CSS Grid 來 layout 出來。</p>\n<p>CSS Grid 的 properties 可以切成兩大塊，一塊是給 Parent 的，也就是 <code class=\"language-text\">Grid Container</code>，另一塊給 Children，<code class=\"language-text\">Grid items</code>。</p>\n<p>詳細的 properties 介紹可以看這篇 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete Guide Grid</a>\n（ 強力推薦閱讀，各種圖片文字輔以 css 說明，完全可以直接左轉出去看這篇就好 XD ）</p>\n<p>要使用 CSS Grid 就必須先定義好 Grid Container：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Tack<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Cell<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>grid-item item-c<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Area<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 grid container 底下的 children 是沒有順序差別的，我們都可以透過定義 grid items 的 properties 來設定他的擺放位置。當然，如果你沒有設定的話，就會照順序放置，如果該列放不下就會自動放到下一行。</p>\n<p>但基本上不會這麼做，畢竟我們就是想要能好好掌控位置啊！</p>\n<p>Grid Container 的 css 可以用下面兩種方式來寫，<code class=\"language-text\">grid-template-columns</code> 用來定義這個 Grid 有幾個 columns，每個 column 可以有多少寬度；換而言之，<code class=\"language-text\">grid-template-rows</code> 就是用來定義 row 的屬性。</p>\n<p><code class=\"language-text\">grid-template-columns</code> 和 <code class=\"language-text\">grid-template-rows</code> 有兩個主要 Values 可以設定：</p>\n<ul>\n<li>track-size：可以是任何長度(px)、百分比(%)或是先前提到的 <code class=\"language-text\">fr</code></li>\n<li>line-name：組成 column 與 row 的線的名字</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> &lt;track-size> ... | &lt;line-name> &lt;track-size> ...<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> &lt;track-size> ... | &lt;line-name> &lt;track-size> ...<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是說，你可以用純數字的方式來給予屬性質：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 100px 10px 0.3fr 0.7fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 25% 100px auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也可以安插 <code class=\"language-text\">Grid Line</code> 的名字在屬性值的設定中，這個名字在後續我們要安置 children 時可以用到！\n[Note] 要注意，因為是定義 <strong>線</strong> 的名字，所以最後一個數字的後面也可以定義名字喔！</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> [line1] 100px [line2] 10px [line3] 0.3fr [line4] 0.7fr [end]<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> [row-1-start] 25% [row-2-start] 100px [row-3-start] auto [row-end]<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就定義好需要的 Grid Container 了。</p>\n<p>接著，我們說明一下如何將前面的圖片中的 ** Area ** 這個 <code class=\"language-text\">Grid Item</code> 放到我們剛剛定義好的 Grid Container 中，因為他的位置比較特殊，在右下角的位置，較好展現 CSS Grid 方便之處。</p>\n<p><code class=\"language-text\">Grid Item</code> 的屬性基本上就是四個：<code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-column-end</code>, <code class=\"language-text\">grid-row-start</code> 和 <code class=\"language-text\">grid-row-end</code>，你也可以簡化成兩個：<code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code>。</p>\n<p><code class=\"language-text\">grid-column-start</code>, <code class=\"language-text\">grid-column-end</code>, <code class=\"language-text\">grid-row-start</code> 和 <code class=\"language-text\">grid-row-end</code> 可以有四種 Values 設定：</p>\n<ul>\n<li>line： 對照到 Grid Container 中定義的線，可以是數字或名字。</li>\n<li>span [number]：該 item 會橫跨 [number] 個 tracks。</li>\n<li>span [name]：該 item 會橫跨到名字是 [name] 的線為止。</li>\n<li>auto：自動放置，類等於 span 1。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item-area</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-start</span><span class=\"token punctuation\">:</span> line2<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-end</span><span class=\"token punctuation\">:</span> end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-start</span><span class=\"token punctuation\">:</span> row-3-start<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-end</span><span class=\"token punctuation\">:</span> row-end<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>若只用兩個屬性，中間以 / 隔開：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.item-area</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> line2 / end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> row-3-start / row-end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以此類推，完成的範例如下：</p>\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ZLodmz\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZLodmz/\">CSS-Grid-Sample</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"another-css-grid-example\" style=\"position:relative;\"><a href=\"#another-css-grid-example\" aria-label=\"another css grid example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Another CSS Grid Example</h2>\n<p>Container 不只有上面的寫法，還有一個叫做 <code class=\"language-text\">grid-template-areas</code> 的東西，搭配 Grid-Item 的 <code class=\"language-text\">grid-area</code> 可以有更簡單的寫法來進行排版。</p>\n<p>我們這邊換個例子，以一般網頁較常見的配置來說明：</p>\n<p data-height=\"423\" data-theme-id=\"0\" data-slug-hash=\"xgjvRr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample-Area\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/xgjvRr/\">CSS-Grid-Sample-Area</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>用了 <code class=\"language-text\">grid-template-areas</code> 後，在 container 的 css 中，我們可以直接定義每個元素的位置：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 0.25fr 0.25fr 0.25fr 0.25fr<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-areas</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"header header header header\"</span>\n                       <span class=\"token string\">\"main main . sidebar\"</span>\n                       <span class=\"token string\">\"footer footer footer footer\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-column-gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-row-gap</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>裡面的 <code class=\"language-text\">header</code>, <code class=\"language-text\">main</code>, <code class=\"language-text\">sidebar</code> 與 <code class=\"language-text\">footer</code> 就是在 Grid-Item 中我們要指定的名稱：</p>\n<p><code class=\"language-text\">grid-template-areas</code> 的每一行定義了 Grid-Item 內容：</p>\n<ul>\n<li>第一行代表：header 要佔據四行。</li>\n<li>第二行代表：main 佔兩行，而 sidebar 佔一行，其中 <code class=\"language-text\">·</code> 類似 placeholder 的作用。</li>\n<li>第三行代表：footer 佔四行。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #8BC574<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> header<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #748CC5<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> main<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.sidebar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #C57474<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> sidebar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.footer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FCE052<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-area</span><span class=\"token punctuation\">:</span> footer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，<code class=\"language-text\">grid-column-gap</code> 與 <code class=\"language-text\">grid-row-gap</code> 可用來設定行距。</p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>除了上述的基本屬性運用外，最前面有說過 CSS Grid 跟 Flex 是相輔相成，而實際上他們可以調配的屬性也有類似的地方。</p>\n<p>Grid Container 可以用 <code class=\"language-text\">justify-items</code> 與 <code class=\"language-text\">align-items</code> 來控制每個 Grid-item 的 <strong>垂直</strong> 與 <strong>水平</strong> 位置。</p>\n<p>Grid Item 則是可以用 <code class=\"language-text\">justify-self</code> 與 <code class=\"language-text\">align-self</code> 來控制自己在網格中的位置。</p>\n<p>像這個範例中的 Sidebar</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"NdMQXK\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"CSS-Grid-Sample-align\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/NdMQXK/\">CSS-Grid-Sample-align</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>歡迎大家參考這幾個個超詳細圖解說明：</p>\n<p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-items\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - justify-items</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-items\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - align-items</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - justify-self</a>\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Complete guide grid - align-self</a></p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>用幾個簡單的範例來學習並介紹 CSS Grid，但還是希望大家都能直接去 Codepen 上玩玩看 CSS Grid，一定都會被其方便性給驚豔到！\n前端發展雖然百家爭鳴，但是很多基本的規範如果能越來越統一越來越強大，開發者就更能省去各種 hacking 的時間，用來創造更多有創意又有美感的作品！</p>\n<p>最後再推薦一個網站 <a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a>，裡面用許多範例來進行教學，頁面也很清楚乾淨。\n有任何問題都歡迎大家指教！\t</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"http://chris.house/blog/a-complete-guide-css-grid-layout/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chris House Guide to Grid</a></li>\n<li><a href=\"http://andyyou.github.io/2016/05/04/css-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Grid 介紹</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","fields":{"slug":"css-grid"},"frontmatter":{"title":"與 CSS Grid 的第一次接觸","date":"02-03-2017","tags":["css","css-grid"]},"timeToRead":9}},"pageContext":{"slug":"css-grid","prev":{"excerpt":"『我有個朋友曾經跟我說過，時間一直走，沒有盡頭，只有路口。』\n「所以我們到現在還要苦惱跨瀏覽器的問題...大家都走不同路口。」\n『...』","html":"<blockquote>\n<p>『我有個朋友曾經跟我說過，時間一直走，沒有盡頭，只有路口。』\n「所以我們到現在還要苦惱跨瀏覽器的問題...大家都走不同路口。」\n『...』</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>先前研究 Progressive Web App 的時候就有注意到 Web Components 這個東西，也看過公司前輩使用過，甚至在前陣子 <a href=\"https://devfest-taipei-3cbee.firebaseapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GDG DevFest Taipei 2016</a> 的官方網站內，不僅使用 PWA，也採用了 Web Components 的技術（當然應該是用 Google 的 Polymer）來搭建。但還是很少看人使用與談論，我自己也是從來沒有仔細研究過（汗..</p>\n<p>我稍微搜尋一下，大部分的介紹文章都是2013, 2014 年的，過了三年，Web Components 的 API 都從 v0 來到了 v1。除了瀏覽器的支援程度外，React 跟 Vue 等等的崛起相信也是主因之一，畢竟，React 寫起來這麼爽快，實在沒必要去專研一個支援度低，複雜度也不低的技術啊！</p>\n<p>等等，那我寫這篇要幹麻...</p>\n<p>欸不是，都已經 2017 年了，新的一年總要有些新的開始，剛剛也提到，API 版本從 v0 進化到 v1 了，加上 ES6 的支援越來越好，許多寫法都更漂亮了，是個好時機來認識一下這個強大的 web 標準！</p>\n<h2 id=\"為何需要-web-components-\" style=\"position:relative;\"><a href=\"#%E7%82%BA%E4%BD%95%E9%9C%80%E8%A6%81-web-components-\" aria-label=\"為何需要 web components  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為何需要 Web Components ?</h2>\n<p>不論是什麼樣的程式，模組化在開發上都是很重要的一個概念，前端工程也不例外，我們都會希望能夠將 Web 開發過程中的 JS, CSS, HTML 封裝起來，以便後續重複使用，而過程中就會出現一些缺點：</p>\n<ol>\n<li>js, css, html 三者的資源在最一般的網頁開發上基本上是分開管理，你如果想用別人的 library，可能還需要先載入對方需要的 JQuery，include 該套件需要的 css，最後才能在你的 HTML 內加入。</li>\n<li>Scope 問題：即便是使用 React，都有可能遭遇到自己實作的 component 因為別人設定的 CSS class name 衝突而導致 Style 變動的情況。</li>\n<li>相容性：各個 Framework 間的 components 基本上無法共用，當你的舊專案想移植到 React 上頭時，即便我們先不管 React 在狀態管理的機制，很多元件要能夠相容的話，也可能需要透過 webpack 等各種 hack 的方式才能成功。</li>\n</ol>\n<p>關於前兩點，透過 React, Webpack 與 <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Modules</a> 都可以找到相對應的解法，而第三點相信透過許多 hack 也是可以解決。</p>\n<p>而 Web Components 則是希望透過規範，用更好更方便的方式，解決這些問題。</p>\n<p>Web Components 是 <a href=\"https://www.w3.org/standards/techs/components#w3c_all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C 擬定的標準</a>\n由下列四大規範組成：</p>\n<ul>\n<li>HTML Templates</li>\n<li>Custom Elements</li>\n<li>Shadow DOM</li>\n<li>HTML imports</li>\n</ul>\n<p>其中除了 <code class=\"language-text\">HTML Templates</code> 外，皆尚處在 Drafts 階段。\n接下來會一一介紹。</p>\n<p>不過這邊要先提醒一下，雖然剛剛用 React 來舉例比較，但實際上 React 與 Web Comoponent 真正要解決的問題是不同的，React 主旨在於 state 與 view 的狀態管理方式，而 Web Components 主力於整體元件的封裝，包含 Scoped CSS 等等。React component 內甚至可以載入 Web Components，畢竟 Web Components 可以只是 Plain JS, HTML, CSS。</p>\n<h3 id=\"先來個-demo\" style=\"position:relative;\"><a href=\"#%E5%85%88%E4%BE%86%E5%80%8B-demo\" aria-label=\"先來個 demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先來個 Demo</h3>\n<p>在進入規範的介紹前，怕大家覺得我騙台錢，先給大家看一下一個最簡單的 Web Component 會長什麼樣子。有興趣的話再往下看！</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/sijerap/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>可以看到在 <code class=\"language-text\">&lt;body></code> 的最下方，有個 <code class=\"language-text\">&lt;gakki-div-template></code> 的 tag，這就是我 create 出來的一個簡單的 Web Components，tag 內的文字就會像 Meme 一樣顯示在圖片上方。而圖片以及標題文字與 CSS 都是封裝在裡頭，就算我在外面對一樣的 class name 設定不同 style，(即使是 !important）都不會影響到。</p>\n<p>整段 code 我只有載入一個 polyfill 的外部 js 檔案 <code class=\"language-text\">webcomponents.min.js</code>，但如果你是用 Chrome 53 以上版本，基本上不需要也能正常運作。</p>\n<p>另外，會寫 Vue.js 的讀者可能會覺得有點點眼熟，基本上 Vue.js 的寫法跟概念都跟 Web components 雷同，Vue.js 等於是自己寫了一套 Web Components，並且提供更好的瀏覽器支援，所以如果喜歡 Web Components 的朋友們，在標準真的被各家瀏覽器實作前，可以先用用 Vue.js！</p>\n<h2 id=\"html-template\" style=\"position:relative;\"><a href=\"#html-template\" aria-label=\"html template permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Template</h2>\n<p>Template 的概念在許多 Web Framework 當中都有，像是 Django(python), EJS/Jade (Express/Node)，雖然用法皆有所不同，但概念都是共通的，而已經成為 HTML5 標準的 <code class=\"language-text\">&lt;template></code> 也不例外。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mytemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>great image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>以上述的 template 來說，我們在 html 裡面宣告一個 template，裡面包含一個 <code class=\"language-text\">&lt;img></code> 與 <code class=\"language-text\">&lt;div></code> 元件，在瀏覽器解析 HTML 文件時，template 的 DOM 物件並不會生效，裡頭包含的 Javascript 也不會執行，但是會產生一個 <code class=\"language-text\">cloneable</code> 的 DOM 物件，讓你在整個 web app 的生命週期都能使用。</p>\n<p>來看一個簡單的使用情境：</p>\n<p>假設我們要做一個簡單的 counter，計算 button 的點擊次數，然後每次都將次數新增到 button 下方的話，可以怎麼做？</p>\n<p>可能會用字串串接的方式：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/mumacu/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>但如果有了 template 的幫助，可以將 HTML 字串的部分與邏輯分開：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/yaxiyir/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>source: <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/template/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">html5rocks-html-template</a></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">useIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Use me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Update something in the template DOM.</span>\n    <span class=\"token keyword\">let</span> span <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    span<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Template used: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我們準備了一個 <code class=\"language-text\">template</code>，<code class=\"language-text\">id</code> 為 <code class=\"language-text\">counter-template</code>，在每次 button 被點選時，從 template 中取得目前的 <code class=\"language-text\">content</code>，將內容加一之後再 append 到 document 內。</p>\n<p>雖然這個例子看起來，使用 template 反倒還要寫比較多 code，但是如果你今天需要產生的 template 是很複雜的 HTML 結構時，<code class=\"language-text\">template</code> 絕對可以為你帶來不少幫助的。</p>\n<p>我們也可以直接複製 template 內容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#counter-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> copyedContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>copyedContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<h2 id=\"custom-elements\" style=\"position:relative;\"><a href=\"#custom-elements\" aria-label=\"custom elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Elements</h2>\n<p>Custom Elements API 是構成 Web Components 的基礎之一，有了它的幫助，我們可以自己用最單純的 JS/HTML/CSS 來創造新的 HTML tags，或是 extend 別人的 components，甚至是擴展原有現存的 HTML tags；而也因為可以自行定義 tag 的名稱，讓標籤能夠更加語意化。</p>\n<p>Chrome 在 version 33 時就有推出 v0 的 Custom Elements，而到了現在 version 55，已經採用 v1 的版本，雖然觀念是一樣的，但語法有許多差異，以下介紹皆為 v1 版本，並使用 ES6 的寫法。</p>\n<p>要新增一個自定義的 HTML tag 很簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GakkiTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">,</span> GakkiTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是可以用暱名函式的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>兩種方式都可以讓你產生一個 <code class=\"language-text\">&lt;gakki-div-template>&lt;/gakki-div-template></code> 的 tag。</p>\n<p>其中我們用到 ES6 的 class 語法，來繼承 <code class=\"language-text\">HTMLElement</code>，這樣做可以讓我們的 <code class=\"language-text\">GakkitTemplate</code> 擁有所有 DOM API，並且讓你自己新增 Method 到你創建的這個 element 的 DOM interface 中。</p>\n<p>拿最前面的 Demo 來舉例，宣告元素的地方我們可以修改成這樣：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/vuvoceq/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>變動有點多，沒關係我們慢慢解釋：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GakkiTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    \n  <span class=\"token keyword\">get</span> <span class=\"token function\">light</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">light</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Reflect the value of the light property as an HTML attribute.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Can define constructor arguments if you wish.</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先是 get/set，這兩個 method 代表賦予 <code class=\"language-text\">light</code> 這個 property getter/setter 的功能，這個要做什麼呢？</p>\n<p>假設當別人使用我們的 custom-element 時，有可能他們會想要能透過給予 <code class=\"language-text\">light</code> 這個 property 來設定以下的 style：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">gakki-div-template[light]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.5\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>當然如果他直接設定 <code class=\"language-text\">&lt;gakki-div-template light>&lt;/gakki-div-template></code> 就可以吃到 style，但多數時候我們會希望能用 JS 的方式來設置，像是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> gakkiDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gakki-div-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngakkiDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>light\n<span class=\"token comment\">// 此時會觸發 getter，return this.hasAttribute('light');</span>\n\ngakkiDiv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ligth <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 此時會觸發 setter，this.setAttribute('light', '');</span></code></pre></div>\n<p>此時我們的 custom-elements 就需要給予 getter/setter 的 method，並在其中設定 <code class=\"language-text\">this.setAttribute()</code> 的方式讓我們的 elements 吃得到該 property 的設定。（ Note: property 的名稱跟 get/set 的名稱要相同）</p>\n<p>再來是比較特別的兩個 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// Only called for the change attributes due to observedAttributes</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過定義 <code class=\"language-text\">static get observedAttributes()</code> 可以讓我們的 element 監聽該設定的 attributes 有沒有被 consumer 設置，如果有變動，會觸發 <code class=\"language-text\">attributeChangedCallback()</code> 來執行我們想要的動作。</p>\n<p>那當然也可以加入自定義的 method，像是這邊的 <code class=\"language-text\">addImg()</code>；也可以在 constructor 的時候加入 EventListener，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Setup a click listener on &lt;gakki-div-template> itself.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     \n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"custom-elements---life-cycle\" style=\"position:relative;\"><a href=\"#custom-elements---life-cycle\" aria-label=\"custom elements   life cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Elements - Life Cycle:</h3>\n<p>Custom Elements 有自己的生命週期，前述的 <code class=\"language-text\">attributeChangedCallback()</code> 也是其中之一：</p>\n<ul>\n<li>constructor：Custom Elements 建構式，通常會在這邊 create Shadow DOM。</li>\n<li>connectedCallback：當你插入元件到 DOM 時會被呼叫。</li>\n<li>disconnectedCallback：當你從 DOM 中移除元素時會被呼叫，可以在這邊 remove Event listener 之類的。</li>\n<li>attributeChangedCallback(attrName, oldVal, newVal)：監聽的屬性有變動時會被呼叫。</li>\n<li>adoptedCallback：整個 custom element 被人用 <code class=\"language-text\">document.adoptNode(el)</code> 呼叫時觸發。</li>\n</ul>\n<p>可以玩玩看上述範例，看看我做了什麼無聊的功能 (畢竟只是範例麻 XD)。</p>\n<p>除了 <code class=\"language-text\">HTMLElement</code> 外，你也可以繼承別人或是你自己的 Custom-Elements：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyDrawer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppDrawer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always call super() first in the ctor. This also calls the extended class' ctor.</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fancy-app-drawer'</span><span class=\"token punctuation\">,</span> FancyDrawer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或是繼承 Native Element：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// See https://html.spec.whatwg.org/multipage/indices.html#element-interfaces</span>\n<span class=\"token comment\">// for the list of other DOM interfaces.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FancyButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLButtonElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always call super() first in the ctor.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawRipple</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>offsetX<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>offsetY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Material design ripple animation.</span>\n  <span class=\"token function\">drawRipple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ripple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fancy-button'</span><span class=\"token punctuation\">,</span> FancyButton<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這邊要注意的是，定義繼承 Native element 的元件時，需要傳入第三個參數 {extendds: '{native element you extend}'}\n表明你要繼承的元素是什麼，因為不同的 HTML tags 可能共享相同的 DOM interface，像是 <code class=\"language-text\">&lt;q></code> 與 <code class=\"language-text\">&lt;blockquote></code> 都是 <code class=\"language-text\">HTMLQuoteElement</code>。</p>\n<p>而繼承 Native Element 的 Custom-Element 可以有另一種特殊使用方式（不過支援度更低 XD）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> This <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span> is a fancy button<span class=\"token punctuation\">.</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>button is<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-button\"</span> disabled<span class=\"token operator\">></span>Fancy button<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"shadow-dom\" style=\"position:relative;\"><a href=\"#shadow-dom\" aria-label=\"shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadow DOM</h2>\n<p>Shadow DOM 算是 Web Components 中的靈魂角色，主要就是設計來建構 Component-based 的 web app，它所帶來的好處有下列幾項：</p>\n<ul>\n<li>Isolated DOM：在 Shadow DOM 裡面的任何 nodes 都不會被外面的 <code class=\"language-text\">document.querySelector()</code> 給取得，不會被汙染也不會去污染別人。</li>\n<li>Scoped CSS：定義在 Shadow DOM 內的 CSS 其作用域就只在 Shadow DOM 當中，不會作用於 Shadow DOM 外的 elements，而其他 Page 的 style 也不會影響到 Shadow DOM 內的定義。</li>\n<li>Composition：可以透過 Shodow DOM 賦予你的 component 擁有 Declarative, markup-based 的 API 可操作。</li>\n<li>Productivity：既然有 Isolated DOM 跟 Scoped CSS，就可以將你的 web app 切割成多個 DOM object 組成，完成模組化的使命！</li>\n</ul>\n<h3 id=\"名詞介紹\" style=\"position:relative;\"><a href=\"#%E5%90%8D%E8%A9%9E%E4%BB%8B%E7%B4%B9\" aria-label=\"名詞介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>名詞介紹</h3>\n<p>Shadow DOM：跟一般的 DOM 差異在於其產生的方式，以及他與頁面其他物件的互動方式。</p>\n<p>shadow tree：一般來說你可以利用 <code class=\"language-text\">document.createElement()</code> 來創建 DOM，並 <code class=\"language-text\">appendChild()</code> 到其他 element 上，而 shadow dom 則是依附在某個 normal DOM 底下，產生一個 scoped subtree，稱作 <code class=\"language-text\">shadow tree</code>。</p>\n<p>shadow host：掛載 shadow tree 的元素即為該 Shadow DOM 的 <code class=\"language-text\">shadow host</code>。</p>\n<h3 id=\"create-shadow-dom\" style=\"position:relative;\"><a href=\"#create-shadow-dom\" aria-label=\"create shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Shadow DOM</h3>\n<p>其實 Shadow DOM 不一定要用在建構 Web components，要創建 Shadow DOM 只要用下列方式即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> shadowRoot <span class=\"token operator\">=</span> header<span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadowRoot<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>#menu { ... }&lt;/style> &lt;!-- styles are scoped to fancy-menu! -->\n      &lt;div id=\"menu\">...&lt;/div>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Could also use appendChild().</span>\n\n<span class=\"token comment\">// header.shadowRoot === shadowRoot</span>\n<span class=\"token comment\">// shadowRoot.host === header</span></code></pre></div>\n<p>這樣一來，你就有一個 header 底下的 Shadow DOM 了，裡面定義的 #menu style，不會向內外影響。</p>\n<p>但並非所有 DOM 都可以掛載 Shadow DOM，有些事已經有自己的 Shadow DOM （像是 <code class=\"language-text\">&lt;textarea></code>, <code class=\"language-text\">&lt;input></code>），有些是沒什麼必要（像是 <code class=\"language-text\">&lt;img></code>）。</p>\n<h3 id=\"create-shadow-dom-for-custom-element\" style=\"position:relative;\"><a href=\"#create-shadow-dom-for-custom-element\" aria-label=\"create shadow dom for custom element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Shadow DOM for Custom Element</h3>\n<p>在 Web Components 中，Shadow DOM 都會搭配 Custom Element 出現，如果說 Custom Element 提供 Web Component 骨幹 (HTML, DOM interface)，Shadow DOM 就是提供血和肉 (JS, Scoped CSS)。</p>\n<p>一樣以我們剛剛的範例來看，在 Custom Element 中創建 Shadow DOM：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#gakki-div-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM <span class=\"token operator\">=</span> shadowRoot<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Setup a click listener on &lt;gakki-div-template> itself.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addImg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>這邊有幾點要說明：</p>\n<ol>\n<li>利用 <code class=\"language-text\">this.attachShadow({mode: 'open'})</code> 來綁定 Shadow DOM 到目前的 Custom Element，其中的 <code class=\"language-text\">{mode: 'open'}</code> 是代表這是個 open mode 的 Shadow DOM，host 這個 Shadow DOM 的 Element (以這邊的例子就是我們的 Custom Element）可以透過 JS 取得 Shadow DOM 內部的 DOM 元件，反之，如果設置為 close，即無法取得，官方不建議我們設定為 close，詳情可以參考 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這裡</a></li>\n<li>透過 <code class=\"language-text\">const t = document.querySelector('#gakki-div-template');</code> 我們取出 template，並利用 <code class=\"language-text\">t.content.cloneNode()</code> 複製一份 template，接著將此 template appendChild 到我們的 shadow tree 中。</li>\n</ol>\n<p>透過這樣的方式，我們就擁有一個擁有 Scoped template 的 Custom Element，因為整個 Element 的內容都是透過 template 與 Shadow DOM 產生的，別人可以自由拿去使用，也不用擔心他們會污染到這個元件！</p>\n<h3 id=\"slot-element\" style=\"position:relative;\"><a href=\"#slot-element\" aria-label=\"slot element permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slot element</h3>\n<p>在我們範例的 template 中有個奇妙的元素 <code class=\"language-text\">slot</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gakki-div-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    ...\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Gakki Meme<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://static.ettoday.net/images/2083/d2083850.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>它的用途很簡單，就是一個 placeholders，讓元件的 consumer 可以安插自己的 DOM 進去，而你透過 slot 的位置來決定這些 user 的 DOM 該放在哪些位置。</p>\n<p>在範例中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>我們將文字 '你好，我是森山'，放入 custom element，他就會被我們安插到 <code class=\"language-text\">&lt;slot>&lt;/slot></code> 的位置</p>\n<p>如果有兩個以上的元素要插入的話，就需要用 <code class=\"language-text\">name</code> 來綁定：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>嗨..妳好>//&lt; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Gakki Meme<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://static.ettoday.net/images/2083/d2083850.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slot2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/jezepof/embed\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.40.3\"></script></p>\n<p>你們也可以打開 DevTool 來看一下 Shadow DOM 的元件展開會是長什麼樣子，這邊就不再贅述。</p>\n<h3 id=\"shadow-dom-styling\" style=\"position:relative;\"><a href=\"#shadow-dom-styling\" aria-label=\"shadow dom styling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shadow DOM Styling</h3>\n<p>接下來介紹如何在 Shadow DOM 中設定 CSS。</p>\n<p>在 Shadow DOM 中的 CSS 其實跟一般使用上沒有太大差異，你所設定的 CSS selector 都是 local 的，也就是只能設定到 Shadow DOM 裡頭的 element，不會受外部影響，也不會影響到外部。</p>\n<p>比較需要說明的有三個部分：</p>\n<ol>\n<li><code class=\"language-text\">:host</code>：</li>\n</ol>\n<p>你可以用 <code class=\"language-text\">:host</code> 這個 selector 來設定你的 component 的 style，但要注意的是，<code class=\"language-text\">:host</code> 所設定的值，是可以被外部 component 的使用者蓋過去的。</p>\n<p>像範例中為了讓 slot 的字能絕對定位，我需要把 <code class=\"language-text\">&lt;gakki-div-template></code> 本身設定為 <code class=\"language-text\">relative</code></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:host</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">:host-context</code>：\n讓你根據 Component 的 Context 來設定 style，像是：</li>\n</ol>\n<p>當處於 darktheme class 下時，顏色要變成白色。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>darktheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fancy-tabs</span><span class=\"token punctuation\">></span></span>\n    ...\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fancy-tabs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">:host-context(.darktheme)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">::slotted</code>：\n最後則是透過 <code class=\"language-text\">::slotted</code>，來控制傳入的 slot 元件的 style。</li>\n</ol>\n<p>像範例中：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n            <span class=\"token selector\">...\n            ::slotted(#me)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            ...\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n        ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n    ...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>gakki-div-template</span> <span class=\"token attr-name\">light</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">slot</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好，我是森山<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>me<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>嗨..妳好>//&lt;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>gakki-div-template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"event-handle-in-shadow-dom\" style=\"position:relative;\"><a href=\"#event-handle-in-shadow-dom\" aria-label=\"event handle in shadow dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Handle in Shadow DOM</h3>\n<p>Shadow DOM 還有許多 Event 處理，包含 Slot 的 event 處理等等 issue 可以探討，這邊只簡單講個主要觀念。</p>\n<p>在 Shadow DOM 中對於事件處理，是透過在 Event Bubble 的過程中，來重新定位 event target 的位置，讓該事件像是從 Host 的元件觸發，並且會擋掉可能影響到外部頁面的事件處理。</p>\n<p>詳細可以看 <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這邊</a> 與 <a href=\"http://www.jianshu.com/p/e8994b92bb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這邊</a></p>\n<h2 id=\"html-import\" style=\"position:relative;\"><a href=\"#html-import\" aria-label=\"html import permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Import</h2>\n<p>Web Component 的最後一哩路，當我們製作好我們的 Component 後，當然會希望能很方便地給他人使用，HTML Import 就是要處理這樣的問題。</p>\n<p>他讓我們可以直接 link 一份 HTML 檔案，不管他是 template 也好，用 shadow dom 創建的 custom-element 也好，都可以直接 inlcude。</p>\n<p>使用方法很簡單，假設我們範例中的 HTML 叫做 <code class=\"language-text\">GakkiMeme.html</code>，別人想要 include 的話，只要在他的 index.html 中加入 <code class=\"language-text\">&lt;link rel=\"import\" href=\"GakkiMeme.html\"></code> 即可使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlindex.html\"><pre class=\"language-htmlindex.html\"><code class=\"language-htmlindex.html\">&lt;head&gt;\n  &lt;link rel=&quot;import&quot; href=&quot;GakkiMeme.html&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;gakki-div-template&gt;\n    &lt;span slot=&#39;title&#39;&gt; 嗨嗨嗨 &lt;/span&gt;\n    &lt;div id=&quot;me&quot;&gt; 嘿嘿嘿 &lt;/div&gt;\n  &lt;/gakki-div-template&gt;\n&lt;/body&gt;</code></pre></div>\n<p>當然 Import 的部分還有很多可以玩，有興趣的可以到 <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML5rocks</a> 研究。</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Web Components 提供我們一種方式來建構 reusable components，能支援 Cross-browser (當然要等標準全通過，瀏覽器全支援，但相信那天會到來的！)；不需要任何 framework 支援；也不需要學特殊語法，就是 DOM/CSS/HTML/JS；可以跟現有 Framework 共存使用。</p>\n<p>相信在未來我們會有更美好的 Web 可以使用！</p>\n<p>最後附上 Browser Support 的 Information 給各位：</p>\n<p><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">custom-elementv1</a>\n<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom#historysupport\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shadow-dom</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://github.com/w3c/webcomponents\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Web Components</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/customelements\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Custom Elements v1</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/shadowdom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shadow DOM v1</a></li>\n<li><a href=\"http://www.jianshu.com/p/e8994b92bb7a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components整理及分享</a></li>\n<li><a href=\"https://blog.hinablue.me/web-components-first-look/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components 初探</a></li>\n<li><a href=\"https://github.com/basic-web-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">basic-web-components</a></li>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML Imports</a></li>\n</ol>","id":"d522f028-f47b-52a4-be20-f67a94691feb","fields":{"slug":"web-components"},"frontmatter":{"date":"2017-01-06T13:00:24.000Z","title":"2017，讓我們再來看看 Web Components 吧！","tags":["web components","javascript"],"type":"tech","slug":"web-Components"},"timeToRead":17},"next":{"excerpt":"好歌分享：Boney M. - Sunny","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/HddPrwMUGVc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boney M. - Sunny</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/HddPrwMUGVc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>上個月我們介紹過 Web Component，大致上把 Web Component 的相關知識都介紹一輪了，也提供了一些範例，但是並沒有製作出一個完整可用的元件，\n因此今天就好好的來實做一個簡易又實用的 Web Component（對我來說很實用啦...），並且將他發佈到 <a href=\"https://www.webcomponents.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webcomponent.org</a> 上面。\n最後也會說明一下我嘗試將我製作的 webcomponent 與 react 整合的心得。</p>\n<p>開始前還是先給大家看一下看完這篇文章後可以達到的成果，發佈到 Webcomponent.org 並有 inline demo：</p>\n<p><img src=\"/image/webcomponent-published.png\" alt=\"Fianl\" title=\"Final Result\"></p>\n<p><a href=\"https://www.webcomponents.org/element/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">format-num webcomponent</a>\n<a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a></p>\n<h2 id=\"idea\" style=\"position:relative;\"><a href=\"#idea\" aria-label=\"idea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Idea</h2>\n<p>在一些活動頁面或是互動性較高的網站中，顯示參與人數是很常見的功能，而有些時候我們並不需要很確切的數目，反倒是希望能夠約分成以 K（千） 或 M（百萬） 為單位，\n這時通常我會寫個類似下面這樣的小函式來作轉換，並在每個需要的 React Component 中去 require 這個函式使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">></span> <span class=\"token number\">999</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'k'</span> <span class=\"token operator\">:</span> num\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但就只是個很簡單的函示，卻每個需要的 Component 都要 require 一次，久了就會覺得怎麼 HTML 5 不出一個 tag 是可以幫我把數字直接做 format 的呢？\n這樣我就只要用對 Tag，就會有我要的結果了，也不用特別去寫個小 function。</p>\n<p>想到這就覺得似乎是個好機會來練習一下 Web Comopnent 的實作，而且依照 React 的<a href=\"https://facebook.github.io/react/docs/web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方說法</a> Web Component 跟 React 是可以相互在對方的環境下使用的！\n那還等什麼呢！</p>\n<h2 id=\"那就來實作吧\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%B0%B1%E4%BE%86%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"那就來實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那就來實作吧</h2>\n<p>根據上一次的學習 <a href=\"http://blog.techbridge.cc/2017/01/06/web-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2017，讓我們再來看看 Web Components 吧！</a>，\n很快的就能建立好基本的架構：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlformatnum.html\"><pre class=\"language-htmlformatnum.html\"><code class=\"language-htmlformatnum.html\">&lt;!-- template --&gt;\n&lt;template id=&quot;format-num-template&quot;&gt;\n  &lt;style&gt;\n    :host {\n      position: relative;\n    }\n  &lt;/style&gt;\n  &lt;span class=&quot;wrapper&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/span&gt;\n&lt;/template&gt;\n\n&lt;!-- custom element --&gt;\n&lt;script&gt;\nclass formatNum extends HTMLElement {\n    constructor() {\n      super();\n      let shadowRoot = this.attachShadow({mode: &#39;open&#39;});\n      const t = document.querySelector(&#39;#format-num-template&#39;);\n      const instance = t.content.cloneNode(true);\n      shadowRoot.appendChild(instance);\n      this.shadowDOM = shadowRoot;\n    }\n  }\n  customElements.define(&#39;format-num&#39;, formatNum);\n&lt;/script&gt;</code></pre></div>\n<p>接著我開始構想這個 tag 需要有哪些 attribute 可以設置，最基本我會需要能指定小數點後的位數，並且能指定轉換單位的型態，因為有時候可能會需要二進位的轉換，也就是以 1024 為單位，而有時需要計算人數時，則是以 K, M, B 來顯示。</p>\n<p>因此會需要設置兩個 attribute，<code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得要設置 <code class=\"language-text\">observedAttributes</code>，這樣使用者改變 tag 的 <code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code> 時，我們才可以有對應動作，也就是重新 format 一次數字。</p>\n<p>接著加入下列兩個關鍵 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們在 <code class=\"language-text\">observedAttributes</code> 中列舉的 attribute 只要有所變動都會觸發 <code class=\"language-text\">attributeChangedCallback</code>，並且執行 <code class=\"language-text\">formatNum()</code>，\n而 <code class=\"language-text\">formatNum()</code> 就會從 shadowDOM 中抓出數字，並且從 attribute 中抓出小數點位數以及是哪種單位，經過 <code class=\"language-text\">format()</code> 的轉換後再將資料塞回 shadowDOM 中。\n（ <code class=\"language-text\">format()</code> 就是類似最上方的數字單位轉換函示，不是重點就不列出，有興趣可以到我的 <a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git repo</a> 連結去看）</p>\n<p>寫到這邊看起來就大功告成了，嗯，我也這麼覺得。</p>\n<p>但是事情就是沒有憨人想得這麼簡單。</p>\n<p>當我在 html 裡面加上我新增的 element <code class=\"language-text\">&lt;format-num digits='1'>1234&lt;/format-num></code> 時，竟然毫無反應，就只是個 1234，而不是 1.2k。</p>\n<p>原因是我以為在執行 <code class=\"language-text\">formatNum()</code> 的時候，可以從 <code class=\"language-text\">this.shadowDOM.querySelector('slot').textContent</code> 裡面取得 slot 內的值的，\n但似乎無法直接這樣做，就算能透過 shadowDOM 存取，當我們想要將 format 過的數字塞回 tag 內的時候，由於原先的 1234 屬於 light DOM，我們需要透過 <code class=\"language-text\">document.querySelect('format-num').innerHML</code> 的方式去改值，這樣變成由外部的 context（document) 來更改 light DOM，似乎有點不符 web component 的精神，應該要讓一切操作保持在內部才對。</p>\n<p>因此換個方式，我們不讓使用者將值寫在 slot 中，而是透過 attribute 來設置，而我們再將 parse 過的結果利用 shadowDOM 設置到 slot 中，這樣就能順利顯示了！</p>\n<p>修改程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 增加 num attribute</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 修改 formatNum()，從 attribute 中拿 num 的值，並透過 shadowDOM 塞進 slot 顯示</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>digits <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>成果：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/xezujo/embed?html,js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.5\"></script></p>\n<h2 id=\"讓別人-import-你的-webcomponent\" style=\"position:relative;\"><a href=\"#%E8%AE%93%E5%88%A5%E4%BA%BA-import-%E4%BD%A0%E7%9A%84-webcomponent\" aria-label=\"讓別人 import 你的 webcomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>讓別人 Import 你的 Webcomponent</h2>\n<p>本來想說做完了，準備要發佈的時候，發現需要準備 Demo page，\n雖然我都直接在 jsbin 與 codepen 上方寫，還沒有真正在別的 page <code class=\"language-text\">Import</code> 過 webcomponent，但想說應該就很簡單啊，把我的 code 都放在一個 html 內，\n然後透過 <code class=\"language-text\">&lt;link rel=\"import\" href=\"../src/formatNum.html\"></code> 不就得了？</p>\n<p>正當我這麼想的時候，卻發現我的 demo page 一直無法正常顯示，出現 \"Uncaught TypeError: Cannot read property 'content' of null\" 的 error，\n是在 custom element constructor 的地方：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#format-num-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>竟然找不到我的 template ?!</p>\n<p>仔細研究了好一陣子後才發現到這篇文章 <a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">introduction to html imports</a></p>\n<p>裡面有提到 html import 時的行為差異，舉例來說：</p>\n<p><em>index.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatNum.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> // 1.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Import Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>     // 4.</code></pre></div>\n<p><em>formatNum.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 2.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 3.</code></pre></div>\n<p>以上面的例子來說明，index.html 載入 formatNum.html，其 script 的執行順序如上面標記，\n但 <span style=\"color:red\">index.html 與 formatNum.html 中的 document 物件卻都是指向 index.html。</span></p>\n<p>因此當我的 demo page 在執行存在於 formatNum.html 內的 script，也就是 constructor 時，document 就找不到存在於 formatNum.html 內的 template 了。</p>\n<p>所以該怎麼解決呢？</p>\n<p>為了要保存住 formatNum.html 自己的 document object，我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">documentCurrentScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>_currentScript <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mainDoc <span class=\"token operator\">=</span> documentCurrentScript<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">;</span></code></pre></div>\n<p>currentScript 是只有在有支援 HTML import 的瀏覽器中才有的屬性，若是透過 webcomponent.js 等 polyfill，則是用 _currentScript</p>\n<h2 id=\"打包發佈\" style=\"position:relative;\"><a href=\"#%E6%89%93%E5%8C%85%E7%99%BC%E4%BD%88\" aria-label=\"打包發佈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打包發佈</h2>\n<p>問題都解決以後當然就要發佈到 Webcomponent.org 上面去了</p>\n<p><img src=\"/image/webcomponentIdx.png\" alt=\"webcomponent.org\" title=\"webcomponent.org\"></p>\n<p>從網站上的步驟看來很簡單，只要你的 repository 滿足三個條件，並加上 badge 與 inline demo，就可以發佈了：</p>\n<img src=\"/image/publishWebcomponent.png\" alt=\"publish to webcomponent\" style=\"width: 500px;\"/>\n<p>三個條件：</p>\n<ol>\n<li>有 Open source license，只要是被 <a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Source Initative</a> 認可的都可以。</li>\n<li>Tagged release，這點很重要，他會依照你 repository 裡面的 tag 去抓檔案，如果你沒有設置的話，就算 repo 中有程式，也會發佈失敗，而且如果你有更新，也一定要有新版 Tag release，Webcomponent.org 這邊才會更新。我一開始因為有些設定沒做好，重新 push 後忘了 release tage，怎麼樣都是發佈失敗...</li>\n<li>README，這當然也是很重要，你總得要介紹一下內容。此外，如果你想要放 inline demo 的話，也是要設置在 README.md 當中。</li>\n</ol>\n<p>加上 badge：</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token url\">[<span class=\"token content\">![Published on webcomponents.org</span>][<span class=\"token variable\">webcomponents-image</span>]</span>][webcomponents-url]\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-image</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://img.shields.io/badge/webcomponents.org-published-blue.svg</span>\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-url</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://www.webcomponents.org/element/arvinh/format-num</span></code></pre></div>\n<p>Inline Demo：</p>\n<p>要製作 inline demo 很簡單，只要在你的 README.md 中加入：</p>\n<p><img src=\"/image/inlineDemoscript.png\" alt=\"Inline Demo\" title=\"Inline Demo\"></p>\n<p>你只需要在 <code class=\"language-text\">&lt;custom-element-demo></code> 中 import 你的 custom-element 即可，<code class=\"language-text\">html</code> block 內的就是你 demo 元件的地方了。</p>\n<p>以我的 README.md 來說，完成後會長這樣：</p>\n<p><img src=\"/image/final-readme.png\" alt=\"Final README\" title=\"IFinal README\"></p>\n<p>當你照著網站上所寫的，完成所有步驟後，可以到這邊去填寫 Repo 名稱並進行發佈。</p>\n<p><img src=\"/image/readyToPublish.png\" alt=\"Ready to publish\" title=\"Ready to publish\"></p>\n<p>然後你會發現發佈失敗，因為網站隱藏了一個步驟沒有寫到。</p>\n<p>他會要求你的 repo 中要含有 <code class=\"language-text\">bower.json</code>，但應該是沒有要你 register 到 bower 中，不過我有順手放上去就是了，\n所以也能透過 <code class=\"language-text\">bower install format-num</code> 來下載這個 webcomponent。</p>\n<p>總之，加上 bower.json 以後應該就能順利發佈了！</p>\n<p>此外，你也可以到 <a href=\"https://www.webcomponents.org/preview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.webcomponents.org/preview</a> 輸入你的 git repo url，就可以在發佈前先進行 preview，\n在這邊甚至能動態調整你的 inline demo！就由讀者自行玩玩吧！</p>\n<h2 id=\"work-with-react-but-failed\" style=\"position:relative;\"><a href=\"#work-with-react-but-failed\" aria-label=\"work with react but failed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Work with React but failed</h2>\n<p>製作這個 Web Component 的初衷是希望能夠透過它讓我輕鬆地放在 React 的 component 中當一般 tag 使用，因此我也嘗試了一下簡單的範例：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"ZeOLRP\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"web-component: <format-num> with React\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZeOLRP/\">web-component: <format-num> with React</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>但眼尖的讀者會發現，我在 html 內又再寫了一次 template...</p>\n<p>沒錯，因為再度遇到 document 存取不到 template 的 error，這次連使用 currentScript 都無法解決，我想是跟 Rect compile 的時間以及 Webcomponent script 載入執行的時間順序有關，導致存取不到正確的 docuemnt scope。</p>\n<p>當然這也只是我的猜測，若有讀者了解原因請不吝指教！</p>\n<p>在試著整合 React 的過程中也有發現，babel 在處理 extends HTMLElement 的元件上有些衝突，需要透過 <a href=\"https://github.com/github/babel-plugin-transform-custom-element-classes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-transform-custom-element-classes</a> 來解，不過沒有真正試過，畢竟我會希望 webcomponent 是獨立的，\n不需要跟 React 一起經過 babel 的 compile，而在支援 webcomponent 的 browser 上，理論上也不需要 babel 編譯 es6 的 code 才對...</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然最後還是沒能順利整合進 React 當中，不過原先預期輕鬆完成的小玩具竟然還是卡了不少關，也有學習到，不過總是因為時間有限沒辦法很完整的將查到的資料認真讀完，\n或許我的實作過程與觀念的理解有錯誤的地方，歡迎讀者留言指教，我會非常感激的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.webcomponents.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components org</a></li>\n<li><a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to html import</a></li>\n<li><a href=\"http://staltz.com/react-could-love-web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React could love web components</a></li>\n</ol>","id":"273fcb37-376d-5e10-844b-69ed092a4ef8","fields":{"slug":"webcomopnent-practice"},"frontmatter":{"date":"2017-03-04T13:34:49.000Z","title":"Web Component 實戰","tags":["web components","javascript"],"type":"tech","slug":"webcomopnent-practice"},"timeToRead":9},"type":"tech"}},"staticQueryHashes":["2123680655"]}