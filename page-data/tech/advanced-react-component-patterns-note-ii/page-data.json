{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/advanced-react-component-patterns-note-ii","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『你能相信聖誕老人是真實存在的有十年之久，那你也能相信你自己，哪怕只有十秒鐘』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>上次我們介紹了三種 Rect Component Patterns，包含 <code class=\"language-text\">Compound component</code>、<code class=\"language-text\">Render props component</code> 與 <code class=\"language-text\">Prop collections &amp; getters</code>，而今天要繼續往下介紹剩下的五個 Patterns:</p>\n<ul>\n<li>State Initializers</li>\n<li>State Reducer</li>\n<li>Control Props</li>\n<li>Provider</li>\n<li>Higher-order component</li>\n</ul>\n<p>若對前三個 Pattern 不熟悉，或是沒看過上一篇文章的可以移駕至 <a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">進階 React Component Patterns 筆記（上）</a></p>\n<p>接下來的 Pattern 都會延續之前的 Demo 範例，所以建議先閱讀過上篇！</p>\n<p>此外，每個 Pattern 的最後都放有 codesandbox 的 demo link，覺得文字太多的可以直接去看完整的 code 喔！</p>\n<h1 id=\"state-initializers\" style=\"position:relative;\"><a href=\"#state-initializers\" aria-label=\"state initializers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Initializers</h1>\n<p>有時候我們會希望能讓元件回復到初始狀態，或是能讓使用者自己定義初始狀態，這時就適合採用 State initializer 技巧。</p>\n<p>首先，我們利用自定義的 <code class=\"language-text\">inistialState</code> 來存放元件初始狀態，而在真正的 state 中去 reference 它：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...other function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣一來，要實作 <code class=\"language-text\">reset</code> 函式就相當簡單了：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而要讓使用者能自定義元件初始狀態的方式，相信多數讀者都有用過，也就是讓使用者透過 props 來定義元件的 initial state：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialOn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...other function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由於並不是所有使用者都會自行定義初始狀態，所以別忘了在 <code class=\"language-text\">defaultProps</code> 中宣告我們自己希望的初始值喔！</p>\n<p><a href=\"https://codesandbox.io/embed/2wp3jr6o8j\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo link</a></p>\n<p>上面的 Demo 範例是延續<a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上篇</a>提到的 <code class=\"language-text\">Prop collections &amp; getters</code> 與 <code class=\"language-text\">Render props</code>，所以這邊加入的 <code class=\"language-text\">reset</code> 按鈕要記得加入 <code class=\"language-text\">getStateAndHelpers</code> 中傳遞給 <code class=\"language-text\">render props</code> 中的 children 使用。</p>\n<h1 id=\"state-reducer\" style=\"position:relative;\"><a href=\"#state-reducer\" aria-label=\"state reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Reducer</h1>\n<p>State Reducer 是一個蠻有趣的概念，主要目的是讓使用者能夠介入元件狀態改變的行為，讓元件在每次的 <code class=\"language-text\">setState</code> 時，都能夠被使用者影響。</p>\n<p>舉個簡單的範例，像是我們先前的 Toggle component，如果今天使用者提出個需求，想要讓這個元件只能被 toggle 三次，那我們該怎麼做呢？</p>\n<p>你當然可以讓使用者多傳一個 props 控制次數，然後在內部更動狀態時去檢查有沒有超過那個次數：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onReset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    initialOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 元件內部多一個 toggleTimes 來控制目前的 toggle 次數</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>initialOn<span class=\"token punctuation\">,</span> currentToggleTimes<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 每次 toggle 時判斷有沒有超過使用者定義的 toggle 次數上限</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentToggleTimes <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>toggleTimes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle too much'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on<span class=\"token punctuation\">,</span>\n        currentToggleTimes<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>currentToggleTimes <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...other methods</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但你也知道使用者的需求總是會變動，假如他突然間也想控制 reset 的次數怎麼辦? 你的程式不就改不完？</p>\n<p>這時我們就能採用 <code class=\"language-text\">State Reducer</code>，先看一下使用者應該會怎麼使用 <code class=\"language-text\">State Reducer</code>：\n｀</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> timesClicked<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState\n  <span class=\"token function-variable function\">toggleStateReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> changes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// state 為 Toggle 的 current state</span>\n    <span class=\"token comment\">// changes 為該次 Toggle 動作所造成的改變</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>timesClicked <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>changes<span class=\"token punctuation\">,</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> changes\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle\n          initialOn<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n          onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> timesClicked <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n               timesClicked<span class=\"token operator\">:</span> timesClicked <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          onReset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">initialState</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          stateReducer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleStateReducer<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> getTogglerProps<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// render props</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們讓使用者傳入一個 <code class=\"language-text\">stateReducer</code>，其中接受兩個參數，一個是 Toggle component 的 current state，另一個是該次 Toggle component 執行 <code class=\"language-text\">setState</code> 時，所接受的變化 <code class=\"language-text\">changes</code>，而回傳值就是 Toggle component 實際 <code class=\"language-text\">setState</code> 時所接受的 change object。</p>\n<p>因此在這個函式中，使用者就擁有了一個機會能夠在元件真正觸發 <code class=\"language-text\">setState</code> 之前，進行一些操作，以剛剛例子來說，就能在這邊判斷使用者自己紀錄的 state(<code class=\"language-text\">timesClicked</code>) 有沒有超過某個值，如果超過了，那我們之後每次的回傳結果中，都會將 <code class=\"language-text\">on</code> 這個 state 設為 false。</p>\n<p>那元件本身該如何讓 <code class=\"language-text\">stateReducer</code> 介入 <code class=\"language-text\">setState</code> 中呢？重點就在這段：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">internalSetState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 確認傳入的 changes 是單純的物件，或是函式</span>\n      <span class=\"token keyword\">const</span> changesObject <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typeof</span> changes <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">changes</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> changes\n      <span class=\"token comment\">// 呼叫使用者傳入的 stateReducer 來取得最終的 state change object</span>\n      <span class=\"token keyword\">const</span> reducedChanges <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">stateReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> changesObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 最後只是檢查一下 changes 是否為空，避免重複 render</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducedChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n        <span class=\"token operator\">?</span> reducedChanges\n        <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們需要建立一個介面與原本 <code class=\"language-text\">setState</code> 相同的 <code class=\"language-text\">internalSetState</code> 的方法，取代原本的 <code class=\"language-text\">setState</code>。</p>\n<p>其中需要注意的有兩點，一個是原本的 <code class=\"language-text\">setState</code> 是能接受函式當第一個參數的，因此我們需要先判斷 <code class=\"language-text\">changes</code> 是否為 function，才能繼續進行其他動作。</p>\n<p>另一個則是並非所有的 <code class=\"language-text\">setState</code> 都一定要用 <code class=\"language-text\">internalSetState</code> 取代，像是 <code class=\"language-text\">reset</code> function 我們可能不太希望使用者能介入，應該要很明確的 reset 所有狀態，因此這邊可以用原本的 <code class=\"language-text\">setState</code>。</p>\n<p>看看 <a href=\"https://codesandbox.io/embed/wyl152o1jw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a> ，並實際玩玩看會更清楚！</p>\n<p>另外，在 Kent C. Dodds 的 workshop 中，他在 internalSetState 的實作上有提到一種他比較偏好的寫法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">internalSetState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>changes<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">typeof</span> c <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> <span class=\"token function\">changes</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">stateReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducedChanges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> c <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>透過硬轉成 array 後，再用 map 將每個步驟 chain 起來，的確比較乾淨跟簡單，但比起原本做法沒那麼直覺就是了，尤其是最後還要取 <code class=\"language-text\">[0]</code> 出來，但參考一下也不錯！</p>\n<p>透過 <code class=\"language-text\">State Reducer</code>，不僅使用者開心（能夠介入元件 state 的更動），開發者也不用疲於奔命一直改 code（讓使用者自己處理 reducer 實際內容），但壞處就是你需要呼叫一個 <code class=\"language-text\">internalSetState</code> 的函式，蠻可能造成 trace code 上的困擾，算是個 trade-off。</p>\n<h1 id=\"control-props\" style=\"position:relative;\"><a href=\"#control-props\" aria-label=\"control props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Props</h1>\n<p>除非你從來沒有用 React 開發與表單相關的 component，否則你一定用過 <code class=\"language-text\">Control Props</code>，因為所謂的 <code class=\"language-text\">Control Props</code> 其實就是 <code class=\"language-text\">Controlled component</code> 的一種實作。</p>\n<p>舉例來說，<code class=\"language-text\">Select</code>, <code class=\"language-text\">Input</code> 等 <code class=\"language-text\">Form</code> 的元件，當使用者輸入值時，其改變的是元件的內部狀態，該狀態通常綁定在 <code class=\"language-text\">value</code> 這個屬性上頭。</p>\n<p>若在 React 中想要取得使用者輸入進表單元件的值時，你就會想要將 state 綁定在元件的 <code class=\"language-text\">value</code> 上頭，然而，一但你傳值給 <code class=\"language-text\">value</code>（也就是 <code class=\"language-text\">value={this.state.value}</code>），你就必須要自己利用 handler 去控制它的狀態改變，否則使用者再怎麼輸入，都不會改變其狀態。因為在你傳值給 <code class=\"language-text\">value</code> 的時候，這個元件就已經歸你控制了，這樣的方式可以保證該元件內部狀態是 single source of truth，不會有使用者的輸入與你的 state 不一致的狀態發生。（關於 <code class=\"language-text\">Controlled component</code> 在 React 官方網站有詳細的<a href=\"https://reactjs.org/docs/forms.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">介紹</a>）</p>\n<p>所以說，<code class=\"language-text\">Control Props</code> 就是想利用這樣的技巧，讓你的元件在讓使用者自行操作 input 時，能確保元件內部狀態的 single source of truth。透過這種方式，也就能夠從使用者角度來同步多個元件的內部狀態。</p>\n<p>一樣已先前的 Toggle 元件來舉例，但這次我們用個簡化版：</p>\n<p>假設今天使用者想同步兩個元件的狀態，他們可以透過本身的 <code class=\"language-text\">State</code> 來控制，並在 <code class=\"language-text\">onToggle</code> 時來更動 <code class=\"language-text\">State</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> bothOn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">handleToggle</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bothOn<span class=\"token operator\">:</span> on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle on<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>bothOn<span class=\"token punctuation\">}</span> onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle on<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>bothOn<span class=\"token punctuation\">}</span> onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// same render props as above</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但要記得，<code class=\"language-text\">onToggle</code> 實際上是 <code class=\"language-text\">Toggle</code> 元件內部執行完 <code class=\"language-text\">toggle</code> 後才會執行的動作（告知使用者該元件\"被\" Toggle 了），這樣的話，元件要怎麼依照傳入的 Props 來處理內部狀態呢？</p>\n<p>來看一下我們 Toggle 的實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">combinedState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        combinedState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        combinedState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> combinedState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isControlled</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主要重點在於，每次 <code class=\"language-text\">toggle</code> 被 trigger 時，我們都會先去確認一下 <code class=\"language-text\">on</code> 這個 state 有沒有被使用者 <code class=\"language-text\">Controlled</code>（<code class=\"language-text\">isControlled()</code>），若是使用者有透過 <code class=\"language-text\">props</code>（使用者端）傳值給這個 <code class=\"language-text\">state</code>（元件內部），就代表我們得將該 <code class=\"language-text\">state</code> 的掌控交給使用者。</p>\n<p>什麼叫『交給使用者』呢？</p>\n<p>其實也就是要將使用者傳入的 props 與我們自己本身的 state 做 <strong>combination</strong>，並將結果當作元件實際的 state 來使用，如同上述程式碼中的 <code class=\"language-text\">getState()</code> 函數。之後元件所有需要操作 state 的地方都需要透過該函數來取得元件的 <strong>Current State</strong>。</p>\n<p>如此一來，只要使用者有傳入 <code class=\"language-text\">on</code> 這個 props，元件內部關於 <code class=\"language-text\">on</code> 這個 state 的變化，就會像是由使用者本身操控一般（因為我們在每次取得 current state 時都會 merge props 中對應的值），也就能讓使用者同步多個 <code class=\"language-text\">Toggle</code> component 了！</p>\n<p><code class=\"language-text\">Control Props</code> 用文字敘述比較繁瑣難懂，可以到下面的 demo link 玩玩，試著把 <code class=\"language-text\">Toggle</code> component 的 <code class=\"language-text\">on</code> props 拿掉看看差別，拿掉 props 後，兩個元件的狀態就無法同步，但元件本身的狀態還是正常的。\n<a href=\"https://codesandbox.io/embed/p94nmr2p2m\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a></p>\n<p>在 Kent C. Dodds 的 workshop 中，他其實還有介紹如何整合先前的 <code class=\"language-text\">State Reducer</code> 與 <code class=\"language-text\">Control Props</code>，不過我覺得過於複雜，除了很難光用文字敘述外，實際使用的機會感覺也不大，如果有興趣的讀者可以直接去 <a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codesandbox</a> 上看範例(file 10.js)</p>\n<h1 id=\"provider\" style=\"position:relative;\"><a href=\"#provider\" aria-label=\"provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provider</h1>\n<p>Provider pattern 其實是為了解決 <code class=\"language-text\">Props drilling</code> 的問題，什麼是 <code class=\"language-text\">Props drilling</code> 呢？</p>\n<p>舉個簡單例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 toggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 toggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">handleToggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleToggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我知道這段 code 很奇怪，但這裡想呈現的重點是，有些時候我們可能真的想要把某個外層的 props 往下傳遞給底下的 component，這種情況下可能得一層一層將 props 往下帶，即便中間經過的 component 都不需要用到該 props。</p>\n<p>要解決這樣的問題，可以利用 React 的 <a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Context API</code></a>。</p>\n<p>雖然在 React 16 以前，<code class=\"language-text\">Context API</code> 在官方文件是一直處於一種不推薦使用的狀態，但大概因為太多人需要吧（像是 <code class=\"language-text\">redux</code> 等 state management 其實都有用到），現在有了新的實作，讓我們終於可以放心使用 <code class=\"language-text\">Context API</code> 了，因此這邊要介紹的 <code class=\"language-text\">Provider pattern</code>，其實就是利用 React 最新的 <code class=\"language-text\">Context API</code> 來解決 <code class=\"language-text\">Props drilling</code> 問題！</p>\n<p>早在<a href=\"https://blog.arvinh.info/2018/06/27/advanced-react-component-patterns-note/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上篇</a>中介紹的 <code class=\"language-text\">Compound component</code> 我們就有用到 Provider pattern 了，而現在就讓我們用剛剛那個離奇的例子來做點修正吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> Consumer <span class=\"token operator\">=</span> ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ui <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> children <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>ui<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>利用 React 16 後出現的 <code class=\"language-text\">React.createContext()</code>，創造一個 <code class=\"language-text\">ToggleContext</code>，並將其提供的 <code class=\"language-text\">Consumer</code> 當作 static 變數放在 <code class=\"language-text\">Toggle</code> 中。</p>\n<p>接著在 render function 中我們使用 <code class=\"language-text\">Context API</code> 提供的另一個 component <code class=\"language-text\">Provider</code>，將傳入 <code class=\"language-text\">Toggle</code> 的 render props 包裹住，並且將 <code class=\"language-text\">Toggle</code> 本身的 <code class=\"language-text\">state</code> 或 <code class=\"language-text\">function</code> 傳到 <code class=\"language-text\">value</code> 這個 props 中。如此一來，<code class=\"language-text\">Toggle</code> 底下的所有 children 之後只要將自己用 <code class=\"language-text\">Toggle.Consumer</code> 包住就可以自由存取 <code class=\"language-text\">Toggle</code> 傳下來的 <code class=\"language-text\">value</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由上面的程式碼可以看到，<code class=\"language-text\">Toggle</code> component 的 <code class=\"language-text\">state</code> 與 <code class=\"language-text\">toggle</code> function 都會被當成 props 傳給被 <code class=\"language-text\">Toggle.Consumer</code> 包裹著的 children。</p>\n<p>包在第三層的 <code class=\"language-text\">&lt;Layer3 /></code> 就可以直接拿到想要的 <code class=\"language-text\">on</code> 與 <code class=\"language-text\">toggle</code>，再也不用從 <code class=\"language-text\">Layer1</code> 傳到 <code class=\"language-text\">Layer2</code> 再傳到 <code class=\"language-text\">Layer3</code> 了！</p>\n<p><a href=\"https://codesandbox.io/embed/m3p2p38z5j\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"higher-order-component\" style=\"position:relative;\"><a href=\"#higher-order-component\" aria-label=\"higher order component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher-order component</h1>\n<p>最後一個 Pattern 我想是大家最熟悉，也是我認為最需要懂得融會貫通的 <code class=\"language-text\">Higher-order component</code>，通常簡稱 <code class=\"language-text\">HOC</code>。旨在解決 <a href=\"https://en.wikipedia.org/wiki/Cross-cutting_concern\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cross-Cutting Concerns</a>，說白一點就是讓你將一些可共用的邏輯抽取出來，讓其他元件透過 <code class=\"language-text\">HOC</code> 的包裝後，能獲得該共用功能，之後修改新增時不會因為邏輯跟元件綁太緊而出現問題。</p>\n<p>雖然很重要，但這個 Pattern 相對簡單，React 官網其實就有<a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常詳細的介紹</a>。這邊就簡單介紹就好，先來個範例吧：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer2 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layer2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Layer3 <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Layer3 <span class=\"token operator\">=</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>contextProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Layer4 <span class=\"token operator\">=</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>contextProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button2 is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button2 is off\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Toggle<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Layer4 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個範例延續前一個 <code class=\"language-text\">Provider pattern</code>，我們將 <code class=\"language-text\">Toggle.Consumer</code> 抽出來，包裝成一個 <code class=\"language-text\">HOC</code> <code class=\"language-text\">withToggle</code>，這樣一來，我們可以輕鬆製造出多個擁有 <code class=\"language-text\">Toggle</code> component 功能與狀態的元件，像是這邊的 <code class=\"language-text\">Layer3</code> 與 <code class=\"language-text\">Layer4</code>，他們只需要 care 自己的 UI 邏輯即可，剩下與 <code class=\"language-text\">Toggle</code> 相關的狀態操作都交由 <code class=\"language-text\">withToggle</code> 這個 HOC 幫忙處理。</p>\n<p>而 <code class=\"language-text\">withToggle</code> 長這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">withToggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token parameter\">toggleContext</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&lt;</span>Component contextProps<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleContext<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  Wrapper<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">withToggle(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Component<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span>\n    Component<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">hoistNonReactStatics</span><span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>Wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不是很簡單呢！</p>\n<p><code class=\"language-text\">HOC</code> 負責主要的共用邏輯，在這邊就是 <code class=\"language-text\">Toggle.Consumer</code> 這段，然後將傳入的 <code class=\"language-text\">Component</code> 塞入，可能是放在 <code class=\"language-text\">render</code> 或是像這邊是傳入 <code class=\"language-text\">Consumer</code> 的 children。</p>\n<p>特別要注意的有三點，一個是 <code class=\"language-text\">displayName</code>，由於 <code class=\"language-text\">HOC</code> 會回傳一個新的 Component，這時如果你沒有明確定義一個 <code class=\"language-text\">displayName</code> 的話，在 Dev tool 裡你就只能看到一個 <code class=\"language-text\">Unknown</code> 的元件，會造成開發上的困擾，所以記得要指定一下 <code class=\"language-text\">displayName</code>，通常會用 <code class=\"language-text\">HOC</code> 自己的名稱加上原有 Component 的 <code class=\"language-text\">displayName</code>。</p>\n<p>另一個要注意的點是 <code class=\"language-text\">forwardRef</code>，在 React 中，<code class=\"language-text\">ref</code> 與 <code class=\"language-text\">props</code> 的處理方式不相同，<code class=\"language-text\">ref</code> 並不會如同 props 一般往下傳遞，若你想要取得被 <code class=\"language-text\">HOC</code> 包裹過的 component 的 <code class=\"language-text\">ref</code>，那在你的 <code class=\"language-text\">HOC</code> 中，必須使用 <code class=\"language-text\">React.forwardRef</code> 將其 forward 下去，詳細介紹可以看<a href=\"https://reactjs.org/docs/forwarding-refs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網說明</a>。</p>\n<p>最後，假如你原先的 component 有一些 <code class=\"language-text\">static method</code>，透過 <code class=\"language-text\">HOC</code> 包裝後，你可能會發現那些 <code class=\"language-text\">static method</code> 都取不到了！</p>\n<p>你必須要在 <code class=\"language-text\">HOC</code> 中自行複製一份到 <code class=\"language-text\">HOC</code> 上頭，像這樣（取自 <a href=\"https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 官網</a>)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Must know exactly which method(s) to copy :(</span>\n  Enhance<span class=\"token punctuation\">.</span>staticMethod <span class=\"token operator\">=</span> WrappedComponent<span class=\"token punctuation\">.</span>staticMethod<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但這樣太麻煩了，我們可以直接利用 <code class=\"language-text\">hoistNonReactStatics</code> 這套 lib 來幫忙，這樣就萬無一失了！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> hoistNonReactStatic <span class=\"token keyword\">from</span> <span class=\"token string\">'hoist-non-react-statics'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enhance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enhance</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">hoistNonReactStatic</span><span class=\"token punctuation\">(</span>Enhance<span class=\"token punctuation\">,</span> WrappedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Enhance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/q3wmv6okqw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>介紹了這麼多種 Pattern，其實我覺得 HOC、Render Props 與 Compound Component 是最需要好好掌握並且多加運用的，其他如 State Reducer、Prop Collections and Getters 則是平常在進行 Code Review 時，可以好好拿出來思考一下是否能夠採用，為你的專案加分。\n無論如何，經過這樣的學習與紀錄，至少讓自己平日開發時，能主動多思考一些優化的方向與可能性，總體是蠻有收穫的！</p>\n<p>最後提供大家 Kent C. Dodds 在 workshop 後自己寫的一篇文章，<a href=\"https://blog.kentcdodds.com/mixing-component-patterns-4328f1e26bb5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixing Component Patterns</a>，裡頭他將這些 pattern 結合在一起使用，有興趣的讀者可以去看看到底這麼多 Pattern 要怎麼融合使用。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns workshop</a></li>\n<li><a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns V2 codesandbox</a></li>\n<li><a href=\"https://blog.kentcdodds.com/advanced-react-component-patterns-56af2b74bc5f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns Blog</a></li>\n<li><a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Answers to common questions about render props</a></li>\n<li><a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do more with less using render props</a></li>\n<li><a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React new context api</a></li>\n<li><a href=\"https://blog.kentcdodds.com/mixing-component-patterns-4328f1e26bb5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mixing Component Patterns</a></li>\n</ol>","fields":{"slug":"advanced-react-component-patterns-note-ii"},"frontmatter":{"title":"進階 React Component Patterns 筆記（下）","date":"07-21-2018","tags":["react","es6","javascript","pattern"]},"timeToRead":16}},"pageContext":{"slug":"advanced-react-component-patterns-note-ii","prev":{"excerpt":"『讓你焦慮的不是事情本身，而是你對事情的認知。』","html":"<blockquote>\n<p>『讓你焦慮的不是事情本身，而是你對事情的認知。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前不久在 Frontend masters 看到一部影片 <a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns</a>，是 Paypal 的工程師 Kent C. Dodds 在某場 workshop 介紹他實作 React component 時所使用的進階 React Patterns（目前似乎要付費觀看，而他在 <a href=\"https://egghead.io/courses/advanced-react-component-patterns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">egghead.io</a> 上也有一系列教學，同樣要收費就是了...），內容非常豐富扎實，若是想提供一些可高度客製化的共用元件，使用這些 Pattern 絕對是有絕佳的幫助！如果可以，我強烈建議大家自己去聽聽，不用把時間花在閱讀我的文字上 :p</p>\n<p>自從看完那影片後，平常開發都會不自覺得去思考這些 pattern，看看如果應用到我目前的專案中，能否帶來益處。</p>\n<p>當然有些早已有在使用，而有些則苦無伸展之處，為了加深自己對這些 pattern 的印象與理解，今天就來筆記一下這系列影片的內容，也希望能對來到這邊的讀者有所幫助。</p>\n<h2 id=\"為何要有-pattern\" style=\"position:relative;\"><a href=\"#%E7%82%BA%E4%BD%95%E8%A6%81%E6%9C%89-pattern\" aria-label=\"為何要有 pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為何要有 Pattern</h2>\n<p>在開始介紹之前，我其實想討論一下為什麼需要有 Pattern，或是說，我們真的需要 Pattern 嗎？</p>\n<p>會有這樣的疑問其實是在過往經驗中，還蠻常發現採用 Design pattern 的程式碼如果需要修改時，對於不熟悉該 Pattern，或是原作者雖然採用某種 Pattern，但沒有堅持到底，在一些地方為了方便而改採取別種作法；更慘的情況是，在錯誤的情境下，採用了不適合的 pattern，這些情況都容易造成維護上的極大困擾。</p>\n<p>所謂的 Pattern，代表的應該是『被分門別類過，通過反覆使用與測試的考驗，且多數人知曉的程式設計經驗總結』，如果說，你今天採用的 Pattern 是團隊內的人都能接受並理解的，然後也都同意該情境下非常適合使用那種 Pattern，非他莫屬，直接打趴其他簡單做法的優缺點，那麼使用 Pattern 是絕對有好處的，除了測試的穩定性、程式碼的重用性外，在開發共用 component 或套件上，更有助於一般元件使用者，像是可以 export 出更加簡潔、方便的 API 等等。</p>\n<p>若不是上述情況，有道是『最好的 Pattern，就是沒有 Pattern』，讓邏輯單純簡單、不影響效能、方便接手的人進行維護，可能比起刻意套用 Pattern 來得有效益。所以在開發前，最好花點時間釐清自己的狀況。</p>\n<p>不過，你也得先了解有哪些 Patterns，才能在開發時有參考依據麻！所以不管你現在用不用得到，多學還是好的！</p>\n<h1 id=\"react-component-patterns\" style=\"position:relative;\"><a href=\"#react-component-patterns\" aria-label=\"react component patterns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component Patterns</h1>\n<p>主要想介紹的 React Component Pattern 有幾種：</p>\n<ul>\n<li>Compound comopnent</li>\n<li>Render props comopnent</li>\n<li>Prop Collections and Getters</li>\n<li>State Initializers</li>\n<li>State Reducer</li>\n<li>Control Props</li>\n<li>Provider</li>\n<li>Higher-order component</li>\n</ul>\n<p>但礙於篇幅關係，打算拆成幾篇文章來說明，今天是上篇，會介紹到 <code class=\"language-text\">Compound component</code>、<code class=\"language-text\">Render props component</code> 與 <code class=\"language-text\">Prop Collections and Getters</code>。</p>\n<h2 id=\"compound-component\" style=\"position:relative;\"><a href=\"#compound-component\" aria-label=\"compound component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compound component</h2>\n<p>假設今天你要撰寫一個 <code class=\"language-text\">Toggle</code> Component，並且分別在 state <code class=\"language-text\">On</code> 或 <code class=\"language-text\">Off</code> 時，能夠顯示不同的文字描述，你會怎麼做？</p>\n<p>一個很直覺的做法是，利用 props 來傳遞不同 state 時所需要顯示的文字（只是呈現 idea，並非有功能的 code）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> whenOn<span class=\"token punctuation\">,</span> whenOff <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on <span class=\"token operator\">?</span> whenOn <span class=\"token operator\">:</span> whenOff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle\n  whenOn<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is on\"</span>\n  whenOff<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is off\"</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>這樣做當然可行，但有幾個明顯的壞處：</p>\n<ul>\n<li>順序無法調動：沒辦法讓 <code class=\"language-text\">Toggle</code> component 的使用者自由得調整 <code class=\"language-text\">whenOn</code> 與 <code class=\"language-text\">whenOff</code> 的顯示順序，除非你另外加入其他 props 來控制。</li>\n<li>\n<p>利用 Props 來傳遞 UI 元件的話，容易造成使用者困擾，只能盡量透過 props 的命名來區別 UI 元件與其他狀態控制的 pros，舉例來說，如果今天 <code class=\"language-text\">Toggle</code> 還有一個 props 是來控制 toggle on 時的 callback：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">&lt;</span>Toggle\n    whenOn<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is on\"</span>\n    whenOff<span class=\"token operator\">=</span><span class=\"token string\">\"Toggle is off\"</span>｀\n    whenOnCallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yeee, I am on'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>看起來就不是一個非常好的 API 設計，對吧？</p>\n</li>\n</ul>\n<p>要解決這種情況，最適合的方式就是採用 <code class=\"language-text\">Compound component</code>！</p>\n<p>所謂的 <strong>Compound component</strong> 就是讓你的 UI 元件透過 <code class=\"language-text\">this.props.children</code> 的方式傳入給 <code class=\"language-text\">parent component</code>，利用 <code class=\"language-text\">React.Children.map()</code> 來 render 所有傳入的 <code class=\"language-text\">this.props.children</code>，並且透過 <code class=\"language-text\">React.cloneElement</code> 將 parent 的 <code class=\"language-text\">state</code> 傳入每個 children 的 <code class=\"language-text\">props</code>，讓 parent 與 children 之間會 <strong>隱含著狀態的共享</strong>，對於元件使用者來說，他只需要傳入想要的 <code class=\"language-text\">children component</code>，不用知道 parent 與 children 之間如何溝通，當然也能隨意調整順序，這樣的 API 設計，對於元件使用者就非常的友善。</p>\n<p>在這樣的原則下，不難發現，Compound component 必須要 <strong>同時結合使用 parent component 與 children component 才有意義</strong>。</p>\n<p>以剛剛的 <code class=\"language-text\">&lt;Toggle></code> 為例子，若改以 Compound component 的話：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">On</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Off</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> children <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">child</span> <span class=\"token operator\">=></span>\n        React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n          toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle\n  onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/6zz376vrzz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo link</a></p>\n<p>我們透過 <code class=\"language-text\">Toggle</code> Class 的 static properties 來定義 children component，這樣的好處是我們能夠從名稱上就保持 Parent 與 Children Component 之間的關聯性。</p>\n<p>透過 Compound Component，不僅能讓使用者自訂元件順序，又能將 UI component 與其他 callback props 做個清楚的切割。對於使用者來說，完全不需要管 <code class=\"language-text\">Toggle</code> 的 state 變化時，<code class=\"language-text\">Toggle.On</code> 要怎麼變動，他們之間的 state 與 props 都由 Parent component 處理。</p>\n<p>另外，在 Kent C. Dodds 的 workshop 中，有人提問為何不直接用 <code class=\"language-text\">this.props.children.map</code> 就好，而要用 <code class=\"language-text\">React.Children.map</code>？</p>\n<p>原因在於，在目前 React 的實作中，當你的 children 只有一個時，<code class=\"language-text\">this.props.children</code> 不會是一個 array，透過 <code class=\"language-text\">React.Children.map</code> 能寫得更簡潔，少些判斷。</p>\n<p>看到這邊，不知道有沒有想到，其實我們在撰寫表單時常用的 <code class=\"language-text\">&lt;select></code> 與 <code class=\"language-text\">&lt;option></code> 就是一個 Compound component 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>Opt 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>Opt 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"更有彈性的-compound-component\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%9C%89%E5%BD%88%E6%80%A7%E7%9A%84-compound-component\" aria-label=\"更有彈性的 compound component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更有彈性的 Compound Component</h2>\n<p>在上面的例子中，其實只要使用者更動其中一個 children，整個 Compound component 就會壞掉：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle\n  onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>因為 <code class=\"language-text\">React.Children.map</code> 只會 for-loop 到第一層的 children，也就是說，<code class=\"language-text\">React.cloneElement</code> 現在不會複製 <code class=\"language-text\">&lt;Toggle.Button></code> 而是複製 <code class=\"language-text\">&lt;div></code> 了。</p>\n<p>不過好在現在有了 React 16 的 Context API，要解決這個問題簡單了不少，主要就是將 <code class=\"language-text\">state</code> 的共享改由 <code class=\"language-text\">Context</code> 來完成：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ToggleContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">On</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> contextValue<span class=\"token punctuation\">.</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Off</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>contextValue<span class=\"token punctuation\">.</span>on <span class=\"token operator\">&amp;&amp;</span> children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">contextValue</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>contextValue<span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span> Toggle <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 由於不用傳遞 props 給 children，也就不用 React.Children.map 了，直接使用 this.props.children 即可</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n          toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>The button is on<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>On<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>The button is off<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token punctuation\">.</span>Off<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Toggle<span class=\"token punctuation\">.</span>Button <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/mzv766qqmx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<p>如此一來，使用者想要在我們的 Componet 裡面如何 wrap 各個 Child Component 都可以了！</p>\n<p><strong>Note:</strong> 在 workshop 中，Kent C. Dodds 有提到關於在 render 時， <code class=\"language-text\">Provider</code> 每次都會接收到新 object，造成多餘 re-render 的問題，因此可以做點小改良：\n將要傳給 <code class=\"language-text\">Provider</code> 的 value 改以 <code class=\"language-text\">this.state</code> 傳入，這樣每次在 render <code class=\"language-text\">Toggle</code> 時，才不會讓所有 <code class=\"language-text\">Toggle</code> 的 children component 也 re-render。\n只是要特別注意你原本要傳入 context 的 value 內，若有一些 function 如 <code class=\"language-text\">this.toggle</code>，記得確保你的 state 在宣告時能取得到。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstate <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 將 state 移至 toggle function 之下，以確保 refer 得到</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 由於不用傳遞 props 給 children，也就不用 React.Children.map 了，直接使用 this.props.children 即可</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ToggleContext<span class=\"token punctuation\">.</span>Provider\n      value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ToggleContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>不過當你並不想把所有 <code class=\"language-text\">state</code> 都放入 <code class=\"language-text\">context</code> 時，可能就得想另一種方法了。</p>\n<h1 id=\"render-props-comopnent\" style=\"position:relative;\"><a href=\"#render-props-comopnent\" aria-label=\"render props comopnent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render props comopnent</h1>\n<p>Render props 相對於 Compound Component 來說應該是比較有名的 Pattern，而他的概念與實作方式也相對簡單，網路上也早有針對 Render props 的相關討論，像<a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>或<a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這個</a>。</p>\n<p>從名稱就可以猜出一二，所謂 Render props 就是將 render function 當作 props 傳入，讓原本的 render function 的控制權，從內部元件本身移轉至使用該元件的使用者身上，這種方式讓使用元件的使用者可以更方便的操作 <code class=\"language-text\">｀state</code>，而實作方式上比較常看到的有兩種：</p>\n<ul>\n<li>\n<p>將 render 當作 props 傳入：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">renderToggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>Toggle\n    onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    renderToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'The button is on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'The button is off'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>buttononClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'click on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'click off'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n</li>\n<li>\n<p>用 <code class=\"language-text\">this.props.children</code> 來呼叫 render props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onToggle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n      state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> on<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>on <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onToggle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>Toggle\n      onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'toggle'</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">,</span> toggle<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'The button is on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'The button is off'</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">'click on'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'click off'</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n</li>\n</ul>\n<p><a href=\"https://codesandbox.io/embed/6zx6q92qw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<p>以這兩種方法來說，我的想法與 Kent C. Dodds 相同，以 <code class=\"language-text\">this.props.children</code> 來呼叫 render props 在使用上比較有優勢，除了可以明確知道 <code class=\"language-text\">Toggle</code> 元件的起始點外，還可以避免 當 renderProps 的內容很多時，容易 miss 掉一些 <code class=\"language-text\">Toggle</code> 的重要 props 的問題，例如下面的範例：</p>\n<iframe src=\"https://codesandbox.io/embed/jv9xjz5mr3?view=editor\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"prop-collections-and-getters\" style=\"position:relative;\"><a href=\"#prop-collections-and-getters\" aria-label=\"prop collections and getters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prop Collections and Getters</h1>\n<p>在 Kent C. Dodds 的 workshop 中所提到的 <code class=\"language-text\">Prop Collections</code> 與 <code class=\"language-text\">Prop Getters</code> 其實是要搭配運用的。</p>\n<p>我們將上面的例子稍微改變一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> toggle <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>pressed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>pressed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span> aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>現在我們有兩個 button 可以同時更改 Toggle 的狀態，而稍微注意一下可以發現兩個 button 其實接收的 props 有共通的部份，目前的寫法很多餘，也不好看。這時候我們就可以創造一個 <code class=\"language-text\">Prop collections</code> 來負責提供 Common 的 props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... Same as before</span>\n  <span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n      togglerProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// collection for common Props</span>\n        <span class=\"token string\">\"aria-pressed\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n        onClick<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而剛剛的範例就能修改為：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Toggle onToggle<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">on</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> on<span class=\"token punctuation\">,</span> togglerProps <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"The button is on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"The button is off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>hr <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button\n        <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span>\n        aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Toggle<span class=\"token operator\">></span></code></pre></div>\n<p>但這樣做你可能會發現一個缺點，就是當別人不小心 overwrite 你的 common props 時，你無能為力。這其實也是 <code class=\"language-text\">render props</code> 的一個小缺點，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button\n  <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button1\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>togglerProps<span class=\"token punctuation\">}</span>\n  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'overwrite'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 蓋過我們原先在 onClick 的操作 (this.toggle)</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"這時候-code-classlanguage-textprop-getterscode-就可以出動了\" style=\"position:relative;\"><a href=\"#%E9%80%99%E6%99%82%E5%80%99-code-classlanguage-textprop-getterscode-%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%87%BA%E5%8B%95%E4%BA%86\" aria-label=\"這時候 code classlanguage textprop getterscode 就可以出動了 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>這時候 <code class=\"language-text\">Prop Getters</code> 就可以出動了！</h2>\n<p>在原本的 Prop collections（<code class=\"language-text\">togglerProps</code>）中，我們改以呼叫一個 <code class=\"language-text\">Prop Getter</code> 的方式取得 common props：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Toggle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//... Same as before</span>\n  <span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      onClick <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      on<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n      getTogglerProps<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getTogglerProps\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStateAndHelpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如此一來，使用者所提供的 <code class=\"language-text\">onClick</code> 就不會蓋過我們元件原始的 <code class=\"language-text\">onClick</code> 行為，也就是 <code class=\"language-text\">this.toggle</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>button\n  <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"button2\"</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">getTogglerProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'overwrite'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"custom-button2\"</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>on <span class=\"token operator\">?</span> <span class=\"token string\">\"click on\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"click off\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></code></pre></div>\n<p>如果想要 overwrite 更多的 method，在 <code class=\"language-text\">Prop Getter</code> 中也要做相對應的判斷與修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> otherMethod<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    onClick <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">otherMethod</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">originOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    otherMethod <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">otherMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果嫌每次都要判斷傳入的 props 是否存在很麻煩，可以學 Kent C. Dodds 寫一個 handy funtion：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> fn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">getTogglerProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">,</span> otherMethod<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'aria-pressed'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">,</span>\n  onClick<span class=\"token operator\">:</span> <span class=\"token function\">callAll</span><span class=\"token punctuation\">(</span>onClick<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://codesandbox.io/embed/wywk4w1z6w\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Demo Link</a></p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>今天統整了三個 React component patterns: <code class=\"language-text\">Compound Component</code>、<code class=\"language-text\">Render Props</code> 與 <code class=\"language-text\">Prop Collections &amp; Getters</code>，讓我自己對這幾個 pattern 更熟悉了一些，不過還是要盡量運用在自己的專案當中，才能確切感受其好處，並更得心應手。也希望這些整理對來到這邊的讀者有所幫助，剩下的幾個 Pattern 會陸續補上，決不食言！</p>\n<p>最後，再次呼籲大家去看看 Kent C. Dodds 的影片 <a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns</a>，我比較推薦看 workshop 的版本，因為還可以聽到現場其他人對他的提問，以及他的回答，都很有幫助！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://frontendmasters.com/courses/advanced-react-patterns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns workshop</a></li>\n<li><a href=\"https://codesandbox.io/s/github/kentcdodds/advanced-react-patterns-v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns V2 codesandbox</a></li>\n<li><a href=\"https://blog.kentcdodds.com/advanced-react-component-patterns-56af2b74bc5f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advanced React Patterns Blog</a></li>\n<li><a href=\"https://juejin.im/post/59b78dfe5188257e7e115cae\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">什麼是設計模式</a></li>\n<li><a href=\"https://blog.kentcdodds.com/answers-to-common-questions-about-render-props-a9f84bb12d5d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Answers to common questions about render props</a></li>\n<li><a href=\"https://hackernoon.com/do-more-with-less-using-render-props-de5bcdfbe74c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Do more with less using render props</a></li>\n</ol>","id":"44db8e8e-c093-53e3-b722-992c39c2528d","fields":{"slug":"advanced-react-component-patterns-note"},"frontmatter":{"date":"2018-06-27T23:33:27.000Z","title":"進階 React Component Patterns 筆記（上）","tags":["react","es6","javascript","pattern"],"type":"tech","slug":"advanced-react-component-patterns-note"},"timeToRead":14},"next":{"excerpt":"『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』","html":"<blockquote>\n<p>『每一時刻的現狀都是過去某一或某些時刻的結果，而每一時刻的現狀都是未來某一或某些時刻的原因，你永遠無法快速逃離現況。』\n『請告訴自己，我有不足，我需要時間，無法一蹴而就。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近公司同事組了 Design pattern 的讀書會，剛好這週研讀到 <code class=\"language-text\">Visitor Pattern</code> 時，同事介紹說我們每天在用的工具 Babel 就是採用 <code class=\"language-text\">Vistor Pattern</code>，透過 <code class=\"language-text\">visitor</code> 拜訪 <a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">AST (Abstract Syntax Tree)</code></a>，進而將程式碼進行對應轉換。</p>\n<p>這除了勾起我前陣子想要了解 <code class=\"language-text\">AST</code> 的想法外，也再度提醒我對於 Babel Plugin 背後的實作方式不太了解，只知道像是 ESLint, UglifyJS 或是 Webpack，他們的核心都是用到了 <code class=\"language-text\">AST</code> 來實現程式碼的檢查、分析與操作，但並不曉得實際上要如何使用。</p>\n<p>此外，我先前其實都沒有想過要自己寫 Babel Plugin，總覺得 Babel 的 Plugin 就是要很一般化，大家都能使用的，但其實不然啊，自己的專案或甚至是公司團隊內的專案，只要能有助於大家的工作效率，就算只給內部使用又何妨？明確定義好使用的情境跟 Style 即可。</p>\n<p>因此這次就決定花點時間來學習如何實作 Babel Plugin，並透過實作 Babel Plugin 的過程，一同了解 AST 的概念。</p>\n<h2 id=\"一直提到-ast到底什麼是-ast\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E7%9B%B4%E6%8F%90%E5%88%B0-ast%E5%88%B0%E5%BA%95%E4%BB%80%E9%BA%BC%E6%98%AF-ast\" aria-label=\"一直提到 ast到底什麼是 ast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一直提到 AST，到底什麼是 AST？</h2>\n<p>AST 的全文是 Abstract Syntax Tree，中文大多翻作抽象語法樹，主要是將我們 <strong>人類</strong> 所寫的程式語法，轉換成 <strong>程式</strong> 比較容易閱讀的語法結構，並以樹的資料結構來儲存。</p>\n<p>直接來個例子，先讓大家看看 <strong>給人類看的 code</strong> 與 <strong>給程式讀的 code</strong> 之間的差異：</p>\n<p><img src=\"/image/humancode-programcode.png\" alt=\"Human code vs Program code(AST)\"></p>\n<p>左邊的程式經過 Parser 的轉換後，就會產出右圖中的 AST。</p>\n<p>在遠古的 Nestcape 時代，對於 Javascript 的 AST 有許多種實作，而後來為了解決一致性的問題，<a href=\"https://github.com/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESTree</a> 這個組織定義了現今通用的 <a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a>。</p>\n<p>像是我們現在常用的 Babel 所使用的 AST 就是基於 ESTree 的規範延伸修改的。</p>\n<h3 id=\"那-babel-這些工具到底拿-ast-來做什麼呢\" style=\"position:relative;\"><a href=\"#%E9%82%A3-babel-%E9%80%99%E4%BA%9B%E5%B7%A5%E5%85%B7%E5%88%B0%E5%BA%95%E6%8B%BF-ast-%E4%BE%86%E5%81%9A%E4%BB%80%E9%BA%BC%E5%91%A2\" aria-label=\"那 babel 這些工具到底拿 ast 來做什麼呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那 Babel 這些工具到底拿 AST 來做什麼呢？</h3>\n<p>稍稍回想一下，Babel 或是 ESLint 在我們平日的開發中扮演了什麼角色？</p>\n<p>情境大概是：</p>\n<blockquote>\n<p>你用 ES6 寫了一段 arrow function，而 Babel 會幫忙轉換成 ES5 的匿名函數，同時 ESLint 可能會顯示 Warning 告知你的括號前面必須要留有空格。</p>\n</blockquote>\n<p>這段描述當中，Babel 其實將你的 code 透過三個 stage 來處理：<a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#stages-of-babel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>parse</strong>, <strong>transform</strong>, <strong>generate</strong>.</a></p>\n<p>而其中，AST 其實就出現了兩次：</p>\n<!-- 放置圖片 code to AST and Modefied AST to code -->\n<p><img src=\"/image/what-ast-play-in-babel.png\" alt=\"The role AST plays in babel\"></p>\n<ul>\n<li>\n<p><strong>Parse stage</strong></p>\n<p>你寫的 js code 會經由 js parser 轉換為 AST，當然其中會透過 <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lexical Analysis</a> 與 <a href=\"https://en.wikipedia.org/wiki/Parsing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Syntactic Analysis</a>。</p>\n</li>\n<li>\n<p><strong>Transform stage</strong></p>\n<p>而這時 Babel plugin 與 ESLint plugin 就可以介入你的程式進行改造，<strong>幫忙轉換成 ES5 的匿名函數</strong>以及<strong>審視你的程式，決定是否要提示 Warning</strong> 的這兩個動作就是在這個階段發生的，我們將 Parser 解析後的 AST 改造成我們想要的樣子。</p>\n</li>\n<li>\n<p><strong>Generate stage</strong></p>\n<p>最後，改造完成的 AST 會再被 generator 轉換為一般的 code 輸出。</p>\n</li>\n</ul>\n<p>常用的 js parser 有很多種，像是 babylon, acorn, esprima 等等，而所謂的 Babel plugin 或是 ESLint plugin，則可以看作是一種 Transformer。</p>\n<h3 id=\"窺探一下-ast-的內容\" style=\"position:relative;\"><a href=\"#%E7%AA%BA%E6%8E%A2%E4%B8%80%E4%B8%8B-ast-%E7%9A%84%E5%85%A7%E5%AE%B9\" aria-label=\"窺探一下 ast 的內容 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>窺探一下 AST 的內容</h3>\n<p>在實作 Plugin 前，先了解一下 AST 的長相對之後會比較有幫助。</p>\n<p>開始之前先介紹兩個常用網站：</p>\n<ul>\n<li>\n<p><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></p>\n<p>超棒的網站，在上面可以邊看原始程式碼根據不同 Parser 所建構出來的 AST，也能切換不同 Transformer 來實作 Plugin 內容。</p>\n</li>\n<li>\n<p><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></p>\n<p>主要是將 AST 視覺化，對於理解整個程式碼的 AST 結構能有比較清楚 Overview。</p>\n</li>\n</ul>\n<p>不過我個人是覺得 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 就足夠了， <a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VISUALIZER</a> 雖然能看到圖像化的樹狀結構，但操作起來不是很順暢，也無法直接在上面撰寫 Transformer。所以下面都會以 <code class=\"language-text\">AST Exporler</code> 為使用工具來介紹。</p>\n<p>現在我們以一個比最開始稍稍複雜一點的簡單範例來解析，在這邊我們採用與 Babel 相同的 Parser - <a href=\"https://github.com/babel/babel/tree/master/packages/babel-parser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babylon7</a>：</p>\n<p>我們的原始程式碼如下，定義 <code class=\"language-text\">a</code> 與 <code class=\"language-text\">b</code> 兩個變數，以及一個 <code class=\"language-text\">add</code> function：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一步一步來看，<code class=\"language-text\">const a = 2</code> 的 AST 會長這樣：</p>\n<p><img src=\"/image/ast-explorer-sample-1.png\" alt=\"AST Explorer example 1\"></p>\n<p>你的程式碼在 AST 當中，會被拆解成各種 node 來存放表示，而每一個 node 都有自己的 type，各種 type 有其特定的屬性參數，以上圖為例：</p>\n<p><code class=\"language-text\">const</code> 在 AST 中就是ㄧ個 <code class=\"language-text\">type</code> 為 <code class=\"language-text\">VariableDeclaration</code> 的 node，這個 node 必須包含兩種屬性， <code class=\"language-text\">declarations</code> 與 <code class=\"language-text\">kind</code>：</p>\n<p><code class=\"language-text\">kind</code> 很好理解，意指我們的 <code class=\"language-text\">VariableDeclaration</code> 可以有三種類型（<code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>）， 而 <code class=\"language-text\">declarations</code> 看起來就是存放你所宣告的變數，像 <code class=\"language-text\">a = 2</code>，但他是 <code class=\"language-text\">Array of VariableDeclarator</code>，我們不是只有宣告一個變數嗎？</p>\n<p>其實是要應付這種寫法：<code class=\"language-text\">const a = 2, b = 3</code>，需要能接收多個 <code class=\"language-text\">VariableDeclarator</code>。</p>\n<p>而 <code class=\"language-text\">VariableDeclarator</code> 這種 type 的 node 代表的就是 <code class=\"language-text\">a=2</code> 這種宣告式，其中包含兩個屬性 <code class=\"language-text\">id</code> 與 <code class=\"language-text\">init</code>，我們將其展開看看：</p>\n<p><img src=\"/image/ast-explorer-sample-2.png\" alt=\"AST Explorer example 2\"></p>\n<p><code class=\"language-text\">id</code> 屬性所接受的是 <code class=\"language-text\">identifier</code> 這個 type 的 node，代表該 <code class=\"language-text\">VariableDeclarator</code> 的 identity。該 node 只需要一個 <code class=\"language-text\">name</code> 屬性，也就是他的名稱，在這邊的例子中當然就是 <code class=\"language-text\">a</code> 囉。而 <code class=\"language-text\">init</code> 則是這個 <code class=\"language-text\">VariableDeclarator</code> 的初始值，因為我們程式中是初始 <code class=\"language-text\">a</code> 為 <code class=\"language-text\">2</code>，所以這個 <code class=\"language-text\">init</code> 屬性就會連到一個 <code class=\"language-text\">NumericLiteral</code> type 的 node，擁有 <code class=\"language-text\">value</code> 為 <code class=\"language-text\">2</code> 的屬性。</p>\n<p>此外，眼尖的讀者想必都有發現到，每個 node 都有 <code class=\"language-text\">start</code>, <code class=\"language-text\">end</code> 與 <code class=\"language-text\">loc</code> 這三個屬性，這是用來代表該 node 在程式的第幾行第幾列。</p>\n<p>看到這邊應該對於 AST 的結構會有點感覺了，基本上就是 Parser 會先將你的程式切成多種 tokens，接著依照類別來區分是哪種 node，最後從程式結構上一一把 node 串接，形成一顆完整的 Abstract Syntax Tree。如果覺得剛剛用 AST Explorer 轉化的格式不夠清楚，這邊補充一下同樣程式用 VISUALIZER 出來的 AST 長相，應該會對 AST 的結構更有感受：</p>\n<p><img src=\"/image/ast-visualizer.png\" alt=\"ast visualizer\"></p>\n<p>範例程式中我們還有使用到 <code class=\"language-text\">function</code>，他長出的 AST 與宣告變數在 node type 上有不少差異，但大體結構就如同上面介紹的一般，這邊就不再贅述，相信看到這邊的讀者也有能力自己去 AST Explorer 玩玩看了！寫些簡單的程式，看看他們經由 Parser 轉換後，會產生怎樣的 AST，每種語法所對應的 node type 又是什麼。</p>\n<h2 id=\"懂了-ast來實際應用一下開始製作-babel-plugin-吧\" style=\"position:relative;\"><a href=\"#%E6%87%82%E4%BA%86-ast%E4%BE%86%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8%E4%B8%80%E4%B8%8B%E9%96%8B%E5%A7%8B%E8%A3%BD%E4%BD%9C-babel-plugin-%E5%90%A7\" aria-label=\"懂了 ast來實際應用一下開始製作 babel plugin 吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>懂了 AST，來實際應用一下，開始製作 Babel Plugin 吧！</h2>\n<p>出發，總要有個方向。</p>\n<p>要做 Plugin 也得要先決定要做什麼。</p>\n<p>剛好在工作上常常會用到 <code class=\"language-text\">React-intl</code> 這個套件來幫忙處理 i18n，他的使用方法還算簡單，當一些基本設定做好以後，你只要用其提供的一個特殊元件 <code class=\"language-text\">&lt;FormattedMessage /></code>，放入對應文字的 id 即可，像是： <code class=\"language-text\">&lt;FormattedMessage id=\"#words-need-i18n\" /></code> 。</p>\n<p>雖然實際上已經非常簡單了，但我還想更懶一點，能不能直接輸入 <code class=\"language-text\">{'#words-need-i18n'}</code> 就好呢？</p>\n<p>像是能把：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>轉換成：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FormattedMessage</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>words-need-i18n<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以！自己寫 Plugin 就可以！</p>\n<h3 id=\"撰寫-babel-plugin-的起手式\" style=\"position:relative;\"><a href=\"#%E6%92%B0%E5%AF%AB-babel-plugin-%E7%9A%84%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-label=\"撰寫 babel plugin 的起手式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>撰寫 Babel Plugin 的起手式</h3>\n<p>先到 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 開啟一個新的頁面，接著在上方列表選取好 Parser (Babylon7) 與 Transformer (Babel7)，並在旁邊的程式區塊內寫上一點範例程式，就是你預期能被 Babel 認得並轉換的\"新\"程式碼，以我的例子就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token string\">'#words-need-i18n'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"/image/step-1-babel-plugin.gif\" alt=\"Babel plugin step 1\"></p>\n<p>接著看看你的 AST 長什麼樣子，想想你該怎麼修改他：</p>\n<p><img src=\"/image/step-2-babel-plugin.png\" alt=\"Babel plugin step 2\"></p>\n<p>出現沒看過的 type 了！沒關係，在剛開始撰寫 Plugin 的過程中一定會遇到許多沒看過的 type 或是不清楚他的屬性型別，好在 babel 有一份非常詳細的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook</a> 與 <a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 可以查閱，只要到上面 <code class=\"language-text\">ctrl + f</code> 一下，應該都能在上頭找到你所需要的知識。</p>\n<p>準備好測試程式碼、了解測試程式碼的 AST、也有了工具書可以查，就能毫無懸念的開始撰寫 Babel plugin 了。</p>\n<h3 id=\"babel-plugin-之-transformvisitorstraversal\" style=\"position:relative;\"><a href=\"#babel-plugin-%E4%B9%8B-transformvisitorstraversal\" aria-label=\"babel plugin 之 transformvisitorstraversal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 之 Transform、Visitors、Traversal</h3>\n<p>還記得我在最一開始說過，Babel 大量使用到了 Visitor pattern 嗎？就是用在這邊！</p>\n<p>之所以 Babel 能夠輕易解析你的程式碼，並且進行各種修改操作，依賴的就是各種 visitors 在 AST 上進行 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-traverse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">traverse</a>，當遇到對應的 node 時，visitor 就會做出相對的操作，進而將輸入的程式碼 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-generator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transform</a> 成預期的結果，這就是整個 Babel plugin 的實作核心。</p>\n<h3 id=\"babel-plugin-的基礎結構\" style=\"position:relative;\"><a href=\"#babel-plugin-%E7%9A%84%E5%9F%BA%E7%A4%8E%E7%B5%90%E6%A7%8B\" aria-label=\"babel plugin 的基礎結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel plugin 的基礎結構</h3>\n<p>若你剛剛有照著我的說明，在 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上方列表選取好 Parser 與 Transformer，那左下角應該會出現類似下方的程式區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"ast-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">Identifier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 上的預設 template，基本的 Babel plugin 也就是長這樣。</p>\n<p>你會接受一個 <code class=\"language-text\">babel</code> 物件，其中我們會需要的是 <code class=\"language-text\">babel.types</code>，在之後新增修改 node 時會不斷地用到，因此最好存成一個變數，省去 chain lookup。</p>\n<p>而基本上你要做的就是回傳一個 <code class=\"language-text\">visitor object</code>，其中定義以 node type 為名的 funciton，接收兩種參數：<code class=\"language-text\">path</code> 與 <code class=\"language-text\">state</code>：</p>\n<ul>\n<li>path\npath 代表的是在 traverse AST 過程中，連接 node 之間的邊。所以你可以用 <code class=\"language-text\">path.node</code> 取得目前的節點，也可以用 <code class=\"language-text\">path.parent</code> 取得父節點。\n此外，path 還能透過 <code class=\"language-text\">path.traverse</code> 來在原有的 visitor 內進行 nested visiting，這對於想要<strong>讓 visitor 在某個特定 visitor 執行後再執行</strong>時很有幫助，可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#state\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 範例</a>。</li>\n<li>state\nstate 的用法在 handbook 上也沒有說得很明確，我的理解是一個貫串整個 traverse 過程的 global state，你可以在任意階段修改 state。其中也包含你想讓使用 plugin 的使用者傳入的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#plugin-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">options 設定</a>。</li>\n</ul>\n<p>以上述 template 為例，你的 visitor 在遇到 type 為 <code class=\"language-text\">Identifier</code> 的節點時，就會執行 <code class=\"language-text\">path.node.name = path.node.name.split('').reverse().join('');</code>，也就是將該 <code class=\"language-text\">Identifier</code> node 的名稱給顛倒過來。</p>\n<p>此外，Visitor 在 traverse AST 的過程中，會在節點上進進出出，所以其實我們是可以定義 <code class=\"language-text\">enter</code> 與 <code class=\"language-text\">exit</code> 的函式來進行操作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> MyVisitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Identifier<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entered!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exited!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#visitors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 中有更多詳細介紹</a></p>\n<h3 id=\"動手撰寫自己的-visitor\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E6%89%8B%E6%92%B0%E5%AF%AB%E8%87%AA%E5%B7%B1%E7%9A%84-visitor\" aria-label=\"動手撰寫自己的 visitor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動手撰寫自己的 Visitor</h3>\n<p>知道基礎架構後，就可以開始撰寫 Visitor 了！</p>\n<p>但你可能會有點沒頭緒該怎麼開始，因為你不知道要從哪個 node type 的 visitor function 開始寫。這就是 <a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a> 的好處了，你只要將游標停放在編譯前的程式碼的任意位置上，右邊的 AST 樹就會自動 Focus 到對應的節點上頭（前提是要記得選取上方的 <code class=\"language-text\">AutoFocus</code>，預設會是啟用的）：</p>\n<p><img src=\"/image/ast-explorer-find-node.gif\" alt=\"Find the node we need\"></p>\n<p>以範例來說，我們要轉換的是 <code class=\"language-text\">{'#words-need-i18n'}</code>，將游標指上去後發現他是一個 type 為 <code class=\"language-text\">StringLiteral</code> 的 node，這就是我們要撰寫的 visitor function！</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token operator\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"i18n-transform\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// not required</span>\n    visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// some logic in here</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下來把需要的邏輯填寫上去：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">visitor<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'JSXExpressionContainer'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>\n          t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXElement</span><span class=\"token punctuation\">(</span>\n              t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXOpeningElement</span><span class=\"token punctuation\">(</span>\n                  t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FormattedMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXAttribute</span><span class=\"token punctuation\">(</span>\n                      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        t<span class=\"token punctuation\">.</span><span class=\"token function\">StringLiteral</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">true</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- 解釋前四行  然後畫個 path 的圖 -->\n<p>在前面有介紹到，<code class=\"language-text\">path</code> 代表連接著目前被拜訪到的節點，所以我們能用 <code class=\"language-text\">path.node.value.startsWith('#')</code> 來檢查目前節點的值是否為我們想要的（開頭為 hashtag）。但由於 <code class=\"language-text\">StringLiteral</code> 感覺得出來是到處都會出現的 node type，所以我們需要設立一些條件：當 <code class=\"language-text\">path.parent.type !== 'JSXExpressionContainer'</code> 時，我們就 bypass 這次的 visit 操作。所謂的 <code class=\"language-text\">JSXExpressionContainer</code> 就是在 jsx 中的 <code class=\"language-text\">{ }</code>。</p>\n<p>當條件都成立時，也就代表我們的 visitor 成功找到我們想轉換的程式碼 <code class=\"language-text\">{'#words-need-i18n'}</code>。這時聰明如你，一定會想說那就把 <code class=\"language-text\">path.node</code> 替換掉就好了吧！</p>\n<p>但是，<code class=\"language-text\">path.node</code> 目前指到的是 <code class=\"language-text\">StringLiteral</code>，也就是 <code class=\"language-text\">#words-need-i18n</code>，外面還有一層 <code class=\"language-text\">JSXExpressionContainer</code>，我們不能直接使用 <code class=\"language-text\">path.node.replaceWith</code> 來替換程式碼，我們要連同上一層都一起換掉，因此這邊需要使用 <code class=\"language-text\">path.parentPath.replaceWith</code>。以圖像表示的話大概像這樣：</p>\n<p><img src=\"/image/ast-explorer-path-replace.png\" alt=\"需要找到 parent path 來直接從上層替換程式碼節點\"></p>\n<!-- 放個 gif 說明如何找出要 create 什麼 node, 以及去哪裡找合法參數 （提及 log 訊息不一定看得出來）-->\n<p>接著，<code class=\"language-text\">replaceWith</code> 接收你要替換的節點當作參數，而這時我們最一開始宣告的 <code class=\"language-text\">const { types: t } = babel;</code> 就派上用場啦！</p>\n<p><code class=\"language-text\">babel.types</code> 可以幫我們創建出各種 type 的 node，也提供許多 type checking 的 function，像是剛剛我們檢查 <code class=\"language-text\">path.parent.type</code> 的地方其實應該更改為 <code class=\"language-text\">!t.isJSXExpressionContainer(path.parent)</code>。更多關於 <code class=\"language-text\">babel.types</code> 的操作可以參考 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-transformation-operations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">handbook 上的說明</a></p>\n<p>但到這邊問題又來了，我們怎麼知道要創建什麼 node 呢？</p>\n<p>我一開始也不知道，但抬頭想一想，AST Explorer 不是就會幫我們轉換 AST 嗎？那就把我們預期的結果程式碼也貼上去，不就知道他的 AST 長相了嗎？</p>\n<p>大膽將 <code class=\"language-text\">&lt;FormattedMessage id={'#words-need-i18n'}></code> 貼上去後，就能得到其 AST 結構：</p>\n<p><img src=\"/image/ast-explorer-final-ast-format.png\" alt=\"預期結果的 AST 結構\"></p>\n<p>接著呢，就到 <strong><a href=\"https://babeljs.io/docs/en/babel-types#identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel 官網的 docs</a>  裡面去查詢每一種需要創建的 type，各自要填入哪些參數</strong>，舉例來說，<code class=\"language-text\">&lt;FormattedMessage></code> 會是一個被 <code class=\"language-text\">JSXOpeningElement</code> 包起來，從 <a href=\"https://babeljs.io/docs/en/babel-types#jsxopeningelement\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docs</a> 能看到非常詳細的說明：</p>\n<p><img src=\"/image/ast-explorer-docs.png\" alt=\"JSXOpeningElement\"></p>\n<p>我們要填入三個參數: <code class=\"language-text\">name</code>, <code class=\"language-text\">attributes</code> 與 <code class=\"language-text\">selfClosing</code>，第一與第三個很好理解，中間的 <code class=\"language-text\">attributes</code> 裡面包含了其他的 type，這時你就需要再繼續往下查，直到完成所有需求為止。</p>\n<p>照著這樣的思路，一一將 AST 內的結構轉換到你的 plugin 程式碼內，就大功告成啦！</p>\n<p><img src=\"/image/ast-explorer-final-result.png\" alt=\"最終結果\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>當然這只是個很簡陋的實作，不過也算是把 plugin 的製作概念呈現了一遍，並稍加了解了 AST 的重要性與實用性。</p>\n<p>在實作你所想要的 plugin 功能時，勢必會遇到複雜得多的狀況，建議大家還是直接在 handbook 上查看最直接，上面有更詳細的 API 介紹與教學，包含 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#babel-template\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-template</a> 、 babel-types 的 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#builders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">builder</a> 與 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#validators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Validators</a>，更有 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#best-practices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Best Practices</a> 可供參考。也可以看看高手們的<a href=\"https://github.com/kentcdodds/babel-plugin-preval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作品</a></p>\n<p>最後，不知道有沒有讀者會覺得整個 Plugin 的邏輯操作與大家熟悉的 jQuery 有點類似？都是選取到某個元件後，就針對該元件進行更動：<code class=\"language-text\">$('StringLiteral').textContent = '&lt;FormattedMessage id={'xxx'}>'</code></p>\n<p>我在查資料的過程中發現一篇<a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">非常有趣又很清楚的介紹</a>，其中就是以 jQuery 來做類比（節錄其 slides 中的一段）：</p>\n<p><code class=\"language-text\">Babel:Javascript :: jQuery:DOM</code></p>\n<p><strong>jQuery 幫助你改變 DOM，而 Babel 幫助你轉化 Javascirpt</strong></p>\n<p>實在是很貼切的比喻不是嗎？</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"http://slides.com/kentcdodds/a-beginners-guide-to-asts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Writing custom Babel and ESLint plugins</a></li>\n<li><a href=\"https://www.henryzoo.com/babel-plugin-slides/assets/player/KeynoteDHTMLPlayer.html#2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How writing babel-plugin is like wrigint jQuery</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel Plugin Handbook</a></li>\n<li><a href=\"http://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Exporler</a></li>\n<li><a href=\"http://resources.jointjs.com/demos/javascript-ast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAVASCRIPT AST VISUALIZER</a></li>\n<li><a href=\"https://github.com/estree/estree\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST specification</a></li>\n</ol>","id":"89ec09ae-24c7-5115-8444-f16260372725","fields":{"slug":"visit-ast-with-babel-plugin"},"frontmatter":{"date":"2018-08-25T18:32:14.000Z","title":"透過製作 Babel-plugin 初訪 AST","tags":["es6","javascript","babel","ast","pattern"],"type":"tech","slug":"visit-ast-with-babel-plugin"},"timeToRead":16},"type":"tech"}},"staticQueryHashes":["2123680655"]}