{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/cds-2019-next-generation-web-styling","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Interviewer: Explain deadlock to me and you're hired.</p>\n</blockquote>\n<blockquote>\n<p>Developer: Hire me and I'll explain deadlock to you.</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>一陣子沒有關注 CSS 的最新發展，最近趁著年假補帶 2019 Google Chrome Summit 時，看到這場 talk - <a href=\"https://youtu.be/-oyeaIirVC0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next-generation web styling</a>，裡面提到不少有趣的新屬性，透過這篇文章整理一下內容，分享給各位與未來的我。\n註：官方在 12 月初也發佈了<a href=\"https://web.dev/next-gen-css-2019/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文字版本</a>，習慣閱讀原文的讀者可以參考看看。</p>\n<h1 id=\"新世代的css\" style=\"position:relative;\"><a href=\"#%E6%96%B0%E4%B8%96%E4%BB%A3%E7%9A%84css\" aria-label=\"新世代的css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>新世代的...CSS</h1>\n<ol>\n<li>scroll-snap - native scroll inertia and decelerations</li>\n<li>focus-within - solving focus accessibility within elements</li>\n<li>@media (prefers-*) - considerately adjust your UI/UX to a user's device preferences via Media Query hooks provided by browser</li>\n<li>logical properties - dynamic directionality</li>\n<li>sticky situations - keeping UI within the viewport</li>\n<li>backdrop-filter - style adjustments behind an element</li>\n<li>:is() - formerly :any() &#x26;&#x26; :matches()</li>\n<li>Grid-gap</li>\n<li>CSS Houdini - a low-level API for CSS</li>\n<li>typed OM - CSS values as JavaScript objects rather than strings</li>\n<li>Paint API - create your own paint functions using a canvas-like syntax</li>\n<li>animation worklet - off the main thread animation</li>\n<li>Others - size, aspect-ratio, min(), max(), clamp(), list style type, display: outer inner</li>\n</ol>\n<p>演講中洋洋灑灑介紹了 12 種以上的 CSS 新屬性與新功能，雖然其中有幾位老朋友在我之前的文章 - <a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 魔術師 Houdini API 介紹</a> 有說明過，但大部分的新屬性還是令人感到振奮！</p>\n<h2 id=\"scroll-snap\" style=\"position:relative;\"><a href=\"#scroll-snap\" aria-label=\"scroll snap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scroll-snap</h2>\n<p>看到 snap 自然反應先想到薩諾斯彈指消滅一半人口，但其實字面上還有迅速回復的意思，而 scroll-snap，顧名思義就是要讓你在 scroll 時，能夠迅速回到設定的 snap point。這麼說有點抽象，回想一下你使用過的 Carousel 套件，大多數當你滑動圖片超過一半距離時，套件會自動幫你將下一張圖片拉到正中間，若是滑動小於一半距離，則會彈回至原本的圖片，就像這樣：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/f271a7cbda1641efa2ecc6dda50d27cf.gif\" alt=\"Demo\"></p>\n<p>scroll-snap 主要提供的兩個屬性：<code class=\"language-text\">scroll-snap-type</code> 與 <code class=\"language-text\">scroll-snap-align</code> 就可以讓你直接透過 CSS 達到一樣效果，而且擁有足夠的調整彈性。</p>\n<p>Demo：</p>\n<p class=\"codepen\" data-height=\"430\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"Exawayy\" style=\"height: 430px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/Exawayy\">\n  scroll-snap example</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><code class=\"language-text\">scroll-snap-type</code> 作用在 scroll container 上頭，用來表明要用哪種 type 的 scroll 與 scroll 的方向。（註：scroll container　指的是擁有 <code class=\"language-text\">overflow: scroll|auto</code> 屬性，且其內元素足以造成 overflow 的 container。）</p>\n<p>而比起上述一般 carousel 套件預設的行為（移動小於一半距離拉回前一張圖），透過給予 <code class=\"language-text\">scroll-snap-align</code> 不同的屬性：<code class=\"language-text\">start</code>、<code class=\"language-text\">end</code> 和 <code class=\"language-text\">center</code>，可以自行決定 snap point，告知內容應該要對齊到 scroll container 中的哪個點。</p>\n<p>你可以從上面的 Codepen demo link 去修改 <code class=\"language-text\">scroll-snap-align</code> 看看，有什麼不同結果。</p>\n<p>另外，如果你不想讓每次 snap 都對齊邊緣，能稍微露出前一張圖的內容，可以透過 <code class=\"language-text\">scroll-padding</code> 與 <code class=\"language-text\">scroll-margin</code> 的調整來達成。不過注意，兩者的應用對象有所不同。</p>\n<p><code class=\"language-text\">scroll-padding</code> 需要應用在 scroll container 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.scroller section</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 <code class=\"language-text\">scroll-margin</code> 則是運用在 container 內的 children 上頭：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.scroller section</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-margin</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>兩者效果相同：</p>\n<p class=\"codepen\" data-height=\"428\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"jOEGbdQ\" style=\"height: 428px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example-2\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/jOEGbdQ\">\n  scroll-snap example-2</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>這對於你的 scroll container 中有 fixed 的元素時很有幫助：</p>\n<p class=\"codepen\" data-height=\"420\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"NWPaGmL\" style=\"height: 420px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example-fixedHeader\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/NWPaGmL\">\n  scroll-snap example-fixedHeader</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>更多細節，<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap/Basic_concepts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 上有蠻完整的說明</a>。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/10d10829177d46adab0c0ee8d582b217.png\" alt=\"scroll-snap-caniuse\"></p>\n<h2 id=\"focus-within\" style=\"position:relative;\"><a href=\"#focus-within\" aria-label=\"focus within permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>focus-within</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2019/10/13/web-accessibility-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Accessibility 的重要性</a>這篇文章中，有提到過元素可聚焦性的重要，讓使用者能用 tab 在網頁各元素間切換。但實作上常常遇到一個問題，就是當我們利用 <code class=\"language-text\">:focus</code> 僞類別製作 Menu 的下拉選單，讓子元素在父元素被 focus 後顯示出來時，tab 切換會失敗，因為當你 tab focus 到子元素時，父元素就失去 focus 狀態，子元素也因應消失：</p>\n<p><a href=\"https://web.dev/next-gen-css-2019/#:focus-within\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google 的圖畫</a>說明很清楚：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/3f70bc94fb30417c8a5a2b5bd83b6b5e.png\" style=\"max-width: 700px\">\n<p>但若是換成 <code class=\"language-text\">focus-within</code>，就不再有這問題了，他會在父元素被 focus 時觸發：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.menu:focus-within</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> visible<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"abzLBrP\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"focus-within-example\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/abzLBrP\">\n  focus-within-example</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/9af24cbb0e80433b8d43b184c76822d6.png\" alt=\"caniuse-focuswithin\"></p>\n<h2 id=\"media-prefers-\" style=\"position:relative;\"><a href=\"#media-prefers-\" aria-label=\"media prefers  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@media (prefers-*)</h2>\n<p>Media Queries 讓我們容易實作 RWD 設計，而現在最新的 Media Queries 可以讓我們偵測到使用者 OS-level 的系統偏好設定，例如 dark-mode，或是低階設備可以開啟 <code class=\"language-text\">prefers-reduced-motion</code> 來降低動畫節省資源。</p>\n<p>這些能夠自動偵測系統偏好，並給予回應的 Media Queries 有：</p>\n<p><a href=\"https://developers.google.com/web/updates/2019/03/prefers-reduced-motion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-reduced-motion</a>\n<a href=\"https://web.dev/prefers-color-scheme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-color-scheme</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-contrast</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-transparency\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-reduced-transparency</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">forced-colors</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">inverted-colors</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/light-level\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">light-level</a></p>\n<p>目前最新版的 Chrome (ver. 79) 已經有提供 <code class=\"language-text\">prefers-reduced-motion</code> 與 <code class=\"language-text\">prefers-color-scheme</code> 的 emulation，只要打開 Devtool，到 <code class=\"language-text\">Rendering</code> tab 下就能看到：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/ec593dddc40d4030bbdb5a7f2bf99d14.png\" alt=\"devtool @media emulation\"></p>\n<p>在演講中，講者 Adam 特別強調，<code class=\"language-text\">reduced-motion</code> 不是 <code class=\"language-text\">no-motion</code>，使用者想要少一點動畫，而非完全沒有動畫，可以從 演講中的範例感受一下（<a href=\"https://web.dev/next-gen-css-2019/#media-queries-level-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>、<a href=\"https://codepen.io/argyleink/pen/RwwZMKm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen demo</a>）：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/6ca565ec03eb439a9b66f5de287d062e.gif\" alt=\"reduced-motion\"></p>\n<h2 id=\"logical-properties\" style=\"position:relative;\"><a href=\"#logical-properties\" aria-label=\"logical properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logical properties</h2>\n<p>身為前端工程師，或多或少都會處理 i18n 的問題，在網頁排版上，不同語言間的 writing system 可能會造成我們需要個別為不同的語言客製化設定 css style，來調整 margin、padding 等等，而 Logical properties 就是希望能用更有效率、更好維護的方式來解決這問題。 <a href=\"https://web.dev/next-gen-css-2019/#logical-properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">image ref</a></p>\n<p>這是我們熟知的 box model：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/9d89a63601464607836370802e092ef5.png\" style=\"max-width: 700px\">\n<p>Logical properties 將其改為：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/78a8cb5f4113482a8f009f2400743435.png\" style=\"max-width: 700px\">\n<p>差別在於從原本單純 <code class=\"language-text\">top</code>、<code class=\"language-text\">down</code>、<code class=\"language-text\">left</code>、<code class=\"language-text\">right</code> 外，多了 <code class=\"language-text\">block-*</code> 與 <code class=\"language-text\">inline-*</code> 兩個維度，根據使用語言的不同，瀏覽器會自動調整 <code class=\"language-text\">block-*</code> 與 <code class=\"language-text\">inline-*</code> 代表的屬性，例如在英文的寫作系統上，<code class=\"language-text\">block-start</code> 就代表 <code class=\"language-text\">top</code>，<code class=\"language-text\">inline-end</code> 代表 <code class=\"language-text\">right</code>。</p>\n<p>有了 logical properties 的幫助，就能簡單的依據語言系統變更 <code class=\"language-text\">writing-mode</code> 與 <code class=\"language-text\">direction</code> 來調整 layout <a href=\"https://codepen.io/una/pen/mddxpaY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/47f5d3eaf6ba4545af05999e654f4700.gif\" alt=\"logical layout example\"></p>\n<h2 id=\"sticky-situations\" style=\"position:relative;\"><a href=\"#sticky-situations\" aria-label=\"sticky situations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sticky situations</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#Sticky_positioning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Position: sticky</code></a> 應該已經很多人用在產品當中了吧，但這次 Google 還是把它拿出來特別再介紹一番，提供了三種應用 sticky 的方式，蠻值得參考的：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/1c9bfc06cbbc423eac2d68da391a3af3.gif\" alt=\"sticky-demo\"></p>\n<p>仔細看每種應用的差別，基本上在於 sticky 的元素如何被”解除“ sticky，比較有趣的是 Sticky Desperado，利用 grid-system 達到 two column 的變化，可以到 codepen 上觀看實際程式碼：<a href=\"https://codepen.io/argyleink/pen/YzzZyMx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Slide</a>、<a href=\"https://codepen.io/argyleink/pen/abbJOjP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Stack</a>、<a href=\"https://codepen.io/argyleink/pen/qBBrbyx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Desperado</a></p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/23c0b7fc70b540fc8632163d24e1c2c2.png\" alt=\"caniuse-sticky\"></p>\n<h2 id=\"backdrop-filter\" style=\"position:relative;\"><a href=\"#backdrop-filter\" aria-label=\"backdrop filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>backdrop-filter</h2>\n<p>再來是我最喜歡的一個新屬性。以往我們要達到模糊圖片背景，並在上面加上文字的效果，可能需要這樣做：</p>\n<p class=\"codepen\" data-height=\"382\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"JjorEqG\" style=\"height: 382px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"blur image with text\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/JjorEqG\">\n  blur image with text</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>需要把圖片設定成 <code class=\"language-text\">background-image</code>，設定 <code class=\"language-text\">filter: blur</code>，再透過 <code class=\"language-text\">position:fixed</code> 把文字釘上去。但有了 <code class=\"language-text\">backdrop-filter</code>，我們簡單將這個屬性套用在想要疊加的文字上，並直接放置於 <code class=\"language-text\">img</code> 元素：</p>\n<p class=\"codepen\" data-height=\"362\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"ExawZqj\" style=\"height: 362px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"blur image with text-backdrop-filter\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/ExawZqj\">\n  blur image with text-backdrop-filter</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"is\" style=\"position:relative;\"><a href=\"#is\" aria-label=\"is permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:is()</h2>\n<p><code class=\"language-text\">:is()</code> 這個僞類別已經存在很久了，但他們覺得很少人真正使用它，因此特別提出來介紹。\n基本上 <code class=\"language-text\">:is()</code> 的功用就是能讓你將用逗號分隔的 selector，以參數形式放入其中，來達成同樣效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span>focus<span class=\"token punctuation\">,</span>\nbutton<span class=\"token operator\">:</span>focus <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\narticle <span class=\"token operator\">></span> h1<span class=\"token punctuation\">,</span>\narticle <span class=\"token operator\">></span> h2<span class=\"token punctuation\">,</span>\narticle <span class=\"token operator\">></span> h3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 與上面同樣效果 */</span>\nbutton<span class=\"token operator\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">.</span>focus<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>focus</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\narticle <span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h1<span class=\"token punctuation\">,</span>h2<span class=\"token punctuation\">,</span>h3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"gap\" style=\"position:relative;\"><a href=\"#gap\" aria-label=\"gap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gap</h2>\n<p>這邊指的 gap，就是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Grid Layout</a> 中的 gap，讓你不用為了製造出元素間的隔間，使用 margin，卻多出不必要的空隙 <a href=\"https://web.dev/next-gen-css-2019/#gap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">img ref</a>：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/95dbce89c5b54d8db7b6497a7fbcec76.png\" style=\"max-width: 700px\">\n<p>在演講中他們也有提到，<code class=\"language-text\">gap</code> 除了能用在 Grid layout 外，FireFox 也支援將其應用在 <code class=\"language-text\">flex</code> display 上頭，慣用 FireFox 瀏覽器的讀者可以嘗試看看。</p>\n<h2 id=\"css-houdinityped-ompaint-apiworklet\" style=\"position:relative;\"><a href=\"#css-houdinityped-ompaint-apiworklet\" aria-label=\"css houdinityped ompaint apiworklet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Houdini、typed OM、Paint API、Worklet</h2>\n<p>CSS Houdini 是由一群來自 Mozilla, Apple, Opera, Microsoft, HP, Intel, IBM, Adobe 與 Google 的工程師所組成的工作小組，志在建立一系列的 API，讓開發者能夠介入瀏覽器的 CSS engine 運作，帶給開發者更多的解決方案，用來解決 CSS 長久以來的問題：</p>\n<ul>\n<li>Cross-Browser isse</li>\n<li>CSS Polyfill 的製作困難</li>\n</ul>\n<p>CSS Houdini 提供的 API 讓你能存取 CSS Object Model，讓你透過 Javascript 延展 CSS 的功能，比起 CSS polyfill 能有更好的效能。</p>\n<p>而 Worklet、Typed OM、Paint API 也都包含在 CSS Houdini 的規範中，在我之前的文章 <a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 魔術師 Houdini API 介紹</a> 都有詳細介紹過，有興趣可以前往細讀。</p>\n<p>這邊我簡單說明 typed OM 與 Paint API 這兩個目前實作度較高的新功能，其中 Paint API 需要 Worklet 的輔助。</p>\n<p><em>typed OM</em> 簡單來說就是就是 CSSOM 的強化版，最主要的功能在於將 CSSOM 所使用的字串值轉換成具有型別意義的 JavaScript 表示形態，例如你可以這樣操作 CSS style: (source from <a href=\"http://slides.com/malyw/houdini-codemotion#/27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CSS -> JS</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>styleMap<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSSimpleLength {value: 12, type: \"px\", cssText: \"12px\"}</span>\n\n<span class=\"token comment\">// JS -> JS</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSUnitValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSUnitValue{value:5,unit:\"px\",type:\"length\",cssText:\"5px\"}</span>\n\n<span class=\"token comment\">// JS -> CSS</span>\n<span class=\"token comment\">// set style \"transform: translate3d(0px, -72.0588%, 0px);\"</span>\nelem<span class=\"token punctuation\">.</span>outputStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTransformValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTranslation</span><span class=\"token punctuation\">(</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSSimpleLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> currentPercent<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用 <code class=\"language-text\">styleMap</code> 取得元素上以物件型態表示的 style 屬性，並能透過 <code class=\"language-text\">outputStyleMap</code> 來設定 style，其中還可看出多了 <code class=\"language-text\">CSSTransformValue</code> 與 <code class=\"language-text\">CSSTranslation</code> 這種 Class Interface。</p>\n<p>而 <em>Paint API</em> 則提供一個叫做 registerPaint 的方法：：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>宣告使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.div-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.div-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 50% 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>.div-1 與 .div-2 就可以擁有各自定義寬高顏色的方形 background-image。</p>\n<p>不過這邊要注意一下，上面撰寫的 js 檔案，你可能會覺得就直接像一般 web 嵌入 js 的方式一樣即可，\n但實際上並非如此，我們需要透過 <em>Worklets</em> 來幫我們載入。以上面的 Paint API 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add a Worklet</span>\npaintWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// WORKLET \"simpleRect.js\"</span>\n<span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Worklets</em> 可以算是給 CSS Engines 使用的 worker，相對於 web worker 來說較為輕量、生命週期較短，適合用來處理 CSS engine 這種可能會牽扯到數百萬畫素圖片的工作。</p>\n<p>實際範例可以參考 Google 提供的 <a href=\"https://codepen.io/una/pen/VXzRxp?editors=1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Codepen 範例</a></p>\n<h2 id=\"others\" style=\"position:relative;\"><a href=\"#others\" aria-label=\"others permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Others</h2>\n<p>還有許多新屬性在演講中沒有時間細講，就將其主要功能列在這邊，有興趣的人可以到 MDN 或 W3C 上搜尋。</p>\n<ul>\n<li><code class=\"language-text\">size</code>: 可以讓你同時設定元素的寬、高屬性。</li>\n<li><code class=\"language-text\">aspect-ratio</code>: 透過此屬性，再也不用利用 padding 等方式來製造等比例縮放效果了！</li>\n<li><code class=\"language-text\">min()</code>, <code class=\"language-text\">max()</code>, <code class=\"language-text\">clamp()</code>: 這幾個函式提供你在各種 CSS 屬性加上數值的限制。</li>\n<li><code class=\"language-text\">list-style-type</code>: 有新的 value 可以設置，像是 emoji 與 SVGs。</li>\n<li><code class=\"language-text\">display: outer inner</code>: display 屬性之後能夠接受兩個參數，讓你明確的個別設置 outer 與 inner layout，而非使用 <code class=\"language-text\">inline-flex</code> 這種結合在一起的 keywords。</li>\n</ul>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>CSS 的發展總是比較緩慢，畢竟需要各個瀏覽器實作配合，背後的因素可能不單單是純技術這麼簡單，但慢歸慢，還是能看得到前進的步伐，在新屬性普及前，就到 codepen 上弄個 side project 玩玩吧！\n所有演講中提到的功能，只要是目前瀏覽器已經支援的，都有範例公布在他們的<a href=\"https://css-at-cds.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例網站</a>上，推薦前往試試！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ul>\n<li><a href=\"https://youtu.be/-oyeaIirVC0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vidoe - Next-generation web styling</a></li>\n<li><a href=\"https://web.dev/next-gen-css-2019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Article - Next-generation web styling</a></li>\n<li><a href=\"https://css-at-cds.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Examples - Next-generation web styling</a></li>\n<li><a href=\"https://juejin.im/post/5dd68a9be51d451e6d48c4b8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你不知道的 CSS ： Next-generation web styling</a></li>\n</ul>","fields":{"slug":"cds-2019-next-generation-web-styling"},"frontmatter":{"title":"CDS2019 Next-generation web styling 整理介紹","date":"12-31-2019","tags":["css","chrome dev summit","Web"]},"timeToRead":12}},"pageContext":{"slug":"cds-2019-next-generation-web-styling","prev":{"excerpt":"好歌分享：Owl","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/JEFd3rvhBEk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Owl</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/JEFd3rvhBEk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>記得剛上研究所的時候參加了第一屆的 WebConf，沒記錯的話是 WebConf Taiwan 2013。當時兩天的議程下來，接收到的知識與衝擊讓我精疲力盡，但心中是滿溢的富足感，自此之後，只要有機會我就會去參加各種 Conference。</p>\n<p>然而或許隨著經驗增長，平常獲取知識的管道變多，能從演講者的演說內容吸取到的新知越來越少，對於參與會議變得興致缺缺，直到我理解到在會議現場與人互動交流其實才是 Conference 的一個主要功能後，我才又再度燃起動力。</p>\n<p>剛好目前所待的公司，對於補助員工前往國外參與會議非常大方，從加入後我就一直搜尋有什麼想參與的會議，但籤運一向不好的我，果不其然沒抽到辦在 Las Vegas 的 React Conf 2019; 今年的 Chrome Dev Summit 也沒被選中; 更錯過 React Finland 跟 React Rally 的最後幾張票。</p>\n<p>然而在接近年尾的十月底，Team 上同事大力推薦 GraphQL Summit，剛好當時手上有個專案使用 Apollo 作為主要框架，對於 GraphQL 處於熟悉與不熟悉之間， 抱持著『以這種狀態去參加會議，或許就能再次體驗到當年參與 WebConf 的那種新知衝擊』的想法，就一起去了，也的確收穫不少。</p>\n<p>回來到現在其實過了一個多月，趁著還沒有完全忘光，趕快記錄下來與大家分享，包含我有聽的議程，以及會議期間的一些見聞。</p>\n<h1 id=\"graphql-summit\" style=\"position:relative;\"><a href=\"#graphql-summit\" aria-label=\"graphql summit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Summit</h1>\n<p>GraphQL Summit 是目前專門以 GraphQL 為主題的最大會議，從 2015 年 GraphQL 開源後，連續舉辦了 GraphQL Summit 2016、2017、2018 與 2019，主要由 Apollo 所主辦，往年 Facebook、Twitter、GitHub 等大公司也都有贊助或演講，今年的贊助商名氣不如以往（我本來心心念念想搜刮 GitHub 貼紙...），場地卻升級不少，舉辦在舊金山的凱悅飯店。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/346dbd0cbfe047caa5f1901e9814a963.png\" alt=\"GraphQL Summit 2019 Entry\"></p>\n<p>今年的會議分為三軌，除了一般議程外，中間也有一軌會穿插 Lighting talks，主題橫跨前端與後端在 GraphQL 上的應用、Best practice、工具與實戰（踩雷）經驗分享，除此之外，中午時間在餐廳區域也有畫分出各種主題的 topic table，有 Apollo 的員工作為主持人，引導大家針對該桌的主題進行討論，邊吃午餐邊進行技術討論的氛圍很不錯。</p>\n<p>至於議程部分，其實大多是聚焦在 Server 端的主題，比例上來說前端議程偏少，而我主要還是挑選與前端相關的議程參與，以及一些 Apollo 推廣自家框架的 Talks。</p>\n<p>接下來我會從我有聽的議程中，擷取我覺得比較有趣的演講，做些簡單地整理介紹，並附上我有收集到的講者投影片與影片連結，如果看完覺得有興趣，可以到官方的 Youtube 網站上觀看完整演講，目前 <a href=\"https://www.youtube.com/playlist?list=PLpi1lPB6opQyraZSmwFre_FpL00_3nTzV\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL Summit 2019 的影片</a>都已全數上架！</p>\n<h2 id=\"在進入議程內容前\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E9%80%B2%E5%85%A5%E8%AD%B0%E7%A8%8B%E5%85%A7%E5%AE%B9%E5%89%8D\" aria-label=\"在進入議程內容前 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在進入議程內容前...</h2>\n<p>先跟大家分享一些會議中的小趣事充充版面 :p</p>\n<p>這張照片是第一天早上排隊註冊時拍下的，可以看到主辦方用 <code class=\"language-text\">Last Name</code> 作為分流的依據，但人潮很明顯還是集中在一排上，畢竟，即使有來自世界各地的與會者，姓氏要能均勻分布在各種字母上的機率還是不高啊。雖然照片中排隊人數還不多，但我在那邊觀察了一段時間，不少外國人也都發現這個現象，議論紛紛 XD</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/4510106525044fecbeb0d2d45d3e1f57.png\" alt=\"lineup\"></p>\n<p>另外一個我覺得莫名其妙但好感度很高的是 puppy booth 🐶</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/900548092e054f2eb09497b525d187e2.png\" alt=\"puppy booth\"></p>\n<p>完全不知道為什麼要弄一個小圍欄然後大家可以進去玩狗狗 XD 真的很療癒就是了。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/9ecb40321f664dfda2a58835d1b200f2.png\" alt=\"apolloween\"></p>\n<p>會議期間恰逢萬聖節，第一天議程結束後的晚餐順便辦了 apolloween party，請了個 DJ 來放音樂，有些會眾也自帶服裝來替換，可惜工程師就是工程師，最嗨的總是主辦方自己 XD</p>\n<p>這種會後 party 就是喝酒尬聊的場合，比較有印象的是遇到一個在 CodeSandbox 工作的大哥，隨身攜帶公司的 stickers，大概是交朋友的利器，當然我也拿了不少；身為 CodeSandbox 使用者，跟他<del>提了不少需求，一起抱怨 TypeScript</del> 聊了不少，整體還算有趣。</p>\n<p>閒話說到這邊，來進入正題。</p>\n<h1 id=\"keynotes\" style=\"position:relative;\"><a href=\"#keynotes\" aria-label=\"keynotes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keynotes</h1>\n<h2 id=\"opening-keynote---apollo-co-founder--cto\" style=\"position:relative;\"><a href=\"#opening-keynote---apollo-co-founder--cto\" aria-label=\"opening keynote   apollo co founder  cto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/EDqw-sGVq3k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Opening Keynote - Apollo Co-Founder &#x26; CTO</a></h2>\n<p>負責 Kicks off GraphQL Summit 的是 Apollo 的 Co-Founder 兼 CTO, Matt Debergalis。基本上就是來介紹他們家產品，並帶出後續議程的大略方向。</p>\n<p>這場 Keynote 中，他重述了 GraphQL 在整體專案架構中所能帶來的好處，將以往後端與前端 M to N 的溝通模式，改為中間統一以一層 <strong>Data Graph</strong> 集中資料並映射到不同前後端的新架構，而 GraphQL 就是實作該 Data Graph 的最好選擇。包含 NY Times、Paypal 等公司都投入大量資源在 GraphQL 上，Paypal 內部有五十多個產品都是採用 GraphQL 技術作為前後端資料溝通的媒介。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/e23ed749dead4c7c9df61bda35671b18.png\" alt=\"data-graph\"></p>\n<p>此外，他也推薦大家去閱讀他們所編寫的 <a href=\"https://principledgraphql.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Principled GraphQL</a>，根據上百間公司導入 GraphQL 的經驗總結出一套準則，並分類為三大塊來探討：<em>Integrity</em>、<em>Agility</em> 與 <em>Operations</em>。\n<strong>Integrity</strong> 聚焦在 <strong>One Graph</strong> 的概念，每個 Team 應該共享一個統一的 Graph，但實作上還是每個 Team 各自負責。\n<strong>Agility</strong> 則是提醒大家，要能夠採用敏捷開發的準則來實作，Graph 的 Schema 要能夠根據實際需求的變化來增長或改變。\n<strong>Operations</strong> 著重在如何將 Graph 安全地部署到你的線上環境，包含如何 Logging 與 Separate concerns。</p>\n<p>Apollo 推出的 <a href=\"https://www.apollographql.com/docs/apollo-server/federation/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Federation</a> 與 <a href=\"https://www.apollographql.com/docs/graph-manager/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Graph Manager</a> 就是幫忙實現這些準則的工具。今年也有個議程在介紹 <a href=\"https://youtu.be/LKQKn1oFXJU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Federation Architecture</a>。</p>\n<p>前端部分，他介紹 Apollo、React Hooks 與 TypeScript 之間是如何完美匹配，搭配 codegen，自動依據 GraphQL Query 產生對應的 Type Interface，再交由 VS Code 等編輯器來啟用 Auto Complete 等功能。</p>\n<p>接著以 Search 為例，引出 Apollo Client 3.0 在處理前端 Cache（Components、Local State、Network transport） 上所提出的 Unified Cache Model，讓 Apollo Client 幫你處理常見 Pattern 的 Cache 問題，並提供簡易的 API 讓你在像 Search 這類需要不同 Cache 策略的功能上方便調適。</p>\n<p>Keynote 的總結是，<strong>GraphQL is mature and approachable</strong></p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/f6ecba278a4946e2a3f896d13b735e05.png\" alt=\"keynote summary\"></p>\n<h2 id=\"migrating-to-graphql-at-airbnb-brie-bunge-software-engineer-at-airbnb\" style=\"position:relative;\"><a href=\"#migrating-to-graphql-at-airbnb-brie-bunge-software-engineer-at-airbnb\" aria-label=\"migrating to graphql at airbnb brie bunge software engineer at airbnb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/pywcFELoU8E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Migrating to GraphQL at Airbnb (Brie Bunge, Software Engineer at Airbnb)</a></h2>\n<p>這場也算是 Keynote，是我兩天議程下來第二喜歡的一場 Talk（第一喜歡的等等就會介紹到），推薦大家到 Youtube 上觀看，也就 20 分鐘左右。由任職於 Airbnb 的 Brie Bunge 分享他們內部如何從 react/redux/rest api 的架構轉移到 react/apollo/typescript 的過程。</p>\n<p>去年的 GraphQL Summit 他們就已經分享過 GraphQL 如何大幅提升他們的開發效率，而一年來他們將 GraphQL 移植到越來越多的 team 內，像是 PWA 版本的 Mobile Web。</p>\n<p>在 Migration 的策略上，Airbnb 採用 <strong>Incremental adoption</strong>，他們將整個 Migration 的過程分為五個階段，每個階段的目標都是要能產生一個 shippable 且 fully funcational 的產品。</p>\n<p>在執行 Incremental adoption 前，有些 pre-requisites 他們需要先滿足：1. 在後端使用 GraphQL（可以看他們的 <a href=\"http://bit.ly/36jy2Xd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Medium 文章</a>）；2. 採用 TypeScript，利用 codegen 從 GraphQL Schema 產生與 Query 對應的 Type Interface，保持前後端的 Single source of truth。TypeScript 也成了 Airbnb 內部的官方前端語言（可以看同個講者在 <a href=\"https://youtu.be/P-J9Eg7hJwE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSConf 的演講</a>）。</p>\n<p>Incremental adoption 分為五個階段：</p>\n<ol>\n<li>\n<p>Rest -> GraphQL</p>\n<ul>\n<li>這個階段的目標是要確保前後端的整合是沒問題的，也就是得確保 GraphQL Schema 與原先 Rest API 提供的資料能夠 Match，做法上前端可能得在 Query 前實作一些 Adapter 來修改 request params 與 response data。</li>\n<li>另外也必須要能夠依據 Schema 產生 Typescript Type。光是 HomeCheckoutFlow 這個 feature 就能產生超過一千行的 auto-generated TypeScript Types。</li>\n<li>在這個階段他們不更新 React Component，也不修改 API Response Shape，因此可能會有 Over-fetching 的問題，但至少完成此階段時，他們還是保有 Shippable 的產品。</li>\n</ul>\n</li>\n<li>\n<p>Propagate Types</p>\n<ul>\n<li>第二階段目的在於加強 TypeScript Types，來提高後續階段的實作信心。在此階段不碰觸任何 Runtime behavior 與產品行為。</li>\n<li>利用 Generated types 來取代任何程式碼內的 <code class=\"language-text\">any</code> Types。</li>\n<li>有了完整的 Types 後，常常會需要進行 deep properties check，像是 <code class=\"language-text\">data &amp;&amp; data.reservations &amp;&amp; data.reservations[0]</code>。他們利用 <a href=\"https://www.npmjs.com/package/idx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IDX</a> 這個套件來作為 optional chaining 出現前的暫解。</li>\n</ul>\n</li>\n<li>\n<p>Apollo HOC -> Hooks</p>\n<ul>\n<li>HOC 與 Hooks 現在是共存在 code base 中，但積極的從 HOC 移植到 Hooks 上。（<code class=\"language-text\">useQuery</code>, <code class=\"language-text\">useMutation</code>）</li>\n<li>從 Redux Store 移植到 Apollo Cache，但在此階段他們還未把 Redux Store 完全拿掉，因為有些資訊並沒有存到 Apollo Cache 中，但其扮演的角色已經不那麼重要了。</li>\n</ul>\n</li>\n<li>\n<p>Granular Query Fragements</p>\n<ul>\n<li>在這個階段，Airbnb 的 Migration 尚有 Over-fetching 問題要解決。以下圖為例，他們從 Component Tree 的最下層開始，也就是最先開始 render 的 Component 開始採用 Query Fragements，讓每個 Container 自己決定要拉取哪些資料，並共享 Fragements，逐步解決 Over-fetching issue。<img src=\"https://static.coderbridge.com/img/ArvinH/ec630598b2df4c4988807b5d3d3c0811.png\" alt=\"Granular Query Fragements\"></li>\n</ul>\n</li>\n<li>\n<p>State Management</p>\n<ul>\n<li>當所有 React Component 都移植到了 Apollo 上後，他們開始檢視剩餘的 Redux state management。他們發現所有僅存的 Redux Store 所儲存的狀態都能用 React State、Context 與 Apollo cache + resolvers 取代。</li>\n<li>如此一來就能在整個 State management 上有一致的 mental model，並且減少 Redux 帶來的 boilerplate，還能享用 Apollo 自帶的 Caching 功能。</li>\n</ul>\n</li>\n</ol>\n<p>演講最後她提到了目前團隊正在研究的方向，其中的 Service Worker Query Pre-fetching 很有意思，她以 Server-side rendering 為例，提到可以將 GraphQL Query 從 Component level 拉到 route level，如此一來就能透過 Service Worker 提早觸發 GraphQL Query request，大量縮短使用者從看到 Server-side rendered 的 HTML 與頁面實際能操作的時間差。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/d40a7587c09648db8d25cec342b48e53.png\" alt=\"SW query pre-fetching\"></p>\n<h1 id=\"talks\" style=\"position:relative;\"><a href=\"#talks\" aria-label=\"talks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Talks</h1>\n<p>接下來我想先介紹兩場我印象最深刻的 Talks，以免大家因為內容太長而錯過，這兩場 Talks 除了內容扎實外，各自有獨特之處值得一提。</p>\n<h2 id=\"usesubscription-a-graphql-game-show-alex-banks---software-engineering-instructor-at-moon-highway\" style=\"position:relative;\"><a href=\"#usesubscription-a-graphql-game-show-alex-banks---software-engineering-instructor-at-moon-highway\" aria-label=\"usesubscription a graphql game show alex banks   software engineering instructor at moon highway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/QUeL-GfNJVU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useSubscription: A GraphQL Game Show (ALEX BANKS - Software Engineering Instructor at Moon Highway)</a></h2>\n<p>Alex Banks 在這場演講中儼然是個節目主持人，唱作俱佳，時間掌控也超好，以充滿互動式的演講帶出 Subscription 的用法與實作上的要點。我在之前從沒使用過 SubScription，但看完他的 Talk 後，對整體運作與如何使用有了非常清晰的輪廓，極力推薦大家點進影片觀看整場 Talk，看他如何現場用 Mutation 與 SubScription 切換音樂，又如何以 \"Live Coding\" 的方式說明 Client 端需要事先 Setup 哪些東西才能讓前後端的 SubScription 串接起來。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/6fe6c13f268744e3a0c9452f22fe72cb.png\" alt=\"GraphQL Game Show\"></p>\n<p>實際上 SubScription 就是開啟一個 WebSocket 連線來 PubSub 資料  。透過 SubScription，能輕易實作出互動遊戲，例如他在現場用 Mutation trigger 一個 Question，現場聽眾只要連進他的伺服器就會接收到問題，並且進行回答， 使用者透過另一個 Mutation 將答案推回 Server，更新狀態後，SubScription 再推回給所有 Client 端。</p>\n<p>影片中他利用 <code class=\"language-text\">ApolloLink</code> Interface 中提供的 <code class=\"language-text\">Split</code> 函式來區分進來的 Query 要使用一般的 HttpLink 或是需要 SubScription 處理。</p>\n<p>另外演講的最後，他提到 Apollo 提供的 PubSub 是運行在你 Nodejs 的單ㄧ Instance 上的，所以當你的 service 需要 scale 時，就必須要注意，可能採用 Redis 會是比較好的替代選擇。</p>\n<p>非常有趣的一場演講，節奏流暢，說明清晰，也為他與他老婆創辦的程式教育平台 Moon Highway 打了最好廣告，他也有出版一些書籍：<a href=\"http://shop.oreilly.com/product/0636920137269.do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Learning GraphQL</a>、<a href=\"http://shop.oreilly.com/product/0636920049579.do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Learning React</a>。</p>\n<h2 id=\"graphql-search-artem-shtatnov-software-engineer-at-netflix\" style=\"position:relative;\"><a href=\"#graphql-search-artem-shtatnov-software-engineer-at-netflix\" aria-label=\"graphql search artem shtatnov software engineer at netflix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/04l8eLrGNSw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL Search (Artem Shtatnov, Software Engineer at Netflix)</a></h2>\n<p>這場 Talk 我是衝著講者來自 Netflix 去聽的，實際上的內容因為沒有接觸太多 Search 功能，所以聽起來感受不深。會想特別提這場演講是因為，講者本身應該是有<a href=\"https://zh.wikipedia.org/zh-hant/%E5%A6%A5%E7%91%9E%E7%97%87\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">妥瑞症</a>，想當然爾，演講的過程就不如他人順暢，從自我介紹開始，大家就注意到了，當時我特意觀察了在場的聽眾，蠻訝異的是還是有少數人露出些許不耐的表情，但講者很認真的講完整場，而且其實內容很清楚，結束後的掌聲比起前面幾位講者都大了很多。</p>\n<p>簡單介紹一下演講內容，是介紹 Netflix 如何根據 data graph 裡存在的 graph edges 來建立 Search Indices，進而在整個 Graph 上進行有效搜尋。</p>\n<p>主要利用 Kafka 來處理 change event，告知 Indexer 有改變發生；GraphQL 針對 change 改變資料；Elasticsearch 作為 Search database 儲存資料。這三者組合成他們的 Search Indexer。</p>\n<p>你可以在他們的<a href=\"https://medium.com/netflix-techblog/graphql-search-indexing-334c92e0d8d5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方 Blog 上找到文字版的說明</a>。</p>\n<p>另外附上講者的網站：<a href=\"https://artemshtatnov.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">artemshtatnov.com</a></p>\n<h2 id=\"components-as-data-a-cross-platform-graphql-powered-component-api-luke-herrington-senior-javascript-engineer-at-four-kitchens\" style=\"position:relative;\"><a href=\"#components-as-data-a-cross-platform-graphql-powered-component-api-luke-herrington-senior-javascript-engineer-at-four-kitchens\" aria-label=\"components as data a cross platform graphql powered component api luke herrington senior javascript engineer at four kitchens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/k7oOShYz0R0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Components as Data: A Cross Platform GraphQL Powered Component API (Luke Herrington, Senior Javascript Engineer at Four Kitchens)</a></h2>\n<p>這位講者在我們第一天午餐時，剛好跟我們做同一桌，聊天過程中得知他在做的東西，跟我手上目前的一個專案做的事情簡直一模一樣，所以就去聽了他的演講。</p>\n<p>基本上他的想法是，讓前端頁面的 Layout 與 Component 組成資訊交由後端來儲存與決定，前端只需要 Mapping 真正的 Component 程式碼，這樣一來 PM 想要調整 Layout，或是需要 A/B Testing、設置 Feature Flag 時，只需要更動後端資料，前段就能自動反應。</p>\n<p>這種作法在我手上的專案很適合，因為使用情境的切合。但對我們來說，因為不是每個頁面都會用到所有的 Component，若是前端需要存放一個包含所有  Component 的 Map，會蠻浪費的，因此需要 Dynamic loading，而 Dynamic loading 到了 SSR 上又是另一個需要處理的麻煩事務。</p>\n<p>演講結束後我有去向他詢問類似問題，想知道他是如何解決前端需要儲存一個 Component Map，但可能不是每個頁面都會用到所有 Component，這種資源浪費的問題，但果然以他的 Use Case 來說，並不太需要考慮到這問題。但即便如此，看到自己平常實作上用到的架構被包裝成一個演講的 Topic 感覺還是蠻有趣。</p>\n<h2 id=\"optimistic-ui-predicting-the-future-kenny-hammerlund\" style=\"position:relative;\"><a href=\"#optimistic-ui-predicting-the-future-kenny-hammerlund\" aria-label=\"optimistic ui predicting the future kenny hammerlund permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/465bHdrcU7s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Optimistic UI: Predicting the Future (KENNY HAMMERLUND)</a></h2>\n<p>這場是 Lighting talk，被名字吸引而來，後來發現其實他做的事情很簡單，而且大部分前端應該都是這麼做的。</p>\n<p>想像一下你在製作一個留言版，當使用者編輯或是新增留言時，你會送出 Request 後，重新再從 Server 端拉一次資料，還是你會將 Local state 直接更改呢？相信多數人會採用前者做法。</p>\n<p>這場演講就是在講這件事，只是說，Apollo Client 讓這件事變得非常容易，它提供的 Optimistic Function，讓你在 Query 中指定該如何在 Server 資料還未 Response 時，先行更新資料。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/900576e4c146493d9880364e77a68164.png\" alt=\"Optimistic UI\"></p>\n<p>也可以參考 Apollo 官方網站上的文章：<a href=\"https://www.apollographql.com/docs/react/performance/optimistic-ui/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Optimistic UI</a></p>\n<h2 id=\"a-treatise-on-state-jed-watson-partner-at-thinkmill\" style=\"position:relative;\"><a href=\"#a-treatise-on-state-jed-watson-partner-at-thinkmill\" aria-label=\"a treatise on state jed watson partner at thinkmill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/tBz3UmZG_bk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Treatise on State (Jed Watson, Partner at Thinkmill)</a></h2>\n<p>這場 Talk 跟 GraphQL 關係不大，但我覺得蠻有意思的，講者探討我們在進行 State management 的同時，應該要先針對 State 進行分類，根據不同的分類用不同的方式管理。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/cc4b1461ac264652ace278b34c812e6a.png\" alt=\"Treatise on State\"></p>\n<p>講者將 State 分類為五類：</p>\n<ol>\n<li>\n<p>Local State</p>\n<ul>\n<li>Component State（元件內的狀態）</li>\n<li>Form State（表單內的狀態）</li>\n<li>UI State（其他 UI 操作更動的狀態）</li>\n<li>最基本的狀態，通常會以 Props 方式傳遞給其他 Component</li>\n</ul>\n</li>\n<li>\n<p>Shared State</p>\n<ul>\n<li>App State</li>\n<li>Data (cache or store)</li>\n<li>UI State (Shared concerns)</li>\n<li>只有在你知道你需要 Shared state 時，才需要來存取</li>\n<li>Local state 要變成 Shared State 的先決條件在於，兩個或以上的元件需要存取、操作同一塊 State。不過要注意 Props drilling，該以 Context 方式進行共享。</li>\n</ul>\n</li>\n<li>\n<p>Remote State</p>\n<ul>\n<li>你不擁有的狀態</li>\n<li>你可能會需要 Cache 它，或是從該狀態取得另外的值</li>\n<li>Local changes 會透過 API 來與其進行 Sync</li>\n<li>該狀態永遠是 async 且不可靠的</li>\n<li>講者沒有給很明確的例子，但依我理解，指的是 Server 端提供的資料狀態。</li>\n</ul>\n</li>\n<li>\n<p>Meta State</p>\n<ul>\n<li>提供給你參考的狀態，你不是狀態的來源</li>\n<li>有 API 會改變其狀態</li>\n<li>Always respect it</li>\n<li>不是 Remote State 的一部分，只是常常一起出現</li>\n<li>舉例來說，input box 的 Auto complete 功能，當你 Typing 時，等待 response 時的 Loading state。</li>\n</ul>\n</li>\n<li>\n<p>Router State</p>\n<ul>\n<li>提供給你參考的狀態，你不是狀態的來源</li>\n<li>有 API 會改變其狀態</li>\n<li>不是 Remote State 的一部分，只是常常一起出現</li>\n<li>準則與 meta state 相同，主要指的是當你網站的 Route 改變時，你通常會因應而呈現不同的 Component，這就是 Router State。</li>\n</ul>\n</li>\n</ol>\n<p>講者提到幾點從 Redux 轉換到 Apollo 來管理 State 時的好處，基本上減少了大量的程式碼，並提高了 codebase 間的透明度：</p>\n<ul>\n<li>透過 Apollo，你可以只選擇你想要的 Data，拿到資料後也不需要額外的轉換函式來處理資料。</li>\n<li>資料的 Request 與 Component 是放在一起的。</li>\n<li>Meta State 直接由 Apollo 自動幫你處理好。</li>\n</ul>\n<blockquote>\n<p>Don't solve problems when you can stop having them</p>\n</blockquote>\n<p>演講最後的總結是建議大家建立完整封裝的 Component，每個 Component 管理自己的 State，然後組合這些 Component 來完成複雜的 UI。不要試圖選擇單一框架來管理 State，應該依據不同類型的 Type 來選擇不同的框架處理。只要你越了解每個狀態的區別，越知道該如何用不同的策略管理他們，那麼用什麼工具來管理狀態就愈不重要。</p>\n<h2 id=\"how-do-you-get-changes-made-to-graphql-orta-engineer-on-typescript-at-microsoft\" style=\"position:relative;\"><a href=\"#how-do-you-get-changes-made-to-graphql-orta-engineer-on-typescript-at-microsoft\" aria-label=\"how do you get changes made to graphql orta engineer on typescript at microsoft permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://youtu.be/STk8eWQL1ns\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How do you get changes made to GraphQL? (Orta, Engineer On Typescript at Microsoft)</a></h2>\n<p>這場演講的內容與其他很不相同，講者本身資歷豐富不說外，別的講者都是在說怎麼使用 GraphQL，但這場是在介紹 GraphQL Fundation 的歷史，以及如何參與 GraphQL Specs 或是其他 first-party projects 的提案修改。從 GraphQL 的歷史簡短介紹開始，到如何提案，與其過程為何。</p>\n<p>其中講者有提到 Youtube 上的一個紀錄片，<a href=\"https://youtu.be/783ccP__No8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL: The Documentary</a>，半小時的內容，介紹了 GraphQL 的來龍去脈，推推！</p>\n<p>總之在一連串的歷史發展與各大公司間的合作後，有了現在的 GraphQL Fundation，負責統籌與發展 GraphQL Ecosystem。他們有維護一份 GraphQL Landscape，讓你能宏觀的了解整個 Ecosystem 的狀態：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/6c0c59fa978b4704a2f7ec0f2b9e2486.png\" alt=\"GraphQL Landscape\"></p>\n<p>此外，GraphQL Fundation 的會員是需要付會員費的，等同於維護這個 Fundation 的人是 get paid 的，而會員有權決定組織走向與預算開銷。</p>\n<p>GraphQL.org 主要負責幾項事物，包含 Spec、Reference Implementations 與 GraphiQL 以及 Branding 和剛剛提到的 Landscape 等等。</p>\n<p>此外有兩個 Working Group：GraphQL Working Group &#x26; GraphiQL Working Group。每個 Working Group 都有 Agendas，都放在 github 上頭，可以 follow 了解最新發展。</p>\n<p>想要參與 Working Group，他們有一些 guideline 需要遵守：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/68aa5acb679c43a397c0802178fb3e74.png\" alt=\"participation guidelines\"></p>\n<p>要針對 GraphQL Spec 進行更動，有幾個階段需要執行：</p>\n<ol>\n<li>Strawperson - 這階段指的是你可能在 GitHub 上開了 Issue，接受大家各種意見的\"衝擊\"，進而反覆修改你的想法。</li>\n<li>Proposal - 這階段是你可以開始思考發 Pull Request，無論是修改 Spec 或是 Reference Implementation，接受大家不同面相的意見。</li>\n<li>Draft - 用正確的 Syntax 與 Format 去更改 Spec 或 Implemenaton。</li>\n<li>Accepted - 最後階段就是你的提案被 Accepted，然後在下一次的 Release 中被釋出。</li>\n</ol>\n<p>不過你的提案當然也有可能被 Rejected，這時可以參考 GraphQL 的 Guiding Principles，找出問題癥結：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/5d8446a8aca14a5e9b2373b7dea6c612.png\" alt=\"Guiding Principles\"></p>\n<p>上述是更動所需要的步驟，而如何參與的步驟如下：</p>\n<ol>\n<li>Have an Idea</li>\n<li>Join a working group</li>\n<li>Pitch</li>\n<li>Start doing work</li>\n</ol>\n<p>步驟簡單，但就如同一般參與 Open Source project 一樣，你的 PR 可能很久都不會被 Merge 進去，需要有足夠毅力，並認知到每個人的時間都很有限，不要給自己太多壓力。</p>\n<h1 id=\"other-talks\" style=\"position:relative;\"><a href=\"#other-talks\" aria-label=\"other talks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Talks</h1>\n<p>在我參與的議程中，還有兩個我覺得內容蠻不錯值得一看的是：<a href=\"https://youtu.be/AgJ1n75ibCo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Game Of Types: A Song Of GraphQL And TypeScript (Steven Musumeche, Senior Software Engineer at Formidable)</a> 與 <a href=\"https://youtu.be/gpd6JtnWs2E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How We Scaled GraphQL at The New York Times (James Lawrie, Lead Software Engineer at NYT)</a>。</p>\n<p>礙於時間與篇幅，我暫時先寫到這邊，後續若有時間會再來補上這兩篇的重點分享，有興趣的讀者推薦到影片連結去觀看。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>GraphQL Summit 整體來說是非常棒的會議，內容豐富外，動線規劃與議程中的 Topic tables 與 Sponsor Booth 都規劃得不錯，即使該時段沒有有興趣的 Talk，場外也很多贊助商或是 Apollo 的員工可以跟你討論聊天。美中不足的是第二天有些場地不知為何突然限制人數，連在場內站著聽都無法，所以我錯過了一些場次，但好在他們都有上傳影片，他們甚至因為有一場演講沒有錄到影，把講者再請回來重新演講一次。</p>\n<p>從今年的 GraphQL Summit 來看，GraphQL 的發展已經頗成熟，Apollo 建造的 Ecosystem 也很友善，之後我應該也會盡量找機會將其採用至其他專案中！若你還沒導入 GraphQL 到專案中的不仿試試，可以到台灣的 GraphQL 社群 - <a href=\"https://www.facebook.com/groups/graphql.tw/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.facebook.com/groups/graphql.tw/</a> 提問討論。</p>\n<p>最後附上幾張加州景色作為結束：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/cbacf86ea1f84396ba84d66a7b2aaf88.png\" alt=\"castrostreet\"></p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/333fa4ecfac244b2a80dc230c9968c90.png\" alt=\"goldengate\"></p>\n<p>關於作者：\n@arvinh 前端攻城獅，熱愛數據分析和資訊視覺化</p>","id":"013587b2-d7b9-5b25-935c-26ec1207a106","fields":{"slug":"graphql-summit-2019-review"},"frontmatter":{"date":"2019-12-06T08:56:40.000Z","title":"GraphQL Summit 2019 與會分享","tags":["graphql","conference","sharing","Web"],"type":"tech","slug":"graphql-summit-2019-review"},"timeToRead":18},"next":{"excerpt":"好歌分享：Organic melody feat.Takuya Maeda","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/wTebM8bWxJk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Organic melody feat.Takuya Maeda</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/wTebM8bWxJk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>大約在兩年前我曾經寫過一篇文章介紹如何用 CSS 繪圖 - <a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 CSS 畫畫的小技巧</a>，該文章的最後我有稍微提到我們能夠利用 CSS3 的 <code class=\"language-text\">box-shadow</code> 屬性來製造出 Pixel 風格的圖案。然而，所有圖案不都是由 pixel 組成的嗎？如果我們能夠用 box-shadow 畫出 Pixel Art，那只要 Pixel 數量足夠，size 夠細緻，應該是能夠繪製出任何圖形的吧？</p>\n<p>不過在<a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 CSS 畫畫的小技巧</a>這篇文章中，所製作的是比較簡單的文字，透過直接編輯 <code class=\"language-text\">box-shadow</code> 還在可接受範圍中，但如果是想要繪製複雜一點的人物角色，例如鋼鐵人<a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src</a>：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/40adf0260c1844fb9868f7c524424976.png\" alt=\"iron-man\"> </p>\n<p>這如果一格一格手動對照，然後撰寫 <code class=\"language-text\">box-shadow</code>，比登天還難，更別提想繪製出比 Pixel Art 細緻一點的圖案了。</p>\n<p>網路上對於 <code class=\"language-text\">box-shadow</code> 的運用，大多圍繞在 Pixel Art 的實作，例如 <a href=\"https://una.im/sass-pixel-art/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Una Kravets 的部落格</a> 介紹了如何使用 SCSS 與陣列來產生 CSS Pixel Art；上面鋼鐵人原圖<a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">也是利用相同原理</a>；<a href=\"http://elrumordelaluz.github.io/Pixelator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pixelator</a> 則是讓你能線上繪製自己喜歡的 Pixel Art，並且產生出對應的 <code class=\"language-text\">box-shadow</code>；</p>\n<p>好在 Codepen 上高手如雲，被我發現<a href=\"https://codepen.io/andrewarchi/pen/jPbqMx?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一篇</a>利用 Angular 實作圖片轉 <code class=\"language-text\">box-shadow</code> 的版本，實作方式很有意思，我用 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">svelte</a> 改寫了一個版本，今天就來分享一下實作細節！</p>\n<p>先看個成果：</p>\n<p>Gif Demo:\n<img src=\"https://static.coderbridge.com/img/ArvinH/1697c384e21246a491d1bdc34fc3c61a.gif\" alt=\"gif-demo\"></p>\n<p>Live Demo:</p>\n<iframe src=\"https://codesandbox.io/embed/image-to-pixel-art-usdtn?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"image-to-pixel-art\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>可以下載這個範例圖來上傳，效果會比較好：<img src=\"https://static.coderbridge.com/img/ArvinH/d4b4dbd77b93482781f7a5d27761630f.png\" alt=\"demo-mario\"></p>\n<h1 id=\"box-shadow\" style=\"position:relative;\"><a href=\"#box-shadow\" aria-label=\"box shadow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box-Shadow</h1>\n<p>在開始前，先複習一下 <code class=\"language-text\">box-shadow</code>，CSS3 的 <code class=\"language-text\">box-shadow</code> 屬性可以設定多個值，每個值代表著一個 <code class=\"language-text\">box-shadow</code> 的 x 位移(x-offset)，y 位移(y-offset)，陰影模糊半徑(shadow blur radii)，陰影擴散半徑(shadow spread radii) 和顏色(color)。</p>\n<p>由於 <strong>允許設置多個值</strong> 和 <strong>可控制 X 與 Y 位移</strong> 這兩個特質，<code class=\"language-text\">box-shadow</code> 非常適合用來組合成圖片，尤其是 Pixel Art。以黑白相間的棋盤為例：</p>\n<div id=\"chess\" style=\"margin-bottom: 60px; width: 40px; height: 40px; box-shadow: 0 40px #000, 40px 0 #000; border: 1px solid #000;\"></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n    width: 40px;\n    height: 40px;\n    box-shadow: 0 40px #000, 40px 0 #000;\n    border: 1px solid #000;\n<span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/789b88b181d44da997f09a02c23e0bf1.png\" alt=\"box-shadow-explain\"></p>\n<p>依照這個原理，就能組合成複雜一點的 Pixel Art：</p>\n<div id=\"result\" style=\"margin-bottom: 120px; width: 10px; height: 10px; box-shadow: rgb(243, 156, 18) 20px 30px 0px, rgb(243, 156, 18) 30px 30px 0px, rgb(243, 156, 18) 80px 30px 0px, rgb(243, 156, 18) 90px 30px 0px, rgb(243, 156, 18) 10px 40px 0px, rgb(231, 76, 60) 20px 40px 0px, rgb(231, 76, 60) 30px 40px 0px, rgb(243, 156, 18) 40px 40px 0px, rgb(243, 156, 18) 70px 40px 0px, rgb(243, 156, 18) 100px 40px 0px, rgb(243, 156, 18) 10px 50px 0px, rgb(231, 76, 60) 20px 50px 0px, rgb(243, 156, 18) 50px 50px 0px, rgb(243, 156, 18) 60px 50px 0px, rgb(243, 156, 18) 100px 50px 0px, rgb(243, 156, 18) 10px 60px 0px, rgb(231, 76, 60) 20px 60px 0px, rgb(231, 76, 60) 30px 60px 0px, rgb(243, 156, 18) 100px 60px 0px, rgb(243, 156, 18) 20px 70px 0px, rgb(231, 76, 60) 30px 70px 0px, rgb(231, 76, 60) 40px 70px 0px, rgb(243, 156, 18) 90px 70px 0px, rgb(243, 156, 18) 30px 80px 0px, rgb(231, 76, 60) 40px 80px 0px, rgb(231, 76, 60) 50px 80px 0px, rgb(243, 156, 18) 80px 80px 0px, rgb(243, 156, 18) 40px 90px 0px, rgb(231, 76, 60) 50px 90px 0px, rgb(243, 156, 18) 70px 90px 0px, rgb(243, 156, 18) 50px 100px 0px, rgb(243, 156, 18) 60px 100px 0px;\"></div>\n<p>但說實話，要手動撰寫 <code class=\"language-text\">box-shadow</code> 來組合出這個小愛心，大概就去掉半條命了，還是得依靠 <a href=\"http://elrumordelaluz.github.io/Pixelator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pixelator</a> 來繪製並產生 CSS。</p>\n<h1 id=\"圖片轉-box-shadow-實作原理\" style=\"position:relative;\"><a href=\"#%E5%9C%96%E7%89%87%E8%BD%89-box-shadow-%E5%AF%A6%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-label=\"圖片轉 box shadow 實作原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>圖片轉 box-shadow 實作原理</h1>\n<p>在複習完 <code class=\"language-text\">box-shadow</code> 組成圖片的原理後，應該不難推斷出圖片轉 <code class=\"language-text\">box-shadow</code> 的做法。</p>\n<p>概念上就是先定義出一個 grid system，將圖片切割成一塊一塊的單位，接著計算出每個單位區塊的 x-offset 與 y-offset，然後放入對應顏顏色，這樣就能組合出一個 unit 所對應的 <code class=\"language-text\">box-shadow</code> 值，依此類推把每個單位區塊都轉換完即可。</p>\n<p>實作上的步驟比較繁瑣一些，但概念是相同的：</p>\n<ul>\n<li>利用 <code class=\"language-text\">URL.createObjectURL(event.target.files[0]);</code> 將圖片檔案轉換成 <code class=\"language-text\">Image</code> 物件。</li>\n<li>在 image <code class=\"language-text\">onload</code> 時，透過 canvas 2d context 的 <code class=\"language-text\">drawImage()</code> 函式將圖片繪製到 canvas 上。</li>\n<li>接著再以 canvas 2d context 的 <code class=\"language-text\">getImageData</code> 取得一個以一維陣列存放的圖片資訊。</li>\n<li>遍歷該一維陣列內的圖片資訊，組合出 <code class=\"language-text\">box-shadow</code> 的值。</li>\n</ul>\n<p>上述步驟中，最關鍵的就是最後一點，canvas 2d context 的 <code class=\"language-text\">getImageData</code> 函式會回傳一個一維陣列 - <code class=\"language-text\">Unit8ClampedArray</code>，裡面包含了圖片每個 unit 的 RGBA 值（值段區間為 0 ~ 255）。</p>\n<p>利用這個一維陣列，我們就可以知道載入的圖片有多少 unit（grid system)，每個 unit 又各自是什麼顏色，進而推算出 box-shadow 每一個值的 x-offset、y-offset 與顏色。這也是為何我們需要先將圖片繪製到 Canvas 的原因。 </p>\n<p>關鍵程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildPixelArt</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixelSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">,</span> canvasContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n  canvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> boxShadow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> imageData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> canvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> row <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> width <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> col <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> row <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      boxShadow<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        col <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"px \"</span> <span class=\"token operator\">+</span>\n          row <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"px \"</span> <span class=\"token operator\">+</span>\n          <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p> <code class=\"language-text\">Unit8ClampedArray</code> 陣列裡面，每四個 indices 為一單位，分別為該 unit 的 <code class=\"language-text\">R</code>、<code class=\"language-text\">G</code>、<code class=\"language-text\">B</code>、<code class=\"language-text\">A</code> 值，所以在迴圈中我們以 4 為遞增單位，並以此為計算二維平面中 <code class=\"language-text\">row</code> 與 <code class=\"language-text\">col</code> 的基礎。</p>\n<p> 計算出一維陣列內每個 unit 在二維平面上的行與列後，個別乘上定義好的 <code class=\"language-text\">pixelSize</code>，就能算出該 unit 在 <code class=\"language-text\">box-shadow</code> 值中的 x-offset 與 y-offset，然後聯同顏色值一起 push 到 <code class=\"language-text\">boxShadow</code> 陣列中。</p>\n<p> 最後利用預先寫好的 css template，將 <code class=\"language-text\">boxShadow</code> 整合進去即可產生需要的 css style：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> generatedCss <span class=\"token operator\">=</span>\n   <span class=\"token string\">\"#pixel-art {\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  height: \"</span> <span class=\"token operator\">+</span>\n   height <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  width: \"</span> <span class=\"token operator\">+</span>\n   width <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"}\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"#pixel-art:after {\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">'  content: \"\";\\n'</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  position: absolute;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  width: \"</span> <span class=\"token operator\">+</span>\n   pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  height: \"</span> <span class=\"token operator\">+</span>\n   pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  box-shadow:\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span>\n   boxShadow<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n    \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\";\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> generatedCss<span class=\"token punctuation\">;</span></code></pre></div>\n<p>載入產生的 CSS 後，就可以看到我們上傳的圖片重新以 <code class=\"language-text\">box-shadow</code> 的形式被重組在頁面上，單單一個 <code class=\"language-text\">div</code> 就能繪製出任何圖形！蠻酷的吧！</p>\n<p>完整程式碼請到 CodeSandbox 上翻閱，大部分邏輯都在 <code class=\"language-text\">PixelArtArea.svelte</code> 元件與 <code class=\"language-text\">buildPixelArt.js</code> 這隻檔案，其餘 svelte 部分的程式碼也很好理解，不過我是第一次用 svelte，若有使用不當的地方歡迎指教！</p>\n<iframe src=\"https://codesandbox.io/embed/image-to-pixel-art-usdtn?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"image-to-pixel-art\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"注意事項\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事項</h2>\n<p>利用 <code class=\"language-text\">box-shadow</code> 繪圖基本上沒什麼實質意義，就只是好玩而已，千萬不要把這用到正式環境，效能之差會把使用者端的瀏覽器搞當機的。這次的範例也只能吃得下像素較小的圖片，若是上傳了較大的檔案，打開 Devtool 時就會發現你的頁面 crash 了...\n另外，產生完的 CSS，範例中我是直接 append 到 <code class=\"language-text\">head</code> 下，所以若是在沒有重整頁面的狀況下上傳別的圖片，就會再度 append 新的 css 進去，久了以後 head 也會越來越肥。</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>CSS 真的很有趣，能做出許多意料之外的事，雖然絕大多數沒什麼用處，但這種技術上的創意應用所帶來的興奮感，正是繁忙於日常的開發者們所需要的吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://una.im/sass-pixel-art/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Una Kravets 的部落格</a></li>\n<li><a href=\"https://codepen.io/andrewarchi/pen/jPbqMx?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Convert an image to CSS Box Shadows</a> </li>\n<li><a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iron man</a></li>\n</ol>","id":"a6d5585c-9df1-505f-89da-f2b735b10a03","fields":{"slug":"box-shadow-drawing"},"frontmatter":{"date":"2020-02-01T17:31:23.000Z","title":"利用 box-shadow 畫出任何圖案","tags":["css","box-shadow","drawing"],"type":"tech","slug":"box-shadow-drawing"},"timeToRead":6},"type":"tech"}},"staticQueryHashes":["2123680655"]}