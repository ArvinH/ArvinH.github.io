{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/pure-css-tic-tac-toe-analyze","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/81HYAx-oIyo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SEEDS feat.Airy</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/81HYAx-oIyo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在很久之前寫過一篇使用 CSS 繪圖的<a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，但 CSS 能做的不僅止於此，利用 Pure CSS 製作遊戲的大有人在，像是 <a href=\"https://codepen.io/collection/AKkZro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pure CSS Games collection</a> 裡面羅列的。</p>\n<p>不過你知我知你隔壁戴眼鏡的也知，純 CSS 製作的圖畫或是遊戲，實作成本高、閱讀性不佳，也難以調教效能，幾乎無法應用到實際產品上。</p>\n<p>可是很好玩啊！利用有限條件加上各種技巧想辦法完成預想中的效果，成就感是很大的，能夠有能力跟時間製作出這樣的作品，我覺得是很奢侈的幸福。</p>\n<p>老實說我還沒有那個能力做到如此地步，但從觀察他人的作品就能學習到很多有趣的技巧！</p>\n<p>今天就來分析一下在 codepen 上看到的這個純 CSS 圈圈叉叉是怎麼實做出來的：</p>\n<p class=\"codepen\" data-height=\"440\" data-theme-id=\"29194\" data-default-tab=\"result\" data-user=\"alvaromontoro\" data-slug-hash=\"vwjBqz\" style=\"height: 440px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"CSS Tic-Tac-Toe\">\n  <span>See the Pen <a href=\"https://codepen.io/alvaromontoro/pen/vwjBqz/\">\n  CSS Tic-Tac-Toe</a> by Alvaro Montoro (<a href=\"https://codepen.io/alvaromontoro\">@alvaromontoro</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"觀察一下功能\" style=\"position:relative;\"><a href=\"#%E8%A7%80%E5%AF%9F%E4%B8%80%E4%B8%8B%E5%8A%9F%E8%83%BD\" aria-label=\"觀察一下功能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>觀察一下功能</h2>\n<p><img src=\"/image/css-tic-tac-toe-behavior.gif\" alt=\"Behavior\"></p>\n<p>這個作品的完成度很高，實作出來的有以下功能：</p>\n<ul>\n<li>點選方格後，能夠留下不同 style 的 X 或是 O。</li>\n<li>滑鼠 hover 到方格上時，也還能輪流出現圈圈叉叉，讓你知道現在是輪到哪個玩家。</li>\n<li>遊戲結束時，能夠跳出選項重新玩。</li>\n</ul>\n<p>對於 CSS 稍微敏銳一些，或是有看過類似作品的實作方式的讀者，應該蠻快可以猜到第一點能夠過什麼樣的技巧達成。但作者是如何讓圈圈與叉叉交替出現，我倒是無法很快想出來。</p>\n<p>如果你也跟我一樣，別怕！</p>\n<p>接下來我們從功能面來一步步拆解他所使用到的技巧，大家可以對照原作者程式碼看，會更好理解。</p>\n<h2 id=\"依靠純-css-如何在使用者點擊元素後進而變更元素狀態呢\" style=\"position:relative;\"><a href=\"#%E4%BE%9D%E9%9D%A0%E7%B4%94-css-%E5%A6%82%E4%BD%95%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%80%85%E9%BB%9E%E6%93%8A%E5%85%83%E7%B4%A0%E5%BE%8C%E9%80%B2%E8%80%8C%E8%AE%8A%E6%9B%B4%E5%85%83%E7%B4%A0%E7%8B%80%E6%85%8B%E5%91%A2\" aria-label=\"依靠純 css 如何在使用者點擊元素後進而變更元素狀態呢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>依靠純 CSS 如何在使用者點擊元素後，進而變更元素狀態呢？</h2>\n<p>透過 <code class=\"language-text\">input[type=radio]</code> 與 <code class=\"language-text\">:check</code> 僞類別的結合，我們就能製造出點擊與非點擊的兩種狀態：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* ... 省略 ... */</span>\n<span class=\"token selector\">input[id*='-8-x']:checked ~ #board #tile-8 div::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #004974<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #89dcf6<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ... 省略 ... */</span>\n<span class=\"token selector\">input[id*='-8-o']:checked ~ #board #tile-8 div::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #a60011<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #ffc7b5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>從原作程式碼中，可以看到有許多類似 pattern 的 selector，其中上面這兩種就是在處理 <code class=\"language-text\">X</code> 玩家與 <code class=\"language-text\">O</code> 玩家各自點擊了 board 上的一個空格後，該進行的 CSS 樣式改變。</p>\n<p><code class=\"language-text\">input[id*='-8-x']</code>，代表的是 **選取所有 id attribute 中『包含』字串 '-8-x' 的 input 元素 **。接著加上 <code class=\"language-text\">:check</code> 就能 filter 出被使用者選取的 <code class=\"language-text\">input</code> 元素。</p>\n<p>而後面的 <code class=\"language-text\">~ #board #tile-8 div::before</code> 則是表示，在符合上面條件的 <code class=\"language-text\">input</code> 元素<strong>下</strong>的<strong>所有符合</strong> <code class=\"language-text\">#board #tile-8 div</code> 的 div 內，我們加上一個 <code class=\"language-text\">::before</code> 僞元素，並且設定其 css 為 <code class=\"language-text\">content: \"X\"</code>。</p>\n<p>這樣的一段 CSS selector 被觸發後，就可以達到<strong>點擊後留下 X 標記</strong>的效果了：</p>\n<p><img src=\"/image/css-x-check.png\" alt=\"X 玩家點擊空格\"></p>\n<p>從中可以明顯看出，作者是利用 <code class=\"language-text\">-o</code> 與 <code class=\"language-text\">-x</code> 這兩種 postfix 當作 <code class=\"language-text\">X</code> 玩家與 <code class=\"language-text\">O</code> 玩家的曲別，今天若是 <code class=\"language-text\">id attribute</code> 中含有 <code class=\"language-text\">-0</code> 的 input 元素被點選，就是 <code class=\"language-text\">O</code> 玩家點擊空格，得放入 <code class=\"language-text\">O</code>。</p>\n<p>此外，由於 <code class=\"language-text\">input[type=radio]</code> 元素，在瀏覽器中的固定樣式就是一個圓形選擇鈕，要替換成井字空格，並且又能觸發點擊的方式，就是結合 <code class=\"language-text\">form</code> 與 <code class=\"language-text\">label</code> 元素，綁定對應的 <code class=\"language-text\">input</code> 按鈕：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tictactoe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-x<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-o<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- ... 省略 ... --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-x<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-o<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>board<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- ... 省略 ... --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-8-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- ... 省略 ... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此一來，我們可以把 <code class=\"language-text\">input</code> 按鈕藏到畫面看不到的地方，然後輕易套用任何 style 到 <code class=\"language-text\">label</code> 上頭，做出井字空格。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">input[type=\"radio\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -9999em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 藏到畫面外 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"hover-出後出現額外元素很常見但怎麼讓他交替出現不同元素\" style=\"position:relative;\"><a href=\"#hover-%E5%87%BA%E5%BE%8C%E5%87%BA%E7%8F%BE%E9%A1%8D%E5%A4%96%E5%85%83%E7%B4%A0%E5%BE%88%E5%B8%B8%E8%A6%8B%E4%BD%86%E6%80%8E%E9%BA%BC%E8%AE%93%E4%BB%96%E4%BA%A4%E6%9B%BF%E5%87%BA%E7%8F%BE%E4%B8%8D%E5%90%8C%E5%85%83%E7%B4%A0\" aria-label=\"hover 出後出現額外元素很常見但怎麼讓他交替出現不同元素 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hover 出後出現額外元素很常見，但怎麼讓他交替出現不同元素？</h2>\n<p>好，知道怎麼透過 <code class=\"language-text\">input[type=radio]</code> 來更改空格狀態之後，我們來研究作者是如何透過 Hover 後的不同樣式，呈現出 <code class=\"language-text\">X</code> 玩家與 <code class=\"language-text\">O</code> 玩家輪流的感覺呢？</p>\n<p>要在游標 hover 時出現元素，就是結合僞類別與僞元素來在 Hover 到的空格上加入 <code class=\"language-text\">X</code> 或 <code class=\"language-text\">O</code>。：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.tile label[for$='-o']:hover::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.tile label[for$='-x']:hover::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到這邊為止都不稀奇，不過還無法理解為何可以交替出現。</p>\n<p>解答在原始碼中這段看起來很可怕的 css：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">label[for$='-x']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">input:checked ~ #board label[for$='-o']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">input:checked ~ input:checked ~ #board label[for$='-x']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">input:checked ~ input:checked ~ input:checked ~ #board label[for$='-o']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 4<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/* ... 省略一段 z-index 5 ~ 8 ... */</span>\n\n<span class=\"token selector\">input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ #board label[for$='-x']</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 9<span class=\"token punctuation\">;</span></code></pre></div>\n<p>前面我們有提到，作者是利用 <code class=\"language-text\">label</code> 來做出井字空格以及 hover 後呈現的 <code class=\"language-text\">X</code> 與 <code class=\"language-text\">O</code> 符號，而在 html 中可以看到每個空格底下都有這樣的結構：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cell-0-o<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>搭配上方的 CSS，我們就能知道作者是透過<strong>更改 label 的 z-index</strong> 來<strong>交替地</strong>觸發 <code class=\"language-text\">.tile label[for$='-o']:hover::before</code> 與 <code class=\"language-text\">.tile label[for$='-x']:hover::before</code>，進而達到想要的效果。</p>\n<p>至於控制的方式就是透過 <code class=\"language-text\">:check</code> 為 true 的 input 數量：</p>\n<p>當沒有任何一個 radio input 被 check 時，設定所有 <code class=\"language-text\">for</code> attribute 結尾為 <code class=\"language-text\">-x</code> 的 <code class=\"language-text\">label</code> 的 <code class=\"language-text\">z-index</code> 為 1，就會讓游標 hover 到空格時，會是 <code class=\"language-text\">&lt;label for=\"cell-0-x\">&lt;/label></code> 的 hover 被觸發，而不是 <code class=\"language-text\">&lt;label for=\"cell-0-o\">&lt;/label></code>。</p>\n<p>若有一個 radio input 被選擇後，代表要換成 <code class=\"language-text\">O</code> 玩家，<code class=\"language-text\">input:checked ~ #board label[for$='-o']</code> 就被觸發了，所有 <code class=\"language-text\">for</code> attribute 結尾為 <code class=\"language-text\">-o</code> 的 <code class=\"language-text\">label</code> 的 <code class=\"language-text\">z-index</code> 變為 2，大於剛剛的 x label，這時使用者在 hover 到任何一個空格時，出現的就通通都會是 <code class=\"language-text\">O</code> 了！</p>\n<p>雖然這樣的做法讓 CSS 蠻冗長的，但還是不得不讚嘆作者能想出利用 <code class=\"language-text\">z-index</code> 來製造出這樣的效果，真的很厲害啊...閱讀性也算很高的。</p>\n<h2 id=\"判斷輸贏以及重新遊玩的功能怎麼實作\" style=\"position:relative;\"><a href=\"#%E5%88%A4%E6%96%B7%E8%BC%B8%E8%B4%8F%E4%BB%A5%E5%8F%8A%E9%87%8D%E6%96%B0%E9%81%8A%E7%8E%A9%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%8E%E9%BA%BC%E5%AF%A6%E4%BD%9C\" aria-label=\"判斷輸贏以及重新遊玩的功能怎麼實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>判斷輸贏以及重新遊玩的功能怎麼實作？</h2>\n<p>在遊戲結束的時候，不管是哪種結果，畫面上都會疊上一層訊息與重新遊玩的按鈕，這部分的 html 藏在最下方含有 <code class=\"language-text\">end</code> class name 的 div 內：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>end<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tictactoe<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Play again<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>由於整個遊戲都是包含在一個 <code class=\"language-text\">form</code> 中，所以可以直接透過 type 為 <code class=\"language-text\">reset</code> 的 input 按鈕來重設所有的 radio button 狀態，達到重新遊玩的功能。</p>\n<p>而顯示訊息框以及判斷輸贏的方法其實蠻暴力的，就是一一檢查各種組合，橫的、直的與斜的：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#cell-0-x:checked ~ #cell-1-x:checked ~ #cell-2-x:checked ~ #end #message::before,\n#cell-3-x:checked ~ #cell-4-x:checked ~ #cell-5-x:checked ~ #end #message::before,\n#cell-6-x:checked ~ #cell-7-x:checked ~ #cell-8-x:checked ~ #end #message::before,\n#cell-0-x:checked ~ #cell-3-x:checked ~ #cell-6-x:checked ~ #end #message::before,\n#cell-1-x:checked ~ #cell-4-x:checked ~ #cell-7-x:checked ~ #end #message::before,\n#cell-2-x:checked ~ #cell-5-x:checked ~ #cell-8-x:checked ~ #end #message::before,\n#cell-0-x:checked ~ #cell-4-x:checked ~ #cell-8-x:checked ~ #end #message::before,\n#cell-2-x:checked ~ #cell-4-x:checked ~ #cell-6-x:checked ~ #end #message::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Player 1 won!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#cell-0-o:checked ~ #cell-1-o:checked ~ #cell-2-o:checked ~ #end #message::before,\n#cell-3-o:checked ~ #cell-4-o:checked ~ #cell-5-o:checked ~ #end #message::before,\n#cell-6-o:checked ~ #cell-7-o:checked ~ #cell-8-o:checked ~ #end #message::before,\n#cell-0-o:checked ~ #cell-3-o:checked ~ #cell-6-o:checked ~ #end #message::before,\n#cell-1-o:checked ~ #cell-4-o:checked ~ #cell-7-o:checked ~ #end #message::before,\n#cell-2-o:checked ~ #cell-5-o:checked ~ #cell-8-o:checked ~ #end #message::before,\n#cell-0-o:checked ~ #cell-4-o:checked ~ #cell-8-o:checked ~ #end #message::before,\n#cell-2-o:checked ~ #cell-4-o:checked ~ #cell-6-o:checked ~ #end #message::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Player 2 won!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>並將含有 <code class=\"language-text\">end</code> class 的 div 設為 <code class=\"language-text\">display: block</code>，當然，也是要確定所有 checked 狀態都是正確的（已經結束）：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ input:checked ~ #end,\n#cell-0-x:checked ~ #cell-1-x:checked ~ #cell-2-x:checked ~ #end,\n#cell-3-x:checked ~ #cell-4-x:checked ~ #cell-5-x:checked ~ #end,\n#cell-6-x:checked ~ #cell-7-x:checked ~ #cell-8-x:checked ~ #end,\n#cell-0-x:checked ~ #cell-3-x:checked ~ #cell-6-x:checked ~ #end,\n#cell-1-x:checked ~ #cell-4-x:checked ~ #cell-7-x:checked ~ #end,\n#cell-2-x:checked ~ #cell-5-x:checked ~ #cell-8-x:checked ~ #end,\n#cell-0-x:checked ~ #cell-4-x:checked ~ #cell-8-x:checked ~ #end,\n#cell-2-x:checked ~ #cell-4-x:checked ~ #cell-6-x:checked ~ #end,\n#cell-0-o:checked ~ #cell-1-o:checked ~ #cell-2-o:checked ~ #end,\n#cell-3-o:checked ~ #cell-4-o:checked ~ #cell-5-o:checked ~ #end,\n#cell-6-o:checked ~ #cell-7-o:checked ~ #cell-8-o:checked ~ #end,\n#cell-0-o:checked ~ #cell-3-o:checked ~ #cell-6-o:checked ~ #end,\n#cell-1-o:checked ~ #cell-4-o:checked ~ #cell-7-o:checked ~ #end,\n#cell-2-o:checked ~ #cell-5-o:checked ~ #cell-8-o:checked ~ #end,\n#cell-0-o:checked ~ #cell-4-o:checked ~ #cell-8-o:checked ~ #end,\n#cell-2-o:checked ~ #cell-4-o:checked ~ #cell-6-o:checked ~ #end</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>主要的實作重點大概就到這邊，剩下還有一些像是 radio button 被 check 後，把原有 label 設為 <code class=\"language-text\">display: none</code> 的部分就是為了讓畫面更好看而已，實作方式跟上面的 selector 都大同小異。</p>\n<h2 id=\"實作技巧整理\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86\" aria-label=\"實作技巧整理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作技巧整理</h2>\n<p>最後稍微統整一下實作的技巧：</p>\n<ul>\n<li>\n<p>實作技巧 1 - 善用 form 元素： <code class=\"language-text\">input[type=radio]</code> 與 <code class=\"language-text\">label</code></p>\n<p>利用 radio button 來達成切換狀態的操作，在各種以純 CSS 製作的應用中，幾乎是必備出現的技巧，這邊也不例外。</p>\n<p>透過 input 元素，我們可以從 <code class=\"language-text\">:check</code> 這個 Pseudo-class 來判斷使用者的點擊與否。</p>\n</li>\n<li>\n<p>實作技巧 2 - CSS selector 可不是只有 id 與 class</p>\n<p>活用 attribute selector 與 僞元素、僞類別，可以帶來很多意想不到的妙用，像是 <code class=\"language-text\">label[for$='-o']</code> 與 <code class=\"language-text\">:check</code> 等等。</p>\n</li>\n<li>\n<p>實作技巧 3 - 藏東西不是只能用 display，還有 z-index 呢</p>\n<p>利用 <code class=\"language-text\">z-index</code> 的階層關係，控制觸發 <code class=\"language-text\">hover</code> 的元素，讓我們多了一種隱藏物件的方式。</p>\n</li>\n<li>\n<p>實作技巧 4 - CSS Grid</p>\n<p>雖然在前面並沒有提到，但作者是利用 CSS Grid 畫出表格，這在 Modern web browser 上是最經濟實惠的方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>board<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tile-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- \n    ...  依此類推將九個格子填滿\n  --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/*\n... 省略\n*/</span>\n<span class=\"token selector\">#board</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50vmin<span class=\"token punctuation\">;</span>\n<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50vmin<span class=\"token punctuation\">;</span>\n<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> 1fr 1fr 1fr<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> 1fr 1fr 1fr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#tile-0</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#tile-1</span> <span class=\"token punctuation\">{</span>\n<span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n<span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n... 省略\n*/</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>每每看到 codepen 上一些神奇的作品，都會讓我有 mind-blowing 的感覺，雖然大多時候難以理解實作原理，但偶而還是會看到類似這次範例一般，好理解，又能學到不少技巧的作品。\n希望對 CSS 不那麼熟悉的讀者，透過這次的分析，也能看得懂背後的原理，然後對利用 CSS 繪圖或是製作 no-js 的作品有所興趣，雖然沒什麼實際用途，但我自己覺得能夠利用專業玩出一些好玩的東西真的蠻吸引人的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://codepen.io/alvaromontoro/pen/vwjBqz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Tic-Tac-Toe - Alvaro Montoro</a></li>\n</ol>","fields":{"slug":"pure-css-tic-tac-toe-analyze"},"frontmatter":{"title":"解析：純 CSS 的圈圈叉叉","date":"05-25-2019","tags":["css"]},"timeToRead":12}},"pageContext":{"slug":"pure-css-tic-tac-toe-analyze","prev":{"excerpt":"『You would never make something great if you are afraid that it's going to suck』\n『It's not a thing if it leads you to your success』\n--- Justin Timberlake","html":"<blockquote>\n<p>『You would never make something great if you are afraid that it's going to suck』\n『It's not a thing if it leads you to your success』\n--- Justin Timberlake</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>直接先來個成果圖：</p>\n<p><img src=\"/image/elm-extension.gif\" alt=\"result\"></p>\n<p>今年二月移轉陣地到日本來工作，搬到一個人生地不熟的地方，初始開銷少不了，除了交通、伙食、房租外，還需要添購許多傢俱。而當然，所有東西都是以日幣標價，就算 Amazon JP 已經非常方便的有簡體版的語系可以切換，價格上還是得以日幣顯示。</p>\n<p>對我來說，還沒有辦法習慣以日幣來衡量物品的價值，像是我能很快知道一千日幣大約三百台幣，但看到一個東西標價兩萬九日幣，我沒辦法很快速的理解這東西是多貴或多便宜，腦袋還是會想把它轉成台幣來衡量。</p>\n<p>所以就造成我在 Amazon JP 或是 Nitori 的網站挑選商品時，常常要複製價格，然後開啟另一個 tab 來搜尋日幣轉換台幣的網站，再填入轉換。</p>\n<p>一次兩次還好，第三次就無法忍受了，引用 \"Refactoring — Improving the Design of Existing Code\" 這本書中的一句話：<em>\"Three strikes, then you refactor.\"</em></p>\n<p>稍微找了一下 Chrome web store，並沒有看到適合的 extension，所以決定自己打造一個。</p>\n<p>而剛好在前幾週參加了同事主辦的 Meetup，其中有個 Topic 是介紹 Elm 這個語言，以前雖然也聽過介紹，但這次聽到實際用在 Production 的案例後，提高我不少興趣，加上適逢公司的 hackday，索性就利用這機會來練習一下，用 Elm 來製作我想要的 Chrome Extension！</p>\n<p>今天就用這篇文章記錄一下使用 Elm 製作 Chrome Extension 的方法與心得，不過畢竟是 hackday 作品，功能尚需完善就是。</p>\n<h2 id=\"什麼是-elm\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-elm\" aria-label=\"什麼是 elm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Elm？</h2>\n<p><img src=\"/image/elm-official-site.png\" alt=\"Elm Website\"></p>\n<p>不知道有沒有人跟我一樣，之所以知道 Elm，是因為 Redux 的作者說他受其啟發？</p>\n<p>跟 Redux 作者一樣，Elm 的作者 - Evan Czaplicki 也是個年輕奇才，Elm 是他在哈佛的論文，推薦大家看一下他 <a href=\"https://www.infoq.com/presentations/Elm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2012 年的演講影片</a>，可以了解他為何創造這門語言，聽聽作者本人親口介紹。</p>\n<p>Elm 是一個強型態的函數式語言，透過編譯，將最終程式碼轉化為 JavaScript，因此執行在任何 Web 平台。主要有以下特點：</p>\n<ul>\n<li>\n<p>No Runtime Exceptions</p>\n<ul>\n<li>在編譯期間，Elm 會利用 Type inference 偵測各種狀態，有任何型別上的錯誤都會被抓出來，更棒的是，Elm 提供的 hint 很人性化，例如：\n<img src=\"/image/elm-error-hint.png\" alt=\"error hint\"></li>\n</ul>\n</li>\n<li>\n<p>Great Performance</p>\n<ul>\n<li>如同 React 一般，Elm 也有自己的 Virtual DOM 實作，根據官網所說，由於 Elm 的所有值都是 immutable，有助於他們能編譯出最佳化的 JavaScript，讓 runtime 變快。\n<img src=\"/image/elm-benchmark.png\" alt=\"benchmark\"> <em>source: <a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-lang.org</a></em></li>\n</ul>\n</li>\n<li>\n<p>Enforced Semantic Versioning</p>\n<ul>\n<li>Elm 強大的 type system 讓他能自動偵測是否有 API 的更動，並根據你 release 時與上一版本的差異，進行 Semantic Versioning，讓你不會不小心因為錯誤的 PATCH release 造成別人的困擾！</li>\n</ul>\n</li>\n<li>\n<p>Small Assets</p>\n<ul>\n<li>Elm 宣稱其 Optimize 的編譯，能產生比 React 16.4 更小的 Assets。<em>source: <a href=\"https://elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-lang.org</a></em></li>\n</ul>\n</li>\n<li>\n<p>JavaScript Interop</p>\n<ul>\n<li>如同 React 一樣，你也可以只在一個小小的 div 上掛載 Elm application，藉此來測試 project 中的某一個小部分，採用上可以循序漸進，不會有太大風險，並且由於編譯成 JavaScript，Elm 能方便的與一般的 JavaScript 溝通。（基本上我也是看到這點才有信心 Elm 能拿來製作 Chrome extension 的）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"先偷看一下-elm-的程式碼到底長怎樣\" style=\"position:relative;\"><a href=\"#%E5%85%88%E5%81%B7%E7%9C%8B%E4%B8%80%E4%B8%8B-elm-%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%88%B0%E5%BA%95%E9%95%B7%E6%80%8E%E6%A8%A3\" aria-label=\"先偷看一下 elm 的程式碼到底長怎樣 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先偷看一下 Elm 的程式碼到底長怎樣</h2>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token hvariable\">view</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">view</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Html.div</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"Content\"</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Elm!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span></code></pre></div>\n<p>這是一個簡單的 Elm view，第一行是描述這個 View 所接收的參數型別，以及回傳的參數型別，第二行後才是實際的程式碼。</p>\n<p>看起來非常畸形。</p>\n<p>一開始很難理解，沒關係，我寫完這個 extension 以後也還是覺得很難理解。</p>\n<p>畢竟會需要花不少時間習慣連 HTML 都是函數的概念，裡面的 <code class=\"language-text\">HTML.div</code> 就是一個函數，他接受兩個陣列，一個用來定義 div 的 attribute，一個用來描述其 child。在後面的實作範例內，我們會看到更多類似的語法。</p>\n<h2 id=\"elm-基本安裝使用\" style=\"position:relative;\"><a href=\"#elm-%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%9D%E4%BD%BF%E7%94%A8\" aria-label=\"elm 基本安裝使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elm 基本安裝使用</h2>\n<p>Elm 的安裝很簡單，官網提供各平台的 <a href=\"https://guide.elm-lang.org/install.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">installer</a>，安裝完後就能在你的 Terminal 中使用以下幾個指令：</p>\n<p><strong><code class=\"language-text\">elm repl</code></strong> - 顧名思義， Elm 的 repl：</p>\n<p><img src=\"/image/elm-repl.png\" alt=\"elm-repl\"></p>\n<p><strong><code class=\"language-text\">elm reactor</code></strong> - 類似 react 的 create-react-app，會快速幫你建立一個基礎的 Elm Architecture。</p>\n<p><strong><code class=\"language-text\">elm make</code></strong> - elm 的 compile 指令，將你的 Elm code 編譯成 HTML 或是 JavaScript：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">elm <span class=\"token function\">make</span> Main.elm --output<span class=\"token operator\">=</span>main.js</code></pre></div>\n<p><strong><code class=\"language-text\">elm install</code></strong> - 類似 <code class=\"language-text\">npm install</code>，幫你下載所需的套件。所有的 Elm packages 都在 <a href=\"https://package.elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">package.elm-lang.org</a> 中。而你專案中 packages 的 dependencies 會在自動紀錄在 <code class=\"language-text\">elm.json</code> 中。</p>\n<h2 id=\"elm-architecture\" style=\"position:relative;\"><a href=\"#elm-architecture\" aria-label=\"elm architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elm Architecture</h2>\n<p>現在的前端開發者對於 Elm 的架構應該都會覺得不陌生，因為就很清楚的分為 Model、View、Update：</p>\n<ul>\n<li><strong>Model</strong> - 你的 application 的 state</li>\n<li><strong>Update</strong> - 更新 state 邏輯的部分</li>\n<li><strong>View</strong> - 綁定 State 更新 HTML</li>\n</ul>\n<p>一個基本的 Elm 程式大概就是包含這三大區塊：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token import-statement\"><span class=\"token keyword\">import</span> Html <span class=\"token keyword\">exposing</span> </span><span class=\"token punctuation\">(</span><span class=\"token operator\">..</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- MODEL</span>\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">-- UPDATE</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Reset</span> <span class=\"token operator\">|</span> <span class=\"token operator\">...</span>\n<span class=\"token hvariable\">update</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span>\n<span class=\"token hvariable\">update</span> <span class=\"token hvariable\">msg</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">case</span> <span class=\"token hvariable\">msg</span> <span class=\"token keyword\">of</span>\n    <span class=\"token constant\">Reset</span> <span class=\"token operator\">-></span> <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token comment\">-- VIEW</span>\n<span class=\"token hvariable\">view</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">view</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<p>在接下來的範例內，也是遵循這樣的方式撰寫。</p>\n<h2 id=\"學習資源\" style=\"position:relative;\"><a href=\"#%E5%AD%B8%E7%BF%92%E8%B3%87%E6%BA%90\" aria-label=\"學習資源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>學習資源</h2>\n<p>既然語法這麼困難，要學習的話，勢必要有完善的 Docs 或是範例參考，但可惜的是，雖然 Elm 從 2012 出來到現在也將近七年了，使用人數還是小眾，要找尋範例或是教學都蠻困難的，推薦的方式是先去<a href=\"https://guide.elm-lang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網閱讀 guide line</a>，理解基本概念與最新版本的 API，並大致瀏覽一下語法，接著到 <a href=\"https://elmprogramming.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a> 釐清一下不懂的部分，因為這網站將蠻多觀念以圖像化的方式說明，我覺得會比官方網站的 guide 好懂。</p>\n<p>不過要注意的一點是，<a href=\"https://elmprogramming.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a> 的內容基本上是 Elm 0.18 的版本，並非現在最新的 0.19，所以在語法與一些 core lib 的用法上會不一樣，但觀念的理解還是共通的，所以能交互參照。</p>\n<p>這也是我在實作 Elm 遇到的一個阻礙，網路上大多的教學集中在 2017，當時還是 0.18 版本，因此許多範例現在都沒辦法正常運作，除非你降版。</p>\n<h2 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作！</h2>\n<p>無論如何，頭洗下去了還是得繼續實作。</p>\n<p>有實作過 Chrome extension 的人應該都知道，基本的三大元素就是：<code class=\"language-text\">background.js</code>、<code class=\"language-text\">content.js</code> 與 <code class=\"language-text\">popup.html</code>，其彼此之間環境互相獨立，透過 <code class=\"language-text\">postMessage</code> 來溝通。</p>\n<p>而既然 Elm 能編譯成 JavaScript，我就想我應該可以分別撰寫 Elm application 然後 compile 成 <code class=\"language-text\">background.js</code>，<code class=\"language-text\">content.js</code>，這做法可能會有點奇怪，既然要用 Elm，你又寫 JavaScript？</p>\n<p>但我覺得這樣反而比較能在漸進式的學習 Elm，一些較困難理解的部分就還是交由 JavaScript 處理。</p>\n<p>有了想法後開始搜尋範例，雖然新版的範例不多，但好在還是能從舊版中找到符合我心中所想的範例，只是得花點時間 upgrade 成新版。</p>\n<p><a href=\"https://github.com/danneu/elm-chrome-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-chrome-extension</a> 是我找到最符合我預期的範例。</p>\n<p>而這是我翻新成 0.19 後的版本 <a href=\"https://github.com/ArvinH/elm-chrome-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-chrome-extension 0.19 版</a>。</p>\n<h3 id=\"基本架構\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%A7%8B\" aria-label=\"基本架構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本架構</h3>\n<p><img src=\"/image/elm-ext-structure.png\" alt=\"structure\"></p>\n<p>我們這邊將 <code class=\"language-text\">background.js</code> 與 <code class=\"language-text\">content.js</code> 當作不同的 Elm application 來撰寫，彼此之間再透過 Elm 特殊的 JavaScript Interop 來溝通（後面會講到）。</p>\n<p>由於個別當作一個 application，就用各自的 webpack 來幫忙 compile 跟打包。</p>\n<p><code class=\"language-text\">Model.elm</code> 則是單純用來定義我們整個 Extension 的 <strong>State</strong>。</p>\n<p>最後三個 Elm application 編億完的結果都會放入 <code class=\"language-text\">dist</code> 中，也就是我們最後的成品。</p>\n<p>另外前面沒有提到的一個資料夾 <code class=\"language-text\">elm-stuff</code>，其功用就像 <code class=\"language-text\">node_modules</code> 一樣，當你 <code class=\"language-text\">elm install</code> 完後，Elm 會將 packages 放入其中。</p>\n<p>而 <code class=\"language-text\">elm.json</code> 則是類似 <code class=\"language-text\">package.json</code> 加上 <code class=\"language-text\">package-lock.json</code> 的存在：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"source-directories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"./background\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"./content\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"./common\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"elm-version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.19.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"direct\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"elm/browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.1\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/html\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/json\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.1.3\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"myrho/elm-round\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.4\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"indirect\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"elm/time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"elm/virtual-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.2\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test-dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"direct\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"indirect\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 Elm 是用 exact versions，可以保證 reliable builds。而 dependencies 中的 direct 就是所有你能直接在 Elm code 中 import 的 package，而那些 package 所各自引用的其他 lib 則會自動被載入到 indirect 中。</p>\n<p>值得注意的是，雖然我們整個 project 用了三個 Elm application，但我們是共用同一個 elm.json 來管理 packages，因此在 <code class=\"language-text\">source-directories</code> 的地方我們羅列三個 source 來源。</p>\n<h3 id=\"專案實作方式概略\" style=\"position:relative;\"><a href=\"#%E5%B0%88%E6%A1%88%E5%AF%A6%E4%BD%9C%E6%96%B9%E5%BC%8F%E6%A6%82%E7%95%A5\" aria-label=\"專案實作方式概略 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>專案實作方式概略</h3>\n<p>這個 Extension 的功能很單純，流程如下：</p>\n<p>使用者 Select 了某段數字後，就會由 <code class=\"language-text\">Content.js</code> 將選取的數字傳遞給 <code class=\"language-text\">Background.js</code> 去處理，而 <code class=\"language-text\">Background.js</code> 就會負責拉取匯率 API，並將使用者選取的數字進行換算，接著將結果更新到 <code class=\"language-text\">Model</code> 上，再經由 <code class=\"language-text\">Model</code> 的變動去觸發 <code class=\"language-text\">Content.js</code> 進行 <code class=\"language-text\">View</code> 的更新。</p>\n<p>我們一步一步來看，主要會 Focus 在如何更新 Model，以及如何讓 Elm(計算邏輯) 與 JavaScript(頁面 Dom 與 Chrome API) 互相溝通。</p>\n<h4 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h4>\n<p>首先，我們先從最簡單的 Model 看起：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Model</span> <span class=\"token keyword\">exposing</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Model</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- This is the model in common among all of our apps</span>\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">result</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">selectedContent</span><span class=\"token operator\">:</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">exrateTWD</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">exrateJPY</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>line 1 就是 Elm 中載入 package 的方式，而在我們的 application 中，Model 內容很單純，主要是記錄型別為 Float 的結果（result)、Int 的 selectContent、Float 的 exrateTWD 與 exrateJPY。</p>\n<p>然後透過 webpack loader 來幫忙編譯：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.elm$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">elm-stuff</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'elm-hot-webpack-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'elm-webpack-loader?verbose=true'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"mainelm-in-backgroundjs\" style=\"position:relative;\"><a href=\"#mainelm-in-backgroundjs\" aria-label=\"mainelm in backgroundjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main.elm in Background.js</h3>\n<p>在 Background 資料夾中，我們有一個 <code class=\"language-text\">index.js</code> 與 <code class=\"language-text\">Main.elm</code>，<code class=\"language-text\">index.js</code> 負責與 <code class=\"language-text\">content.js</code> 溝通和處理 chrome api 相關的 JavaScript；<code class=\"language-text\">Main.elm</code> 則是負責計算匯率以及更新 Model。</p>\n<p>index.js 會與 Main.elm 互相溝通，Webpack 會將兩者打包成 <code class=\"language-text\">background.js</code>。</p>\n<p>但 JavaScript 怎麼與 Elm 溝通呢？容許我從 <a href=\"https://elmprogramming.com/sending-data-to-javascript.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a> 中借張圖：</p>\n<p><img src=\"/image/elm-js-interpo.png\" alt=\"How JS interact with Elm\"></p>\n<p>從這張圖可以很清楚看到 Elm runtime 是怎麼跟外部溝通，又是怎麼與我們程式邏輯互動。</p>\n<p>透過 <code class=\"language-text\">Command</code> 我們可以對 Elm runtime 下達指令去執行 side effect，像是 HTTP request 等等；Elm runtime 則藉由 <code class=\"language-text\">Subscription</code> 與 <code class=\"language-text\">Message</code> 將 side effect 結果傳遞回 application 本身。</p>\n<p>透過 <code class=\"language-text\">Message</code>，Elm runtime 與我們的 application 可以知道要執行甚麼動作，包含 Update State（Model）或是更新 View。</p>\n<p>而若是需要與外部 JavaScript 溝通，則有 <code class=\"language-text\">Ports</code> 提供橋樑，在 JavaScript 中，能使用類似 <code class=\"language-text\">postMessage</code> 的方式傳遞資料。</p>\n<p>來看看 background 中的 Main.elm：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- ... 省略 import packages</span>\n<span class=\"token comment\">-- PORTS FROM JAVASCRIPT</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">selected</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token comment\">-- PORTS TO JAVASCRIPT</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">broadcast</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Cmd</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token comment\">-- MODEL</span>\n<span class=\"token hvariable\">init</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Flags</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">init</span> <span class=\"token hvariable\">flags</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token hvariable\">selectedContent</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">selectedContent</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">exrateTWD</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateTWD</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">exrateJPY</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateJPY</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">result</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">flags</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">result</span>\n     <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Msg</span>\n    <span class=\"token operator\">=</span> <span class=\"token constant\">NoOp</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">Select</span> <span class=\"token constant\">Model</span>\n<span class=\"token hvariable\">update</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">update</span> <span class=\"token hvariable\">msg</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">msg</span> <span class=\"token keyword\">of</span>\n        <span class=\"token constant\">NoOp</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token constant\">Select</span> <span class=\"token hvariable\">data</span> <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">let</span>\n                <span class=\"token hvariable\">nextModel</span> <span class=\"token operator\">=</span>\n                    <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">result</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">toFloat</span> <span class=\"token hvariable\">data</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">selectedContent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">data</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateTWD</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">data</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">exrateJPY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">in</span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">nextModel</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">broadcast</span> <span class=\"token hvariable\">nextModel</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">selected</span> <span class=\"token punctuation\">(</span>\\<span class=\"token hvariable\">newModels</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Select</span> <span class=\"token hvariable\">newModels</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token keyword\">alias</span> <span class=\"token constant\">Flags</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token hvariable\">selectedContent</span><span class=\"token operator\">:</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span>\n      <span class=\"token hvariable\">exrateTWD</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span>\n      <span class=\"token hvariable\">exrateJPY</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span><span class=\"token punctuation\">,</span>\n      <span class=\"token hvariable\">result</span><span class=\"token operator\">:</span> <span class=\"token constant\">Float</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Program</span> <span class=\"token constant\">Flags</span> <span class=\"token constant\">Model</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Platform.worker</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">init</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">init</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">update</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">update</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">subscriptions</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>background 的 Main.elm 中，主要有幾個區塊：</p>\n<ul>\n<li><code class=\"language-text\">port</code> keyword：定義用來給外部 JavaScript 呼叫的函數，以及 Elm 要傳遞資料給 JavaScript 時呼叫的函數</li>\n<li><code class=\"language-text\">init</code> 函數：我們定義 init 函數，初始化 application 的 Model (State），<code class=\"language-text\">Flags</code> 是 Elm 中特殊的型別，外部 JavaScript 可以透過 Flags 在 Elm 的 init 階段傳遞初始 State 資料。如同上面範例中，init 函數接收一個 <code class=\"language-text\">Flags</code> 參數，並將其 assign 到新的物件當中，並且回傳，而這物件就是（也必須是）Model。</li>\n<li><code class=\"language-text\">subscriptions</code>：當外部 JavaScript 呼叫我們在 port 中定義的函數時，Elm 會透過 subscriptions 來處理回應，基本上都會是呼叫一個函數，而該函數會 Trigger <code class=\"language-text\">update</code>，丟入 一個 Message 去更新 Model，以上面例子來說，JavaScript 會傳進新的 Model，而 Elm subscriptions 將新的 Model 以及我們指定的 Message 傳遞給 <code class=\"language-text\">update</code> 去真正的將 Model 更新。</li>\n<li><code class=\"language-text\">update</code>：update 相對單純一點，接收 Message 與 Model 型別的物件，根據 Message 的內容去判斷要進行什麼更新。在上面例子中，我們接收到 <code class=\"language-text\">Select</code> 這個 message，代表收到 JavaScript 傳來的新 Model（也就是使用者選取的數字），而 Model 中有要轉換的金額，以及台日幣的匯率差，我們在這邊進行主要的邏輯運算，將結果產生成新的 Model，透過呼叫 <code class=\"language-text\">broadcast</code> 這個 定義在 port 中的 Command，將其回傳回 JavaScript。</li>\n<li><code class=\"language-text\">main</code>：是 Main.elm 這個程式的主要進入點，這隻 Elm 程式並沒有參與到 View 的部分，因此我們使用 <code class=\"language-text\">Platform.worker</code> 函數實作，將定義好的 <code class=\"language-text\">init</code>, <code class=\"language-text\">update</code> 與 <code class=\"language-text\">subscriptions</code> 傳入。</li>\n</ul>\n<p>篇幅有限實在無法將每個 API 都詳細介紹，建議參照<a href=\"https://guide.elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網 Guide</a> 了解其詳細內容。</p>\n<h3 id=\"indexjs-in-backgroundjs\" style=\"position:relative;\"><a href=\"#indexjs-in-backgroundjs\" aria-label=\"indexjs in backgroundjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js in Background.js</h3>\n<p>JavaScript 的部分就簡單一些，重點在於初始化 State：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Main.elm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  selectedContent<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  exrateTWD<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  exrateJPY<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  result<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> Elm<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  flags<span class=\"token operator\">:</span> currState\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">index.js</code> 我們載入 <code class=\"language-text\">Main.elm</code>，並呼叫其 <code class=\"language-text\">Main.init</code> 函數，傳入 flags 物件來初始化 state。</p>\n<p>接著，subscribe Elm 的 ports <code class=\"language-text\">broadcast</code>，當 Elm 傳遞訊息過來時，我們透過 chrome 的 <code class=\"language-text\">postMessage</code> 傳遞給 <code class=\"language-text\">content.js</code>。（這邊的 port 是 <code class=\"language-text\">chrome.runtime.onConnect</code> 的 port，細節請看 <a href=\"https://github.com/ArvinH/Elm-ChromeExt/blob/master/background/src/index.js#L15-L41\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a> ）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  currState <span class=\"token operator\">=</span> state\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> port <span class=\"token keyword\">of</span> listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\napp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>broadcast<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>最後這邊我有點偷吃步，由於透過 Elm 發送 HTTP request 後的結果與我目前的 model 之間要如何整合，我在一天的 hackday 中實在沒有研究出來，所以省去那段，讓 fetch 匯率資料的部分由 JS 完成，最後再透過 <code class=\"language-text\">port</code> 的 <code class=\"language-text\">selected</code> 將 API result <code class=\"language-text\">send</code> 給 Elm：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">chrome<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span>onMessage<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> sender</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'selected'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> selectNum <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>selectedContent<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://tw.rter.info/capi.php'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token constant\">USDJPY</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Exrate<span class=\"token operator\">:</span> ExrateJPY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token constant\">USDTWD</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> Exrate<span class=\"token operator\">:</span> ExrateTWD <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> myJson\n        app<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> exrateTWD<span class=\"token operator\">:</span> ExrateTWD<span class=\"token punctuation\">,</span> exrateJPY<span class=\"token operator\">:</span> ExrateJPY<span class=\"token punctuation\">,</span> selectedContent<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>selectNum<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"mainelm-in-contentjs\" style=\"position:relative;\"><a href=\"#mainelm-in-contentjs\" aria-label=\"mainelm in contentjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main.elm in Content.js</h3>\n<p>處理好 Background.js，接著就是 Content.js。</p>\n<p>Content 中的 <code class=\"language-text\">Main.elm</code> 主要負責接收到更新的 Model，然後將其更新到 DOM 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"elm\"><pre class=\"language-elm\"><code class=\"language-elm\"><span class=\"token comment\">-- 省略 import packages</span>\n<span class=\"token comment\">-- PORTS FROM JAVASCRIPT</span>\n<span class=\"token hvariable\">port</span> <span class=\"token hvariable\">onState</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token hvariable\">msg</span>\n<span class=\"token hvariable\">init</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">init</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span>\n    <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Msg</span>\n    <span class=\"token operator\">=</span> <span class=\"token constant\">NoOp</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">NewState</span> <span class=\"token constant\">Model</span>\n<span class=\"token hvariable\">update</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Msg</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span> <span class=\"token constant\">Model</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Cmd</span> <span class=\"token constant\">Msg</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">update</span> <span class=\"token hvariable\">msg</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">msg</span> <span class=\"token keyword\">of</span>\n        <span class=\"token constant\">NoOp</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token constant\">NewState</span> <span class=\"token hvariable\">newModel</span> <span class=\"token operator\">-></span>\n            <span class=\"token punctuation\">(</span> <span class=\"token hvariable\">newModel</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">Cmd.none</span> <span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">view</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Html</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">view</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Html.div</span>\n        <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"Content\"</span>\n        <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"It's \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token hvariable\">Html.div</span>\n            <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"InnerContent\"</span>\n            <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token hvariable\">Html.div</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>\n                    <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span> <span class=\"token number\">2</span> <span class=\"token hvariable\">model</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">result</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token hvariable\">Html.div</span>\n                    <span class=\"token punctuation\">[</span> <span class=\"token hvariable\">Html.Attributes.class</span> <span class=\"token string\">\"units\"</span>\n                    <span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">[</span>\n                        <span class=\"token hvariable\">Html.text</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\" TWD\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Model</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Sub</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">subscriptions</span> <span class=\"token hvariable\">model</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">onState</span> <span class=\"token constant\">NewState</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Program</span> <span class=\"token constant\">Model</span> <span class=\"token constant\">Model</span> <span class=\"token constant\">Msg</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span>\n    <span class=\"token hvariable\">Browser.element</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">init</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">init</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">update</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">update</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">view</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">view</span>\n        <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">subscriptions</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">subscriptions</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>聰明的讀者看到這段 code 應該會發現，這邊的 <code class=\"language-text\">port</code>, <code class=\"language-text\">init</code> 與 <code class=\"language-text\">subscriptions</code> 基本上形式與 Background 的一樣，只是更簡單一點，當 subscription 收到 JavaScript 呼叫的 <code class=\"language-text\">onState</code> 函數時，我們傳遞 <code class=\"language-text\">NewState</code> Message 給 <code class=\"language-text\">update</code>，而 <code class=\"language-text\">update</code> 就只是單純的回傳新的 Model。</p>\n<p>唯一差別在於 <code class=\"language-text\">view</code> 與 <code class=\"language-text\">main</code>。</p>\n<p>在 Elm 中，view 會接受 Model 為參數，並回傳 HTML DOM，在範例中，我們產生了三層的 div，第三層有兩個 div 並行，分別呈現轉換後的匯率數字，以及單位，這邊我還用了一個 elm 的 package 來 <code class=\"language-text\">round</code> 數字到小數點後兩位。</p>\n<p>而由於 Content 的 <code class=\"language-text\">Main.elm</code> 有跟 Browser 互動（產生 HTML），所以需要的不是 <code class=\"language-text\">Platform.worker</code> 而是 <code class=\"language-text\">Browser.element</code>，他會將 View 也綁定進去。（一樣，詳情請參照<a href=\"https://guide.elm-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網 Guide</a> ）</p>\n<h3 id=\"indexjs-in-contentjs\" style=\"position:relative;\"><a href=\"#indexjs-in-contentjs\" aria-label=\"indexjs in contentjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js in Content.js</h3>\n<p>Content 中的 JavaScript 就更單純了，基本上就是 <code class=\"language-text\">createElement</code> 出一個 div，並且設定 <code class=\"language-text\">mouseup</code> listener，讓使用者選取文字後，能夠 <code class=\"language-text\">sendMessage</code> 給 background.js，並且設定好 Elm DOM 要掛載的 Real Dom 位置與 style (index.css)：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.css'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> mountNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>mountNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Elm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Main.elm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> app<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 利用 window.getSelection() 抓取使用者選取的數字</span>\n  <span class=\"token keyword\">const</span> selectedObj <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> selectedContent <span class=\"token operator\">=</span> selectedObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token comment\">// 這邊忽略的 code 主要在是：</span>\n  <span class=\"token comment\">// 計算 Elm 產生的 DOM 該插入到頁面中的哪個位置</span>\n  <span class=\"token comment\">// 判斷何時該讓 DOM 消失</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selectedContent <span class=\"token operator\">&amp;&amp;</span> selectedContent<span class=\"token operator\">!==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chrome<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> kind<span class=\"token operator\">:</span> <span class=\"token string\">'selected'</span><span class=\"token punctuation\">,</span> selectedContent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> chrome<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'broadcast'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nport<span class=\"token punctuation\">.</span>onMessage<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app <span class=\"token operator\">=</span> Elm<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node<span class=\"token operator\">:</span> mountNode<span class=\"token punctuation\">,</span>\n      flags<span class=\"token operator\">:</span> state\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  app<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>onState<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">port.onMessage</code> 的 listener 中，我們會監聽到由 Background.js 傳遞來的初始 State，然後才 init Content 這邊的 Elm application，並將 Background.js 傳來的 state 一起傳入，若後續有更新 state，則透過 <code class=\"language-text\">port</code> 的 <code class=\"language-text\">onState</code> 來更新。</p>\n<p>基本上這樣一來，整個 Extension 的工作就完成了，但省略了不少細節，完整程式碼與其他細節只好請大家直接看原始碼會更清楚一點： <a href=\"https://github.com/ArvinH/Elm-ChromeExt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source code</a></p>\n<h3 id=\"如何-debug\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95-debug\" aria-label=\"如何 debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何 Debug</h3>\n<p>在用 Elm 製作 Chrome extension 的過程中，Debug 的方式其實跟一般用 JS 開發一樣，都是透過 inspect 從 browser 中到 <code class=\"language-text\">background.js</code> 與 <code class=\"language-text\">content.js</code> 下中斷點，但是麻煩的是，在這邊的 <code class=\"language-text\">background.js</code> 與 <code class=\"language-text\">content.js</code> 都有一大部分是 Elm compile 出來的 JS，是沒有類似 source map 的東西能讓你直接在 Elm code 內 Debug 的，所以除錯起來真的不是很方便，之後若有研究到方法再來更新。也歡迎大家給予指導！</p>\n<h2 id=\"結論與心得\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96%E8%88%87%E5%BF%83%E5%BE%97\" aria-label=\"結論與心得 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論與心得</h2>\n<p>Elm 的確是蠻優雅的語言，但不是能在短時間內完美駕馭的...尤其是 Debug 的難度以及文件範例的相對稀少，都讓人容易退卻，但我還是蠻開心能利用這次機會親手玩玩 Elm，並且製作了一個我用得上的工具，當然還有一些需要改善的部分，但已經堪用了。希望之後還能有時間繼續研究！有興趣的讀者或許能一起加入他們的 <a href=\"https://elm-lang.org/community\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Community</a> 討論！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://elm-lang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm-lang</a></li>\n<li><a href=\"https://elmprogramming.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Beginning Elm</a></li>\n<li><a href=\"https://github.com/elm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">elm github</a></li>\n<li><a href=\"https://www.infoq.com/presentations/Elm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elm 作者 ｀2012 年的演講影片</a></li>\n<li><a href=\"https://shenlvmeng.github.io/blog/2017/06/19/elm-introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elm——函数式前端框架介绍</a></li>\n</ol>","id":"d17a9878-80d5-5b4f-aa9b-6db7801abf38","fields":{"slug":"elm-chrome-extension"},"frontmatter":{"date":"2019-04-22T22:47:05.000Z","title":"利用 Elm 製作 Chrome Extension","tags":["Elm","Chrome extension"],"type":"tech","slug":"elm-chrome-extension"},"timeToRead":17},"next":{"excerpt":"If you don't want to start over, don't give up","html":"<blockquote>\n<p>If you don't want to start over, don't give up</p>\n</blockquote>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>在今年的 Google I/O 2019 中，<a href=\"https://twitter.com/dassurma\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Surma</a>, <a href=\"https://twitter.com/jaffathecake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Jake</a> 與 <a href=\"https://twitter.com/kosamari\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@Mariko</a> 推出了一款能在低階的 feature phone 上運作順暢的 <a href=\"https://github.com/GoogleChromeLabs/proxx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web app - PROXX</a>，其中利用到了 Web worker 來分擔許多 Browser main thread 中的工作，讓畫面渲染可以更順暢，也因此讓我注意到去年在 Chrome dev summit 2018 中的一支影片 - <a href=\"https://www.youtube.com/watch?v=Vg60lf92EkM&#x26;list=PLNYkxOF6rcIDjlCx1PcphPpmf43aKOAdF&#x26;index=17&#x26;t=0s\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Architecting Web Apps - Lights, Camera, Action!</a>，讓我眼睛為之一亮，裡面講到他們利用 Actor Model 來將關注點分離，不同的 Actors 各自負責不同的工作，彼此之間用共通的介面溝通，如此一來，除了將複雜的運算邏輯放入 Web worker 外，由於架構上的特性，理論上也能很方便的抽換 View 的實作方式，像是一套 web app，可以在不重寫所有邏輯的情況下，從 Vue 實作 view，轉換到以 React 實作。</p>\n<p>聽起來非常合理，而有趣的是，這個 Actor Model 其實早在 46 年前就被提出，也有應用在 Web 領域上過，像是用 Scala 撰寫 的 Akka，或是在電信通訊上有名的 Erlang，但是在前端上似乎是第一次被提出來。</p>\n<p>今天透過這篇文章來了解一下這個 46 年前就存在的觀念是什麼，而又能如何與 Web 前端整合呢！</p>\n<h2 id=\"actor-model-介紹\" style=\"position:relative;\"><a href=\"#actor-model-%E4%BB%8B%E7%B4%B9\" aria-label=\"actor model 介紹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actor Model 介紹</h2>\n<p>Actor Model 是一個關於 concurrent computation 的 conceptual model，在 1973 年最早被提出時，只是一個概念模型，用來抽象化並行處理程序的複雜程式，直到 1985 才被延伸出一個完整的 Actor model theory，有興趣可以到 <a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a> 查看。</p>\n<p>而為什麼會需要提出 Actor Model 來處理 concurrent issue 呢？</p>\n<p>歷史上的前因後果在這個影片中的前半段解釋得蠻清楚的 <a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></p>\n<p>大體上是說，由於 CPU 的製程是有其極限存在，已經無法保證 Moore's Law 會持續下去，取而代之的是用多核心來提高處理器內的電晶體數量，透過多核心的並行處理來提高運算速度，而平行處理對於撰寫程式的我們來說，就是很複雜的一個存在，因為我們有 Shared mutable state，造成 race condition、dead lock 等等的 issue 需要避免，而 Actor Model 就是因應而生的解決方案之一。</p>\n<p>Actor Model 主要有幾個特點：</p>\n<ul>\n<li>輕量物件: Actor 是系統內的一個基礎單位，每個 Actor 只負責自己的工作，所以可以很輕量。</li>\n<li>沒有 shared state：每個 Actor 各自管理自己的 state，跑在各自的 thread 上，不共享 memory 與 state。</li>\n<li>透過 message 溝通：每個 Actor 會有一個 message queue，或稱作 mailbox，接收到的訊息會在此排隊等著依序執行。</li>\n</ul>\n<p>一個 Actor 的架構略如下圖：</p>\n<p><img src=\"/image/actor-model.png\" alt=\"Actor Model\"></p>\n<p>每個 Actor 都有自己的 private state，別的 Actor 沒辦法直接更動你的 state，降低了因為 shared state 產生的問題。</p>\n<p>我們拉遠一點來看，Actor 運行在不同的 Thread 中，彼此之間透過 Message 來溝通，收到訊息後各自決定要採取什麼樣的對應動作，而更改的都只會是自己的 private state，沒有 share memory，彼此之間是互相獨立的。</p>\n<p><img src=\"/image/actor-model-system.png\" alt=\"Actor Model system\"></p>\n<p>而在操作上，每個 Actor 只被允許做下面三種 operation：</p>\n<ol>\n<li>創建另一個 Actor</li>\n<li>傳送 Message</li>\n<li>指示該如何處理下一個 Message</li>\n</ol>\n<p>前面兩種很好理解，但第三個就蠻有趣的了，舉例來說，假設有個 Counter Actor A，一直以來都是會把接受到的 Message 數字累加到自己的 counter state 中，但今天可以有另一個 Actor B 傳遞訊息跟 Actor A 說：『hey, 你這次先不用累加數字了，但是下一個傳進來的訊息，你要乘以 2 以後再放到計數器內喔』。</p>\n<p><img src=\"/image/actor-model-counter.png\" alt=\"Counter example\"></p>\n<p>這個三個特性合再一起時，有個很大的好處：容錯系統。</p>\n<p>一個 Actor 對於他創建的 Actor 可以擁有 supervisor 的權限，可以告訴其管控的 Actor 說：『如果你 crash 了，至少死前丟給我個訊息跟我說』，然後當 Supervisor Actor 收到 Actor 死亡訊息時，可以再傳送 \"restart\" Message 去重啟 Actor，這樣的能力造就了一個 Self-healing systems：</p>\n<p><img src=\"/image/actor-model-fault-tolerance.png\" alt=\"Fault Tolerance System\"></p>\n<p>看到這邊會發現，雖然 Actor model 是因為 concurrent computation 而提出的，但其特性用在<strong>分散式系統</strong>上也是非常合適的，每個 Actor 跑在不同的 thread 上，當然也可以是不同的遠端環境上，並透過統一個 Message 介面溝通。</p>\n<h2 id=\"運用到-web-前端上\" style=\"position:relative;\"><a href=\"#%E9%81%8B%E7%94%A8%E5%88%B0-web-%E5%89%8D%E7%AB%AF%E4%B8%8A\" aria-label=\"運用到 web 前端上 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>運用到 Web 前端上</h2>\n<p>在瀏覽器的世界中，也是存在有多種 Process 與 Context（推薦閱讀 @Mariko 的這篇<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">瀏覽器深入淺出介紹</a>)，像是負責渲染的 UI Process，而在 DOM 外的 web worker 則是另一個獨立的 Worker Process，就想是一個縮小版的分散式系統，Worker Process 沒辦法直接存取 UI Process 所控制的 DOM 元件，相對的 UI Process 也無法直接呼叫 Worker Process 中所存在的函式。</p>\n<p>照著這樣的邏輯梳理下來，Web 前端真的是蠻適合套用 Actor Model 的，就像我們有個 UI Actor 運行在 UI Process，同時負責控制狀態的 State Actor 運行在 Worker Process，彼此之間透過 Message 來溝通。</p>\n<p>透過 Actor Model 來切割 UI 與 State 的關係，只要處理得當，理論上我們能夠讓一套相同商業邏輯的 Web app，輕易地從普通的 Web 轉換成 3D 版本，或是 Web VR 版本。</p>\n<p>更棒的是，將關注點分離成各種 Actor 後，code splitting 變得更自然更容易了，每個 Actor 都能夠在需要的時候再載入即可。</p>\n<h2 id=\"web-應用的範例\" style=\"position:relative;\"><a href=\"#web-%E6%87%89%E7%94%A8%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"web 應用的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web 應用的範例</h2>\n<p>說了這麼多，來看點實際的例子！</p>\n<p>既然這個概念是 Google engineer 在他們的開發大會展示的，勢必有 Demo code 可以看，這套叫做 <a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a> 的 repository 包含了 <a href=\"https://github.com/PolymerLabs/actor-helpers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-helper</a> 來幫忙 cover 了 Actor Model 與 Messaging system 的實作細節，讓我們能輕易的體驗 Actor Model 運用在 Web Frontend 的感覺。</p>\n<p>我們做個簡單的基礎代謝率(BMR)計算器來感受一下。</p>\n<p>先看一下成果：</p>\n<p><img src=\"/image/actor-bmr-demo.gif\" alt=\"bmr calculator - actor model\"></p>\n<p>UI 上就是簡單幾個 input 欄位而已，按下按鈕後，取出使用者輸入的值進行計算，最後顯示結果。這段流程我們可以拆分成兩個 Actor 來完成，分別是控制 UI 的 <strong>UI Actor</strong> 與更動 State 的 <strong>State Actor</strong>。（仔細看上方的 gif 的話，可以看到 State Actor 其實是運行在 Worker process 上的。</p>\n<p>接著我們先來看看 UI Actor 長什麼樣子，關鍵的程式碼在下面這幾行（順帶一提，因為 action-boilerplate 本身就是以 TypeScript 實作，因此接下來範例也是 TypeScript）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UiActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> state <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> resultEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSpanElement<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">getInputVal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// gender</span>\n    <span class=\"token keyword\">const</span> genderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLSelectElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> genderVal <span class=\"token operator\">=</span> genderEl<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// height, weight, age 依此類推...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      gender<span class=\"token operator\">:</span> genderVal<span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> heightVal<span class=\"token punctuation\">,</span>\n      weight<span class=\"token operator\">:</span> weightVal<span class=\"token punctuation\">,</span>\n      age<span class=\"token operator\">:</span> ageVal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> calculateButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Calculate\"</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n    calculateButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> StateMessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInputVal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//...略</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resultEl<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先從 <code class=\"language-text\">actor-helpers</code> 中取出 Actor 物件來繼承，實作兩個主要函式：<code class=\"language-text\">init()</code> 與 <code class=\"language-text\">onMessage()</code>：</p>\n<ul>\n<li>init()：\n負責在初始時與 DOM 元件建立關係，綁定 event handler，當事件觸發時傳遞訊息給 State Actor。</li>\n<li>onMessage():\n就像是接收 <code class=\"language-text\">postMessage</code> 傳送的訊息一般，<code class=\"language-text\">actor-helpers</code> 幫我們串接好訊息溝通這段，在這 <code class=\"language-text\">onMessage()</code> 中，可以接收到其他 Actor 傳送過來的訊息。</li>\n</ul>\n<p>在 <code class=\"language-text\">init()</code> 中的 <code class=\"language-text\">this.state</code> 是什麼呢？為什麼他可以 send message？</p>\n<p>那是我們利用 <code class=\"language-text\">actor-helpers</code> 提供的 <code class=\"language-text\">lookup</code> 函式，將 State Actor 綁定到創建的私有變數上，這樣就能使用 <code class=\"language-text\">send</code> 來傳送訊息。</p>\n<p>接著我們來看看 State Actor：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Actor<span class=\"token punctuation\">,</span> lookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lots of Type definitions...</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StateActor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Actor</span><span class=\"token operator\">&lt;</span>Message<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> ui <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> Message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">CALCULATE</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n          weight<span class=\"token punctuation\">,</span>\n          height<span class=\"token punctuation\">,</span>\n          age<span class=\"token punctuation\">,</span>\n          gender\n        <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> BMRParams <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Do the math</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> bmr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> MessageType<span class=\"token punctuation\">.</span><span class=\"token constant\">RESET</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ui<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      state<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>跟 UI Actor 大同小異，繼承 <code class=\"language-text\">Actor</code> 並利用 <code class=\"language-text\">lookup</code> 綁定 UI Actor 到私有變數上，在 <code class=\"language-text\">onMessage()</code> 中，根據接收到的 Message Type 來執行對應動作，並更改自身的 state，再將 Result Message 傳回給 UI Actor。</p>\n<p>透過 <code class=\"language-text\">action-helps</code>，實作 Actor 變得方便許多（當然也是因為這是很簡單的例子...）。</p>\n<p>不過還沒結束，Actor 都有了以後，我們要怎麼使用呢？</p>\n<p>我們要準備兩個特殊的檔案，<code class=\"language-text\">bootstrap.ts</code> 與 <code class=\"language-text\">worker.ts</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup<span class=\"token punctuation\">,</span> initializeQueues <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> UiActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/ui.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">initializeQueues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UiActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// This is necessary in Safari to keep the worker alive.</span>\n  <span class=\"token comment\">// 相關討論可以看 repo 內的 issue https://github.com/PolymerLabs/actor-boilerplate/issues/13</span>\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>顧名思義，<code class=\"language-text\">bootstrap.ts</code> 負責啟動整個專案，透過 <code class=\"language-text\">hookup</code> 載入 UI Actor，並且 new 出一個 worker 來運行我們的 State Actor。</p>\n<p><code class=\"language-text\">initializeQueues</code> 主要是在程式執行前，清空目前瀏覽器的 Message queue，該函式的程式碼也就一行 <code class=\"language-text\">await messageStore.popMessages(\"*\");</code>。</p>\n<p>而 <code class=\"language-text\">worker.ts</code> 的內容更簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> hookup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"actor-helpers/src/actor/Actor.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> StateActor <span class=\"token keyword\">from</span> <span class=\"token string\">\"./actors/state.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">hookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StateActor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就是 <code class=\"language-text\">hookup</code> State Actor！</p>\n<p>最後在你的 html 上加入 <code class=\"language-text\">bootstrap.ts</code> 即可，這樣我們就完成了一個以 Actor Model 為基礎架構的 Web app！</p>\n<p><a href=\"https://github.com/ArvinH/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整程式瑪可從此參考</a>。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Actor Model 雖然有了 <code class=\"language-text\">actor-helps</code> 的幫忙，實作上來說已經簡易很多，但任何操作都要透過 Message 的實作方式在前端應用上恐怕還是不好被接受，可能也因為如此，<code class=\"language-text\">actor-boilerplate</code> 其實在去年 Chrome dev summit 結束後似乎就沒再更新了 XD</p>\n<p>不過我個人是蠻喜歡這個想法的，之後有機會再來真的實作一個不同 View 但使用同樣 State 的 Web app 看看！</p>\n<p>另外，我也發現到，Web worker 雖存在已久，但是使用上的限制，讓一般我們在開發上很少會去考慮他，但這幾年看來，像是 AMP 等等的出現，發現 Google 似乎在推廣一個概念，就是 User experience first，Developer experience second，Developer 擅長處理複雜的事情，既然如此，我們應該專注在提供使用者最佳使用體驗上，而犧牲一點開發體驗。</p>\n<p>如果你的 Web app 有複雜運算的需求，就試試看用 Actor Model 來將複雜的邏輯丟給在 Worker process 的 Actor 處理吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://dassur.ma/things/lights-camera-action/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lights, Camera, Action!</a></li>\n<li><a href=\"https://github.com/PolymerLabs/actor-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">actor-boilerplate</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=k3ja9I6bGvU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[COSCUP 2011] Programming for the Future, Introduction to the Actor Model and Akka Framework</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Actor_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki - Actor Model</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inside Browser</a></li>\n</ol>","id":"f58e6401-0c27-5e8f-a15e-5d313b471e6a","fields":{"slug":"actor-model-in-web"},"frontmatter":{"date":"2019-06-21T13:37:30.000Z","title":"46 年老技術與 Web 的新火花 - Actor Model in Web","tags":["web","web worker","google chrome","architecture"],"type":"tech","slug":"actor-model-in-web"},"timeToRead":10},"type":"tech"}},"staticQueryHashes":["2123680655"]}