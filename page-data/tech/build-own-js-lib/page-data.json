{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/build-own-js-lib","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/SfehQq0wC84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">莫宰羊 - 健康快樂 </a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/SfehQq0wC84\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<p>去年年底時趁著 Udemy 特價，買了上面很有名的課程 - JavaScript: Understanding the Weird Parts，當初會想買是因為他最後面有個章節是介紹如何建構自己的 JS Framework，\n而我一直都很想有系統性地去瞭解建構一個可供大家使用的 JS library 或是 framework 需要注意哪些事項，該怎麼寫才是安全有彈性的結構。</p>\n<p>大約花了三天的時間斷斷續續把課程上完，這邊紀錄一下該章節的一些筆記，並實做一個小小的 js library 當範例。</p>\n<h3 id=\"goal\" style=\"position:relative;\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h3>\n<p>目標是建構一個 js library，可以將數字做一些簡化約分，像是我在 <a href=\"http://blog.techbridge.cc/2017/03/04/webcomopnent-practice/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Component 實戰</a> 中所實作的 function。\n並讓 user 透過 <code class=\"language-text\">&lt;script src=\"formatNum.js\" /></code> 的方式就能載入使用。</p>\n<p>完整的 code 如下：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/cayelaxewu/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.9\"></script></p>\n<h3 id=\"structuring-safe-code\" style=\"position:relative;\"><a href=\"#structuring-safe-code\" aria-label=\"structuring safe code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structuring Safe Code</h3>\n<p>要建構一個安全的 JS lib，勢必需要保護好自己的 scope 不受外部影響，也不會去影響外部。要做到這件事最簡單的方式就是使用一個 IIFE (Immediately Invoked Function Expression)，</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而我們需要將 lib 能夠 export 到外部供人使用，所以在這個立即執行函式中需要傳入 window 物件，在函式內我們則取名為 global，這樣未來如果想要執行在不同環境，像是 nodejs 裡面時，可以不用更改內部的變數名稱，\n只要修改傳入的 window 變數即可。</p>\n<p>另外最前方可以加上個分號，以免有其他人的 code 沒有用分號做結尾而造成問題，不過這個並不是必須的。</p>\n<p>在這個立即執行函式中的變數除非我們刻意 export 出去，否則都只存在於自己的作用域內，是個安全的結構。</p>\n<p>下方的 <code class=\"language-text\">supportedUnit</code> 與 <code class=\"language-text\">unit</code> 在外部都無法存取，無法透過 <code class=\"language-text\">FormaNum.unit</code> 取得。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// hidden within the scope of the IIFE and never directly accessible</span>\n    <span class=\"token keyword\">const</span> supportedUnit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'scientific'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        normalUnit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"k\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        siUnit<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E18</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"E\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E15</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"P\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E12</span><span class=\"token punctuation\">,</span> symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"T\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E9</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"G\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E6</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1E3</span><span class=\"token punctuation\">,</span>  symbol<span class=\"token operator\">:</span> <span class=\"token string\">\"k\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"object-prototype-and-properties\" style=\"position:relative;\"><a href=\"#object-prototype-and-properties\" aria-label=\"object prototype and properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object, Prototype and Properties</h3>\n<p>接著就是開始實作我們的 lib 內容了，這門課程中，有帶著我們了解 JQuery 的 source code，看看這個偉大的 lib 是如何架構其內部程式，其中很特別的地方在於它 new 一個物件的方式，\n通常我們載入一個別人寫好的物件，或是我們自己寫好了一個物件，要使用的時候會需要透過 <code class=\"language-text\">const objectInstanc = new Object()</code> 的方式來產生物件實例，但為何我們使用 JQuery 的時候都不需要特別使用 new 關鍵字呢？</p>\n<p>因為在 JQuery 中，他透過下面的方式來幫你在每次使用它時自動 new 了一個物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">// 'new' an object</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FormatNum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormatNum<span class=\"token punctuation\">.</span>init</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...</span>\n\n    <span class=\"token comment\">// the actual object is created here, allowing us to 'new' an object without calling 'new'</span>\n    FormatNum<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">=</span> digits <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token punctuation\">.</span>unit <span class=\"token operator\">=</span> unit <span class=\"token operator\">||</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">;</span>\n        \n        self<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這時候你可能會想說，這樣的寫法，不就代表我要加 method 到 prototype 的話，都是要加在 <code class=\"language-text\">FormatNum.init.prototype</code> 了嗎？ 這樣有點奇怪耶，畢竟我的 lib 是叫做 FormatNum呀！</p>\n<p>沒錯，所以我們可以將 FormatNum.init.prototype 在指定到 FormatNum.prototype 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    FormatNum<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token class-name\">FormatNum</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過短短這兩個步驟，我們就能夠不需要自己 new object，同時又能直接在 FormatNum 上面設置 prototype method！</p>\n<p>另外，透過在每個 method 的最後 return this，就能讓我們的 function chainable。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// prototype holds methods (to save memory space)</span>\n    <span class=\"token class-name\">FormatNum</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">///</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      \n        <span class=\"token function-variable function\">calculate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unitType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">///</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      \n        <span class=\"token function-variable function\">formatScientific</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'siUnit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n        <span class=\"token function-variable function\">formatNormal</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'normalUnit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token comment\">// chainable methods return their own containing object</span>\n        <span class=\"token function-variable function\">format</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> formattedNum<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// if undefined or null it will be coerced to 'false'</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unit <span class=\"token operator\">===</span> <span class=\"token string\">'scientific'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                formattedNum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatScientific</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                formattedNum <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNormal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>\n          \n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formattedNum <span class=\"token operator\">=</span> formattedNum<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 'this' refers to the calling object at execution time</span>\n            <span class=\"token comment\">// makes the method chainable</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n        <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formattedNum is: '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>formattedNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// make chainable</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"export-to-outside-world\" style=\"position:relative;\"><a href=\"#export-to-outside-world\" aria-label=\"export to outside world permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>export to outside world</h3>\n<p>最後我們只要加上 <code class=\"language-text\">global.FormatNum = global.F$ = FormatNum;</code></p>\n<p>就可以在外部使用 <code class=\"language-text\">FormatNum</code> 或是 <code class=\"language-text\">F$</code> 來呼叫我們的 lib 了！</p>\n<h3 id=\"小問題\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E5%95%8F%E9%A1%8C\" aria-label=\"小問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小問題</h3>\n<p>在實作範例時，本來想直接全用 ES6 寫（課程主要都是 ES5），但是在這邊的 function 都不能用 ES6 的 arrow function 取代，<code class=\"language-text\">this</code> 的作用域不同，會造成問題。\n<a href=\"https://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">這篇有提到</a>\narrow function 會 binding 到整個 module 的 scope，而非 object。不知道是否有什麼好方法可以解決，等我查到後再來補上。</p>","fields":{"slug":"build-own-js-lib"},"frontmatter":{"title":"[筆記] JavaScript: Understanding the Weird Parts --- Build your own lib/framework","date":"04-01-2017","tags":["javascript","note"]},"timeToRead":4}},"pageContext":{"slug":"build-own-js-lib","prev":{"excerpt":"好歌分享：Boney M. - Sunny","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/HddPrwMUGVc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Boney M. - Sunny</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/HddPrwMUGVc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>上個月我們介紹過 Web Component，大致上把 Web Component 的相關知識都介紹一輪了，也提供了一些範例，但是並沒有製作出一個完整可用的元件，\n因此今天就好好的來實做一個簡易又實用的 Web Component（對我來說很實用啦...），並且將他發佈到 <a href=\"https://www.webcomponents.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webcomponent.org</a> 上面。\n最後也會說明一下我嘗試將我製作的 webcomponent 與 react 整合的心得。</p>\n<p>開始前還是先給大家看一下看完這篇文章後可以達到的成果，發佈到 Webcomponent.org 並有 inline demo：</p>\n<p><img src=\"/image/webcomponent-published.png\" alt=\"Fianl\" title=\"Final Result\"></p>\n<p><a href=\"https://www.webcomponents.org/element/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">format-num webcomponent</a>\n<a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a></p>\n<h2 id=\"idea\" style=\"position:relative;\"><a href=\"#idea\" aria-label=\"idea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Idea</h2>\n<p>在一些活動頁面或是互動性較高的網站中，顯示參與人數是很常見的功能，而有些時候我們並不需要很確切的數目，反倒是希望能夠約分成以 K（千） 或 M（百萬） 為單位，\n這時通常我會寫個類似下面這樣的小函式來作轉換，並在每個需要的 React Component 中去 require 這個函式使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">formatNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">></span> <span class=\"token number\">999</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'k'</span> <span class=\"token operator\">:</span> num\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但就只是個很簡單的函示，卻每個需要的 Component 都要 require 一次，久了就會覺得怎麼 HTML 5 不出一個 tag 是可以幫我把數字直接做 format 的呢？\n這樣我就只要用對 Tag，就會有我要的結果了，也不用特別去寫個小 function。</p>\n<p>想到這就覺得似乎是個好機會來練習一下 Web Comopnent 的實作，而且依照 React 的<a href=\"https://facebook.github.io/react/docs/web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方說法</a> Web Component 跟 React 是可以相互在對方的環境下使用的！\n那還等什麼呢！</p>\n<h2 id=\"那就來實作吧\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E5%B0%B1%E4%BE%86%E5%AF%A6%E4%BD%9C%E5%90%A7\" aria-label=\"那就來實作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那就來實作吧</h2>\n<p>根據上一次的學習 <a href=\"http://blog.techbridge.cc/2017/01/06/web-components/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2017，讓我們再來看看 Web Components 吧！</a>，\n很快的就能建立好基本的架構：</p>\n<div class=\"gatsby-highlight\" data-language=\"htmlformatnum.html\"><pre class=\"language-htmlformatnum.html\"><code class=\"language-htmlformatnum.html\">&lt;!-- template --&gt;\n&lt;template id=&quot;format-num-template&quot;&gt;\n  &lt;style&gt;\n    :host {\n      position: relative;\n    }\n  &lt;/style&gt;\n  &lt;span class=&quot;wrapper&quot;&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/span&gt;\n&lt;/template&gt;\n\n&lt;!-- custom element --&gt;\n&lt;script&gt;\nclass formatNum extends HTMLElement {\n    constructor() {\n      super();\n      let shadowRoot = this.attachShadow({mode: &#39;open&#39;});\n      const t = document.querySelector(&#39;#format-num-template&#39;);\n      const instance = t.content.cloneNode(true);\n      shadowRoot.appendChild(instance);\n      this.shadowDOM = shadowRoot;\n    }\n  }\n  customElements.define(&#39;format-num&#39;, formatNum);\n&lt;/script&gt;</code></pre></div>\n<p>接著我開始構想這個 tag 需要有哪些 attribute 可以設置，最基本我會需要能指定小數點後的位數，並且能指定轉換單位的型態，因為有時候可能會需要二進位的轉換，也就是以 1024 為單位，而有時需要計算人數時，則是以 K, M, B 來顯示。</p>\n<p>因此會需要設置兩個 attribute，<code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">digits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">si</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得要設置 <code class=\"language-text\">observedAttributes</code>，這樣使用者改變 tag 的 <code class=\"language-text\">digits</code> 與 <code class=\"language-text\">si</code> 時，我們才可以有對應動作，也就是重新 format 一次數字。</p>\n<p>接著加入下列兩個關鍵 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我們在 <code class=\"language-text\">observedAttributes</code> 中列舉的 attribute 只要有所變動都會觸發 <code class=\"language-text\">attributeChangedCallback</code>，並且執行 <code class=\"language-text\">formatNum()</code>，\n而 <code class=\"language-text\">formatNum()</code> 就會從 shadowDOM 中抓出數字，並且從 attribute 中抓出小數點位數以及是哪種單位，經過 <code class=\"language-text\">format()</code> 的轉換後再將資料塞回 shadowDOM 中。\n（ <code class=\"language-text\">format()</code> 就是類似最上方的數字單位轉換函示，不是重點就不列出，有興趣可以到我的 <a href=\"https://github.com/ArvinH/format-num\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">git repo</a> 連結去看）</p>\n<p>寫到這邊看起來就大功告成了，嗯，我也這麼覺得。</p>\n<p>但是事情就是沒有憨人想得這麼簡單。</p>\n<p>當我在 html 裡面加上我新增的 element <code class=\"language-text\">&lt;format-num digits='1'>1234&lt;/format-num></code> 時，竟然毫無反應，就只是個 1234，而不是 1.2k。</p>\n<p>原因是我以為在執行 <code class=\"language-text\">formatNum()</code> 的時候，可以從 <code class=\"language-text\">this.shadowDOM.querySelector('slot').textContent</code> 裡面取得 slot 內的值的，\n但似乎無法直接這樣做，就算能透過 shadowDOM 存取，當我們想要將 format 過的數字塞回 tag 內的時候，由於原先的 1234 屬於 light DOM，我們需要透過 <code class=\"language-text\">document.querySelect('format-num').innerHML</code> 的方式去改值，這樣變成由外部的 context（document) 來更改 light DOM，似乎有點不符 web component 的精神，應該要讓一切操作保持在內部才對。</p>\n<p>因此換個方式，我們不讓使用者將值寫在 slot 中，而是透過 attribute 來設置，而我們再將 parse 過的結果利用 shadowDOM 設置到 slot 中，這樣就能順利顯示了！</p>\n<p>修改程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 增加 num attribute</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'si'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 修改 formatNum()，從 attribute 中拿 num 的值，並透過 shadowDOM 塞進 slot 顯示</span>\n<span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>digits <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">formatNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> digits <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'digits'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> si <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'si'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowDOM<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slot'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">,</span> si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>成果：</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/xezujo/embed?html,js,output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.41.5\"></script></p>\n<h2 id=\"讓別人-import-你的-webcomponent\" style=\"position:relative;\"><a href=\"#%E8%AE%93%E5%88%A5%E4%BA%BA-import-%E4%BD%A0%E7%9A%84-webcomponent\" aria-label=\"讓別人 import 你的 webcomponent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>讓別人 Import 你的 Webcomponent</h2>\n<p>本來想說做完了，準備要發佈的時候，發現需要準備 Demo page，\n雖然我都直接在 jsbin 與 codepen 上方寫，還沒有真正在別的 page <code class=\"language-text\">Import</code> 過 webcomponent，但想說應該就很簡單啊，把我的 code 都放在一個 html 內，\n然後透過 <code class=\"language-text\">&lt;link rel=\"import\" href=\"../src/formatNum.html\"></code> 不就得了？</p>\n<p>正當我這麼想的時候，卻發現我的 demo page 一直無法正常顯示，出現 \"Uncaught TypeError: Cannot read property 'content' of null\" 的 error，\n是在 custom element constructor 的地方：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#format-num-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>竟然找不到我的 template ?!</p>\n<p>仔細研究了好一陣子後才發現到這篇文章 <a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">introduction to html imports</a></p>\n<p>裡面有提到 html import 時的行為差異，舉例來說：</p>\n<p><em>index.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>import<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>formatNum.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> // 1.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Import Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>     // 4.</code></pre></div>\n<p><em>formatNum.html</em></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script1.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 2.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js/script2.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  // 3.</code></pre></div>\n<p>以上面的例子來說明，index.html 載入 formatNum.html，其 script 的執行順序如上面標記，\n但 <span style=\"color:red\">index.html 與 formatNum.html 中的 document 物件卻都是指向 index.html。</span></p>\n<p>因此當我的 demo page 在執行存在於 formatNum.html 內的 script，也就是 constructor 時，document 就找不到存在於 formatNum.html 內的 template 了。</p>\n<p>所以該怎麼解決呢？</p>\n<p>為了要保存住 formatNum.html 自己的 document object，我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">documentCurrentScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>_currentScript <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>currentScript<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mainDoc <span class=\"token operator\">=</span> documentCurrentScript<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">;</span></code></pre></div>\n<p>currentScript 是只有在有支援 HTML import 的瀏覽器中才有的屬性，若是透過 webcomponent.js 等 polyfill，則是用 _currentScript</p>\n<h2 id=\"打包發佈\" style=\"position:relative;\"><a href=\"#%E6%89%93%E5%8C%85%E7%99%BC%E4%BD%88\" aria-label=\"打包發佈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>打包發佈</h2>\n<p>問題都解決以後當然就要發佈到 Webcomponent.org 上面去了</p>\n<p><img src=\"/image/webcomponentIdx.png\" alt=\"webcomponent.org\" title=\"webcomponent.org\"></p>\n<p>從網站上的步驟看來很簡單，只要你的 repository 滿足三個條件，並加上 badge 與 inline demo，就可以發佈了：</p>\n<img src=\"/image/publishWebcomponent.png\" alt=\"publish to webcomponent\" style=\"width: 500px;\"/>\n<p>三個條件：</p>\n<ol>\n<li>有 Open source license，只要是被 <a href=\"https://opensource.org/licenses/alphabetical\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open Source Initative</a> 認可的都可以。</li>\n<li>Tagged release，這點很重要，他會依照你 repository 裡面的 tag 去抓檔案，如果你沒有設置的話，就算 repo 中有程式，也會發佈失敗，而且如果你有更新，也一定要有新版 Tag release，Webcomponent.org 這邊才會更新。我一開始因為有些設定沒做好，重新 push 後忘了 release tage，怎麼樣都是發佈失敗...</li>\n<li>README，這當然也是很重要，你總得要介紹一下內容。此外，如果你想要放 inline demo 的話，也是要設置在 README.md 當中。</li>\n</ol>\n<p>加上 badge：</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token url\">[<span class=\"token content\">![Published on webcomponents.org</span>][<span class=\"token variable\">webcomponents-image</span>]</span>][webcomponents-url]\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-image</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://img.shields.io/badge/webcomponents.org-published-blue.svg</span>\n<span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">webcomponents-url</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> https://www.webcomponents.org/element/arvinh/format-num</span></code></pre></div>\n<p>Inline Demo：</p>\n<p>要製作 inline demo 很簡單，只要在你的 README.md 中加入：</p>\n<p><img src=\"/image/inlineDemoscript.png\" alt=\"Inline Demo\" title=\"Inline Demo\"></p>\n<p>你只需要在 <code class=\"language-text\">&lt;custom-element-demo></code> 中 import 你的 custom-element 即可，<code class=\"language-text\">html</code> block 內的就是你 demo 元件的地方了。</p>\n<p>以我的 README.md 來說，完成後會長這樣：</p>\n<p><img src=\"/image/final-readme.png\" alt=\"Final README\" title=\"IFinal README\"></p>\n<p>當你照著網站上所寫的，完成所有步驟後，可以到這邊去填寫 Repo 名稱並進行發佈。</p>\n<p><img src=\"/image/readyToPublish.png\" alt=\"Ready to publish\" title=\"Ready to publish\"></p>\n<p>然後你會發現發佈失敗，因為網站隱藏了一個步驟沒有寫到。</p>\n<p>他會要求你的 repo 中要含有 <code class=\"language-text\">bower.json</code>，但應該是沒有要你 register 到 bower 中，不過我有順手放上去就是了，\n所以也能透過 <code class=\"language-text\">bower install format-num</code> 來下載這個 webcomponent。</p>\n<p>總之，加上 bower.json 以後應該就能順利發佈了！</p>\n<p>此外，你也可以到 <a href=\"https://www.webcomponents.org/preview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.webcomponents.org/preview</a> 輸入你的 git repo url，就可以在發佈前先進行 preview，\n在這邊甚至能動態調整你的 inline demo！就由讀者自行玩玩吧！</p>\n<h2 id=\"work-with-react-but-failed\" style=\"position:relative;\"><a href=\"#work-with-react-but-failed\" aria-label=\"work with react but failed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Work with React but failed</h2>\n<p>製作這個 Web Component 的初衷是希望能夠透過它讓我輕鬆地放在 React 的 component 中當一般 tag 使用，因此我也嘗試了一下簡單的範例：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"ZeOLRP\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"web-component: <format-num> with React\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/ZeOLRP/\">web-component: <format-num> with React</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>但眼尖的讀者會發現，我在 html 內又再寫了一次 template...</p>\n<p>沒錯，因為再度遇到 document 存取不到 template 的 error，這次連使用 currentScript 都無法解決，我想是跟 Rect compile 的時間以及 Webcomponent script 載入執行的時間順序有關，導致存取不到正確的 docuemnt scope。</p>\n<p>當然這也只是我的猜測，若有讀者了解原因請不吝指教！</p>\n<p>在試著整合 React 的過程中也有發現，babel 在處理 extends HTMLElement 的元件上有些衝突，需要透過 <a href=\"https://github.com/github/babel-plugin-transform-custom-element-classes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-transform-custom-element-classes</a> 來解，不過沒有真正試過，畢竟我會希望 webcomponent 是獨立的，\n不需要跟 React 一起經過 babel 的 compile，而在支援 webcomponent 的 browser 上，理論上也不需要 babel 編譯 es6 的 code 才對...</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>雖然最後還是沒能順利整合進 React 當中，不過原先預期輕鬆完成的小玩具竟然還是卡了不少關，也有學習到，不過總是因為時間有限沒辦法很完整的將查到的資料認真讀完，\n或許我的實作過程與觀念的理解有錯誤的地方，歡迎讀者留言指教，我會非常感激的！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.webcomponents.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components org</a></li>\n<li><a href=\"https://www.webcomponents.org/community/articles/introduction-to-html-imports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to html import</a></li>\n<li><a href=\"http://staltz.com/react-could-love-web-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React could love web components</a></li>\n</ol>","id":"273fcb37-376d-5e10-844b-69ed092a4ef8","fields":{"slug":"webcomopnent-practice"},"frontmatter":{"date":"2017-03-04T13:34:49.000Z","title":"Web Component 實戰","tags":["web components","javascript"],"type":"tech","slug":"webcomopnent-practice"},"timeToRead":9},"next":{"excerpt":"『探索宇宙真理已經很累了，我沒有時間撒謊。』","html":"<blockquote>\n<p>『探索宇宙真理已經很累了，我沒有時間撒謊。』</p>\n</blockquote>\n<!-- more -->\n<p>Web VR 出來也很久了，但沒有去玩過，因為想說我沒有相關設備，直到前陣子看到這篇文章 <a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minecraft in WebVR with HTML Using A-Frame</a></p>\n<p>整個驚艷！</p>\n<p>隨便加幾個 tag，然後調整一下就可以有 VR 效果，這東西不試試怎麼行！說不定以後能像這篇作者一樣，在自己的婚禮上搞一套 VR 的網站！因此決定跟著<a href=\"https://aframe.io/docs/0.5.0/guides/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網範例</a>來了解一下 Web VR 到底該如何實作。</p>\n<p>一樣先看個成品：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BWMjBd\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo5\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/BWMjBd/\">webVR-test-demo5</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"a-frame\" style=\"position:relative;\"><a href=\"#a-frame\" aria-label=\"a frame permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A-frame</h2>\n<p>A-Frame 是 Mozilla VR team 為了在 browser 上利用 Javascript 提供 VR 體驗的一套 web framework，<a href=\"https://aframe.io/docs/0.5.0/guides/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官網</a> 上有很詳細的教學與介紹。\n核心基於 HTML 與 entity-component-system framework (似乎是一套遊戲上常用的 pattern，像是 Unity)，雖然我不懂遊戲，但他的概念頗簡單，<strong>\"ECS favors composition over inheritance\"</strong>。</p>\n<p>在每個場景（scene）中的每個物件（object）都是一個 <strong>entity</strong>，<strong>entity</strong> 可以想做一個物件的空殼，而該空殼的動作、行為、外觀皆是由 <strong>components</strong> 來完成。\n所以透過在場景中混搭組合各種 components 就能創造出無數種的物件，這種方式若是用繼承的方式則會需要 create 許多特殊的 class 才行。</p>\n<p>在 A-frame 中，一個 entity 就是 <code class=\"language-text\">&lt;a-entity>&lt;/a-entity></code>。</p>\n<p>而這個 entity 可以掛載上各種 component，大致的方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">AFRAME</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sun'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    degree<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">init</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when component is plugged in.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">update</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something when component's data is updated.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著就能夠在 html 中使用 sun 這個 component，<code class=\"language-text\">&lt;a-entity sun=\"degree: 5; color: yellow\">&lt;/a-entity></code>。\n（這邊比較會跟一般的 html tag 混淆，因為 tag 上看似 attribute 的東西其實是 entity 掛載的 component。）</p>\n<p>就像 Web component 一樣，A-frame 也有個 <a href=\"https://aframe.io/aframe-registry/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-Frame Registry</a> 在收集各種開發者貢獻的 component。</p>\n<p>除了 <code class=\"language-text\">&lt;a-entity>&lt;/a-entity></code> 以外，Web VR 還有許多原生原件，像是 <code class=\"language-text\">&lt;a-scene></code>、<code class=\"language-text\">&lt;a-assets></code>、<code class=\"language-text\">&lt;a-box></code> 等等。\n這些 Primitives 的 tag 也是一種 entity，主要是包含了一些複雜但是 common 的元件（像是 <a-sky>，用來代表場景中的天空），\n以 <code class=\"language-text\">&lt;a-box></code> 為例，其實就是一個包含 geometry 與 material components 的 entity：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>entity id<span class=\"token operator\">=</span><span class=\"token string\">\"box\"</span> geometry<span class=\"token operator\">=</span><span class=\"token string\">\"primitive: box\"</span> material<span class=\"token operator\">=</span><span class=\"token string\">\"color: red\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>entity<span class=\"token operator\">></span></code></pre></div>\n<p>也可以透過 <code class=\"language-text\">AFRAME.registerPrimitive</code> 的方式來註冊：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">AFRAME</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-wave'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Attaches the wave component by default.</span>\n  <span class=\"token comment\">// And smartly makes the wave parallel to the ground.</span>\n  defaultComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    wave<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    rotation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Maps HTML attributes to wave component's properties.</span>\n  mappings<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token operator\">:</span> <span class=\"token string\">'wave.width'</span><span class=\"token punctuation\">,</span>\n    depth<span class=\"token operator\">:</span> <span class=\"token string\">'wave.depth'</span><span class=\"token punctuation\">,</span>\n    density<span class=\"token operator\">:</span> <span class=\"token string\">'wave.density'</span><span class=\"token punctuation\">,</span>\n    color<span class=\"token operator\">:</span> <span class=\"token string\">'wave.color'</span><span class=\"token punctuation\">,</span>\n    opacity<span class=\"token operator\">:</span> <span class=\"token string\">'wave.opacity'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>這樣就有一個 Primitives 元件可用，<code class=\"language-text\">&lt;a-wave color=\"aqua\" depth=\"100\" width=\"100\">&lt;/a-wave></code></p>\n<p>其中可以看到我們有 <code class=\"language-text\">defaultComponents</code> 與 <code class=\"language-text\">mappings</code> 兩個 properties 可以用，分別讓你設置這個 entity 的 default component 與 將 HTML 的 attribute 映射到你自定義的 component 的屬性中，\n向這邊就是將 html 的 width 映射到 wave 這個 component 的 width 屬性。</p>\n<p>更詳細內容可以參考官網 <a href=\"https://aframe.io/docs/0.5.0/primitives/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">primitives</a></p>\n<h2 id=\"our-first-web-vr-scene-skeleton\" style=\"position:relative;\"><a href=\"#our-first-web-vr-scene-skeleton\" aria-label=\"our first web vr scene skeleton permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our first Web VR Scene (Skeleton)</h2>\n<p>接下來從實作一個最簡單的 Web VR Scene 來一步步認識 Web VR 的一些基礎元件。</p>\n<p>Web VR 的基礎骨幹：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://aframe.io/releases/0.5.0/aframe.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">&lt;a-scene></code> 會 setup 一切 VR 所需的東西，並包含所有 entities，包含 WebGL, canvas, camera 等等，另外還有一些針對不同平台的 WebVR support，一個 out of box 的 magic tag！\n加上這個以後，整個 html 就會變成 WebVR 的骨幹了，你在 codepen 上的話就會看到右下角有個眼鏡的圖示。（當然記得要載入 aframe.js）</p>\n<p>接著，我們需要瞭解一下在 A-frame 的世界中的座標系統，採用所謂的 <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">right-hand rule</a></p>\n<p><img src=\"/image/right-hand-rule.png\" alt=\"Right-hand rule\" title=\"Right-hand rule\"></p>\n<p>在 WebVR API 回傳的距離資料以 Meter 為單位，因此在 A-frame 中的距離單位也是 Meter，所以當你在設計你的 WebVR project 時要注意一下，<code class=\"language-text\">height: 10</code> 跟 <code class=\"language-text\">width: 10</code> 在一般開發 web 來說好像很小，\n但在 A-frame 中可是會超大。</p>\n<h2 id=\"add-entity\" style=\"position:relative;\"><a href=\"#add-entity\" aria-label=\"add entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Entity</h2>\n<p>再來我們可以在 <code class=\"language-text\">&lt;a-scene></code> 中加入 <code class=\"language-text\">&lt;a-cylinder color=\"red\">&lt;/a-cylinder></code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>當你放上去以後應該會覺得奇怪，怎麼什麼都看不到，轉動了一下才發現東西在你腳下ＸＤ\n原因很簡單，我們沒有設定 postion，所以 x, y, z 軸都是 0。根據 right-hand rule，我們可以給 position component 一些參數，另外還可以進行 rotation 與 scale：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此應該就能看到如下結果：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"MpLwKa\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo1\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/MpLwKa/\">webVR-test-demo1</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>Note：這邊岔開介紹一下 codepen 上的 WebVR 功能，點選右下角眼鏡可以進入全 VR 環境，在電腦上 default 的控制是用滑鼠拖拉，或是 WASD 控制，如果你有 VR headset 就能更直接的體驗。</p>\n<h2 id=\"add-background\" style=\"position:relative;\"><a href=\"#add-background\" aria-label=\"add background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Background</h2>\n<p>我們可以透過 <code class=\"language-text\">&lt;a-sky>&lt;/a-sky></code> 來增加背景，裡面可以單純設置顏色、360度的影片或照片</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>a<span class=\"token operator\">-</span>sky src<span class=\"token operator\">=</span><span class=\"token string\">\"http://i.imgur.com/JHZjdp6.jpg\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">-</span>sky<span class=\"token operator\">></span></code></pre></div>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"yMZNXO\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/yMZNXO/\">webVR-test-demo2</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>這樣我們就有一個漂浮在城市空中的圓柱體了 XD  (<a href=\"http://www.nwicon.com/seattle-view-from-the-top-of-the-space-needle.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a>)</p>\n<h2 id=\"asset-management-system\" style=\"position:relative;\"><a href=\"#asset-management-system\" aria-label=\"asset management system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asset Management System</h2>\n<p>在 A-frame 裡面有個 <code class=\"language-text\">&lt;a-assets></code>，用來管理所有 Entity 的 assets 資源，與其直接寫在 inline 裡面在 runtime 時讀取，透過定義在 <code class=\"language-text\">&lt;a-assets></code> 中可以讓 Browser 更輕易地做 cache，而 A-frame 會保證在 render 之前就把這些資源都載好，因此官方建議使用這種方式來處理圖片等 assets。</p>\n<p>用法很簡單，在 <code class=\"language-text\">&lt;a-assets></code> 中宣告 <code class=\"language-text\">&lt;img></code>，然後設定好 id，接著在想使用該 asset 的 entity 中的 src 指定對應 id 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-assets</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>skyTexture<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://i.imgur.com/JHZjdp6.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-assets</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-sky</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#skyTexture<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-sky</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"more-entity-ground-light-animation\" style=\"position:relative;\"><a href=\"#more-entity-ground-light-animation\" aria-label=\"more entity ground light animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More entity (Ground, Light, Animation)</h2>\n<h3 id=\"ground--light\" style=\"position:relative;\"><a href=\"#ground--light\" aria-label=\"ground  light permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ground &#x26; Light</h3>\n<p>基本的場景除了天空以外，當然還要有地板、燈光，地板其實有很多種選擇，可以用 <code class=\"language-text\">&lt;a-plane></code>，也能用 <code class=\"language-text\">&lt;a-cylinder></code>，只要設置對的高度跟方位即可。\n以 <code class=\"language-text\">&lt;a-plane></code> 來說，因為他 defalut 的角度是與 XY 平行，因此我們要將 X 軸反轉九十度，讓他與 XZ 平行：</p>\n<p><code class=\"language-text\">&lt;a-plane src=\"#groundTexture\" rotation=\"-90 0 0\" width=\"30\" height=\"30\">&lt;/a-plane></code></p>\n<p>另外場景中很重要的燈光，在目前的例子中，我們都沒有特別設定，A-frame 會自己幫我們定義一個 ambient light 和 directional light，一旦我們有了自己的設定，default 值就會被拔掉。</p>\n<p>基本有兩種燈光可以設定：</p>\n<ul>\n<li>ambient: 針對整個 scene 的燈光設定</li>\n<li>point: 像是一個電燈泡，我們可以調整其位置與強度，讓 entity 上的光影效果因應距離與角度的不同有所變化。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-light</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ambient<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#445451<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-light</span><span class=\"token punctuation\">></span></span>\n    // intensity 為強度 2 距離在 x y z: 2 4 4 的燈泡\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-light</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>point<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">intensity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2 4 4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-light</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"animation\" style=\"position:relative;\"><a href=\"#animation\" aria-label=\"animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animation</h3>\n<p>A-frame 有內建的 <a href=\"https://aframe.io/docs/0.5.0/core/animations.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">animation system</a>，要使用很簡單，加上 <code class=\"language-text\">&lt;a-animation></code> 即可（文件上寫說這個 entity 將被取代，不過在我寫文的當下，該 issue 從 aframe 的 milestone 拔除了，所以還需要再觀察看看。）</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 60 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>是的，A-frame 中的 entity 可以有 child，而 child 會擁有 parent 設定的位置與角度等等，A-frame 會幫你處理好。</p>\n<p>這邊我們的動畫讓 <a-cylinder> 改變 rotation，到 30 60 45，也就是往 Y 軸轉動到 60 度，方向是 alternate，兩秒內做完，並且不斷 repeat。\n如果要多個動畫，就再加上一個 <a-animation>。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cylinder</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 45 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 1 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30 60 45<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-animation</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>position<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 2.2 -5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">direction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alternate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2000<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">repeat</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-animation</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cylinder</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>現在我們的圓柱體會上下左右旋轉移動了！</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"aJXvZa\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo3\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/aJXvZa/\">webVR-test-demo3</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"add-user-interation\" style=\"position:relative;\"><a href=\"#add-user-interation\" aria-label=\"add user interation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add user interation</h2>\n<p>VR 如果不能互動，還有什麼意義嗎？</p>\n<p>雖然我們沒有 VR 設備，但 A-frame 有提供給 Desktop 的開發者一個好用的內建 component <code class=\"language-text\">&lt;a-cursor></code>，用來模擬 controllers，我們要讓 controller 固定在 camera 的中間，也就是跟著我們的眼睛，\n只要當作 child 放在 <a-camera> 底下即可。\n(cursor 可以監聽的事件在此 <a href=\"https://aframe.io/docs/0.5.0/components/cursor.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aframe.io/docs/0.5.0/components/cursor.html</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-camera</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-cursor</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-cursor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-camera</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>如此一來我們就可以用滑鼠來做點擊的動作。</p>\n<p>要讓場景中的物件跟隨我們的點擊有所反應的話，有兩種做法：</p>\n<ul>\n<li>\n<p>Event Listener Component:\n如同一般我們在 Web 當中一樣，用 javascript 去 querySelector 出 object，接著加上 EventListener：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n        <span class=\"token keyword\">const</span> cylinderEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a-cylinder'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cylinderEl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseenter'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cylinderEl<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scale'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>也可以設置一個 component 然後 attach 到 Entity 上：\n<code class=\"language-text\">js\n        &lt;script>\n            AFRAME.registerComponent('scale-on-mouseenter', {\n                schema: {\n                    to: {default: '2.5 2.5 2.5'}\n                },\n                init: function () {\n                    var data = this.data;\n                    // 在這邊設定 listener\n                    this.el.addEventListener('mouseenter', function () {\n                        this.setAttribute('scale', data.to);\n                    });\n                    this.el.addEventListener('mouseleave', function () {\n                        this.setAttribute('scale', data.leave);\n                    });\n                }\n            });\n        &lt;/script></code>\n<code class=\"language-text\">html\n        &lt;!-- 掛載一個 sacle-on-mouseenter component 上去 -->\n        &lt;a-cylinder color=\"red\" position=\"0 2 -5\" rotation=\"30 100 0\" scale=\"1 1 1\" height=\"0.2\"\n            scale-on-mouseenter=\"to: 2.2 2.2 2.2\">\n            &lt;a-animation attribute=\"rotation\" to=\"30 90 90\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"position\" to=\"0 2.2 -5\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n        &lt;/a-cylinder></code></p>\n</li>\n<li>Animating on Event:\n另一種方式很簡單，是直接設定 Event 到 <a-animation> 上頭，但你就少了一些自由操作的彈性：\n<code class=\"language-text\">html\n        &lt;a-cylinder color=\"red\" position=\"0 2 -5\" rotation=\"30 100 0\" scale=\"1 1 1\" height=\"0.2\"\n            scale-on-mouseenter=\"to: 2.2 2.2 2.2\">\n            &lt;a-animation attribute=\"rotation\" to=\"30 90 90\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"position\" to=\"0 2.2 -5\" direction=\"alternate\" dur=\"2000\"\n            repeat=\"indefinite\">&lt;/a-animation>\n            &lt;a-animation attribute=\"scale\" begin=\"mouseenter\" dur=\"300\" to=\"2.2 2.2 2.2\">&lt;/a-animation>\n            &lt;a-animation attribute=\"scale\" begin=\"mouseleave\" dur=\"300\" to=\"1 1 1\">&lt;/a-animation>\n            &lt;a-animation attribute=\"rotation\" begin=\"click\" dur=\"2000\" to=\"30 405 0\">&lt;/a-animation>\n        &lt;/a-cylinder></code></li>\n</ul>\n<p>中間的點（cursor）移入與移出圓柱體時會放大縮小，點擊時會旋轉：</p>\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"BWMjBd\" data-default-tab=\"html,result\" data-user=\"arvin0731\" data-embed-version=\"2\" data-pen-title=\"webVR-test-demo5\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/arvin0731/pen/BWMjBd/\">webVR-test-demo5</a> by Arvin (<a href=\"http://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n<p>到目前為止學到的東西其實已經足夠我們回去最開始我提及的那篇文章 <a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://css-tricks.com/minecraft-webvr-html-using-frame/</a> 深入閱讀，\n大部分的內容在我這篇都有涵括到了，但透過閱讀該篇文章可以更了解如何利用 reusable 的 component 製作出一個 VR 的 Minecraft！並且裡面還有教你怎麼要設置 Vive, Oculus 的 controller，很推薦閱讀！</p>\n<p>最後，再告訴大家一個好康，A-frame 有提供 Inspector<a href=\"https://github.com/aframevr/aframe-inspector\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a>！而且只要在你的 html 加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-scene</span> <span class=\"token attr-name\">inspector</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url: https://aframe.io/releases/0.3.0/aframe-inspector.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Scene... --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-scene</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>接著按下 <code class=\"language-text\">&lt;ctrl> + &lt;alt> + i</code>，就可以看到如下畫面了！</p>\n<p><img src=\"/image/vr-inspector.png\" alt=\"aframe-inspector\" title=\"aframe-inspector\"></p>\n<p>A-frame 使用起來真的很簡單方便，大家都來玩玩看吧！</p>\n<p>這邊有瀏覽器支援度：<a href=\"https://webvr.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webvr.rocks/</a></p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://aframe.io/docs/0.5.0/guides\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A-frame.io</a></li>\n<li><a href=\"https://css-tricks.com/minecraft-webvr-html-using-frame/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minecraft webVR using A-frame</a></li>\n<li><a href=\"https://mozvr.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla VR</a></li>\n<li><a href=\"https://webvr.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webvr.rocks</a></li>\n<li><a href=\"https://www.gamedev.net/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding Component-Entity-Systems</a></li>\n</ol>","id":"0bb61284-5578-5bf4-866b-3d4ea6314a54","fields":{"slug":"web-vr-101"},"frontmatter":{"date":"2017-04-01T17:12:25.000Z","title":"Web VR 初探","tags":["web vr","javascript"],"type":"tech","slug":"web-vr-101"},"timeToRead":12},"type":"tech"}},"staticQueryHashes":["2123680655"]}