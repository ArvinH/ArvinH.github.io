{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/css-grid-art-generator","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/ukNOaKeUEQY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - Awkward</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ukNOaKeUEQY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前陣子 netflix 上了最新一季的夜魔俠，其中的反派角色很愛在家中擺設畫作，有了藝術品襯托，壞人在我的腦海裡突然就變成看似很有深度的角色。這讓我覺得應該也該擺點畫作在家裡，看看能不能提高自己的層次。</p>\n<p>而宅宅如我當然無法做如此的投資，不過如果能夠自己用 Web 技術產生一些藝術作品，然後投影在家中呢？應該很酷吧！\n然後就在 codepen 上發現了一個有趣的東西：</p>\n<p data-height=\"416\" data-theme-id=\"29194\" data-slug-hash=\"XZqwaq\" data-default-tab=\"result\" data-user=\"jh3y\" data-pen-title=\"Randomly generate Mondrian Art with CSS Grid + Vue 🎨\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/jh3y/pen/XZqwaq/\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a> by Jhey (<a href=\"https://codepen.io/jh3y\">@jh3y</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來煞有其事啊！原來簡單利用 CSS Grid 就能排出這樣的藝術圖畫！ 查了一下這叫做蒙德里安 (mondrian art)。</p>\n<p>臨摹也算是一種學習，原作者是使用 Vue.js 與 Stylus 製作，今天我們就簡單利用 React 來重新實作一次並說明原理吧！</p>\n<h2 id=\"css-grid-小複習\" style=\"position:relative;\"><a href=\"#css-grid-%E5%B0%8F%E8%A4%87%E7%BF%92\" aria-label=\"css grid 小複習 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid 小複習</h2>\n<p>如果有不了解 CSS Grid 的讀者，可以先去看我先前寫的介紹 - <a href=\"https://blog.techbridge.cc/2017/02/03/css-grid-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">與 CSS Grid 的第一次接觸</a> 或是很完整的 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a>。</p>\n<p>這邊簡單總結一下 CSS Grid 的特性：</p>\n<p>相比於 <code class=\"language-text\">Flexbox</code> 是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 可以理解為 <code class=\"language-text\">two-dimentional layout solution</code>。</p>\n<p>也就是說，你能夠在二維平面上，透過網格系統來擺放你的元件位置。</p>\n<p>現在最新版的 Chrome 與 Firefox 都已經支援 CSS Grid Layout 了，並且在 devtool 中能清楚看到網格狀態：</p>\n<p><img src=\"/image/css-grid-in-devtools.png\" alt=\"css grid in devtools\"></p>\n<h2 id=\"實作前的小分析\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E5%89%8D%E7%9A%84%E5%B0%8F%E5%88%86%E6%9E%90\" aria-label=\"實作前的小分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作前的小分析</h2>\n<p>不管你對 CSS Grid 有沒有概念，看了上面的圖應該也很快可以猜出其原理。</p>\n<p>主要就是讓整個 <code class=\"language-text\">container</code> 切割成數個小方塊，接著隨機產生出多個區塊，每個區塊隨機橫跨不同的行數與列數，並填上不同顏色，將 <code class=\"language-text\">container</code> 填滿即可。</p>\n<p>有點像是七巧板的感覺，只是我們的板子都是矩形~ 不過聽起來簡單，實作上還是有些細節需要注意的。</p>\n<h1 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作！</h1>\n<p>第一步是先定義出我們這幅畫作的畫框，也就是 CSS Grid 中的 <code class=\"language-text\">container</code>，透過這個 <code class=\"language-text\">container</code> 來定義好整個網格系統：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.MondrainArt</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px solid #070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"grid\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"250px\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這裡面發生了幾件事情：</p>\n<p>我們用 <code class=\"language-text\">grid-template-columns</code> 與 <code class=\"language-text\">grid-template-rows</code> 先規範我們的 container 內要有多少欄與列，以及每格的長寬。</p>\n<p>由於每個格子的大小我們要固定，所以使用 <code class=\"language-text\">repeat()</code>，並且採用 <code class=\"language-text\">&lt;auto-repeat> values</code> 的語法，這樣做的好處是我們只要固定好 <code class=\"language-text\">container</code> 的寬高，不用去限制 grid 的 column 數與 row 數，讓 CSS Grid 幫我們計算出不會 overflow 的數目。<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN: repeat()</a></p>\n<p>至於要用 <code class=\"language-text\">auto-fit</code> 或是 <code class=\"language-text\">auto-fill</code>， 在這邊的例子中其實都可以，因為這兩者的差別主要在於寬度改變時，針對多出的空間在運用上有不同的方式：</p>\n<p>以 <code class=\"language-text\">auto-fit</code> 來說，視覺上的效果是會將原本 column 內的 item 寬度都平均拉長，但實際上還是有新增 column 數，只是因為 content 是空的，所以空間被壓縮了：</p>\n<p><img src=\"/image/auto-fit.gif\" alt=\"auto-fit\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>而 <code class=\"language-text\">auto-fill</code> 則是不管是否有新的 content 在，新增的 column 數都會佔有一樣的空間大小，並不會去延伸原有 item 的寬度：</p>\n<p><img src=\"/image/auto-fill.gif\" alt=\"auto-fill\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>接著，利用 <code class=\"language-text\">gap: 10px 10px</code> 設定好每個格子間的空隙；然後給定一個固定的寬高並將 overflow hidden 起來。</p>\n<p>到這邊為止，我們可以先在 <code class=\"language-text\">container</code> 內放入數個 grid item，然後每個 item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 皆設置為 <code class=\"language-text\">span 1</code>，也就是都只占 grid 的中的一個單位。如此一來就能看到目前的格子樣式：</p>\n<iframe src=\"https://codesandbox.io/embed/ww21ow2nvl\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"隨機產生不同大小的區塊\" style=\"position:relative;\"><a href=\"#%E9%9A%A8%E6%A9%9F%E7%94%A2%E7%94%9F%E4%B8%8D%E5%90%8C%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%80%E5%A1%8A\" aria-label=\"隨機產生不同大小的區塊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>隨機產生不同大小的區塊</h2>\n<p>有了基礎的格子後，看起來我們接著只要把目前 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 改造一下就大功告成了吧!?</p>\n<p>馬上來試試！</p>\n<p>首先，先做點數學，我們剛剛設定每個格子是 <code class=\"language-text\">50px</code>，而每個格子的間距 <code class=\"language-text\">gap</code> 為 <code class=\"language-text\">10px</code>，而寬度為 <code class=\"language-text\">250px</code>，所以每一個 <code class=\"language-text\">row</code> 最多就是 <code class=\"language-text\">4</code> 個格子。（用肉眼看上圖其實就知道了...）</p>\n<p>為什麼要算這個呢？</p>\n<p>因為我們要讓 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 隨機分配，但要在正確的範圍內，更改上面範例內的 <code class=\"language-text\">generateBlocks()</code> 如下，並加上個 <code class=\"language-text\">colorMap</code> 來隨機分配顏色：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(242, 245, 241)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(214, 0, 20)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">generateBlocks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blocks-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        gridColumn<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        gridRow<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        backgroundColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorMap<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以得到以下結果：</p>\n<iframe src=\"https://codesandbox.io/embed/934p8px7pw\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>疑？好像跟想像不太一樣？</p>\n<p>的確是隨機產生了橫跨不同欄位數的區塊，但是大小好像不太對啊！</p>\n<p>那是因為我們沒辦法保證隨機產生的 grid-area 都能剛剛好接續著各自的起始點排滿滿的，所以可能發生下列情況：</p>\n<p><img src=\"/image/auto-col-row.png\" alt=\"auto-col-row\"></p>\n<p>在右下角實際產生的黃色區塊前，<code class=\"language-text\">row5</code> 與 <code class=\"language-text\">row6</code> 的位置實際上是空的，所以 grid layout 會將其當作為高度 0 的 item。</p>\n<p>好在，我們可以利用 <code class=\"language-text\">grid-auto-columns</code> 與 <code class=\"language-text\">grid-auto-rows</code> 來解決！<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p>我們在 <code class=\"language-text\">container</code> 加上以下設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">grid-auto-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>這樣就會讓 grid layout 知道空的欄位我們想要自動填補上 <code class=\"language-text\">50px</code> 的大小。</p>\n<p>基本上到此為止就完成了一個不錯的版本：</p>\n<p><img src=\"/image/no-fill-algo.png\" alt=\"no-fill-algo\"></p>\n<p>但總還是覺得怪怪的，好像“不夠密”。</p>\n<p>有些區塊如果能換個位置似乎會好看一點？</p>\n<p>由於我們並沒有明確指定每個區塊在 grid 中的確切位置，grid layout 會採用一個 <code class=\"language-text\">auto-placement algorithm</code> 來擺放，而我們能透過 <code class=\"language-text\">grid-auto-flow</code> 這個屬性來更改其排放的規則。<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p><code class=\"language-text\">grid-auto-flow</code> 有 <code class=\"language-text\">row</code>, <code class=\"language-text\">column</code> 與 <code class=\"language-text\">dense</code> 這三種值可以設置，從字面上來看就能理解各自代表的意思，如果你設定為 <code class=\"language-text\">row</code> 或 <code class=\"language-text\">column</code>，那 grid layout 會盡量幫你的 item 照著列與行的方向照順序排放；而 <code class=\"language-text\">dense</code> 則是會盡量把空間塞滿，小的 item 就可能會先排在大的 item 之前，跟你在 html dom 上的排放位置可能有所落差，對於 accessibility 並不好，但以我們的 case 來說，不需要考慮那些，就大膽採用 <code class=\"language-text\">dense</code> 就對了！</p>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p>最後我們可以再加上一點點動畫效果，讓 react component 每五秒重新 render 一次新的圖案，這樣投放出來以後，就好像你有一幅不斷自行變化的藝術品一般了！</p>\n<iframe src=\"https://codesandbox.io/embed/420rv1v86w\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>有趣的作品實作起來可能原理很簡單，但也是有一些眉眉角角需要注意。透過這次的實作，重新複習了一次 CSS Grid 的好處與用法，也期許自己未來能夠有更多的時間去思考與創造這樣的作品！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"https://codepen.io/jh3y/pen/XZqwaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","fields":{"slug":"css-grid-art-generator"},"frontmatter":{"title":"用 CSS Grid 創造蒙德里安藝術","date":"11-15-2018","tags":["css","grid","mondrian","react"]},"timeToRead":7}},"pageContext":{"slug":"css-grid-art-generator","prev":{"excerpt":"好歌分享：Massive fusion","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/hB_QW-wDR1k\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Massive fusion</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/hB_QW-wDR1k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>在前端的世界中，如何優化 performance 一直都是很重要的議題，也常常被拿來當作評斷前端工程師能力的一個依據。效能調教有許多方面可以探討，但最主要的重點就是希望使用者在操作網站時，不會感受到頁面跳動，尤其是當網站有動畫效果時，些微的跳動就會引起使用者注意。</p>\n<p>大概在去年的時候，同事為了解決 CSS Animation 在頁面上的不順暢，研究了不少 hack 技巧，其中一個讓我覺得很特別的就是今天的主角：FLIP。</p>\n<p>FLIP 技巧已經出來好幾年了，但我也是去年才知道，今天這篇算是個複習與回顧，順便分享給還不知道此技巧的讀者。</p>\n<h2 id=\"什麼是-flip為什麼我們需要它\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-flip%E7%82%BA%E4%BB%80%E9%BA%BC%E6%88%91%E5%80%91%E9%9C%80%E8%A6%81%E5%AE%83\" aria-label=\"什麼是 flip為什麼我們需要它 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 FLIP？為什麼我們需要它？</h2>\n<p>在開始介紹 FLIP 之前，必須先說明一下我們在製作 CSS 動畫時，可能會遭遇的效能問題。</p>\n<p>舉例來說，今天我們想要製造一個如下效果的動畫：</p>\n<p><img src=\"/image/flip-bad-sample.gif\" alt=\"Bad animation\">\n<a href=\"https://codepen.io/arvin0731/pen/wYXJdv\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code link</a></p>\n<p>我們通常會需要調整 DOM 元素的位置與大小，而這類的操作會造成瀏覽器偵測到潛在的 Layout 改變，而重新從 pixel pipeline 的 Layout 階段開始 reflow 與 repaint，若同時在這階段進行其他 js 操作或是頁面互動，就會降低 fps，也就代表著頁面可能會掉幀，造成視覺上的跳動。</p>\n<p>當然在目前硬體設備越來越強大的狀態下，其實像上圖中的動畫很難會有問題，但若是背後有其他繁重的 js 在運作，還是有可能出現下面這樣的 fps 狀態：</p>\n<p><img src=\"/image/flip-bad-jank.png\" alt=\"Jank FPS\"></p>\n<p>解決方法通常就是要想辦法將這類花費昂貴的動畫改用 <code class=\"language-text\">transform</code>、<code class=\"language-text\">opacity</code> 來製作，讓動畫的進行能在 Composite 階段進行即可，不須動到 Layout。</p>\n<p>這時候就可以引入 FLIP 技巧來幫忙了！透過 FLIP 可以將那些會導致 Layout 更動的動畫，轉成以 <code class=\"language-text\">transform</code> 這樣的屬性來達成。</p>\n<h2 id=\"flip\" style=\"position:relative;\"><a href=\"#flip\" aria-label=\"flip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FLIP</h2>\n<p>如果你直接 google 搜尋 FLIP，可能會查到滑板教學；搜尋 FLIP CSS，應該會出現卡片翻轉的動畫教學。</p>\n<p>那到底 FLIP 跟網頁動畫的優化有什麼關係呢？</p>\n<p>FLIP 其實是四個字的組合：<strong>F</strong>irst, <strong>L</strong>ast, <strong>I</strong>nvert, <strong>P</strong>lay：</p>\n<ul>\n<li><strong>F</strong>irst：在 FLIP 技巧中，我們需要先記錄下動畫元件的初始狀態。</li>\n<li><strong>L</strong>ast：接著進行一些運算後，套用動畫的最終狀態在動畫元件上，並且將完成動畫後的狀態記錄下來。</li>\n<li><strong>I</strong>nvert：FLIP 最主要的 hack 就是發生在這個階段。根據前兩個步驟，我們可以知道該動畫物件在動畫期間的位置變化，接著利用 <code class=\"language-text\">transform</code> 與 <code class=\"language-text\">scale</code>，將物件從動畫結尾位置移動回初始狀態的地點。</li>\n<li><strong>P</strong>lay：在最後的步驟時，元件已經被我們 <code class=\"language-text\">transform</code> 回起始點了，這時只要將 <code class=\"language-text\">transform</code> 屬性移除，並加上 <code class=\"language-text\">transition</code> 的效果，我們就能完美的消除原先昂貴的 Layout change，改以能擁有獨自 Layer 的 <code class=\"language-text\">transform</code> 來處理動畫效果。</li>\n</ul>\n<p>文字敘述可能不夠好懂，<a href=\"https://twitter.com/davidkpiano\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid</a> 做的這個範例應該就能非常清楚的說明 FLIP 原理：</p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"EbwrQQ\" data-default-tab=\"result\" data-user=\"davidkpiano\" data-pen-title=\"How the FLIP technique works\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/davidkpiano/pen/EbwrQQ/\">How the FLIP technique works</a> by David Khourshid (<a href=\"https://codepen.io/davidkpiano\">@davidkpiano</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>解釋起來其實會發現跟 FLIP 這個字其實也是很吻合的，把元件從結束狀態 ”翻“ 回初始狀態。</p>\n<p>看到這邊可能會有些人覺得困惑，為什麼要這麼麻煩，不能直接用 <code class=\"language-text\">transform</code> 搭配 <code class=\"language-text\">transition</code> 將元件移動至結束位置嗎？</p>\n<p>的確是可以，但如果你今天是要優化原先寫好的動畫，變成要重新手動計算 <code class=\"language-text\">transform</code> 的位置與 <code class=\"language-text\">scale</code> 的比例，是件麻煩的事，倒不如讓瀏覽器幫你處理這部分的計算，只要算出起點與終點位置的差異即可。</p>\n<p>此外，將元件先移至結束位置，再 <code class=\"language-text\">transform</code> 回去起點的方式，可以讓瀏覽器先知道這個動畫會走的過程，據說有助於更快的處理動畫。（但我沒有實際測試過，並非百分百確定有這種效果，也歡迎大家幫忙補充！）</p>\n<h2 id=\"接著我們實際做做看\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E8%91%97%E6%88%91%E5%80%91%E5%AF%A6%E9%9A%9B%E5%81%9A%E5%81%9A%E7%9C%8B\" aria-label=\"接著我們實際做做看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接著我們實際做做看</h2>\n<p>依照 FLIP 原則，我們將一開始的動畫做點調整：</p>\n<ul>\n<li><strong>F</strong>irst：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Fisrt: 記錄初始狀態</span>\n<span class=\"token keyword\">const</span> collapsed <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>L</strong>ast：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 進行運算, 套用動畫結尾的 css style</span>\nelem<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Last: 紀錄結束狀態</span>\n<span class=\"token keyword\">const</span> expanded <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>I</strong>nvert：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// INVERT</span>\n<span class=\"token comment\">// 根據在 F 與 L 紀錄的位置，我們算出其位置差距 (top 與 left)</span>\n<span class=\"token keyword\">const</span> invertedTop <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedLeft <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>left <span class=\"token operator\">-</span> expanded<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 大小的部分則是用寬高差去計算 scale 的比例</span>\n<span class=\"token keyword\">const</span> invertedWidth <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> invertedHeight <span class=\"token operator\">=</span> collapsed<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> expanded<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 設定 transform origin，代表動畫要從哪裡開始</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transformOrigin <span class=\"token operator\">=</span> <span class=\"token string\">'top left'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 將算好的差距 apply 到 transform 屬性上</span>\n<span class=\"token comment\">// 這樣就能將元件 ”翻“ 回初始位置</span>\nelem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'translate('</span> <span class=\"token operator\">+</span> invertedLeft <span class=\"token operator\">+</span> <span class=\"token string\">'px, '</span> <span class=\"token operator\">+</span> invertedTop <span class=\"token operator\">+</span> <span class=\"token string\">'px) scale('</span> <span class=\"token operator\">+</span> invertedWidth <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> invertedHeight <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>P</strong>lay：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// PLAY</span>\n<span class=\"token comment\">// 利用 Raf，在下個 frame 開始時再做動畫</span>\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 設定 transition，並移除 transform，讓他再 \"翻\" 到結尾位置</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">'550ms ease-out'</span><span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transitionend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transition <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>經由 FLIP 技巧調整過後的動畫：</p>\n<p data-height=\"713\" data-theme-id=\"dark\" data-slug-hash=\"EdRwmr\" data-default-tab=\"result\" data-user=\"arvin0731\" data-pen-title=\"FLIP - good\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/arvin0731/pen/EdRwmr/\">FLIP - good</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>我一開始看到這個實作時，稍微有點困惑，覺得為什麼可以直接先加上結尾狀態的 css，而不會讓元件真正更動？</p>\n<p>原因很簡單，就在於這些動作是在瀏覽器繪製下一個 frame 之前就做完的，在瀏覽器真正過了 16ms，要開始繪圖時，我們已經 apply 了另一個繪圖需求，也就是 <code class=\"language-text\">transform</code>。所以並不會看到元間跑到結束位置的狀況。</p>\n<p>從下面這張圖應該會更好理解：</p>\n<p><img src=\"/image/flip-web-fps.png\" alt=\"FPS\">\n<a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>上排黑色箭頭代表每一次的 frame render，下排則是繪圖需求，而紅色可以想做是我們計算結尾位置的動作。可以明顯看到，在每次紅色箭頭的後面，真正開始繪圖前，都有新的繪圖需求會蓋過去，因此瀏覽器並不會渲染紅色箭頭的部分。</p>\n<p>另外這邊要注意兩件事，第一個是 F、L、I 的時間需要掌控在 <strong>100ms</strong> 之內，根據 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Paul Lewis 的 FLIP 介紹文章</a>，使用者在做了互動後，到感知動畫的發生，這中間可以有 <code class=\"language-text\">100ms</code> 的空隙，我們只要能在這 100ms 中將初始與結尾位置計算完，並翻回初始點，使用者就不會感受到任何差異。</p>\n<p><img src=\"/image/flip-user-perception.jpg\" alt=\"user perception\">\n<a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">圖片來源</a></p>\n<p>最後，在這個例子中，我需要利用 <code class=\"language-text\">transitionend</code> 這個事件，在動畫的最後把 <code class=\"language-text\">transition</code> 拿掉，否則下一次要計算動畫終點位置時 <code class=\"language-text\">elem.classList.add('expanded');</code>，就會產生 <code class=\"language-text\">transition</code> 效果，那不是我們要的。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>FLIP 技巧的概念很簡單，但實作起來的確會增加不少程式碼，但好在有不少套件可以使用，也能搭配 Web Animations API (<a href=\"https://github.com/web-animations/web-animations-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">polyfill</a>) 來開發。比較推薦的是 <a href=\"https://github.com/davidkpiano/flipping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">David Khourshid 的 flipping.js</a>，他在去年也有寫了一篇文章來介紹 <a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a>，其中還有講到如何將 FLIP 應用在兩個獨立的元件上，寫得很棒很清楚，推薦大家直接去閱讀！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/animating-layouts-with-the-flip-technique/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Animating Layouts with the FLIP Technique</a></li>\n<li><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></li>\n<li><a href=\"https://medium.com/outsystems-experts/flip-your-60-fps-animations-flip-em-good-372281598865\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your 60 FPS Animations, FLIP ’Em Good</a></li>\n<li><a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FLIP Your Animations</a></li>\n</ol>","id":"fad35fd6-9d68-5f2f-894c-29dac6638623","fields":{"slug":"flip-your-animation"},"frontmatter":{"date":"2018-10-20T17:46:57.000Z","title":"FLIP 技巧總複習","tags":["css","javascript","flip","animation"],"type":"tech","slug":"flip-your-animation"},"timeToRead":7},"next":{"excerpt":"『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』","html":"<blockquote>\n<p>『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>從 2017 年開始，我每天都會用 Google Calendar 紀錄生活，也在年底的時候利用 D3.js 與 Google api 將紀錄的資料視覺化出來做個年終回顧。（沒看過的讀者可以往這裡走：<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>）</p>\n<p>2018 當然也不例外，我依然持續記錄每天的日常，透過每週回顧自己的時間花費來調整目標與心理狀態。</p>\n<p>而既然我有了兩年的資料，不拿來比較看看就太可惜了，因此決定在我今年的最後一篇文章中，將 2017 年與 2018 年的資料做個視覺化的比較，看看我在工作、生活、娛樂以及自我進修等上面的時間調配是否有照著我去年所希望的步調進行。在一年的尾聲，好好面對自己！</p>\n<p>一樣先附上成果與 <a href=\"https://blog.arvinh.info/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a>：</p>\n<p><img src=\"/image/YearEndReview-2018_.png\" alt=\"YearEndReview-2018\"></p>\n<h2 id=\"工具\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%85%B7\" aria-label=\"工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具</h2>\n<p>工具的使用上，這次並沒有使用 D3.js，畢竟以需求來說，D3.js 太大材小用了，加上我前陣子發現一個基於 D3.js 與 React 的視覺化 library - <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a>，看起來非常不錯，所以這次就拿這套來試試看，透過這套工具，整個作品大概不用花費一小時就可以完成了，大多的時間都是在處理資料格式上。</p>\n<p>而抓取 Google Calendar 資料的部分，一樣使用 Google 的 api，只不過一年過去，Google api 也是有所更新，不過問題不大，稍微修改一些小地方即可，稍後會帶到。</p>\n<h2 id=\"視覺化的第一步取得資料\" style=\"position:relative;\"><a href=\"#%E8%A6%96%E8%A6%BA%E5%8C%96%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%8F%96%E5%BE%97%E8%B3%87%E6%96%99\" aria-label=\"視覺化的第一步取得資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>視覺化的第一步，取得資料</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>中我有提到過，雖然 Google 有提供一個 <a href=\"https://takeout.google.com/settings/takeout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Takeout</a> 的功能，你也能直接匯出日曆，但是下載到的資料其格式都是 <a href=\"https://zh.wikipedia.org/wiki/ICalendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">iCalendar</code></a>，除非你在每個紀錄的項目上都有很詳細的紀錄內容，才有辦法去將每一項 task 都進行分類，像我只用顏色來區分的就沒辦法。</p>\n<p><img src=\"/image/google-takeout.png\" alt=\"Google Takeout\"></p>\n<p>所以還是得靠 Google 提供的 Calendar API 來取得資料。</p>\n<p>而 Google Calendar API 的使用方式很簡單，只要照著<a href=\"https://console.developers.google.com/start/api?id=calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>拿到憑證後，就可以從他們提供的<a href=\"https://developers.google.com/google-apps/calendar/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a> 來修改實作。</p>\n<p>基本上跟我<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年寫的</a>差不多，主要是在 auth 的套件（拿 cretential 的方式）以及 api 回傳的 schema 有所變動：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var googleAuth = require('google-auth-library');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const { google } = require('googleapis');\n</span>// If modifying these scopes, delete token.json.\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nvar SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n<span class=\"token prefix deleted\">-</span>  process.env.USERPROFILE) + '/.credentials/';\n<span class=\"token prefix deleted\">-</span> var TOKEN_PATH = TOKEN_DIR + 'calendar-nodejs-quickstart.json';\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const TOKEN_PATH = 'token.json';</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function listEvents(auth, pageToken) {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var calendar = google.calendar('v3');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const calendar = google.calendar({version: 'v3', auth});\n</span>const queryOptions = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> auth: auth,\n<span class=\"token prefix unchanged\"> </span> calendarId: 'primary',\n<span class=\"token prefix unchanged\"> </span> timeMax: (new Date()).toISOString(),\n<span class=\"token prefix unchanged\"> </span> singleEvents: true,\n<span class=\"token prefix unchanged\"> </span> orderBy: 'startTime'\n</span>};\nif (pageToken) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> queryOptions.pageToken = pageToken;\n</span>}\ncalendar.events.list(queryOptions, function (err, response) {\nif (err) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('The API returned an error: ' + err);\n<span class=\"token prefix unchanged\"> </span> return;\n</span>}\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>var events = response.items;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const resData = response.data || {};\n<span class=\"token prefix inserted\">+</span>const events = resData.items;\n</span>if (events.length == 0) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('No upcoming events found.');\n</span>} else {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> // ...\n</span>}\n// ...\n}\n}</code></pre></div>\n<p>完整的程式碼我一樣有放在 <a href=\"https://gist.github.com/ArvinH/5960a33b54fb03d504bcba7a4d5982e5#file-fetchcalendardata-js-L86-L151\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a> 上，如果你也想要用 Google API 下載自己的 Calendar，基本上除了 <code class=\"language-text\">listEvents</code> 函數內的部分以外，都可以直接照抄，<code class=\"language-text\">listEvents</code> 內的程式碼是 API 的 callback，主要是負責後續資料的處理，將之轉化成我們視覺化所需要的格式。而關於 Calendar api 相關參數的介紹，可以參考<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年的文章</a>。</p>\n<h1 id=\"nivo\" style=\"position:relative;\"><a href=\"#nivo\" aria-label=\"nivo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nivo</h1>\n<p>接下來介紹一下 <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a> 這套工具。</p>\n<p>它是 <a href=\"https://twitter.com/benitteraphael\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Raphaël Benitte</a> 所製作，基於 D3.js 與 React.js 的視覺化套件。</p>\n<p><img src=\"/image/nivo-cover.png\" alt=\"nivo\"></p>\n<p>比起市面上其他套件，我自己認為 nivo 的優勢有幾點：</p>\n<ul>\n<li>對於 Server-side render 的支援度很高。</li>\n<li>由於支援 React SSR，nivo 提供了 api 介面，讓你能透過 http request 產生圖表 - 詳情可看 <a href=\"https://github.com/plouc/nivo-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo-api</a>。</li>\n<li>Mono repo 的方式管理 packages，可以依照需求，只安裝你需要的圖表 package。</li>\n<li>宣告式的寫法，加上他互動式的文件範例，套用他的圖表幾乎沒有學習曲線。</li>\n</ul>\n<p><img src=\"/image/nivo-bar-doc.png\" alt=\"nivo 文件網站\"></p>\n<ul>\n<li>部分元件提供 Canvas 實作的版本，大量數據也不怕！</li>\n<li>動畫部分使用 <code class=\"language-text\">react-motion</code>，寫過 react 的人應該不陌生，<code class=\"language-text\">react-motion</code> 可說是 react 動畫界的翹楚啊！</li>\n<li>每個元件都有對應的 <code class=\"language-text\">Storybook</code> 可以看，非常的 developer-friendly!</li>\n</ul>\n<p>當然也是有缺點的：</p>\n<ul>\n<li>不是每個元件都支援動畫，這時候會知道 D3.js 的好(?</li>\n<li>圖表種類固定，比較難有創意的發揮。</li>\n</ul>\n<p>基於以上的優缺點，不難看出，如果是對於不熟悉 D3.js 或是想要快速產出圖表，但又想要有動畫效果或是互動性的人來說，直接採用 nivo 這類的 library 會是很不錯的選擇，也是我這次採用的原因。</p>\n<h1 id=\"開始進行我們的圖表製作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E6%88%91%E5%80%91%E7%9A%84%E5%9C%96%E8%A1%A8%E8%A3%BD%E4%BD%9C%E5%90%A7\" aria-label=\"開始進行我們的圖表製作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行我們的圖表製作吧！</h1>\n<p>基本的想法一樣是將資料用 Calendar 圖表呈現，觀察每種類別的 task 在一年中的分佈狀況，並且加入去年的資料來做對比。</p>\n<p>接著，想利用一個折線圖來觀察單一類別在每個月的波動，是不是在某些月份我比較勤奮工作、某些月份很認真在進修或玩樂。當然這些資訊從 Calendar 圖表也看得出來，但是用月加總的數值呈現在折線圖上，感覺會更直接一點。</p>\n<p>最後在把每種類別的資料集結起來，利用 Waffle 圖表，一目瞭然各個類別的比例關係。</p>\n<p>要達成上面三個想法，我們只需要使用 nivo 的 <a href=\"https://github.com/plouc/nivo/tree/master/packages/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/calendar</a>、<a href=\"https://github.com/plouc/nivo/tree/master/packages/line\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/line</a> 與 <a href=\"https://github.com/plouc/nivo/tree/master/packages/waffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/waffle</a> 三種套件即可。</p>\n<p>使用方法都很簡單，基本上只要到對應的 doc 頁面，就直接有現成的程式碼可以<del>複製</del>參考。</p>\n<p>像是 <a href=\"https://nivo.rocks/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calendar</a>:</p>\n<p><img src=\"/image/nivo-calendar-doc.gif\" alt=\"calendar doc demo\"></p>\n<p>重點反而是資料格式，即便我們只是想繪製三種圖表，但就需要整理出三種資料格式，才能夠符合其各自的需求，一樣可以從 nivo 的 doc 中找到每個圖表所需要的資料格式（data tab）。</p>\n<p>我製作範例的 parser 放在 <a href=\"https://github.com/ArvinH/YearEndReview-2018/tree/master/src/dataParser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 上，有興趣可以參考，不過就只是一些髒髒的資料轉換，是個耗時費力的工作啊...</p>\n<p>值得一提的是，這邊我除了轉化資料格式外，還花了不少時間在做資料的整理與同步。</p>\n<p>為什麼呢？</p>\n<p>因為每天的日誌是我自己手動輸入，顏色 label 也是我自己標記，有些事項的類別在 2017 年與 2018 年我用的是不同的顏色，但卻應該是分在同類中，這在做對比時，就會有問題了，因此花了不少時間從 2017 年一月開始過到 2018 年十二月...所以如果有人想跟我一樣這樣紀錄的話，或許可以用 Calendar 內建的分類功能，而不要像我一樣用手動標記顏色的方式。</p>\n<p>總之，當資料處理好以後，照著網站範例將我們想要的元件放到頁面上即可，這邊我是直接用 CRA 製作 React SPA，其中 <code class=\"language-text\">Calendar</code> 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ResponsiveCalendar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nivo/calendar'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calendar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ResponsiveCalendar\n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>\n        from<span class=\"token operator\">=</span><span class=\"token string\">\"2017-01-01\"</span>\n        to<span class=\"token operator\">=</span><span class=\"token string\">\"2018-12-31\"</span>\n        emptyColor<span class=\"token operator\">=</span><span class=\"token string\">\"#eeeeee\"</span>\n        colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"#61cdbb\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#97e3d5\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#e8c1a0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#f47560\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        margin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"bottom\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        yearSpacing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">45</span><span class=\"token punctuation\">}</span>\n        monthBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        monthLegendOffset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n        dayBorderWidth<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n        dayBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        legends<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"anchor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bottom-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"direction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"row\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"translateY\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemHeight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemDirection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"top-to-bottom\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Calendar<span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的範例看得出來，你有許多 <code class=\"language-text\">options</code> 可以設定，像是資料的起始日期(<code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>)、資料顏色的區間或是各種 margin 等都能調整，非常方便好用。</p>\n<p>唯一要注意的是，如果採用支援 RWD 的元件（像是這邊用的 <code class=\"language-text\">ResponsiveCalendar</code>），記得要給定這個 Component 的 Parent component 固定的高度，否則 nivo 的元件偵測到高度為零時，就不會 render 了，所以記得要多加個有高度的 Wrapper 在 nivo 的元件上。</p>\n<p>其他的實作細節基本上就是 React 而已，真的有興趣<del>（想看看 code 有多鳥）</del>可以到 <a href=\"https://github.com/ArvinH/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 瞧瞧。</p>\n<h2 id=\"最後分享一下我的年終檢討\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84%E5%B9%B4%E7%B5%82%E6%AA%A2%E8%A8%8E\" aria-label=\"最後分享一下我的年終檢討 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後分享一下我的年終檢討</h2>\n<p>我記錄在 Google Calendar 上的 task，基本上分為六類：</p>\n<ul>\n<li>English - 包含上英文線上課程、背單字、唸英文等</li>\n<li>Entertainment - 所有娛樂事項</li>\n<li>Sick/Rehabilitation - 生病、做物理復健</li>\n<li>Exercise - 運動</li>\n<li>Training - 一切我認為跟加強我自身實力有關的事，有可能是看文章、寫 code 或是刷題</li>\n<li>Work - 上班</li>\n</ul>\n<p><img src=\"/image/nivo-waffle-explain.png\" alt=\"waffle\"></p>\n<p>Waffle 圖的數據是我將每個月的分類 task 加總後做平均所算出的比例。</p>\n<p>而從 Waffle 圖可以很明顯看到，2018 年我對於 <code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 這兩部分的分類，加重了不少。回想過去半年，很急切的想要有所突破，雖然我不覺得有達到我心中的努力程度，但以結果論來說，這些多出的 <code class=\"language-text\">Training</code> 或許真的幫助了我，讓我在今年達成了人生中一個小小的目標，有了<del>逃離鬼島</del>前往海外的機會。</p>\n<p>若是從 Calendar 圖與折線圖來做兩個年度的對比，感受會更深一點：</p>\n<p><img src=\"/image/review-explain.gif\" alt=\"Review\"></p>\n<p>首先，去年做完 year end review 後，我就發現假日也在工作的時間有點太多，除了有些時候的確是 project 較為忙碌，但大多是自己平日上班專注力沒有好好發揮。</p>\n<p>因此今年開始，我調整作息，除了早上運動外，也盡量在公司時保持專注，降低與社群媒體的接觸，從圖表結果來看，成效挺好的，明顯看到 2018 年的假日在 Work 這個分類，是比較空的。</p>\n<p>另外，<code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 分類的差異從 Calendar 圖表非常明顯啊！</p>\n<p>2018 我幾乎每天都有抽出一點時間學習工作外的事，持續練英文的時間也變多了！</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>在製作第一年的 Year End Review 時，只是覺得好玩，可以把紀錄一年的資料做個整理跟視覺化呈現，但到了第二年，有了對照後，好像真的可以從中看出自己一年來的成長，也在整理資料的過程中，回顧了這一年所做的事情，並反省自己的缺失。雖然整體上來說，還是覺得自己浪費了許多時間，但套句李笑來的話：『所有對於現狀的解脫，最終都只能靠積累來實現。』從現在開始繼續努力、繼續積累，活在未來！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a></li>\n</ol>","id":"35d05912-1e5e-51e9-84c6-a16c2877ea32","fields":{"slug":"dataviz-yearendreview"},"frontmatter":{"date":"2018-12-15T15:15:09.000Z","title":"用 Google Calendar 與 nivo 製作自己的年終檢討報告","tags":["data","visualization","d3","nivo","google calendar","yearend"],"type":"tech","slug":"dataviz-yearendreview"},"timeToRead":10},"type":"tech"}},"staticQueryHashes":["2123680655"]}