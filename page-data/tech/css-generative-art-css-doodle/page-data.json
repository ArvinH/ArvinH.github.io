{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/css-generative-art-css-doodle","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/jlubk5RYCAc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - 'On The Line'</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/jlubk5RYCAc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>生成藝術一直是我很想學習的主題，雖然知道大部分的人會使用 <a href=\"https://processing.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">processing</a>, <a href=\"http://paperjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper.js</a>, 或是 <a href=\"https://zimjs.com/art.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zimjs</a> 來製作 Generative art, 但在對於自己的藝術天份很有自知之明的情況下，一直都沒有去嘗試製作，再加上這些工具的學習也是有ㄧ定門檻。</p>\n<p>然而，最近在 Youtube 上看到 <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 的<a href=\"https://codepen.io/yuanchuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">作者 - 袁川</a>於 <a href=\"https://www.youtube.com/watch?v=mEpocRIc3q8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSSConf CN 2019 的演講</a>，才了解到要\"開始\"似乎沒有這麼難，只要掌握一些基本觀念與技巧即可，而且他開發的 web component <a href=\"https://css-doodle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a> 無論是語法或是使用都算易懂好上手。</p>\n<p>今天藉由這篇文章分享該演講中我很喜歡的一些重點，並試著介紹與運用 CSS/JS 和 css-doodle 製作一些簡單的生成藝術作品。</p>\n<p>先給大家看第一個小 demo，這是參照袁川在演講中提及的一個範例實作，利用純 CSS 與 JS 所製作的簡單生成藝術:</p>\n<iframe height=\"423\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample I\" src=\"https://codepen.io/arvin0731/embed/zYvbKQJ?height=423&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/zYvbKQJ'>CSS  Generative Art - sample I</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2 id=\"簡單的事重複做就不簡單\" style=\"position:relative;\"><a href=\"#%E7%B0%A1%E5%96%AE%E7%9A%84%E4%BA%8B%E9%87%8D%E8%A4%87%E5%81%9A%E5%B0%B1%E4%B8%8D%E7%B0%A1%E5%96%AE\" aria-label=\"簡單的事重複做就不簡單 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>簡單的事重複做就不簡單</h2>\n<p>在生成藝術中，<code class=\"language-text\">Loop</code> 佔了很主要的角色，需要透過迴圈的方式去自動產生圖案。而圖案其實不需要複雜，在第一個範例中的元素就只有<strong>直線</strong>。</p>\n<p>簡單的直線，透過 <code class=\"language-text\">transform: rotate()</code>，就能夠有不一樣的變化，而透過組合，將多個擁有不同狀態的直線串接在一起，再加上時間因子作為變數去改變狀態，就可以是一個簡單的生成藝術。</p>\n<p>程式碼也很簡短：</p>\n<p>先設定一個 5x5 的表格：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">div.grid\n  div\n  div\n  // 略 ... 共 25 個 div</code></pre></div>\n<p>現在利用 CSS grid 可以很輕易控制表格的呈現，接著我們可以將之後預期要來拿隨機變化的屬性以 css variable 的方式設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--theme</span><span class=\"token punctuation\">:</span> #FF9800<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--deg</span><span class=\"token punctuation\">:</span> 45deg<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">--gride-size</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grid</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--gride-size<span class=\"token punctuation\">)</span> * 5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 18px 1px <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span> inset<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--gride-size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.grid div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s ease-in<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JS 的部分就只需要在固定的 time interval 中間賦以隨機產生的數值到 CSS variable 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getRandomBoolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">16777215</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">6</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">f</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> sign <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">randomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.grid > div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  theme <span class=\"token operator\">=</span> <span class=\"token function\">randomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  divs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">div</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    sign <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getRandomBoolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span>\n    div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">skew(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sign<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">45deg)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--theme'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>theme<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以這樣的基本想法出發，就可以修改成不同的變化，像是加入 <code class=\"language-text\">clip-path</code> 來進一步操作畫面中的圖案元素：</p>\n<iframe height=\"362\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample II\" src=\"https://codepen.io/arvin0731/embed/OJyqOXZ?height=362&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/OJyqOXZ'>CSS  Generative Art - sample II</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>帶入一點數學，可以產生更多不同的 polygon：</p>\n<iframe height=\"476\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS  Generative Art - sample III\" src=\"https://codepen.io/arvin0731/embed/VwvRdXe?height=476&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/VwvRdXe'>CSS  Generative Art - sample III</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>上面這範例中我是隨便用三角函數設定一個公式來跑，但在演講中，袁川有提及 <strong>lissajous curves</strong> 這個古老的數學公式，他發現非常適合用在 <code class=\"language-text\">clip-path</code> 上頭，搭配 <code class=\"language-text\">poylgon</code> 的 <code class=\"language-text\">fill-rule</code> 屬性，可以做出以下的效果，像是許多特殊的海洋生物一般：</p>\n<p><img src=\"/image/lissajous-curve-clip-path.png\" alt=\"lissajous-curve-clip-path\">\n(出處：<a href=\"https://youtu.be/mEpocRIc3q8?t=737\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://youtu.be/mEpocRIc3q8?t=737</a>)</p>\n<h2 id=\"發揮更多想像力\" style=\"position:relative;\"><a href=\"#%E7%99%BC%E6%8F%AE%E6%9B%B4%E5%A4%9A%E6%83%B3%E5%83%8F%E5%8A%9B\" aria-label=\"發揮更多想像力 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>發揮更多想像力</h2>\n<p>妥善使用 <strong>迴圈</strong>、<strong>pattern</strong>、<strong>隨機性</strong>這三個要素，就可以有許多的創意組合，除了上面的線條和 <code class=\"language-text\">clip-path</code> 外，CSS 繪圖常用到的 <code class=\"language-text\">border-style</code>, <code class=\"language-text\">border-image</code>, <code class=\"language-text\">gradient</code>, <code class=\"language-text\">box-shadow</code> 等等都能拿來嘗試。</p>\n<p>附上幾個袁川在 codepen 上的作品：</p>\n<ul>\n<li>border-image: <a href=\"https://codepen.io/yuanchuan/pen/aQjKwO\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/aQjKwO</a></li>\n<li>background-image + linear-gradient: <a href=\"https://codepen.io/yuanchuan/pen/NLXZLm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/NLXZLm</a></li>\n<li>radial-gradient: <a href=\"https://codepen.io/yuanchuan/pen/LXPJOW\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codepen.io/yuanchuan/pen/LXPJOW</a></li>\n</ul>\n<p><img src=\"/image/yuanchuan-works.png\" alt=\"yuanchuan-works\"></p>\n<p>這只是其作品的冰山一角，有興趣的讀者可以到他的 <a href=\"https://codepen.io/yuanchuan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen</a> 上欣賞各種絢麗的畫作。</p>\n<p>像是這個用 z-index 堆疊出的城市天際線圖，不得不佩服他的創造力：</p>\n<iframe height=\"306\" style=\"width: 100%;\" scrolling=\"no\" title=\"z-index -- City \" src=\"https://codepen.io/yuanchuan/embed/MMYmqv?height=306&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/yuanchuan/pen/MMYmqv'>z-index -- City </a> by yuanchuan\n  (<a href='https://codepen.io/yuanchuan'>@yuanchuan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>另外，在袁川的演講中，讓我特別印象深刻的是他利用 <code class=\"language-text\">text-shadow</code> 的效果，將一個括號，運用在生成藝術中，你沒看錯，就是 <code class=\"language-text\">(</code> 這個括號。</p>\n<p>我找不到袁川<a href=\"https://youtu.be/mEpocRIc3q8?t=1751\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">影片</a>中的範例，但自己依照他的介紹用純 css/js 實作了一個版本：</p>\n<iframe height=\"389\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Generative Art - sample IV\" src=\"https://codepen.io/arvin0731/embed/abvMXmX?height=389&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/arvin0731/pen/abvMXmX'>CSS Generative Art - sample IV</a> by Arvin\n  (<a href='https://codepen.io/arvin0731'>@arvin0731</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>除了 <code class=\"language-text\">text-shadow</code>，上面範例中也用上了 <code class=\"language-text\">filter</code>, <code class=\"language-text\">rotation</code>, <code class=\"language-text\">font-size</code> 等等的隨機屬性變化，來生成這幅圖案。</p>\n<h2 id=\"css-doodle\" style=\"position:relative;\"><a href=\"#css-doodle\" aria-label=\"css doodle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS-Doodle</h2>\n<p>上面的範例都是用 pure css/js 完成的，但袁川其實製作了一個 web component，把許多製作 generative art 需要的一些功能幫你包好成多個函式，像是想要產生 grid，不用再到 html 內複製一大堆 div，也不用自己用 JS createElement，只要透過 css-doodle，一句話就能做到：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:doodle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@grid</span><span class=\"token punctuation\">:</span> 1x10 / 85%<span class=\"token punctuation\">;</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>css-doodle 是基於 Shadow DOM v1 和 Custom Elements v1 實作的 web component，基本上目前主流瀏覽器都能支援。</p>\n<p>像上面的例子，透過設定 css-doodle web component 的 shadow-dom 屬性，可以讓他幫你產生 grid layout 的 divs。而在 component 內除了能撰寫一般的 CSS 外，也能利用他提供的 utility function 快速達到一些 random、pick one 等等的效果。</p>\n<p>我很喜歡作者在官網上很霸氣地一句話：The limit is the limit of CSS itself.</p>\n<p>從他的作品集來看，所言不假。</p>\n<p>\bcss-doodle 的官網就是一個詳細的<a href=\"https://css-doodle.com/#usage\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使用手冊</a>，每個 function 與屬性的旁邊都有對應的實際範例幫助你理解。提供的函式說多不多，說少也不少，一個一個看完也不一定能馬上記住，還是得要在實作時邊對照查詢。</p>\n<p>所以說做中學還是最快的，今天文章最後就來解析一個袁川利用 css-doodle 製作的作品，一方面能臨摹大神的創意，另一方面也能比較深刻的了解這些函式的用法。</p>\n<h2 id=\"css-doodle-作品解析\" style=\"position:relative;\"><a href=\"#css-doodle-%E4%BD%9C%E5%93%81%E8%A7%A3%E6%9E%90\" aria-label=\"css doodle 作品解析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css-doodle 作品解析</h2>\n<p>挑一個我很喜歡的作品，非常的漂亮！</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Chasing\" src=\"https://codepen.io/yuanchuan/embed/pBrMNQ?height=265&theme-id=dark&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/yuanchuan/pen/pBrMNQ'>Chasing</a> by yuanchuan\n  (<a href='https://codepen.io/yuanchuan'>@yuanchuan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>這個作品分成兩個 component，一個是背後不斷滑落的線條，另一個是類似不斷旋轉的 DNA 螺旋。</p>\n<p>我們單就 DNA 螺旋來看，程式碼非常簡短：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:doodle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@grid</span><span class=\"token punctuation\">:</span> 45x1 / 40vmin<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50%<span class=\"token punctuation\">,</span> 33vmin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">:after, :before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span>\n  <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token atrule\"><span class=\"token rule\">@p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transparent 0\n  <span class=\"token punctuation\">)</span> \n  <span class=\"token atrule\"><span class=\"token rule\">@pn</span><span class=\"token punctuation\">(</span>30% 50%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 50% 60%<span class=\"token punctuation\">)</span> / \n  <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>.1vmin<span class=\"token punctuation\">,</span> 5vmin<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@lr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  no-repeat<span class=\"token punctuation\">;</span></span></span></span></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> centerr<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> transform<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> r 4s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-4s / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token property\">--translate</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-66vmin / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> r</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>-1turn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>要使用 css-doodle 的話，上面這段 css 是要放在 <code class=\"language-text\">&lt;css-doodle></code> component 內的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>css-doodle</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Your css --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>css-doodle</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"doodle\" style=\"position:relative;\"><a href=\"#doodle\" aria-label=\"doodle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:doodle</h4>\n<p><code class=\"language-text\">:doodle</code> 是針對 <code class=\"language-text\">&lt;css-doodle></code> 這個元素本身的 selector，範例中設定了 <code class=\"language-text\">position</code> 與 <code class=\"language-text\">z-index</code>，比較特別的是 <code class=\"language-text\">@grid</code> 的使用。</p>\n<h4 id=\"grid\" style=\"position:relative;\"><a href=\"#grid\" aria-label=\"grid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@grid</h4>\n<p><code class=\"language-text\">@grid</code> 是用來定義 css-doodle 的 grid layout，你也可以直接設定在 <code class=\"language-text\">&lt;css-doodle grid=\"5\"></code> 上，但是 <code class=\"language-text\">@grid</code> 的屬性設定會有比較高的優先權。</p>\n<p><code class=\"language-text\">@grid: 45x1 / 40vmin;</code> 代表的是 doodle size 為 <strong>41vmin</strong>，且其中有 <strong>45 x 1</strong> 的 grid。(<code class=\"language-text\">vmin</code> 代表的是當前 <code class=\"language-text\">vh</code> 與 <code class=\"language-text\">vw</code> 中最小的值)</p>\n<p>當你設定了 <code class=\"language-text\">grid</code> 後，<code class=\"language-text\">css-doodle</code> 的 <code class=\"language-text\">shadow-dom</code> 會長出類似如下的結構：</p>\n<p><img src=\"/image/css-doodle-shadowdom.png\" alt=\"css-doodle-shadowdom\"></p>\n<p>會產生一個 <code class=\"language-text\">&lt;div class=\"container\"></code>，並且在裡面產生對應你所設定的 <code class=\"language-text\">grid</code> 數量的 <code class=\"language-text\">&lt;div cell></code>。</p>\n<p>其中有個重點是，在 <code class=\"language-text\">&lt;css-doodle></code> 元件內設定的 CSS 會套用到每一個 <code class=\"language-text\">&lt;div cell></code>，以 <code class=\"language-text\">[cell]:nth-of-type(1)</code> 這樣的 css selector 把生成的 css style 個別應用到 DOM 上。</p>\n<h4 id=\"container\" style=\"position:relative;\"><a href=\"#container\" aria-label=\"container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:container</h4>\n<p><code class=\"language-text\">:container</code> 代表的是 <code class=\"language-text\">:doodle</code> 內 grid layout 的 container，也就是上面說到的 <code class=\"language-text\">&lt;div class=\"container\"></code>。範例中設置 <code class=\"language-text\">transform: translate(50%, 33vmin)</code> 也就只是把其偏移到畫面中間的位置。</p>\n<hr>\n<p>接下來的 <code class=\"language-text\">:after, :before</code> 是整個圖形的重點：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:after, :before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@place-cell</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span>\n  <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token atrule\"><span class=\"token rule\">@p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transparent 0\n  <span class=\"token punctuation\">)</span> \n  <span class=\"token atrule\"><span class=\"token rule\">@pn</span><span class=\"token punctuation\">(</span>30% 50%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 50% 60%<span class=\"token punctuation\">)</span> / \n  <span class=\"token atrule\"><span class=\"token rule\">@r</span><span class=\"token punctuation\">(</span>.1vmin<span class=\"token punctuation\">,</span> 5vmin<span class=\"token punctuation\">)</span> <span class=\"token atrule\"><span class=\"token rule\">@lr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  no-repeat<span class=\"token punctuation\">;</span></span></span></span></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"place-cell\" style=\"position:relative;\"><a href=\"#place-cell\" aria-label=\"place cell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@place-cell</h4>\n<p><code class=\"language-text\">@place-cell</code> 是用來指定 cell 相對於整個 grid layout 中的位置，在此 component 的 <code class=\"language-text\">:after, :before</code> 都設定 <code class=\"language-text\">@place-cell: center</code>，就代表 grid 中 cell 的 <code class=\"language-text\">:after</code> 與 <code class=\"language-text\">:before</code> 都置於相對於整個 grid 的中心位置。</p>\n<h4 id=\"size\" style=\"position:relative;\"><a href=\"#size\" aria-label=\"size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@size</h4>\n<p>很單純就是同時設定 <code class=\"language-text\">wdith</code> 與 <code class=\"language-text\">height</code> 的值。</p>\n<h4 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h4>\n<p>作者利用 grid 內每個 <code class=\"language-text\">&lt;div cell></code> 的 <code class=\"language-text\">:after</code> 與 <code class=\"language-text\">:before</code>，使用 <code class=\"language-text\">background</code> 與 <code class=\"language-text\">radial-gradient</code> 屬性來製造我們看到的圓點。</p>\n<p>主要使用到 <code class=\"language-text\">background-image</code>、<code class=\"language-text\">background-position-x|y</code>、<code class=\"language-text\">background-size</code>、<code class=\"language-text\">background-repeat</code> 四個屬性。</p>\n<p>如果單純取其中一個 cell 來觀察的話，會長這樣：</p>\n<p><img src=\"/image/css-doodle-cell-div-single-dot.gif\" alt=\"css-doodle-cell-div-single-dot\"></p>\n<p>若再加上 <code class=\"language-text\">css-doodle</code> 提供的一些 random (@r), pick(@p) 等 utility function，就可以造成每一個 cell div 都各自擁有兩個不同顏色、大小、位置的圓點。</p>\n<p>接下來針對 <code class=\"language-text\">background</code> 屬性所使用到的 utility function 作介紹。</p>\n<h4 id=\"p-pickv1-v2\" style=\"position:relative;\"><a href=\"#p-pickv1-v2\" aria-label=\"p pickv1 v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@p, @pick(v1, v2,...)</h4>\n<p><code class=\"language-text\">@p</code> 為 <code class=\"language-text\">@pick</code> 的 alias。它會從給定的 list 中隨機挑選數值出來：</p>\n<p><code class=\"language-text\">@p(#FFFDE1, #FB3569)</code> 就會從這兩個顏色中隨機挑選一個。</p>\n<h4 id=\"r-randstart-end\" style=\"position:relative;\"><a href=\"#r-randstart-end\" aria-label=\"r randstart end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@r, @rand(start [,end])</h4>\n<p><code class=\"language-text\">@r</code> 為 <code class=\"language-text\">@rand</code> 的 alias。接受至少一個參數，作為區間的頭與尾，它會從給定的區間中隨機挑選兩個數值。</p>\n<p>因此範例中，<code class=\"language-text\">background-image</code> 的 <code class=\"language-text\">radial-gradient</code> 屬性：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token function\">radial-gradient</span><span class=\"token punctuation\">(</span> @<span class=\"token function\">p</span><span class=\"token punctuation\">(</span>#FFFDE1<span class=\"token punctuation\">,</span> #FB3569<span class=\"token punctuation\">)</span> @<span class=\"token function\">r</span><span class=\"token punctuation\">(</span>70%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transparent 0 <span class=\"token punctuation\">)</span> </code></pre></div>\n<p>第一層的設定等同於隨機選取兩個顏色（紅、白），並從 0 ~ 70% 之間選取一個百分比數值作為大小。</p>\n<h4 id=\"pn-pick-nv1-v2\" style=\"position:relative;\"><a href=\"#pn-pick-nv1-v2\" aria-label=\"pn pick nv1 v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@pn, @pick-n(v1, v2,...)</h4>\n<p><code class=\"language-text\">@pn</code> 為 <code class=\"language-text\">@pick-n</code> 的 alias。會從給定的 list 中，一個一個取出，對應到 <code class=\"language-text\">grid</code> 中的 <code class=\"language-text\">cell</code>。</p>\n<p>以範例來說，就會依序設置 <code class=\"language-text\">cell</code> 的 <code class=\"language-text\">background-position</code> 值為 30% 50%，70% 50% 和 50% 60%。（依照我觀察，似乎不會保證依照列表的順序，但還是會一個一個對應設置到 <code class=\"language-text\">cell</code> 上）</p>\n<h4 id=\"lr-last-rand\" style=\"position:relative;\"><a href=\"#lr-last-rand\" aria-label=\"lr last rand permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@lr, @last-rand</h4>\n<p>至於 <code class=\"language-text\">background-size</code>，範例使用 <code class=\"language-text\">@r(.1vmin, 5vmin) @lr()</code>，其中 <code class=\"language-text\">@r(.1vmin, 5vmin)</code> 就是從 .1vim 到 5vmin 中取一個值，而 <code class=\"language-text\">@lr</code> 則代表取得最後一個 random 函式所取得的數值，也就是 <code class=\"language-text\">@r(.1vmin, 5vmin)</code> 的結果。最終的 <code class=\"language-text\">background-size</code> 就會是兩個相同的隨機值。</p>\n<p>到目前為止，設定出來的圖形會長這樣：</p>\n<p><img src=\"/image/css-doodle-no-animation.png\" alt=\"css-doodle-no-animation\"></p>\n<p>所有的點會集中在一起，因為我們的 grid 是 <code class=\"language-text\">45x1</code>，也就是只有一個 column。</p>\n<p>範例中，作者用 <code class=\"language-text\">translateY</code> 的方式來將每個點隨機向 Y 軸移動，並加上 <code class=\"language-text\">@keyframe</code> 與 <code class=\"language-text\">rotate</code> 的效果，就完成了螺旋的生成圖案：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> r 4s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-4s / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token property\">--translate</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>-66vmin / <span class=\"token atrule\"><span class=\"token rule\">@size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> * <span class=\"token atrule\"><span class=\"token rule\">@i</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> r</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--translate<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateZ</span><span class=\"token punctuation\">(</span>-1turn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"i-index\" style=\"position:relative;\"><a href=\"#i-index\" aria-label=\"i index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@i, @index</h4>\n<p>唯一用到的 utility function 是 <code class=\"language-text\">@i</code>，代表當前套用到該 css 的 <code class=\"language-text\">cell</code> 的 index。</p>\n<p>螺旋的部分到此為止，而另一個滑落效果的 doodle 運用的技巧也差不多，但是效果卻完全不同，有興趣的讀者可以研究 codepen 上的原始碼。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>生成藝術除了要有創意外，擁有好的實作工具也很重要，\b<code class=\"language-text\">css-doodle</code> 算是給了想嘗試生成藝術的人一個好的開頭，像是文章一開始所製作的簡單生成藝術，也都能夠透過 <code class=\"language-text\">css-doodle</code> 來實作，程式碼會簡短很多。</p>\n<p>而透過 processing 等工具能做出更多效果，甚至能搭配音樂來做出不同變化，今天只是透過 <code class=\"language-text\">css-doodle</code> 的啟發，練習了一些簡單的生成藝術，體驗了一下，非常有趣，推薦大家一起來試試！</p>\n<p>袁川的影片後半段還有很多使用絢麗技巧的生成藝術，非常推薦大家花個四十分鐘把影片看完，相信會有不少收穫，就算不想自己嘗試，欣賞他所創作的作品也是一種享受。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=mEpocRIc3q8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS生成藝術@袁川_CSSConf CN 2019</a></li>\n<li><a href=\"https://css-doodle.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-doodle</a></li>\n<li><a href=\"https://processing.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">processing</a></li>\n<li><a href=\"http://paperjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">paper.js</a></li>\n<li><a href=\"https://zimjs.com/art.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">zimjs</a></li>\n</ol>","fields":{"slug":"css-generative-art-css-doodle"},"frontmatter":{"title":"CSS 生成藝術初探與 css-doodle 簡介","date":"05-23-2020","tags":["web","css","css-doodle","generative art"]},"timeToRead":13}},"pageContext":{"slug":"css-generative-art-css-doodle","prev":{"excerpt":"好歌分享：Rescue","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/0WtcPL8Zac4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rescue</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/0WtcPL8Zac4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>出社會後，平常一天 24 小時，可能有 14 小時都會待在電腦前的我，對於手機功能的需求真的不多，也就不像學生時代會很關注 iOS 上有什麼新的功能。而就在上個月的某天，我ㄧ如往常地在 GitHub 上閒晃時，發現一款叫做 <a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shortcuts-js</code></a> 的套件，原以為是另一套處理網頁快捷鍵的框架，但看了其敘述寫的是『A JavaScript iOS 12 Shortcuts creator』，我才去查了一下 shortcuts 是什麼...</p>\n<p>原來 iOS 12 推出了一個叫 shortcuts 的功能，能讓你透過一連串 <strong>Action</strong> 的組合，自動化你的 workflow。而該套件的作者很 hardcode 的<a href=\"https://medium.com/shortcutsjs/creating-ios-12-shortcuts-with-javascript-and-shortcuts-js-942420ca9904\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">逆向工程解析</a> shortcuts 上的程式，撰寫出一套 JavaScript 的工具，讓你能用熟悉的 JavaScript 來撰寫 iOS shortcuts。</p>\n<p>覺得蠻有意思的，所以也花了幾個小時的時間玩了一下，透過這篇文章記錄一下過程與心得。</p>\n<p>照慣例先給大家看個簡單的成品，我其實做了兩個 shortcuts，一個是利用 Google 的 <a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a> 製作的事實查核捷徑，讓你在網頁上快速查驗資訊，但 API 回傳的資料效果不是很好，所以做了另一個 <code class=\"language-text\">vConsole shortcuts</code>，讓你能夠在一般網頁（沒有特別在 header 的 CSP 設定 <code class=\"language-text\">script-src</code> 的網頁）內插入 <code class=\"language-text\">vConsole</code> 套件的 shortcuts，讓你能在手機上直接打開 console！</p>\n<p>想實際玩玩的可以從 iphone 上下載此 <a href=\"https://www.icloud.com/shortcuts/efffb762336744a5857d5defe6ff0ba7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iCloud link</a></p>\n<p>下載前記得要到 \"設定\" -> \"捷徑\" -> \"允許不受信任的捷徑\" 將該選項開啟。</p>\n<p>下載完後到該 shortcut 的詳細資訊頁內將 <strong>在共享工作表中顯示</strong> 選項打開，這樣才能在 safari 的網頁分享 panel 找到 shortcut 來執行。</p>\n<p><img src=\"/image/ios-shortcuts-js-demo.gif\" alt=\"project-demo\" title=\"project-demo\"></p>\n<h2 id=\"ios-shortcuts\" style=\"position:relative;\"><a href=\"#ios-shortcuts\" aria-label=\"ios shortcuts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iOS Shortcuts</h2>\n<p>在 Shortcuts 出現之前，有個叫做 Workflow 的應用程式可以讓你透過客製化的腳本，自訂自動化流程，而在 Apple 將其買下後，隨著 iOS 12 一起推出，並且開放免費下載。</p>\n<p>Shortcuts 的操作有點像是 Scratch，可以將一個一個的 action block 任意組合，也能夠串接別人做好的 shortcuts，對於不會撰寫程式的人來說，操作上算親民，應該也會覺得蠻有趣的，給大家看一下操作過程（gif 可能有點大）：</p>\n<p><img src=\"/image/shortcuts-ops-demo.gif\" alt=\"shortcuts-ops-demo\" title=\"shortcuts-ops-demo\"></p>\n<p>可以加入各種內建指令，拖拉組合你想要的順序。</p>\n<p>action 的 output 可以當作下一個 action 的 input，也可以與 App 互動，例如可以串接 Evernote：</p>\n<p><img src=\"/image/interaact-with-app.jpeg\" alt=\"interact-with-app\" title=\"interact-with-app\"></p>\n<p>除了上面範例這種簡單的指令堆疊，也支援 <code class=\"language-text\">if-else</code> 結構：</p>\n<p><img src=\"/image/if-else.jpeg\" alt=\"if-else\" title=\"if-else\"></p>\n<p>但是呢，我很難相信會有工程師忍受得了在手機上面一個一個 action 拖拉組合，然後輸入內容，實在太麻煩啦。</p>\n<p>還是直接寫程式比較舒服，而對於習慣 JavaScript 的我來說，<a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">shortcuts-js</code></a> 就是一個很棒的選擇！</p>\n<h2 id=\"shortcuts-js\" style=\"position:relative;\"><a href=\"#shortcuts-js\" aria-label=\"shortcuts js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shortcuts JS</h2>\n<p><img src=\"/image/shortcuts-js-official.png\" alt=\"shortcuts-js-official\"></p>\n<p>Shortcuts JS 基本上就是將 Apple 內建的 Action 都製作出對應的 JS 版本，你可以編排與呼叫那些 JS function，shortcuts-js 會幫你轉譯成 iOS 能運行的 <code class=\"language-text\">shortcut</code> 檔案。</p>\n<p>在 Shortcuts JS 的網站上就有一個 playground 讓你實際玩玩看，並且能馬上下載成 <code class=\"language-text\">shortcut</code> 檔，只是從 iOS 13 開始，不能夠直接將 <code class=\"language-text\">.shortcut</code> 檔案 AirDrop 到手機內，需要透過 icloud link 才行。</p>\n<p>另外，從他們網站上與 github issue 上也能知道目前並不是所有 Apple 內建的 actions 都支援，所以實際上許多 idea 要實作還是不容易。</p>\n<h3 id=\"官方上簡單的範例\" style=\"position:relative;\"><a href=\"#%E5%AE%98%E6%96%B9%E4%B8%8A%E7%B0%A1%E5%96%AE%E7%9A%84%E7%AF%84%E4%BE%8B\" aria-label=\"官方上簡單的範例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>官方上簡單的範例</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//////// Import necessary actions and function ////////</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actionOutput<span class=\"token punctuation\">,</span> buildShortcut <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@joshfarrant/shortcuts-js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  comment<span class=\"token punctuation\">,</span>\n  wait<span class=\"token punctuation\">,</span>\n  runJavaScriptOnWebPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@joshfarrant/shortcuts-js/actions\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////</span>\n\n<span class=\"token comment\">//////// Create and arrange actions ////////</span>\n<span class=\"token comment\">// We'll use this later to reference the output of a calculation</span>\n<span class=\"token keyword\">let</span> calcVar <span class=\"token operator\">=</span> <span class=\"token function\">actionOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Define a list of actions</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    operand<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> calcVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">showResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the Magic Variable</span>\n    text<span class=\"token operator\">:</span> withVariables<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>calcVar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/////////////////////////////////////////////</span>\n\n<span class=\"token comment\">//////// Generate the Shortcut data ////////</span>\n<span class=\"token keyword\">const</span> shortcut <span class=\"token operator\">=</span> <span class=\"token function\">buildShortcut</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Write the Shortcut to a file in the current directory</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example.shortcut'</span><span class=\"token punctuation\">,</span> shortcut<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Something went wrong :('</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Shortcut created!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//////////////////////////////////////////////</span></code></pre></div>\n<p>用 shortcuts js 製作一個基本的 shortcuts 非常簡單，只需要三個步驟：</p>\n<ol>\n<li>載入你想要使用的 actions。</li>\n<li>創建一個 <code class=\"language-text\">actions</code> 陣列，將你想要執行的 actions 照順序放進去，基本上每個 action 都會有 output，而每一個 output 都會自動傳給陣列中的下一個 action。可以從<a href=\"https://docs.shortcuts.fun/actions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文件</a>查閱目前 support 的 actions 其輸入輸出為何。不過他們文件沒有很齊全就是了...</li>\n</ol>\n<p><img src=\"/image/shortcut-js-docs.png\" alt=\"shortcut-js-docs\" title=\"shortcut-js-docs\"></p>\n<ol start=\"3\">\n<li>最後一個步驟就是透過 shortcuts js 的 <code class=\"language-text\">buildShortcut()</code> 函式來將你編排的 actions 轉化成合法的 iOS shortcuts format，並寫入檔案。</li>\n</ol>\n<p>接著你就能將這個檔案放入 icloud 上，並產生 icloud shortcuts link 來載入到你的手機裡使用了。</p>\n<p>產生 icloud shortcuts link 的方式其實我不是很確定有沒有什麼正確的方式，但我在最後會分享我所使用的方法。</p>\n<p>這邊我們先來解釋一下官方範例的 actions 做了什麼事：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token string\">'Hello, world!'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    number<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    operand<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    operation<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> calcVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">showResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use the Magic Variable</span>\n    text<span class=\"token operator\">:</span> withVariables<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>calcVar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>shortcuts js 是用 TypeScript 撰寫的，所以你載入的每個 action 你都能清楚地看到其所需要的參數與類型。</p>\n<p><code class=\"language-text\">comment</code> action 如其名，就是在 shortcuts 中下個註解，實際上沒有作用，你也只能在 shortcuts 的 action flow 中看得到它：</p>\n<p><img src=\"/image/comment-sample.png\" alt=\"comment-sample\" title=\"comment-sample\"></p>\n<p><code class=\"language-text\">number</code> 則是讓你能設定一個數字，他會將你設定的數字當作 output 傳給下一個 action，在範例中即是 <code class=\"language-text\">calculate</code> action。</p>\n<p><code class=\"language-text\">calculate</code> 除了接收上一個 action 傳入的 input 外，你需要指定與 input 操作的 <code class=\"language-text\">operand</code> 與 <code class=\"language-text\">operation</code>；最後的一個參數是一個叫做 Magic Variable 的變數，他可以用來儲存 action 所產生的結果，並在其他 action 中 reference 使用，例如範例中的 <code class=\"language-text\">showResult</code>。</p>\n<p><code class=\"language-text\">showResult</code> 就是將你傳入的 <code class=\"language-text\">text</code> 參數值輸出到手機畫面中。在這邊我們想要取得 <code class=\"language-text\">caculate</code> 所 output 的變數值，然而 <code class=\"language-text\">showResult</code> 需要的是字串，我們不能單純的傳入變數，必須要使用一個特殊的函數 <code class=\"language-text\">withVariables</code>，將變數值讀出並轉成 string 格式。</p>\n<p>這個 shortcuts 執行後就是會在你的手機上跳出一個 dialog 並顯示 14 這個數字。</p>\n<h3 id=\"了解官方範例後自己來動手做看看\" style=\"position:relative;\"><a href=\"#%E4%BA%86%E8%A7%A3%E5%AE%98%E6%96%B9%E7%AF%84%E4%BE%8B%E5%BE%8C%E8%87%AA%E5%B7%B1%E4%BE%86%E5%8B%95%E6%89%8B%E5%81%9A%E7%9C%8B%E7%9C%8B\" aria-label=\"了解官方範例後自己來動手做看看 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>了解官方範例後，自己來動手做看看</h3>\n<p>如同前言提到的，我一開始想做的是事實查核的 shortcuts，也就是說讓使用者點選 shortcuts 後，可以輸入想查詢的事情，背後呼叫 Google 的 <a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a>，但是 shortcuts 雖然有提供 <code class=\"language-text\">Get URL content</code> 的 aciton，卻沒有方便的資料處理 action，必須使用 <code class=\"language-text\">dictionary</code> 之類的 action 來將回傳的 JSON format 資料轉存成辭典格式，操作上很繁瑣，可以參考 reddit 上高手的說明：<a href=\"https://www.reddit.com/r/shortcuts/comments/afbrlh/using_apis_part1_retrieving_data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">retrieving data</a>、<a href=\"https://www.reddit.com/r/shortcuts/comments/afpwo2/using_apis_part_2_parsing_complex_api_responses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parsing complex api responses</a>、<a href=\"https://www.reddit.com/r/shortcuts/comments/ae80co/quick_and_dirty_guide_to_scraping_data_from/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapign web data</a>。</p>\n<p>在花了不少時間嘗試用 shortcuts js 按照 reddits 上的做法實作後，還是不成功，正當想放棄時，我看到了一個 action 叫做 <code class=\"language-text\">runJavaScriptOnWebPage()</code>，可以讓你在網頁上插入 JavaScript 運行。</p>\n<p>看到這個心花怒放一下，覺得撿到寶，可以在網頁上運行的話更好，在想進行事實查核的網頁上啟用這個 shortcuts，然後一切流程都直接用 JavaScript 在 web page 上執行就好，就不需要透過 shortcuts action 來處理資料了！</p>\n<p>利用 <code class=\"language-text\">runJavaScriptOnWebPage()</code> 所兜出來的 shortcuts 主要程式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">runJavaScriptOnWebPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      const element = document.querySelector('title');\n      const title = element.textContent;\n      const url = 'https://content-factchecktools.googleapis.com/v1alpha1/claims:search?key=GoogleAPIKey&amp;query=' + title;\n      const result;\n      fetch(url)\n        .then(function(result) {\n          return result.json();\n        })\n        .then(function(data) {\n          result = data;\n          completion(result);\n        });\n      </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">quickLook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不是很確定其 JavaScript 執行的環境為何，我並沒有去研究，但測試後是無法使用 await 的，使用單純的 promise 則可以。</p>\n<p>運行結果如下：</p>\n<p><img src=\"/image/fact-check-demo.gif\" alt=\"fact-check-demo\" title=\"fact-check-demo\"></p>\n<p>看起來只要把 response 在美化一下就好，但是我發現 Google API 回傳的結果沒有很好，會回傳很多不相干的，就也不想繼續優化了。</p>\n<p>不過既然知道可以在網頁上運行 JavaScript，那就可以做更多事情了！</p>\n<p>像是我後來找到的這位<a href=\"https://github.com/realdennis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">高手</a>，就利用這樣的方式來 <a href=\"https://github.com/realdennis/shortcuts-mono/tree/master/packages/shortcuts/sc-background-player\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bypass Youtube video 在手機網頁上無法背景播放的問題</a>，是我目前覺得最實用的 shortcuts XD</p>\n<p>而前言中的範例，我也是利用相同方式，將 <code class=\"language-text\">vConsole</code> inject 到頁面中，程式碼非常簡單：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// injectScript.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'head'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// hacky way to wait for script load</span>\n    <span class=\"token keyword\">const</span> script2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script2<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">'window.vConsole = new VConsole();'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>本來是想直接利用 <code class=\"language-text\">script.onload</code> 在 <code class=\"language-text\">vConsole</code> 的 script 載入後進行 initial，但是不知道為何無法順利觸發，因此只好用 setTimeot 的方式快速 hack 一下。（這種實作會造成有時得啟用兩次 shortcut 才能成功載入 vConsole ...）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> injectScript <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./injectScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...略</span>\n<span class=\"token function\">runJavaScriptOnWebPage</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        const injectScript = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>injectScript<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n        const result = injectScript();\n        completion(result);</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    output\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ...略</span></code></pre></div>\n<p>完整程式碼我放在 <a href=\"https://github.com/ArvinH/shortcuts-vconsole\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>。</p>\n<h3 id=\"產生-icloud-link\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F-icloud-link\" aria-label=\"產生 icloud link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生 iCloud link</h3>\n<p>前面說過從 iOS 13 開始，不能夠再隨意用 AirDrop 丟入 <code class=\"language-text\">.shortcut</code> 的檔案，必須要透過 iCloud link。</p>\n<p>但我其實找不太到該如何將我產生的 <code class=\"language-text\">.shortcut</code> 檔案轉成 iCloud link，後來在 <a href=\"https://github.com/joshfarrant/shortcuts-js/issues/217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub issue</a> 上找到有人分享他從 <a href=\"https://www.reddit.com/r/shortcuts/comments/d738kr/ios13_importing_shortcuts_as_files_is_not/f2ngi2e/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reddit</a> 找到的 shortcuts - <a href=\"https://www.icloud.com/shortcuts/f9acfff2a5e94138a6574498d22c2813\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Import Shortcut</a>。</p>\n<p>只要將你做好的 <code class=\"language-text\">.shortcut</code> 檔案放入 iCloud Drive，透過這個 <strong>Import Shortcut</strong> 就能從你的 iCloud Drive 中將檔案抓下來並產生一個 iCloud link，接著理論上 iPhone 就會自動 detect 到，你也就能直接安裝。</p>\n<p>P.S. 再提醒一下，記得要到 \"設定\" -> \"捷徑\" -> \"允許不受信任的捷徑\" 將該選項開啟，才能 import 你自己製作的 shortcuts。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>shortcuts 這個概念蠻有意思的，一些小動作其實自己一步一步做也是可以，但透過 shortcuts 將常用的動作組織起來，一鍵就能完成，每個步驟省個三、四秒，整體可能就能省掉你十秒，如果這 shortcuts 很常用的話，勢必能增加效率，至少心理層面的感覺有 XD</p>\n<p>整體來說，shortcuts js 還有很多地方可以改進，目前我覺得還缺少一些蠻重要的 Action，一些輸入的參數目前也不是太好用，debug 也不方便（必須要裝載上去才能測試），希望透過這次介紹能引起多點人的興趣，或許能更加推進這個專案。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://shortcuts.fun/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shortcuts-js website</a></li>\n<li><a href=\"https://github.com/joshfarrant/shortcuts-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">shortcuts-js github</a> </li>\n<li><a href=\"https://developers.google.com/fact-check/tools/api/reference/rest/v1alpha1/claims/search?apix_params=%7B%22query%22%3A%22Trump%20got%20infected%22%7D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fact check api</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/afbrlh/using_apis_part1_retrieving_data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">retrieving data</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/afpwo2/using_apis_part_2_parsing_complex_api_responses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parsing complex api responses</a></li>\n<li><a href=\"https://www.reddit.com/r/shortcuts/comments/ae80co/quick_and_dirty_guide_to_scraping_data_from/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapign web data</a>。</li>\n</ol>","id":"62b18c68-0164-51a0-99a7-ebd11ef41684","fields":{"slug":"ios-shortcuts-js"},"frontmatter":{"date":"2020-04-25T13:37:30.000Z","title":"用 JS 玩轉 iOS shortcuts","tags":["web","iOS","JavaScript","experiment"],"type":"tech","slug":"ios-shortcuts-js"},"timeToRead":11},"next":{"excerpt":"好歌分享：MONKEY MAJIK × 岡崎体育 / 留学生","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/lvEVP7NPklU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MONKEY MAJIK × 岡崎体育 / 留学生</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/lvEVP7NPklU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>前陣子在公司的專案裡頭想引用 <a href=\"https://github.com/conventional-changelog/standard-version\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">standard-version</a> 這套工具來優化 release changelog 的過程，但發現雖然可以用 <code class=\"language-text\">commitlint</code> 或是 <code class=\"language-text\">commitizen</code> 來輔助大家遵循 commit message 的 convention，卻沒辦法簡單的控制 Pull Request 的 title 格式，或是在 GitHub 上 squash merge 時的 commit format，雖然不是太大的問題，code review 的時候稍微注意一下即可，但還是很希望能有個工具來幫忙，心靈上會舒服些。</p>\n<p>GitHub 的 marketplace 上其實找得到可用的 GitHub Apps，可惜公司 policy 的緣故，無法直接使用，試想了ㄧ下原理與實作方法的選項，覺得足夠簡單，可以自己實作，順便學習如何製作 GitHub App，並以這篇文章與大家稍作分享。原始碼分享於此 - <a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<p>效果大致如下，依據你的 PR title 有無符合特定格式，改變 status check 的狀態：</p>\n<p><img src=\"/image/prlint-serverless-demo.gif\" alt=\"DEMO\"></p>\n<h2 id=\"需求分析\" style=\"position:relative;\"><a href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\" aria-label=\"需求分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>需求分析</h2>\n<p>想達成 Demo 的功能，我們需要監聽 Pull Request 被 Create、Update 的事件，並且透過 GitHub API 將 Pull Request 上的狀態做更改。</p>\n<p>而要能監聽 GitHub 上的事件，想必是需要設定 webhook endpoint 給 GitHub 呼叫。若是幾年前的我，大概直覺會想到去 Heroku 或是 Digital ocean 開一個最低規格的機器來架 server，但現在我們有了各種 serverless 服務可以使用，AWS Lamda、GCP Cloud Function、Azure Function 等等，基本上只要寫好一個 function 就能 deploy 上去當作 webhook 給其他服務呼叫了。用什麼都可以，但因為公司使用的是 GCP 平台，所以我也就順勢採用 Cloud Function 來作為我的 webhook endpoint。</p>\n<p>總結所需要的技術只有兩個：GitHub API 與 Cloud Function。</p>\n<h2 id=\"github-api\" style=\"position:relative;\"><a href=\"#github-api\" aria-label=\"github api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub API</h2>\n<p>GitHub 開放的 API 很多，每個 API 可以控制的權限分得很細，官方文件針對每個 API 的參數、用法都有提供範例與解釋，不過我覺得有些專屬於 GitHub API 的名詞還是需要花點時間去額外搜尋資料釐清。</p>\n<p><img src=\"/image/github-api-docs.png\" alt=\"github api doc\"></p>\n<p>目前 GitHub 上有使用 GraphQL 的 <a href=\"https://developer.github.com/v4/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v4</a> 版本，以及 Rest API 的 <a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">v3</a>，兩種都能使用，端看你的需求，這次的實作是採用 Rest API。</p>\n<p>若要監聽 Pull Request 的 event，得用到 - <a href=\"https://developer.github.com/v3/activity/event_types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Event types and payloads API</a>，從中可以找到 <a href=\"https://developer.github.com/v3/activity/event_types/#pullrequestevent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PullRequestEvent</a>，</p>\n<p><img src=\"/image/github-api-pr-event.png\" alt=\"github-api-pr-event\"></p>\n<p>event 回傳的 payload 包藏不少資訊，從 <code class=\"language-text\">action</code> 中可以得知該 event 是被哪種操作所觸發，像是 <code class=\"language-text\">opened</code>, <code class=\"language-text\">closed</code> 或 <code class=\"language-text\">edited</code> 等等。而關於 Pull Request 的詳細內容，會放在 <code class=\"language-text\">pull_request</code> 這個物件裡，從 <a href=\"https://developer.github.com/v3/pulls/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pull Request API</a> 中 <a href=\"https://developer.github.com/v3/pulls/#get-a-pull-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Get a pull request</a> 的 <code class=\"language-text\">Response</code> 中，我們可以找到 API 回傳的完整 payload 範例，資訊含量非常多，你在 GitHub UI 看得到的內容都找得到，甚至包含 Repo 的資訊。</p>\n<p>這些豐富的資訊中，有一個 <code class=\"language-text\">statuses_url</code>，這是我們創建 Pull request 狀態的端點，待會我們會再提到，可以從 <a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 了解。</p>\n<h2 id=\"cloud-function\" style=\"position:relative;\"><a href=\"#cloud-function\" aria-label=\"cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud Function</h2>\n<p>了解要使用的 GitHub API 後，接著就是要撰寫我們的 webhook endpoint，也就是 Cloud Function。要開始使用 Cloud Function 很簡單，到你的 GCP project 底下點選 Cloud Functions，按下 <strong>CREATE FUNCTION</strong> 即可。</p>\n<p><img src=\"/image/create-cloudfunction.png\" alt=\"create-cloudfunction\"></p>\n<p>創建 Cloud Function 的頁面上可以設定 function 名稱、要配置的記憶體大小、Trigger 的介面（除了能被 HTTP 的 request 觸發外，也能設定由 Cloud Storage、Firestore、Cloud pub/sub 等等服務來啟動函式執行）</p>\n<p><img src=\"/image/cloud-function-details.png\" alt=\"cloud-function-details\"></p>\n<p>URL 就是此 cloud function 的 endpoint，到時候就是要把這個 url 設定到 GitHub 的 webhook 上。此外，要記得把 <code class=\"language-text\">Allow unauthenticated invocations</code> 的選項打勾，此舉能將該 endpoint 公開給所有人存取，GitHub webhook 也才能打得到這隻 API。</p>\n<p>接著最後就是設定程式碼的部分，你可以直接把程式碼貼上（inline editor）、壓縮成 zip 檔上傳（ZIP upload, ZIP from cloud storage）和連接 repository（cloud source repository）。</p>\n<p>也有多種 runtime 可以選擇：</p>\n<p><img src=\"/image/cloud-function-runtimes.png\" alt=\"cloud-function-runtimes\"></p>\n<p>runtime 結構大同小異，都會有一個 entry file，與一個對應的套件管理檔案，以 NodeJS 為例就是一個 <code class=\"language-text\">index.js</code> 與 <code class=\"language-text\">package.json</code>。因此你要在你的 cloud function 中使用第三方套件是沒問題的。</p>\n<p>另外，也能夠有不同的資料夾結構，將一些邏輯拆分到別的檔案再 import 進來也可以（依照相對路徑存取），但當然就必須選擇 <code class=\"language-text\">ZIP upload</code> 等方式上傳你的專案。</p>\n<p>至於 Cloud Function 的基本結構，可以從 inline editor 提供的範例來觀察，以 NodeJS 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Responds to any HTTP request.\n *\n * @param {!express:Request} req HTTP request context.\n * @param {!express:Response} res HTTP response context.\n */</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">helloWorld</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其實就像是 Express 的一個 route 或 middleware 的結構，傳入 <code class=\"language-text\">req</code> 與 <code class=\"language-text\">res</code> 物件讓你操作。</p>\n<p>exports 的名稱則是用在設定中，讓 Cloud Function 知道要呼叫哪個函式：</p>\n<p><img src=\"/image/cloud-funciton-name.png\" alt=\"cloud-funciton-name\"></p>\n<h2 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作</h2>\n<p>你可能會有個疑惑，雖然我們已經知道 cloud function 的結構與設定方式，但難道我每寫完一段程式想要測試一下時，就得重新上傳到 cloud function 一次嗎？</p>\n<p>當然不用，Google Cloud team 有推出一個 <code class=\"language-text\">@google-cloud/functions-framework</code> 套件可以使用，透過 <code class=\"language-text\">functions-framework --target=${function name}</code> 的方式啟動你的 cloud function，會幫你起一個 express server，監聽在 port 8080：</p>\n<p><img src=\"/image/cloud-function-framework-cli.png\" alt=\"cloud-function-framework-cli\"></p>\n<p>接著你可以使用 <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngrok</a> 將其 expose 成 public access 的 url，就能用來設定在 webhook 上，同時又能一邊持續開發。</p>\n<h2 id=\"結合-github-api-與-cloud-function\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E5%90%88-github-api-%E8%88%87-cloud-function\" aria-label=\"結合 github api 與 cloud function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結合 GitHub API 與 Cloud Function</h2>\n<p>當你有了 webhook url，就可以先到 GitHub repo 去設定看看，實際測試 webhook 與 GitHub API 的串連。方法也很簡單，到你想使用的 repository 中，選擇 <code class=\"language-text\">Settings</code> -> <code class=\"language-text\">Webhooks</code> -> <code class=\"language-text\">Add webhook</code>，就會看到下面的畫面：</p>\n<p><img src=\"/image/git-webhook.png\" alt=\"git-webhook\"></p>\n<p>Payload URL 填入你的 <code class=\"language-text\">ngrok</code> url，Content-type 可以選擇 json 格式。</p>\n<p>最後注意一下，你可以選擇哪些 events 會 trigger 你的這隻 webhook，選擇 <code class=\"language-text\">Let me select individual events.</code> 並勾選 <code class=\"language-text\">Pull Requests</code> 的選項，這樣才不會拿到其餘你不需要的事件資訊。</p>\n<p><img src=\"/image/select-individual-event.png\" alt=\"select-individual-event\"></p>\n<p><img src=\"/image/pull-request-event.png\" alt=\"pull-request-event\"></p>\n<p>設定完後回到我們的程式碼，最基礎的 webhook 架構如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prStatus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'opened'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'edited'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ready_for_review'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prLint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pull_request<span class=\"token operator\">:</span> pullRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> statuses_url<span class=\"token operator\">:</span> statusesUrl<span class=\"token punctuation\">,</span> title <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> pullRequest<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prStatus<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// check pr title</span>\n    <span class=\"token keyword\">const</span> isValid <span class=\"token operator\">=</span> <span class=\"token function\">validatePullReqeustTitle</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// create status</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>依照我們在 <a href=\"#github-api\">GitHub API</a> 所瞭解到的 Event API 與 Pull Request Object，我們知道可以從 <code class=\"language-text\">req.body</code> 中取出 <code class=\"language-text\">pull_request</code> 物件，而在該物件中能取得 <code class=\"language-text\">action</code>、<code class=\"language-text\">title</code> 與 <code class=\"language-text\">statuses_url</code> 兩個我們需要的資訊。</p>\n<p>接著就能實作我們 GitHub App 想要的功能邏輯，包含 filter 掉我們不想要的 action 操作、驗證 Title 是否有符合格式、創建 pull request status 等等。</p>\n<h2 id=\"創建-pull-request-status\" style=\"position:relative;\"><a href=\"#%E5%89%B5%E5%BB%BA-pull-request-status\" aria-label=\"創建 pull request status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>創建 pull request status</h2>\n<p>程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// call status api</span>\n<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> isValid <span class=\"token operator\">?</span> <span class=\"token string\">'pass pr lint'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'please check your pr title'</span><span class=\"token punctuation\">,</span>\n  context<span class=\"token operator\">:</span> <span class=\"token string\">'pr-lint'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Token </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>accessTokens<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>statusesUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    json<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'PR lint error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用上來說非常簡單，<a href=\"https://developer.github.com/v3/repos/statuses/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Statues API</a> 接收的 Post body 有四個 properties 可以設置：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"state\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// error, failure, pending, or success.</span>\n  <span class=\"token string\">\"target_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://example.com/build/status\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The build succeeded!\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"continuous-integration/jenkins\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>state</strong> 就是你想設定的狀態，有四種可以選；<strong>target_url</strong> 則是使用者點選該狀態後要連結去的地方，可以忽略不設；<strong>description</strong> 就是顯示在狀態列的文字；而 <strong>context</strong> 則是讓系統知道這是由第三方 App 所創立的 status。</p>\n<p>要發送 Post API 到 GitHub 上需要有 accessToken，有使用過 webhook 的讀者應該知道，我們可以輕易從 <a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 個人 profile settings 中的 Developer options</a> 產生 Personal Token：</p>\n<p><img src=\"/image/github-personal-token.png\" alt=\"github-personal-token\"></p>\n<p>取得 personal token 後填入上方範例程式碼的 <code class=\"language-text\">accessTokens</code>，就能夠發送 Post request 到我們從 pull request event 中取得的 <strong>statuses_url</strong>，在該 Pull Request 的頁面產生一個 Check status：</p>\n<p><img src=\"/image/github-check-status.png\" alt=\"github-check-status\"></p>\n<p>到這邊為止看起來就完成了，只要我們把程式碼部署到 Cloud Function 上，將 Webhook 的 URL 更改成實際的連結，一切就大功告成。</p>\n<p>對，也不對。</p>\n<p>如果你仔細看一下你創建的 Check Status，你會發現因為你用的是 Personal Token，他會顯示該狀態是由你本人產生的：</p>\n<p><img src=\"/image/github-check-status-issue.png\" alt=\"github-check-status-issue\"></p>\n<p>這當然不是太大的問題，但看起來不是很專業，而且當你用在多個公司專案時，總是出現你的大頭貼好像很討人厭啊。要解決這問題，就需要創建 GitHub App 了。</p>\n<h2 id=\"github-app\" style=\"position:relative;\"><a href=\"#github-app\" aria-label=\"github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub App</h2>\n<p>GitHub App 目前有分兩種類型：OAuth Apps 與普通的 GitHub Apps，官網有詳細的<a href=\"https://developer.github.com/apps/differences-between-apps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">差別說明</a>，我們的案例只需要用到一般的 GitHub Apps 即可，一樣在官網有手把手的<a href=\"https://developer.github.com/apps/quickstart-guides/using-the-github-api-in-your-app/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">創建教學範例</a>。</p>\n<p>我們之所以需要用到 GitHub App，是因為我們想要能夠以 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub App 的名義去取得 AccessToken</a>，利用該 AccessToken 去創建 pull request 的 check status。</p>\n<p>為此，有幾個步驟需要進行：</p>\n<h4 id=\"在-github-上新增一個-github-app\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-github-%E4%B8%8A%E6%96%B0%E5%A2%9E%E4%B8%80%E5%80%8B-github-app\" aria-label=\"在 github 上新增一個 github app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 GitHub 上新增一個 GitHub App</h4>\n<p>在你個人的 <a href=\"https://github.com/settings/apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub developer settings 頁面</a> 中，有個 GitHub Apps 的選項，可以 <strong>New GitHub App</strong>：</p>\n<p><img src=\"/image/github-apps-index.png\" alt=\"github-apps\"></p>\n<p>創建的時候有很多欄位可以填選，像是 App 名稱、網站、Logo 等等，但基本上重要的只有 <strong>Webhook</strong> 與 <strong>Repository Permissions</strong>（其實 GitHub App 除了 repository permission 可以設定外，也能設定到 Organization 與 User 兩種不同層級的權限，不過目前我們只需要 repository 層級即可）：</p>\n<p>跟先前我們在 repo 的 webhook 是ㄧ樣的</p>\n<p><img src=\"/image/github-app-webhook.png\" alt=\"github-app-webhook\"></p>\n<p>為了讓我們的 GitHub App 能存取 Repo 的 Pull request 與 status，需要將這兩個的權限設定為 Read&#x26;Write。</p>\n<p><img src=\"/image/github-app-repo-permission.png\" alt=\"github-app-repo-permission\"></p>\n<p>當你設定完後，下方會出現你可以訂閱的 Event，而我們一樣選擇 <em>pull request</em>：</p>\n<p><img src=\"/image/github-app-subscribe-event.png\" alt=\"github-app-subscribe-event\"></p>\n<h4 id=\"產生該-app-的-private-keys\" style=\"position:relative;\"><a href=\"#%E7%94%A2%E7%94%9F%E8%A9%B2-app-%E7%9A%84-private-keys\" aria-label=\"產生該 app 的 private keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>產生該 App 的 Private keys</h4>\n<p>當你都創建好 App 後，App settings 的頁面最下方會有一個 <strong>Private keys</strong> 的區塊，點選 <code class=\"language-text\">Generate a private key</code> 的按鈕，會自動下載一份 <code class=\"language-text\">.pem</code> 的檔案到你電腦裡，而這把 Key 就是我們用來產生 JWT 的關鍵：</p>\n<p><img src=\"/image/github-app-private-key.png\" alt=\"github-app-private-key\"></p>\n<h4 id=\"利用該-private-keys-去產生-jwtjson-web-token\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E8%A9%B2-private-keys-%E5%8E%BB%E7%94%A2%E7%94%9F-jwtjson-web-token\" aria-label=\"利用該 private keys 去產生 jwtjson web token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用該 Private keys 去產生 JWT（JSON Web Token）</h4>\n<p>產生 JWT 的方式有很多，在 NodeJS 上我是用 <a href=\"https://github.com/auth0/node-jsonwebtoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Auth0 的 jsonwebtoken</a> 這個套件。</p>\n<p>要產生 GitHub App 能使用來取得 AccessToken 的 JWT，需要將一些資訊利用剛剛下載的那把 key 簽署到 JWT 上 <a href=\"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#jwt-payload\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// issued at time</span>\n    iat<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// JWT expiration time (10 minute maximum)</span>\n    exp<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// GitHub App's identifier</span>\n    iss<span class=\"token operator\">:</span> <span class=\"token constant\">YOUR_APP_ID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// https://github.com/settings/apps/${your app}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> privateKey<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    privateKey <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/../key/your-app.private-key.pem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> jsonwebtoken<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> algorithm<span class=\"token operator\">:</span> <span class=\"token string\">'RS256'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最主要的資訊是 <code class=\"language-text\">iss</code>，可以從你的 GitHub App 設定頁面取得 App 的 ID，而其餘時間的資訊其實對我們來說不太重要，因為每次 Cloud Funciton 被呼叫的時候，我們都會重新去申請一次 AccessToken，所以 Expiration 的時間問題不大。</p>\n<p>透過 <code class=\"language-text\">jsonwebtoken.sign</code> 把剛剛下載的 Key 跟相關的 Payload 結合產生 JWT，接著就能拿這個 Token 去申請 AccessToken。</p>\n<h4 id=\"以該-jwt-與-github-app-的-installations-id-去取得屬於該-app-的-accesstoken\" style=\"position:relative;\"><a href=\"#%E4%BB%A5%E8%A9%B2-jwt-%E8%88%87-github-app-%E7%9A%84-installations-id-%E5%8E%BB%E5%8F%96%E5%BE%97%E5%B1%AC%E6%96%BC%E8%A9%B2-app-%E7%9A%84-accesstoken\" aria-label=\"以該 jwt 與 github app 的 installations id 去取得屬於該 app 的 accesstoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>以該 JWT 與 GitHub App 的 installations id 去取得屬於該 App 的 AccessToken</h4>\n<p>要以 GitHub App 的身份取得 AccessToken 需要呼叫的 endpoint 為：</p>\n<p><code class=\"language-text\">POST /app/installations/:installation_id/access_tokens</code> <a href=\"https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a></p>\n<p>其中需要用到 GitHub App 的 installation id，而這個資訊其實也包含在我們 subscribe 的 pull request event 回傳的物件中：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>const { pull_request: pullRequest = {}, action } = req.body;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const { pull_request: pullRequest = {}, action, installation } = req.body;</span></code></pre></div>\n<p>在呼叫 access token API 時要注意一點，官方文件特別叮囑：</p>\n<blockquote>\n<p>Note: To access the API with your GitHub App, you must provide a custom media type in the Accept Header for your requests. </p>\n</blockquote>\n<p>所謂的 custom meida type 就是 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，因此在呼叫 API 時記得要將 Accept 改成該類型。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAccessToken</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>installationId <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get a JWT every time</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">JWT</span> <span class=\"token operator\">=</span> <span class=\"token function\">getJWT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">GITHUB_API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/installations/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>installationId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/access_tokens</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        Accept<span class=\"token operator\">:</span> <span class=\"token string\">'application/vnd.github.machine-man-preview+json'</span><span class=\"token punctuation\">,</span>\n        Authorization<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JWT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// eslint-disable-next-line no-console</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> exception <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"修改-api-request-header\" style=\"position:relative;\"><a href=\"#%E4%BF%AE%E6%94%B9-api-request-header\" aria-label=\"修改 api request header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改 API request Header</h4>\n<p>最後取得 AccessToken 後，回到我們最初發送 Status API 的 request，將原有的 personal access token 取代掉，並將 Accept header 也改為 <code class=\"language-text\">application/vnd.github.machine-man-preview+json</code>，就大功告成了！</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">const headers = {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Authorization: `Token ${personal accessToken}`,\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Authorization: `Token ${github app accessToken}`,\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> Accept: 'application/json',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> Accept: 'application/vnd.github.machine-man-preview+json',\n</span>};</code></pre></div>\n<p>透過 GitHub App 取得的 AccessToken 所創建的 Check status 運作起來就會有這樣的效果，就是個第三方 App 所產生的，而不是你個人的大頭照：</p>\n<p><img src=\"/image/github-app-final.png\" alt=\"github-app-final\"></p>\n<p>完整程式碼請參考：<a href=\"https://github.com/ArvinH/PRLint-serverless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PRLint-serverless</a></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一個不小心似乎又把篇幅拉得太長，使用 GitHub App 與 Cloud Function 其實真的很簡單，只是步驟稍微多了些，但每一個步驟都只需要做一點點事情，或是設定一些資訊，只要實作過一次後，要再次使用就會快很多了。</p>\n<p>花費些微的力氣，利用 Serverless 的解決方案搭配 GitHub App/API，能提昇不少生產力，是很值得的投資，希望大家都能試試看！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Developer Guide</a></li>\n<li><a href=\"https://cloud.google.com/functions/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cloud Function Docs</a></li>\n<li><a href=\"https://github.com/ewolfe/prlint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prlint github app</a></li>\n</ol>","id":"82bcb2ef-a77c-5d3a-9b38-36499a601a55","fields":{"slug":"github-apps-cloudfunction"},"frontmatter":{"date":"2020-06-14T13:50:00.000Z","title":"利用 Cloud function 製作 GitHub Apps","tags":["GitHub API","javascript","Cloud Function"],"type":"tech","slug":"github-apps-cloudfunction"},"timeToRead":13},"type":"tech"}},"staticQueryHashes":["2123680655"]}