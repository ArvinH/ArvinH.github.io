{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/chat-bot-wit-ai","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>\"以為長大會有哆拉a夢，結果只有 Chat Bot ...\"</p>\n</blockquote>\n<!-- more -->\n<p>雖然現在還是沒有哆拉a夢，但是有進步就有機會，上回我們利用 Facebook Messenger API 製作了一個粉絲專頁的 Chat Bot，今天我們要讓他更加聰明，利用被 Facebook 收購的 Wit.ai 所提供之 API，可以很方便的讓 Chat Bot 有了 NLP 的支援，讓他/她更加聰明！</p>\n<p>實際上 Wit.ai 的介面並沒有我想像中的好用，需要很有耐心地把官網上的教學一步步做完，並且了解他所定義的名詞代表之含義，雖然寫得很詳細，但畢竟是英文，因此就記錄一下整個過程，並跟大家分享。</p>\n<!-- \n  Wit.ai 操作步驟\n-->\n<h2 id=\"step-1-註冊-witai-帳號\" style=\"position:relative;\"><a href=\"#step-1-%E8%A8%BB%E5%86%8A-witai-%E5%B8%B3%E8%99%9F\" aria-label=\"step 1 註冊 witai 帳號 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1 註冊 Wit.ai 帳號</h2>\n<p>先到 <a href=\"https://wit.ai/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wit.ai</a> 的官方網站註冊一個帳號，有 GitHub 與 Facebook 可以選擇。</p>\n<p><img src=\"/image/wit.aifp.png\" alt=\"Wit.ai\" title=\"Wit.ai\"></p>\n<h2 id=\"step-2-dashboard-設定\" style=\"position:relative;\"><a href=\"#step-2-dashboard-%E8%A8%AD%E5%AE%9A\" aria-label=\"step 2 dashboard 設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 Dashboard 設定</h2>\n<p>接著你會進到你的 Dashboard</p>\n<p><img src=\"/image/witDashboard.png\" alt=\"Dashboard\" title=\"Dashboard\"></p>\n<p>點選右上角的 + 號，進入 App 設定頁面，進行簡單的設定，基本上只要設定 名字 與 描述，語言等等之後還能修改。\n這邊要提一下，我本來想設定成 Chinese，但後來在建立機器人對話故事時，發現他的中文支援好像還不是很完善，常常判斷不出 Entity，因此這邊還是先以英文為例子，如果有高手知道怎麼解的話也歡迎告訴我！</p>\n<p><img src=\"/image/setting.png\" alt=\"Setting\" title=\"Setting\"></p>\n<h2 id=\"step-3-創建對話情境-story\" style=\"position:relative;\"><a href=\"#step-3-%E5%89%B5%E5%BB%BA%E5%B0%8D%E8%A9%B1%E6%83%85%E5%A2%83-story\" aria-label=\"step 3 創建對話情境 story permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3 創建對話情境 (Story)</h2>\n<p>繼續，設定完後就進入到編輯界面，在 Wit.ai 裡面，你的機器人與一般使用者的對話情境，都叫做 <code class=\"language-text\">Story</code>，你可以透過創建 Story 來定義出在這個情境下，你的機器人要怎麼跟使用者對話。</p>\n<p><img src=\"/image/createStory.png\" alt=\"Create Story\" title=\"Create Story\"></p>\n<p><img src=\"/image/story-1.png\" alt=\"Story\" title=\"Story\">\n整個介面就像是一個對話視窗，看起來頗親切，左邊是 User says，右邊是 Bot sends, Box executes 與 Jump。\n先簡單介紹，看完後面的例子會更清楚。</p>\n<ul>\n<li><strong>User says</strong>： 顧名思義就是定義 User 會說的話，並且你可以設定 User 的句子中，有哪些關鍵字是你需要的、哪些文字是代表什麼含意，在 Wit.ai 的世界中，這樣的東西叫做 <code class=\"language-text\">Entity</code>，後面會再度說明。</li>\n<li><strong>Bot sends</strong>： 就是機器人要回覆的句子，這邊可以帶入一些參數，像是 user 所提及的一些關鍵字，或是機器人向外呼叫 API 所得到的結果。</li>\n<li><strong>Box executes</strong>： 就是讓你定義機器人要執行的 function，真正的實作不會在這邊，這邊只是定義名稱，以及要接收的 context 與 吐回的變數名稱。</li>\n<li><strong>Jump</strong>： 則是讓你能夠在滿足設定的一些條件之下，跳回到某個 Box executes 或是 Box sends 的步驟去執行。</li>\n</ul>\n<h2 id=\"step-4-定義使用者語句\" style=\"position:relative;\"><a href=\"#step-4-%E5%AE%9A%E7%BE%A9%E4%BD%BF%E7%94%A8%E8%80%85%E8%AA%9E%E5%8F%A5\" aria-label=\"step 4 定義使用者語句 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 定義使用者語句</h2>\n<p>接下來我們先定義 User 可能會對我們的機器人說的話，像是使用者可能會跟機器人打招呼，我們就可以在對話框的 User says 輸入 Hello，並且 highlight 起來以後設定 Entity，Enity 在 Wit.ai 裡面，就是用來讓系統判斷使用者輸入句子時，哪些關鍵字是要抽取出來做處理的，你可以依照該關鍵字的特型來設定相對應的 Entity 類別。\n這邊我們就自定義一個 Entity 名稱叫做 greeting，當然 Wit.ai 也有許多內建好的 Entity，當你點選 <code class=\"language-text\">Add a new entity</code> 時，他會有提示。</p>\n<p><img src=\"/image/greeting-story.gif\" alt=\"Greeting Story\" title=\"Greeting Story\"></p>\n<p>你可能會想說，打招呼又不會只說 Hello，你這樣設定的話，我照之前方法 hardcode 寫在 server side 就好了呀，要 Wit.ai 幹麻。</p>\n<p>Wit.ai 當然沒有這麼簡單，介面上方的 Tab 是不是有個<strong>學士帽</strong>寫著 <code class=\"language-text\">Understanding</code>？ 在這個地方你有三種方式可以用來訓練你的機器人：</p>\n<ul>\n<li><strong>增加例句</strong>：</li>\n</ul>\n<p>在上方寫著 <code class=\"language-text\">Test how your bot understands a sentence</code> 的地方輸入更多的例句，並且如同前面步驟般去定義 Entity，這邊要注意的是，當你輸入完例句後，記得點選下方綠色的 Validate，讓 Wit.ai 去記住你的例句。成功的話就會看到下方 Entity 的 Values 欄位會多出你剛剛例句中所抓取到的關鍵字（以下圖例子來說就是 Hi 也被我們納進 greeting 這個 entity內了，只要之後 user 輸入 Hello 或是 Hi，都是屬於 greeting）</p>\n<p><img src=\"/image/understand-ex.gif\" alt=\"understands example\" title=\"understands example\"></p>\n<ul>\n<li><strong>增加 Entity 的 Keyword 與 Synonyms</strong>：</li>\n</ul>\n<p>你也可以點選下方的 Entity 名稱，進去手動增加關鍵字或是同義詞。\n<strong>關鍵字</strong>與<strong>同義詞</strong>的關係有點像是父子類別，這邊舉個比較易懂的例子，如下圖，我們有個 Entity 叫做 Beer，底下的 關鍵字是 啤酒 與 紅酒，當使用者喊出啤酒的時候，機器人就會知道是屬於 Beer 這個 Entity。</p>\n<p>但啤酒有很多種種類，我們可以在同義詞這邊增加：蜂蜜啤酒，這樣當使用者輸入 蜂蜜啤酒 時，機器人就會判斷目前的 Beer Entity 的 Value 為 啤酒，而非紅酒。\n相同的，我們也可以設定 葡萄酒 為 紅酒 的同義詞，讓使用者喊出 葡萄酒 時，機器人會判斷為 紅酒。</p>\n<p><strong>要注意的是，機器人記住的 Entity Value 會是以 Keyword 為主，也就是你輸入蜂蜜啤酒，但對機器人來說，偵測到的 Beer Entity，其值為 啤酒，而非蜂蜜啤酒。</strong></p>\n<p><img src=\"/image/beerexp.gif\" alt=\"understands keyword setting\" title=\"understands keyword setting\"></p>\n<ul>\n<li><strong>設定 Entity 的 Search strategy</strong>：</li>\n</ul>\n<p>最後在設定 Entity 的地方還有 Search strategy 可以選擇，意思是你希望 Wit.ai 要怎麼樣從句子中找出這個 Entity 。</p>\n<ol>\n<li>trait: 如果你想設定的 Entity 並不是由單一一個關鍵字就可以判斷，也不是靠句子中幾個關鍵字或是子句能夠辨別，而是需要整個句子來判定的話，就要設定成 trait，像是今天的例子裡面，想要問新聞，這種使用者的 <strong>意圖</strong> 就很適合設定成 trait。</li>\n</ol>\n<p>官網範例：<a href=\"https://wit.ai/docs/recipes#categorize-the-user-intent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出處</a>\n<img src=\"/image/trait.gif\" alt=\"example: trait\" title=\"example: trait\"></p>\n<ol start=\"2\">\n<li>free-text: 如果你想要擷取使用者句子中的某段文字，而該段文字並不是特定的關鍵字時，就要設定 free-text，像是 User 說：“Tell Jordan that I will be home in ten minutes”，而你想要擷取 ”I will be home in ten miutes\"，這時就可以把想要擷取的句子選取起來，設定為 free-text，要注意的是，free-text 一定要搭配 keywords 一起使用，有點像是告訴 Wit.ai 說這段話都算是 keywords，但不一定要 exactly match 才能觸發。</li>\n</ol>\n<p>官網範例：<a href=\"https://wit.ai/docs/recipes#extract-an-entity-that-is-a-substring-of-the-message\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出處</a>\n<img src=\"/image/freetext.gif\" alt=\"example: free-text\" title=\"example: free-text\"></p>\n<ol start=\"3\">\n<li>keywords: 要完全符合你預先設定的關鍵字才會觸發。</li>\n</ol>\n<p>官網範例：<a href=\"https://wit.ai/docs/recipes#categorize-the-user-intent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">出處</a>\n<img src=\"/image/keyword.gif\" alt=\"example: keywords\" title=\"example: keywords\"></p>\n<!-- \n  問新聞story -> bot回應 -> branch介紹\n-->\n<h2 id=\"step-5-定義機器人回覆語句\" style=\"position:relative;\"><a href=\"#step-5-%E5%AE%9A%E7%BE%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%9B%9E%E8%A6%86%E8%AA%9E%E5%8F%A5\" aria-label=\"step 5 定義機器人回覆語句 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5 定義機器人回覆語句</h2>\n<p>介紹了這麼多瑣碎的東西後，回過頭來看看我們要怎麼設定機器人的回覆。以最前面的例子來說，當機器人收到 greeting 的 Entity 後，可以讓用相同的 entity value 回覆，並加上簡單的介紹。\n點選下方的 Bot sends，對話框就會出現機器人的部分，你可以在裡面輸入機器人的回覆語句，想要的變數可以用<code class=\"language-text\">{ }</code>包起來，這邊我們直接使用 greeting 這個 entity，這樣就能用同樣的 Entity 去回覆。</p>\n<p><img src=\"/image/botsends.gif\" alt=\"機器人回覆\" title=\"機器人回覆\"></p>\n<p>畫面右下方有個浮動的按鈕 “Press <code class=\"language-text\">~</code> to chat with your bot”，可以讓你即時測試一下。</p>\n<p><img src=\"/image/botsentResult.gif\" alt=\"機器人回覆測試\" title=\"機器人回覆測試\"></p>\n<h2 id=\"step-6-設定機器人執行動作\" style=\"position:relative;\"><a href=\"#step-6-%E8%A8%AD%E5%AE%9A%E6%A9%9F%E5%99%A8%E4%BA%BA%E5%9F%B7%E8%A1%8C%E5%8B%95%E4%BD%9C\" aria-label=\"step 6 設定機器人執行動作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6 設定機器人執行動作</h2>\n<p>當然機器人不能只單純回話，要能夠執行動作，這邊我們創建另一個對話情境，設定讓我們的機器人幫忙找新聞！\n這邊我先設定好一個使用者語句與相關 Entity，接著先讓 Bot executes 動作，也就是讓他執行一個 Funtion，這邊只是定義 Function 名稱以及 輸出 的參數，實際的實作要等到後面撰寫程式時才需要。</p>\n<p><img src=\"/image/botexec.gif\" alt=\"機器人執行函數\" title=\"機器人執行函數\"></p>\n<p>從上圖來看，我設定了一個 <code class=\"language-text\">getNews</code> 的函式，並且設定一個<code class=\"language-text\">context</code>為 newsResult，代表這個 function 會有一個變數 <code class=\"language-text\">newsResult</code> 可以供外部與自己使用。此外，機器人會先回覆一個訊息，其中包含你的 <code class=\"language-text\">search_query</code> entity 之 value </p>\n<p>設定完一樣要進行一下測試，當你輸入使用者語句後，機器人會執行函式，並問你要執行哪個 Context，這時你就點選剛剛設定的 <code class=\"language-text\">newsResult</code> 當作回覆，教導機器人記住這個 <code class=\"language-text\">context</code></p>\n<p><img src=\"/image/botexectest.gif\" alt=\"機器人執行測試\" title=\"機器人執行測試\"></p>\n<p>若使用者沒有說他想找什麼新聞怎麼辦呢？這時候就是另用另一個 Context 來判斷了！你可以設定一些 <code class=\"language-text\">context branch</code>，透過 先前提到的 <strong>Jump</strong> ，讓機器人根據 <code class=\"language-text\">Context</code> 的不同來執行不同回覆。\n透過定義一個 <code class=\"language-text\">missNews</code> 的 Context，告訴機器人，當沒有 <code class=\"language-text\">search_query</code> 時，可以怎麼做。</p>\n<p>如下圖，你需要設定一個 <code class=\"language-text\">BookMark</code> 讓你的機器人可以 <code class=\"language-text\">Jump</code> 到那個 Context下。</p>\n<p><img src=\"/image/botJump.gif\" alt=\"Branch Context\" title=\"Branch Context\"></p>\n<p>設定完後依然需要先測試一下，訓練一下你的 Bot。在這邊你要告訴機器人目前是哪個 Context 。要注意的是，你必須要把非當下必要的 Context 移除，像是下圖中，在 User 回答 Brexits後，需要把 missNews 這個 context 點選掉，這樣 Bot 才會正常的跳回 <code class=\"language-text\">getNews</code>。</p>\n<p><img src=\"/image/botJumpTest.gif\" alt=\"Branch Context Test\" title=\"Branch Context Test\"></p>\n<h2 id=\"step-7-套用-api-與實作-function\" style=\"position:relative;\"><a href=\"#step-7-%E5%A5%97%E7%94%A8-api-%E8%88%87%E5%AF%A6%E4%BD%9C-function\" aria-label=\"step 7 套用 api 與實作 function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7 套用 API 與實作 Function</h2>\n<p>前面幾個步驟做完後，就有個基本的使用者與機器人互動情境，接下來就可以開始實作函式，並套用 API 了。\n這邊以 Node.js 為例子，你需要先到你的專案底下加入 <code class=\"language-text\">node-wit</code> 這個 package。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">\t\tnpm install --save node-wit</code></pre></div>\n<p>之後可以先測試一下，修改官方的 <code class=\"language-text\">example/quickstart.js</code>，實作出 <code class=\"language-text\">getNews</code> 函式，這邊先簡單 echo 一下就好。程式碼短短的，你需要注意的是 <code class=\"language-text\">actions</code> 這個 object，裡面定義了 Bot 要執行的動作函式，<code class=\"language-text\">send</code> 是用來讓 Bot 回話的，這一定要有，而我們自己定義的 <code class=\"language-text\">getNews</code> 就定義在下方。</p>\n<p><code class=\"language-text\">getNews</code> 裡面利用 <code class=\"language-text\">firstEntityValue</code> 從接收到的 entities 中找出你要的，這邊我們要的當然是 <code class=\"language-text\">search_query</code> 的值。接著就可以去進行需要的處理，呼叫 API 等等。</p>\n<p><strong>唯一要注意的就是這邊需要使用 Promise 回傳喔！</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>sessionId<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> quickreplies<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sending...'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getNews</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> search_query <span class=\"token operator\">=</span> <span class=\"token function\">firstEntityValue</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token string\">'search_query'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search_query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>newsResult <span class=\"token operator\">=</span> search_query <span class=\"token operator\">+</span> <span class=\"token string\">'最近很多人討論...'</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// we should call a real API here</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// To-do</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>執行 <code class=\"language-text\">node example/quickstart.js &lt;Wit.ai server-side Token></code>\n就會得到以下結果。</p>\n<p><img src=\"/image/cli.png\" alt=\"example/quickstart.js Test\" title=\"example/quickstart.js Test\"></p>\n<p>在這邊先打岔一下，我們回到 Wit.ai 的 Dashboard 看一下，會發現 Inbox 上面有個小紅點？\nWit.ai 會在這個地方紀錄 User 傳送進來的句子，並且讓你在這邊操作它，也就是說，你可以在這邊利用 User 傳入的句子來 training 你的機器人！讓他直接從使用者身上學習！我覺得很棒的一個功能！</p>\n<p><img src=\"/image/inbox.png\" alt=\"Inbox\" title=\"Inbox\"></p>\n<p>ok，鏡頭再轉回到程式碼。</p>\n<p>已經知道怎麼實作函式了，那就接著把他跟 Messenger api 結合吧！</p>\n<p>其實跟剛剛的 quickstart.js 比較不一樣的的地方在於，你必須記錄起來每一個 fb user 的 session，這樣 Wit.ai Bot 才會知道要回傳給哪個 FB user。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This will contain all user sessions.</span>\n<span class=\"token comment\">// Each session has an entry:</span>\n<span class=\"token comment\">// sessionId -> {fbid: facebookUserId, context: sessionState}</span>\n<span class=\"token keyword\">const</span> sessions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findOrCreateSession</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fbid</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> sessionId<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Let's see if we already have a session for the user fbid</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>sessions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessions<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fbid <span class=\"token operator\">===</span> fbid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Yep, got it!</span>\n      sessionId <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sessionId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No session found for user fbid, let's create a new one</span>\n    sessionId <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>fbid<span class=\"token operator\">:</span> fbid<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> sessionId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接著我們其實就只要修改先前的 <code class=\"language-text\">quickstart.js</code> 以及 先前實作過的 messenger API 的部分code即可。\n因為我們的使用情境會讓 Bot 在接收訊息時，立刻先回傳文字，接著才會回傳查詢結果，而查詢結果則需要利用 Messenger API 傳送 <strong>GenericMessage</strong> 的結果，因此會需要兩種 return Method。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">firstEntityValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">entities<span class=\"token punctuation\">,</span> entity</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> entities <span class=\"token operator\">&amp;&amp;</span> entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n              Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n              entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n              entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Our bot actions</span>\n<span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Wit.ai 的 action 中，一定要實作的 send method，用來讓機器人說話</span>\n  <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  \t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>sessionId<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> quickreplies<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// find out user id</span>\n    <span class=\"token keyword\">const</span> recipientId <span class=\"token operator\">=</span> sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fbid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>recipientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// 這邊需要判斷要回傳的訊息是否為查詢結果</span>\n      <span class=\"token comment\">// 若 context 中帶有 newsResult 那就是要回傳查詢結果</span>\n      <span class=\"token comment\">// 因此就要呼叫 sendNewsMessagePromise() 來回傳 GenericMessage</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// fbBotUtil.sendNewsMessagePromise 這邊是 Messenger API 的相關實作</span>\n        <span class=\"token keyword\">return</span> fbBotUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendNewsMessagePromise</span><span class=\"token punctuation\">(</span>recipientId<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n              <span class=\"token string\">'Oops! An error occurred while forwarding the response to'</span><span class=\"token punctuation\">,</span>\n              recipientId<span class=\"token punctuation\">,</span>\n              <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>\n              err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">||</span> err\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 直接回傳普通文字</span>\n          <span class=\"token keyword\">return</span> fbBotUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendTextMessagePromise</span><span class=\"token punctuation\">(</span>recipientId<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'Oops! An error occurred while forwarding the response to'</span><span class=\"token punctuation\">,</span>\n                recipientId<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>\n                err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">||</span> err\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oops! Couldn\\'t find user for session:'</span><span class=\"token punctuation\">,</span> sessionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Giving the wheel back to our bot</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 我們自定義的 getNews action</span>\n  <span class=\"token function\">getNews</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>context<span class=\"token punctuation\">,</span> entities<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> search_query <span class=\"token operator\">=</span> <span class=\"token function\">firstEntityValue</span><span class=\"token punctuation\">(</span>entities<span class=\"token punctuation\">,</span> <span class=\"token string\">'search_query'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search_query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      \t<span class=\"token comment\">// 這邊是去呼叫api</span>\n      \t<span class=\"token comment\">// fetchr 是我實作的一個小函式，利用 import.io 去抓 Yahoo news 的搜尋結果。</span>\n      \t<span class=\"token comment\">// 不是這篇重點我就先略過啦~</span>\n        <span class=\"token function\">fetchr</span><span class=\"token punctuation\">(</span>search_query<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          context<span class=\"token punctuation\">.</span>newsResult <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'context newsResult'</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>missNews<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span>missNews <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>newsResult<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>實作完 Actions 的部分，記得到 router 裡面去增加 Wit.ai 的相關 Setting</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> wit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  accessToken<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Wit<span class=\"token punctuation\">.</span>ai <span class=\"token constant\">TOKEN</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  messaging_events <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> messaging_events<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>entry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      sender <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> sessionId <span class=\"token operator\">=</span> <span class=\"token function\">findOrCreateSession</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>message <span class=\"token operator\">&amp;&amp;</span> event<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        text <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Handle a text message from this sender</span>\n        wit<span class=\"token punctuation\">.</span><span class=\"token function\">runActions</span><span class=\"token punctuation\">(</span>\n          sessionId<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the user's current session</span>\n          text<span class=\"token punctuation\">,</span> <span class=\"token comment\">// the user's message</span>\n          sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>context <span class=\"token comment\">// the user's current session state</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Our bot did everything it has to do.</span>\n          <span class=\"token comment\">// Now it's waiting for further messages to proceed.</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Waiting for next user messages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// Updating the user's current session state</span>\n          sessions<span class=\"token punctuation\">[</span>sessionId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oops! Got an error from Wit: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">||</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面這大串 code 其實就是接收到你在 Messenger POST 出去的訊息後，呼叫定義好的 <code class=\"language-text\">wit.runActions</code>，然後就可以讓 Wit.ai 幫你分析 User 的語句，並且回覆出去。</p>\n<p>最後這邊放一下送出 我這邊用到的 fbBotUtil.sendNewsMessagePromise，也就是送出 messenger GenericMessage 的程式碼</p>\n<p><a href=\"https://gist.github.com/ArvinH/77e12ff1c4f8b0d77c2d15de36224ff5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Messenger GenericMessage API Usage</a></p>\n<h2 id=\"final-result\" style=\"position:relative;\"><a href=\"#final-result\" aria-label=\"final result permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final Result</h2>\n<p>剛剛我們設定的語句，是不是就透過 Messenger 送出來了呢～</p>\n<p><img src=\"/image/fbmessenger.gif\" alt=\"messenger with Wit.ai\" title=\"messenger with Wit.ai\"></p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>最後介紹一個方便的工具，ngrok。</p>\n<p>ngrok 可以讓你把 localhost 轉成外網可以存取的網址，也支援 https，因此我們 Debug 就方便多了，不需要每次都把程式 Deploy 到遠端機器以後才能測試，log 也能直接在本機端終端機看到！</p>\n<p>他的設定超簡單，到 <a href=\"https://ngrok.com/download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ngrok.com/download</a> 把程式下載回來，並且執行 <code class=\"language-text\">./ngrok http PORT</code></p>\n<p>會出現如下畫面，連 https 的網址都有！這樣一來，facebook要求的 https webhook 就不成問題了，當然實際上運行還是要去用 SSL 憑證啦...</p>\n<p><img src=\"/image/ngrok.png\" alt=\"ngrok\" title=\"ngrok\"></p>\n<!-- \n  介紹ngrok, 讓debug更方便\n-->","fields":{"slug":"chat-bot-wit-ai"},"frontmatter":{"title":"利用 Wit.ai 讓你的 Messenger Bot 更聰明！","date":"07-01-2016","tags":["wit.ai","messenger","bot"]},"timeToRead":13}},"pageContext":{"slug":"chat-bot-wit-ai","prev":{"excerpt":"\"好想把自己subscribe到鬧鐘上...\"","html":"<blockquote>\n<p>\"好想把自己subscribe到鬧鐘上...\"</p>\n</blockquote>\n<!-- more -->\n<p>Rx 其實也出來一段時間了，一直都沒有好好靜下心來研究他，前陣子看到一篇<a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>解釋得蠻好的，擷取重點並加入一些自己的心得範例供大家參考，畢竟 Rx 中文的介紹似乎少了點...</p>\n<p>相信聽過 Rx 的讀者，應該也會耳聞 RxJS, RxJAVA, RxAndroid等等，因此被 Google 慣壞的我們一定會試著去搜尋一下 Rx 到底是什麼</p>\n<p>然後在 Google Search Result page 的最下方會看到 MSDN 的 Reactive Extensions 和 ReactiveX </p>\n<p><img src=\"/image/RxGoogleResult.png\" alt=\"Rx goolge search result\" title=\"Rx goolge search result\"></p>\n<p>好的看來就是我們要找的東西，但這好眼熟喔? 是每天在寫的React嗎？難道是相關的東西？!</p>\n<p>定睛一看會發現... 恩，基本上沒什麼關係。</p>\n<p>Reactive Extensions 是 Microsoft open source 推廣的一個lib</p>\n<p><code class=\"language-text\">Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators.</code></p>\n<p>網站連結：<a href=\"https://rx.codeplex.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rx</a>\n網站連結：<a href=\"http://reactivex.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactiveX.io</a></p>\n<p><img src=\"/image/reactiveX.png\" alt=\"ReactiveX\" title=\"ReactiveX\"></p>\n<p><code class=\"language-text\">ReactiveX is a combination of the best ideas from\nthe Observer pattern, the Iterator pattern, and functional programming</code></p>\n<p>ok, Observer pattern, Iterator patter, functional programming 都聽過，而這些串起來似乎就是傳說中的 Reactive Programming.</p>\n<h1 id=\"what-is-reactive-programming\" style=\"position:relative;\"><a href=\"#what-is-reactive-programming\" aria-label=\"what is reactive programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Reactive Programming?</h1>\n<p>Reactive Programming 是一種以 asynchronous data streams 為中心思想出發的程式撰寫方式，比較常聽到的是 asynchronous event，像是 user click event, mouse hover event 等等，而這邊特別的則是 <strong><span style=\"color:red; font-style: italic;\">data<span></strong> 與 <strong><span style=\"color:red; font-style: italic;\">stream<span></strong>，顧名思義，Reactive Extensions 將 event 延伸為 data，並且注重在 stream （串流）上，也就是 <strong><span style=\"color:red; font-style: italic;\">時間序列上的一連串資料事件<span></strong>，Rx讓你將任何事情都變化為 data streams : variables, user inputs, properties, caches, data structures 等等皆可，透過 Observe 這些 data streams，並依據其造成的 side effects 進行對應的動作。</p>\n<h3 id=\"stream-時間序列上的一連串資料事件\" style=\"position:relative;\"><a href=\"#stream-%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97%E4%B8%8A%E7%9A%84%E4%B8%80%E9%80%A3%E4%B8%B2%E8%B3%87%E6%96%99%E4%BA%8B%E4%BB%B6\" aria-label=\"stream 時間序列上的一連串資料事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Stream</strong>:\t <strong>時間序列上的一連串資料事件</strong></h3>\n<p>以一個 click event 來說，在 user 點擊的動作發生後，會有一段時間觸發了幾個事件 (event stream)：value, error or completed signal</p>\n<p><img src=\"/image/clickeventstream.png\" alt=\"click event stream (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)\" title=\"click event stream \"></p>\n<p>而在 Reactive Programming 的概念下，你可以把任何事情都看作 <strong>Stream</strong>，並且 <strong>Observe</strong> stream 中的變化，以下面一個例子來說：</p>\n<p>假設我們想要印出一個包含 1 到 5 的 Array，一般我們會這樣做：</p>\n<p><a href=\"http://jsbin.com/fiyiyo/edit?js,console,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example 1</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptiterate1to5.js\"><pre class=\"language-javascriptiterate1to5.js\"><code class=\"language-javascriptiterate1to5.js\">\tvar source = [1,2,3,4,5];\n\tsource.map((item) =&gt; {\n\t  console.log(&quot;onNext: &quot;+item);\n\t})</code></pre></div>\n<p>然而，以Rx來說，任何事情都要 Observable，因此我們可以這樣做：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptobserve1to5.js\"><pre class=\"language-javascriptobserve1to5.js\"><code class=\"language-javascriptobserve1to5.js\">\t// Creates an observable sequence of 5 integers\n\tvar source = Rx.Observable.range(1, 5);\n\n\t// catch every status and print out value\n\tvar subscription = source.subscribe(\n\t    x =&gt; console.log(&#39;onNext: &#39; + x),\n\t  \n\t    e =&gt; console.log(&#39;onError: &#39; + e.message),\n\t  \n\t    () =&gt; console.log(&#39;onCompleted&#39;));</code></pre></div>\n<p>在上面的例子中，我們創建了一個 Observable 的整數陣列，並且透過 <strong>subscribe</strong> 的動作去 <strong>listening</strong> 這個陣列，當有我們設定的 event 觸發時，我們就會 <strong>observe</strong> 到，並採取對應動作，這基本上就是 <strong>Observer Design Pattern</strong> 做的事情</p>\n<h2 id=\"why-rxjs\" style=\"position:relative;\"><a href=\"#why-rxjs\" aria-label=\"why rxjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why RxJS</h2>\n<p>以 Javascript 來說，想要抓取這些事件，一般可以用 callback 或是 Promise 來達成，然而 Promise 主要設計於一次性的事件與單一回傳值，而 RxJS 除了包含 Promise 外，提供了更豐富的整合應用。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Single return value</th>\n<th>Mutiple return values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pull/Synchronous/Interactive</td>\n<td>Object</td>\n<td>Iterables (Array/Set/Map/Object)</td>\n</tr>\n<tr>\n<td>Push/Asynchronous/Reactive</td>\n<td>Promise</td>\n<td>Observable</td>\n</tr>\n</tbody>\n</table>\n<p>還記得前面 ReactiveX 的定義嗎？ \"combination of Observer pattern, <strong>Iterator pattern</strong> and functional programming\" </p>\n<p>RxJS 結合 Array#extras 的優點，讓你能夠方便處理 <strong>Multiple return values</strong></p>\n<p>延伸上面的例子來說：</p>\n<p><a href=\"http://jsbin.com/yizequ/edit?html,js,console,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example 2</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptiteratorpattern.js\"><pre class=\"language-javascriptiteratorpattern.js\"><code class=\"language-javascriptiteratorpattern.js\">\tconst data = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;];\n\tconst source = Rx.Observable\n\t                 .interval(500)\n\t                 .take(6)\n\t                 .map(i =&gt; data[i])\n\n\tconst result = source\n\n\tresult.subscribe(x =&gt; console.log(x));</code></pre></div>\n<p>當你 subscribe 這個 Observale 的 data source 時，他能讓你 <strong>監聽</strong> 陣列中，每 500ms (interval) 取一個值 (map(i => data[i])) 並取 6 次 (take(6))</p>\n<p>再回到最早的 click event 來說，假若我們想要能夠抓取 single click 與 double click 的事件，用最原始的 javascript 可能會需要許多變數來紀錄狀態、時間等等，但透過 RxJS 提供的 library，你只需要短短四行 code 就可以達成：</p>\n<p><a href=\"http://jsfiddle.net/staltz/4gGgs/27/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整範例</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptmulticlickstream.js\"><pre class=\"language-javascriptmulticlickstream.js\"><code class=\"language-javascriptmulticlickstream.js\">\tvar multiClickStream = clickStream\n\t    .buffer(function() { return clickStream.throttle(250); })\n\t    .map(function(list) { return list.length; })\n\t    .filter(function(x) { return x &gt;= 2; });</code></pre></div>\n<p><img src=\"/image/muticlick.png\" alt=\"Double click event (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)\" title=\"double click\">     </p>\n<p>由上圖可以清楚看到，RxJS 幫你把 Stream 上的 event 依照你想要的時間做 <strong>整理</strong>，<code class=\"language-text\">buffer</code> 住觸發時間在 250ms 間的 click events，並且利用 <code class=\"language-text\">map</code> 函式抓出每個 event list 的長度，並進一步抓出長度大於 2 ，也就是 double click 的 event 出來。</p>\n<p>接著你只需要 <code class=\"language-text\">subscribe</code> 你剛剛定義的 event stream，即可做出反應(reaction)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptmulticlickstream.js\"><pre class=\"language-javascriptmulticlickstream.js\"><code class=\"language-javascriptmulticlickstream.js\">\tmultiClickStream.subscribe(function (numclicks) {\n\t    document.querySelector(&#39;h2&#39;).textContent = &#39;&#39;+numclicks+&#39;x click&#39;;\n\t});</code></pre></div>\n<h3 id=\"more-examples-autocompletion-service\" style=\"position:relative;\"><a href=\"#more-examples-autocompletion-service\" aria-label=\"more examples autocompletion service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More examples (Autocompletion service)</h3>\n<p>以現在的 web app 來說，大量依賴 user 互動的效果與呈現，在不影響使用者體驗的前提下，多是用非同步的方式去抓取資料、渲染頁面等等，因此 Rx 系列的出現絕對是一個很大的助益。</p>\n<p>最後讓我們再以一個例子來做結尾，利用 RxJS 與 Jquery 打造 Wikipedia Autocompletion Service。</p>\n<p><a href=\"http://jsbin.com/yojuwu/edit?html,js,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整範例</a>\n(source: <a href=\"http://xgrommx.github.io/rx-book/why_rx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://xgrommx.github.io/rx-book/why_rx.html</a>)</p>\n<h3 id=\"step-1\" style=\"position:relative;\"><a href=\"#step-1\" aria-label=\"step 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">var</span> keyups <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'keyup'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> text<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Now throttle the input for 500ms */</span>\n\t<span class=\"token keyword\">var</span> throttled <span class=\"token operator\">=</span> keyups<span class=\"token punctuation\">.</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token comment\">/* ms */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/* Now get only distinct values, so we eliminate the arrows and other control characters */</span>\n\t<span class=\"token keyword\">var</span> distinct <span class=\"token operator\">=</span> throttled<span class=\"token punctuation\">.</span><span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>我們先利用 Rx.Observable.fromEvent 來 Create 一個 binding keyup event 的 Observalbe keyups object，並且針對每次事件發生時，回傳被綁定的元素其 value 值長度大於二的</li>\n<li>接著設定 keyups 的 throttle 時間，將 500ms 內的input當做一次event去觸發</li>\n<li>再來剔除掉不相干的控制輸入，只抓取 distinct 的 value</li>\n</ol>\n<h3 id=\"step-2\" style=\"position:relative;\"><a href=\"#step-2\" aria-label=\"step 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">searchWikipedia</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">term</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t        url<span class=\"token operator\">:</span> <span class=\"token string\">'http://en.wikipedia.org/w/api.php'</span><span class=\"token punctuation\">,</span>\n\t        dataType<span class=\"token operator\">:</span> <span class=\"token string\">'jsonp'</span><span class=\"token punctuation\">,</span>\n\t        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t            action<span class=\"token operator\">:</span> <span class=\"token string\">'opensearch'</span><span class=\"token punctuation\">,</span>\n\t            format<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n\t            search<span class=\"token operator\">:</span> term\n\t        <span class=\"token punctuation\">}</span>\n\t    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>簡單撰寫一個 ajax 來 fetch search api</li>\n<li>這邊我們直接 return promise，RxJS 會幫你 wrap 起來變成 Obserbale，或是你也可以利用 <code class=\"language-text\">Rx.Observable.fromPromise</code>來將原有的 Promise 改裝</li>\n</ol>\n<h3 id=\"step-3\" style=\"position:relative;\"><a href=\"#step-3\" aria-label=\"step 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">var</span> suggestions <span class=\"token operator\">=</span> distinct<span class=\"token punctuation\">.</span><span class=\"token function\">flatMapLatest</span><span class=\"token punctuation\">(</span>searchWikipedia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"6\">\n<li>利用 <a href=\"http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/flatmaplatest.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">flatMapLatest</a> 將剛才的 Observable object <code class=\"language-text\">distinct</code> 與 <code class=\"language-text\">searchWikipedia</code> function 做結合，then we good to go! (先不管flatMapLatest是什麼，總之他會將 distinct 這個 Observable sequence內的元素丟給 searchWikipedia，並將回傳回來的資料再轉換成 Observable sequence，讓人可以 subscribe)</li>\n</ol>\n<h3 id=\"step-4\" style=\"position:relative;\"><a href=\"#step-4\" aria-label=\"step 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\tsuggestions<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t    $results<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t    $<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;li>'</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">/* handle any errors */</span>\n\t    $results<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;li>Error: '</span> <span class=\"token operator\">+</span> error <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/li>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"7\">\n<li>接著就是 Subscribe 剛剛的 Observable sequence <strong>suggestions</strong>，並將 listen 到的資料 show 出來</li>\n</ol>\n<p>就這麼簡單完成了一個 Autocompletion 的 service 了！</p>\n<h3 id=\"題外話\" style=\"position:relative;\"><a href=\"#%E9%A1%8C%E5%A4%96%E8%A9%B1\" aria-label=\"題外話 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>題外話</h3>\n<p>先簡單介紹什麼是 flatMap 與 flatMapLatest，畢竟剛剛範例有用到，而實際上 RxJS 還有很多複雜的 function 可以應用，待之後我有時間再繼續專研吧！但有興趣的讀者可以在文章最下方的連結找到資源。</p>\n<p>flatMap 會將 一個 Observable Sequence 的元素 映射到 另一個新的 Observable Sequence，並且subscribe 原先的 Observable Sequence 的人也都可以聽得到</p>\n<p>簡單的例子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascriptflatmap\"><pre class=\"language-javascriptflatmap\"><code class=\"language-javascriptflatmap\">\tconsole.clear();\n\tvar source = Rx.Observable\n\t    .range(1, 2)\n\t    .flatMap(function (x) {\n\t        return Rx.Observable.range(x, 2);    \n\t    });\n\n\tvar subscription = source.subscribe(\n\t    function (x) {\n\t        console.log(&#39;Next: &#39; + x);\n\t    },\n\t    function (err) {\n\t        console.log(&#39;Error: &#39; + err);   \n\t    },\n\t    function () {\n\t        console.log(&#39;Completed&#39;);   \n\t    });\n\n    // Result: \n\t// =&gt; Next: 1 \n\t// =&gt; Next: 2  Rx.Observable.range(1, 2)\n\t// =&gt; Next: 2 \n\t// =&gt; Next: 3  Rx.Observable.range(2, 2)\n\t// =&gt; Completed    </code></pre></div>\n<p>See? 他會把 sequence 中的元素丟進 callback，並回傳 Observable sequence，你也可以丟入 Promise，就像範例中做的。</p>\n<p>而 flatMapLatest 則是只會進行最後一次的 sequence，以剛剛的範例來說，最後subscribe的人接收到的會是最新的那個 Observable sequence 的結果！而不會每打一個字所搜尋的結果都一直累加顯示上去。</p>\n<h2 id=\"one-more-thing\" style=\"position:relative;\"><a href=\"#one-more-thing\" aria-label=\"one more thing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>在我前面放的圖中，描繪 Click event 的 叫做 <strong>marble</strong> 圖，這邊有個網站可以讓你以視覺化互動的方式去操作這些 event，幫助你理解 Rx 當中的各個 function 之功用！非常推薦！！\n去玩玩吧！<a href=\"http://rxmarbles.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxmarbles</a></p>\n<h2 id=\"總結\" style=\"position:relative;\"><a href=\"#%E7%B8%BD%E7%B5%90\" aria-label=\"總結 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>總結</h2>\n<p>Rx 真的是蠻有趣的東西，提供的lib又號稱毫無相依性，可以應用在各種framework上方，只是必須要懂得如何Think in Reactive Programming，否則這些lib的用法還真的是不好理解，這篇拋磚引玉簡單介紹一下罷了，之後會再有更深入的研究！ 有什麼說明不對的地方也請見諒與指教！</p>\n<p>參考資料</p>\n<ul>\n<li><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The introduction to Reactive Programming you've been missing (by @andrestaltz)</a></li>\n<li><a href=\"http://xgrommx.github.io/rx-book/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rx-book</a></li>\n<li><a href=\"https://github.com/Reactive-Extensions/RxJS/tree/master/doc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactive-Extensions RxJS</a></li>\n<li><a href=\"http://rxmarbles.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxmarbles</a></li>\n</ul>","id":"635b391f-fdcd-5535-ae32-6b8a30486a37","fields":{"slug":"reactive-programming-簡介與教學-以-rx-js-為例"},"frontmatter":{"date":"2016-05-28T00:03:18.000Z","title":"Reactive Programming 簡介與教學(以 RxJS 為例)","tags":["rxjs","reactive programming"],"type":"tech","slug":"Reactive Programming 簡介與教學(以 RxJS 為例)"},"timeToRead":8},"next":{"excerpt":"\"所以你是說...我手機上會有我上傳到平台的資料？\"\n\"是的\"\n\"可是它顯示 0kb 呀？！\"","html":"<blockquote>\n<p>\"所以你是說...我手機上會有我上傳到平台的資料？\"\n\"是的\"\n\"可是它顯示 0kb 呀？！\"</p>\n</blockquote>\n<!-- more -->\n<p>距離今年 Google I/O 2016 轉眼間也過了兩個多月，議程中提及的 Progressive Web App (PWA) 似乎討論不多，我當時隨便掃過 Google Developers 上的資料後的念頭是：“怎麼有點像當年 Firefox OS 上跑 web app的長相？”</p>\n<p>其實我覺得是蠻雷同的，差別在於 Progressive Web App 是想能夠直接利用目前的 Browser 來支援其運作。實際上 Mozilla 一樣有在推動相關標準的建立。</p>\n<p>這也是我初次接觸 Progressive Web App，因此就照著 Google Developers 上的教學走一遍，並紀錄分享在此。</p>\n<h2 id=\"何謂-progressive-web-app-pwa\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E8%AC%82-progressive-web-app-pwa\" aria-label=\"何謂 progressive web app pwa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何謂 Progressive Web App (PWA)</h2>\n<p>先講結論，Progressive Web App 是希望能夠讓 Web application 盡可能的在各種環境（網路環境、手機作業系統等）下都能順暢且不減功能性的運作，並讓你的 Web App 可以：</p>\n<ol>\n<li>直接被使用者安裝到桌面</li>\n<li>offline 使用</li>\n<li>擁有推播功能</li>\n<li>開啟時看不到 URL Bar（類 Native app 的使用經驗）</li>\n<li>開啟時有 Splash Screen</li>\n</ol>\n<p>而要做到這些事情，整個 PWA 的設計要點就會包含以下特性：</p>\n<ul>\n<li><strong><span style=\"color: #c11b1b\">Progressive - 漸進增強：在越完善的環境下，能執行更加完整的服務，若環境不許可，能夠優雅降級，運行最基本的功能。</span></strong></li>\n<li>Responsive - 響應式介面：能夠在各種螢幕尺寸下顯示、能夠因應多種輸入方式與設備回饋（震動、音頻等）。</li>\n<li><strong><span style=\"color: #c11b1b\">App-like - 類原生程式的操作模式與使用者介面：採用原生平台（Native App）的 Style 與資料更新方式（利用 service worker 存取快取資源）。</span></strong></li>\n<li><strong><span style=\"color: #c11b1b\">Fresh - 持續更新：使用 Service worker API 來自動更新應用程式（無需透過 App store, Google Play 等）。</span></strong></li>\n<li>Safe - 應全面採用 HTTPS 提供最基本的安全防護。</li>\n<li>Discoverable - 透過設置 manifest 檔案，一樣能進行 SEO 優化，讓搜尋引擎找得到你的 APP。</li>\n<li><strong><span style=\"color: #c11b1b\">Re-engageable - 透過推播，能主動與使用者互動。</span></strong></li>\n<li><strong><span style=\"color: #c11b1b\">Installable - 可安裝：透過 Add To Home 等方式，將 Web App 放在手機桌面，並且能在應用程式中單獨列出與切換，就像一般的 App 一樣，但完全不用透過應用程式商店下載。</span></strong></li>\n<li>Linkable - 透過 URL 可以隨時分享你的 App。</li>\n</ul>\n<p>上面是官網所列出的，而紅色是我認為較為重點的特徵，而在這些重點特徵下，最大要點就是 Service worker。有了 Service worker 的幫助，你可以實作出離線可用的 Web App，讓 User 操作起來有更佳的使用體驗。</p>\n<!-- 簡介 service worker -->\n<h2 id=\"service-worker\" style=\"position:relative;\"><a href=\"#service-worker\" aria-label=\"service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service Worker</h2>\n<p>Service worker 是一個運行在瀏覽器背後的腳本，有其自己的生命週期，並獨立於網頁頁面。\n其特性如下：</p>\n<ul>\n<li><strong><span style=\"color: #071684\">Javascript worker，無法直接操作頁面 DOM，但可透過 <code class=\"language-text\">postMessage</code> 與頁面溝通，讓該頁面自行操作 DOM。</span></strong></li>\n<li><strong><span style=\"color: #071684\">Service worker 可以讓你截取並掌控頁面發出的 network request。(這點很重要！要記住！！)</span></strong></li>\n<li><strong><span style=\"color: #071684\">當 Service worker 不需要被使用時，會進入 Terminated 生命週期，等待下一次的需求進來。因此你在 onfetch 或是 onmessage 的 event handler 中若想要儲存全域變數，必須使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IndexedDB</a> API 來輔助儲存。</span></strong></li>\n<li><strong><span style=\"color: #071684\">使用 Promise (這對一般開發者來說應該已經不算難事)</span></strong></li>\n</ul>\n<p>待會進行 PWA 實作的時候，我們就會運用到 service worker，透過 intercept 以及 handle network requests 來幫忙處理 Cache 的議題。</p>\n<p>今天重點擺在 PWA，Service Worker 的相關介紹可以看這裡：\n<a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source: html5rocks</a>\n<img src=\"/image/sw-lifecycle.png\" alt=\"Service Worker LifeCycle\" style=\"width: 500px;\"/></p>\n<!-- 動手做第一個 pwa -->\n<p>看太多文字會想睡覺，所以開始動手做我們的第一個 Progressive Web App 吧！</p>\n<h1 id=\"progressive-web-app\" style=\"position:relative;\"><a href=\"#progressive-web-app\" aria-label=\"progressive web app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Progressive Web App</h1>\n<p>為求快速，我們跟著 Google developers 上的範例程式走一遍，才能專注在 PWA 的部分，不用去管其他細節。code 可以在此下載 <a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/pwa-weather.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google developers pwa example</a>，後續步驟會需要這份 code 來做對應比較方便理解。</p>\n<p>範例是一個天氣卡，可以顯示所選區域的天氣狀況，大致上會長這樣：</p>\n<img src=\"/image/pwa-weather-example-final.png\" alt=\"pwa-weather\" style=\"width: 200px;\"/>\n<h2 id=\"app-shell-architecture\" style=\"position:relative;\"><a href=\"#app-shell-architecture\" aria-label=\"app shell architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App Shell Architecture</h2>\n<p>當你用瀏覽器打開一個網頁時，通常都需要等該頁面載完需要的 javascript, css 等等檔案後，你才能看到一個完整的頁面，在 SPA 當道的現今更是如此（姑且先不談 server-side render）</p>\n<p>但還記得先前提過，Progressive Web App 的目標是想要能夠 <strong><span style=\"color: #c11b1b\">讓 Web application 盡可能的在各種環境（網路環境、手機作業系統等）下都能順暢且不減功能性的運作。</span></strong></p>\n<p>因此 PWA 提出了一個 <strong>App Shell Architecture</strong></p>\n<p>App shell architecture 將應用程式的基礎設施（infrastructure）、UI 與資料做分離，並利用 service worker 將 infra 與 UI 做 Cache，如此一來，當你重複打開 Web App 時，需要遠端載入的就只剩下資料，因為其他部分都已經先快取在本地端了（也可以把部分資料先快取起來）。</p>\n<p>由上述說明應該不難看出 app shell 的設計會非常重要，他決定了你的 User 進到你的 App 後的第一印象。所以在設計 App shell architecture 時，有幾個要點必須考量清楚：</p>\n<ul>\n<li>當 Web App 開啟時，哪些東西需要立即呈現在螢幕上?</li>\n<li>有哪些是重要的 UI components？</li>\n<li>此 app shell 是否需要 styles, javascript 等等資源？</li>\n</ul>\n<p>以今天的範例來說，我們會預期一開啟 App 時，要能馬上看到最上方的 Header 以及中間至少一張天氣預測卡，因此這兩個元件就會是我們必須設計進 App shell architecture 的 component。</p>\n<p>稍稍整理一下，我們的 App shell 將會擁有：</p>\n<ul>\n<li>顯示 App 名稱、更新與新增按鈕的 Header Bar</li>\n<li>Header 下方放置天氣卡的 Container</li>\n<li>天氣卡模板</li>\n<li>加入地區天氣時的對話筐</li>\n<li>載入狀態的 loader</li>\n</ul>\n<h2 id=\"app-shell-architecture-implementation\" style=\"position:relative;\"><a href=\"#app-shell-architecture-implementation\" aria-label=\"app shell architecture implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App shell architecture implementation</h2>\n<p>根據上方列出的需求，身為 web developer 一定很快就會把 HTML、CSS 刻好，甚至將可能需要的 JS 都先準備好，但實際上 Progressive web app 的重點其實在於如何將元件與資料做 cache ，以及 app-like 的顯示模式，因此我們跳過這些跟基礎 web 開發相關的步驟，直接到剛剛下載的範例檔案中，打開 step-04 資料夾，裡面就有了最 default 的元件 layout（<code class=\"language-text\">index.html</code>, <code class=\"language-text\">inline.cs</code>），以及資料 fetch 相關的 javascript 檔案（<code class=\"language-text\">app.js</code>）：</p>\n<img src=\"/image/step-04-foldr.png\" alt=\"step-04 folder\" style=\"width: 200px;\"/>\n<p><strong><span style=\"color: #c11b1b\">[!NOTICE] 需要將程式碼內的一些相關路徑修改一下才能正常運作喔！</span></strong></p>\n<p>開啟以後正常會看到如下畫面：</p>\n<p><img src=\"/image/step-04.gif\" alt=\"step-04\" title=\"step-04\"></p>\n<p>會先閃過 loading 圈圈，接著利用 <code class=\"language-text\">initialWeatherForecast</code> 做第一次資料繪製，這邊是先寫死一個假資料，但實務上應該要根據 user 當下 ip location 去抓取資料並更新。</p>\n<p>但不管是假資料與否，重點在於，當處理完第一次資料 fetch 後，要能夠 cache 起來，才能應付 slow connection 或是 offline 的狀況。也就是待會 service-worker 要負責的事情。</p>\n<p>此外，此 Wep app的功能中，要<strong>讓 user 能夠選擇想要的區域</strong>，我們總不能要 user 每次進來都重選，因此要能儲存這部分資訊，實務上可以用 <code class=\"language-text\">IndexDB</code> 來儲存，Google 推薦的 lib 為 <a href=\"https://www.npmjs.com/package/idb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">idb</a>，而這邊我們簡單用 LocalStorage API 來處理即可。</p>\n<p>相關設定在 <code class=\"language-text\">app.js</code> 當中：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapp.js\"><pre class=\"language-jsapp.js\"><code class=\"language-jsapp.js\"> // Iterate all of the cards and attempt to get the latest forecast data\n  app.updateForecasts = function() {\n    var keys = Object.keys(app.visibleCards);\n    keys.forEach(function(key) {\n      app.getForecast(key);\n    });\n  };\n\n  // Save list of cities to localStorage, see note below about localStorage.\n  app.saveSelectedCities = function() {\n    var selectedCities = JSON.stringify(app.selectedCities);\n    // IMPORTANT: See notes about use of localStorage.\n    localStorage.selectedCities = selectedCities;\n  };\n\n  app.selectedCities = localStorage.selectedCities;\n  if (app.selectedCities) {\n    app.selectedCities = JSON.parse(app.selectedCities);\n    app.selectedCities.forEach(function(city) {\n      app.getForecast(city.key, city.label);\n    });\n  } else {\n    app.updateForecastCard(initialWeatherForecast);\n    app.selectedCities = [\n      {key: initialWeatherForecast.key, label: initialWeatherForecast.label}\n    ];\n    app.saveSelectedCities();\n  }</code></pre></div>\n<p>如此一來，你可以新增想要的城市，在當你重新載入時，就會看到剛剛所選的城市依然會出現了。</p>\n<p><img src=\"/image/localstorage.gif\" alt=\"localstorage\" title=\"local storage test\"></p>\n<h2 id=\"use-service-worker-to-pre-cache-the-app-shell\" style=\"position:relative;\"><a href=\"#use-service-worker-to-pre-cache-the-app-shell\" aria-label=\"use service worker to pre cache the app shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Service Worker to Pre-cache the App Shell</h2>\n<h3 id=\"前情提要\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E6%83%85%E6%8F%90%E8%A6%81\" aria-label=\"前情提要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前情提要</h3>\n<p><strong><span style=\"color: #c11b1b\">Service worker 的功能只能在 localhost 或是 HTTPS 的環境下，並且目前的瀏覽器有支援的不多，至少要 Chrome 47 以上。不過相信會越來越多瀏覽器加入此支援的。</span></strong></p>\n<h3 id=\"step-1-註冊-service-worker\" style=\"position:relative;\"><a href=\"#step-1-%E8%A8%BB%E5%86%8A-service-worker\" aria-label=\"step 1 註冊 service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 1. 註冊 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">service worker</a></h3>\n<p>在我們的 <code class=\"language-text\">app.js</code> 中，需要先檢查是否有 service worker 存在，若無，則透過 <code class=\"language-text\">navigator.serviceWorker</code> 去註冊。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapp.js\"><pre class=\"language-jsapp.js\"><code class=\"language-jsapp.js\">if(&#39;serviceWorker&#39; in navigator) {  \n  navigator.serviceWorker  \n           .register(&#39;/service-worker.js&#39;)  \n           .then(function() { console.log(&#39;Service Worker Registered&#39;); });  \n}</code></pre></div>\n<p>當然，我們也要創建好我們的 <code class=\"language-text\">service-worker.js</code>。 Service worker 的檔案要放在<strong>根目錄</strong>底下，因為 service worker 的 js scope 是包含其所在之目錄。</p>\n<h3 id=\"step-2-pre-cache-assets\" style=\"position:relative;\"><a href=\"#step-2-pre-cache-assets\" aria-label=\"step 2 pre cache assets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 2. Pre-cache assets</h3>\n<p>當 service worker 被註冊好後，當使用者初次開啟我們的 web app，會觸發一個 <code class=\"language-text\">install</code> event，而我們可以在這個 event handler 中 cache 住我們需要的 assets。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;install&#39;, function(e) {\n  console.log(&#39;[ServiceWorker] Install&#39;);\n  e.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      console.log(&#39;[ServiceWorker] Caching App Shell&#39;);\n      return cache.addAll(filesToCache);\n    })\n  );\n});</code></pre></div>\n<p><strong>其中的 caches 是 Service Worker API 中的 <code class=\"language-text\">CacheStorage</code>，可以到 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a> 瞭解一下。</strong></p>\n<p>此外，<code class=\"language-text\">chacheName</code> 的設定也是蠻重要的，可以依此來分開你的資料與 App shell 的快取。</p>\n<p>當你 <code class=\"language-text\">caches.open</code>後，裡面的 callback 可以呼叫 <code class=\"language-text\">cache.addAll()</code> 來將 assets 放入快取，<code class=\"language-text\">cache.addAll()</code> 接受 <code class=\"language-text\">URL</code> list，像是這樣的格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">var filesToCache = [  \n  &#39;/&#39;,  \n  &#39;/index.html&#39;,  \n  &#39;/scripts/app.js&#39;,  \n  &#39;/styles/inline.css&#39;,  \n  &#39;/images/clear.png&#39;,  \n  &#39;/images/cloudy-scattered-showers.png&#39;,  \n  &#39;/images/cloudy.png&#39;,  \n  &#39;/images/fog.png&#39;,  \n  &#39;/images/ic\\_add\\_white\\_24px.svg&#39;,  \n  &#39;/images/ic\\_refresh\\_white\\_24px.svg&#39;,  \n  &#39;/images/partly-cloudy.png&#39;,  \n  &#39;/images/rain.png&#39;,  \n  &#39;/images/scattered-showers.png&#39;,  \n  &#39;/images/sleet.png&#39;,  \n  &#39;/images/snow.png&#39;,  \n  &#39;/images/thunderstorm.png&#39;,  \n  &#39;/images/wind.png&#39;  \n];</code></pre></div>\n<p>建議你加入版號來設置你的 <code class=\"language-text\">cachName</code>，這樣才能確保每次更新都能拿到最新資料。不過要記得將過期的 cache 清空！\n我們可以在 <code class=\"language-text\">activate</code> 這個 event 的 handler 來做這件事情。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;activate&#39;, function(e) {  \n  console.log(&#39;[ServiceWorker] Activate&#39;);  \n  e.waitUntil(  \n    caches.keys().then(function(keyList) {  \n      return Promise.all(keyList.map(function(key) {  \n        console.log(&#39;[ServiceWorker] Removing old cache&#39;, key);  \n        if (key !== cacheName) {  \n          return caches.delete(key);  \n        }  \n      }));  \n    })  \n  );  \n});</code></pre></div>\n<h3 id=\"step-3-fetch-assets-from-cache-or-not\" style=\"position:relative;\"><a href=\"#step-3-fetch-assets-from-cache-or-not\" aria-label=\"step 3 fetch assets from cache or not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 3. Fetch assets from cache or not</h3>\n<p>到目前為止，我們知道了怎麼把 assets 存進 cache 裡面，但要怎麼拿出來呢？\n我們註冊一個 <code class=\"language-text\">fetch</code> event handler，用來擷取 web app 發出的 request，當 request 有 match 到我們剛剛存入的那些 assets 時，我們就從中取出並回傳，若並沒有 match 到，則利用 <code class=\"language-text\">fetch</code> api 去真的打 request。 [ fetch api 也是目前實驗中的 web api，介紹可看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fetch api</a> ]</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;fetch&#39;, function(e) {  \n  console.log(&#39;[ServiceWorker] Fetch&#39;, e.request.url);  \n  e.respondWith(  \n    caches.match(e.request).then(function(response) {  \n      return response || fetch(e.request);  \n    })  \n  );  \n});</code></pre></div>\n<h3 id=\"beware-of-the-edge-cases\" style=\"position:relative;\"><a href=\"#beware-of-the-edge-cases\" aria-label=\"beware of the edge cases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Beware of the edge cases</h3>\n<p>目前範例中的 code 實際上並不適合運用在 production 上頭，因為有許多 edge cases 沒有被考慮與處理到：</p>\n<ol>\n<li>剛剛提過的，當你的 content 有變動時，cache key 要更新（範例內我們需要手動更新）。</li>\n<li>只要你的檔案有一點點更動，小至 typo，大至 code refactor，都會造成 cache invalidated，需要重新下載，效率不好。</li>\n<li>必須確保 service-worker 中的 <code class=\"language-text\">install handler</code> 所發出的 https request 不會被 Brower cache 影響，否則會無法 update。</li>\n<li>最重要的一點，範例採用 cache-first 的策略，任何 request 只要有 cache 在就會先拿 cache，若 service worker 相關的註冊與設定也被 cache 時，更新會變得很困難。</li>\n</ol>\n<p>Google 提出一套 lib <a href=\"https://github.com/GoogleChrome/sw-precache\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sw-precache</a> 來幫助你避免上述的 edge cases，這超出此篇的範疇，但若要製作 Productoin 版本的 PWA 時，務必研究一下。</p>\n<p>此外，在開發中，也可以透過 <code class=\"language-text\">chrome://serviceworker-internals</code> 來 stop、un-register 現存的 service workers 以及 fresh start service worker。</p>\n<h3 id=\"test-service-worker\" style=\"position:relative;\"><a href=\"#test-service-worker\" aria-label=\"test service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Service worker</h3>\n<p>現在我們可以來試試看剛剛的 service worker 到底能不能幫我們把 assets cache 起來，你可以像 Google 教學中 deploy 到 <a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/step-08?hl=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">firebase</a>，也可以學我直接用 express 來 host。</p>\n<p>用 express 來 host 範例需要更動幾個地方：</p>\n<ol>\n<li>把範例的 index.html, inline.css, app.js 和一些 images 放入 express 中的相對路徑。</li>\n<li>修改 service-worker.js 中的 <code class=\"language-text\">filesToCache</code> 相對路徑，主要是 app.js 與 inline.css</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker-in-express.js\"><pre class=\"language-jsservice-worker-in-express.js\"><code class=\"language-jsservice-worker-in-express.js\">var filesToCache = [\n  &#39;/&#39;,\n  &#39;/javascripts/app.js&#39;,\n  &#39;/stylesheets/inline.css&#39;,\n  &#39;...&#39;,\n  &#39;..&#39;</code></pre></div>\n<p>啟動server 後，開啟 Chrome devTool 的 resources tab，應該可以看到如下畫面，就代表你的 service worker 有成功幫你 cache 住 assets：</p>\n<p><img src=\"/image/cache-example.png\" alt=\"service-worker cache\" title=\"service-worker cache\"></p>\n<h3 id=\"step-4-cache-data\" style=\"position:relative;\"><a href=\"#step-4-cache-data\" aria-label=\"step 4 cache data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>step 4. Cache Data</h3>\n<p>接下來我們要 cache 住資料！</p>\n<p>策略上分兩種：</p>\n<ol>\n<li>cache first then network：一次發兩種 request，先抓 cache 資料，等 network request 回來後更新 cache。</li>\n<li>network first then cache：先發 network request，若 timeout 再撈 cache 資料。</li>\n</ol>\n<p>這邊我們採用 cache-first，才能因應快速 response 與 offline 使用的需求。</p>\n<p>首先我們得在 service-worker 中加入一個 <code class=\"language-text\">dataCacheName</code>，用以區分資料與 app shell 的 cache。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">var dataCacheName = &#39;weatherData-v1&#39;;</code></pre></div>\n<p>接著在 <code class=\"language-text\">fetch</code> event handler 中，我們將抓取資料的API request 與其他 request 分開。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsservice-worker.js\"><pre class=\"language-jsservice-worker.js\"><code class=\"language-jsservice-worker.js\">self.addEventListener(&#39;fetch&#39;, function(e) {  \n  console.log(&#39;[ServiceWorker] Fetch&#39;, e.request.url);  \n  var dataUrl = &#39;https://publicdata-weather.firebaseio.com/&#39;;  \n  if (e.request.url.indexOf(dataUrl) === 0) {  \n    // Put data handler code here  \n  } else {  \n    e.respondWith(  \n      caches.match(e.request).then(function(response) {  \n        return response || fetch(e.request);  \n      })  \n    );  \n  }  \n});</code></pre></div>\n<p>上面的 code 中，service-worker 會擷取頁面發出的 request，如果包含 dataUrl，我們就另外處理：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">e<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>  \n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>dataCacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[ServiceWorker] Fetched&amp;Cached Data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>  \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用 <code class=\"language-text\">fetch API</code> 發送 request，送回來的 response 再傳回去之前，會先 clone 一份到 cache 當中。</p>\n<p>到這邊為止我們 cache 住資料了，但還是不能 offline 運作！因為還少了一個步驟，先前提到我們要同步發送 <strong>兩個</strong> request，一個抓 cache，一個真的送資料。</p>\n<p>在 <code class=\"language-text\">app.js</code> 中的 <code class=\"language-text\">app.getForecast</code>裡加入這段：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsapp.js\"><pre class=\"language-jsapp.js\"><code class=\"language-jsapp.js\">if (&#39;caches&#39; in window) {\n  caches.match(url).then(function(response) {\n    if (response) {\n      response.json().then(function(json) {\n        // Only update if the XHR is still pending, otherwise the XHR\n        // has already returned and provided the latest data.\n        if (app.hasRequestPending) {\n          console.log(&#39;[App] Forecast Updated From Cache&#39;);\n          json.key = key;\n          json.label = label;\n          app.updateForecastCard(json);\n        }\n      });\n    }\n  });\n}</code></pre></div>\n<p>先檢查 <code class=\"language-text\">window</code> 有無支援 <code class=\"language-text\">caches</code> object，接著從 caches 中拿出資料，這時要確認一下同時發送出去的 network request 是否已經 response 回來了，我們這邊用個 flag <code class=\"language-text\">app.hasRequestPending</code> 來控制。只有在 network response 還沒回來前我們會使用 caches 內的資料。</p>\n<p>而在發送原本的 <code class=\"language-text\">XMLHttpRequest</code> 之前，記得加上 <code class=\"language-text\">app.hasRequestPending = true;</code>，並在 <code class=\"language-text\">app.updateForecastCard(response)</code>之前，將 <code class=\"language-text\">app.hasRequestPending</code> 設為 false。</p>\n<h3 id=\"test-offline-function\" style=\"position:relative;\"><a href=\"#test-offline-function\" aria-label=\"test offline function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test Offline function</h3>\n<p>到目前為止我們的 Web app 已經可以在 offline 使用了，即便遠端 host 掛掉，我們能從 cache 中抓到我們的 App Shell，並且透過 service worker 幫我們去跟 <code class=\"language-text\">https://publicdata-weather.firebaseio.com/</code> 要資料；若是連網路都沒有，至少會有 cache 的資料可以顯示！</p>\n<p><img src=\"/image/offline-1.gif\" alt=\"offline test I- without host server\" title=\"offline test\"></p>\n<p><img src=\"/image/offlinetest-2.gif\" alt=\"offline test II - without network connection\" title=\"offline test\"></p>\n<h2 id=\"support-native-integration\" style=\"position:relative;\"><a href=\"#support-native-integration\" aria-label=\"support native integration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support Native Integration</h2>\n<p>Progressive Web App 的最後一哩路，我們要加入 Add-to-Homescreen。</p>\n<p>要有 Add to Homescreen 的功能不難，只要加入一個 manifest.json 即可，透過這方式打開的 Web App 不會顯示出 URL bar，看起來就像一般的 App！你也可以再加入 Web app install banners，這邊就不討論，可以看這篇的教學 - <a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web app install banners</a></p>\n<h3 id=\"web-app-manifest\" style=\"position:relative;\"><a href=\"#web-app-manifest\" aria-label=\"web app manifest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web App Manifest</h3>\n<p>透過 web app manifest，你可以：</p>\n<ul>\n<li>像 App 一般有個漂亮 icon 顯現在 Android 的 Homescreen 上。</li>\n<li>開啟時可以進入全螢幕畫面，不顯示 URL bar！</li>\n<li>控制 screen orientation。</li>\n<li>設定 <code class=\"language-text\">splash screen</code>，以前是為了降低 User 等待載入時間，但現在通常都用來宣傳你的網站品牌等等（有些人是不推薦使用...）</li>\n<li>追蹤你的 App 是從 homescreen 還是 url 開啟。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsonmanifets.json\"><pre class=\"language-jsonmanifets.json\"><code class=\"language-jsonmanifets.json\">{\n  &quot;name&quot;: &quot;Weather&quot;,\n  &quot;short_name&quot;: &quot;Weather&quot;,\n  &quot;icons&quot;: [{\n    &quot;src&quot;: &quot;images/icons/icon-128x128.png&quot;,\n      &quot;sizes&quot;: &quot;128x128&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/icons/icon-144x144.png&quot;,\n      &quot;sizes&quot;: &quot;144x144&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/icons/icon-152x152.png&quot;,\n      &quot;sizes&quot;: &quot;152x152&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/touch/icon-192x192.png&quot;,\n      &quot;sizes&quot;: &quot;192x192&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }, {\n      &quot;src&quot;: &quot;images/touch/icon-256x256.png&quot;,\n      &quot;sizes&quot;: &quot;256x256&quot;,\n      &quot;type&quot;: &quot;image/png&quot;\n    }],\n  &quot;start_url&quot;: &quot;/&quot;,\n  &quot;display&quot;: &quot;standalone&quot;,\n  &quot;background_color&quot;: &quot;#3E4EB8&quot;,\n  &quot;theme_color&quot;: &quot;#2F3BA2&quot;\n}</code></pre></div>\n<p>[小技巧] 可以透過在 <code class=\"language-text\">start_url</code> 設置 query string 的參數來追蹤開啟來源。</p>\n<p>manifest 檔案設定好後記得回到你的 <code class=\"language-text\">index.html</code> 的 <code class=\"language-text\">&lt;head></code> 加上 <code class=\"language-text\">&lt;link rel=\"manifest\" href=\"/manifest.json\"></code></p>\n<h3 id=\"for-safari-in-ios\" style=\"position:relative;\"><a href=\"#for-safari-in-ios\" aria-label=\"for safari in ios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for safari in ios</h3>\n<p>如果要用在 ios 上的 safari 還需要額外設定</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Add to home screen for Safari on iOS --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-mobile-web-app-capable<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-mobile-web-app-status-bar-style<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-mobile-web-app-title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Weather App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>images/icons/icon-152x152.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"best-practices\" style=\"position:relative;\"><a href=\"#best-practices\" aria-label=\"best practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Best practices</h3>\n<ul>\n<li>在你網站的每個 page 都可放入 manifest.json，這樣不管 user 是從哪頁進去，Chrome都能偵測到</li>\n<li><code class=\"language-text\">short_name</code> 盡量都要設置，優先權高於 <code class=\"language-text\">name</code> 這個 field。</li>\n<li>icon 的大小要盡可能符合多種 device。</li>\n<li>icon 也要考量到是否符合 slash screen，並記得設置 <code class=\"language-text\">background_color</code></li>\n</ul>\n<h2 id=\"final\" style=\"position:relative;\"><a href=\"#final\" aria-label=\"final permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final</h2>\n<p>最終到你手機上的呈現就會像這樣：</p>\n<p>IOS 版本 (ISO 版本看不到 splash screen，不確定原因，可能版本不支援）：</p>\n<img src=\"/image/iphoneDemo_1.gif\" alt=\"iphone demo\" style=\"width: 400px;\">\n<p>Android 版本（主要是看得到 splash screen..）：</p>\n<img src=\"/image/android-1.jpg\" alt=\"android demo\" style=\"width: 300px;\"/>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>看了今年 Google I/O 與 Apple WWDC 後，Apple 感覺想把 App 更融入他們的系統，以後或許不會再有 App 的概念，就是 Apple。而 Google 則持續推廣 Progressive Web App，希望讓 Web 能夠更行動化，似乎都希望能夠弭平一些隔閡。</p>\n<p>我個人是蠻希望 Progressive Web App 的方式能普及，可惜現在的瀏覽器支援度還很差，需要更多時間，但大家應該有看過這張圖：</p>\n<img src=\"/image/appinstall.png\" alt=\"source: https://www.youtube.com/watch?v=MyQ8mtR9WxI\" style=\"width: 300px;\"/>\n<p>App 從下載到安裝使用的人數差了四分之一，如果 Progressive Web App 可以起來的話，相信對使用者與開發者來說都是雙贏的局面（更多人使用、又不會佔手機空間、又不用到 app store 更新），但大廠怎麼想就不知道了...</p>\n<p>但至少 Progressive web app 會帶給使用者更好的 web 瀏覽體驗是無庸置疑的！</p>\n<!-- 資料來源 -->\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/?hl=zh-tw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google developer web fundamentals</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">html5rocks: service-worker</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google developer web app install banner</a></li>\n</ol>","id":"eeb84b85-b27f-55a1-9095-19d8c77d40c5","fields":{"slug":"progressive-web-app"},"frontmatter":{"date":"2016-07-18T20:46:02.000Z","title":"Progressive Web App 會是未來趨勢嗎？","tags":["pwa"],"type":"tech","slug":"progressive-web-app"},"timeToRead":16},"type":"tech"}},"staticQueryHashes":["2123680655"]}