{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/dataviz-yearendreview","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>『沒耐心的人什麼事都幹不成, 怕麻煩的人會被麻煩一輩子』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>從 2017 年開始，我每天都會用 Google Calendar 紀錄生活，也在年底的時候利用 D3.js 與 Google api 將紀錄的資料視覺化出來做個年終回顧。（沒看過的讀者可以往這裡走：<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>）</p>\n<p>2018 當然也不例外，我依然持續記錄每天的日常，透過每週回顧自己的時間花費來調整目標與心理狀態。</p>\n<p>而既然我有了兩年的資料，不拿來比較看看就太可惜了，因此決定在我今年的最後一篇文章中，將 2017 年與 2018 年的資料做個視覺化的比較，看看我在工作、生活、娛樂以及自我進修等上面的時間調配是否有照著我去年所希望的步調進行。在一年的尾聲，好好面對自己！</p>\n<p>一樣先附上成果與 <a href=\"https://blog.arvinh.info/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">demo link</a>：</p>\n<p><img src=\"/image/YearEndReview-2018_.png\" alt=\"YearEndReview-2018\"></p>\n<h2 id=\"工具\" style=\"position:relative;\"><a href=\"#%E5%B7%A5%E5%85%B7\" aria-label=\"工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工具</h2>\n<p>工具的使用上，這次並沒有使用 D3.js，畢竟以需求來說，D3.js 太大材小用了，加上我前陣子發現一個基於 D3.js 與 React 的視覺化 library - <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a>，看起來非常不錯，所以這次就拿這套來試試看，透過這套工具，整個作品大概不用花費一小時就可以完成了，大多的時間都是在處理資料格式上。</p>\n<p>而抓取 Google Calendar 資料的部分，一樣使用 Google 的 api，只不過一年過去，Google api 也是有所更新，不過問題不大，稍微修改一些小地方即可，稍後會帶到。</p>\n<h2 id=\"視覺化的第一步取得資料\" style=\"position:relative;\"><a href=\"#%E8%A6%96%E8%A6%BA%E5%8C%96%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%8F%96%E5%BE%97%E8%B3%87%E6%96%99\" aria-label=\"視覺化的第一步取得資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>視覺化的第一步，取得資料</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a>中我有提到過，雖然 Google 有提供一個 <a href=\"https://takeout.google.com/settings/takeout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Takeout</a> 的功能，你也能直接匯出日曆，但是下載到的資料其格式都是 <a href=\"https://zh.wikipedia.org/wiki/ICalendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">iCalendar</code></a>，除非你在每個紀錄的項目上都有很詳細的紀錄內容，才有辦法去將每一項 task 都進行分類，像我只用顏色來區分的就沒辦法。</p>\n<p><img src=\"/image/google-takeout.png\" alt=\"Google Takeout\"></p>\n<p>所以還是得靠 Google 提供的 Calendar API 來取得資料。</p>\n<p>而 Google Calendar API 的使用方式很簡單，只要照著<a href=\"https://console.developers.google.com/start/api?id=calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">說明</a>拿到憑證後，就可以從他們提供的<a href=\"https://developers.google.com/google-apps/calendar/quickstart/nodejs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例</a> 來修改實作。</p>\n<p>基本上跟我<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年寫的</a>差不多，主要是在 auth 的套件（拿 cretential 的方式）以及 api 回傳的 schema 有所變動：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var googleAuth = require('google-auth-library');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const { google } = require('googleapis');\n</span>// If modifying these scopes, delete token.json.\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nvar SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n<span class=\"token prefix deleted\">-</span>  process.env.USERPROFILE) + '/.credentials/';\n<span class=\"token prefix deleted\">-</span> var TOKEN_PATH = TOKEN_DIR + 'calendar-nodejs-quickstart.json';\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const TOKEN_PATH = 'token.json';</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">function listEvents(auth, pageToken) {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> var calendar = google.calendar('v3');\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> const calendar = google.calendar({version: 'v3', auth});\n</span>const queryOptions = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> auth: auth,\n<span class=\"token prefix unchanged\"> </span> calendarId: 'primary',\n<span class=\"token prefix unchanged\"> </span> timeMax: (new Date()).toISOString(),\n<span class=\"token prefix unchanged\"> </span> singleEvents: true,\n<span class=\"token prefix unchanged\"> </span> orderBy: 'startTime'\n</span>};\nif (pageToken) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> queryOptions.pageToken = pageToken;\n</span>}\ncalendar.events.list(queryOptions, function (err, response) {\nif (err) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('The API returned an error: ' + err);\n<span class=\"token prefix unchanged\"> </span> return;\n</span>}\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>var events = response.items;\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>const resData = response.data || {};\n<span class=\"token prefix inserted\">+</span>const events = resData.items;\n</span>if (events.length == 0) {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> console.log('No upcoming events found.');\n</span>} else {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> // ...\n</span>}\n// ...\n}\n}</code></pre></div>\n<p>完整的程式碼我一樣有放在 <a href=\"https://gist.github.com/ArvinH/5960a33b54fb03d504bcba7a4d5982e5#file-fetchcalendardata-js-L86-L151\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a> 上，如果你也想要用 Google API 下載自己的 Calendar，基本上除了 <code class=\"language-text\">listEvents</code> 函數內的部分以外，都可以直接照抄，<code class=\"language-text\">listEvents</code> 內的程式碼是 API 的 callback，主要是負責後續資料的處理，將之轉化成我們視覺化所需要的格式。而關於 Calendar api 相關參數的介紹，可以參考<a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">去年的文章</a>。</p>\n<h1 id=\"nivo\" style=\"position:relative;\"><a href=\"#nivo\" aria-label=\"nivo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nivo</h1>\n<p>接下來介紹一下 <a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a> 這套工具。</p>\n<p>它是 <a href=\"https://twitter.com/benitteraphael\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Raphaël Benitte</a> 所製作，基於 D3.js 與 React.js 的視覺化套件。</p>\n<p><img src=\"/image/nivo-cover.png\" alt=\"nivo\"></p>\n<p>比起市面上其他套件，我自己認為 nivo 的優勢有幾點：</p>\n<ul>\n<li>對於 Server-side render 的支援度很高。</li>\n<li>由於支援 React SSR，nivo 提供了 api 介面，讓你能透過 http request 產生圖表 - 詳情可看 <a href=\"https://github.com/plouc/nivo-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo-api</a>。</li>\n<li>Mono repo 的方式管理 packages，可以依照需求，只安裝你需要的圖表 package。</li>\n<li>宣告式的寫法，加上他互動式的文件範例，套用他的圖表幾乎沒有學習曲線。</li>\n</ul>\n<p><img src=\"/image/nivo-bar-doc.png\" alt=\"nivo 文件網站\"></p>\n<ul>\n<li>部分元件提供 Canvas 實作的版本，大量數據也不怕！</li>\n<li>動畫部分使用 <code class=\"language-text\">react-motion</code>，寫過 react 的人應該不陌生，<code class=\"language-text\">react-motion</code> 可說是 react 動畫界的翹楚啊！</li>\n<li>每個元件都有對應的 <code class=\"language-text\">Storybook</code> 可以看，非常的 developer-friendly!</li>\n</ul>\n<p>當然也是有缺點的：</p>\n<ul>\n<li>不是每個元件都支援動畫，這時候會知道 D3.js 的好(?</li>\n<li>圖表種類固定，比較難有創意的發揮。</li>\n</ul>\n<p>基於以上的優缺點，不難看出，如果是對於不熟悉 D3.js 或是想要快速產出圖表，但又想要有動畫效果或是互動性的人來說，直接採用 nivo 這類的 library 會是很不錯的選擇，也是我這次採用的原因。</p>\n<h1 id=\"開始進行我們的圖表製作吧\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E9%80%B2%E8%A1%8C%E6%88%91%E5%80%91%E7%9A%84%E5%9C%96%E8%A1%A8%E8%A3%BD%E4%BD%9C%E5%90%A7\" aria-label=\"開始進行我們的圖表製作吧 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始進行我們的圖表製作吧！</h1>\n<p>基本的想法一樣是將資料用 Calendar 圖表呈現，觀察每種類別的 task 在一年中的分佈狀況，並且加入去年的資料來做對比。</p>\n<p>接著，想利用一個折線圖來觀察單一類別在每個月的波動，是不是在某些月份我比較勤奮工作、某些月份很認真在進修或玩樂。當然這些資訊從 Calendar 圖表也看得出來，但是用月加總的數值呈現在折線圖上，感覺會更直接一點。</p>\n<p>最後在把每種類別的資料集結起來，利用 Waffle 圖表，一目瞭然各個類別的比例關係。</p>\n<p>要達成上面三個想法，我們只需要使用 nivo 的 <a href=\"https://github.com/plouc/nivo/tree/master/packages/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/calendar</a>、<a href=\"https://github.com/plouc/nivo/tree/master/packages/line\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/line</a> 與 <a href=\"https://github.com/plouc/nivo/tree/master/packages/waffle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nivo/waffle</a> 三種套件即可。</p>\n<p>使用方法都很簡單，基本上只要到對應的 doc 頁面，就直接有現成的程式碼可以<del>複製</del>參考。</p>\n<p>像是 <a href=\"https://nivo.rocks/calendar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calendar</a>:</p>\n<p><img src=\"/image/nivo-calendar-doc.gif\" alt=\"calendar doc demo\"></p>\n<p>重點反而是資料格式，即便我們只是想繪製三種圖表，但就需要整理出三種資料格式，才能夠符合其各自的需求，一樣可以從 nivo 的 doc 中找到每個圖表所需要的資料格式（data tab）。</p>\n<p>我製作範例的 parser 放在 <a href=\"https://github.com/ArvinH/YearEndReview-2018/tree/master/src/dataParser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 上，有興趣可以參考，不過就只是一些髒髒的資料轉換，是個耗時費力的工作啊...</p>\n<p>值得一提的是，這邊我除了轉化資料格式外，還花了不少時間在做資料的整理與同步。</p>\n<p>為什麼呢？</p>\n<p>因為每天的日誌是我自己手動輸入，顏色 label 也是我自己標記，有些事項的類別在 2017 年與 2018 年我用的是不同的顏色，但卻應該是分在同類中，這在做對比時，就會有問題了，因此花了不少時間從 2017 年一月開始過到 2018 年十二月...所以如果有人想跟我一樣這樣紀錄的話，或許可以用 Calendar 內建的分類功能，而不要像我一樣用手動標記顏色的方式。</p>\n<p>總之，當資料處理好以後，照著網站範例將我們想要的元件放到頁面上即可，這邊我是直接用 CRA 製作 React SPA，其中 <code class=\"language-text\">Calendar</code> 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ResponsiveCalendar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nivo/calendar'</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Calendar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ResponsiveCalendar\n        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>\n        from<span class=\"token operator\">=</span><span class=\"token string\">\"2017-01-01\"</span>\n        to<span class=\"token operator\">=</span><span class=\"token string\">\"2018-12-31\"</span>\n        emptyColor<span class=\"token operator\">=</span><span class=\"token string\">\"#eeeeee\"</span>\n        colors<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"#61cdbb\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#97e3d5\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#e8c1a0\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"#f47560\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n        margin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"bottom\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        yearSpacing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">45</span><span class=\"token punctuation\">}</span>\n        monthBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        monthLegendOffset<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n        dayBorderWidth<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n        dayBorderColor<span class=\"token operator\">=</span><span class=\"token string\">\"#ffffff\"</span>\n        legends<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"anchor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bottom-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"direction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"row\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"translateY\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemHeight\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"itemDirection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"top-to-bottom\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Calendar<span class=\"token punctuation\">;</span></code></pre></div>\n<p>從上面的範例看得出來，你有許多 <code class=\"language-text\">options</code> 可以設定，像是資料的起始日期(<code class=\"language-text\">from</code>、<code class=\"language-text\">to</code>)、資料顏色的區間或是各種 margin 等都能調整，非常方便好用。</p>\n<p>唯一要注意的是，如果採用支援 RWD 的元件（像是這邊用的 <code class=\"language-text\">ResponsiveCalendar</code>），記得要給定這個 Component 的 Parent component 固定的高度，否則 nivo 的元件偵測到高度為零時，就不會 render 了，所以記得要多加個有高度的 Wrapper 在 nivo 的元件上。</p>\n<p>其他的實作細節基本上就是 React 而已，真的有興趣<del>（想看看 code 有多鳥）</del>可以到 <a href=\"https://github.com/ArvinH/YearEndReview-2018/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> 瞧瞧。</p>\n<h2 id=\"最後分享一下我的年終檢討\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B%E6%88%91%E7%9A%84%E5%B9%B4%E7%B5%82%E6%AA%A2%E8%A8%8E\" aria-label=\"最後分享一下我的年終檢討 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後分享一下我的年終檢討</h2>\n<p>我記錄在 Google Calendar 上的 task，基本上分為六類：</p>\n<ul>\n<li>English - 包含上英文線上課程、背單字、唸英文等</li>\n<li>Entertainment - 所有娛樂事項</li>\n<li>Sick/Rehabilitation - 生病、做物理復健</li>\n<li>Exercise - 運動</li>\n<li>Training - 一切我認為跟加強我自身實力有關的事，有可能是看文章、寫 code 或是刷題</li>\n<li>Work - 上班</li>\n</ul>\n<p><img src=\"/image/nivo-waffle-explain.png\" alt=\"waffle\"></p>\n<p>Waffle 圖的數據是我將每個月的分類 task 加總後做平均所算出的比例。</p>\n<p>而從 Waffle 圖可以很明顯看到，2018 年我對於 <code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 這兩部分的分類，加重了不少。回想過去半年，很急切的想要有所突破，雖然我不覺得有達到我心中的努力程度，但以結果論來說，這些多出的 <code class=\"language-text\">Training</code> 或許真的幫助了我，讓我在今年達成了人生中一個小小的目標，有了<del>逃離鬼島</del>前往海外的機會。</p>\n<p>若是從 Calendar 圖與折線圖來做兩個年度的對比，感受會更深一點：</p>\n<p><img src=\"/image/review-explain.gif\" alt=\"Review\"></p>\n<p>首先，去年做完 year end review 後，我就發現假日也在工作的時間有點太多，除了有些時候的確是 project 較為忙碌，但大多是自己平日上班專注力沒有好好發揮。</p>\n<p>因此今年開始，我調整作息，除了早上運動外，也盡量在公司時保持專注，降低與社群媒體的接觸，從圖表結果來看，成效挺好的，明顯看到 2018 年的假日在 Work 這個分類，是比較空的。</p>\n<p>另外，<code class=\"language-text\">Training</code> 與 <code class=\"language-text\">English</code> 分類的差異從 Calendar 圖表非常明顯啊！</p>\n<p>2018 我幾乎每天都有抽出一點時間學習工作外的事，持續練英文的時間也變多了！</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>在製作第一年的 Year End Review 時，只是覺得好玩，可以把紀錄一年的資料做個整理跟視覺化呈現，但到了第二年，有了對照後，好像真的可以從中看出自己一年來的成長，也在整理資料的過程中，回顧了這一年所做的事情，並反省自己的缺失。雖然整體上來說，還是覺得自己浪費了許多時間，但套句李笑來的話：『所有對於現狀的解脫，最終都只能靠積累來實現。』從現在開始繼續努力、繼續積累，活在未來！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://nivo.rocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nivo</a></li>\n<li><a href=\"https://blog.techbridge.cc/2017/12/12/d3v4-calendar-yearendreview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一起用 Google Calendar 與 D3.js 進行年終回顧吧！</a></li>\n</ol>","fields":{"slug":"dataviz-yearendreview"},"frontmatter":{"title":"用 Google Calendar 與 nivo 製作自己的年終檢討報告","date":"12-15-2018","tags":["data","visualization","d3","nivo","google calendar","yearend"]},"timeToRead":10}},"pageContext":{"slug":"dataviz-yearendreview","prev":{"excerpt":"好歌分享：San Cisco - Awkward","html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/ukNOaKeUEQY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">San Cisco - Awkward</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/ukNOaKeUEQY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前陣子 netflix 上了最新一季的夜魔俠，其中的反派角色很愛在家中擺設畫作，有了藝術品襯托，壞人在我的腦海裡突然就變成看似很有深度的角色。這讓我覺得應該也該擺點畫作在家裡，看看能不能提高自己的層次。</p>\n<p>而宅宅如我當然無法做如此的投資，不過如果能夠自己用 Web 技術產生一些藝術作品，然後投影在家中呢？應該很酷吧！\n然後就在 codepen 上發現了一個有趣的東西：</p>\n<p data-height=\"416\" data-theme-id=\"29194\" data-slug-hash=\"XZqwaq\" data-default-tab=\"result\" data-user=\"jh3y\" data-pen-title=\"Randomly generate Mondrian Art with CSS Grid + Vue 🎨\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/jh3y/pen/XZqwaq/\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a> by Jhey (<a href=\"https://codepen.io/jh3y\">@jh3y</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>看起來煞有其事啊！原來簡單利用 CSS Grid 就能排出這樣的藝術圖畫！ 查了一下這叫做蒙德里安 (mondrian art)。</p>\n<p>臨摹也算是一種學習，原作者是使用 Vue.js 與 Stylus 製作，今天我們就簡單利用 React 來重新實作一次並說明原理吧！</p>\n<h2 id=\"css-grid-小複習\" style=\"position:relative;\"><a href=\"#css-grid-%E5%B0%8F%E8%A4%87%E7%BF%92\" aria-label=\"css grid 小複習 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Grid 小複習</h2>\n<p>如果有不了解 CSS Grid 的讀者，可以先去看我先前寫的介紹 - <a href=\"https://blog.techbridge.cc/2017/02/03/css-grid-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">與 CSS Grid 的第一次接觸</a> 或是很完整的 <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a>。</p>\n<p>這邊簡單總結一下 CSS Grid 的特性：</p>\n<p>相比於 <code class=\"language-text\">Flexbox</code> 是 <code class=\"language-text\">one-dimensional layout solution</code>，<code class=\"language-text\">CSS Grid</code> 可以理解為 <code class=\"language-text\">two-dimentional layout solution</code>。</p>\n<p>也就是說，你能夠在二維平面上，透過網格系統來擺放你的元件位置。</p>\n<p>現在最新版的 Chrome 與 Firefox 都已經支援 CSS Grid Layout 了，並且在 devtool 中能清楚看到網格狀態：</p>\n<p><img src=\"/image/css-grid-in-devtools.png\" alt=\"css grid in devtools\"></p>\n<h2 id=\"實作前的小分析\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E4%BD%9C%E5%89%8D%E7%9A%84%E5%B0%8F%E5%88%86%E6%9E%90\" aria-label=\"實作前的小分析 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實作前的小分析</h2>\n<p>不管你對 CSS Grid 有沒有概念，看了上面的圖應該也很快可以猜出其原理。</p>\n<p>主要就是讓整個 <code class=\"language-text\">container</code> 切割成數個小方塊，接著隨機產生出多個區塊，每個區塊隨機橫跨不同的行數與列數，並填上不同顏色，將 <code class=\"language-text\">container</code> 填滿即可。</p>\n<p>有點像是七巧板的感覺，只是我們的板子都是矩形~ 不過聽起來簡單，實作上還是有些細節需要注意的。</p>\n<h1 id=\"開始實作\" style=\"position:relative;\"><a href=\"#%E9%96%8B%E5%A7%8B%E5%AF%A6%E4%BD%9C\" aria-label=\"開始實作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>開始實作！</h1>\n<p>第一步是先定義出我們這幅畫作的畫框，也就是 CSS Grid 中的 <code class=\"language-text\">container</code>，透過這個 <code class=\"language-text\">container</code> 來定義好整個網格系統：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.MondrainArt</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px solid #070908\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"grid\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-gap</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"repeat(auto-fit, 50px)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"250px\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這裡面發生了幾件事情：</p>\n<p>我們用 <code class=\"language-text\">grid-template-columns</code> 與 <code class=\"language-text\">grid-template-rows</code> 先規範我們的 container 內要有多少欄與列，以及每格的長寬。</p>\n<p>由於每個格子的大小我們要固定，所以使用 <code class=\"language-text\">repeat()</code>，並且採用 <code class=\"language-text\">&lt;auto-repeat> values</code> 的語法，這樣做的好處是我們只要固定好 <code class=\"language-text\">container</code> 的寬高，不用去限制 grid 的 column 數與 row 數，讓 CSS Grid 幫我們計算出不會 overflow 的數目。<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/repeat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN: repeat()</a></p>\n<p>至於要用 <code class=\"language-text\">auto-fit</code> 或是 <code class=\"language-text\">auto-fill</code>， 在這邊的例子中其實都可以，因為這兩者的差別主要在於寬度改變時，針對多出的空間在運用上有不同的方式：</p>\n<p>以 <code class=\"language-text\">auto-fit</code> 來說，視覺上的效果是會將原本 column 內的 item 寬度都平均拉長，但實際上還是有新增 column 數，只是因為 content 是空的，所以空間被壓縮了：</p>\n<p><img src=\"/image/auto-fit.gif\" alt=\"auto-fit\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>而 <code class=\"language-text\">auto-fill</code> 則是不管是否有新的 content 在，新增的 column 數都會佔有一樣的空間大小，並不會去延伸原有 item 的寬度：</p>\n<p><img src=\"/image/auto-fill.gif\" alt=\"auto-fill\">\n<a href=\"https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>接著，利用 <code class=\"language-text\">gap: 10px 10px</code> 設定好每個格子間的空隙；然後給定一個固定的寬高並將 overflow hidden 起來。</p>\n<p>到這邊為止，我們可以先在 <code class=\"language-text\">container</code> 內放入數個 grid item，然後每個 item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 皆設置為 <code class=\"language-text\">span 1</code>，也就是都只占 grid 的中的一個單位。如此一來就能看到目前的格子樣式：</p>\n<iframe src=\"https://codesandbox.io/embed/ww21ow2nvl\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"隨機產生不同大小的區塊\" style=\"position:relative;\"><a href=\"#%E9%9A%A8%E6%A9%9F%E7%94%A2%E7%94%9F%E4%B8%8D%E5%90%8C%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%80%E5%A1%8A\" aria-label=\"隨機產生不同大小的區塊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>隨機產生不同大小的區塊</h2>\n<p>有了基礎的格子後，看起來我們接著只要把目前 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 改造一下就大功告成了吧!?</p>\n<p>馬上來試試！</p>\n<p>首先，先做點數學，我們剛剛設定每個格子是 <code class=\"language-text\">50px</code>，而每個格子的間距 <code class=\"language-text\">gap</code> 為 <code class=\"language-text\">10px</code>，而寬度為 <code class=\"language-text\">250px</code>，所以每一個 <code class=\"language-text\">row</code> 最多就是 <code class=\"language-text\">4</code> 個格子。（用肉眼看上圖其實就知道了...）</p>\n<p>為什麼要算這個呢？</p>\n<p>因為我們要讓 grid item 的 <code class=\"language-text\">grid-column</code> 與 <code class=\"language-text\">grid-row</code> 隨機分配，但要在正確的範圍內，更改上面範例內的 <code class=\"language-text\">generateBlocks()</code> 如下，並加上個 <code class=\"language-text\">colorMap</code> 來隨機分配顏色：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">colorMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(248, 217, 45)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(242, 245, 241)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(214, 0, 20)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rgb(11, 84, 164)\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">generateBlocks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">blocks-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        gridColumn<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        gridRow<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">span </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        backgroundColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorMap<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以得到以下結果：</p>\n<iframe src=\"https://codesandbox.io/embed/934p8px7pw\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>疑？好像跟想像不太一樣？</p>\n<p>的確是隨機產生了橫跨不同欄位數的區塊，但是大小好像不太對啊！</p>\n<p>那是因為我們沒辦法保證隨機產生的 grid-area 都能剛剛好接續著各自的起始點排滿滿的，所以可能發生下列情況：</p>\n<p><img src=\"/image/auto-col-row.png\" alt=\"auto-col-row\"></p>\n<p>在右下角實際產生的黃色區塊前，<code class=\"language-text\">row5</code> 與 <code class=\"language-text\">row6</code> 的位置實際上是空的，所以 grid layout 會將其當作為高度 0 的 item。</p>\n<p>好在，我們可以利用 <code class=\"language-text\">grid-auto-columns</code> 與 <code class=\"language-text\">grid-auto-rows</code> 來解決！<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p>我們在 <code class=\"language-text\">container</code> 加上以下設定：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">grid-auto-columns</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">grid-auto-rows</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"50px\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>這樣就會讓 grid layout 知道空的欄位我們想要自動填補上 <code class=\"language-text\">50px</code> 的大小。</p>\n<p>基本上到此為止就完成了一個不錯的版本：</p>\n<p><img src=\"/image/no-fill-algo.png\" alt=\"no-fill-algo\"></p>\n<p>但總還是覺得怪怪的，好像“不夠密”。</p>\n<p>有些區塊如果能換個位置似乎會好看一點？</p>\n<p>由於我們並沒有明確指定每個區塊在 grid 中的確切位置，grid layout 會採用一個 <code class=\"language-text\">auto-placement algorithm</code> 來擺放，而我們能透過 <code class=\"language-text\">grid-auto-flow</code> 這個屬性來更改其排放的規則。<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-tricks</a></p>\n<p><code class=\"language-text\">grid-auto-flow</code> 有 <code class=\"language-text\">row</code>, <code class=\"language-text\">column</code> 與 <code class=\"language-text\">dense</code> 這三種值可以設置，從字面上來看就能理解各自代表的意思，如果你設定為 <code class=\"language-text\">row</code> 或 <code class=\"language-text\">column</code>，那 grid layout 會盡量幫你的 item 照著列與行的方向照順序排放；而 <code class=\"language-text\">dense</code> 則是會盡量把空間塞滿，小的 item 就可能會先排在大的 item 之前，跟你在 html dom 上的排放位置可能有所落差，對於 accessibility 並不好，但以我們的 case 來說，不需要考慮那些，就大膽採用 <code class=\"language-text\">dense</code> 就對了！</p>\n<h2 id=\"最終成果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E6%88%90%E6%9E%9C\" aria-label=\"最終成果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終成果</h2>\n<p>最後我們可以再加上一點點動畫效果，讓 react component 每五秒重新 render 一次新的圖案，這樣投放出來以後，就好像你有一幅不斷自行變化的藝術品一般了！</p>\n<iframe src=\"https://codesandbox.io/embed/420rv1v86w\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>有趣的作品實作起來可能原理很簡單，但也是有一些眉眉角角需要注意。透過這次的實作，重新複習了一次 CSS Grid 的好處與用法，也期許自己未來能夠有更多的時間去思考與創造這樣的作品！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Complete Guide to Grid</a></li>\n<li><a href=\"https://codepen.io/jh3y/pen/XZqwaq/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Randomly generate Mondrian Art with CSS Grid + Vue 🎨</a></li>\n<li><a href=\"http://gridbyexample.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grid by Example</a></li>\n<li><a href=\"https://github.com/FremyCompany/css-grid-polyfill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-polyfill</a></li>\n</ol>","id":"4d5a489b-0f84-5fcb-a2e7-7a727e0b5e73","fields":{"slug":"css-grid-art-generator"},"frontmatter":{"date":"2018-11-15T00:18:37.000Z","title":"用 CSS Grid 創造蒙德里安藝術","tags":["css","grid","mondrian","react"],"type":"tech","slug":"css-grid-art-generator"},"timeToRead":7},"next":{"excerpt":"『所有對於現狀的解脫，最終都只能靠積累來實現。』","html":"<blockquote>\n<p>『所有對於現狀的解脫，最終都只能靠積累來實現。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>大概三個月前，忘了在哪看到 Micro Frontends 這個詞，當時沒有仔細去了解（畢竟聽起來就像是另一個 Buzzword XD），只是從名字大概猜測是想讓前端頁面更加模組化，讓不同團隊能更有效率的開發共同的站。稍微 Google 了一下這個 term，發現文章多數在 2018 的五六月出現，之後就鮮少人提起，我也就淡忘了他。</p>\n<p>直到最近工作上接觸到的框架，似乎也想讓頁面上的元件更加低耦合，甚至是希望能支援運行不同版本或是 tech stack 的元件，才讓我又再想起 Micro Frontends 這個東西，所以查了點資料，這邊做個紀錄分享。</p>\n<h1 id=\"什麼是-micro-frontends\" style=\"position:relative;\"><a href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-micro-frontends\" aria-label=\"什麼是 micro frontends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什麼是 Micro Frontends</h1>\n<p>大部分查到的文章都有提到，Micro Frontends 最早出現在 <a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">2016 年 ThoughtWorks 這間公司公佈的技術雷達</a>中，並在 2018 年五月進入試驗階段，代表他們認為這個架構是有發展淺力的。（查了一下 <a href=\"https://en.wikipedia.org/wiki/ThoughtWorks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">wiki</a>，ThoughtWorks 是一間蠻大的全球軟體顧問公司，有自己的產品，也會為客戶制定各種前瞻軟體設計）</p>\n<p>要解釋 Micro Frontends，可以先從 Microservices 講起。</p>\n<p>Microservices 在後端的世界裡面已經運行多年，採用 Microservices 的團隊架構通常都是如下圖所繪：</p>\n<p><img src=\"/image/monolithic-fe-micro-be.png\" alt=\"monolithic-fe-micro-be\"></p>\n<p>後端中每個 Microservices 彼此之間獨立作業，各個團隊可以擁有自己的部署與開發技術，溝通可以透過各樣 API 介面來達成，與前端之間也只需要 HTTP request 即可進行各種服務串接。</p>\n<p>在這樣的架構下，Frontend team 的程式碼卻還是都共存在一個 Monolithic 的結構內，當網站功能越趨複雜、團隊成長茁壯後，整個前端架構就會越來越難以維護，更別提前端技術的日新月異，很容易會產生 legacy code，這時若想要更新就麻煩了。</p>\n<p>由於慢慢有人體會到這種問題，Micro Frontends 的想法才被提出：</p>\n<p><img src=\"/image/micro-fe-micro-be.png\" alt=\"micro frontend\"></p>\n<p>從圖中不難發現，Frontend 的模組被拆分至各個 team 中，每個團隊獨立掌管自己的前後端服務，擁有自己的部署環境與 tech stack，團隊間低耦合，團隊中高內聚。\n此外，每個團隊產出的前端模組，要能夠有效的『拼貼』在同一個 SPA 頁面當中，保持使用者在產品的體驗上與原先的 SPA 一致。</p>\n<p>在 <a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">micro-frontends.org</a> 這個網站中說到，這樣的結構就算是 Micro Frontends，而這樣的概念其實更早之前就有，只是有別的名稱，分別叫做 <a href=\"https://dev.otto.de/2014/07/29/scaling-with-microservices-and-vertical-decomposition/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Frontend Integration for Verticalised Systems</a> 與 <a href=\"http://scs-architecture.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Self-contained Systems</a>。</p>\n<p>但我自己認為，Micro frontend 應該主要著重在：如何將前端頁面中以功能模組來拆分成不同獨立應用，並黏貼共存在同個 SPA 中。(後面會再提到目前常見的實作方式。)</p>\n<p>而由 Micro Frontends 與 Micro Services 所組成的一個從 UI、商業邏輯、資料處理和系統部署，這樣完整的獨立服務，才算是一個 <a href=\"https://scs-architecture.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SCS - Self contain system</a>。</p>\n<h2 id=\"micro-frontends-的核心思想\" style=\"position:relative;\"><a href=\"#micro-frontends-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\" aria-label=\"micro frontends 的核心思想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro Frontends 的核心思想</h2>\n<ul>\n<li><strong>Be Technology Agnostic</strong>：每個團隊可以使用自己的技術結構來開發前端模組，與其他團隊彼此之間互不干擾，也無須耗費成本相互協調。</li>\n<li><strong>Isolate Team Code</strong>：就算各個團隊採用同樣的技術框架，彼此之間也不該共享變數或狀態。彼此間應該透過 public API 來溝通。</li>\n<li><strong>Establish Team Prefixes</strong>：利用 Prefix 的方式來避免 CSS、Browser API、Web Event、Cookies 或 Local Storage 的衝突。</li>\n<li><strong>Favor Native Browser Features over Custom APIs</strong>：要整合 Micro Frontends 的複雜度其實很高，當每個模組間需要溝通時，盡量採用 Browser Native API 來完成較好；若真的需要額外的溝通方式（pub/sub system），要盡量保持簡單。</li>\n<li><strong>Build a Resilient Site</strong>：透過 SSI 或 PWA 的方式增強網站的穩定性，在 JS 無法執行的狀況下也有堪用的呈現。</li>\n</ul>\n<h1 id=\"micro-frontends-的實作方法\" style=\"position:relative;\"><a href=\"#micro-frontends-%E7%9A%84%E5%AF%A6%E4%BD%9C%E6%96%B9%E6%B3%95\" aria-label=\"micro frontends 的實作方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro Frontends 的實作方法</h1>\n<p><img src=\"/image/three-teams.png\" alt=\"PoC demo\">\n<a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">source</a></p>\n<p>接著我們先來看看要如何實現 Micro Frontends，達成如上圖所呈現的狀態，在同個頁面中，運行三個不同 Team 採用不同 Tech stack 的模組。</p>\n<p>Team checkout 與 Team inspire 各自開發了前後端整合的模組，而 Team product 要負責整合它們。</p>\n<p>三個 Team 採用不同 tech stack，並且獨立部署在各自的環境中運行，基本上可能會有三個 Host 分別 serve 它們：</p>\n<ol>\n<li><a href=\"https://microfrontends-checkout.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends-checkout.com/</a></li>\n<li><a href=\"https://microfrontends-inspire.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends-inspire.com/</a></li>\n<li><a href=\"https://microfrontends-product.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://microfrontends-product.com/</a></li>\n</ol>\n<h2 id=\"方法一使用-iframe\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%E4%BD%BF%E7%94%A8-iframe\" aria-label=\"方法一使用 iframe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法一：使用 iframe</h2>\n<p>在 Team product 的模組中，可以利用嵌入 iframe 的方式來載入另外兩個模組，由於 iframe 天生就有隔離運行環境的特性，各團隊的模組相互不會干擾，若要通訊，在同網域下，我們更能直接透過 <code class=\"language-text\">window.postMessage</code> 來達成。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- in Team Product --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://microfrontends-checkout.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://microfrontends-inspire.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>缺點</strong>:</p>\n<p>但使用 iframe 的缺點很多，基本上不會有人想採用這種方法...\n像是：由於應用模組是分開的，無法將共用的依賴模組取出來，導致頁面可能會同時載入重複的 code；再者，UI 的呈現上也會變得很難控制，若是其中還含有表單之類的功能，就更麻煩了。</p>\n<h2 id=\"方法二在-client-side-用-js-載入模組\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%E5%9C%A8-client-side-%E7%94%A8-js-%E8%BC%89%E5%85%A5%E6%A8%A1%E7%B5%84\" aria-label=\"方法二在 client side 用 js 載入模組 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法二：在 Client side 用 JS 載入模組</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadPage</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://microfrontends-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>element<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.com/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.pagelet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>loadPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- in Team Product --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagelet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pagelet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inspire<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>也就是在 client side ajax 抓取模組，塞入對應的 target div 內。這種做法需要注意 js、css 等的載入順序，Facebook 在多年前是用 <a href=\"https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BigPipe</a> 來處理（可能 FB 已經沒在使用，但還是很值得了解的一個專案！）：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\nbig_pipe<span class=\"token punctuation\">.</span><span class=\"token function\">onPageletArrive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> “pagelet_composer”<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">HTML</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> css<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> js<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>類似這樣，用 array 來依序載入資源。</p>\n<p>但缺點明顯就是無法 Server-side render。</p>\n<h2 id=\"方法三web-component\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%89web-component\" aria-label=\"方法三web component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法三：Web component</h2>\n<p>這邊是指 Web standard 下包含 <code class=\"language-text\">Custom Element</code>、<code class=\"language-text\">HTML template</code>、<code class=\"language-text\">Shadow DOM</code> 與 <code class=\"language-text\">HTML imports</code> 的 Web component。</p>\n<p>各個團隊可以用自己想使用的 tech stack 來製作元件，但最終包裹成 Web component 的形式，以 React 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SearchComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p className<span class=\"token operator\">=</span><span class=\"token string\">\"search-component\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomSearch</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mountPoint <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'open'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mountPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> keyword <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.google.com/search?q='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>SearchComponent<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>keyword<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SearchComponent<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n      mountPoint<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-search'</span><span class=\"token punctuation\">,</span> CustomSearch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- in Team Product --></span>\n<span class=\"token comment\">&lt;!-- search component from Team Inspire --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-search</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TeamInspire<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyword</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Micro Frontends<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-search</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>採用 Web component 可以讓程式碼清晰可讀，元件之間各自獨立，所有資源都由自身控制該如何加載，團隊在使用這些元件上，就如同一般 HTML DOM，並且可以直接利用 Web Event API 來進行元間間的溝通。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// in Team checkout</span>\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'buy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> item<span class=\"token operator\">:</span> <span class=\"token string\">'car'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In React:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'buy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> buyItem<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>buyItem<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此外，如果 Web component 還能搭配 SSI (Server Side Includes) 來達成 SSR：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-search</span> <span class=\"token attr-name\">keyword</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Micro Frontends<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!--#include virtual=\"/custom-search?keyword=\"Micro Frontends\" --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-search</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">server <span class=\"token punctuation\">{</span>\n  listen <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n  ssi on<span class=\"token punctuation\">;</span>\n\n  location <span class=\"token operator\">/</span>TeamInspire <span class=\"token punctuation\">{</span>\n    proxy_pass  https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>microfrontends<span class=\"token operator\">-</span>TeamInspire<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>每個 Micro Frontend team 自己要建立起 <code class=\"language-text\">component server</code>，用來 serve component 的 markup。並且實作的 Web component 本身也要修改成支援 Server side render。\n不過重點是，這樣在技術上是可行的，至少比上一種方式好。</p>\n<p>但缺點也很明顯：</p>\n<ol>\n<li>需要 polyfills 來補足瀏覽器支援度問題。</li>\n<li>雖說大家能用不同 Tech stack，但本質上每個團隊最終還是得想辦法用成統一的 Web component</li>\n<li>Web component 的發展與普及不夠快速。</li>\n</ol>\n<p>關於 Web component 實作 Micro Frontends 的範例與細節，大家可以到 <a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">micro-frontends.org</a> 看，範例 code 甚至都包成 docker，很快就能裝起來玩！</p>\n<h2 id=\"方法四single-spa---javascript-metaframework\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%95%E5%9B%9Bsingle-spa---javascript-metaframework\" aria-label=\"方法四single spa   javascript metaframework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法四：<a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Single-SPA - javascript metaframework</a></h2>\n<p>CanopyTax 這間公司推出的一個開源專案，提供了一些方便的 API 讓你達到：</p>\n<ol>\n<li>用各種技術構建 micro frontends。</li>\n<li>在同個頁面下使用多種前端 framework 組成的模組，且無需 refresh page。</li>\n<li>在現有的應用中嘗試新的 framework，而不必全部重寫。</li>\n<li>支援 Lazy load</li>\n<li>支援 Hot reload</li>\n</ol>\n<p>有興趣的讀者可以前往他們的 <a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a> 看各種範例與程式碼。類似這樣的使用方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> singleSpa <span class=\"token keyword\">from</span> <span class=\"token string\">'single-spa'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadingFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./react/react.app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 可根據 route 來切分要換成哪個模組並動態載入相應資源</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">activityFunction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">location</span> <span class=\"token operator\">=></span> location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#/react-app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">declareChildApplication</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">,</span> loadingFunction<span class=\"token punctuation\">,</span> activityFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsingleSpa<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"其他方法\" style=\"position:relative;\"><a href=\"#%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95\" aria-label=\"其他方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他方法：</h2>\n<p>在查資料的過程中，其實大家在討論的 Micro Frontends 都會著重在各 Team 間採用不同 tech stack 的前提，可能是這樣才比較好凸顯 Micro Frontends 切割模組的感覺。</p>\n<p>但是如果只是想要讓 Microservices 都有各自對應的前端模組，我們其實也可以直接用 React 來建造各類元件庫，讓主 App 下載使用。</p>\n<p>這樣會是一個折衷的方案，不用煩惱 common dependences 的問題，但相對的在升級版本時，可能就得一次將所有元件庫內的元件都升級才可以使用。</p>\n<p>有點偏離 Micro Frontends 的核心就是了。</p>\n<h2 id=\"micro-frontends-帶來的好處與壞處\" style=\"position:relative;\"><a href=\"#micro-frontends-%E5%B8%B6%E4%BE%86%E7%9A%84%E5%A5%BD%E8%99%95%E8%88%87%E5%A3%9E%E8%99%95\" aria-label=\"micro frontends 帶來的好處與壞處 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Micro Frontends 帶來的好處與壞處</h2>\n<p>Micro Frontends 的好處就在於，各個模組間是非常獨立的，彼此間的部署不需要互相等待，tech stack 也不一定要用相同的，也就是說，在汰換 legacy code 的過程可以順暢一些，也更容易嘗試新技術，可以漸進式的把 SPA 上的模組替換成更好或更新的框架，讓新舊 code 能夠並存無衝突。團隊在開發上可以更敏捷。</p>\n<p>但實務上我想應該不太會有人想在同個頁面上同時存在多種框架吧？試想，一個頁面上如果同時存在 React 與 Vue，甚至是 Angular，這樣 Page load time 大概難以想像。\n再加上缺乏統一打包的步驟，共用資源的相依性就無法被知曉，要如何有效處理 Common resources 是很麻煩的難題。</p>\n<p>還有就是 CSS 解決方案，會不會需要處理命名衝突，也是一個隱憂。若是公司資源不夠，沒有辦法利用像 Zeplin 之類的工具了統一定義 Style guideline，就還得想辦法協調各 Team 開發模組的 style 問題。</p>\n<p>整體而言看起來 Micro Frontends 的複雜度並不小，應該比較適合大型應用，或真的有許多 Legacy code 要處理的公司團隊。</p>\n<h1 id=\"那有誰採用-micro-frontends\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E6%9C%89%E8%AA%B0%E6%8E%A1%E7%94%A8-micro-frontends\" aria-label=\"那有誰採用 micro frontends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那有誰採用 Micro Frontends？</h1>\n<p>很多公司可能都有自己的類似解決方案，就像 FB 的 bigpie，或是 Yahoo 也有類似的作法。</p>\n<p>在我查到的資料當中，比較有提到 Micro Frontends 的大公司有 Spotify 與 IKEA，細節就給大家自行去欣賞他們的分享了：</p>\n<p><a href=\"https://www.slideshare.net/kevingoldsmith/how-spotify-builds-products-organization-architecture-autonomy-accountability\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spotify - How Spotify Builds Products (Organization. Architecture, Autonomy, Accountability)</a>:</p>\n<p><img src=\"/image/spotify-microfe.jpg\" alt=\"Spotify sharing\"></p>\n<p>Spotify 是從 UI 來區分團隊負責的 function，原先採用 iframe 與 postMessage 的方式來處理 Micro Frontends，團隊間 technology independence，但他們已經捨棄這個架構很久了，後來改採一律 react/redux 的架構。可以看這份 <a href=\"https://twitter.com/derberq/status/910056617881817089\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">twitter</a> 討論。</p>\n<p>另外，它們是有一個團隊在負責檢驗各 team 產出的模組 UI style 是否維持產品的一致性。</p>\n<p><a href=\"https://www.youtube.com/watch?v=4KVOuQDIfmw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MICROSERVICE WEBSITES - Gustaf N. Kotte</a></p>\n<p><img src=\"/image/ikea-microfe.png\" alt=\"MICROSERVICE WEBSITES - Gustaf N. Kotte\"></p>\n<h1 id=\"小結論\" style=\"position:relative;\"><a href=\"#%E5%B0%8F%E7%B5%90%E8%AB%96\" aria-label=\"小結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小結論</h1>\n<p>其實會需要用到 Micro Frontends 結構的應該不多，尤其在 React/Vue/Angular 主宰的這幾年，需求相對更少。越大型的 web app 與團隊才比較值得去嘗試。</p>\n<p>現行的實作方式其實都很複雜，上面描述的方法與網路看到的 prototype 都過於簡化了。</p>\n<p>但這種高階層架構的思考與設計其實多多益善，從中發現的困難更能推動技術發展，而且也很有趣！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">micro-frontends.org</a></li>\n<li><a href=\"https://tech.mercari.com/entry/2018/12/06/162827\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">フロントエンドエンジニアは Micro Frontends の夢を見るか</a></li>\n<li><a href=\"https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">技术雷达之「微前端」- 将微服务理念扩展到前端开发（上：理论篇）</a></li>\n<li><a href=\"https://blog.jimmylv.info/2017-12-24-tech-radar-microfrontends-extending-microservice-to-fed-next/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">技术雷达之「微前端」- 将微服务理念扩展到前端开发（下：实战篇）</a></li>\n<li><a href=\"https://github.com/Pragmatists/microfrontends\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Micro Frontends Proof of Concept</a></li>\n<li><a href=\"https://blog.pragmatists.com/independent-micro-frontends-with-single-spa-library-a829012dc5be\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Independent micro frontends with Single SPA library</a></li>\n<li><a href=\"https://single-spa.surge.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Single-SPA</a></li>\n<li><a href=\"https://www.slideshare.net/kevingoldsmith/how-spotify-builds-products-organization-architecture-autonomy-accountability\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spotify - How Spotify Builds Products (Organization. Architecture, Autonomy, Accountability)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=4KVOuQDIfmw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MICROSERVICE WEBSITES - Gustaf N. Kotte</a></li>\n</ol>","id":"5ea042ed-05c4-5a3e-b828-54a97e067728","fields":{"slug":"micro-frontends-concept"},"frontmatter":{"date":"2019-01-12T18:00:17.000Z","title":"一起探討 Micro Frontends 的世界","tags":["frontends","micro"],"type":"tech","slug":"micro-frontends-concept"},"timeToRead":12},"type":"tech"}},"staticQueryHashes":["2123680655"]}