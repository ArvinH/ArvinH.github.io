{"componentChunkName":"component---src-templates-post-tsx","path":"/tech/box-shadow-drawing","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>好歌分享：<a href=\"https://youtu.be/wTebM8bWxJk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Organic melody feat.Takuya Maeda</a></p>\n</blockquote>\n<iframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/wTebM8bWxJk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>大約在兩年前我曾經寫過一篇文章介紹如何用 CSS 繪圖 - <a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 CSS 畫畫的小技巧</a>，該文章的最後我有稍微提到我們能夠利用 CSS3 的 <code class=\"language-text\">box-shadow</code> 屬性來製造出 Pixel 風格的圖案。然而，所有圖案不都是由 pixel 組成的嗎？如果我們能夠用 box-shadow 畫出 Pixel Art，那只要 Pixel 數量足夠，size 夠細緻，應該是能夠繪製出任何圖形的吧？</p>\n<p>不過在<a href=\"https://blog.techbridge.cc/2017/11/17/drawing-css-image/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 CSS 畫畫的小技巧</a>這篇文章中，所製作的是比較簡單的文字，透過直接編輯 <code class=\"language-text\">box-shadow</code> 還在可接受範圍中，但如果是想要繪製複雜一點的人物角色，例如鋼鐵人<a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src</a>：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/40adf0260c1844fb9868f7c524424976.png\" alt=\"iron-man\"> </p>\n<p>這如果一格一格手動對照，然後撰寫 <code class=\"language-text\">box-shadow</code>，比登天還難，更別提想繪製出比 Pixel Art 細緻一點的圖案了。</p>\n<p>網路上對於 <code class=\"language-text\">box-shadow</code> 的運用，大多圍繞在 Pixel Art 的實作，例如 <a href=\"https://una.im/sass-pixel-art/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Una Kravets 的部落格</a> 介紹了如何使用 SCSS 與陣列來產生 CSS Pixel Art；上面鋼鐵人原圖<a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">也是利用相同原理</a>；<a href=\"http://elrumordelaluz.github.io/Pixelator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pixelator</a> 則是讓你能線上繪製自己喜歡的 Pixel Art，並且產生出對應的 <code class=\"language-text\">box-shadow</code>；</p>\n<p>好在 Codepen 上高手如雲，被我發現<a href=\"https://codepen.io/andrewarchi/pen/jPbqMx?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一篇</a>利用 Angular 實作圖片轉 <code class=\"language-text\">box-shadow</code> 的版本，實作方式很有意思，我用 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">svelte</a> 改寫了一個版本，今天就來分享一下實作細節！</p>\n<p>先看個成果：</p>\n<p>Gif Demo:\n<img src=\"https://static.coderbridge.com/img/ArvinH/1697c384e21246a491d1bdc34fc3c61a.gif\" alt=\"gif-demo\"></p>\n<p>Live Demo:</p>\n<iframe src=\"https://codesandbox.io/embed/image-to-pixel-art-usdtn?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"image-to-pixel-art\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<p>可以下載這個範例圖來上傳，效果會比較好：<img src=\"https://static.coderbridge.com/img/ArvinH/d4b4dbd77b93482781f7a5d27761630f.png\" alt=\"demo-mario\"></p>\n<h1 id=\"box-shadow\" style=\"position:relative;\"><a href=\"#box-shadow\" aria-label=\"box shadow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box-Shadow</h1>\n<p>在開始前，先複習一下 <code class=\"language-text\">box-shadow</code>，CSS3 的 <code class=\"language-text\">box-shadow</code> 屬性可以設定多個值，每個值代表著一個 <code class=\"language-text\">box-shadow</code> 的 x 位移(x-offset)，y 位移(y-offset)，陰影模糊半徑(shadow blur radii)，陰影擴散半徑(shadow spread radii) 和顏色(color)。</p>\n<p>由於 <strong>允許設置多個值</strong> 和 <strong>可控制 X 與 Y 位移</strong> 這兩個特質，<code class=\"language-text\">box-shadow</code> 非常適合用來組合成圖片，尤其是 Pixel Art。以黑白相間的棋盤為例：</p>\n<div id=\"chess\" style=\"margin-bottom: 60px; width: 40px; height: 40px; box-shadow: 0 40px #000, 40px 0 #000; border: 1px solid #000;\"></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n    width: 40px;\n    height: 40px;\n    box-shadow: 0 40px #000, 40px 0 #000;\n    border: 1px solid #000;\n<span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/789b88b181d44da997f09a02c23e0bf1.png\" alt=\"box-shadow-explain\"></p>\n<p>依照這個原理，就能組合成複雜一點的 Pixel Art：</p>\n<div id=\"result\" style=\"margin-bottom: 120px; width: 10px; height: 10px; box-shadow: rgb(243, 156, 18) 20px 30px 0px, rgb(243, 156, 18) 30px 30px 0px, rgb(243, 156, 18) 80px 30px 0px, rgb(243, 156, 18) 90px 30px 0px, rgb(243, 156, 18) 10px 40px 0px, rgb(231, 76, 60) 20px 40px 0px, rgb(231, 76, 60) 30px 40px 0px, rgb(243, 156, 18) 40px 40px 0px, rgb(243, 156, 18) 70px 40px 0px, rgb(243, 156, 18) 100px 40px 0px, rgb(243, 156, 18) 10px 50px 0px, rgb(231, 76, 60) 20px 50px 0px, rgb(243, 156, 18) 50px 50px 0px, rgb(243, 156, 18) 60px 50px 0px, rgb(243, 156, 18) 100px 50px 0px, rgb(243, 156, 18) 10px 60px 0px, rgb(231, 76, 60) 20px 60px 0px, rgb(231, 76, 60) 30px 60px 0px, rgb(243, 156, 18) 100px 60px 0px, rgb(243, 156, 18) 20px 70px 0px, rgb(231, 76, 60) 30px 70px 0px, rgb(231, 76, 60) 40px 70px 0px, rgb(243, 156, 18) 90px 70px 0px, rgb(243, 156, 18) 30px 80px 0px, rgb(231, 76, 60) 40px 80px 0px, rgb(231, 76, 60) 50px 80px 0px, rgb(243, 156, 18) 80px 80px 0px, rgb(243, 156, 18) 40px 90px 0px, rgb(231, 76, 60) 50px 90px 0px, rgb(243, 156, 18) 70px 90px 0px, rgb(243, 156, 18) 50px 100px 0px, rgb(243, 156, 18) 60px 100px 0px;\"></div>\n<p>但說實話，要手動撰寫 <code class=\"language-text\">box-shadow</code> 來組合出這個小愛心，大概就去掉半條命了，還是得依靠 <a href=\"http://elrumordelaluz.github.io/Pixelator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pixelator</a> 來繪製並產生 CSS。</p>\n<h1 id=\"圖片轉-box-shadow-實作原理\" style=\"position:relative;\"><a href=\"#%E5%9C%96%E7%89%87%E8%BD%89-box-shadow-%E5%AF%A6%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-label=\"圖片轉 box shadow 實作原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>圖片轉 box-shadow 實作原理</h1>\n<p>在複習完 <code class=\"language-text\">box-shadow</code> 組成圖片的原理後，應該不難推斷出圖片轉 <code class=\"language-text\">box-shadow</code> 的做法。</p>\n<p>概念上就是先定義出一個 grid system，將圖片切割成一塊一塊的單位，接著計算出每個單位區塊的 x-offset 與 y-offset，然後放入對應顏顏色，這樣就能組合出一個 unit 所對應的 <code class=\"language-text\">box-shadow</code> 值，依此類推把每個單位區塊都轉換完即可。</p>\n<p>實作上的步驟比較繁瑣一些，但概念是相同的：</p>\n<ul>\n<li>利用 <code class=\"language-text\">URL.createObjectURL(event.target.files[0]);</code> 將圖片檔案轉換成 <code class=\"language-text\">Image</code> 物件。</li>\n<li>在 image <code class=\"language-text\">onload</code> 時，透過 canvas 2d context 的 <code class=\"language-text\">drawImage()</code> 函式將圖片繪製到 canvas 上。</li>\n<li>接著再以 canvas 2d context 的 <code class=\"language-text\">getImageData</code> 取得一個以一維陣列存放的圖片資訊。</li>\n<li>遍歷該一維陣列內的圖片資訊，組合出 <code class=\"language-text\">box-shadow</code> 的值。</li>\n</ul>\n<p>上述步驟中，最關鍵的就是最後一點，canvas 2d context 的 <code class=\"language-text\">getImageData</code> 函式會回傳一個一維陣列 - <code class=\"language-text\">Unit8ClampedArray</code>，裡面包含了圖片每個 unit 的 RGBA 值（值段區間為 0 ~ 255）。</p>\n<p>利用這個一維陣列，我們就可以知道載入的圖片有多少 unit（grid system)，每個 unit 又各自是什麼顏色，進而推算出 box-shadow 每一個值的 x-offset、y-offset 與顏色。這也是為何我們需要先將圖片繪製到 Canvas 的原因。 </p>\n<p>關鍵程式碼如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buildPixelArt</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pixelSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">,</span> canvasContext</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n  canvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> boxShadow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> imageData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> canvasContext<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> row <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> width <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> col <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">-</span> row <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      boxShadow<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        col <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"px \"</span> <span class=\"token operator\">+</span>\n          row <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"px \"</span> <span class=\"token operator\">+</span>\n          <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> imageData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p> <code class=\"language-text\">Unit8ClampedArray</code> 陣列裡面，每四個 indices 為一單位，分別為該 unit 的 <code class=\"language-text\">R</code>、<code class=\"language-text\">G</code>、<code class=\"language-text\">B</code>、<code class=\"language-text\">A</code> 值，所以在迴圈中我們以 4 為遞增單位，並以此為計算二維平面中 <code class=\"language-text\">row</code> 與 <code class=\"language-text\">col</code> 的基礎。</p>\n<p> 計算出一維陣列內每個 unit 在二維平面上的行與列後，個別乘上定義好的 <code class=\"language-text\">pixelSize</code>，就能算出該 unit 在 <code class=\"language-text\">box-shadow</code> 值中的 x-offset 與 y-offset，然後聯同顏色值一起 push 到 <code class=\"language-text\">boxShadow</code> 陣列中。</p>\n<p> 最後利用預先寫好的 css template，將 <code class=\"language-text\">boxShadow</code> 整合進去即可產生需要的 css style：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> generatedCss <span class=\"token operator\">=</span>\n   <span class=\"token string\">\"#pixel-art {\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  height: \"</span> <span class=\"token operator\">+</span>\n   height <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  width: \"</span> <span class=\"token operator\">+</span>\n   width <span class=\"token operator\">*</span> pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"}\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"#pixel-art:after {\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">'  content: \"\";\\n'</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  position: absolute;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  width: \"</span> <span class=\"token operator\">+</span>\n   pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  height: \"</span> <span class=\"token operator\">+</span>\n   pixelSize <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"px;\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"  box-shadow:\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span>\n   boxShadow<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n    \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\";\\n\"</span> <span class=\"token operator\">+</span>\n   <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> generatedCss<span class=\"token punctuation\">;</span></code></pre></div>\n<p>載入產生的 CSS 後，就可以看到我們上傳的圖片重新以 <code class=\"language-text\">box-shadow</code> 的形式被重組在頁面上，單單一個 <code class=\"language-text\">div</code> 就能繪製出任何圖形！蠻酷的吧！</p>\n<p>完整程式碼請到 CodeSandbox 上翻閱，大部分邏輯都在 <code class=\"language-text\">PixelArtArea.svelte</code> 元件與 <code class=\"language-text\">buildPixelArt.js</code> 這隻檔案，其餘 svelte 部分的程式碼也很好理解，不過我是第一次用 svelte，若有使用不當的地方歡迎指教！</p>\n<iframe src=\"https://codesandbox.io/embed/image-to-pixel-art-usdtn?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"image-to-pixel-art\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"注意事項\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事項</h2>\n<p>利用 <code class=\"language-text\">box-shadow</code> 繪圖基本上沒什麼實質意義，就只是好玩而已，千萬不要把這用到正式環境，效能之差會把使用者端的瀏覽器搞當機的。這次的範例也只能吃得下像素較小的圖片，若是上傳了較大的檔案，打開 Devtool 時就會發現你的頁面 crash 了...\n另外，產生完的 CSS，範例中我是直接 append 到 <code class=\"language-text\">head</code> 下，所以若是在沒有重整頁面的狀況下上傳別的圖片，就會再度 append 新的 css 進去，久了以後 head 也會越來越肥。</p>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>CSS 真的很有趣，能做出許多意料之外的事，雖然絕大多數沒什麼用處，但這種技術上的創意應用所帶來的興奮感，正是繁忙於日常的開發者們所需要的吧！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://una.im/sass-pixel-art/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Una Kravets 的部落格</a></li>\n<li><a href=\"https://codepen.io/andrewarchi/pen/jPbqMx?editors=0010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Convert an image to CSS Box Shadows</a> </li>\n<li><a href=\"https://codepen.io/nucliweb/pen/oXMYyL?editors=1100\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iron man</a></li>\n</ol>","fields":{"slug":"box-shadow-drawing"},"frontmatter":{"title":"利用 box-shadow 畫出任何圖案","date":"02-01-2020","tags":["css","box-shadow","drawing"]},"timeToRead":6}},"pageContext":{"slug":"box-shadow-drawing","prev":{"excerpt":"Interviewer: Explain deadlock to me and you're hired. Developer: Hire me and I'll explain deadlock to you.","html":"<blockquote>\n<p>Interviewer: Explain deadlock to me and you're hired.</p>\n</blockquote>\n<blockquote>\n<p>Developer: Hire me and I'll explain deadlock to you.</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>一陣子沒有關注 CSS 的最新發展，最近趁著年假補帶 2019 Google Chrome Summit 時，看到這場 talk - <a href=\"https://youtu.be/-oyeaIirVC0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next-generation web styling</a>，裡面提到不少有趣的新屬性，透過這篇文章整理一下內容，分享給各位與未來的我。\n註：官方在 12 月初也發佈了<a href=\"https://web.dev/next-gen-css-2019/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文字版本</a>，習慣閱讀原文的讀者可以參考看看。</p>\n<h1 id=\"新世代的css\" style=\"position:relative;\"><a href=\"#%E6%96%B0%E4%B8%96%E4%BB%A3%E7%9A%84css\" aria-label=\"新世代的css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>新世代的...CSS</h1>\n<ol>\n<li>scroll-snap - native scroll inertia and decelerations</li>\n<li>focus-within - solving focus accessibility within elements</li>\n<li>@media (prefers-*) - considerately adjust your UI/UX to a user's device preferences via Media Query hooks provided by browser</li>\n<li>logical properties - dynamic directionality</li>\n<li>sticky situations - keeping UI within the viewport</li>\n<li>backdrop-filter - style adjustments behind an element</li>\n<li>:is() - formerly :any() &#x26;&#x26; :matches()</li>\n<li>Grid-gap</li>\n<li>CSS Houdini - a low-level API for CSS</li>\n<li>typed OM - CSS values as JavaScript objects rather than strings</li>\n<li>Paint API - create your own paint functions using a canvas-like syntax</li>\n<li>animation worklet - off the main thread animation</li>\n<li>Others - size, aspect-ratio, min(), max(), clamp(), list style type, display: outer inner</li>\n</ol>\n<p>演講中洋洋灑灑介紹了 12 種以上的 CSS 新屬性與新功能，雖然其中有幾位老朋友在我之前的文章 - <a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 魔術師 Houdini API 介紹</a> 有說明過，但大部分的新屬性還是令人感到振奮！</p>\n<h2 id=\"scroll-snap\" style=\"position:relative;\"><a href=\"#scroll-snap\" aria-label=\"scroll snap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scroll-snap</h2>\n<p>看到 snap 自然反應先想到薩諾斯彈指消滅一半人口，但其實字面上還有迅速回復的意思，而 scroll-snap，顧名思義就是要讓你在 scroll 時，能夠迅速回到設定的 snap point。這麼說有點抽象，回想一下你使用過的 Carousel 套件，大多數當你滑動圖片超過一半距離時，套件會自動幫你將下一張圖片拉到正中間，若是滑動小於一半距離，則會彈回至原本的圖片，就像這樣：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/f271a7cbda1641efa2ecc6dda50d27cf.gif\" alt=\"Demo\"></p>\n<p>scroll-snap 主要提供的兩個屬性：<code class=\"language-text\">scroll-snap-type</code> 與 <code class=\"language-text\">scroll-snap-align</code> 就可以讓你直接透過 CSS 達到一樣效果，而且擁有足夠的調整彈性。</p>\n<p>Demo：</p>\n<p class=\"codepen\" data-height=\"430\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"Exawayy\" style=\"height: 430px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/Exawayy\">\n  scroll-snap example</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><code class=\"language-text\">scroll-snap-type</code> 作用在 scroll container 上頭，用來表明要用哪種 type 的 scroll 與 scroll 的方向。（註：scroll container　指的是擁有 <code class=\"language-text\">overflow: scroll|auto</code> 屬性，且其內元素足以造成 overflow 的 container。）</p>\n<p>而比起上述一般 carousel 套件預設的行為（移動小於一半距離拉回前一張圖），透過給予 <code class=\"language-text\">scroll-snap-align</code> 不同的屬性：<code class=\"language-text\">start</code>、<code class=\"language-text\">end</code> 和 <code class=\"language-text\">center</code>，可以自行決定 snap point，告知內容應該要對齊到 scroll container 中的哪個點。</p>\n<p>你可以從上面的 Codepen demo link 去修改 <code class=\"language-text\">scroll-snap-align</code> 看看，有什麼不同結果。</p>\n<p>另外，如果你不想讓每次 snap 都對齊邊緣，能稍微露出前一張圖的內容，可以透過 <code class=\"language-text\">scroll-padding</code> 與 <code class=\"language-text\">scroll-margin</code> 的調整來達成。不過注意，兩者的應用對象有所不同。</p>\n<p><code class=\"language-text\">scroll-padding</code> 需要應用在 scroll container 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.scroller section</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 <code class=\"language-text\">scroll-margin</code> 則是運用在 container 內的 children 上頭：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.scroller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.scroller section</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">scroll-margin</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>兩者效果相同：</p>\n<p class=\"codepen\" data-height=\"428\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"jOEGbdQ\" style=\"height: 428px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example-2\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/jOEGbdQ\">\n  scroll-snap example-2</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>這對於你的 scroll container 中有 fixed 的元素時很有幫助：</p>\n<p class=\"codepen\" data-height=\"420\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"NWPaGmL\" style=\"height: 420px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"scroll-snap example-fixedHeader\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/NWPaGmL\">\n  scroll-snap example-fixedHeader</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>更多細節，<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap/Basic_concepts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 上有蠻完整的說明</a>。</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/10d10829177d46adab0c0ee8d582b217.png\" alt=\"scroll-snap-caniuse\"></p>\n<h2 id=\"focus-within\" style=\"position:relative;\"><a href=\"#focus-within\" aria-label=\"focus within permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>focus-within</h2>\n<p>在<a href=\"https://blog.techbridge.cc/2019/10/13/web-accessibility-intro/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Accessibility 的重要性</a>這篇文章中，有提到過元素可聚焦性的重要，讓使用者能用 tab 在網頁各元素間切換。但實作上常常遇到一個問題，就是當我們利用 <code class=\"language-text\">:focus</code> 僞類別製作 Menu 的下拉選單，讓子元素在父元素被 focus 後顯示出來時，tab 切換會失敗，因為當你 tab focus 到子元素時，父元素就失去 focus 狀態，子元素也因應消失：</p>\n<p><a href=\"https://web.dev/next-gen-css-2019/#:focus-within\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">google 的圖畫</a>說明很清楚：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/3f70bc94fb30417c8a5a2b5bd83b6b5e.png\" style=\"max-width: 700px\">\n<p>但若是換成 <code class=\"language-text\">focus-within</code>，就不再有這問題了，他會在父元素被 focus 時觸發：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.menu:focus-within</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> visible<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"abzLBrP\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"focus-within-example\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/abzLBrP\">\n  focus-within-example</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/9af24cbb0e80433b8d43b184c76822d6.png\" alt=\"caniuse-focuswithin\"></p>\n<h2 id=\"media-prefers-\" style=\"position:relative;\"><a href=\"#media-prefers-\" aria-label=\"media prefers  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@media (prefers-*)</h2>\n<p>Media Queries 讓我們容易實作 RWD 設計，而現在最新的 Media Queries 可以讓我們偵測到使用者 OS-level 的系統偏好設定，例如 dark-mode，或是低階設備可以開啟 <code class=\"language-text\">prefers-reduced-motion</code> 來降低動畫節省資源。</p>\n<p>這些能夠自動偵測系統偏好，並給予回應的 Media Queries 有：</p>\n<p><a href=\"https://developers.google.com/web/updates/2019/03/prefers-reduced-motion\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-reduced-motion</a>\n<a href=\"https://web.dev/prefers-color-scheme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-color-scheme</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-contrast</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-transparency\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prefers-reduced-transparency</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">forced-colors</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">inverted-colors</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/light-level\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">light-level</a></p>\n<p>目前最新版的 Chrome (ver. 79) 已經有提供 <code class=\"language-text\">prefers-reduced-motion</code> 與 <code class=\"language-text\">prefers-color-scheme</code> 的 emulation，只要打開 Devtool，到 <code class=\"language-text\">Rendering</code> tab 下就能看到：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/ec593dddc40d4030bbdb5a7f2bf99d14.png\" alt=\"devtool @media emulation\"></p>\n<p>在演講中，講者 Adam 特別強調，<code class=\"language-text\">reduced-motion</code> 不是 <code class=\"language-text\">no-motion</code>，使用者想要少一點動畫，而非完全沒有動畫，可以從 演講中的範例感受一下（<a href=\"https://web.dev/next-gen-css-2019/#media-queries-level-5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>、<a href=\"https://codepen.io/argyleink/pen/RwwZMKm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">codepen demo</a>）：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/6ca565ec03eb439a9b66f5de287d062e.gif\" alt=\"reduced-motion\"></p>\n<h2 id=\"logical-properties\" style=\"position:relative;\"><a href=\"#logical-properties\" aria-label=\"logical properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logical properties</h2>\n<p>身為前端工程師，或多或少都會處理 i18n 的問題，在網頁排版上，不同語言間的 writing system 可能會造成我們需要個別為不同的語言客製化設定 css style，來調整 margin、padding 等等，而 Logical properties 就是希望能用更有效率、更好維護的方式來解決這問題。 <a href=\"https://web.dev/next-gen-css-2019/#logical-properties\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">image ref</a></p>\n<p>這是我們熟知的 box model：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/9d89a63601464607836370802e092ef5.png\" style=\"max-width: 700px\">\n<p>Logical properties 將其改為：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/78a8cb5f4113482a8f009f2400743435.png\" style=\"max-width: 700px\">\n<p>差別在於從原本單純 <code class=\"language-text\">top</code>、<code class=\"language-text\">down</code>、<code class=\"language-text\">left</code>、<code class=\"language-text\">right</code> 外，多了 <code class=\"language-text\">block-*</code> 與 <code class=\"language-text\">inline-*</code> 兩個維度，根據使用語言的不同，瀏覽器會自動調整 <code class=\"language-text\">block-*</code> 與 <code class=\"language-text\">inline-*</code> 代表的屬性，例如在英文的寫作系統上，<code class=\"language-text\">block-start</code> 就代表 <code class=\"language-text\">top</code>，<code class=\"language-text\">inline-end</code> 代表 <code class=\"language-text\">right</code>。</p>\n<p>有了 logical properties 的幫助，就能簡單的依據語言系統變更 <code class=\"language-text\">writing-mode</code> 與 <code class=\"language-text\">direction</code> 來調整 layout <a href=\"https://codepen.io/una/pen/mddxpaY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ref</a>：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/47f5d3eaf6ba4545af05999e654f4700.gif\" alt=\"logical layout example\"></p>\n<h2 id=\"sticky-situations\" style=\"position:relative;\"><a href=\"#sticky-situations\" aria-label=\"sticky situations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sticky situations</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position#Sticky_positioning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Position: sticky</code></a> 應該已經很多人用在產品當中了吧，但這次 Google 還是把它拿出來特別再介紹一番，提供了三種應用 sticky 的方式，蠻值得參考的：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/1c9bfc06cbbc423eac2d68da391a3af3.gif\" alt=\"sticky-demo\"></p>\n<p>仔細看每種應用的差別，基本上在於 sticky 的元素如何被”解除“ sticky，比較有趣的是 Sticky Desperado，利用 grid-system 達到 two column 的變化，可以到 codepen 上觀看實際程式碼：<a href=\"https://codepen.io/argyleink/pen/YzzZyMx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Slide</a>、<a href=\"https://codepen.io/argyleink/pen/abbJOjP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Stack</a>、<a href=\"https://codepen.io/argyleink/pen/qBBrbyx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sticky Desperado</a></p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/23c0b7fc70b540fc8632163d24e1c2c2.png\" alt=\"caniuse-sticky\"></p>\n<h2 id=\"backdrop-filter\" style=\"position:relative;\"><a href=\"#backdrop-filter\" aria-label=\"backdrop filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>backdrop-filter</h2>\n<p>再來是我最喜歡的一個新屬性。以往我們要達到模糊圖片背景，並在上面加上文字的效果，可能需要這樣做：</p>\n<p class=\"codepen\" data-height=\"382\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"JjorEqG\" style=\"height: 382px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"blur image with text\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/JjorEqG\">\n  blur image with text</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<p>需要把圖片設定成 <code class=\"language-text\">background-image</code>，設定 <code class=\"language-text\">filter: blur</code>，再透過 <code class=\"language-text\">position:fixed</code> 把文字釘上去。但有了 <code class=\"language-text\">backdrop-filter</code>，我們簡單將這個屬性套用在想要疊加的文字上，並直接放置於 <code class=\"language-text\">img</code> 元素：</p>\n<p class=\"codepen\" data-height=\"362\" data-theme-id=\"29194\" data-default-tab=\"css,result\" data-user=\"arvin0731\" data-slug-hash=\"ExawZqj\" style=\"height: 362px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"blur image with text-backdrop-filter\">\n  <span>See the Pen <a href=\"https://codepen.io/arvin0731/pen/ExawZqj\">\n  blur image with text-backdrop-filter</a> by Arvin (<a href=\"https://codepen.io/arvin0731\">@arvin0731</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n<h2 id=\"is\" style=\"position:relative;\"><a href=\"#is\" aria-label=\"is permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:is()</h2>\n<p><code class=\"language-text\">:is()</code> 這個僞類別已經存在很久了，但他們覺得很少人真正使用它，因此特別提出來介紹。\n基本上 <code class=\"language-text\">:is()</code> 的功用就是能讓你將用逗號分隔的 selector，以參數形式放入其中，來達成同樣效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span>focus<span class=\"token punctuation\">,</span>\nbutton<span class=\"token operator\">:</span>focus <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\narticle <span class=\"token operator\">></span> h1<span class=\"token punctuation\">,</span>\narticle <span class=\"token operator\">></span> h2<span class=\"token punctuation\">,</span>\narticle <span class=\"token operator\">></span> h3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 與上面同樣效果 */</span>\nbutton<span class=\"token operator\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">.</span>focus<span class=\"token punctuation\">,</span> <span class=\"token operator\">:</span>focus</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\narticle <span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h1<span class=\"token punctuation\">,</span>h2<span class=\"token punctuation\">,</span>h3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"gap\" style=\"position:relative;\"><a href=\"#gap\" aria-label=\"gap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gap</h2>\n<p>這邊指的 gap，就是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Grid Layout</a> 中的 gap，讓你不用為了製造出元素間的隔間，使用 margin，卻多出不必要的空隙 <a href=\"https://web.dev/next-gen-css-2019/#gap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">img ref</a>：</p>\n<img src=\"https://static.coderbridge.com/img/ArvinH/95dbce89c5b54d8db7b6497a7fbcec76.png\" style=\"max-width: 700px\">\n<p>在演講中他們也有提到，<code class=\"language-text\">gap</code> 除了能用在 Grid layout 外，FireFox 也支援將其應用在 <code class=\"language-text\">flex</code> display 上頭，慣用 FireFox 瀏覽器的讀者可以嘗試看看。</p>\n<h2 id=\"css-houdinityped-ompaint-apiworklet\" style=\"position:relative;\"><a href=\"#css-houdinityped-ompaint-apiworklet\" aria-label=\"css houdinityped ompaint apiworklet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Houdini、typed OM、Paint API、Worklet</h2>\n<p>CSS Houdini 是由一群來自 Mozilla, Apple, Opera, Microsoft, HP, Intel, IBM, Adobe 與 Google 的工程師所組成的工作小組，志在建立一系列的 API，讓開發者能夠介入瀏覽器的 CSS engine 運作，帶給開發者更多的解決方案，用來解決 CSS 長久以來的問題：</p>\n<ul>\n<li>Cross-Browser isse</li>\n<li>CSS Polyfill 的製作困難</li>\n</ul>\n<p>CSS Houdini 提供的 API 讓你能存取 CSS Object Model，讓你透過 Javascript 延展 CSS 的功能，比起 CSS polyfill 能有更好的效能。</p>\n<p>而 Worklet、Typed OM、Paint API 也都包含在 CSS Houdini 的規範中，在我之前的文章 <a href=\"https://blog.techbridge.cc/2017/05/23/css-houdini/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS 魔術師 Houdini API 介紹</a> 都有詳細介紹過，有興趣可以前往細讀。</p>\n<p>這邊我簡單說明 typed OM 與 Paint API 這兩個目前實作度較高的新功能，其中 Paint API 需要 Worklet 的輔助。</p>\n<p><em>typed OM</em> 簡單來說就是就是 CSSOM 的強化版，最主要的功能在於將 CSSOM 所使用的字串值轉換成具有型別意義的 JavaScript 表示形態，例如你可以這樣操作 CSS style: (source from <a href=\"http://slides.com/malyw/houdini-codemotion#/27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSS Houdini- the bridge between CSS, JavaScript and the browser</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CSS -> JS</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>styleMap<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSSimpleLength {value: 12, type: \"px\", cssText: \"12px\"}</span>\n\n<span class=\"token comment\">// JS -> JS</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSUnitValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// CSSUnitValue{value:5,unit:\"px\",type:\"length\",cssText:\"5px\"}</span>\n\n<span class=\"token comment\">// JS -> CSS</span>\n<span class=\"token comment\">// set style \"transform: translate3d(0px, -72.0588%, 0px);\"</span>\nelem<span class=\"token punctuation\">.</span>outputStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTransformValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSTranslation</span><span class=\"token punctuation\">(</span>\n          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CSSSimpleLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">-</span> currentPercent<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用 <code class=\"language-text\">styleMap</code> 取得元素上以物件型態表示的 style 屬性，並能透過 <code class=\"language-text\">outputStyleMap</code> 來設定 style，其中還可看出多了 <code class=\"language-text\">CSSTransformValue</code> 與 <code class=\"language-text\">CSSTranslation</code> 這種 Class Interface。</p>\n<p>而 <em>Paint API</em> 則提供一個叫做 registerPaint 的方法：：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>宣告使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.div-1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.div-2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">--rect-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 50% 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span>simpleRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>.div-1 與 .div-2 就可以擁有各自定義寬高顏色的方形 background-image。</p>\n<p>不過這邊要注意一下，上面撰寫的 js 檔案，你可能會覺得就直接像一般 web 嵌入 js 的方式一樣即可，\n但實際上並非如此，我們需要透過 <em>Worklets</em> 來幫我們載入。以上面的 Paint API 為例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add a Worklet</span>\npaintWorklet<span class=\"token punctuation\">.</span><span class=\"token function\">addModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// WORKLET \"simpleRect.js\"</span>\n<span class=\"token function\">registerPaint</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simpleRect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">inputProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">paint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> properties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 依據 properties 改變顏色</span>\n        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--rect-color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> color<span class=\"token punctuation\">.</span>cssText<span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Worklets</em> 可以算是給 CSS Engines 使用的 worker，相對於 web worker 來說較為輕量、生命週期較短，適合用來處理 CSS engine 這種可能會牽扯到數百萬畫素圖片的工作。</p>\n<p>實際範例可以參考 Google 提供的 <a href=\"https://codepen.io/una/pen/VXzRxp?editors=1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Codepen 範例</a></p>\n<h2 id=\"others\" style=\"position:relative;\"><a href=\"#others\" aria-label=\"others permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Others</h2>\n<p>還有許多新屬性在演講中沒有時間細講，就將其主要功能列在這邊，有興趣的人可以到 MDN 或 W3C 上搜尋。</p>\n<ul>\n<li><code class=\"language-text\">size</code>: 可以讓你同時設定元素的寬、高屬性。</li>\n<li><code class=\"language-text\">aspect-ratio</code>: 透過此屬性，再也不用利用 padding 等方式來製造等比例縮放效果了！</li>\n<li><code class=\"language-text\">min()</code>, <code class=\"language-text\">max()</code>, <code class=\"language-text\">clamp()</code>: 這幾個函式提供你在各種 CSS 屬性加上數值的限制。</li>\n<li><code class=\"language-text\">list-style-type</code>: 有新的 value 可以設置，像是 emoji 與 SVGs。</li>\n<li><code class=\"language-text\">display: outer inner</code>: display 屬性之後能夠接受兩個參數，讓你明確的個別設置 outer 與 inner layout，而非使用 <code class=\"language-text\">inline-flex</code> 這種結合在一起的 keywords。</li>\n</ul>\n<h1 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h1>\n<p>CSS 的發展總是比較緩慢，畢竟需要各個瀏覽器實作配合，背後的因素可能不單單是純技術這麼簡單，但慢歸慢，還是能看得到前進的步伐，在新屬性普及前，就到 codepen 上弄個 side project 玩玩吧！\n所有演講中提到的功能，只要是目前瀏覽器已經支援的，都有範例公布在他們的<a href=\"https://css-at-cds.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">範例網站</a>上，推薦前往試試！</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ul>\n<li><a href=\"https://youtu.be/-oyeaIirVC0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vidoe - Next-generation web styling</a></li>\n<li><a href=\"https://web.dev/next-gen-css-2019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Article - Next-generation web styling</a></li>\n<li><a href=\"https://css-at-cds.netlify.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Examples - Next-generation web styling</a></li>\n<li><a href=\"https://juejin.im/post/5dd68a9be51d451e6d48c4b8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你不知道的 CSS ： Next-generation web styling</a></li>\n</ul>","id":"ace042c3-d8b4-5a8f-bf46-72bb8396db5f","fields":{"slug":"cds-2019-next-generation-web-styling"},"frontmatter":{"date":"2019-12-31T20:22:02.000Z","title":"CDS2019 Next-generation web styling 整理介紹","tags":["css","chrome dev summit","Web"],"type":"tech","slug":"cds2019-next-generation-web-styling"},"timeToRead":12},"next":{"excerpt":"『願你餘生所有的珍惜都不用靠失去來懂得。』","html":"<blockquote>\n<p>『願你餘生所有的珍惜都不用靠失去來懂得。』</p>\n</blockquote>\n<!-- more -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近因為武漢肺炎的關係，公司展開了不知得持續多久的 Work From Home 政策，雖然團隊裡有些人不太喜歡，覺得這樣溝通與開會效率比不上在辦公室面對面，但我個人是還蠻習慣的，並且，這節省下來的通勤時間，剛好讓我可以多看一些影片跟玩玩 side project。這次在補帶 React Conf 2019 的影片時，看到前 React team 的 EM, Sophie Alpert 介紹 <a href=\"https://www.youtube.com/watch?v=CGpMlWVcHok\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a Custom React Renderer</a>，加上 side project 用上了 <a href=\"https://github.com/vadimdemedes/ink\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ink</a> 這個能用 React 撰寫 command line 工具的套件，讓我決定透過實際操作來了解何謂 Custom React Renderer，以及該如何打造。除了 Sophie Alpert 的影片外，基本上是參考 <a href=\"https://github.com/nitin42/Making-a-custom-React-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@nitin42 的這份教學</a>，以 <a href=\"https://github.com/Ziv-Barber/officegen\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">officegen</a> 作為 React Component 的 host environment，讓我們能用撰寫 React 的方式來製作 pptx 投影片！</p>\n<h1 id=\"react-reconciliation-與-renderer\" style=\"position:relative;\"><a href=\"#react-reconciliation-%E8%88%87-renderer\" aria-label=\"react reconciliation 與 renderer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Reconciliation 與 Renderer</h1>\n<p>React 的架構中有兩個主要的重心，<strong>reconciliation</strong> 與 <strong>rendering</strong>。<strong>reconciliation</strong> 是 React 用來找出狀態改變前後，其 UI 樹狀結構差異的演算法，並決定哪一部分的節點是需要被更動的，也就是市面上流傳所謂 <code class=\"language-text\">Virtual DOM</code> 的核心概念。但實際上所謂 <code class=\"language-text\">Virtual DOM</code> 這個名詞有點誤用，因為在 <strong>reconciliation</strong> 的演算法與定義中，完全不涉及 <strong>DOM</strong>，<strong>DOM</strong> 只是 React reconciliation 可以套用的其中一個 <strong>Host Environment</strong>，<strong>rendering</strong> 的過程會依據 <strong>reconiliation</strong> 的結果，搭配所在的 <strong>Host Environment</strong> 來渲染出相對應的畫面，這就是 <strong>Renderer</strong> 所負責的。例如 <code class=\"language-text\">React-Native</code> 就是 <strong>Host Environment</strong> 為 iOS、Android 平台的一種 Renderer，當然 <code class=\"language-text\">react-dom</code> 也是。</p>\n<p>這個架構老早就存在於 React 的核心中，當初 Fiber 架構就是在改善 <strong>reconciliation</strong> 的實作方式（當然也有影響 renderer 的實作），也有許多文章在探討與說明。</p>\n<p>只是較少為人知的是，Rect 其實有一個 <code class=\"language-text\">react-reconciler</code> 的套件可以使用，幫你處理好 reconciliation 的部分，提供一些介面讓你根據想要的 host environment 實作 rendering，而這就是為什麼有人能客製化各種 renderer，讓大家能用 React 撰寫 VR、Command Line 或是 等等（可參考此 <a href=\"https://github.com/chentsulin/awesome-react-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome list</a>）。</p>\n<p>關於 Fiber 架構的觀念介紹，推薦大家去看 <a href=\"https://twitter.com/acdlite?lang=en\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Clark</a> 的<a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文章</a>，雖然是很久之前寫的，但我覺得觀念闡述的很清晰易懂。</p>\n<p>簡單來說，所謂的 fiber 是在 reconciliation 中的一個工作單位，一個 fiber 是一個 JavaScript object，包含著一個 Component 的資訊，其輸入與輸出，在接下來的實作中，我們會利用 <code class=\"language-text\">react-reconciler</code> 與 fiber 所提供的 Component 資訊來實作一個客製化 PPTXRenderer。</p>\n<h2 id=\"最終的結果\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E7%B5%82%E7%9A%84%E7%B5%90%E6%9E%9C\" aria-label=\"最終的結果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最終的結果</h2>\n<p>先看一下最終的成品功能，這樣在說明後面的實作時，應該會比較有感受。</p>\n<p>這次範例中所客製化的 PPTXRenderer 可以讓我們使用兩個 Component：<code class=\"language-text\">&lt;Slide></code> 與 <code class=\"language-text\">&lt;Text></code> 來產生投影片。</p>\n<p>例如在 <code class=\"language-text\">App.js</code> 中這樣寫：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Text<span class=\"token punctuation\">,</span> Slide<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../src'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">2</span> 😍 😍<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/text.pptx</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>會產生這樣的投影片：</p>\n<p><img src=\"https://static.coderbridge.com/img/ArvinH/29dd4226b9c0462bb75ef278795ee337.gif\" alt=\"demo\"></p>\n<blockquote>\n<p>TL;DR\n篇幅有點長，很多程式碼，若不想看文章，可以直接參考程式碼 <a href=\"https://github.com/ArvinH/reapptx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reapptx</a></p>\n</blockquote>\n<h1 id=\"custom-renderer-基本結構\" style=\"position:relative;\"><a href=\"#custom-renderer-%E5%9F%BA%E6%9C%AC%E7%B5%90%E6%A7%8B\" aria-label=\"custom renderer 基本結構 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Renderer 基本結構</h1>\n<p><code class=\"language-text\">react-reconciler</code> 提供的函式可以接受一個 <strong>host config object</strong>，並回傳 renderer instance。其中 <strong>host config object</strong> 是我們用來定義與實作在 renderer 的 lifecycle 中所需要的 method，包含 <code class=\"language-text\">update</code>、<code class=\"language-text\">append children</code>、<code class=\"language-text\">remove children</code> 等等，這邊所處理的通通都是 <strong>host environment</strong> 底下的 components，其餘 non-host 的 components 都會由 React 負責管理。</p>\n<p>先看看 <code class=\"language-text\">react-reconciler</code> Readme 內提供的範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-reconciler\"</span>\n\n<span class=\"token keyword\">const</span> HostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You'll need to implement some methods here.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>HostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RendererPublicAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> MyRendererContainer <span class=\"token operator\">=</span> MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call MyRenderer.updateContainer() to schedule changes on the roots.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> RendererPublicAPI<span class=\"token punctuation\">;</span></code></pre></div>\n<p>還記得你一般開發 react app 時，都會呼叫 <code class=\"language-text\">ReactDOM.render</code> 來將你的 root component 掛載到一個 <code class=\"language-text\">div</code> 上頭嗎？上述程式碼中所 export 的 <code class=\"language-text\">RenderPublicAPI.render</code> 就等同於 <code class=\"language-text\">ReactDOM.render</code>。</p>\n<p>而在 <code class=\"language-text\">render</code> 函式中，由 <code class=\"language-text\">HostConfig</code> 與 <code class=\"language-text\">react-conciler</code> 所建構的 custom renderer 就可以將 React component 應用在不同的 host environment 中。</p>\n<p>至於如何實作 <code class=\"language-text\">HostConfig</code>，這邊有<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">完整的 method 列表</a>，你也可以參考 <a href=\"https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-dom</code></a> 或 <a href=\"https://github.com/facebook/react/blob/master/packages/react-native-renderer/src/ReactNativeHostConfig.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">react-native</code> 的 HostConfig</a>。</p>\n<p>不過從列表中洋洋灑灑一堆 interface，到底哪些是重要的呢？</p>\n<p>我們可以利用一個方式來測試，先把原本使用 <code class=\"language-text\">react-dom</code> 的 renderer 換成你自己的：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">import React from \"react\";\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>// import ReactDOM from \"react-dom\";\n<span class=\"token prefix inserted\">+</span>import MyRenderer from \"./MyRenderer\";\n</span>\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>ReactDOM.render(\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>MyRenderer.render(\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> &lt;React.StrictMode>\n<span class=\"token prefix unchanged\"> </span>   &lt;App />\n<span class=\"token prefix unchanged\"> </span> &lt;/React.StrictMode>,\n<span class=\"token prefix unchanged\"> </span> rootElement\n</span>);</code></pre></div>\n<p>而在 <code class=\"language-text\">MyRenderer.js</code> 中，將各個函式一個一個放上去，並加上 log，直到你的頁面沒有出現 error：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-reconciler\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> HostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appendInitialChild\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createTextInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ... 依此類推將各種 method 都放上去，並加上 log</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MyRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>HostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RendererPublicAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// render function 中的內容則參考 react-conciler 的 readme</span>\n    <span class=\"token comment\">// 將 renderer 的 container 創建出來，並將傳入的 element update 上去。</span>\n    <span class=\"token keyword\">const</span> MyRendererContainer <span class=\"token operator\">=</span> MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    MyRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> MyRendererContainer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RendererPublicAPI<span class=\"token punctuation\">;</span></code></pre></div>\n<p>這時你的頁面應該會是空白的，因為你所有 renderer 的 method 都尚未實作。但如此一來就能觀察出在你的 <code class=\"language-text\">&lt;App /></code> component 中，renderer 會調用哪些函數、執行順序為何、個別的參數是什麼。</p>\n<p>這邊給大家一個 codesandbox 的例子把玩：</p>\n<iframe\n  src=\"https://codesandbox.io/embed/youthful-shaw-cinj5?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"custom-react-renderer-check-func-order\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n<h2 id=\"實際的-host-config\" style=\"position:relative;\"><a href=\"#%E5%AF%A6%E9%9A%9B%E7%9A%84-host-config\" aria-label=\"實際的 host config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>實際的 Host Config</h2>\n<p>初步了解 Renderer 的結構與需要填入的 Host Config 後，我們可以來實作需要的 method：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Reconciler <span class=\"token keyword\">from</span> <span class=\"token string\">'react-reconciler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hostConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parentInstance<span class=\"token punctuation\">.</span>appendChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      parentInstance<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext<span class=\"token punctuation\">,</span>\n    internalInstanceHandle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getRootHostContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getChildHostContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentHostContext<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> rootContainerInstance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">shouldSetTextContent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">text<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext<span class=\"token punctuation\">,</span>\n    internalInstanceHandle</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">finalizeInitialChildren</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">parentInstance<span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">,</span>\n    rootContainerInstance<span class=\"token punctuation\">,</span>\n    hostContext</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">getPublicInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inst</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> inst<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">prepareForCommit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootcontainerInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">resetAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootcontainerInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">appendChildToContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">removeChildFromContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* noop */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">now</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  supportsMutation<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> PPTXRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>hostConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有許多 function 是必要但我們的範例中用不著的，所以留空，不過我還是一個一個說明他們各自的功能為何。</p>\n<ul>\n<li><code class=\"language-text\">appendInitialChild(parentInstance, child)</code></li>\n</ul>\n<p>當 renderer 在繪製 component 的時候，會透過此函式將該 component 的 child component append 上去，所以在這個函式中，你必須實作如何將你想要 render 的 component child 加到其 parent component 上頭。以我們的範例為例，是會在每個 component 都實作一個 <code class=\"language-text\">appendChild</code> 函式，在這邊我們就只需要執行 <code class=\"language-text\">parentInstance.appendChild(child);</code> 即可。</p>\n<ul>\n<li><code class=\"language-text\">createInstance(\ntype,\nprops,\nrootContainerInstance,\nhostContext,\ninternalInstanceHandle\n)</code></li>\n</ul>\n<p>看名字就知道是在創建 Component instance 的函式，會傳入當前節點的 type、該節點的 props、根節點的實例、host 環境的 context，以及一個叫做 internalInstanceHandle 的物件。</p>\n<p>其他參數都很好懂，這個 internalInstanceHandle 其實就是對應此節點的 fiber。我們前面有說過，fiber 代表的是整個 reconciler 過程中的一個工作單位，而每個 component 都有對應的兩種 fiber，分別是已經完成工作，可以render 的 flushed fiber 跟尚未處理完的 work in progress fiber，fiber 中包含許多 component 的資訊。基本上這個範例中，前面兩個參數就足夠了。想了解更多 fiber 的內容請參考 <a href=\"https://github.com/acdlite/react-fiber-architecture\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-fiber-architecture</a>。</p>\n<p>在這個範例中，我們只需要透過傳入的 type 來決定我們要對應產生哪個 component 的實例，後面會在說明每個 component 的實作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">getRootHostContext(instance)</code></li>\n</ul>\n<p>這個函式讓你能夠與 Host Config 中的其他 method 共享 context。基本上會傳入 root component instance 當參數。\n在這範例中，並沒有需要 share 任何 context，所以回傳個空物件即可。</p>\n<ul>\n<li><code class=\"language-text\">getChildHostContext(parentHostContext, type, rootContainerInstance)</code></li>\n</ul>\n<p>與上一個函式雷同，讓你能夠分享 context 給當下節點的 children，也能取得 parent 的 context。我們一樣不需要用到，所以回傳空物件。</p>\n<ul>\n<li><code class=\"language-text\">shouldSetTextContent(type, props)</code></li>\n</ul>\n<p>就我的理解，這個函數的目的可以簡單說是讓你有機會判斷是否要將 traversal 停止在當前節點。通常我們的 leaf node 都會是 text node，若在此函式內你回傳 true，則 reconciler 會停止繼續往下 traverse，他會停止在這層，然後接著呼叫 <code class=\"language-text\">createInstance</code> 去創建實例。</p>\n<p>若是設為 false，reconciler 澤會繼續遞迴下去，直到此函式回傳 true，或是真的達到了 leaf text node。若是達到 leaf text node，就會呼叫另個函式 - <code class=\"language-text\">createTextInstance</code>。</p>\n<p>以我們的範例來說，我們不像 <code class=\"language-text\">react-dom</code> 需要考慮 <code class=\"language-text\">textarea</code> 或是 <code class=\"language-text\">dangerouslySetInnerHTML</code> 等情況，都直接回傳 false 即可。</p>\n<ul>\n<li><code class=\"language-text\">createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle)</code></li>\n</ul>\n<p>顧名思義就是創建 Text instance，這個 Text 指的是你在 component 中直接撰寫的 string 部分，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span> Taiwan No<span class=\"token punctuation\">.</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">Taiwan No.1</code> 就是這邊要處理的 Text instance。在 <code class=\"language-text\">react-dom</code> 中就是要創建一個 <code class=\"language-text\">textNode</code>，而在這邊我們直接回傳 Text 本身，讓他的父節點 <code class=\"language-text\">&lt;Text></code> 來處理。\n除了第一個參數 text 外，ㄧ樣會有 root component instance、host context 跟 internalInstanceHandle(fiber)，ㄧ樣我們只會用到第一個參數 text。</p>\n<ul>\n<li><code class=\"language-text\">finalizeInitialChildren(\nparentInstance,\ntype,\nprops,\nrootContainerInstance,\nhostContext\n)</code></li>\n</ul>\n<p>這個函式主要目的在於告訴 reconciler 需不需要在當前的 component 上呼叫 <code class=\"language-text\">commitMount()</code>，也就是需不需要等到所有 element 都被 rendered 以後才執行某些事情。例如 input elements 的 autofocus，就需要等 component mount 以後才能被呼叫。\n在我們的範例中，不需要做這些事，所以就回傳 false 即可。若是你回傳 true，那就必須也實作 <code class=\"language-text\">commitMount</code>。</p>\n<ul>\n<li><code class=\"language-text\">getPublicInstance(ins)</code></li>\n</ul>\n<p>只是個公開介面讓你能取得 instance。</p>\n<ul>\n<li><code class=\"language-text\">prepareForCommit(rootcontainerInfo)</code></li>\n</ul>\n<p>當你的節點實例都生成後，即將掛載到根節點時，可以在這個函式內進行一些準備工作，例如統計需要 autofucs 的節點等等，以我們的範例來說不需要做任何事，留空。</p>\n<ul>\n<li><code class=\"language-text\">resetAfterCommit(rootcontainerInfo)</code></li>\n</ul>\n<p>當 reconciliation 結束，inmemory tree 都掛載到 host root element 時，我們可以利用這個函式執行任何後續動作，像是回覆一些 event 狀態等等。</p>\n<ul>\n<li><code class=\"language-text\">appendChildToContainer(container, child)</code></li>\n<li><code class=\"language-text\">removeChildFromContainer(container, child)</code></li>\n<li><code class=\"language-text\">supportsMutation</code></li>\n</ul>\n<p>這幾個可以一起看，<code class=\"language-text\">supportsMutation</code> 代表的是你的 host environment 支不支援一些可以更改結構的 API，像是 DOM 內的 <code class=\"language-text\">appendChild</code>，若有則回傳 true，並實作 <code class=\"language-text\">appendChildToContainer</code> 與 <code class=\"language-text\">removeChildFromContainer</code>，讓 renderer 知道當 host element 執行 mutative api 時該如何處理。\n在我們的範例中我們不需要用到這些，但因為這應該是蠻容易用到的，所以我設為 true 並在這邊說明一下。</p>\n<ul>\n<li><code class=\"language-text\">now()</code></li>\n</ul>\n<p>host config 內最後一個函式 <code class=\"language-text\">now()</code>，是 reconciler 用來計算當前時間的，我們可以留空，或是提供 <code class=\"language-text\">Date.now</code>。</p>\n<h2 id=\"對應-custom-renderer-的-component\" style=\"position:relative;\"><a href=\"#%E5%B0%8D%E6%87%89-custom-renderer-%E7%9A%84-component\" aria-label=\"對應 custom renderer 的 component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>對應 Custom Renderer 的 component</h2>\n<p>終於走完一遍 host config，接下來可以看看我們的 component 該怎麼實作。</p>\n<p>在我們的 <code class=\"language-text\">createInstance()</code> 中，我們根據傳入的 fiber type 來決定要實例化哪個 component：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">COMPONENTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">ROOT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">TEXT</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">SLIDE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Slide</span><span class=\"token punctuation\">(</span>rootContainerInstance<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token constant\">COMPONENTS</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4 id=\"root-component---pptxdocument\" style=\"position:relative;\"><a href=\"#root-component---pptxdocument\" aria-label=\"root component   pptxdocument permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Component - PPTXDocument</h4>\n<p>Root component 在 <code class=\"language-text\">react-dom</code> 內可以說是 <code class=\"language-text\">document</code> 物件，而在我們的 PPTXRenderer 中，該角色就是 <code class=\"language-text\">new officegen('pptx')</code> 物件：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PPTXDocument</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pptx <span class=\"token operator\">=</span> <span class=\"token function\">officegen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pptx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而此物件會被當成 <code class=\"language-text\">rootContainerInstance</code> 被傳到其他 host config 的函式中。</p>\n<h4 id=\"slide-component\" style=\"position:relative;\"><a href=\"#slide-component\" aria-label=\"slide component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slide Component</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Slide</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>pptx<span class=\"token punctuation\">.</span><span class=\"token function\">makeNewSlide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 依據不同 Host environment 來決定要如何實作</span>\n    <span class=\"token comment\">// 在 react-dom 中，可能就是 document.appendChild(child)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// render the text node</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>slideInstance<span class=\"token punctuation\">.</span><span class=\"token function\">addText</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Slide component 會取得 root instance，並呼叫 <code class=\"language-text\">makeNewSlide()</code> 來創建 slide（這是屬於 <code class=\"language-text\">officegen</code> 的 API）。</p>\n<p>然後我們需要實作 <code class=\"language-text\">appendChild(child)</code>，因為我們希望能透過以下的方式來創建 slides：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span></code></pre></div>\n<p>能接收一個 <code class=\"language-text\">&lt;Text></code> component 當子節點來 render Text 到 slide 上，我們用 <code class=\"language-text\">officegen</code> 提供的 <code class=\"language-text\">addText</code> 來將 <code class=\"language-text\">child.content</code> 繪製上去。此函式會被 <code class=\"language-text\">appendInitialChild</code> 呼叫。</p>\n<h4 id=\"text-component\" style=\"position:relative;\"><a href=\"#text-component\" aria-label=\"text component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text Component</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基本結構一樣，只是在 <code class=\"language-text\">appendChild</code> 中，我們不用 append 任何 child，反之，我們需要將 text component 收到的 text child 存入一個 content 變數，讓其 parent(slide component) 可以接收到。</p>\n<h4 id=\"注意事項\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" aria-label=\"注意事項 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意事項</h4>\n<p>雖然我們在這邊都創建了 <code class=\"language-text\">Slide</code> 與 <code class=\"language-text\">Text</code> component，但是在真正使用在 jsx 裡面時（也就是 <code class=\"language-text\">App.js</code>）是不能直接 import 這邊的 component 來使用的，我們可以另外創建一個 string alias 給 <code class=\"language-text\">App.js</code> 使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Aliases for createInstance</span>\n<span class=\"token keyword\">const</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">'TEXT'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Slide <span class=\"token operator\">=</span> <span class=\"token string\">'SLIDE'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Slide<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>Slide <span class=\"token number\">1</span> 😁 😁<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Slide<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們上述所撰寫的 Component 會在 reconciler 的 <code class=\"language-text\">createInstance</code> 中依據這邊的 alias 來創建實例。</p>\n<h4 id=\"render-function\" style=\"position:relative;\"><a href=\"#render-function\" aria-label=\"render function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render function</h4>\n<p>最後我們要實作 render function 來真正取代一般的 <code class=\"language-text\">ReactDOM.render</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// render component</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component<span class=\"token punctuation\">,</span> filePath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 創建 Root component instance 當整個 react tree 的 root。 </span>\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PPTXDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 呼叫 create container，該函式會回傳一個 flushed fiber（完成工作的 fiber，代表可以 render）</span>\n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> PPTXRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 接著透過呼叫 updateContainer 來設定一個從根節點開始的 update，更新整個樹。</span>\n  PPTXRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Officegen generates a output stream and not a file</span>\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Generate a pptx document</span>\n    container<span class=\"token punctuation\">.</span>pptx<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token function\">Events</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>記得我們一般在呼叫 <code class=\"language-text\">ReactDOM.render</code> 時，都會傳入兩個參數嗎？一個是我們的 root component，一個就是要掛載的 dom element，而在我們的範例中，我們一樣傳入 root component，但第二參數給予的是要產生的 ppt 的路徑，而非要掛載的 element，因為我們是要將 react component 寫入 pptx 檔案。</p>\n<p>最後在回傳的 Promise function 中，我們呼叫 <code class=\"language-text\">officegen</code> 的 <code class=\"language-text\">generate</code> 函式來將我們在前面 host config 的 lifecycle method 中所附加到根節點的內容（appendChild 的部分）寫入檔案。</p>\n<p>這樣就完成了我們的 Custom Renderer！</p>\n<p>完整程式碼在此 -> <a href=\"https://github.com/ArvinH/reapptx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reapptx</a></p>\n<h2 id=\"補充說明---update\" style=\"position:relative;\"><a href=\"#%E8%A3%9C%E5%85%85%E8%AA%AA%E6%98%8E---update\" aria-label=\"補充說明   update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>補充說明 - update</h2>\n<p>這次的範例裡面並沒有需要更新 Component 狀態，如果你需要實作一個能處理 state update 的 custom renderer，在你的 host config 中，除了 <code class=\"language-text\">appendChildToContainer()</code> 和 <code class=\"language-text\">removeChildFromContainer()</code> 外，還需要實作 <code class=\"language-text\">prepareUpdate()</code> 與 <code class=\"language-text\">commitUpdate()</code>。</p>\n<ul>\n<li><code class=\"language-text\">prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext)</code></li>\n</ul>\n<p>從他傳入的參數就可以看出，你可以藉由 <code class=\"language-text\">oldProps</code> 與 <code class=\"language-text\">newProps</code> 的比較來決定是否要進行更新，若不需要就回傳 null，要的話就回傳要更新的 payload。</p>\n<ul>\n<li><code class=\"language-text\">commitUpdate(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle)</code></li>\n</ul>\n<p>這個函式就是負責最後將要 <code class=\"language-text\">prepareUpdate</code> 回傳的 update payload 套用到實際 instance 上。</p>\n<p>關於<strong>更新</strong>的實際例子，可以參考 <a href=\"https://juejin.im/post/5c31b814f265da612b13bf23#heading-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 渲染器了解一下</a> 這篇文章，有實際的例子與詳細程式碼講解。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>一不小心洋洋灑灑紀錄了一堆，但透過製作 custom react renderer，一步步把整個流程與其中用到的函式都釐清用途後，對於 react 在進行 reconciliation 與 rendering 的流程多了不少了解，也不再對 React 為什麼能套用在這麼多不同的環境中感到神秘了，算是很不錯的收穫！有耐心看完的讀者若發現錯誤或是不清楚的地方，歡迎留言告知指教。</p>\n<h2 id=\"資料來源\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E4%BE%86%E6%BA%90\" aria-label=\"資料來源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料來源</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=CGpMlWVcHok\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a Custom React Renderer</a></li>\n<li><a href=\"https://github.com/nitin42/Making-a-custom-React-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Making-a-custom-React-renderer</a></li>\n<li><a href=\"https://blog.atulr.com/react-custom-renderer-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">⚛️👆Beginners guide to React Renderers. How to build your own renderer from scratch?</a></li>\n<li><a href=\"https://juejin.im/post/5c31b814f265da612b13bf23#heading-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 渲染器了解一下?</a></li>\n<li><a href=\"https://github.com/facebook/react/tree/60016c448bb7d19fc989acd05dda5aca2e124381/packages/react-reconciler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">facebook/react-reconciler</a></li>\n<li><a href=\"https://github.com/chentsulin/awesome-react-renderer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome-react-renderer</a></li>\n</ol>","id":"3000840e-b58a-5470-a668-03d2f4d15680","fields":{"slug":"custom-react-renderer-pttx"},"frontmatter":{"date":"2020-02-26T19:38:40.000Z","title":"製作 Custom React renderer - 用 React 寫 ppt","tags":["web","react","renderer"],"type":"tech","slug":"custom-react-renderer-pttx"},"timeToRead":16},"type":"tech"}},"staticQueryHashes":["2123680655"]}