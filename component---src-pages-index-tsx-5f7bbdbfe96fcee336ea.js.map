{"version":3,"sources":["webpack:///./node_modules/polished/lib/color/lighten.js","webpack:///./src/pages/index.tsx"],"names":["exports","__esModule","default","_curry","_interopRequireDefault","_guard","_parseToHsl","_toColorString","obj","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","lighten","amount","color","hslColor","lightness","parseFloat","_default","module","Homepage","styled","main","media","tablet","phone","GridRow","div","props","justifyContent","background","rgba","darken","theme","colors","primary","grey","dark","white","HomepageContent","center","InfoSection","PointerH2","h2","selected","IndexPage","data","allMarkdownRemark","edges","useState","filter","node","frontmatter","type","selectedEdges","setSelectedEdges","fragmentTag","useEffect","tags","includes","fullWidth","title","config","siteTitle","to","big","width","height","viewBox","xmlns","d","src","onClick","slice","map","post","date","excerpt","timeToRead","slug","fields","className"],"mappings":"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","file":"component---src-pages-index-tsx-5f7bbdbfe96fcee336ea.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _curry = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_curry\"));\n\nvar _guard = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_guard\"));\n\nvar _parseToHsl = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"./parseToHsl\"));\n\nvar _toColorString = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"./toColorString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * Returns a string value for the lightened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: lighten(0.2, '#CCCD64'),\n *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${lighten(0.2, '#FFCD64')};\n *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e5e6b1\";\n *   background: \"rgba(229,230,177,0.7)\";\n * }\n */\n\n\nfunction lighten(amount, color) {\n  var hslColor = (0, _parseToHsl.default)(color);\n  return (0, _toColorString.default)(_extends({}, hslColor, {\n    lightness: (0, _guard.default)(0, 1, hslColor.lightness + parseFloat(amount))\n  }));\n} // prettier-ignore\n\n\nvar curriedLighten = /*#__PURE__*/(0, _curry.default\n/* ::<number | string, string, string> */\n)(lighten);\nvar _default = curriedLighten;\nexports.default = _default;\nmodule.exports = exports.default;","import React, { useState, useEffect } from 'react';\nimport { Link, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { Layout, Wrapper, Button, BMCButton, FragmentTagBtnGroup, Article } from '../components';\nimport PageProps from '../models/PageProps';\nimport { Edges } from '../models/AllMarkdownRemark';\nimport Helmet from 'react-helmet';\nimport config from '../../config/SiteConfig';\nimport { media } from '../utils/media';\nimport rgba from 'polished/lib/color/rgba';\nimport darken from 'polished/lib/color/darken';\nimport lighten from 'polished/lib/color/lighten';\n\nconst Homepage = styled.main`\n  display: flex;\n  height: 100vh;\n  flex-direction: row;\n  @media ${media.tablet} {\n    height: 100%;\n    flex-direction: column;\n  }\n  @media ${media.phone} {\n    height: 100%;\n    flex-direction: column;\n  }\n`;\n\nconst GridRow: any = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: ${(props: any) => props.justifyContent || 'flex-start'};\n  align-items: center;\n  background: ${(props: any) =>\n    props.background\n      ? `linear-gradient(\n      -185deg,\n      ${rgba(darken(0.1, props.theme.colors.primary), 0)}, \n      ${rgba(lighten(0.1, props.theme.colors.grey.dark), 0.9)}), url(/assets/egypt.jpg) no-repeat`\n      : null};\n  background-size: cover;\n  background-position: center;\n  padding: 2rem 4rem;\n  color: ${(props: any) => (props.background ? props.theme.colors.white : null)};\n  h1 {\n    color: ${(props: any) => (props.background ? props.theme.colors.white : null)};\n  }\n  @media ${media.tablet} {\n    padding: 3rem 3rem;\n    justify-content: center;\n  }\n  @media ${media.phone} {\n    padding: 2rem 1.5rem;\n  }\n`;\n\nconst HomepageContent: any = styled.div`\n  max-width: 30rem;\n  text-align: ${(props: any) => (props.center ? 'center' : 'left')};\n`;\n\nconst InfoSection: any = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  a {\n    flex-shrink: 0;\n  }\n`;\n\nconst PointerH2: any = styled.h2<{ selected: boolean }>`\n  cursor: pointer;\n  display: inline-block;\n  padding-right: 20px;\n  &:hover {\n    color: #ff4c4c;\n  }\n  text-decoration: ${props => props.selected && 'underline'};\n`;\n\nconst IndexPage = ({ data }: PageProps) => {\n  const { edges = [] } = data.allMarkdownRemark;\n  const [selectedEdges, setSelectedEdges] = useState({\n    edges: edges.filter(i => i.node.frontmatter.type === 'tech'),\n    type: 'tech',\n  });\n  const [fragmentTag, setFragmentTag] = useState<'all' | 'life' | 'wife'>('all');\n  useEffect(() => {\n    if (fragmentTag === 'all') return;\n    setSelectedEdges({ edges: edges.filter(i => i.node.frontmatter.tags.includes(fragmentTag)), type: selectedEdges.type });\n    // if (selectedEdges.type === 'fragments') {\n    //   const tags = [].concat.apply(\n    //     [],\n    //     // @ts-ignore\n    //     selectedEdges.edges.map(edge => edge.node.frontmatter.tags),\n    //   );\n    //   setFragmentTags(Array.from(new Set(tags)));\n    // } else {\n    //   setFragmentTags([]);\n    // }\n  }, [fragmentTag]);\n  return (\n    <Layout>\n      <Wrapper fullWidth={true}>\n        <Helmet title={`Homepage | ${config.siteTitle}`} />\n        <Homepage>\n          <GridRow background={true} justifyContent=\"center\">\n            <HomepageContent center={true}>\n              <h1>Huang, Shuo-Han (@ArvinHv)</h1>\n              <p>I write about JavaScript, TypeScript, React, NodeJs, CSS, HTML and thoughts</p>\n              <InfoSection>\n                <Link to=\"/about\">\n                  <Button big={true}>\n                    <svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M1764 11q33 24 27 64l-256 1536q-5 29-32 45-14 8-31 8-11 0-24-5l-453-185-242 295q-18 23-49 23-13 0-22-4-19-7-30.5-23.5t-11.5-36.5v-349l864-1059-1069 925-395-162q-37-14-40-55-2-40 32-59l1664-960q15-9 32-9 20 0 36 11z\" />\n                    </svg>\n                    About\n                  </Button>\n                </Link>\n                <Link to=\"/now\">\n                  <Button big={true}>\n                    <img src=\"/assets/live-icon.svg\" />\n                    Now\n                  </Button>\n                </Link>\n              </InfoSection>\n            </HomepageContent>\n          </GridRow>\n          <GridRow>\n            <HomepageContent>\n              <hr />\n              <h2>Latest </h2>\n              <section>\n                <PointerH2\n                  selected={selectedEdges.type === 'tech'}\n                  onClick={() => setSelectedEdges({ edges: edges.filter(i => i.node.frontmatter.type === 'tech'), type: 'tech' })}\n                >\n                  Tech\n                </PointerH2>\n                <PointerH2\n                  selected={selectedEdges.type === 'fragments'}\n                  onClick={() => setSelectedEdges({ edges: edges.filter(i => i.node.frontmatter.type === 'fragments'), type: 'fragments' })}\n                >\n                  Fragments\n                </PointerH2>\n                {/* {selectedEdges.type === 'fragments' && <FragmentTagBtnGroup clickHandler={setFragmentTag} />} */}\n              </section>\n              {selectedEdges.edges.slice(0, 1).map((post: Edges) => (\n                <Article\n                  title={post.node.frontmatter.title}\n                  date={post.node.frontmatter.date}\n                  excerpt={post.node.excerpt}\n                  timeToRead={post.node.timeToRead}\n                  type={post.node.frontmatter.type}\n                  slug={post.node.fields.slug}\n                  key={post.node.fields.slug}\n                />\n              ))}\n              <p className={'textRight'}>\n                <Link to={`${selectedEdges.type}`}>All articles ({selectedEdges.edges.length})</Link>\n              </p>\n            </HomepageContent>\n          </GridRow>\n        </Homepage>\n      </Wrapper>\n      <BMCButton />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const IndexQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MM-DD-YYYY\")\n            tags\n            type\n          }\n          excerpt(pruneLength: 200)\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}